#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NcPlatformSdk

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function NcPlatformSdk.GenericPlatformNcWebBrowser.BroadcastOnBeforePopup
// 0x0020 (0x0020 - 0x0000)
struct GenericPlatformNcWebBrowser_BroadcastOnBeforePopup final
{
public:
	class FString                                 InUrl;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Frame;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericPlatformNcWebBrowser_BroadcastOnBeforePopup) == 0x000008, "Wrong alignment on GenericPlatformNcWebBrowser_BroadcastOnBeforePopup");
static_assert(sizeof(GenericPlatformNcWebBrowser_BroadcastOnBeforePopup) == 0x000020, "Wrong size on GenericPlatformNcWebBrowser_BroadcastOnBeforePopup");
static_assert(offsetof(GenericPlatformNcWebBrowser_BroadcastOnBeforePopup, InUrl) == 0x000000, "Member 'GenericPlatformNcWebBrowser_BroadcastOnBeforePopup::InUrl' has a wrong offset!");
static_assert(offsetof(GenericPlatformNcWebBrowser_BroadcastOnBeforePopup, Frame) == 0x000010, "Member 'GenericPlatformNcWebBrowser_BroadcastOnBeforePopup::Frame' has a wrong offset!");

// Function NcPlatformSdk.GenericPlatformNcWebBrowser.BroadcastOnUrlChanged
// 0x0018 (0x0018 - 0x0000)
struct GenericPlatformNcWebBrowser_BroadcastOnUrlChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericPlatformNcWebBrowser_BroadcastOnUrlChanged) == 0x000008, "Wrong alignment on GenericPlatformNcWebBrowser_BroadcastOnUrlChanged");
static_assert(sizeof(GenericPlatformNcWebBrowser_BroadcastOnUrlChanged) == 0x000018, "Wrong size on GenericPlatformNcWebBrowser_BroadcastOnUrlChanged");
static_assert(offsetof(GenericPlatformNcWebBrowser_BroadcastOnUrlChanged, InText) == 0x000000, "Member 'GenericPlatformNcWebBrowser_BroadcastOnUrlChanged::InText' has a wrong offset!");

// Function NcPlatformSdk.GenericPlatformNcWebBrowser.BroadcastOnWebBrowserClosed
// 0x0018 (0x0018 - 0x0000)
struct GenericPlatformNcWebBrowser_BroadcastOnWebBrowserClosed final
{
public:
	bool                                          HasError;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMsg;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericPlatformNcWebBrowser_BroadcastOnWebBrowserClosed) == 0x000008, "Wrong alignment on GenericPlatformNcWebBrowser_BroadcastOnWebBrowserClosed");
static_assert(sizeof(GenericPlatformNcWebBrowser_BroadcastOnWebBrowserClosed) == 0x000018, "Wrong size on GenericPlatformNcWebBrowser_BroadcastOnWebBrowserClosed");
static_assert(offsetof(GenericPlatformNcWebBrowser_BroadcastOnWebBrowserClosed, HasError) == 0x000000, "Member 'GenericPlatformNcWebBrowser_BroadcastOnWebBrowserClosed::HasError' has a wrong offset!");
static_assert(offsetof(GenericPlatformNcWebBrowser_BroadcastOnWebBrowserClosed, ErrorMsg) == 0x000008, "Member 'GenericPlatformNcWebBrowser_BroadcastOnWebBrowserClosed::ErrorMsg' has a wrong offset!");

// DelegateFunction NcPlatformSdk.GenericPlatformNcWebBrowser.OnBeforePopup__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct GenericPlatformNcWebBrowser_OnBeforePopup__DelegateSignature final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Frame;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericPlatformNcWebBrowser_OnBeforePopup__DelegateSignature) == 0x000008, "Wrong alignment on GenericPlatformNcWebBrowser_OnBeforePopup__DelegateSignature");
static_assert(sizeof(GenericPlatformNcWebBrowser_OnBeforePopup__DelegateSignature) == 0x000020, "Wrong size on GenericPlatformNcWebBrowser_OnBeforePopup__DelegateSignature");
static_assert(offsetof(GenericPlatformNcWebBrowser_OnBeforePopup__DelegateSignature, URL) == 0x000000, "Member 'GenericPlatformNcWebBrowser_OnBeforePopup__DelegateSignature::URL' has a wrong offset!");
static_assert(offsetof(GenericPlatformNcWebBrowser_OnBeforePopup__DelegateSignature, Frame) == 0x000010, "Member 'GenericPlatformNcWebBrowser_OnBeforePopup__DelegateSignature::Frame' has a wrong offset!");

// DelegateFunction NcPlatformSdk.GenericPlatformNcWebBrowser.OnUrlChanged__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct GenericPlatformNcWebBrowser_OnUrlChanged__DelegateSignature final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericPlatformNcWebBrowser_OnUrlChanged__DelegateSignature) == 0x000008, "Wrong alignment on GenericPlatformNcWebBrowser_OnUrlChanged__DelegateSignature");
static_assert(sizeof(GenericPlatformNcWebBrowser_OnUrlChanged__DelegateSignature) == 0x000018, "Wrong size on GenericPlatformNcWebBrowser_OnUrlChanged__DelegateSignature");
static_assert(offsetof(GenericPlatformNcWebBrowser_OnUrlChanged__DelegateSignature, Text) == 0x000000, "Member 'GenericPlatformNcWebBrowser_OnUrlChanged__DelegateSignature::Text' has a wrong offset!");

// DelegateFunction NcPlatformSdk.GenericPlatformNcWebBrowser.OnWebBrowserClosed__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct GenericPlatformNcWebBrowser_OnWebBrowserClosed__DelegateSignature final
{
public:
	bool                                          HasError;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMsg;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericPlatformNcWebBrowser_OnWebBrowserClosed__DelegateSignature) == 0x000008, "Wrong alignment on GenericPlatformNcWebBrowser_OnWebBrowserClosed__DelegateSignature");
static_assert(sizeof(GenericPlatformNcWebBrowser_OnWebBrowserClosed__DelegateSignature) == 0x000018, "Wrong size on GenericPlatformNcWebBrowser_OnWebBrowserClosed__DelegateSignature");
static_assert(offsetof(GenericPlatformNcWebBrowser_OnWebBrowserClosed__DelegateSignature, HasError) == 0x000000, "Member 'GenericPlatformNcWebBrowser_OnWebBrowserClosed__DelegateSignature::HasError' has a wrong offset!");
static_assert(offsetof(GenericPlatformNcWebBrowser_OnWebBrowserClosed__DelegateSignature, ErrorMsg) == 0x000008, "Member 'GenericPlatformNcWebBrowser_OnWebBrowserClosed__DelegateSignature::ErrorMsg' has a wrong offset!");

// Function NcPlatformSdk.LoginViaPlayncWidget.OnTextChanged
// 0x0018 (0x0018 - 0x0000)
struct LoginViaPlayncWidget_OnTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginViaPlayncWidget_OnTextChanged) == 0x000008, "Wrong alignment on LoginViaPlayncWidget_OnTextChanged");
static_assert(sizeof(LoginViaPlayncWidget_OnTextChanged) == 0x000018, "Wrong size on LoginViaPlayncWidget_OnTextChanged");
static_assert(offsetof(LoginViaPlayncWidget_OnTextChanged, Text) == 0x000000, "Member 'LoginViaPlayncWidget_OnTextChanged::Text' has a wrong offset!");

// Function NcPlatformSdk.NcInputTextAlertWidget.OnTextChanged
// 0x0018 (0x0018 - 0x0000)
struct NcInputTextAlertWidget_OnTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcInputTextAlertWidget_OnTextChanged) == 0x000008, "Wrong alignment on NcInputTextAlertWidget_OnTextChanged");
static_assert(sizeof(NcInputTextAlertWidget_OnTextChanged) == 0x000018, "Wrong size on NcInputTextAlertWidget_OnTextChanged");
static_assert(offsetof(NcInputTextAlertWidget_OnTextChanged, Text) == 0x000000, "Member 'NcInputTextAlertWidget_OnTextChanged::Text' has a wrong offset!");

// Function NcPlatformSdk.NcAuthenticationNumberInputWidget.UpdateWarningState
// 0x0001 (0x0001 - 0x0000)
struct NcAuthenticationNumberInputWidget_UpdateWarningState final
{
public:
	bool                                          bIsWarning;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcAuthenticationNumberInputWidget_UpdateWarningState) == 0x000001, "Wrong alignment on NcAuthenticationNumberInputWidget_UpdateWarningState");
static_assert(sizeof(NcAuthenticationNumberInputWidget_UpdateWarningState) == 0x000001, "Wrong size on NcAuthenticationNumberInputWidget_UpdateWarningState");
static_assert(offsetof(NcAuthenticationNumberInputWidget_UpdateWarningState, bIsWarning) == 0x000000, "Member 'NcAuthenticationNumberInputWidget_UpdateWarningState::bIsWarning' has a wrong offset!");

// Function NcPlatformSdk.NcCheckBox.BroadcastCheckStateChanged
// 0x0001 (0x0001 - 0x0000)
struct NcCheckBox_BroadcastCheckStateChanged final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcCheckBox_BroadcastCheckStateChanged) == 0x000001, "Wrong alignment on NcCheckBox_BroadcastCheckStateChanged");
static_assert(sizeof(NcCheckBox_BroadcastCheckStateChanged) == 0x000001, "Wrong size on NcCheckBox_BroadcastCheckStateChanged");
static_assert(offsetof(NcCheckBox_BroadcastCheckStateChanged, bIsChecked) == 0x000000, "Member 'NcCheckBox_BroadcastCheckStateChanged::bIsChecked' has a wrong offset!");

// Function NcPlatformSdk.NcCountrySelectWidget.AddCountry
// 0x0020 (0x0020 - 0x0000)
struct NcCountrySelectWidget_AddCountry final
{
public:
	class FString                                 CountryCode;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnglishName;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcCountrySelectWidget_AddCountry) == 0x000008, "Wrong alignment on NcCountrySelectWidget_AddCountry");
static_assert(sizeof(NcCountrySelectWidget_AddCountry) == 0x000020, "Wrong size on NcCountrySelectWidget_AddCountry");
static_assert(offsetof(NcCountrySelectWidget_AddCountry, CountryCode) == 0x000000, "Member 'NcCountrySelectWidget_AddCountry::CountryCode' has a wrong offset!");
static_assert(offsetof(NcCountrySelectWidget_AddCountry, EnglishName) == 0x000010, "Member 'NcCountrySelectWidget_AddCountry::EnglishName' has a wrong offset!");

// Function NcPlatformSdk.NcCountrySelectWidget.GetSelectedCountry
// 0x0010 (0x0010 - 0x0000)
struct NcCountrySelectWidget_GetSelectedCountry final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcCountrySelectWidget_GetSelectedCountry) == 0x000008, "Wrong alignment on NcCountrySelectWidget_GetSelectedCountry");
static_assert(sizeof(NcCountrySelectWidget_GetSelectedCountry) == 0x000010, "Wrong size on NcCountrySelectWidget_GetSelectedCountry");
static_assert(offsetof(NcCountrySelectWidget_GetSelectedCountry, ReturnValue) == 0x000000, "Member 'NcCountrySelectWidget_GetSelectedCountry::ReturnValue' has a wrong offset!");

// Function NcPlatformSdk.NcCountrySelectWidget.OnCountrySelectChanged
// 0x0018 (0x0018 - 0x0000)
struct NcCountrySelectWidget_OnCountrySelectChanged final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NcCountrySelectWidget_OnCountrySelectChanged) == 0x000008, "Wrong alignment on NcCountrySelectWidget_OnCountrySelectChanged");
static_assert(sizeof(NcCountrySelectWidget_OnCountrySelectChanged) == 0x000018, "Wrong size on NcCountrySelectWidget_OnCountrySelectChanged");
static_assert(offsetof(NcCountrySelectWidget_OnCountrySelectChanged, SelectedItem) == 0x000000, "Member 'NcCountrySelectWidget_OnCountrySelectChanged::SelectedItem' has a wrong offset!");
static_assert(offsetof(NcCountrySelectWidget_OnCountrySelectChanged, SelectionType) == 0x000010, "Member 'NcCountrySelectWidget_OnCountrySelectChanged::SelectionType' has a wrong offset!");

// Function NcPlatformSdk.NcCountrySelectWidget.SetInitialCountry
// 0x0010 (0x0010 - 0x0000)
struct NcCountrySelectWidget_SetInitialCountry final
{
public:
	class FString                                 CountryCode;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcCountrySelectWidget_SetInitialCountry) == 0x000008, "Wrong alignment on NcCountrySelectWidget_SetInitialCountry");
static_assert(sizeof(NcCountrySelectWidget_SetInitialCountry) == 0x000010, "Wrong size on NcCountrySelectWidget_SetInitialCountry");
static_assert(offsetof(NcCountrySelectWidget_SetInitialCountry, CountryCode) == 0x000000, "Member 'NcCountrySelectWidget_SetInitialCountry::CountryCode' has a wrong offset!");

// Function NcPlatformSdk.NcGeneralWebViewWidget.BroadcastOnBeforePopup
// 0x0020 (0x0020 - 0x0000)
struct NcGeneralWebViewWidget_BroadcastOnBeforePopup final
{
public:
	class FString                                 InUrl;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Frame;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcGeneralWebViewWidget_BroadcastOnBeforePopup) == 0x000008, "Wrong alignment on NcGeneralWebViewWidget_BroadcastOnBeforePopup");
static_assert(sizeof(NcGeneralWebViewWidget_BroadcastOnBeforePopup) == 0x000020, "Wrong size on NcGeneralWebViewWidget_BroadcastOnBeforePopup");
static_assert(offsetof(NcGeneralWebViewWidget_BroadcastOnBeforePopup, InUrl) == 0x000000, "Member 'NcGeneralWebViewWidget_BroadcastOnBeforePopup::InUrl' has a wrong offset!");
static_assert(offsetof(NcGeneralWebViewWidget_BroadcastOnBeforePopup, Frame) == 0x000010, "Member 'NcGeneralWebViewWidget_BroadcastOnBeforePopup::Frame' has a wrong offset!");

// Function NcPlatformSdk.NcGeneralWebViewWidget.BroadcastOnUrlChanged
// 0x0018 (0x0018 - 0x0000)
struct NcGeneralWebViewWidget_BroadcastOnUrlChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcGeneralWebViewWidget_BroadcastOnUrlChanged) == 0x000008, "Wrong alignment on NcGeneralWebViewWidget_BroadcastOnUrlChanged");
static_assert(sizeof(NcGeneralWebViewWidget_BroadcastOnUrlChanged) == 0x000018, "Wrong size on NcGeneralWebViewWidget_BroadcastOnUrlChanged");
static_assert(offsetof(NcGeneralWebViewWidget_BroadcastOnUrlChanged, InText) == 0x000000, "Member 'NcGeneralWebViewWidget_BroadcastOnUrlChanged::InText' has a wrong offset!");

// Function NcPlatformSdk.NcGeneralWebViewWidget.ExecuteJavascript
// 0x0010 (0x0010 - 0x0000)
struct NcGeneralWebViewWidget_ExecuteJavascript final
{
public:
	class FString                                 JavascriptExp;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcGeneralWebViewWidget_ExecuteJavascript) == 0x000008, "Wrong alignment on NcGeneralWebViewWidget_ExecuteJavascript");
static_assert(sizeof(NcGeneralWebViewWidget_ExecuteJavascript) == 0x000010, "Wrong size on NcGeneralWebViewWidget_ExecuteJavascript");
static_assert(offsetof(NcGeneralWebViewWidget_ExecuteJavascript, JavascriptExp) == 0x000000, "Member 'NcGeneralWebViewWidget_ExecuteJavascript::JavascriptExp' has a wrong offset!");

// Function NcPlatformSdk.NcGeneralWebViewWidget.HandleOnWebBrowserClosed
// 0x0018 (0x0018 - 0x0000)
struct NcGeneralWebViewWidget_HandleOnWebBrowserClosed final
{
public:
	bool                                          HasError;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMsg;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcGeneralWebViewWidget_HandleOnWebBrowserClosed) == 0x000008, "Wrong alignment on NcGeneralWebViewWidget_HandleOnWebBrowserClosed");
static_assert(sizeof(NcGeneralWebViewWidget_HandleOnWebBrowserClosed) == 0x000018, "Wrong size on NcGeneralWebViewWidget_HandleOnWebBrowserClosed");
static_assert(offsetof(NcGeneralWebViewWidget_HandleOnWebBrowserClosed, HasError) == 0x000000, "Member 'NcGeneralWebViewWidget_HandleOnWebBrowserClosed::HasError' has a wrong offset!");
static_assert(offsetof(NcGeneralWebViewWidget_HandleOnWebBrowserClosed, ErrorMsg) == 0x000008, "Member 'NcGeneralWebViewWidget_HandleOnWebBrowserClosed::ErrorMsg' has a wrong offset!");

// Function NcPlatformSdk.NcGeneralWebViewWidget.LoadURL
// 0x0010 (0x0010 - 0x0000)
struct NcGeneralWebViewWidget_LoadURL final
{
public:
	class FString                                 InUrl;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcGeneralWebViewWidget_LoadURL) == 0x000008, "Wrong alignment on NcGeneralWebViewWidget_LoadURL");
static_assert(sizeof(NcGeneralWebViewWidget_LoadURL) == 0x000010, "Wrong size on NcGeneralWebViewWidget_LoadURL");
static_assert(offsetof(NcGeneralWebViewWidget_LoadURL, InUrl) == 0x000000, "Member 'NcGeneralWebViewWidget_LoadURL::InUrl' has a wrong offset!");

// Function NcPlatformSdk.NcGeneralWebViewWidget.SetSupportsTransparency
// 0x0001 (0x0001 - 0x0000)
struct NcGeneralWebViewWidget_SetSupportsTransparency final
{
public:
	bool                                          InSupportsTransparency;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcGeneralWebViewWidget_SetSupportsTransparency) == 0x000001, "Wrong alignment on NcGeneralWebViewWidget_SetSupportsTransparency");
static_assert(sizeof(NcGeneralWebViewWidget_SetSupportsTransparency) == 0x000001, "Wrong size on NcGeneralWebViewWidget_SetSupportsTransparency");
static_assert(offsetof(NcGeneralWebViewWidget_SetSupportsTransparency, InSupportsTransparency) == 0x000000, "Member 'NcGeneralWebViewWidget_SetSupportsTransparency::InSupportsTransparency' has a wrong offset!");

// Function NcPlatformSdk.NcGeneralWebViewWidget.Show
// 0x0004 (0x0004 - 0x0000)
struct NcGeneralWebViewWidget_Show final
{
public:
	int32                                         InZOrder;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcGeneralWebViewWidget_Show) == 0x000004, "Wrong alignment on NcGeneralWebViewWidget_Show");
static_assert(sizeof(NcGeneralWebViewWidget_Show) == 0x000004, "Wrong size on NcGeneralWebViewWidget_Show");
static_assert(offsetof(NcGeneralWebViewWidget_Show, InZOrder) == 0x000000, "Member 'NcGeneralWebViewWidget_Show::InZOrder' has a wrong offset!");

// Function NcPlatformSdk.NcGeneralWebViewWidget.GetUrl
// 0x0010 (0x0010 - 0x0000)
struct NcGeneralWebViewWidget_GetUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcGeneralWebViewWidget_GetUrl) == 0x000008, "Wrong alignment on NcGeneralWebViewWidget_GetUrl");
static_assert(sizeof(NcGeneralWebViewWidget_GetUrl) == 0x000010, "Wrong size on NcGeneralWebViewWidget_GetUrl");
static_assert(offsetof(NcGeneralWebViewWidget_GetUrl, ReturnValue) == 0x000000, "Member 'NcGeneralWebViewWidget_GetUrl::ReturnValue' has a wrong offset!");

// Function NcPlatformSdk.NcInputPhoneNumberWidget.OnCountryComboBoxChanged
// 0x0018 (0x0018 - 0x0000)
struct NcInputPhoneNumberWidget_OnCountryComboBoxChanged final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NcInputPhoneNumberWidget_OnCountryComboBoxChanged) == 0x000008, "Wrong alignment on NcInputPhoneNumberWidget_OnCountryComboBoxChanged");
static_assert(sizeof(NcInputPhoneNumberWidget_OnCountryComboBoxChanged) == 0x000018, "Wrong size on NcInputPhoneNumberWidget_OnCountryComboBoxChanged");
static_assert(offsetof(NcInputPhoneNumberWidget_OnCountryComboBoxChanged, SelectedItem) == 0x000000, "Member 'NcInputPhoneNumberWidget_OnCountryComboBoxChanged::SelectedItem' has a wrong offset!");
static_assert(offsetof(NcInputPhoneNumberWidget_OnCountryComboBoxChanged, SelectionType) == 0x000010, "Member 'NcInputPhoneNumberWidget_OnCountryComboBoxChanged::SelectionType' has a wrong offset!");

// Function NcPlatformSdk.NcInputPhoneNumberWidget.OnPhoneNumberInputTextChanged
// 0x0018 (0x0018 - 0x0000)
struct NcInputPhoneNumberWidget_OnPhoneNumberInputTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcInputPhoneNumberWidget_OnPhoneNumberInputTextChanged) == 0x000008, "Wrong alignment on NcInputPhoneNumberWidget_OnPhoneNumberInputTextChanged");
static_assert(sizeof(NcInputPhoneNumberWidget_OnPhoneNumberInputTextChanged) == 0x000018, "Wrong size on NcInputPhoneNumberWidget_OnPhoneNumberInputTextChanged");
static_assert(offsetof(NcInputPhoneNumberWidget_OnPhoneNumberInputTextChanged, Text) == 0x000000, "Member 'NcInputPhoneNumberWidget_OnPhoneNumberInputTextChanged::Text' has a wrong offset!");

// Function NcPlatformSdk.NcPinCodeInputWidget.DisplayPinCode
// 0x0010 (0x0010 - 0x0000)
struct NcPinCodeInputWidget_DisplayPinCode final
{
public:
	class FString                                 PinCode;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcPinCodeInputWidget_DisplayPinCode) == 0x000008, "Wrong alignment on NcPinCodeInputWidget_DisplayPinCode");
static_assert(sizeof(NcPinCodeInputWidget_DisplayPinCode) == 0x000010, "Wrong size on NcPinCodeInputWidget_DisplayPinCode");
static_assert(offsetof(NcPinCodeInputWidget_DisplayPinCode, PinCode) == 0x000000, "Member 'NcPinCodeInputWidget_DisplayPinCode::PinCode' has a wrong offset!");

// Function NcPlatformSdk.NcPinCodeInputWidget.OnTextChanged
// 0x0018 (0x0018 - 0x0000)
struct NcPinCodeInputWidget_OnTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcPinCodeInputWidget_OnTextChanged) == 0x000008, "Wrong alignment on NcPinCodeInputWidget_OnTextChanged");
static_assert(sizeof(NcPinCodeInputWidget_OnTextChanged) == 0x000018, "Wrong size on NcPinCodeInputWidget_OnTextChanged");
static_assert(offsetof(NcPinCodeInputWidget_OnTextChanged, Text) == 0x000000, "Member 'NcPinCodeInputWidget_OnTextChanged::Text' has a wrong offset!");

// Function NcPlatformSdk.NcShowAgreementSlotWidget.BroadcastOnCheckStateChanged
// 0x0001 (0x0001 - 0x0000)
struct NcShowAgreementSlotWidget_BroadcastOnCheckStateChanged final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcShowAgreementSlotWidget_BroadcastOnCheckStateChanged) == 0x000001, "Wrong alignment on NcShowAgreementSlotWidget_BroadcastOnCheckStateChanged");
static_assert(sizeof(NcShowAgreementSlotWidget_BroadcastOnCheckStateChanged) == 0x000001, "Wrong size on NcShowAgreementSlotWidget_BroadcastOnCheckStateChanged");
static_assert(offsetof(NcShowAgreementSlotWidget_BroadcastOnCheckStateChanged, bIsChecked) == 0x000000, "Member 'NcShowAgreementSlotWidget_BroadcastOnCheckStateChanged::bIsChecked' has a wrong offset!");

// Function NcPlatformSdk.NcShowCampaignWidget.BroadcastOnCampaignWebBrowserClosed
// 0x0018 (0x0018 - 0x0000)
struct NcShowCampaignWidget_BroadcastOnCampaignWebBrowserClosed final
{
public:
	bool                                          HasError;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMsg;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcShowCampaignWidget_BroadcastOnCampaignWebBrowserClosed) == 0x000008, "Wrong alignment on NcShowCampaignWidget_BroadcastOnCampaignWebBrowserClosed");
static_assert(sizeof(NcShowCampaignWidget_BroadcastOnCampaignWebBrowserClosed) == 0x000018, "Wrong size on NcShowCampaignWidget_BroadcastOnCampaignWebBrowserClosed");
static_assert(offsetof(NcShowCampaignWidget_BroadcastOnCampaignWebBrowserClosed, HasError) == 0x000000, "Member 'NcShowCampaignWidget_BroadcastOnCampaignWebBrowserClosed::HasError' has a wrong offset!");
static_assert(offsetof(NcShowCampaignWidget_BroadcastOnCampaignWebBrowserClosed, ErrorMsg) == 0x000008, "Member 'NcShowCampaignWidget_BroadcastOnCampaignWebBrowserClosed::ErrorMsg' has a wrong offset!");

// Function NcPlatformSdk.NcShowCampaignWidget.GetVisibleStartTime
// 0x0008 (0x0008 - 0x0000)
struct NcShowCampaignWidget_GetVisibleStartTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcShowCampaignWidget_GetVisibleStartTime) == 0x000008, "Wrong alignment on NcShowCampaignWidget_GetVisibleStartTime");
static_assert(sizeof(NcShowCampaignWidget_GetVisibleStartTime) == 0x000008, "Wrong size on NcShowCampaignWidget_GetVisibleStartTime");
static_assert(offsetof(NcShowCampaignWidget_GetVisibleStartTime, ReturnValue) == 0x000000, "Member 'NcShowCampaignWidget_GetVisibleStartTime::ReturnValue' has a wrong offset!");

// Function NcPlatformSdk.NcShowCampaignWidget.LoadCampaignImage
// 0x0010 (0x0010 - 0x0000)
struct NcShowCampaignWidget_LoadCampaignImage final
{
public:
	class FString                                 ImageUrl;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcShowCampaignWidget_LoadCampaignImage) == 0x000008, "Wrong alignment on NcShowCampaignWidget_LoadCampaignImage");
static_assert(sizeof(NcShowCampaignWidget_LoadCampaignImage) == 0x000010, "Wrong size on NcShowCampaignWidget_LoadCampaignImage");
static_assert(offsetof(NcShowCampaignWidget_LoadCampaignImage, ImageUrl) == 0x000000, "Member 'NcShowCampaignWidget_LoadCampaignImage::ImageUrl' has a wrong offset!");

// Function NcPlatformSdk.NcShowCampaignWidget.OnImageClickAction
// 0x0160 (0x0160 - 0x0000)
struct NcShowCampaignWidget_OnImageClickAction final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcShowCampaignWidget_OnImageClickAction) == 0x000008, "Wrong alignment on NcShowCampaignWidget_OnImageClickAction");
static_assert(sizeof(NcShowCampaignWidget_OnImageClickAction) == 0x000160, "Wrong size on NcShowCampaignWidget_OnImageClickAction");
static_assert(offsetof(NcShowCampaignWidget_OnImageClickAction, MyGeometry) == 0x000000, "Member 'NcShowCampaignWidget_OnImageClickAction::MyGeometry' has a wrong offset!");
static_assert(offsetof(NcShowCampaignWidget_OnImageClickAction, MouseEvent) == 0x000038, "Member 'NcShowCampaignWidget_OnImageClickAction::MouseEvent' has a wrong offset!");
static_assert(offsetof(NcShowCampaignWidget_OnImageClickAction, ReturnValue) == 0x0000A8, "Member 'NcShowCampaignWidget_OnImageClickAction::ReturnValue' has a wrong offset!");

// Function NcPlatformSdk.NcShowCampaignWidget.SetTemplete
// 0x0028 (0x0028 - 0x0000)
struct NcShowCampaignWidget_SetTemplete final
{
public:
	int32                                         TemplateType;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TitleString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExceptTitleString;                                 // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcShowCampaignWidget_SetTemplete) == 0x000008, "Wrong alignment on NcShowCampaignWidget_SetTemplete");
static_assert(sizeof(NcShowCampaignWidget_SetTemplete) == 0x000028, "Wrong size on NcShowCampaignWidget_SetTemplete");
static_assert(offsetof(NcShowCampaignWidget_SetTemplete, TemplateType) == 0x000000, "Member 'NcShowCampaignWidget_SetTemplete::TemplateType' has a wrong offset!");
static_assert(offsetof(NcShowCampaignWidget_SetTemplete, TitleString) == 0x000008, "Member 'NcShowCampaignWidget_SetTemplete::TitleString' has a wrong offset!");
static_assert(offsetof(NcShowCampaignWidget_SetTemplete, ExceptTitleString) == 0x000018, "Member 'NcShowCampaignWidget_SetTemplete::ExceptTitleString' has a wrong offset!");

// Function NcPlatformSdk.NcShowLoginProviderCircleWidget.SetProviderImage
// 0x0008 (0x0008 - 0x0000)
struct NcShowLoginProviderCircleWidget_SetProviderImage final
{
public:
	class UTexture2D*                             InImage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcShowLoginProviderCircleWidget_SetProviderImage) == 0x000008, "Wrong alignment on NcShowLoginProviderCircleWidget_SetProviderImage");
static_assert(sizeof(NcShowLoginProviderCircleWidget_SetProviderImage) == 0x000008, "Wrong size on NcShowLoginProviderCircleWidget_SetProviderImage");
static_assert(offsetof(NcShowLoginProviderCircleWidget_SetProviderImage, InImage) == 0x000000, "Member 'NcShowLoginProviderCircleWidget_SetProviderImage::InImage' has a wrong offset!");

// Function NcPlatformSdk.NcShowLoginProviderSquareWidget.SetProviderText
// 0x0018 (0x0018 - 0x0000)
struct NcShowLoginProviderSquareWidget_SetProviderText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcShowLoginProviderSquareWidget_SetProviderText) == 0x000008, "Wrong alignment on NcShowLoginProviderSquareWidget_SetProviderText");
static_assert(sizeof(NcShowLoginProviderSquareWidget_SetProviderText) == 0x000018, "Wrong size on NcShowLoginProviderSquareWidget_SetProviderText");
static_assert(offsetof(NcShowLoginProviderSquareWidget_SetProviderText, InText) == 0x000000, "Member 'NcShowLoginProviderSquareWidget_SetProviderText::InText' has a wrong offset!");

// Function NcPlatformSdk.NcWebBrowser.BroadcastOnBeforePopup
// 0x0020 (0x0020 - 0x0000)
struct NcWebBrowser_BroadcastOnBeforePopup final
{
public:
	class FString                                 InUrl;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Frame;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcWebBrowser_BroadcastOnBeforePopup) == 0x000008, "Wrong alignment on NcWebBrowser_BroadcastOnBeforePopup");
static_assert(sizeof(NcWebBrowser_BroadcastOnBeforePopup) == 0x000020, "Wrong size on NcWebBrowser_BroadcastOnBeforePopup");
static_assert(offsetof(NcWebBrowser_BroadcastOnBeforePopup, InUrl) == 0x000000, "Member 'NcWebBrowser_BroadcastOnBeforePopup::InUrl' has a wrong offset!");
static_assert(offsetof(NcWebBrowser_BroadcastOnBeforePopup, Frame) == 0x000010, "Member 'NcWebBrowser_BroadcastOnBeforePopup::Frame' has a wrong offset!");

// Function NcPlatformSdk.NcWebBrowser.BroadcastOnUrlChanged
// 0x0018 (0x0018 - 0x0000)
struct NcWebBrowser_BroadcastOnUrlChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcWebBrowser_BroadcastOnUrlChanged) == 0x000008, "Wrong alignment on NcWebBrowser_BroadcastOnUrlChanged");
static_assert(sizeof(NcWebBrowser_BroadcastOnUrlChanged) == 0x000018, "Wrong size on NcWebBrowser_BroadcastOnUrlChanged");
static_assert(offsetof(NcWebBrowser_BroadcastOnUrlChanged, InText) == 0x000000, "Member 'NcWebBrowser_BroadcastOnUrlChanged::InText' has a wrong offset!");

// Function NcPlatformSdk.NcWebBrowser.BroadcastOnWebBrowserClosed
// 0x0018 (0x0018 - 0x0000)
struct NcWebBrowser_BroadcastOnWebBrowserClosed final
{
public:
	bool                                          HasError;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMsg;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcWebBrowser_BroadcastOnWebBrowserClosed) == 0x000008, "Wrong alignment on NcWebBrowser_BroadcastOnWebBrowserClosed");
static_assert(sizeof(NcWebBrowser_BroadcastOnWebBrowserClosed) == 0x000018, "Wrong size on NcWebBrowser_BroadcastOnWebBrowserClosed");
static_assert(offsetof(NcWebBrowser_BroadcastOnWebBrowserClosed, HasError) == 0x000000, "Member 'NcWebBrowser_BroadcastOnWebBrowserClosed::HasError' has a wrong offset!");
static_assert(offsetof(NcWebBrowser_BroadcastOnWebBrowserClosed, ErrorMsg) == 0x000008, "Member 'NcWebBrowser_BroadcastOnWebBrowserClosed::ErrorMsg' has a wrong offset!");

// Function NcPlatformSdk.NcWebBrowser.ExecuteJavascript
// 0x0010 (0x0010 - 0x0000)
struct NcWebBrowser_ExecuteJavascript final
{
public:
	class FString                                 JavascriptExp;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcWebBrowser_ExecuteJavascript) == 0x000008, "Wrong alignment on NcWebBrowser_ExecuteJavascript");
static_assert(sizeof(NcWebBrowser_ExecuteJavascript) == 0x000010, "Wrong size on NcWebBrowser_ExecuteJavascript");
static_assert(offsetof(NcWebBrowser_ExecuteJavascript, JavascriptExp) == 0x000000, "Member 'NcWebBrowser_ExecuteJavascript::JavascriptExp' has a wrong offset!");

// Function NcPlatformSdk.NcWebBrowser.LoadURL
// 0x0010 (0x0010 - 0x0000)
struct NcWebBrowser_LoadURL final
{
public:
	class FString                                 InUrl;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcWebBrowser_LoadURL) == 0x000008, "Wrong alignment on NcWebBrowser_LoadURL");
static_assert(sizeof(NcWebBrowser_LoadURL) == 0x000010, "Wrong size on NcWebBrowser_LoadURL");
static_assert(offsetof(NcWebBrowser_LoadURL, InUrl) == 0x000000, "Member 'NcWebBrowser_LoadURL::InUrl' has a wrong offset!");

// DelegateFunction NcPlatformSdk.NcWebBrowser.OnBeforePopup__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct NcWebBrowser_OnBeforePopup__DelegateSignature final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Frame;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcWebBrowser_OnBeforePopup__DelegateSignature) == 0x000008, "Wrong alignment on NcWebBrowser_OnBeforePopup__DelegateSignature");
static_assert(sizeof(NcWebBrowser_OnBeforePopup__DelegateSignature) == 0x000020, "Wrong size on NcWebBrowser_OnBeforePopup__DelegateSignature");
static_assert(offsetof(NcWebBrowser_OnBeforePopup__DelegateSignature, URL) == 0x000000, "Member 'NcWebBrowser_OnBeforePopup__DelegateSignature::URL' has a wrong offset!");
static_assert(offsetof(NcWebBrowser_OnBeforePopup__DelegateSignature, Frame) == 0x000010, "Member 'NcWebBrowser_OnBeforePopup__DelegateSignature::Frame' has a wrong offset!");

// DelegateFunction NcPlatformSdk.NcWebBrowser.OnUrlChanged__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct NcWebBrowser_OnUrlChanged__DelegateSignature final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcWebBrowser_OnUrlChanged__DelegateSignature) == 0x000008, "Wrong alignment on NcWebBrowser_OnUrlChanged__DelegateSignature");
static_assert(sizeof(NcWebBrowser_OnUrlChanged__DelegateSignature) == 0x000018, "Wrong size on NcWebBrowser_OnUrlChanged__DelegateSignature");
static_assert(offsetof(NcWebBrowser_OnUrlChanged__DelegateSignature, Text) == 0x000000, "Member 'NcWebBrowser_OnUrlChanged__DelegateSignature::Text' has a wrong offset!");

// DelegateFunction NcPlatformSdk.NcWebBrowser.OnWebBrowserClosed__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct NcWebBrowser_OnWebBrowserClosed__DelegateSignature final
{
public:
	bool                                          HasError;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMsg;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcWebBrowser_OnWebBrowserClosed__DelegateSignature) == 0x000008, "Wrong alignment on NcWebBrowser_OnWebBrowserClosed__DelegateSignature");
static_assert(sizeof(NcWebBrowser_OnWebBrowserClosed__DelegateSignature) == 0x000018, "Wrong size on NcWebBrowser_OnWebBrowserClosed__DelegateSignature");
static_assert(offsetof(NcWebBrowser_OnWebBrowserClosed__DelegateSignature, HasError) == 0x000000, "Member 'NcWebBrowser_OnWebBrowserClosed__DelegateSignature::HasError' has a wrong offset!");
static_assert(offsetof(NcWebBrowser_OnWebBrowserClosed__DelegateSignature, ErrorMsg) == 0x000008, "Member 'NcWebBrowser_OnWebBrowserClosed__DelegateSignature::ErrorMsg' has a wrong offset!");

// Function NcPlatformSdk.NcWebBrowser.SetExtraParams
// 0x0050 (0x0050 - 0x0000)
struct NcWebBrowser_SetExtraParams final
{
public:
	TMap<class FString, class FString>            Params_0;                                          // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcWebBrowser_SetExtraParams) == 0x000008, "Wrong alignment on NcWebBrowser_SetExtraParams");
static_assert(sizeof(NcWebBrowser_SetExtraParams) == 0x000050, "Wrong size on NcWebBrowser_SetExtraParams");
static_assert(offsetof(NcWebBrowser_SetExtraParams, Params_0) == 0x000000, "Member 'NcWebBrowser_SetExtraParams::Params_0' has a wrong offset!");

// Function NcPlatformSdk.NcWidgetCreater.GetPlayerController
// 0x0008 (0x0008 - 0x0000)
struct NcWidgetCreater_GetPlayerController final
{
public:
	class APlayerController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NcWidgetCreater_GetPlayerController) == 0x000008, "Wrong alignment on NcWidgetCreater_GetPlayerController");
static_assert(sizeof(NcWidgetCreater_GetPlayerController) == 0x000008, "Wrong size on NcWidgetCreater_GetPlayerController");
static_assert(offsetof(NcWidgetCreater_GetPlayerController, ReturnValue) == 0x000000, "Member 'NcWidgetCreater_GetPlayerController::ReturnValue' has a wrong offset!");

}

