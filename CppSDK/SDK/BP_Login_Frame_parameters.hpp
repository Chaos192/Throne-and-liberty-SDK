#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Login_Frame

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_Login_Frame.BP_Login_Frame_C.ExecuteUbergraph_BP_Login_Frame
// 0x0028 (0x0028 - 0x0000)
struct BP_Login_Frame_C_ExecuteUbergraph_BP_Login_Frame final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PlayBink_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RewindBink_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTLImage*>                       K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(BP_Login_Frame_C_ExecuteUbergraph_BP_Login_Frame) == 0x000008, "Wrong alignment on BP_Login_Frame_C_ExecuteUbergraph_BP_Login_Frame");
static_assert(sizeof(BP_Login_Frame_C_ExecuteUbergraph_BP_Login_Frame) == 0x000028, "Wrong size on BP_Login_Frame_C_ExecuteUbergraph_BP_Login_Frame");
static_assert(offsetof(BP_Login_Frame_C_ExecuteUbergraph_BP_Login_Frame, EntryPoint) == 0x000000, "Member 'BP_Login_Frame_C_ExecuteUbergraph_BP_Login_Frame::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Login_Frame_C_ExecuteUbergraph_BP_Login_Frame, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BP_Login_Frame_C_ExecuteUbergraph_BP_Login_Frame::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_Login_Frame_C_ExecuteUbergraph_BP_Login_Frame, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_Login_Frame_C_ExecuteUbergraph_BP_Login_Frame::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Login_Frame_C_ExecuteUbergraph_BP_Login_Frame, CallFunc_PlayBink_ReturnValue) == 0x000010, "Member 'BP_Login_Frame_C_ExecuteUbergraph_BP_Login_Frame::CallFunc_PlayBink_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Login_Frame_C_ExecuteUbergraph_BP_Login_Frame, CallFunc_RewindBink_ReturnValue) == 0x000011, "Member 'BP_Login_Frame_C_ExecuteUbergraph_BP_Login_Frame::CallFunc_RewindBink_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Login_Frame_C_ExecuteUbergraph_BP_Login_Frame, K2Node_MakeArray_Array) == 0x000018, "Member 'BP_Login_Frame_C_ExecuteUbergraph_BP_Login_Frame::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_Login_Frame.BP_Login_Frame_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_Login_Frame_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Login_Frame_C_PreConstruct) == 0x000001, "Wrong alignment on BP_Login_Frame_C_PreConstruct");
static_assert(sizeof(BP_Login_Frame_C_PreConstruct) == 0x000001, "Wrong size on BP_Login_Frame_C_PreConstruct");
static_assert(offsetof(BP_Login_Frame_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_Login_Frame_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

