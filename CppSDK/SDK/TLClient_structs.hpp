#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TLClient

#include "Basic.hpp"

#include "TLScheme_structs.hpp"
#include "TLUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "InputCore_structs.hpp"
#include "TLScene_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum TLClient.ETLUserWidgetAutonGamepadKey
// NumValues: 0x001A
enum class ETLUserWidgetAutonGamepadKey : uint8
{
	LeftThumbstick                           = 0,
	RightThumbstick                          = 1,
	SpecialLeft                              = 2,
	SpecialRight                             = 3,
	FaceButtonBottom                         = 4,
	FaceButtonRight                          = 5,
	FaceButtonLeft                           = 6,
	FaceButtonTop                            = 7,
	LeftShoulder                             = 8,
	RightShoulder                            = 9,
	LeftTrigger                              = 10,
	RightTrigger                             = 11,
	DPadUp                                   = 12,
	DPadDown                                 = 13,
	DPadRight                                = 14,
	DPadLeft                                 = 15,
	LeftStickUp                              = 16,
	LeftStickDown                            = 17,
	LeftStickRight                           = 18,
	LeftStickLeft                            = 19,
	RightStickUp                             = 20,
	RightStickDown                           = 21,
	RightStickRight                          = 22,
	RightStickLeft                           = 23,
	Num                                      = 24,
	ETLUserWidgetAutonGamepadKey_MAX         = 25,
};

// Enum TLClient.ETLUserWidgetAutonEnteringReaction
// NumValues: 0x0014
enum class ETLUserWidgetAutonEnteringReaction : uint8
{
	Enter                                    = 0,
	Jump                                     = 1,
	Click                                    = 2,
	BlueprintImplement                       = 3,
	Leave                                    = 4,
	East                                     = 5,
	West                                     = 6,
	South                                    = 7,
	North                                    = 8,
	FarEast                                  = 9,
	FarWest                                  = 10,
	FarSouth                                 = 11,
	FarNorth                                 = 12,
	Next                                     = 13,
	Prev                                     = 14,
	FarNext                                  = 15,
	FarPrev                                  = 16,
	DoNotEnter                               = 17,
	RelayEnter                               = 18,
	ETLUserWidgetAutonEnteringReaction_MAX   = 19,
};

// Enum TLClient.ETLUserWidgetAutonVisitingReaction
// NumValues: 0x0003
enum class ETLUserWidgetAutonVisitingReaction : uint8
{
	Focus                                    = 0,
	Select                                   = 1,
	ETLUserWidgetAutonVisitingReaction_MAX   = 2,
};

// Enum TLClient.EModelRotationAxis
// NumValues: 0x0004
enum class EModelRotationAxis : uint8
{
	Yaw                                      = 0,
	Pitch                                    = 1,
	YawAndPitch                              = 2,
	EModelRotationAxis_MAX                   = 3,
};

// Enum TLClient.ETLPurchaseShopType
// NumValues: 0x0004
enum class ETLPurchaseShopType : uint8
{
	None                                     = 0,
	SpecialShop                              = 1,
	SeasonPassShop                           = 2,
	ETLPurchaseShopType_MAX                  = 3,
};

// Enum TLClient.EItemCompareType
// NumValues: 0x0005
enum class EItemCompareType : uint8
{
	KCompareOff                              = 0,
	KCompareLeft                             = 1,
	KCompareRight                            = 2,
	KCompareAuto                             = 3,
	EItemCompareType_MAX                     = 4,
};

// Enum TLClient.ETLBindScrollBar
// NumValues: 0x0003
enum class ETLBindScrollBar : uint32
{
	RightStick                               = 0,
	LeftStick                                = 1,
	ETLBindScrollBar_MAX                     = 2,
};

// Enum TLClient.ETLBlackboardRangeState
// NumValues: 0x0006
enum class ETLBlackboardRangeState : uint8
{
	None                                     = 0,
	MovingIn                                 = 1,
	In                                       = 2,
	MovingOut                                = 3,
	Out                                      = 4,
	ETLBlackboardRangeState_MAX              = 5,
};

// Enum TLClient.ETLCastleStrongholdCondition
// NumValues: 0x0007
enum class ETLCastleStrongholdCondition : uint8
{
	Unknown                                  = 0,
	Destroyed                                = 1,
	Building                                 = 2,
	Damaged                                  = 3,
	Repairing                                = 4,
	TheBest                                  = 5,
	ETLCastleStrongholdCondition_MAX         = 6,
};

// Enum TLClient.ETLCastleOwnerGuild
// NumValues: 0x0006
enum class ETLCastleOwnerGuild : uint8
{
	None                                     = 0,
	MyGuild                                  = 1,
	EnemyGuild                               = 2,
	AllienceGuild                            = 3,
	OtherEnemyGuild                          = 4,
	ETLCastleOwnerGuild_MAX                  = 5,
};

// Enum TLClient.ETLServiceDistanceFrom
// NumValues: 0x0003
enum class ETLServiceDistanceFrom : uint8
{
	MyPc                                     = 0,
	NearestPc                                = 1,
	ETLServiceDistanceFrom_MAX               = 2,
};

// Enum TLClient.ETLInteractioinWith
// NumValues: 0x0006
enum class ETLInteractioinWith : uint8
{
	None                                     = 0,
	Me                                       = 1,
	Another                                  = 2,
	AnyOne                                   = 3,
	NoOne                                    = 4,
	ETLInteractioinWith_MAX                  = 5,
};

// Enum TLClient.ETLBlackboardTimerAction
// NumValues: 0x0003
enum class ETLBlackboardTimerAction : uint8
{
	Reset                                    = 0,
	Update                                   = 1,
	ETLBlackboardTimerAction_MAX             = 2,
};

// Enum TLClient.ETLBlackboardAssignKeyType
// NumValues: 0x0005
enum class ETLBlackboardAssignKeyType : uint8
{
	Bool                                     = 0,
	Int                                      = 1,
	Float                                    = 2,
	String                                   = 3,
	ETLBlackboardAssignKeyType_MAX           = 4,
};

// Enum TLClient.ETLServiceLookAt
// NumValues: 0x0003
enum class ETLServiceLookAt : uint8
{
	MyPc                                     = 0,
	NearestPc                                = 1,
	ETLServiceLookAt_MAX                     = 2,
};

// Enum TLClient.ETLServiceStartTarget
// NumValues: 0x0003
enum class ETLServiceStartTarget : uint8
{
	MyPc                                     = 0,
	NearestPc                                = 1,
	ETLServiceStartTarget_MAX                = 2,
};

// Enum TLClient.ETLPlatformStorageServerData
// NumValues: 0x0004
enum class ETLPlatformStorageServerData : uint8
{
	KMagicDoll                               = 0,
	KItemCollection                          = 1,
	KCount                                   = 2,
	ETLPlatformStorageServerData_MAX         = 3,
};

// Enum TLClient.ETLPlatformStorageCharacterData
// NumValues: 0x002F
enum class ETLPlatformStorageCharacterData : uint8
{
	KSkillSet                                = 0,
	KChatTab                                 = 1,
	KCodexAlarm                              = 2,
	KCraftingAlarm                           = 3,
	KMagicDollEntry                          = 4,
	KShop                                    = 5,
	KMapPlayCutsceneList                     = 6,
	KContentsOpen                            = 7,
	KInteractionCamera                       = 8,
	KTimeTable                               = 9,
	KMemorial                                = 10,
	KWorldPin                                = 11,
	KTargetHelper                            = 12,
	KGuildHome                               = 13,
	KContentsAlarm                           = 14,
	KGameValue                               = 15,
	KPolymorphCollectionBookmark             = 16,
	KMagicDollCollectionBookmark             = 17,
	KPolymorphPendingAcquire                 = 18,
	KPcRelationship                          = 19,
	KGroupChatRoomKeyList                    = 20,
	KChallengeAlarm                          = 21,
	KChatTabExpandOption                     = 22,
	KHudLast                                 = 23,
	KHudPreset1                              = 24,
	KHudPreset2                              = 25,
	KHudPreset3                              = 26,
	KHudPreset4                              = 27,
	KHudPreferences                          = 28,
	KPolymorphFavoriteList                   = 29,
	KWeaponMastery                           = 30,
	KAICustomAgreement                       = 31,
	KSocialMotionFavoriteList                = 32,
	KCostumeFavoriteList                     = 33,
	KWorldCarnival                           = 34,
	KMagicDoll                               = 35,
	KItemCollection                          = 36,
	KTimeAttackDungeon                       = 37,
	KStorage                                 = 38,
	KChatWindow                              = 39,
	KCount                                   = 40,
	KCooking                                 = 41,
	KPartyDungeon                            = 42,
	KAlchemy                                 = 43,
	KChallengePartyDungeon                   = 44,
	KEventBoard                              = 45,
	ETLPlatformStorageCharacterData_MAX      = 46,
};

// Enum TLClient.ETLPlatformStorageUserData
// NumValues: 0x0005
enum class ETLPlatformStorageUserData : uint8
{
	KMapFilter                               = 0,
	KMapCaptionGroup                         = 1,
	KMainMenu                                = 2,
	KCount                                   = 3,
	ETLPlatformStorageUserData_MAX           = 4,
};

// Enum TLClient.ETLPlatformStorageGameValueData
// NumValues: 0x0006
enum class ETLPlatformStorageGameValueData : uint8
{
	KUser                                    = 0,
	KUserOptionDevelopment                   = 1,
	KUserInputSettings                       = 2,
	KRealmGroup                              = 3,
	KCount                                   = 4,
	ETLPlatformStorageGameValueData_MAX      = 5,
};

// Enum TLClient.ETLStorageDataType
// NumValues: 0x0006
enum class ETLStorageDataType : uint8
{
	GameData                                 = 0,
	UserData                                 = 1,
	CharacterData                            = 2,
	ServerData                               = 3,
	KCount                                   = 4,
	ETLStorageDataType_MAX                   = 5,
};

// Enum TLClient.ETLKeyActionGuideOptionFlag
// NumValues: 0x000A
enum class ETLKeyActionGuideOptionFlag : uint8
{
	None                                     = 0,
	MergeFaceButton                          = 1,
	ExceptModifier                           = 2,
	DescriptionInputEvent                    = 4,
	OnlyModifier                             = 8,
	DoubleClick                              = 16,
	RelationArrow                            = 32,
	DpadArrow                                = 64,
	Inputting                                = 128,
	ETLKeyActionGuideOptionFlag_MAX          = 129,
};

// Enum TLClient.ETLActionKeyGuideAxisEventType
// NumValues: 0x0005
enum class ETLActionKeyGuideAxisEventType : uint8
{
	Up                                       = 0,
	Down                                     = 1,
	Left                                     = 2,
	Right                                    = 3,
	ETLActionKeyGuideAxisEventType_MAX       = 4,
};

// Enum TLClient.ETLActionKeyGuideType
// NumValues: 0x0004
enum class ETLActionKeyGuideType : uint8
{
	Key                                      = 0,
	Dash                                     = 1,
	Axis                                     = 2,
	ETLActionKeyGuideType_MAX                = 3,
};

// Enum TLClient.ETLActionSequenceState
// NumValues: 0x0004
enum class ETLActionSequenceState : uint8
{
	FIRST_UPDATE                             = 0,
	PROCEEDING_UPDATE                        = 1,
	LAST_UPDATE                              = 2,
	ETLActionSequenceState_MAX               = 3,
};

// Enum TLClient.ETLAlchemyRuneResultType
// NumValues: 0x0003
enum class ETLAlchemyRuneResultType : uint8
{
	Random                                   = 0,
	EndOfEnum                                = 1,
	ETLAlchemyRuneResultType_MAX             = 2,
};

// Enum TLClient.ETLAlchemyEquipmentResultType
// NumValues: 0x0006
enum class ETLAlchemyEquipmentResultType : uint8
{
	Random                                   = 0,
	Weapon                                   = 1,
	Armor                                    = 2,
	Accessory                                = 3,
	EndOfEnum                                = 4,
	ETLAlchemyEquipmentResultType_MAX        = 5,
};

// Enum TLClient.ETLVibrationMasterVolumeStep
// NumValues: 0x0004
enum class ETLVibrationMasterVolumeStep : uint8
{
	Low                                      = 0,
	Mid                                      = 1,
	High                                     = 2,
	ETLVibrationMasterVolumeStep_MAX         = 3,
};

// Enum TLClient.ETLAlertSound
// NumValues: 0x0005
enum class ETLAlertSound : uint64
{
	Off                                      = 18446744073709551615,
	Sound1                                   = 1,
	Sound2                                   = 2,
	Sound3                                   = 3,
	ETLAlertSound_MAX                        = 4,
};

// Enum TLClient.ETLAlertType
// NumValues: 0x0008
enum class ETLAlertType : uint8
{
	UnderAttack                              = 0,
	ZeroPotion                               = 1,
	LowPotion                                = 2,
	LowHealth                                = 3,
	HeavyInventory                           = 4,
	GuildMemberPcEnter                       = 5,
	UnfavoritePcEnter                        = 6,
	ETLAlertType_MAX                         = 7,
};

// Enum TLClient.ERStreamCursor
// NumValues: 0x000A
enum class ERStreamCursor : uint8
{
	None                                     = 0,
	NCSNext                                  = 10,
	NCSQA                                    = 11,
	NCSLive                                  = 12,
	NCSLiveCert                              = 13,
	AGSNext                                  = 20,
	AGSQA                                    = 21,
	AGSLive                                  = 22,
	AGSLiveCert                              = 23,
	ERStreamCursor_MAX                       = 24,
};

// Enum TLClient.EServerType
// NumValues: 0x0004
enum class EServerType : uint8
{
	Public                                   = 0,
	PrivateLocal                             = 1,
	PrivateRemote                            = 2,
	EServerType_MAX                          = 3,
};

// Enum TLClient.ETLArenaMatchDayOfWeek
// NumValues: 0x0009
enum class ETLArenaMatchDayOfWeek : uint8
{
	Default                                  = 0,
	Sunday                                   = 1,
	Monday                                   = 2,
	Tuesday                                  = 4,
	Wednesday                                = 8,
	Thursday                                 = 16,
	Friday                                   = 32,
	Saturday                                 = 64,
	ETLArenaMatchDayOfWeek_MAX               = 65,
};

// Enum TLClient.ETLArenaInviteSendType
// NumValues: 0x0003
enum class ETLArenaInviteSendType : uint8
{
	Game                                     = 0,
	PartyMember                              = 1,
	ETLArenaInviteSendType_MAX               = 2,
};

// Enum TLClient.ETLArenaRespondReceivedInviteFailCondition
// NumValues: 0x0006
enum class ETLArenaRespondReceivedInviteFailCondition : uint8
{
	NotJoinable                              = 0,
	DisabledNormalGame                       = 1,
	Expired                                  = 2,
	NotLeader                                = 3,
	Unknown                                  = 4,
	ETLArenaRespondReceivedInviteFailCondition_MAX = 5,
};

// Enum TLClient.ETLArenaInviteSendFailCondition
// NumValues: 0x000A
enum class ETLArenaInviteSendFailCondition : uint8
{
	NotExistsCharacter                       = 0,
	NotPartyLeader                           = 1,
	NotJoinable                              = 2,
	YouDoNotHaveRight                        = 3,
	DisabledNormalGame                       = 4,
	AchievementCondition                     = 5,
	AlreadyMatching                          = 6,
	ContentsMapTypeLimited                   = 7,
	Unknown                                  = 8,
	ETLArenaInviteSendFailCondition_MAX      = 9,
};

// Enum TLClient.ETLArenaMatchingConfirmStatus
// NumValues: 0x0004
enum class ETLArenaMatchingConfirmStatus : uint8
{
	NotAnswered                              = 0,
	Accept                                   = 1,
	Reject                                   = 2,
	ETLArenaMatchingConfirmStatus_MAX        = 3,
};

// Enum TLClient.ETLArenaMatchingConfirmCancelCondition
// NumValues: 0x0006
enum class ETLArenaMatchingConfirmCancelCondition : uint8
{
	WeaponChanged                            = 0,
	OtherPartyNotAcceptedAndRetryMatching    = 1,
	SeasonChanged                            = 2,
	MyPartyRejected                          = 3,
	Unknown                                  = 4,
	ETLArenaMatchingConfirmCancelCondition_MAX = 5,
};

// Enum TLClient.ETLArenaRespondMatchingFailCondition
// NumValues: 0x0005
enum class ETLArenaRespondMatchingFailCondition : uint8
{
	AlreadyRespond                           = 0,
	InvalidParty                             = 1,
	InvalidState                             = 2,
	Unknown                                  = 3,
	ETLArenaRespondMatchingFailCondition_MAX = 4,
};

// Enum TLClient.ETLArenaMatchingDeregisterCondition
// NumValues: 0x000B
enum class ETLArenaMatchingDeregisterCondition : uint8
{
	LeaderReq                                = 0,
	Dissolution                              = 1,
	MemberLogout                             = 2,
	MemberLeave                              = 3,
	MemberJoin                               = 4,
	EnterReject                              = 5,
	ScheduleChanged                          = 6,
	WorldDisconnected                        = 7,
	WeaponChanged                            = 8,
	Unknown                                  = 9,
	ETLArenaMatchingDeregisterCondition_MAX  = 10,
};

// Enum TLClient.ETLArenaMatchingDeregisterFailCondition
// NumValues: 0x0005
enum class ETLArenaMatchingDeregisterFailCondition : uint8
{
	YouDontHaveRight                         = 0,
	InvalidMatching                          = 1,
	NotInParty                               = 2,
	Unknown                                  = 3,
	ETLArenaMatchingDeregisterFailCondition_MAX = 4,
};

// Enum TLClient.ETLArenaMatchingRegisterFailCondition
// NumValues: 0x0011
enum class ETLArenaMatchingRegisterFailCondition : uint8
{
	NotLeader                                = 0,
	RegisteredRecruitmentExist               = 1,
	AlreadyMatching                          = 2,
	InvalidSeason                            = 3,
	ClosedArena                              = 4,
	LockedMapByAdmin                         = 5,
	DynamicEvent                             = 6,
	InsufficientPartyMembers                 = 7,
	WeaponCategoryLimit                      = 8,
	RankTierDiffExceeds                      = 9,
	MatchingPenalty                          = 10,
	AchievementCondition                     = 11,
	ContentsMapTypeLimited                   = 12,
	CombatPowerLimit                         = 13,
	MapCondition                             = 14,
	Unknown                                  = 15,
	ETLArenaMatchingRegisterFailCondition_MAX = 16,
};

// Enum TLClient.EHitResultType
// NumValues: 0x0016
enum class EHitResultType : uint8
{
	KUnknown                                 = 0,
	KNormalHit                               = 1,
	KInvincible                              = 2,
	KShieldHit                               = 3,
	KDamageShieldHit                         = 4,
	KMaxDamageByCriticalDecision             = 6,
	KMaxDamageByNormal                       = 7,
	KMinDamageByCriticalDecision             = 9,
	KMinDamageByNormal                       = 10,
	KFallingDamage                           = 11,
	KNormalDefenseByDefenseAction            = 12,
	KHeavyDefenseByDefenseAction             = 13,
	KJustPerfectDefenseByDefenseAction       = 14,
	KMiss                                    = 15,
	KMissedByAccuracy                        = 16,
	KDot                                     = 17,
	KGood                                    = 18,
	KBad                                     = 19,
	KImmuned                                 = 20,
	KMissByOtherBeneficialSkillEffectPrevented = 21,
	KEndOfEnum                               = 22,
	EHitResultType_MAX                       = 23,
};

// Enum TLClient.ETLBattleCollectionProgressType
// NumValues: 0x0004
enum class ETLBattleCollectionProgressType : uint8
{
	NONE                                     = 0,
	PROGRESS                                 = 1,
	COMPLETED                                = 2,
	ETLBattleCollectionProgressType_MAX      = 3,
};

// Enum TLClient.ETLBattleCollectionType
// NumValues: 0x0005
enum class ETLBattleCollectionType : uint8
{
	NONE                                     = 0,
	COMBAT                                   = 1,
	WILD                                     = 2,
	MagicDoll                                = 3,
	ETLBattleCollectionType_MAX              = 4,
};

// Enum TLClient.EBoutiqueState
// NumValues: 0x0007
enum class EBoutiqueState : uint8
{
	Entry                                    = 0,
	Customize                                = 1,
	Photoshoot                               = 2,
	ArmorCostume                             = 3,
	WeaponCostume                            = 4,
	SocialMotion                             = 5,
	EBoutiqueState_MAX                       = 6,
};

// Enum TLClient.ENavMeshUsageMode
// NumValues: 0x0004
enum class ENavMeshUsageMode : uint8
{
	CollisionOnly                            = 0,
	PreparedNavMesh                          = 1,
	DynamicNavMesh                           = 2,
	ENavMeshUsageMode_MAX                    = 3,
};

// Enum TLClient.ETLTextBlockWidgetCommandType
// NumValues: 0x0004
enum class ETLTextBlockWidgetCommandType : uint8
{
	None                                     = 0,
	Count                                    = 1,
	List                                     = 2,
	ETLTextBlockWidgetCommandType_MAX        = 3,
};

// Enum TLClient.ETLImageWidgetCommandType
// NumValues: 0x0004
enum class ETLImageWidgetCommandType : uint8
{
	None                                     = 0,
	Count                                    = 1,
	List                                     = 2,
	ETLImageWidgetCommandType_MAX            = 3,
};

// Enum TLClient.ETLObserverMode
// NumValues: 0x0006
enum class ETLObserverMode : uint8
{
	Off                                      = 0,
	InvisibleMe                              = 1,
	HideNameplate                            = 2,
	HideMe                                   = 3,
	HideNameplateOnly                        = 4,
	ETLObserverMode_MAX                      = 5,
};

// Enum TLClient.ETLSiegeWarfareCommand
// NumValues: 0x0009
enum class ETLSiegeWarfareCommand : uint8
{
	None                                     = 0,
	Standby                                  = 1,
	InProgress                               = 2,
	Usurping                                 = 3,
	Standby2                                 = 4,
	InProgress2                              = 5,
	Usurping2                                = 6,
	Result                                   = 7,
	ETLSiegeWarfareCommand_MAX               = 8,
};

// Enum TLClient.ETLEnvTimeTypeStep
// NumValues: 0x0005
enum class ETLEnvTimeTypeStep : uint8
{
	Begin                                    = 0,
	Middle                                   = 1,
	End                                      = 2,
	None                                     = 255,
	ETLEnvTimeTypeStep_MAX                   = 256,
};

// Enum TLClient.ETLEnvTimeType
// NumValues: 0x0006
enum class ETLEnvTimeType : uint8
{
	TimeNight                                = 0,
	TimeSunrise                              = 1,
	TimeDay                                  = 2,
	TimeSunset                               = 3,
	Max                                      = 4,
	None                                     = 255,
};

// Enum TLClient.EChatWindow
// NumValues: 0x0009
enum class EChatWindow : uint8
{
	KNone                                    = 0,
	KChatWindowAll                           = 1,
	KChatWindowCombat                        = 2,
	KChatWindowParty                         = 3,
	KChatWindowArea                          = 4,
	KChatWindowGuild                         = 5,
	KChatWindowNew                           = 6,
	KChatWindowDebug                         = 7,
	EChatWindow_MAX                          = 8,
};

// Enum TLClient.ETLCrosshairType
// NumValues: 0x0004
enum class ETLCrosshairType : uint8
{
	Hide                                     = 0,
	Range                                    = 1,
	Melee                                    = 2,
	ETLCrosshairType_MAX                     = 3,
};

// Enum TLClient.ETLGamepadCustomPreset
// NumValues: 0x0003
enum class ETLGamepadCustomPreset : uint8
{
	Type1                                    = 0,
	Type2                                    = 1,
	ETLGamepadCustomPreset_MAX               = 2,
};

// Enum TLClient.ETLGamepadPreset
// NumValues: 0x0003
enum class ETLGamepadPreset : uint8
{
	Type1                                    = 0,
	Type3                                    = 1,
	ETLGamepadPreset_MAX                     = 2,
};

// Enum TLClient.ETLPcRelationshipType
// NumValues: 0x0009
enum class ETLPcRelationshipType : uint8
{
	Friend                                   = 0,
	Favorite                                 = 1,
	Unfavorite                               = 2,
	Block                                    = 3,
	Inviter                                  = 4,
	Invitee                                  = 5,
	ChatMute                                 = 6,
	None                                     = 7,
	ETLPcRelationshipType_MAX                = 8,
};

// Enum TLClient.EGuildRelationship
// NumValues: 0x0008
enum class EGuildRelationship : uint8
{
	None                                     = 0,
	Alliance                                 = 1,
	Enemy                                    = 2,
	Observation                              = 3,
	RequestAlliance                          = 4,
	My                                       = 5,
	MyUnion                                  = 6,
	EGuildRelationship_MAX                   = 7,
};

// Enum TLClient.EOccupationState
// NumValues: 0x0008
enum class EOccupationState : uint8
{
	Peace                                    = 0,
	Usurping                                 = 1,
	Protect                                  = 2,
	InterServer                              = 3,
	Declared                                 = 4,
	Matching                                 = 5,
	InterServerMatching                      = 6,
	EOccupationState_MAX                     = 7,
};

// Enum TLClient.EOccupationType
// NumValues: 0x0003
enum class EOccupationType : uint8
{
	RegionStone                              = 0,
	BossStone                                = 1,
	EOccupationType_MAX                      = 2,
};

// Enum TLClient.ECodexFilterObjectStateType
// NumValues: 0x0005
enum class ECodexFilterObjectStateType : uint8
{
	KNone                                    = 0,
	KNormal                                  = 1,
	KEnable                                  = 2,
	KDisable                                 = 3,
	ECodexFilterObjectStateType_MAX          = 4,
};

// Enum TLClient.ETLGamepadKeyTypeAction
// NumValues: 0x0007
enum class ETLGamepadKeyTypeAction : uint8
{
	None                                     = 0,
	Empty                                    = 1,
	CantChange                               = 2,
	ChangeRelease                            = 3,
	SelfChangeRelease                        = 4,
	ChangeRingMenuToggleType                 = 5,
	ETLGamepadKeyTypeAction_MAX              = 6,
};

// Enum TLClient.ETLGamepadKeyType
// NumValues: 0x000E
enum class ETLGamepadKeyType : uint8
{
	None                                     = 0,
	SingleKeyRelease                         = 1,
	SingleModifiedKeyRelease                 = 2,
	HoldKeyRelease                           = 3,
	SingleKeyPress                           = 4,
	SingleModifiedKeyPress                   = 5,
	HoldKeyPress                             = 6,
	SingleKeyLongPress                       = 7,
	HoldKeyLongPress                         = 8,
	HoldSkillSetKey                          = 9,
	SingleSkillSetKey                        = 10,
	CombiPress                               = 11,
	SingleHold                               = 12,
	ETLGamepadKeyType_MAX                    = 13,
};

// Enum TLClient.ETLGamepadSkillSetType
// NumValues: 0x0004
enum class ETLGamepadSkillSetType : uint8
{
	None                                     = 0,
	FaceButton                               = 1,
	DpadButton                               = 2,
	ETLGamepadSkillSetType_MAX               = 3,
};

// Enum TLClient.ETLGamepadMappingType
// NumValues: 0x0005
enum class ETLGamepadMappingType : uint8
{
	None                                     = 0,
	Skill                                    = 1,
	SkillActivate                            = 2,
	RingMenu                                 = 3,
	ETLGamepadMappingType_MAX                = 4,
};

// Enum TLClient.ETLGamepadInputEvent
// NumValues: 0x000C
enum class ETLGamepadInputEvent : uint8
{
	Pressed                                  = 0,
	Released                                 = 1,
	LongPressed                              = 2,
	LongPressedDoubleClick                   = 3,
	LongPressedNoDuration                    = 4,
	DoubleClick                              = 5,
	KeyCombiPress                            = 6,
	Custom                                   = 7,
	CustomFree                               = 8,
	Hold                                     = 9,
	IgnoreModifierCustom                     = 10,
	ETLGamepadInputEvent_MAX                 = 11,
};

// Enum TLClient.ETLRecordVoiceState
// NumValues: 0x0005
enum class ETLRecordVoiceState : uint8
{
	None                                     = 0,
	Record                                   = 1,
	NotUse                                   = 2,
	Recognize                                = 3,
	ETLRecordVoiceState_MAX                  = 4,
};

// Enum TLClient.ETLCommunityChatMessageSubType
// NumValues: 0x000E
enum class ETLCommunityChatMessageSubType : uint64
{
	NONE                                     = 18446744073709551615,
	NORMAL                                   = 0,
	WORLD                                    = 1,
	REGION                                   = 2,
	GUILD_UNION                              = 3,
	GUILD                                    = 4,
	MERCENARY                                = 5,
	PARTY                                    = 6,
	MATCH_MAKING                             = 7,
	WHISPER                                  = 8,
	ONE_ON_ONE                               = 9,
	GROUP                                    = 10,
	GUILD_ANNOUNCE                           = 11,
	MAX                                      = 12,
};

// Enum TLClient.ETLCommunityChatMessageType
// NumValues: 0x000B
enum class ETLCommunityChatMessageType : uint8
{
	NONE                                     = 0,
	PUBLISH                                  = 1,
	ENTER                                    = 2,
	CLOSE                                    = 3,
	LEAVE                                    = 4,
	BAN                                      = 5,
	DEPORT                                   = 6,
	UNBAN                                    = 7,
	UNDEPORT                                 = 8,
	NOTICE                                   = 9,
	MAX                                      = 10,
};

// Enum TLClient.ETLCommunityChatRoomType
// NumValues: 0x0011
enum class ETLCommunityChatRoomType : uint8
{
	NONE                                     = 0,
	WORLD                                    = 1,
	REGION                                   = 2,
	GUILD_UNION                              = 3,
	GUILD                                    = 4,
	MERCENARY                                = 5,
	PARTY                                    = 6,
	MATCH_MAKING                             = 7,
	WHISPER                                  = 8,
	ONE_ON_ONE                               = 9,
	GROUP1                                   = 10,
	GROUP2                                   = 11,
	GROUP3                                   = 12,
	GROUP4                                   = 13,
	GROUP5                                   = 14,
	INSTANT                                  = 15,
	MAX                                      = 16,
};

// Enum TLClient.ETLCommunityChatOptionalMessageParamType
// NumValues: 0x0010
enum class ETLCommunityChatOptionalMessageParamType : uint8
{
	NONE                                     = 0,
	_STRING_BEGIN                            = 1,
	PlatformType                             = 2,
	AliasName                                = 3,
	RichTextDatas                            = 4,
	_STRING_END                              = 5,
	_NUMBER_BEGIN                            = 6,
	ExpRanking                               = 7,
	PvpRanking                               = 8,
	ActivePointRanking                       = 9,
	GuildMemberGrade                         = 10,
	_NUMBER_END                              = 11,
	_BOOL_BEGIN                              = 12,
	IsLeaderGuild                            = 13,
	_BOOL_END                                = 14,
	MAX                                      = 15,
};

// Enum TLClient.EContentsAlarmViewerTab
// NumValues: 0x0004
enum class EContentsAlarmViewerTab : uint8
{
	Guide                                    = 0,
	Alarm                                    = 1,
	Other                                    = 2,
	EContentsAlarmViewerTab_MAX              = 3,
};

// Enum TLClient.EContentsAlarmManagerTab
// NumValues: 0x0007
enum class EContentsAlarmManagerTab : uint8
{
	All                                      = 0,
	CodexAdventure                           = 1,
	CodexAchievement                         = 2,
	Contract                                 = 3,
	GuildContract                            = 4,
	Memorial                                 = 5,
	Max                                      = 6,
};

// Enum TLClient.EContentsAlarmViewType
// NumValues: 0x0004
enum class EContentsAlarmViewType : uint8
{
	Viewer                                   = 0,
	Manager                                  = 1,
	WorldmapManager                          = 2,
	EContentsAlarmViewType_MAX               = 3,
};

// Enum TLClient.EContentsAlarmType
// NumValues: 0x0006
enum class EContentsAlarmType : uint8
{
	AdventureCodex                           = 0,
	AchievementCodex                         = 1,
	Contract                                 = 2,
	GuildContract                            = 3,
	EndOfEnum                                = 4,
	EContentsAlarmType_MAX                   = 5,
};

// Enum TLClient.ETLContentsAlarmFilterTab
// NumValues: 0x0007
enum class ETLContentsAlarmFilterTab : uint8
{
	All                                      = 0,
	AdventureCodex                           = 1,
	AchievementCodex                         = 2,
	Contract                                 = 3,
	GuildContract                            = 4,
	EndOfEnum                                = 5,
	ETLContentsAlarmFilterTab_MAX            = 6,
};

// Enum TLClient.EEnterRegionSystemMessageType
// NumValues: 0x0011
enum class EEnterRegionSystemMessageType : uint8
{
	KPeace                                   = 0,
	KConflict                                = 1,
	KSafety                                  = 2,
	KFreeDuel                                = 3,
	KWar                                     = 4,
	KCombat                                  = 5,
	KSiege                                   = 6,
	KOccupation                              = 7,
	KTaxDelivery                             = 8,
	KDynamicEvent                            = 9,
	KPeaceDynamicEvent                       = 10,
	KGuildDynamicEvent                       = 11,
	KWorldBoss                               = 12,
	KPeaceWorldBoss                          = 13,
	KFieldBoss                               = 14,
	KPeaceFieldBoss                          = 15,
	EEnterRegionSystemMessageType_MAX        = 16,
};

// Enum TLClient.EContentsEventType
// NumValues: 0x0013
enum class EContentsEventType : uint8
{
	KNone                                    = 0,
	KEnterRegion                             = 1,
	KChangeEnvTimeType                       = 2,
	KChangeEclipseStatus                     = 3,
	KEnterSiegeWarfare                       = 4,
	KUpdateSiegeStatus                       = 5,
	KPrevLeaveSiegeWarfare                   = 6,
	KResultSiegeWarfare                      = 7,
	KEnterOccupation                         = 8,
	KPreLeaveOccupation                      = 9,
	KEnterDynamicEvent                       = 10,
	KLeaveDynamicEvent                       = 11,
	KJoinWorldBoss                           = 12,
	KLeaveWorldBoss                          = 13,
	KJoinTaxDelivery                         = 14,
	KLeaveTaxDelivery                        = 15,
	KJoinFieldBoss                           = 16,
	KLeaveFieldBoss                          = 17,
	EContentsEventType_MAX                   = 18,
};

// Enum TLClient.ETLContentsEventRunType
// NumValues: 0x0003
enum class ETLContentsEventRunType : uint8
{
	CHECK_AND_DELETE_IMMEDIATELY             = 0,
	CHECK_AND_DELETE_MANUALLY                = 1,
	CHECK_AND_DELETE_MAX                     = 2,
};

// Enum TLClient.ETLContentsEvent
// NumValues: 0x0002
enum class ETLContentsEvent : uint8
{
	EVENT_IGNORE_CHECK_MOBILITY_POLYMORPH_CONTENTS_OPEN = 0,
	EVENT_IGNORE_CHECK_MOBILITY_POLYMORPH_CONTENTS_MAX = 1,
};

// Enum TLClient.ETLContentShapeType
// NumValues: 0x0014
enum class ETLContentShapeType : uint8
{
	DYNAMIC_EVENT_WARNING                    = 0,
	DYNAMIC_EVENT_AREA                       = 1,
	SIEGE_WARFARE_WARNING                    = 2,
	SIEGE_WARFARE_AREA                       = 3,
	RESTRICT_AREA                            = 4,
	REGION_STONE_WARFARE                     = 5,
	REGION_STONE_WARNING                     = 6,
	REGION_STONE_USURPING                    = 7,
	BOSS_STONE_USURPING                      = 8,
	BOSS_STONE_WARFARE                       = 9,
	TAX_DELIVERY_WARNING                     = 10,
	TAX_DELIVERY_AREA                        = 11,
	FISHING_ROD_AVAILABLE                    = 12,
	DIRECTIONAL_FORCE                        = 13,
	WORLD_BOSS_WARNING                       = 14,
	WORLD_BOSS_AREA                          = 15,
	FIELD_BOSS_WARNING                       = 16,
	FIELD_BOSS_AREA                          = 17,
	MAX                                      = 18,
	NONE                                     = 255,
};

// Enum TLClient.ETLCraftingContentType
// NumValues: 0x0004
enum class ETLCraftingContentType : uint8
{
	Crafting                                 = 0,
	CraftingBook                             = 1,
	None                                     = 255,
	ETLCraftingContentType_MAX               = 256,
};

// Enum TLClient.ETLCustomizeSceneType
// NumValues: 0x0004
enum class ETLCustomizeSceneType : uint8
{
	None                                     = 0,
	Lobby                                    = 1,
	Boutique                                 = 2,
	ETLCustomizeSceneType_MAX                = 3,
};

// Enum TLClient.ECustomizeDesiredCameraZoom
// NumValues: 0x0004
enum class ECustomizeDesiredCameraZoom : uint8
{
	Fullshot                                 = 0,
	Torso                                    = 1,
	Head                                     = 2,
	ECustomizeDesiredCameraZoom_MAX          = 3,
};

// Enum TLClient.ETLResurrectionStep
// NumValues: 0x0007
enum class ETLResurrectionStep : uint8
{
	IAmAlive                                 = 1,
	DeathSequence                            = 2,
	WaitingUserInput                         = 3,
	WaitingServerRes                         = 4,
	WaitingResurrection                      = 5,
	IAmResurrected                           = 6,
	ETLResurrectionStep_MAX                  = 7,
};

// Enum TLClient.ETLResurrectionType
// NumValues: 0x0009
enum class ETLResurrectionType : uint8
{
	Default                                  = 0,
	SiegeWarfare                             = 1,
	DynamicEvent                             = 2,
	TaxDelivery                              = 3,
	InfinityDungeon                          = 4,
	GuildRaid                                = 5,
	WorldBoss                                = 6,
	PartyDungeon                             = 7,
	ETLResurrectionType_MAX                  = 8,
};

// Enum TLClient.ETLDeathPenaltyRecoveryType
// NumValues: 0x0007
enum class ETLDeathPenaltyRecoveryType : uint8
{
	None                                     = 0,
	CanNotRecovery                           = 1,
	Free                                     = 2,
	FreeCoin                                 = 3,
	LostAndFoundCoin                         = 4,
	Gold                                     = 5,
	ETLDeathPenaltyRecoveryType_MAX          = 6,
};

// Enum TLClient.ETLShowInfoName
// NumValues: 0x0032
enum class ETLShowInfoName : uint8
{
	None                                     = 0,
	TLDebug                                  = 1,
	TLTargetInfo                             = 2,
	TLMyPcAction                             = 3,
	TLMyPcStat                               = 4,
	TLPacketDebug                            = 5,
	TLQuest                                  = 6,
	TLInputStack                             = 7,
	TLUITopLevelTree                         = 8,
	TLAnalogCursor                           = 9,
	TLHudComponent                           = 10,
	TLWeather                                = 11,
	TLMap                                    = 12,
	TLSkillContext                           = 13,
	TLSkillCooldown                          = 14,
	TLSkillFormula                           = 15,
	TLDebugSkillQuickSlot                    = 16,
	TLDebugSkillSet                          = 17,
	TLGameModeController                     = 18,
	TLNotifyMoveSync                         = 19,
	TLSocketPos                              = 20,
	TLObjectManager                          = 21,
	TLInteraction                            = 22,
	TLCalendar                               = 23,
	TLParty                                  = 24,
	AutoCombat                               = 25,
	TLShowActionState                        = 26,
	TLUserCamera                             = 27,
	TLWidget                                 = 28,
	TLCamera                                 = 29,
	TLDmTarget                               = 30,
	TLDmTargetGuid                           = 31,
	TLScenario                               = 32,
	TLSceneWorld                             = 33,
	TLLobby                                  = 34,
	TLEquipWeapon                            = 35,
	TLUserWidgetFrame                        = 36,
	TLWidgetBank                             = 37,
	TLGuild                                  = 38,
	TLInspection                             = 39,
	TLUserWidgetHud                          = 40,
	TLWindIndicator                          = 41,
	TLWaterVolume                            = 42,
	TLTutorial                               = 43,
	TLInventory                              = 44,
	TLHeadUIController                       = 45,
	TLInputComponentBindHelper               = 46,
	TLFishing                                = 47,
	EndOfEnum                                = 48,
	ETLShowInfoName_MAX                      = 49,
};

// Enum TLClient.ETLGlobalSettingParam
// NumValues: 0x000E
enum class ETLGlobalSettingParam : uint8
{
	TimeTravelCycleDaysSet                   = 0,
	CursorMoveSpeed                          = 1,
	ClientSkillDistMargin                    = 2,
	TargetHelperNextTargetCollisionPlus      = 3,
	ObjectLeaveDuration                      = 4,
	CriticalDamageScale                      = 5,
	CriticalDamageReactionSpeedScale         = 6,
	DotFlinchingScale                        = 7,
	DotFlinchingReactionSpeedScale           = 8,
	TargetingIgnoreModelLoaded               = 9,
	SkipOutOfScreenHitSct                    = 10,
	SkipOutOfScreenProjectile                = 11,
	DistSkipCanSeeFromByRayCheck             = 12,
	ETLGlobalSettingParam_MAX                = 13,
};

// Enum TLClient.ETLDmFlagName
// NumValues: 0x0032
enum class ETLDmFlagName : uint8
{
	None                                     = 0,
	ObjectInfo                               = 1,
	ObjectPos                                = 2,
	Abnormal                                 = 3,
	ObjectId                                 = 4,
	ObjectGuid                               = 5,
	Model                                    = 6,
	NpcAI                                    = 7,
	MovePath                                 = 8,
	PcInfo                                   = 9,
	Relation                                 = 10,
	CanSee                                   = 11,
	ObjPolymorph                             = 12,
	Animation                                = 13,
	CollisionInfo                            = 14,
	AttackBox                                = 15,
	NpcColliderLine                          = 16,
	Swim                                     = 17,
	ObjectDist                               = 18,
	Physics                                  = 19,
	ObjOutline                               = 20,
	TargetHelper                             = 21,
	None1                                    = 22,
	ObjectDegree                             = 23,
	ObjRangeInfo                             = 24,
	Nameplate                                = 25,
	PhysicalSurface                          = 26,
	HitVolume                                = 27,
	ObjectActiveConti                        = 28,
	ObjectSkill                              = 29,
	ObjHp                                    = 30,
	ObjAttackable                            = 31,
	ObjectActiveFXNode                       = 32,
	ObjSocket                                = 33,
	HeadUI                                   = 34,
	LoadingStatus                            = 35,
	NpcMovePacket                            = 36,
	ObjMagicDoll                             = 37,
	ObjItem                                  = 38,
	SceneModel                               = 39,
	SoundInfo                                = 40,
	TargetPickingInfo                        = 41,
	AttackCircle                             = 42,
	AttackedPcId                             = 43,
	CharStatusInfo                           = 44,
	MovementComponentPos                     = 45,
	TLTabTargetInfo                          = 46,
	BoundingBox                              = 47,
	EndOfEnum                                = 48,
	ETLDmFlagName_MAX                        = 49,
};

// Enum TLClient.ETLDistanceCheckDimensionType
// NumValues: 0x0003
enum class ETLDistanceCheckDimensionType : uint8
{
	DISTANCE_2D                              = 0,
	DISTANCE_3D                              = 1,
	DISTANCE_MAX                             = 2,
};

// Enum TLClient.ETLDistanceCheckOverlapType
// NumValues: 0x0003
enum class ETLDistanceCheckOverlapType : uint8
{
	LEAVE                                    = 0,
	ENTER                                    = 1,
	ETLDistanceCheckOverlapType_MAX          = 2,
};

// Enum TLClient.ETLDistanceCheckTargetType
// NumValues: 0x0003
enum class ETLDistanceCheckTargetType : uint8
{
	TYPE_OBJECT                              = 0,
	TYPE_POSTION                             = 1,
	TYPE_MAX                                 = 2,
};

// Enum TLClient.EDungeonWaypointObjectState
// NumValues: 0x0004
enum class EDungeonWaypointObjectState : uint8
{
	Opening                                  = 0,
	Opened                                   = 1,
	Close                                    = 2,
	EDungeonWaypointObjectState_MAX          = 3,
};

// Enum TLClient.EDungeonWaypointLockType
// NumValues: 0x0004
enum class EDungeonWaypointLockType : uint8
{
	Open                                     = 0,
	NotOpen                                  = 1,
	MemorialLock                             = 2,
	EDungeonWaypointLockType_MAX             = 3,
};

// Enum TLClient.EDeTeamPartyMatchingType
// NumValues: 0x0004
enum class EDeTeamPartyMatchingType : uint8
{
	KNone                                    = 0,
	KChecking                                = 1,
	KComplete                                = 2,
	EDeTeamPartyMatchingType_MAX             = 3,
};

// Enum TLClient.ETLDynamicEventRewardType
// NumValues: 0x000E
enum class ETLDynamicEventRewardType : uint8
{
	TYPE_EVENT                               = 0,
	TYPE_EFFORT_GOLD                         = 1,
	TYPE_EFFORT_EXP                          = 2,
	TYPE_EFFORT_GUILD_EXP                    = 3,
	TYPE_EFFORT_ITEM_00                      = 4,
	TYPE_EFFORT_ITEM_01                      = 5,
	TYPE_EFFORT_ITEM_02                      = 6,
	TYPE_EFFORT_ITEM_03                      = 7,
	TYPE_EFFORT_ITEM_04                      = 8,
	TYPE_EFFORT_ITEM_05                      = 9,
	TYPE_EFFORT_ITEM_06                      = 10,
	TYPE_EFFORT_ITEM_07                      = 11,
	TYPE_MAX                                 = 12,
	TYPE_NONE                                = 255,
};

// Enum TLClient.ETLDEEventEffectStorePointState
// NumValues: 0x0006
enum class ETLDEEventEffectStorePointState : uint8
{
	DEACTIVATE                               = 0,
	ACTIVATE                                 = 1,
	ACTIVATE_PAUSE                           = 2,
	ACTIVATE_STOP                            = 3,
	ACTIVATE_NOT_OCCUPIED                    = 4,
	ETLDEEventEffectStorePointState_MAX      = 5,
};

// Enum TLClient.FTLEScortTargetState
// NumValues: 0x0006
enum class EFTLEScortTargetState : uint8
{
	KWait                                    = 0,
	KProgress                                = 1,
	KComplete                                = 2,
	KFail                                    = 3,
	KNone                                    = 4,
	FTLEScortTargetState_MAX                 = 5,
};

// Enum TLClient.FTLDynamicEventStoreValueType
// NumValues: 0x0007
enum class EFTLDynamicEventStoreValueType : uint8
{
	MY_COUNT                                 = 0,
	MAX_COUNT                                = 1,
	TOTAL_COUNT                              = 2,
	TOP_COUNT                                = 3,
	INFINITY_COUNT                           = 4,
	ACQUIREABLE_COUNT                        = 5,
	FTLDynamicEventStoreValueType_MAX        = 6,
};

// Enum TLClient.ETLDynamicEventHUDType
// NumValues: 0x0005
enum class ETLDynamicEventHUDType : uint8
{
	PREPARE                                  = 0,
	PROGRESS                                 = 1,
	COMPLETE                                 = 2,
	NONE                                     = 3,
	ETLDynamicEventHUDType_MAX               = 4,
};

// Enum TLClient.ETLQuestType
// NumValues: 0x0004
enum class ETLQuestType : uint8
{
	DynamicEvent                             = 0,
	InstanceMapGuideEvent                    = 1,
	InfinityDungeonEvent                     = 2,
	ETLQuestType_MAX                         = 3,
};

// Enum TLClient.EEnchantFilterType
// NumValues: 0x0006
enum class EEnchantFilterType : uint8
{
	All                                      = 0,
	Weapon                                   = 1,
	Amor                                     = 2,
	Accessory                                = 3,
	EndOfEnum                                = 4,
	EEnchantFilterType_MAX                   = 5,
};

// Enum TLClient.EItemTraitEnchantStep
// NumValues: 0x0007
enum class EItemTraitEnchantStep : uint8
{
	TargetItemReady                          = 0,
	MaterialItemReady                        = 1,
	EnchantReady                             = 2,
	EnchantProgress                          = 3,
	EnchantResult                            = 4,
	None                                     = 5,
	EItemTraitEnchantStep_MAX                = 6,
};

// Enum TLClient.EEnchantPhase
// NumValues: 0x0004
enum class EEnchantPhase : uint8
{
	Setting                                  = 0,
	ResultWaiting                            = 1,
	Result                                   = 2,
	EEnchantPhase_MAX                        = 3,
};

// Enum TLClient.ETLEnchantTransferProgressActionEvent
// NumValues: 0x0004
enum class ETLEnchantTransferProgressActionEvent : uint8
{
	START                                    = 0,
	LEVEL_CHANGE                             = 1,
	END                                      = 2,
	ETLEnchantTransferProgressActionEvent_MAX = 3,
};

// Enum TLClient.ETLEnchantTransferFailReason
// NumValues: 0x0006
enum class ETLEnchantTransferFailReason : uint8
{
	NONE                                     = 0,
	TARGET_ITEM_INVALID                      = 1,
	MATERIAL_ITEM_INVALID                    = 2,
	MAXIMUM_LEVEL                            = 3,
	NOT_ENOUGH_GOLD                          = 4,
	ETLEnchantTransferFailReason_MAX         = 5,
};

// Enum TLClient.ETLEnchantTransferResult
// NumValues: 0x0009
enum class ETLEnchantTransferResult : uint8
{
	SUCCESS                                  = 0,
	FAILED_BY_PC_DIED                        = 1,
	FAILED_BY_NOT_ENOUGH_GOLD                = 2,
	FAILED_BY_LOCKED_TARGET_ITEM             = 3,
	FAILED_BY_LOCKED_RESOURCE_ITEM           = 4,
	FAILED_BY_INVALID_RESOURCE_ITEM          = 5,
	FAILED_BY_INVALID_TARGET_ITEM            = 6,
	FAILED_BY_ENCHANT_LEVEL                  = 7,
	ETLEnchantTransferResult_MAX             = 8,
};

// Enum TLClient.ETLEnchantTransferFlow
// NumValues: 0x0008
enum class ETLEnchantTransferFlow : uint8
{
	NONE                                     = 0,
	READY_TO_START                           = 1,
	TARGET_ITEM_SET                          = 2,
	MATERIAL_ITEM_SET                        = 3,
	WAIT_TRANSFER_RESULT_SCENE               = 4,
	RESULT_PROGRESS_BAR_ACTION_END           = 5,
	WAIT_TO_GO_BACK_START                    = 6,
	ETLEnchantTransferFlow_MAX               = 7,
};

// Enum TLClient.EEquipSlotEvent
// NumValues: 0x0004
enum class EEquipSlotEvent : uint8
{
	Cleared                                  = 0,
	Added                                    = 1,
	Updated                                  = 2,
	EEquipSlotEvent_MAX                      = 3,
};

// Enum TLClient.ETLArmorParts
// NumValues: 0x0008
enum class ETLArmorParts : uint8
{
	NONE                                     = 0,
	HELMET                                   = 1,
	TORSO                                    = 2,
	PANTS                                    = 3,
	GLOVES                                   = 4,
	BOOTS                                    = 5,
	CAPE                                     = 6,
	ETLArmorParts_MAX                        = 7,
};

// Enum TLClient.ETLFieldBossEventState
// NumValues: 0x0005
enum class ETLFieldBossEventState : uint8
{
	PREPARE                                  = 0,
	PROGRESS                                 = 1,
	COMPLETE                                 = 2,
	NONE                                     = 3,
	ETLFieldBossEventState_MAX               = 4,
};

// Enum TLClient.ETLFishingState
// NumValues: 0x0008
enum class ETLFishingState : uint8
{
	None                                     = 0,
	Positioning                              = 1,
	Waiting                                  = 2,
	Biting                                   = 3,
	Fighting                                 = 4,
	Finishing                                = 5,
	Count                                    = 6,
	ETLFishingState_MAX                      = 7,
};

// Enum TLClient.EFormulaConstant
// NumValues: 0x000B
enum class EFormulaConstant : uint8
{
	Error                                    = 0,
	Min                                      = 1,
	Max                                      = 2,
	Add                                      = 3,
	Mul                                      = 4,
	Mul2                                     = 5,
	Mul3                                     = 6,
	Factor                                   = 7,
	Factor2                                  = 8,
	Tooltip1                                 = 9,
	Tooltip2                                 = 10,
};

// Enum TLClient.ETLFsmPlaySctType
// NumValues: 0x000D
enum class ETLFsmPlaySctType : uint8
{
	None                                     = 0,
	BTTaskTLMotion                           = 1,
	BTTaskTLSceneConti                       = 2,
	Riding                                   = 3,
	EntryMotion                              = 4,
	LoopMotion                               = 5,
	CreatureEvent                            = 6,
	PlayInteractionSct                       = 7,
	NpcLeave                                 = 8,
	ToggleOff                                = 9,
	WeaponSwap                               = 10,
	PolymorphCast                            = 11,
	ETLFsmPlaySctType_MAX                    = 12,
};

// Enum TLClient.ETLGachaBranchType
// NumValues: 0x0005
enum class ETLGachaBranchType : uint8
{
	ZeroIndex                                = 0,
	ItemLevel                                = 1,
	PercentageItemLevel                      = 2,
	GachaItemCount                           = 3,
	ETLGachaBranchType_MAX                   = 4,
};

// Enum TLClient.ETLGameFlowFlags
// NumValues: 0x0003
enum class ETLGameFlowFlags : uint8
{
	NONE                                     = 0,
	CUSTOM_SCENE                             = 1,
	ETLGameFlowFlags_MAX                     = 2,
};

// Enum TLClient.ETLGameFlowStage
// NumValues: 0x0005
enum class ETLGameFlowStage : uint8
{
	NONE                                     = 0,
	PREGAME                                  = 1,
	LOBBY                                    = 2,
	INGAME                                   = 3,
	ETLGameFlowStage_MAX                     = 4,
};

// Enum TLClient.ETLGameFlowState
// NumValues: 0x0012
enum class ETLGameFlowState : uint8
{
	NONE                                     = 0,
	SETUP                                    = 1,
	NOTICE                                   = 3,
	GAME_START                               = 4,
	LOBBY_MAIN                               = 5,
	CHARACTER_SELECT                         = 6,
	CHARACTER_CREATE                         = 7,
	CHARACTER_CUSTOMIZATION                  = 8,
	MOVE_TO_WORLD                            = 9,
	CHANGE_REALMGROUP                        = 10,
	WORLD                                    = 11,
	MOVE_TO_LOBBY                            = 12,
	WORLD_TO_WORLD                           = 13,
	SHUTDOWN                                 = 14,
	MOVE_TO_LOBBY_BY_SERVER_DISCONNECT       = 15,
	DISCONNECT_NOTIFY                        = 16,
	FAST_INGAME                              = 255,
	ETLGameFlowState_MAX                     = 256,
};

// Enum TLClient.ETLCharacterGenderSelectAnimPhase
// NumValues: 0x0005
enum class ETLCharacterGenderSelectAnimPhase : uint8
{
	Idle                                     = 0,
	HoverIn                                  = 1,
	HoverIdle                                = 2,
	HoverOut                                 = 3,
	ETLCharacterGenderSelectAnimPhase_MAX    = 4,
};

// Enum TLClient.ETLSequencePhase
// NumValues: 0x000A
enum class ETLSequencePhase : uint8
{
	None                                     = 0,
	ServerSelectComplete                     = 1,
	ServerSelectAfterFadeOut                 = 2,
	NarrativeIntro                           = 3,
	GenderSelect                             = 4,
	GenderSelectWait                         = 5,
	GenderSelectConfirm                      = 6,
	StartCustomize                           = 7,
	Finish                                   = 8,
	ETLSequencePhase_MAX                     = 9,
};

// Enum TLClient.ETLGameFlowStateEvent
// NumValues: 0x0013
enum class ETLGameFlowStateEvent : uint8
{
	EVENT_LOBBY_LOBBY_ACTOR_LOADED           = 0,
	EVENT_LOBBY_LEVEL_LOAD_COMPLETE          = 1,
	EVENT_LOBBY_FLOW_PREV                    = 2,
	EVENT_LOBBY_FLOW_NEXT                    = 3,
	EVENT_GAME_START                         = 4,
	EVENT_CHANGE_ACCOUNT                     = 5,
	EVENT_BROADCAST_SERVICE_STATUS_UPDATE    = 6,
	EVENT_MOVE_TO_LOBBY_BY_SERVER_DISCONNECT = 7,
	CHANGE_REALM_GROUP                       = 8,
	SELECT_GENDER_BUTTON                     = 9,
	CUSTOMIZE_CAPTURE_PHOTO_DELAY_WAIT_END   = 10,
	CUSTOMIZE_CREATE_CHARACTER_FINISHED      = 11,
	EVENT_SHOW_TWO_FACTOR_AUTH_UI            = 12,
	EVENT_HIDE_TWO_FACTOR_AUTH_UI            = 13,
	EVENT_SHOW_DEVICE_MANAGER                = 14,
	EVENT_AGID_LINK_COMPLETE                 = 15,
	EVENT_AGID_LINK_RESERVE                  = 16,
	EVENT_ENTER_ENABLED                      = 17,
	ETLGameFlowStateEvent_MAX                = 18,
};

// Enum TLClient.EServerPopulationStatus
// NumValues: 0x0004
enum class EServerPopulationStatus : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	Full                                     = 2,
	EServerPopulationStatus_MAX              = 3,
};

// Enum TLClient.ETLLobbyStateChangeReason
// NumValues: 0x0004
enum class ETLLobbyStateChangeReason : uint8
{
	REASON_NONE                              = 0,
	REASON_SETUP                             = 1,
	REASON_GAME_FLOW                         = 2,
	REASON_MAX                               = 3,
};

// Enum TLClient.ELobbySceneState
// NumValues: 0x0008
enum class ELobbySceneState : uint8
{
	None                                     = 0,
	Title                                    = 1,
	Main                                     = 2,
	CharacterSelect                          = 3,
	ServerSelect                             = 4,
	Customize                                = 5,
	Transition                               = 6,
	ELobbySceneState_MAX                     = 7,
};

// Enum TLClient.ELobbyActorSceneType
// NumValues: 0x0005
enum class ELobbyActorSceneType : uint8
{
	ServerSelect                             = 0,
	CharacterPreview                         = 1,
	Customize                                = 2,
	Beautyshop                               = 3,
	ELobbyActorSceneType_MAX                 = 4,
};

// Enum TLClient.ETLGameLobbyEnterReason
// NumValues: 0x0004
enum class ETLGameLobbyEnterReason : uint8
{
	REASON_LOGIN                             = 0,
	REASON_CHARACTER_SELECT                  = 1,
	NONE                                     = 255,
	ETLGameLobbyEnterReason_MAX              = 256,
};

// Enum TLClient.ETLGameLobbyStep
// NumValues: 0x0007
enum class ETLGameLobbyStep : uint8
{
	NONE                                     = 0,
	STEP_ENTER_WITH_LOGIN                    = 1,
	STEP_MAKE_PRE_CHARACTER                  = 2,
	STEP_GAME_LOBBY_START                    = 3,
	STEP_GAME_LOBBY                          = 4,
	STEP_GAME_LOBBY_END                      = 5,
	ETLGameLobbyStep_MAX                     = 6,
};

// Enum TLClient.EGrowthPassRewardStatus
// NumValues: 0x0006
enum class EGrowthPassRewardStatus : uint8
{
	None                                     = 0,
	CantDeliver                              = 1,
	CanDeliver                               = 2,
	Delivered                                = 3,
	Locked                                   = 4,
	EGrowthPassRewardStatus_MAX              = 5,
};

// Enum TLClient.ETLGrowthPassMissionType
// NumValues: 0x0004
enum class ETLGrowthPassMissionType : uint8
{
	None                                     = 0,
	LevelAchievementMission                  = 1,
	GrowthMission                            = 2,
	ETLGrowthPassMissionType_MAX             = 3,
};

// Enum TLClient.EGuildPostWriteLevel
// NumValues: 0x0003
enum class EGuildPostWriteLevel : uint8
{
	MASTER                                   = 0,
	MASTERGROUP                              = 1,
	EGuildPostWriteLevel_MAX                 = 2,
};

// Enum TLClient.EGuildDistributionJoinModifyStatus
// NumValues: 0x0004
enum class EGuildDistributionJoinModifyStatus : uint8
{
	None                                     = 0,
	Added                                    = 1,
	Removed                                  = 2,
	EGuildDistributionJoinModifyStatus_MAX   = 3,
};

// Enum TLClient.EGuildDistributionType
// NumValues: 0x0007
enum class EGuildDistributionType : uint8
{
	Boss                                     = 0,
	SiegeWarfare                             = 1,
	TaxDelivery                              = 2,
	InterServerRegionStone                   = 3,
	InterServerBossStone                     = 4,
	Default                                  = 5,
	EGuildDistributionType_MAX               = 6,
};

// Enum TLClient.EGuildBossItemAcquireType
// NumValues: 0x0004
enum class EGuildBossItemAcquireType : uint8
{
	ACQUIRE_PRIVATE                          = 0,
	GUILD_STORAGE_WAIT_5MIN                  = 1,
	GUILD_STORAGE                            = 2,
	EGuildBossItemAcquireType_MAX            = 3,
};

// Enum TLClient.EGuildDistributionAuthLevel
// NumValues: 0x0004
enum class EGuildDistributionAuthLevel : uint8
{
	MASTER                                   = 0,
	MASTERGROUP                              = 1,
	GUARDIAN                                 = 2,
	EGuildDistributionAuthLevel_MAX          = 3,
};

// Enum TLClient.EDistributionGuildSellPeriod
// NumValues: 0x0009
enum class EDistributionGuildSellPeriod : uint8
{
	Period_1Min                              = 0,
	Period_5Min                              = 1,
	Period_15Min                             = 2,
	Period_30Min                             = 3,
	Period_1Hour                             = 4,
	Period_6Hour                             = 5,
	Period_1Day                              = 6,
	Period_3Day                              = 7,
	Period_MAX                               = 8,
};

// Enum TLClient.EDistibutionItemState
// NumValues: 0x000C
enum class EDistibutionItemState : uint8
{
	WaitOwner                                = 0,
	WaitGuildManage                          = 1,
	SellingTradeShop                         = 2,
	SellingGuildMemberFixedDiamond           = 3,
	SellingGuildMemberBidding                = 4,
	WaitDistribution                         = 5,
	DistributionFinish                       = 6,
	WaitTradeSell                            = 7,
	WaitGuildMemberSell                      = 8,
	PrivateAcquisition                       = 9,
	None                                     = 255,
	EDistibutionItemState_MAX                = 256,
};

// Enum TLClient.EGuildDonationReddotType
// NumValues: 0x0004
enum class EGuildDonationReddotType : uint8
{
	Charge                                   = 0,
	MaxCharge                                = 1,
	None                                     = 2,
	EGuildDonationReddotType_MAX             = 3,
};

// Enum TLClient.EGuildItemPaySelectType
// NumValues: 0x0004
enum class EGuildItemPaySelectType : uint8
{
	ParticipantsSelect                       = 0,
	ALLSelect                                = 1,
	IndividualSelect                         = 2,
	EGuildItemPaySelectType_MAX              = 3,
};

// Enum TLClient.EGuildRewardBoxState
// NumValues: 0x0005
enum class EGuildRewardBoxState : uint8
{
	HaveLastSeasonReward                     = 0,
	HaveCurrentSeasonReward                  = 1,
	NoneSeasonReward                         = 2,
	StateMax                                 = 3,
	EGuildRewardBoxState_MAX                 = 4,
};

// Enum TLClient.EGuildMasterDelegateState
// NumValues: 0x0004
enum class EGuildMasterDelegateState : uint8
{
	DeActivation                             = 0,
	Activation                               = 1,
	Inprogress                               = 2,
	EGuildMasterDelegateState_MAX            = 3,
};

// Enum TLClient.EGuildHomeState
// NumValues: 0x0003
enum class EGuildHomeState : uint8
{
	HomeLock                                 = 0,
	HomeOpen                                 = 2,
	EGuildHomeState_MAX                      = 3,
};

// Enum TLClient.EGuildJoinType
// NumValues: 0x0005
enum class EGuildJoinType : uint8
{
	Invite                                   = 0,
	Immediately                              = 1,
	Password                                 = 2,
	Closed                                   = 3,
	EGuildJoinType_MAX                       = 4,
};

// Enum TLClient.EGuildCreateFailureReason
// NumValues: 0x0012
enum class EGuildCreateFailureReason : uint8
{
	Unknown                                  = 0,
	AlreadyJoinOtherGuild                    = 1,
	CharacterNameNotConfirmed                = 2,
	NeedMoreGuildMasterLevel                 = 3,
	NotEnoughCost                            = 4,
	InvalidEmblemColor                       = 5,
	NeedMoreGuildLevelForEmblem              = 6,
	NeedMoreGuildLevelForEmblemColor         = 7,
	IncludingBannedWords                     = 8,
	NameAlreadyUsed                          = 9,
	InappropriateLength                      = 10,
	InvalidSpaceLocation                     = 11,
	NotSupportedWordType                     = 12,
	DataStoreAccess                          = 13,
	FailedByIncludingBannedWord              = 14,
	NeedMoreTime                             = 15,
	MapCondition                             = 16,
	EGuildCreateFailureReason_MAX            = 17,
};

// Enum TLClient.EGuildReputationRewardState
// NumValues: 0x0004
enum class EGuildReputationRewardState : uint8
{
	AlreadyDone                              = 0,
	SuccessReward                            = 1,
	TargetFail                               = 2,
	EGuildReputationRewardState_MAX          = 3,
};

// Enum TLClient.EGuildMainTabType
// NumValues: 0x000E
enum class EGuildMainTabType : uint8
{
	TAB_GUILD_LIST                           = 0,
	TAB_GUILD_CREATE                         = 1,
	TAB_GUILD_INFO                           = 2,
	TAB_GUILD_MEMBER_LIST                    = 3,
	TAB_GUILD_RELATIONSHIP                   = 4,
	TAB_GUILD_PVP_INFO                       = 5,
	TAB_GUILD_MANAGEMENT                     = 6,
	TAB_GUILD_SKILL                          = 7,
	TAB_GUILD_CONTRACT                       = 8,
	TAB_GUILD_OCCUPATION                     = 9,
	TAB_GUILD_BENEFIT                        = 10,
	TAB_GUILD_DISTRIBUTION                   = 11,
	TAB_GUILD_REWARD                         = 12,
	TAB_GUILD_MAX                            = 13,
};

// Enum TLClient.EGuildViewActionButtonType
// NumValues: 0x0003
enum class EGuildViewActionButtonType : uint8
{
	Back                                     = 0,
	Close                                    = 1,
	EGuildViewActionButtonType_MAX           = 2,
};

// Enum TLClient.EGuildViewFrameType
// NumValues: 0x0003
enum class EGuildViewFrameType : uint8
{
	ViewList                                 = 0,
	GuildInfo                                = 1,
	EGuildViewFrameType_MAX                  = 2,
};

// Enum TLClient.ETLCombatAlertType
// NumValues: 0x0004
enum class ETLCombatAlertType : uint8
{
	None                                     = 0,
	Aggro                                    = 1,
	AggroSearch                              = 2,
	ETLCombatAlertType_MAX                   = 3,
};

// Enum TLClient.ETLNameplateDisplayStatus
// NumValues: 0x0016
enum class ETLNameplateDisplayStatus : uint32
{
	None                                     = 0,
	ShowName                                 = 1,
	ShowSubTitle                             = 2,
	ShowTargetScanIndex                      = 4,
	ShowGuidEmblem                           = 8,
	ShowPvPMark                              = 16,
	ShowPcRelationship                       = 32,
	ShowAttackedMyPc                         = 64,
	ShowHPBar                                = 128,
	ShowCostBar                              = 256,
	ShowFixTarget                            = 512,
	ShowNextTargetMark                       = 1024,
	ShowContentsMarker                       = 2048,
	ShowPartyTarget                          = 4096,
	ShowEEInfo                               = 8192,
	ShowUsurping                             = 16384,
	ShowFacilityIcon                         = 32768,
	ShowPartyTargetMarker                    = 65536,
	ShowRelationshipMark                     = 131072,
	ShowCombatAlert                          = 262144,
	ShowRoleIcon                             = 524288,
	ETLNameplateDisplayStatus_MAX            = 524289,
};

// Enum TLClient.ETLHeadUICondition
// NumValues: 0x0013
enum class ETLHeadUICondition : uint32
{
	None                                     = 0,
	HeadUIValidPosition                      = 1,
	NameplateShowOption                      = 2,
	NameplateDistance                        = 4,
	NameplateCanSee                          = 8,
	NameplateIgnoreCanSeeFromCamera          = 16,
	NameplateDefaultVisible                  = 32,
	NameplateExceptionVisible                = 64,
	NameplateAlwaysHide                      = 128,
	NameplateNormalState                     = 256,
	NameplateSimpleState                     = 512,
	NameplateInteractable                    = 1024,
	NameplateInteractableDistance            = 2048,
	NameplateHideForTech                     = 4096,
	NameplateRequireUpdateCanSeeFromCamera   = 8192,
	NameplateLowPriority                     = 16384,
	NameplateInvalidObject                   = 32768,
	NameplateIgnoreOption                    = 65536,
	ETLHeadUICondition_MAX                   = 65537,
};

// Enum TLClient.ETLDropPermission
// NumValues: 0x0004
enum class ETLDropPermission : uint8
{
	None                                     = 0,
	NoPermission                             = 1,
	Permission                               = 2,
	ETLDropPermission_MAX                    = 3,
};

// Enum TLClient.ETLVoiceChatState
// NumValues: 0x0004
enum class ETLVoiceChatState : uint8
{
	None                                     = 0,
	Speaking                                 = 1,
	MicOff                                   = 2,
	ETLVoiceChatState_MAX                    = 3,
};

// Enum TLClient.ETLStealthDectectionState
// NumValues: 0x0004
enum class ETLStealthDectectionState : uint8
{
	None                                     = 0,
	OutBound                                 = 1,
	InBound                                  = 2,
	ETLStealthDectectionState_MAX            = 3,
};

// Enum TLClient.ETLNameplateType
// NumValues: 0x0007
enum class ETLNameplateType : uint8
{
	KNone                                    = 0,
	KNpc                                     = 1,
	KOtherPc                                 = 2,
	KMyPc                                    = 3,
	KItem                                    = 4,
	KFo                                      = 5,
	ETLNameplateType_MAX                     = 6,
};

// Enum TLClient.EChatBalloonType
// NumValues: 0x0006
enum class EChatBalloonType : uint8
{
	KNormal                                  = 0,
	KClue                                    = 1,
	KHint                                    = 2,
	KNone                                    = 100,
	KGrayscale                               = 101,
	EChatBalloonType_MAX                     = 102,
};

// Enum TLClient.ETLStopCastingReason
// NumValues: 0x0005
enum class ETLStopCastingReason : uint8
{
	Success                                  = 0,
	Canceled                                 = 1,
	Interrupted                              = 2,
	EndOfEnum                                = 3,
	ETLStopCastingReason_MAX                 = 4,
};

// Enum TLClient.ETLRingMenuPageTab
// NumValues: 0x0004
enum class ETLRingMenuPageTab : uint8
{
	MainMenu                                 = 0,
	MainMenu2                                = 1,
	TargetMarker                             = 2,
	ETLRingMenuPageTab_MAX                   = 3,
};

// Enum TLClient.ETLHudComponentUIType
// NumValues: 0x000A
enum class ETLHudComponentUIType : uint8
{
	MyPcInfo                                 = 0,
	PartyUI                                  = 1,
	DpadButtonQuickSlot                      = 2,
	CombatControl                            = 3,
	FaceButtonQuickSlot                      = 4,
	ContentsViewer                           = 5,
	ExpText                                  = 6,
	ExpBar                                   = 7,
	EndOfEnum                                = 8,
	ETLHudComponentUIType_MAX                = 9,
};

// Enum TLClient.ETLHudComponentCondition
// NumValues: 0x0016
enum class ETLHudComponentCondition : uint8
{
	CombatStatus                             = 0,
	HpCostLessThanMax                        = 1,
	PressSkillSlotGroup                      = 2,
	PressQuickSlot                           = 3,
	HubMenu                                  = 4,
	TargetMode                               = 5,
	BadAbnormal                              = 6,
	SkillCoolTime                            = 7,
	OtherSkillCoolTime                       = 8,
	InputMoveOrCamera                        = 9,
	InputKey                                 = 10,
	ContentAlarmListChanged                  = 11,
	ContentAlarmReward                       = 12,
	JoinEvent                                = 13,
	TargetScanShow                           = 14,
	AmitoiInteractionShow                    = 15,
	ChatShow                                 = 16,
	InventoryShow                            = 17,
	FixTarget                                = 18,
	FriendlyTarget                           = 19,
	EndOfEnum                                = 20,
	ETLHudComponentCondition_MAX             = 21,
};

// Enum TLClient.ETLInspectionTraceType
// NumValues: 0x0004
enum class ETLInspectionTraceType : uint8
{
	None                                     = 0,
	Answer                                   = 1,
	Hint                                     = 2,
	ETLInspectionTraceType_MAX               = 3,
};

// Enum TLClient.EInteractionSkillWaitingReason
// NumValues: 0x0003
enum class EInteractionSkillWaitingReason : uint8
{
	None                                     = 0,
	Ownership                                = 1,
	EInteractionSkillWaitingReason_MAX       = 2,
};

// Enum TLClient.EInteractionDialogType
// NumValues: 0x0003
enum class EInteractionDialogType : uint8
{
	DialogTypeNone                           = 0,
	DialogTypeCodexDialog                    = 1,
	EInteractionDialogType_MAX               = 2,
};

// Enum TLClient.EInteractionFacilityType
// NumValues: 0x001D
enum class EInteractionFacilityType : uint8
{
	None                                     = 0,
	KShop                                    = 1,
	KStorage                                 = 2,
	KCastleKeeper                            = 3,
	KCraft                                   = 4,
	KRecovery                                = 5,
	KPolymorph                               = 6,
	KGuildStorage                            = 7,
	KMining                                  = 8,
	KGathering                               = 9,
	KLogging                                 = 10,
	KViewPoint                               = 11,
	KContract                                = 12,
	KTerritoryFogOpening                     = 13,
	KBeautyShop                              = 14,
	KItemGain                                = 15,
	KDungeonWaypoint                         = 16,
	KRotationEvent                           = 17,
	KGuildRaid                               = 18,
	KDungeonWaypointOpening                  = 19,
	KDeveloperLetter                         = 20,
	KCodexCollection                         = 21,
	KOpenInstanceDungeonUI                   = 22,
	KOpenPartyDungeonUI                      = 23,
	KOpenPartyDungeonRewardBoxUI             = 24,
	KPartyRecruitment                        = 25,
	KCooking                                 = 26,
	KOpenMagicDollExpeditionMap              = 27,
	EInteractionFacilityType_MAX             = 28,
};

// Enum TLClient.EInvenModeType
// NumValues: 0x001A
enum class EInvenModeType : uint8
{
	None                                     = 0,
	Inventory                                = 1,
	Shop                                     = 2,
	Storage                                  = 3,
	Crafting                                 = 4,
	Equip                                    = 5,
	Enchant                                  = 6,
	ItemDecomposition                        = 7,
	ItemCollection                           = 8,
	Trade                                    = 9,
	ItemDestroy                              = 10,
	RingMenu                                 = 11,
	StorageMultiSelect                       = 12,
	SkillBook                                = 13,
	ItemPackage                              = 14,
	ItemListView                             = 15,
	CraftingBook                             = 16,
	ItemTraitExtract                         = 17,
	ItemTraitList                            = 18,
	ItemLock                                 = 19,
	Expansion                                = 20,
	Rune                                     = 21,
	ItemRubbing                              = 22,
	Cooking                                  = 23,
	CookingBook                              = 24,
	EInvenModeType_MAX                       = 25,
};

// Enum TLClient.EItemSlotType
// NumValues: 0x0004
enum class EItemSlotType : uint8
{
	None                                     = 0,
	Storage                                  = 1,
	Inventory                                = 2,
	EItemSlotType_MAX                        = 3,
};

// Enum TLClient.ETLItemCollectionPanelWidgetType
// NumValues: 0x0004
enum class ETLItemCollectionPanelWidgetType : uint8
{
	None                                     = 0,
	ItemInfo                                 = 1,
	GroupItemBuyInfo                         = 2,
	ETLItemCollectionPanelWidgetType_MAX     = 3,
};

// Enum TLClient.ETLItemCollectionGroupTaskInfoTabType
// NumValues: 0x0002
enum class ETLItemCollectionGroupTaskInfoTabType : uint8
{
	Trade                                    = 0,
	ETLItemCollectionGroupTaskInfoTabType_MAX = 1,
};

// Enum TLClient.ETLItemCollectionGroupState
// NumValues: 0x0005
enum class ETLItemCollectionGroupState : uint8
{
	None                                     = 0,
	Registeable                              = 1,
	CanDeliver                               = 2,
	Delivered                                = 3,
	ETLItemCollectionGroupState_MAX          = 4,
};

// Enum TLClient.ETLItemCollectionNonRegisterableReason
// NumValues: 0x0007
enum class ETLItemCollectionNonRegisterableReason : uint8
{
	None                                     = 0,
	HasNoItem                                = 1,
	PresetItem                               = 2,
	Wearing                                  = 3,
	Locked                                   = 4,
	EquippedRune                             = 5,
	ETLItemCollectionNonRegisterableReason_MAX = 6,
};

// Enum TLClient.ETLItemCollectableState
// NumValues: 0x0005
enum class ETLItemCollectableState : uint8
{
	None                                     = 0,
	Completed                                = 1,
	ConditionalRegisterable                  = 2,
	Registerable                             = 3,
	ETLItemCollectableState_MAX              = 4,
};

// Enum TLClient.ETLItemCollectionRewardState
// NumValues: 0x0005
enum class ETLItemCollectionRewardState : uint8
{
	None                                     = 0,
	CantDeliver                              = 1,
	CanDeliver                               = 2,
	Delivered                                = 3,
	ETLItemCollectionRewardState_MAX         = 4,
};

// Enum TLClient.ETLItemCollectionRegisterType
// NumValues: 0x0003
enum class ETLItemCollectionRegisterType : uint8
{
	Single                                   = 0,
	Batch                                    = 1,
	ETLItemCollectionRegisterType_MAX        = 2,
};

// Enum TLClient.EItemCompositionType
// NumValues: 0x0004
enum class EItemCompositionType : uint8
{
	None                                     = 0,
	Polymorph                                = 1,
	EndOfEnum                                = 2,
	EItemCompositionType_MAX                 = 3,
};

// Enum TLClient.TLItemCompositionDef
// NumValues: 0x0006
enum class ETLItemCompositionDef : uint8
{
	KSuccess                                 = 0,
	KFailBySystem                            = 1,
	KFailByNotEnoughMaterials                = 2,
	KFailByTooMuchCompositeCount             = 3,
	KFailedByNotEnoughInvenSpace             = 4,
	TLItemCompositionDef_MAX                 = 5,
};

// Enum TLClient.ETLItemRubbingVisibleState
// NumValues: 0x0004
enum class ETLItemRubbingVisibleState : uint8
{
	Hide                                     = 0,
	ShowReady                                = 1,
	Show                                     = 2,
	ETLItemRubbingVisibleState_MAX           = 3,
};

// Enum TLClient.ETLItemSlotViewDragOverSideState
// NumValues: 0x0004
enum class ETLItemSlotViewDragOverSideState : uint8
{
	KNone                                    = 0,
	KLeft                                    = 1,
	KRight                                   = 2,
	ETLItemSlotViewDragOverSideState_MAX     = 3,
};

// Enum TLClient.ETLItemTraitChangeType
// NumValues: 0x0003
enum class ETLItemTraitChangeType : uint8
{
	Material                                 = 0,
	Random                                   = 1,
	ETLItemTraitChangeType_MAX               = 2,
};

// Enum TLClient.ETLItemChangeState
// NumValues: 0x0004
enum class ETLItemChangeState : uint8
{
	Ready                                    = 0,
	Progress                                 = 1,
	Done                                     = 2,
	ETLItemChangeState_MAX                   = 3,
};

// Enum TLClient.ETLTraitResonanceState
// NumValues: 0x0005
enum class ETLTraitResonanceState : uint8
{
	NeverOpened                              = 0,
	OpenAvailable                            = 1,
	Opened                                   = 2,
	OpenedButLocked                          = 3,
	ETLTraitResonanceState_MAX               = 4,
};

// Enum TLClient.ELobbyMessage
// NumValues: 0x000F
enum class ELobbyMessage : uint8
{
	KNone                                    = 0,
	KLobbyMessage_LogoFinished               = 1,
	KLobbyMessage_PhotoSensitiveWarningOK    = 2,
	KLobbyMessage_WarningFinished            = 3,
	KLobbyMessage_TitleIntroFinished         = 4,
	KLobbyMessage_SettingoFinished           = 5,
	KLobbyMessage_LoginIn                    = 6,
	KLobbyMessage_QuitGame                   = 7,
	KLobbyMessage_Agreed                     = 8,
	KLobbyMessage_Disagree                   = 9,
	KLobbyMessage_CreateCharacter            = 10,
	KLobbyMessage_StartGame                  = 11,
	KLobbyMessage_LogOut                     = 12,
	KLobbyMessage_IntroFinished              = 13,
	ELobbyMessage_MAX                        = 14,
};

// Enum TLClient.ETLMagicDollGachaSceneState
// NumValues: 0x0007
enum class ETLMagicDollGachaSceneState : uint8
{
	ENTER_GACHA                              = 0,
	ACTOR_SPAWN                              = 1,
	WAIT_CLICK_ACTOR                         = 2,
	PRE_RESULT                               = 3,
	RESULT                                   = 4,
	POST_RESULT                              = 5,
	ETLMagicDollGachaSceneState_MAX          = 6,
};

// Enum TLClient.EMagicDollGuideType
// NumValues: 0x0006
enum class EMagicDollGuideType : uint8
{
	None                                     = 0,
	NoRequiredItem                           = 1,
	AlreadySummoned                          = 2,
	NotAcquired                              = 3,
	KEndOfEnum                               = 4,
	EMagicDollGuideType_MAX                  = 5,
};

// Enum TLClient.ETLUIMagicDollGrade
// NumValues: 0x0008
enum class ETLUIMagicDollGrade : uint8
{
	All                                      = 0,
	AAA                                      = 1,
	AA                                       = 2,
	A                                        = 3,
	B                                        = 4,
	C                                        = 5,
	MAX                                      = 6,
	NONE                                     = 255,
};

// Enum TLClient.ETLProgressBarStateType
// NumValues: 0x0005
enum class ETLProgressBarStateType : uint8
{
	KComplete                                = 0,
	KNormal                                  = 1,
	KWarning                                 = 2,
	KEndOfEnum                               = 3,
	ETLProgressBarStateType_MAX              = 4,
};

// Enum TLClient.ETLMapIconInfoWindowType
// NumValues: 0x0003
enum class ETLMapIconInfoWindowType : uint8
{
	Tooltip                                  = 0,
	Window                                   = 1,
	ETLMapIconInfoWindowType_MAX             = 2,
};

// Enum TLClient.ETLWorldmapRegionInfoTabType
// NumValues: 0x0003
enum class ETLWorldmapRegionInfoTabType : uint8
{
	ProgressableContent                      = 0,
	MonsterInfo                              = 1,
	ETLWorldmapRegionInfoTabType_MAX         = 2,
};

// Enum TLClient.ETLWorldMapPanelType
// NumValues: 0x0005
enum class ETLWorldMapPanelType : uint8
{
	WorldMapList                             = 0,
	WorldPinList                             = 1,
	Caption                                  = 2,
	TimeTable                                = 3,
	ETLWorldMapPanelType_MAX                 = 4,
};

// Enum TLClient.ETLWorldampTabType
// NumValues: 0x0005
enum class ETLWorldampTabType : uint8
{
	RegionList                               = 0,
	PinList                                  = 1,
	Caption                                  = 2,
	TimeTable                                = 3,
	ETLWorldampTabType_MAX                   = 4,
};

// Enum TLClient.EMapDrawLineType
// NumValues: 0x0003
enum class EMapDrawLineType : uint8
{
	Line                                     = 0,
	MeshLine                                 = 1,
	EMapDrawLineType_MAX                     = 2,
};

// Enum TLClient.EWorldmapOpenMode
// NumValues: 0x000C
enum class EWorldmapOpenMode : uint8
{
	Default                                  = 0,
	Pin                                      = 1,
	ItemDropInfo                             = 2,
	DynamicEvent                             = 3,
	Npc                                      = 4,
	Fo                                       = 5,
	TargetInfo                               = 6,
	Hyperlink                                = 7,
	GuildMemberAttacked                      = 8,
	GuildOccupation                          = 9,
	ContentsAlarm                            = 10,
	EWorldmapOpenMode_MAX                    = 11,
};

// Enum TLClient.ETLMapModeType
// NumValues: 0x0005
enum class ETLMapModeType : uint8
{
	NONE                                     = 0,
	WORLD_MAP                                = 1,
	MINI_MAP                                 = 2,
	OVERLAY_MAP                              = 3,
	ETLMapModeType_MAX                       = 4,
};

// Enum TLClient.ETLMinimapPanningState
// NumValues: 0x0004
enum class ETLMinimapPanningState : uint8
{
	NONE                                     = 0,
	MOVING                                   = 1,
	RETURN_TO_MY_POS                         = 2,
	ETLMinimapPanningState_MAX               = 3,
};

// Enum TLClient.ETLSiegeWarfareStatus
// NumValues: 0x0005
enum class ETLSiegeWarfareStatus : uint8
{
	NONE                                     = 0,
	STANDBY                                  = 1,
	IN_PROGRESS                              = 2,
	RESULT                                   = 3,
	ETLSiegeWarfareStatus_MAX                = 4,
};

// Enum TLClient.EMemorialRecordGoalType
// NumValues: 0x0003
enum class EMemorialRecordGoalType : uint8
{
	KNone                                    = 0,
	KOne                                     = 1,
	EMemorialRecordGoalType_MAX              = 2,
};

// Enum TLClient.EMemorialStatus
// NumValues: 0x0004
enum class EMemorialStatus : uint8
{
	KNone                                    = 0,
	KProgress                                = 1,
	KComplete                                = 2,
	EMemorialStatus_MAX                      = 3,
};

// Enum TLClient.EMemorialRecordUnlockStatus
// NumValues: 0x0004
enum class EMemorialRecordUnlockStatus : uint8
{
	Empty                                    = 0,
	Locked                                   = 1,
	Unlocked                                 = 2,
	EMemorialRecordUnlockStatus_MAX          = 3,
};

// Enum TLClient.ETLPushMessageCategoryType
// NumValues: 0x0008
enum class ETLPushMessageCategoryType : uint8
{
	None                                     = 0,
	NOTIFICATION_QUEUE_CONNECTION            = 1,
	NOTIFICATION_AAA_ITEM_ACQUISITION        = 13,
	NOTIFICATION_AA_ITEM_ACQUISITION         = 14,
	NOTIFICATION_A_ITEM_ACQUISITION          = 15,
	NOTIFICATION_EVENT_START                 = 17,
	NOTIFICATION_EXCHANGE_SALES              = 18,
	ETLPushMessageCategoryType_MAX           = 19,
};

// Enum TLClient.ETLWeaponMasteryMsgBoxType
// NumValues: 0x0004
enum class ETLWeaponMasteryMsgBoxType : uint8
{
	None                                     = 0,
	Open                                     = 1,
	Upgrade                                  = 2,
	ETLWeaponMasteryMsgBoxType_MAX           = 3,
};

// Enum TLClient.ETLQuitGameMsgBoxType
// NumValues: 0x0003
enum class ETLQuitGameMsgBoxType : uint8
{
	None                                     = 0,
	AutoCombat                               = 1,
	ETLQuitGameMsgBoxType_MAX                = 2,
};

// Enum TLClient.ETLMsgBoxModifyShoppingBasketType
// NumValues: 0x0005
enum class ETLMsgBoxModifyShoppingBasketType : uint8
{
	AddPurchaseItem                          = 0,
	ChangeItemPurchaseCount                  = 1,
	AddSellItem                              = 2,
	ChangeItemSellCount                      = 3,
	ETLMsgBoxModifyShoppingBasketType_MAX    = 4,
};

// Enum TLClient.ETLMsgBoxProgressBarPlayType
// NumValues: 0x0004
enum class ETLMsgBoxProgressBarPlayType : uint8
{
	TYPE_FIX_VALUE                           = 0,
	TYPE_TIME_INCREASE                       = 1,
	TYPE_TIME_DECREASE                       = 2,
	TYPE_MAX                                 = 3,
};

// Enum TLClient.ETLMsgBoxShowType
// NumValues: 0x0006
enum class ETLMsgBoxShowType : uint8
{
	MB_IN_ORDER                              = 0,
	MB_IMMEDIATELY                           = 1,
	MB_CLEAR                                 = 2,
	MB_STANDALONE                            = 3,
	MB_PENDING                               = 4,
	MB_MAX                                   = 5,
};

// Enum TLClient.ETLMsgBoxInputType
// NumValues: 0x0005
enum class ETLMsgBoxInputType : uint8
{
	FOCUS                                    = 0,
	MODAL                                    = 1,
	MODALESS                                 = 2,
	MODAL_NO_DIMMED                          = 3,
	ETLMsgBoxInputType_MAX                   = 4,
};

// Enum TLClient.ETLMsgBoxType
// NumValues: 0x002F
enum class ETLMsgBoxType : uint8
{
	TYPE_TEXT                                = 0,
	TYPE_TEXT_INPUT                          = 1,
	TYPE_NUMERIC_INPUT                       = 2,
	TYPE_PROGRESS_BAR                        = 3,
	TYPE_SLIDER                              = 4,
	TYPE_ITEMLIST                            = 5,
	TYPE_SHOPBUY                             = 6,
	TYPE_WAYPOINT                            = 7,
	TYPE_TOPMOST                             = 8,
	TYPE_PLEDGE                              = 9,
	TYPE_TRADE_PURCHASE                      = 10,
	TYPE_TRADE_PURCHASE_RES                  = 11,
	TYPE_TRADE_SALE                          = 12,
	TYPE_TRADE_SALE_CONFIRM                  = 13,
	TYPE_GUILDSKILL_CONFIRM                  = 14,
	TYPE_COST_CONFIRM                        = 15,
	TYPE_COMBOBOX                            = 16,
	TYPE_COMBOINPUTBOX                       = 17,
	TYPE_GUILD_DISTRIBUTION                  = 18,
	TYPE_WEAPON_MASTERY_OPEN_NODE            = 19,
	TYPE_WEAPON_MASTERY_RESET_NODE           = 20,
	TYPE_WEAPON_MASTERY_ENCHANT_NODE         = 21,
	TYPE_LOBBYNAME                           = 22,
	TYPE_TEXT_INPUT_PASSWORD                 = 23,
	TYPE_SEASONPASS_PURCHASE                 = 24,
	TYPE_CHECKBOX                            = 25,
	TYPE_GAMEQUIT                            = 26,
	TYPE_RESTORATION_CONFIRM                 = 27,
	TYPE_SKILL_INTERACTION_PROGRESS          = 28,
	TYPE_REWARD                              = 29,
	TYPE_CRAFTPROBABILITY                    = 30,
	TYPE_CONTRACT_CONFIRM                    = 31,
	TYPE_BOUTIQUE_PROFILECHANGE              = 32,
	TYPE_MANOR_TAX_RATE_CONFIRM              = 33,
	TYPE_INVENTORY_EXPANSION                 = 34,
	TYPE_CHECK_COST                          = 35,
	TYPE_TIME_ATTACK_DUNGEON_EXPECTED_RANKING = 36,
	TYPE_INPUT_RENAME                        = 37,
	TYPE_CONTRACT_PARTY_SHARE                = 38,
	TYPE_OCCUPATION_DECLARE                  = 39,
	TYPE_SHOP_ADD_PURCHASE_ITEM              = 40,
	TYPE_PENALTY_TEXT                        = 41,
	TYPE_MAGICDOLL_EXPEDITION                = 42,
	TYPE_RESTORE_DEATH_PENALTY               = 43,
	TYPE_PARTY_DUNGEON_DESTROY_CONFIRM       = 44,
	TYPE_NONE                                = 255,
	TYPE_MAX                                 = 256,
};

// Enum TLClient.ETLMsgBoxBtnType
// NumValues: 0x0006
enum class ETLMsgBoxBtnType : uint8
{
	BT_OK                                    = 0,
	BT_CANCEL                                = 1,
	BT_YES                                   = 2,
	BT_NO                                    = 3,
	BT_TIMEOUT                               = 4,
	BT_MAX                                   = 5,
};

// Enum TLClient.ETLMsgBoxBtnStyle
// NumValues: 0x0007
enum class ETLMsgBoxBtnStyle : uint8
{
	BS_OK                                    = 0,
	BS_OK_CANCEL                             = 1,
	BS_YES_NO                                = 2,
	BS_YES_NO_CANCEL                         = 3,
	BS_CANCEL                                = 4,
	BS_ACCEPT                                = 5,
	BS_MAX                                   = 6,
};

// Enum TLClient.ETLSpecialMoveSpeedDirection
// NumValues: 0x0003
enum class ETLSpecialMoveSpeedDirection : uint8
{
	XYBase                                   = 0,
	ZBase                                    = 1,
	ETLSpecialMoveSpeedDirection_MAX         = 2,
};

// Enum TLClient.EMoveState
// NumValues: 0x0005
enum class EMoveState : uint8
{
	WALK                                     = 0,
	FALLING                                  = 1,
	GLIDING                                  = 2,
	SWIMMING                                 = 3,
	MAX                                      = 4,
};

// Enum TLClient.ETLMoviePlayEvent
// NumValues: 0x0003
enum class ETLMoviePlayEvent : uint8
{
	EVENT_MOVIE_START                        = 0,
	EVENT_MOVIE_FINISH                       = 1,
	EVENT_MOVIE_MAX                          = 2,
};

// Enum TLClient.ETLMovieSceneType
// NumValues: 0x0003
enum class ETLMovieSceneType : uint8
{
	MOVIE                                    = 0,
	CUTSCENE                                 = 1,
	ETLMovieSceneType_MAX                    = 2,
};

// Enum TLClient.ETLMoveFailReason
// NumValues: 0x000F
enum class ETLMoveFailReason : uint8
{
	KUnknown                                 = 0,
	KInvalidReq                              = 1,
	KCanNotMove                              = 2,
	KDead                                    = 3,
	KNoSection                               = 4,
	KCanNotEnter                             = 5,
	KCooldown                                = 6,
	KBlocked                                 = 7,
	KNoStamina                               = 8,
	KInvalidForcedMoveSpeed                  = 9,
	KTinyMove                                = 10,
	KSampleGround                            = 11,
	KSampleClimbing                          = 12,
	KEndOfEnum                               = 13,
	ETLMoveFailReason_MAX                    = 14,
};

// Enum TLClient.ETLKeepActionType
// NumValues: 0x0004
enum class ETLKeepActionType : uint8
{
	KNone                                    = 0,
	KAttack                                  = 1,
	KMove                                    = 2,
	ETLKeepActionType_MAX                    = 3,
};

// Enum TLClient.ETLPlayerActionState
// NumValues: 0x0005
enum class ETLPlayerActionState : uint8
{
	None                                     = 0,
	Idle                                     = 1,
	Move                                     = 2,
	Jump                                     = 3,
	ETLPlayerActionState_MAX                 = 4,
};

// Enum TLClient.ETLPcActionType
// NumValues: 0x0007
enum class ETLPcActionType : uint8
{
	KSkill                                   = 0,
	KInteract                                = 1,
	KMoveToLocation                          = 2,
	KFollowObject                            = 3,
	KMoveAfterTurn                           = 4,
	KEndOfEnum                               = 5,
	ETLPcActionType_MAX                      = 6,
};

// Enum TLClient.EExternalForceType
// NumValues: 0x0004
enum class EExternalForceType : uint8
{
	None                                     = 0,
	PullDownOverTargetPosition               = 1,
	PushInTargetDirection                    = 2,
	EExternalForceType_MAX                   = 3,
};

// Enum TLClient.EDisability
// NumValues: 0x0015
enum class EDisability : uint8
{
	None                                     = 0,
	UseSkill                                 = 1,
	UseSkillMelee                            = 2,
	UseSkillRange                            = 3,
	UseSkillMagic                            = 4,
	Move                                     = 5,
	EquipItem                                = 6,
	Interact                                 = 7,
	PickUpItem                               = 8,
	UseItem                                  = 9,
	Jump                                     = 10,
	Run                                      = 11,
	WeaponSwap                               = 12,
	TemporaryWeaponSwap                      = 13,
	All                                      = 14,
	AllForSkill                              = 15,
	AllForMoveSkill                          = 16,
	AllForMount                              = 17,
	EndOfEnum                                = 18,
	Error                                    = 255,
	EDisability_MAX                          = 256,
};

// Enum TLClient.ETLMyContentImportanceRole
// NumValues: 0x0007
enum class ETLMyContentImportanceRole : uint8
{
	MyPc                                     = 0,
	PartyMember                              = 1,
	Target                                   = 2,
	Boss                                     = 3,
	Etc                                      = 4,
	Types                                    = 5,
	ETLMyContentImportanceRole_MAX           = 6,
};

// Enum TLClient.ENotifyLifeCycle
// NumValues: 0x0005
enum class ENotifyLifeCycle : uint8
{
	None                                     = 0,
	Waiting                                  = 1,
	Progress                                 = 2,
	Destruction                              = 3,
	ENotifyLifeCycle_MAX                     = 4,
};

// Enum TLClient.ETLNpcSectorTargetMarker
// NumValues: 0x0005
enum class ETLNpcSectorTargetMarker : uint8
{
	KNone                                    = 0,
	KNpcSectorOn                             = 1,
	KNpcSectorAttackedMe                     = 2,
	KNpcSectorOff                            = 3,
	ETLNpcSectorTargetMarker_MAX             = 4,
};

// Enum TLClient.ETLTargetMarkerDist
// NumValues: 0x0005
enum class ETLTargetMarkerDist : uint8
{
	None                                     = 0,
	ShortRange                               = 1,
	LongRange                                = 2,
	OutRangeWithToggleOn                     = 3,
	ETLTargetMarkerDist_MAX                  = 4,
};

// Enum TLClient.ETLTargetMarker
// NumValues: 0x000F
enum class ETLTargetMarker : uint8
{
	None                                     = 0,
	TargetButNotSeen                         = 1,
	TargetMarkerShortRangeOutOfSight         = 2,
	TargetMarkerLongRangeOutOfSight          = 3,
	AutoTarget                               = 4,
	AutoTargetOutOfSight                     = 5,
	HoldTarget                               = 6,
	HoldTargetOutOfSight                     = 7,
	NeurtralTarget                           = 8,
	NeurtralTargetOutOfSight                 = 9,
	GamepadTarget                            = 10,
	GamepadAimCandidateTarget                = 11,
	GamepadAimSelectTarget                   = 12,
	LockOnCameraTarget                       = 13,
	ETLTargetMarker_MAX                      = 14,
};

// Enum TLClient.ETLRelationColorToMyPc
// NumValues: 0x000D
enum class ETLRelationColorToMyPc : uint8
{
	KMyPc                                    = 0,
	KNeutral                                 = 1,
	KEnemyGuild                              = 2,
	KParty                                   = 3,
	KMyGuild                                 = 4,
	KAllyGuild                               = 5,
	KNeutralPvp                              = 6,
	KEnemyGuildPvp                           = 7,
	KNpcNeutral                              = 8,
	KNpcAggressive                           = 9,
	KNpcHostile                              = 10,
	KNpcFriendly                             = 11,
	ETLRelationColorToMyPc_MAX               = 12,
};

// Enum TLClient.EOccupationDeclareState
// NumValues: 0x0006
enum class EOccupationDeclareState : uint8
{
	None                                     = 0,
	Selected                                 = 1,
	Declared                                 = 2,
	Matching                                 = 3,
	Complete                                 = 4,
	EOccupationDeclareState_MAX              = 5,
};

// Enum TLClient.EOccupationProtectType
// NumValues: 0x0005
enum class EOccupationProtectType : uint8
{
	GuildSkill                               = 0,
	DynamicEvent                             = 1,
	ChangeOwner                              = 2,
	None                                     = 255,
	EOccupationProtectType_MAX               = 256,
};

// Enum TLClient.ETLOptionAction
// NumValues: 0x0003
enum class ETLOptionAction : uint8
{
	None                                     = 0,
	AutoSetGraphicQuality                    = 1,
	ETLOptionAction_MAX                      = 2,
};

// Enum TLClient.ETLDPIScaleStep
// NumValues: 0x000A
enum class ETLDPIScaleStep : uint8
{
	None                                     = 0,
	STEP_1                                   = 1,
	STEP_2                                   = 2,
	STEP_3                                   = 3,
	STEP_4                                   = 4,
	STEP_5                                   = 5,
	STEP_6                                   = 6,
	STEP_7                                   = 7,
	STEP_8                                   = 8,
	ETLDPIScaleStep_MAX                      = 9,
};

// Enum TLClient.ETLGamepadUseSkillQuickSlotGroup
// NumValues: 0x0003
enum class ETLGamepadUseSkillQuickSlotGroup : uint8
{
	Directly                                 = 0,
	Page                                     = 1,
	ETLGamepadUseSkillQuickSlotGroup_MAX     = 2,
};

// Enum TLClient.ETLChatBalloonShowOption
// NumValues: 0x0005
enum class ETLChatBalloonShowOption : uint8
{
	ShowAll                                  = 0,
	PlayerOnly                               = 1,
	NpcOnly                                  = 2,
	HideAll                                  = 3,
	ETLChatBalloonShowOption_MAX             = 4,
};

// Enum TLClient.ETLActionCameraState
// NumValues: 0x0003
enum class ETLActionCameraState : uint8
{
	Off                                      = 0,
	On                                       = 1,
	ETLActionCameraState_MAX                 = 2,
};

// Enum TLClient.ETLCameraControlInputType
// NumValues: 0x0003
enum class ETLCameraControlInputType : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	ETLCameraControlInputType_MAX            = 2,
};

// Enum TLClient.ETLHoldToggleInputType
// NumValues: 0x0003
enum class ETLHoldToggleInputType : uint8
{
	HoldKey                                  = 0,
	PressToToggle                            = 1,
	ETLHoldToggleInputType_MAX               = 2,
};

// Enum TLClient.ETLPCMapModeType
// NumValues: 0x0003
enum class ETLPCMapModeType : uint8
{
	MINI_MAP                                 = 0,
	OVERLAY_MAP                              = 1,
	ETLPCMapModeType_MAX                     = 2,
};

// Enum TLClient.ETLTabOption
// NumValues: 0x0004
enum class ETLTabOption : uint8
{
	Circular                                 = 0,
	Normal                                   = 1,
	ScanOnly                                 = 2,
	ETLTabOption_MAX                         = 3,
};

// Enum TLClient.ETLQuickSlotAutoUseCondition
// NumValues: 0x0003
enum class ETLQuickSlotAutoUseCondition : uint8
{
	OnMoveOrCombat                           = 0,
	Always                                   = 1,
	ETLQuickSlotAutoUseCondition_MAX         = 2,
};

// Enum TLClient.ETLItemPickupWeightLimit
// NumValues: 0x0005
enum class ETLItemPickupWeightLimit : uint8
{
	Off                                      = 0,
	First                                    = 1,
	Second                                   = 2,
	Third                                    = 3,
	ETLItemPickupWeightLimit_MAX             = 4,
};

// Enum TLClient.ETLItemPickupType
// NumValues: 0x0004
enum class ETLItemPickupType : uint8
{
	All                                      = 0,
	MoreThanB                                = 1,
	MoreThanA                                = 2,
	ETLItemPickupType_MAX                    = 3,
};

// Enum TLClient.ETLSuperSamplingMethod
// NumValues: 0x0006
enum class ETLSuperSamplingMethod : uint8
{
	Off                                      = 0,
	DLSS                                     = 1,
	FSR2                                     = 2,
	XeSS                                     = 3,
	TAAU                                     = 4,
	ETLSuperSamplingMethod_MAX               = 5,
};

// Enum TLClient.ETLAnisotropy
// NumValues: 0x0005
enum class ETLAnisotropy : uint8
{
	X1                                       = 0,
	X4                                       = 1,
	X8                                       = 2,
	X16                                      = 3,
	ETLAnisotropy_MAX                        = 4,
};

// Enum TLClient.ETLGraphicQuality
// NumValues: 0x0005
enum class ETLGraphicQuality : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	Epic                                     = 3,
	ETLGraphicQuality_MAX                    = 4,
};

// Enum TLClient.ETLConsoleGraphicOption
// NumValues: 0x0003
enum class ETLConsoleGraphicOption : uint8
{
	Quality                                  = 0,
	Performance                              = 1,
	ETLConsoleGraphicOption_MAX              = 2,
};

// Enum TLClient.ETLColorVisionDeficiency
// NumValues: 0x0005
enum class ETLColorVisionDeficiency : uint8
{
	NormalVision                             = 0,
	Deuteranope                              = 1,
	Protanope                                = 2,
	Tritanope                                = 3,
	ETLColorVisionDeficiency_MAX             = 4,
};

// Enum TLClient.ETLFrameRateLimit
// NumValues: 0x000C
enum class ETLFrameRateLimit : uint16
{
	NotLimit                                 = 0,
	FPS_30                                   = 30,
	FPS_60                                   = 60,
	FPS_120                                  = 120,
	FPS_144                                  = 144,
	FPS_160                                  = 160,
	FPS_165                                  = 165,
	FPS_180                                  = 180,
	FPS_200                                  = 200,
	FPS_240                                  = 240,
	FPS_360                                  = 360,
	ETLFrameRateLimit_MAX                    = 361,
};

// Enum TLClient.ETLXeSSMode
// NumValues: 0x0008
enum class ETLXeSSMode : uint8
{
	Off                                      = 0,
	UltraQualityPlus                         = 1,
	UltraQuality                             = 2,
	Quality                                  = 3,
	Balanced                                 = 4,
	Performance                              = 5,
	UltraPerformance                         = 6,
	ETLXeSSMode_MAX                          = 7,
};

// Enum TLClient.ETLFSR2Mode
// NumValues: 0x0006
enum class ETLFSR2Mode : uint8
{
	Off                                      = 0,
	Quality                                  = 1,
	Balanced                                 = 2,
	Performance                              = 3,
	UltraPerformance                         = 4,
	ETLFSR2Mode_MAX                          = 5,
};

// Enum TLClient.ETLDLSSMode
// NumValues: 0x0006
enum class ETLDLSSMode : uint8
{
	Off                                      = 0,
	Quality                                  = 1,
	Balanced                                 = 2,
	Performance                              = 3,
	UltraPerformance                         = 4,
	ETLDLSSMode_MAX                          = 5,
};

// Enum TLClient.ETLGraphicGameFxFilter
// NumValues: 0x0005
enum class ETLGraphicGameFxFilter : uint8
{
	All                                      = 0,
	MyPc                                     = 1,
	Party                                    = 2,
	Guild                                    = 3,
	ETLGraphicGameFxFilter_MAX               = 4,
};

// Enum TLClient.ETLGraphicOverallQuality
// NumValues: 0x0006
enum class ETLGraphicOverallQuality : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	Epic                                     = 3,
	Custom                                   = 4,
	ETLGraphicOverallQuality_MAX             = 5,
};

// Enum TLClient.ETLScreenMode
// NumValues: 0x0004
enum class ETLScreenMode : uint8
{
	Fullscreen                               = 0,
	WindowedFullscreen                       = 1,
	Windowed                                 = 2,
	ETLScreenMode_MAX                        = 3,
};

// Enum TLClient.ETLPrivacyValue
// NumValues: 0x0005
enum class ETLPrivacyValue : uint8
{
	Everyone                                 = 0,
	Friends                                  = 1,
	NoOne                                    = 2,
	OnlyMe                                   = 3,
	ETLPrivacyValue_MAX                      = 4,
};

// Enum TLClient.ETLHanded
// NumValues: 0x0004
enum class ETLHanded : uint8
{
	None                                     = 0,
	Right                                    = 1,
	Left                                     = 2,
	ETLHanded_MAX                            = 3,
};

// Enum TLClient.ETLCameraType
// NumValues: 0x0007
enum class ETLCameraType : uint8
{
	FirstPersonPerspective                   = 0,
	ThridPersonPerspective                   = 1,
	OverTheShoulder                          = 2,
	LockOn                                   = 3,
	Fixed                                    = 4,
	Free                                     = 5,
	ETLCameraType_MAX                        = 6,
};

// Enum TLClient.ETLOptionAudioMode
// NumValues: 0x0004
enum class ETLOptionAudioMode : uint8
{
	Normal                                   = 1,
	Headphone                                = 2,
	Night                                    = 3,
	ETLOptionAudioMode_MAX                   = 4,
};

// Enum TLClient.ETLOptionCombatDynamic
// NumValues: 0x0004
enum class ETLOptionCombatDynamic : uint8
{
	Clear                                    = 1,
	Soft                                     = 2,
	Softer                                   = 3,
	ETLOptionCombatDynamic_MAX               = 4,
};

// Enum TLClient.ETLOptionSoundOnBackground
// NumValues: 0x0004
enum class ETLOptionSoundOnBackground : uint64
{
	Off                                      = 18446744073709551615,
	On                                       = 1,
	Low                                      = 2,
	ETLOptionSoundOnBackground_MAX           = 3,
};

// Enum TLClient.ETLOptionSoundVolumePreset
// NumValues: 0x0005
enum class ETLOptionSoundVolumePreset : uint8
{
	General                                  = 0,
	GeneralCombat                            = 1,
	MassiveCombat                            = 2,
	Alert                                    = 3,
	ETLOptionSoundVolumePreset_MAX           = 4,
};

// Enum TLClient.ETLGuildDonationReddotType
// NumValues: 0x0004
enum class ETLGuildDonationReddotType : uint8
{
	Charge                                   = 0,
	MaxCharge                                = 1,
	None                                     = 2,
	ETLGuildDonationReddotType_MAX           = 3,
};

// Enum TLClient.ETLVoiceChatInputMethod
// NumValues: 0x0004
enum class ETLVoiceChatInputMethod : uint8
{
	Always                                   = 0,
	Toggle                                   = 1,
	Hold                                     = 2,
	ETLVoiceChatInputMethod_MAX              = 3,
};

// Enum TLClient.ETLInvenSlotSize
// NumValues: 0x0003
enum class ETLInvenSlotSize : uint8
{
	Big                                      = 0,
	Small                                    = 1,
	ETLInvenSlotSize_MAX                     = 2,
};

// Enum TLClient.ETLDateTimeDisplay
// NumValues: 0x0003
enum class ETLDateTimeDisplay : uint8
{
	UTC                                      = 0,
	LST                                      = 1,
	ETLDateTimeDisplay_MAX                   = 2,
};

// Enum TLClient.ETLNameplateApplyRule
// NumValues: 0x0003
enum class ETLNameplateApplyRule : uint8
{
	Off                                      = 0,
	Custom                                   = 1,
	ETLNameplateApplyRule_MAX                = 2,
};

// Enum TLClient.ETLNameplateRelationshipOption
// NumValues: 0x0003
enum class ETLNameplateRelationshipOption : uint8
{
	RelationshipMark                         = 0,
	GuildMark                                = 1,
	ETLNameplateRelationshipOption_MAX       = 2,
};

// Enum TLClient.ETLNameplateShowOption
// NumValues: 0x0003
enum class ETLNameplateShowOption : uint8
{
	ShowOff                                  = 0,
	ShowAll                                  = 1,
	ETLNameplateShowOption_MAX               = 2,
};

// Enum TLClient.ETLChatActionAfterSendChat
// NumValues: 0x0004
enum class ETLChatActionAfterSendChat : uint8
{
	SetFocusInput                            = 0,
	LostFocusInput                           = 1,
	CloseChatUI                              = 2,
	ETLChatActionAfterSendChat_MAX           = 3,
};

// Enum TLClient.ETLMiniChatShowTime
// NumValues: 0x0005
enum class ETLMiniChatShowTime : uint8
{
	Ten                                      = 0,
	Thirty                                   = 1,
	Sixty                                    = 2,
	Always                                   = 3,
	ETLMiniChatShowTime_MAX                  = 4,
};

// Enum TLClient.ETLChatFontSize
// NumValues: 0x0006
enum class ETLChatFontSize : uint8
{
	Small                                    = 0,
	Medium                                   = 1,
	Large                                    = 2,
	XLarge                                   = 3,
	XXLarge                                  = 4,
	ETLChatFontSize_MAX                      = 5,
};

// Enum TLClient.ETLCursorFXType
// NumValues: 0x0004
enum class ETLCursorFXType : uint8
{
	Off                                      = 0,
	Weakly                                   = 1,
	Strongly                                 = 2,
	ETLCursorFXType_MAX                      = 3,
};

// Enum TLClient.ETLMapAlarmDuration
// NumValues: 0x0009
enum class ETLMapAlarmDuration : uint8
{
	One                                      = 0,
	Two                                      = 1,
	Three                                    = 2,
	Four                                     = 3,
	Five                                     = 4,
	Six                                      = 5,
	Seven                                    = 6,
	Eight                                    = 7,
	ETLMapAlarmDuration_MAX                  = 8,
};

// Enum TLClient.ETLAlarmRemaing
// NumValues: 0x0009
enum class ETLAlarmRemaing : uint8
{
	Always                                   = 0,
	Minute5                                  = 1,
	Minute10                                 = 2,
	Minute15                                 = 3,
	Minute30                                 = 4,
	Minute60                                 = 5,
	Minute120                                = 6,
	Minute180                                = 7,
	ETLAlarmRemaing_MAX                      = 8,
};

// Enum TLClient.ETLDungeonCategory
// NumValues: 0x0003
enum class ETLDungeonCategory : uint8
{
	Normal                                   = 0,
	Challenge                                = 1,
	ETLDungeonCategory_MAX                   = 2,
};

// Enum TLClient.ETLPartyItemRewardType
// NumValues: 0x0004
enum class ETLPartyItemRewardType : uint8
{
	KRandom                                  = 0,
	KFree                                    = 1,
	KRandomGet                               = 2,
	ETLPartyItemRewardType_MAX               = 3,
};

// Enum TLClient.ETLPartyState
// NumValues: 0x000C
enum class ETLPartyState : uint8
{
	None                                     = 0,
	RegisteredMaster                         = 1,
	RegisteredMember                         = 2,
	NotRegisteredMaster                      = 3,
	NotRegisteredMember                      = 4,
	MatchingMaster                           = 5,
	MatchingMember                           = 6,
	RoleDecidedWatingMaster                  = 7,
	RoleDecidedWatingMember                  = 8,
	ArenaMatchingMaster                      = 9,
	ArenaMatchingMember                      = 10,
	Max                                      = 11,
};

// Enum TLClient.EPartyMemberStatus
// NumValues: 0x0006
enum class EPartyMemberStatus : uint8
{
	Alive                                    = 0,
	Dead                                     = 1,
	ChangeMap                                = 2,
	Disconnected                             = 3,
	KWaitReconnect                           = 4,
	EPartyMemberStatus_MAX                   = 5,
};

// Enum TLClient.ERelationConnectionState
// NumValues: 0x0005
enum class ERelationConnectionState : uint8
{
	Logoff                                   = 0,
	Login                                    = 1,
	WaitingConnect                           = 2,
	DisconnectedPlaying                      = 3,
	ERelationConnectionState_MAX             = 4,
};

// Enum TLClient.ETLMapLogCategory
// NumValues: 0x0005
enum class ETLMapLogCategory : uint8
{
	Intro                                    = 0,
	Adventure                                = 1,
	Purchase                                 = 2,
	Level                                    = 3,
	Max                                      = 4,
};

// Enum TLClient.ETLElixineExtractType
// NumValues: 0x0004
enum class ETLElixineExtractType : uint8
{
	None                                     = 0,
	Adena                                    = 1,
	Diamond                                  = 2,
	ETLElixineExtractType_MAX                = 3,
};

// Enum TLClient.ETLPolymorphStateWidgetType
// NumValues: 0x0003
enum class ETLPolymorphStateWidgetType : uint8
{
	Combat                                   = 0,
	Special                                  = 1,
	ETLPolymorphStateWidgetType_MAX          = 2,
};

// Enum TLClient.ETLPolymorphFuncTab
// NumValues: 0x0005
enum class ETLPolymorphFuncTab : uint8
{
	CombatList                               = 0,
	ContextList                              = 1,
	EndOfEnum                                = 2,
	None                                     = 255,
	ETLPolymorphFuncTab_MAX                  = 256,
};

// Enum TLClient.EPolymorphGuideType
// NumValues: 0x0009
enum class EPolymorphGuideType : uint8
{
	None                                     = 0,
	NoRequiredItem                           = 1,
	AlreadyPolymorph                         = 2,
	NotAcquired                              = 3,
	NotChangeMode                            = 4,
	CanCheckBookMark                         = 5,
	CanUncheckBookMark                       = 6,
	KEndOfEnum                               = 7,
	EPolymorphGuideType_MAX                  = 8,
};

// Enum TLClient.ETLLoginEnterActionType
// NumValues: 0x0003
enum class ETLLoginEnterActionType : uint8
{
	ACTION_NC_PLATFORM_LOGIN                 = 0,
	ACTION_NC_PLATFORM_SHOW_LOGIN_PAGE       = 1,
	ACTION_NC_PLATFORM_MAX                   = 2,
};

// Enum TLClient.ETLShopPcModelPreviewPartType
// NumValues: 0x000D
enum class ETLShopPcModelPreviewPartType : uint8
{
	None                                     = 0,
	Weapon                                   = 1,
	Head                                     = 2,
	Chest                                    = 3,
	Hands                                    = 4,
	Legs                                     = 5,
	Feet                                     = 6,
	Cloak                                    = 7,
	CostumeWeapon                            = 8,
	CostumeBody                              = 9,
	CostumeHead                              = 10,
	CostumeAll                               = 11,
	ETLShopPcModelPreviewPartType_MAX        = 12,
};

// Enum TLClient.ETLPurchaseShopCategoryType
// NumValues: 0x0004
enum class ETLPurchaseShopCategoryType : uint8
{
	None                                     = 0,
	Default                                  = 1,
	AutoSetting                              = 2,
	ETLPurchaseShopCategoryType_MAX          = 3,
};

// Enum TLClient.ETLPurchaseLimitDurationUnitType
// NumValues: 0x0008
enum class ETLPurchaseLimitDurationUnitType : uint8
{
	None                                     = 0,
	Hour                                     = 3,
	Day                                      = 4,
	Week                                     = 5,
	Month                                    = 6,
	Year                                     = 7,
	EffectiveTime                            = 8,
	ETLPurchaseLimitDurationUnitType_MAX     = 9,
};

// Enum TLClient.ETLPurchaseLimitUserType
// NumValues: 0x0008
enum class ETLPurchaseLimitUserType : uint8
{
	None                                     = 0,
	Customer                                 = 1,
	Account                                  = 2,
	AccountCharacter                         = 3,
	AccountServer                            = 4,
	AccountServerCharacter                   = 5,
	GameAccount                              = 7,
	ETLPurchaseLimitUserType_MAX             = 8,
};

// Enum TLClient.ETLPurchaseLimitPolicyType
// NumValues: 0x0005
enum class ETLPurchaseLimitPolicyType : uint8
{
	None                                     = 0,
	ShowCase                                 = 1,
	Limit                                    = 2,
	Recommend                                = 3,
	ETLPurchaseLimitPolicyType_MAX           = 4,
};

// Enum TLClient.ETLPurchaseDiscountType
// NumValues: 0x0004
enum class ETLPurchaseDiscountType : uint8
{
	None                                     = 0,
	Fixed                                    = 1,
	Ratio                                    = 2,
	ETLPurchaseDiscountType_MAX              = 3,
};

// Enum TLClient.EPurchaseSubTabType
// NumValues: 0x0011
enum class EPurchaseSubTabType : uint8
{
	All                                      = 0,
	PackageSpecial                           = 1,
	PackageCommon                            = 2,
	GrowthEquip                              = 3,
	GrowthUsable                             = 4,
	EventSpecial                             = 5,
	EventCommon                              = 6,
	ContractCoin                             = 7,
	GuildCoin                                = 8,
	SocialCoin                               = 9,
	FuncAdditional                           = 10,
	FuncLimitary                             = 11,
	FuncExpand                               = 12,
	FuncSocial                               = 13,
	CashCurrency                             = 14,
	CashPass                                 = 15,
	Max                                      = 16,
};

// Enum TLClient.EPurchaseMainTabType
// NumValues: 0x000A
enum class EPurchaseMainTabType : uint8
{
	Main                                     = 0,
	Cash                                     = 1,
	Package                                  = 2,
	Growth                                   = 3,
	Gacha                                    = 4,
	Event                                    = 5,
	Coin                                     = 6,
	Func                                     = 7,
	Warehouse                                = 8,
	Max                                      = 9,
};

// Enum TLClient.ETLPVPHistoryEventType
// NumValues: 0x0006
enum class ETLPVPHistoryEventType : uint8
{
	Kill                                     = 0,
	Death                                    = 1,
	Assist                                   = 2,
	All                                      = 3,
	Num                                      = 4,
	ETLPVPHistoryEventType_MAX               = 5,
};

// Enum TLClient.ETLChangeItemQuickSlotMode
// NumValues: 0x0006
enum class ETLChangeItemQuickSlotMode : uint8
{
	None                                     = 0,
	Equip                                    = 1,
	Unequip                                  = 2,
	Swap                                     = 3,
	Add                                      = 4,
	ETLChangeItemQuickSlotMode_MAX           = 5,
};

// Enum TLClient.ETLQuickSlotType
// NumValues: 0x0005
enum class ETLQuickSlotType : uint8
{
	KNone                                    = 0,
	KInvenItem                               = 1,
	KSkill                                   = 2,
	KGuildSkill                              = 3,
	ETLQuickSlotType_MAX                     = 4,
};

// Enum TLClient.ETLQuickSlotPresetState
// NumValues: 0x0004
enum class ETLQuickSlotPresetState : uint8
{
	Default                                  = 0,
	Membership                               = 1,
	MembershipExpired                        = 2,
	ETLQuickSlotPresetState_MAX              = 3,
};

// Enum TLClient.ERankingEntryChangeType
// NumValues: 0x0006
enum class ERankingEntryChangeType : uint8
{
	None                                     = 0,
	New                                      = 1,
	Up                                       = 2,
	Down                                     = 3,
	Same                                     = 4,
	ERankingEntryChangeType_MAX              = 5,
};

// Enum TLClient.EGuildRankingType
// NumValues: 0x0003
enum class EGuildRankingType : uint8
{
	All                                      = 0,
	UnionOnly                                = 1,
	EGuildRankingType_MAX                    = 2,
};

// Enum TLClient.ERankingType
// NumValues: 0x000A
enum class ERankingType : uint8
{
	Exp                                      = 0,
	NowExp                                   = 1,
	Pvp                                      = 2,
	NowPvp                                   = 3,
	ActivePoint                              = 4,
	NowActivePoint                           = 5,
	Guild                                    = 6,
	NowGuild                                 = 7,
	Num                                      = 8,
	ERankingType_MAX                         = 9,
};

// Enum TLClient.ETLReplaceItemContentType
// NumValues: 0x0007
enum class ETLReplaceItemContentType : uint8
{
	TimeLimitDungeon                         = 0,
	ItemEnchant                              = 1,
	ItemGuildRaid                            = 2,
	Crafting                                 = 3,
	CraftingBook                             = 4,
	None                                     = 255,
	ETLReplaceItemContentType_MAX            = 256,
};

// Enum TLClient.ETLReplaceItemType
// NumValues: 0x0004
enum class ETLReplaceItemType : uint8
{
	Popup                                    = 0,
	Widget                                   = 1,
	None                                     = 255,
	ETLReplaceItemType_MAX                   = 256,
};

// Enum TLClient.ETLRotationEventRankingTabType
// NumValues: 0x0004
enum class ETLRotationEventRankingTabType : uint8
{
	Total                                    = 0,
	Daily                                    = 1,
	NONE                                     = 2,
	ETLRotationEventRankingTabType_MAX       = 3,
};

// Enum TLClient.ETLRotationEventStateType
// NumValues: 0x0005
enum class ETLRotationEventStateType : uint8
{
	NONE                                     = 0,
	READY                                    = 1,
	PROGRESS                                 = 2,
	GRACE_PERIOD                             = 3,
	MAX                                      = 4,
};

// Enum TLClient.ETLRuneInvenCategory
// NumValues: 0x0006
enum class ETLRuneInvenCategory : uint8
{
	All                                      = 0,
	Attack                                   = 1,
	Defense                                  = 2,
	Assist                                   = 3,
	AllType                                  = 4,
	Max                                      = 5,
};

// Enum TLClient.ETLRuneSocketState
// NumValues: 0x0005
enum class ETLRuneSocketState : uint8
{
	None                                     = 0,
	NotOpen                                  = 1,
	Empty                                    = 2,
	Equipped                                 = 3,
	ETLRuneSocketState_MAX                   = 4,
};

// Enum TLClient.ETLRuneFrameState
// NumValues: 0x0007
enum class ETLRuneFrameState : uint8
{
	None                                     = 0,
	EmptyTarget                              = 1,
	TargetReady                              = 2,
	RuneSelect                               = 3,
	SocketSelect                             = 4,
	RuneProgress                             = 5,
	ETLRuneFrameState_MAX                    = 6,
};

// Enum TLClient.ETLServerPopulationStatus
// NumValues: 0x0004
enum class ETLServerPopulationStatus : uint8
{
	Low                                      = 0,
	Normal                                   = 1,
	High                                     = 2,
	ETLServerPopulationStatus_MAX            = 3,
};

// Enum TLClient.ETLServerOpenState
// NumValues: 0x000D
enum class ETLServerOpenState : uint8
{
	ClosedByUnknownReason                    = 0,
	Open                                     = 1,
	ClosedByMemorialPrecedency               = 2,
	ClosedByDisabledTransfer                 = 3,
	ClosedByInCongestion                     = 4,
	ClosedBySystemError                      = 5,
	ClosedByTooLowUserCount                  = 6,
	ClosedByTransferAllowedNotAnyMore        = 7,
	ClosedByDisabledCreateCharacter          = 8,
	ClosedBySelfRealm                        = 9,
	ClosedByNotAlive                         = 10,
	ClosedByInvalidRealm                     = 11,
	ETLServerOpenState_MAX                   = 12,
};

// Enum TLClient.ETLFeatureLockItemType
// NumValues: 0x000C
enum class ETLFeatureLockItemType : uint8
{
	Craft                                    = 0,
	Usage                                    = 1,
	Drop                                     = 2,
	Enchant                                  = 3,
	PostDetach                               = 4,
	EnchantTransfer                          = 5,
	Trait                                    = 6,
	NpcShopBuySell                           = 7,
	Decompose                                = 8,
	Trade                                    = 9,
	None                                     = 10,
	ETLFeatureLockItemType_MAX               = 11,
};

// Enum TLClient.ETLBatchShopTabType
// NumValues: 0x0003
enum class ETLBatchShopTabType : uint8
{
	ALL                                      = 0,
	Limit                                    = 1,
	ETLBatchShopTabType_MAX                  = 2,
};

// Enum TLClient.ETLShopUnPurchasableReason
// NumValues: 0x000C
enum class ETLShopUnPurchasableReason : uint8
{
	InValid                                  = 0,
	SoldOut                                  = 1,
	AcquiredMagicDoll                        = 2,
	AcquiredPolymorph                        = 3,
	AcquiredSocialMotion                     = 4,
	AcquiredCostume                          = 5,
	AcquiredCostumeWeapon                    = 6,
	PcUnPurchasableLevel                     = 7,
	GuildUnPurchasableLevel                  = 8,
	RestrictedItem                           = 9,
	UnPurchasableFishingLevel                = 10,
	ETLShopUnPurchasableReason_MAX           = 11,
};

// Enum TLClient.ETLShopOpenType
// NumValues: 0x0003
enum class ETLShopOpenType : uint8
{
	Default                                  = 0,
	GuildManager                             = 1,
	ETLShopOpenType_MAX                      = 2,
};

// Enum TLClient.ETLFishingStatus
// NumValues: 0x0003
enum class ETLFishingStatus : uint8
{
	Fishing_Start                            = 0,
	Fishing_End                              = 1,
	MAX                                      = 2,
};

// Enum TLClient.ETLPVECombatState
// NumValues: 0x0004
enum class ETLPVECombatState : uint8
{
	None                                     = 0,
	On                                       = 1,
	Off                                      = 2,
	MAX                                      = 3,
};

// Enum TLClient.ETLAutoCombatVibration
// NumValues: 0x0003
enum class ETLAutoCombatVibration : uint8
{
	Off                                      = 0,
	On                                       = 1,
	MAX                                      = 2,
};

// Enum TLClient.ETLSoundTargetMode
// NumValues: 0x0003
enum class ETLSoundTargetMode : uint8
{
	Off                                      = 0,
	On                                       = 1,
	MAX                                      = 2,
};

// Enum TLClient.ETLSoundGamepadType
// NumValues: 0x0003
enum class ETLSoundGamepadType : uint8
{
	DualSense                                = 0,
	Others                                   = 1,
	MAX                                      = 2,
};

// Enum TLClient.ETLAttachParentType
// NumValues: 0x0003
enum class ETLAttachParentType : uint8
{
	None                                     = 0,
	Gigantrite                               = 1,
	MAX                                      = 2,
};

// Enum TLClient.ETLSoundObjectType
// NumValues: 0x0006
enum class ETLSoundObjectType : uint8
{
	None                                     = 0,
	PC                                       = 1,
	NPC                                      = 2,
	FO                                       = 3,
	Item                                     = 4,
	MAX                                      = 5,
};

// Enum TLClient.ETLSoundActionType
// NumValues: 0x0003
enum class ETLSoundActionType : uint8
{
	None                                     = 0,
	MusicControl                             = 1,
	MAX                                      = 2,
};

// Enum TLClient.ETLSoundSpecialSounds
// NumValues: 0x0017
enum class ETLSoundSpecialSounds : uint8
{
	StopMusicObject                          = 0,
	OnMapLoadBegin                           = 1,
	OnMapLoadEnd                             = 2,
	OnItemDrop                               = 3,
	OnItemPickUp                             = 4,
	OnItemEquip                              = 5,
	OnItemStow                               = 6,
	OnItemUse                                = 7,
	PlayWeatherAmbient                       = 8,
	StopWeatherAmbient                       = 9,
	PlayLobbyMusic                           = 10,
	StopLobbyMusic                           = 11,
	OnKillPC                                 = 12,
	PlayLoadingPhaseMusic                    = 13,
	StopLoadingPhaseMusic                    = 14,
	PlayExpressionVoice3D                    = 15,
	PlayMagicDollExpressionVoice2D           = 16,
	PlayMagicDollExpressionVoice3D           = 17,
	PlayWarfareWalla                         = 18,
	StopWarfareWalla                         = 19,
	PlayWarfareWallaCenter                   = 20,
	StopWarfareWallaCenter                   = 21,
	MAX                                      = 22,
};

// Enum TLClient.ETLSoundPregameLogin
// NumValues: 0x0005
enum class ETLSoundPregameLogin : uint8
{
	None                                     = 0,
	CharacterSelect                          = 1,
	Customize_IN                             = 2,
	Login                                    = 3,
	MAX                                      = 4,
};

// Enum TLClient.ETLSoundJumpType
// NumValues: 0x0005
enum class ETLSoundJumpType : uint8
{
	None                                     = 0,
	RunningJump                              = 1,
	InstantJumpOrFall                        = 2,
	Other                                    = 3,
	MAX                                      = 4,
};

// Enum TLClient.ETLConquestBattleUsurpingSide
// NumValues: 0x0004
enum class ETLConquestBattleUsurpingSide : uint8
{
	None                                     = 0,
	Ally                                     = 1,
	Enemy                                    = 2,
	MAX                                      = 3,
};

// Enum TLClient.ETLConquestBattleUsurpingState
// NumValues: 0x0004
enum class ETLConquestBattleUsurpingState : uint8
{
	None                                     = 0,
	Usurping_Start                           = 1,
	Usurping_End                             = 2,
	MAX                                      = 3,
};

// Enum TLClient.ETLSoundBossStoneUsurpingState
// NumValues: 0x0003
enum class ETLSoundBossStoneUsurpingState : uint8
{
	None                                     = 0,
	On                                       = 1,
	MAX                                      = 2,
};

// Enum TLClient.ETLSoundConquestBattleState
// NumValues: 0x0004
enum class ETLSoundConquestBattleState : uint8
{
	None                                     = 0,
	BossStone                                = 1,
	RegionStone                              = 2,
	MAX                                      = 3,
};

// Enum TLClient.ETLSoundTeamBattleState
// NumValues: 0x0005
enum class ETLSoundTeamBattleState : uint8
{
	None                                     = 0,
	Awareness                                = 1,
	Confrontation                            = 2,
	Battle                                   = 3,
	MAX                                      = 4,
};

// Enum TLClient.ETLSoundAudioMode
// NumValues: 0x0005
enum class ETLSoundAudioMode : uint8
{
	None                                     = 0,
	MasteringSuite_Normal                    = 1,
	MasteringSuite_Headphones                = 2,
	MasteringSuite_NightMode                 = 3,
	MAX                                      = 4,
};

// Enum TLClient.ETLSoundBossSectorState
// NumValues: 0x0004
enum class ETLSoundBossSectorState : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Destroyed                                = 2,
	MAX                                      = 3,
};

// Enum TLClient.ETLSoundVoiceType
// NumValues: 0x0008
enum class ETLSoundVoiceType : uint8
{
	None                                     = 0,
	Male1                                    = 1,
	Male2                                    = 2,
	Male3                                    = 3,
	Female1                                  = 4,
	Female2                                  = 5,
	Female3                                  = 6,
	MAX                                      = 7,
};

// Enum TLClient.ETLSoundItemUsingType
// NumValues: 0x0004
enum class ETLSoundItemUsingType : uint8
{
	None                                     = 0,
	Manual                                   = 1,
	Auto                                     = 2,
	MAX                                      = 3,
};

// Enum TLClient.ETLSoundAutoCombatState
// NumValues: 0x0004
enum class ETLSoundAutoCombatState : uint8
{
	None                                     = 0,
	On                                       = 1,
	Off                                      = 2,
	MAX                                      = 3,
};

// Enum TLClient.ETLSoundUsurpingSide
// NumValues: 0x0004
enum class ETLSoundUsurpingSide : uint8
{
	None                                     = 0,
	Ally                                     = 1,
	Enemy                                    = 2,
	MAX                                      = 3,
};

// Enum TLClient.ETLSoundUsurpingState
// NumValues: 0x0004
enum class ETLSoundUsurpingState : uint8
{
	None                                     = 0,
	FirstUsurping                            = 1,
	Usurping                                 = 2,
	MAX                                      = 3,
};

// Enum TLClient.ETLSoundSiegeWarfareState
// NumValues: 0x0005
enum class ETLSoundSiegeWarfareState : uint8
{
	None                                     = 0,
	Standby                                  = 1,
	InProgress                               = 2,
	Overtime                                 = 3,
	MAX                                      = 4,
};

// Enum TLClient.ETLSoundHitResultType
// NumValues: 0x000F
enum class ETLSoundHitResultType : uint8
{
	None                                     = 0,
	Hit                                      = 1,
	Great                                    = 2,
	Critical                                 = 3,
	Miss                                     = 4,
	Glancing                                 = 5,
	Block                                    = 6,
	Absorb                                   = 7,
	Counter                                  = 8,
	Recovery                                 = 9,
	Immuned                                  = 10,
	Double                                   = 11,
	CriticalDouble                           = 12,
	Debug                                    = 13,
	MAX                                      = 14,
};

// Enum TLClient.ETLSoundWeatherType
// NumValues: 0x0008
enum class ETLSoundWeatherType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Rain                                     = 2,
	Thunder                                  = 3,
	Snow                                     = 4,
	Indoor                                   = 5,
	MagicRain                                = 6,
	MAX                                      = 7,
};

// Enum TLClient.ETLSoundVoicePriority
// NumValues: 0x0006
enum class ETLSoundVoicePriority : uint8
{
	None                                     = 0,
	Codex                                    = 1,
	Timeline                                 = 2,
	Speak                                    = 3,
	Interaction                              = 4,
	MAX                                      = 5,
};

// Enum TLClient.ETLSoundSnapshotType
// NumValues: 0x000D
enum class ETLSoundSnapshotType : uint8
{
	Default                                  = 0,
	Combat                                   = 1,
	Death                                    = 2,
	CinemaTypeA                              = 3,
	CinemaTypeB                              = 4,
	CinemaTypeC                              = 5,
	CinemaTypeD                              = 6,
	CinemaTypeE                              = 7,
	HPExhaust                                = 8,
	Gliding                                  = 9,
	InteractionScene                         = 10,
	None                                     = 11,
	MAX                                      = 12,
};

// Enum TLClient.ETLSoundContentType
// NumValues: 0x0007
enum class ETLSoundContentType : uint8
{
	None                                     = 0,
	MyPC                                     = 1,
	OtherPC                                  = 2,
	NPC                                      = 3,
	FO                                       = 4,
	Item                                     = 5,
	MAX                                      = 6,
};

// Enum TLClient.ETLSpecialActionGuideType
// NumValues: 0x000C
enum class ETLSpecialActionGuideType : uint8
{
	None                                     = 0,
	InviteArena                              = 1,
	InviteCallClanInfo                       = 2,
	InviteParty                              = 3,
	EventResult                              = 4,
	HotDeal                                  = 5,
	TutorialCenter                           = 6,
	TutorialLeft                             = 7,
	TutorialRight                            = 8,
	Contract                                 = 9,
	HUD                                      = 10,
	ETLSpecialActionGuideType_MAX            = 11,
};

// Enum TLClient.EInfinityDungeonState
// NumValues: 0x0004
enum class EInfinityDungeonState : uint8
{
	NotOpen                                  = 0,
	Progress                                 = 1,
	Complete                                 = 2,
	EInfinityDungeonState_MAX                = 3,
};

// Enum TLClient.ETLMassCombatModeOption
// NumValues: 0x0004
enum class ETLMassCombatModeOption : uint8
{
	NotApply                                 = 0,
	AutoApply                                = 1,
	AlwaysApply                              = 2,
	ETLMassCombatModeOption_MAX              = 3,
};

// Enum TLClient.ETLTaxDeliveryState
// NumValues: 0x0005
enum class ETLTaxDeliveryState : uint8
{
	PREPARE                                  = 0,
	PROGRESS                                 = 1,
	COMPLETE                                 = 2,
	NONE                                     = 3,
	ETLTaxDeliveryState_MAX                  = 4,
};

// Enum TLClient.ETimeType
// NumValues: 0x0003
enum class ETimeType : uint8
{
	Gate                                     = 0,
	World                                    = 1,
	ETimeType_MAX                            = 2,
};

// Enum TLClient.ETLTradeSaleStatus
// NumValues: 0x0005
enum class ETLTradeSaleStatus : uint8
{
	Waiting                                  = 0,
	Registered                               = 1,
	Expired                                  = 2,
	Sold                                     = 3,
	ETLTradeSaleStatus_MAX                   = 4,
};

// Enum TLClient.ETradeMainTabType
// NumValues: 0x0009
enum class ETradeMainTabType : uint8
{
	Weapon                                   = 0,
	Armor                                    = 1,
	Accessory                                = 2,
	Skillbook                                = 3,
	Usable                                   = 4,
	Misc                                     = 5,
	All                                      = 6,
	Favorite                                 = 7,
	Max                                      = 8,
};

// Enum TLClient.ETLTradeUIPanelType
// NumValues: 0x0004
enum class ETLTradeUIPanelType : uint8
{
	Purchase                                 = 0,
	SaleAndEarnings                          = 1,
	EarningsRecord                           = 2,
	ETLTradeUIPanelType_MAX                  = 3,
};

// Enum TLClient.ETLTradeSearchType
// NumValues: 0x0004
enum class ETLTradeSearchType : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Third                                    = 2,
	ETLTradeSearchType_MAX                   = 3,
};

// Enum TLClient.ETLTutorialSeasonReward
// NumValues: 0x0003
enum class ETLTutorialSeasonReward : uint8
{
	SHOW_MAIN_WIDGET                         = 0,
	SHOW_LAST_WEEK_REWARD                    = 1,
	SHOW_MAX                                 = 2,
};

// Enum TLClient.ETLTutorialTriggerType
// NumValues: 0x004E
enum class ETLTutorialTriggerType : uint8
{
	ALIVE_CHANGED                            = 0,
	AUTO_USE_SLOT_CHANGED                    = 1,
	ACCEPT_CONTRACT                          = 2,
	ACQUIRE_NEW_ITEM                         = 3,
	ACQUIRE_PC_SUBTITLE                      = 4,
	ADVANCE_OBJECT_WORLD                     = 5,
	ABYSS_POINT_CHANGED                      = 6,
	CHANGE_KEEP_MOVE_FORWARD                 = 7,
	CHANGE_PRESET_CAMERA                     = 8,
	CHANGE_SKILL_SET                         = 9,
	CHANGE_MAP_REGION_TYPE                   = 10,
	COMPLETE_TUTORIAL                        = 11,
	CODE_ATTAINED                            = 12,
	CREATE_OBJECT_WORLD                      = 13,
	CODEX_REWARDABLE_ADD                     = 14,
	CODEX_REWARDED                           = 15,
	DELETE_BONUS_NPC_CONTRACT                = 16,
	DYNAMIC_EVENT_REWARD                     = 17,
	DELETE_OBJECT_WORLD                      = 18,
	DYNAMIC_EVENT_LEAVE_WARNING              = 19,
	ENTER_ZONE                               = 20,
	ENTER_REGION                             = 21,
	ENTER_CONTENTS_VOLUME                    = 22,
	ENTER_DYNAMIC_EVENT                      = 23,
	END_CUTSCENE                             = 24,
	EQUIP_AMMO_UPDATE                        = 25,
	FIX_TARGET_UPDATE                        = 26,
	GUILD_CONTRACT                           = 27,
	HP_CHANGED                               = 28,
	INVENTORY_ITEM_UPDATE                    = 29,
	INTERACTABLE_TARGET_UPDATE               = 30,
	JUMPED                                   = 31,
	LEAVE_ZONE                               = 32,
	LEAVE_REGION                             = 33,
	LEAVE_DYNAMIC_EVENT                      = 34,
	MOVED                                    = 35,
	MY_PC_STAT_UPDATE                        = 36,
	MY_PC_CHANGE_PVP_MODE                    = 37,
	MY_PC_KILL_FO                            = 38,
	MY_PC_KILL_NPC                           = 39,
	MY_PC_TELEPORT_COMPLETE                  = 40,
	MY_PC_GUILD_INFO_UDPATE                  = 41,
	MAGICDOLL_NOTIFICATION_UPDATE            = 42,
	OBJECT_INTERACTION                       = 43,
	OBJECT_INTERACTION_ACTION                = 44,
	OBJECTIVE_GOAL_COUNT_UPDATED             = 45,
	OBJECTIVE_ATTAINED                       = 46,
	OPEN_POPUP                               = 47,
	POLYMORPH                                = 48,
	POLYMORPH_NOTIFICATION_UPDATE            = 49,
	POLYMORPH_STATE_CHANGE                   = 50,
	PARTY_UPDATE_ACTIVATE_PARTY              = 51,
	ROTATE_CAMERA                            = 52,
	REFRESH_CONTRACT_LIST                    = 53,
	RESTORABLE_INFO_UPDATE                   = 54,
	SKILL_SET_CONTEXT_UNBLOCK                = 55,
	SWIMMING_STATUS                          = 56,
	STORAGE_UPDATE_COUNT                     = 57,
	SKILL_LEVEL_UP_WIDGET_OPEN               = 58,
	SHOW_NPC_CONTRACT                        = 59,
	TOGGLE_DASH_SWIM_BOOST                   = 60,
	TERRITORY_FOG_OPEN                       = 61,
	TREASURE_BOX_AREA_APPROACHING            = 62,
	UPDATE_STATS                             = 63,
	UPDATE_LEVEL                             = 64,
	USE_SKILL                                = 65,
	USE_ITEM                                 = 66,
	UPDATE_EFFECT_COUNT                      = 67,
	UPDATE_WEAPON_MASTERY_LEVEL              = 68,
	UPDATE_EQUIP_SLOT                        = 69,
	UPDATE_CONTRACT_PROGRESS                 = 70,
	UPDATE_NEXT_SIEGE_TIME                   = 71,
	UPDATE_CONTENTS_OPEN                     = 72,
	WAYPOINT_FOUND_AROUND                    = 73,
	WEAPON_MASTERY_CHECK_OPEN_NODE           = 74,
	WEAPON_PRESET_INFO_CHANGE                = 75,
	ZOOM_CAMERA                              = 76,
	ETLTutorialTriggerType_MAX               = 77,
};

// Enum TLClient.ETLTutorialChallengePartyDungeon
// NumValues: 0x0003
enum class ETLTutorialChallengePartyDungeon : uint8
{
	SHOW_MAIN_WIDGET                         = 0,
	SHOW_RANKING_POPUP                       = 1,
	SHOW_MAX                                 = 2,
};

// Enum TLClient.ETabMenu
// NumValues: 0x0005
enum class ETabMenu : uint8
{
	MyAttackerList                           = 0,
	MyTarget                                 = 1,
	PartyCommanderTarget                     = 2,
	EndOfEnum                                = 3,
	ETabMenu_MAX                             = 4,
};

// Enum TLClient.ETLUIManagerResult
// NumValues: 0x000F
enum class ETLUIManagerResult : uint8
{
	NONE                                     = 0,
	SUCCESS                                  = 1,
	FAIL_UNKNOWN                             = 11,
	FAIL_WIDGET_SHOWING_ALREADY              = 12,
	FAIL_WIDGET_SHOWING_HIDDENSTATE          = 13,
	FAIL_ASYNC_LOADING_TABLE_KEY_EMPTY       = 101,
	FAIL_ASYNC_LOADING_ALREADY_IN_PROGRESS   = 102,
	FAIL_ASYNC_LOADING_HANDLE_INVALID        = 103,
	FAIL_FIND_TABLE_ROW                      = 201,
	FAIL_NOT_READY_FOR_SHOW_UI               = 202,
	FAIL_BY_CHECK_VALID_SHOW                 = 203,
	FAIL_BY_CONTENTS_OPEN                    = 204,
	FAIL_OTHER_FULL_SCREEN_WIDGET_LOADING    = 205,
	FAIL_DURING_CUTSCENE_PLAY                = 206,
	ETLUIManagerResult_MAX                   = 207,
};

// Enum TLClient.ETLReadyForShowUIReason
// NumValues: 0x0003
enum class ETLReadyForShowUIReason : uint8
{
	INGAME_INITIALIZATION_COMPLETED          = 0,
	RELOAD_UI_SET_COMPLETED                  = 1,
	ETLReadyForShowUIReason_MAX              = 2,
};

// Enum TLClient.ETLUIWidgetReloadReason
// NumValues: 0x0003
enum class ETLUIWidgetReloadReason : uint8
{
	NONE                                     = 0,
	INPUT_DEVICE_CHANGE                      = 1,
	ETLUIWidgetReloadReason_MAX              = 2,
};

// Enum TLClient.ETLUIWidgetAttachTarget
// NumValues: 0x0005
enum class ETLUIWidgetAttachTarget : uint8
{
	DEFALUT_ROOT_WIDGET                      = 0,
	LOBBY_ROOT_WIDGET                        = 1,
	ROOT_LAYER                               = 254,
	NONE                                     = 255,
	ETLUIWidgetAttachTarget_MAX              = 256,
};

// Enum TLClient.ETLUIWidgetCloseReason
// NumValues: 0x0003
enum class ETLUIWidgetCloseReason : uint8
{
	NONE                                     = 0,
	SERVICE_MODE                             = 1,
	ETLUIWidgetCloseReason_MAX               = 2,
};

// Enum TLClient.EUnionRelationTabType
// NumValues: 0x0006
enum class EUnionRelationTabType : uint8
{
	TAB_RELATION_ALLY                        = 0,
	TAB_RELATION_ENEMY                       = 1,
	TAB_RELATION_OBSERVE                     = 2,
	TAB_RELATION_ALLY_REQ                    = 3,
	TAB_UNION_MAX                            = 4,
	TAB_MAX                                  = 5,
};

// Enum TLClient.EUnionMainTabType
// NumValues: 0x0007
enum class EUnionMainTabType : uint8
{
	TAB_UNION_INFO                           = 0,
	TAB_UNION_MEMBER                         = 1,
	TAB_UNION_LIST                           = 2,
	TAB_UNION_CREATE                         = 3,
	TAB_UNION_RELATION                       = 4,
	TAB_UNION_MANAGEMENT                     = 5,
	TAB_UNION_MAX                            = 6,
};

// Enum TLClient.ETLUnionChatAuthorityLevel
// NumValues: 0x0004
enum class ETLUnionChatAuthorityLevel : uint8
{
	ALL                                      = 0,
	GUARDIAN                                 = 1,
	LEADERGROUP                              = 2,
	ETLUnionChatAuthorityLevel_MAX           = 3,
};

// Enum TLClient.ESkillUseItemCountConditionLevel
// NumValues: 0x0004
enum class ESkillUseItemCountConditionLevel : uint8
{
	Normal                                   = 0,
	Warning                                  = 1,
	Critical                                 = 2,
	ESkillUseItemCountConditionLevel_MAX     = 3,
};

// Enum TLClient.ETLArenaMatchingConfirmStatusListItemColorType
// NumValues: 0x0003
enum class ETLArenaMatchingConfirmStatusListItemColorType : uint8
{
	MyTeam                                   = 0,
	EnemyTeam                                = 1,
	ETLArenaMatchingConfirmStatusListItemColorType_MAX = 2,
};

// Enum TLClient.ECostumeCustomizeCategory
// NumValues: 0x0004
enum class ECostumeCustomizeCategory : uint8
{
	Style                                    = 0,
	ColorGroup                               = 1,
	Pattern                                  = 2,
	ECostumeCustomizeCategory_MAX            = 3,
};

// Enum TLClient.ECostumeCustomizePartType
// NumValues: 0x0003
enum class ECostumeCustomizePartType : uint8
{
	Body                                     = 0,
	Helmet                                   = 1,
	ECostumeCustomizePartType_MAX            = 2,
};

// Enum TLClient.ECostumeListFilter
// NumValues: 0x0007
enum class ECostumeListFilter : uint8
{
	All                                      = 0,
	FullBody                                 = 1,
	Helmet                                   = 2,
	Body                                     = 3,
	Favorite                                 = 4,
	None                                     = 5,
	ECostumeListFilter_MAX                   = 6,
};

// Enum TLClient.ETestEnum
// NumValues: 0x0004
enum class ETestEnum : uint8
{
	TestA                                    = 0,
	TestB                                    = 1,
	TestC                                    = 2,
	ETestEnum_MAX                            = 3,
};

// Enum TLClient.ETLCheckButtonTextStylePreview
// NumValues: 0x0004
enum class ETLCheckButtonTextStylePreview : uint8
{
	Normal                                   = 0,
	Check                                    = 1,
	Indeterminate                            = 2,
	ETLCheckButtonTextStylePreview_MAX       = 3,
};

// Enum TLClient.ETLButtonTextStylePreview
// NumValues: 0x0004
enum class ETLButtonTextStylePreview : uint8
{
	Normal                                   = 0,
	Hover                                    = 1,
	Press                                    = 2,
	ETLButtonTextStylePreview_MAX            = 3,
};

// Enum TLClient.ECalibratedEdgeType
// NumValues: 0x0006
enum class ECalibratedEdgeType : uint8
{
	None                                     = 0,
	Left                                     = 1,
	Right                                    = 2,
	Top                                      = 3,
	Bottom                                   = 4,
	ECalibratedEdgeType_MAX                  = 5,
};

// Enum TLClient.ETLChatTextFontSizeType
// NumValues: 0x0006
enum class ETLChatTextFontSizeType : uint8
{
	Small                                    = 0,
	Medium                                   = 1,
	Large                                    = 2,
	XLarge                                   = 3,
	XXLarge                                  = 4,
	ETLChatTextFontSizeType_MAX              = 5,
};

// Enum TLClient.ETLGroupChatRole
// NumValues: 0x0005
enum class ETLGroupChatRole : uint8
{
	Joiner                                   = 0,
	Master                                   = 1,
	SubMaster                                = 2,
	EndOfEnum                                = 3,
	ETLGroupChatRole_MAX                     = 4,
};

// Enum TLClient.ETLVivoxVoiceChatChannelType
// NumValues: 0x0006
enum class ETLVivoxVoiceChatChannelType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Party                                    = 2,
	Guild                                    = 3,
	PvpTeam                                  = 4,
	ETLVivoxVoiceChatChannelType_MAX         = 5,
};

// Enum TLClient.ETLVivoxVoiceChatState
// NumValues: 0x0006
enum class ETLVivoxVoiceChatState : uint8
{
	CanNotUse                                = 0,
	Activate                                 = 1,
	Deactivate                               = 2,
	ActivateNoMic                            = 3,
	NotVivox                                 = 4,
	ETLVivoxVoiceChatState_MAX               = 5,
};

// Enum TLClient.ETLChatWindowMode
// NumValues: 0x0004
enum class ETLChatWindowMode : uint8
{
	ChatList                                 = 0,
	FriendList                               = 1,
	GroupChatManager                         = 2,
	ETLChatWindowMode_MAX                    = 3,
};

// Enum TLClient.ECodexDrawLineType
// NumValues: 0x0003
enum class ECodexDrawLineType : uint8
{
	StraightLine                             = 0,
	BezierLine                               = 1,
	ECodexDrawLineType_MAX                   = 2,
};

// Enum TLClient.ETLRecommendContentType
// NumValues: 0x0006
enum class ETLRecommendContentType : uint8
{
	None                                     = 0,
	Explore                                  = 1,
	Contract                                 = 2,
	PartyDungeon                             = 3,
	FieldDungeon                             = 4,
	MAX                                      = 5,
};

// Enum TLClient.ETLCodexVoiceReadState
// NumValues: 0x0004
enum class ETLCodexVoiceReadState : uint8
{
	None                                     = 0,
	NudgePlay                                = 1,
	VoicePlay                                = 2,
	ETLCodexVoiceReadState_MAX               = 3,
};

// Enum TLClient.EColorPickerFocusArea
// NumValues: 0x0005
enum class EColorPickerFocusArea : uint8
{
	None                                     = 0,
	Hue                                      = 1,
	SV                                       = 2,
	InputCode                                = 3,
	EColorPickerFocusArea_MAX                = 4,
};

// Enum TLClient.ETLComboTextStylePreview
// NumValues: 0x0005
enum class ETLComboTextStylePreview : uint8
{
	Normal                                   = 0,
	Hovered                                  = 1,
	Selected                                 = 2,
	SelectedHovered                          = 3,
	ETLComboTextStylePreview_MAX             = 4,
};

// Enum TLClient.ETLConsoleGroupActivateMode
// NumValues: 0x0004
enum class ETLConsoleGroupActivateMode : uint8
{
	KSmall                                   = 0,
	KMedium                                  = 1,
	KLarge                                   = 2,
	ETLConsoleGroupActivateMode_MAX          = 3,
};

// Enum TLClient.ETLConsoleActionFaceButton
// NumValues: 0x0006
enum class ETLConsoleActionFaceButton : uint8
{
	Left                                     = 0,
	Top                                      = 1,
	Right                                    = 2,
	Bottom                                   = 3,
	EndOfEnum                                = 4,
	ETLConsoleActionFaceButton_MAX           = 5,
};

// Enum TLClient.ETLConsoleSkillTarget
// NumValues: 0x0004
enum class ETLConsoleSkillTarget : uint32
{
	KCurrentTarget                           = 0,
	KInterimTarget                           = 1,
	KPartyMember                             = 2,
	ETLConsoleSkillTarget_MAX                = 3,
};

// Enum TLClient.ECraftingResultType
// NumValues: 0x0004
enum class ECraftingResultType : uint8
{
	GreatSuccess                             = 0,
	Success                                  = 1,
	Failure                                  = 2,
	ECraftingResultType_MAX                  = 3,
};

// Enum TLClient.ECraftProbabilityType
// NumValues: 0x0005
enum class ECraftProbabilityType : uint8
{
	CriticalSuccess                          = 0,
	Success                                  = 1,
	Failure                                  = 2,
	KEndOfEnum                               = 3,
	ECraftProbabilityType_MAX                = 4,
};

// Enum TLClient.ETLCreatureSubRankItemType
// NumValues: 0x0004
enum class ETLCreatureSubRankItemType : uint8
{
	SmallStar                                = 0,
	BigStar                                  = 1,
	EndOfEnum                                = 2,
	ETLCreatureSubRankItemType_MAX           = 3,
};

// Enum TLClient.ETLCustomizePhase
// NumValues: 0x0003
enum class ETLCustomizePhase : uint8
{
	Customize                                = 0,
	InputName                                = 1,
	ETLCustomizePhase_MAX                    = 2,
};

// Enum TLClient.ETLUserWidgetAutonIssueId
// NumValues: 0x0003
enum class ETLUserWidgetAutonIssueId : uint8
{
	None                                     = 0,
	ContentsAlarmManagerFocusedTargetUpdated = 1,
	ETLUserWidgetAutonIssueId_MAX            = 2,
};

// Enum TLClient.ETLEmblemSize
// NumValues: 0x0003
enum class ETLEmblemSize : uint8
{
	Small                                    = 0,
	Big                                      = 1,
	ETLEmblemSize_MAX                        = 2,
};

// Enum TLClient.EEnchantResourceState
// NumValues: 0x0004
enum class EEnchantResourceState : uint8
{
	Empty                                    = 0,
	Insufficient                             = 1,
	Sufficient                               = 2,
	EEnchantResourceState_MAX                = 3,
};

// Enum TLClient.EGuildShowMainMenuType
// NumValues: 0x0004
enum class EGuildShowMainMenuType : uint8
{
	SHOW_MAINMENU                            = 0,
	HIDE_ONBOADING                           = 1,
	HIDE_MAINMENU                            = 2,
	EGuildShowMainMenuType_MAX               = 3,
};

// Enum TLClient.EGuildDistributionStateType
// NumValues: 0x0005
enum class EGuildDistributionStateType : uint8
{
	Default                                  = 0,
	ZeroRevenue                              = 1,
	ExpiredDate                              = 2,
	PrivateOwn                               = 3,
	EGuildDistributionStateType_MAX          = 4,
};

// Enum TLClient.EGuildPVPTabType
// NumValues: 0x0003
enum class EGuildPVPTabType : uint8
{
	TAB_PVP_HISTORY                          = 0,
	TAB_PVP_REVENGE                          = 1,
	TAB_PVP_MAX                              = 2,
};

// Enum TLClient.EGuildRewardSubTab
// NumValues: 0x0003
enum class EGuildRewardSubTab : uint8
{
	GuildContentsReward                      = 0,
	GuildBMPurchase                          = 1,
	EGuildRewardSubTab_MAX                   = 2,
};

// Enum TLClient.EGuildViewGuildRelationType
// NumValues: 0x0008
enum class EGuildViewGuildRelationType : uint8
{
	None                                     = 0,
	MyGuild                                  = 1,
	UnionRelation                            = 2,
	Alliance                                 = 3,
	Enemy                                    = 4,
	SendAllyRequest                          = 6,
	RecvAllyRequest                          = 7,
	EGuildViewGuildRelationType_MAX          = 8,
};

// Enum TLClient.ETLUserWidgetHyperLinkTextFocusEffect
// NumValues: 0x0004
enum class ETLUserWidgetHyperLinkTextFocusEffect : uint8
{
	None                                     = 0,
	FocusWithDimmed                          = 1,
	FocusWithImageBox                        = 2,
	ETLUserWidgetHyperLinkTextFocusEffect_MAX = 3,
};

// Enum TLClient.ETLHudWeightType
// NumValues: 0x0005
enum class ETLHudWeightType : uint8
{
	KNormal                                  = 0,
	KWarning                                 = 1,
	KBounds                                  = 2,
	KEndOfEnum                               = 3,
	ETLHudWeightType_MAX                     = 4,
};

// Enum TLClient.ETLItemCollectionStateFilterType
// NumValues: 0x0004
enum class ETLItemCollectionStateFilterType : uint8
{
	KNone                                    = 0,
	KNotStartedAndProgressing                = 1,
	KCompleted                               = 2,
	ETLItemCollectionStateFilterType_MAX     = 3,
};

// Enum TLClient.ETLItemCollectionTabFilterType
// NumValues: 0x0008
enum class ETLItemCollectionTabFilterType : uint8
{
	KNone                                    = 0,
	KGradeC                                  = 1,
	KGradeB                                  = 2,
	KGradeA                                  = 3,
	KGradeAA                                 = 4,
	KGradeAAA                                = 5,
	KEvent                                   = 6,
	ETLItemCollectionTabFilterType_MAX       = 7,
};

// Enum TLClient.ETLItemCollectionGroupInfoTabType
// NumValues: 0x0003
enum class ETLItemCollectionGroupInfoTabType : uint8
{
	Craft                                    = 0,
	Trade                                    = 1,
	ETLItemCollectionGroupInfoTabType_MAX    = 2,
};

// Enum TLClient.ETLItemCollectionItemInfoTabType
// NumValues: 0x0004
enum class ETLItemCollectionItemInfoTabType : uint8
{
	Monster                                  = 0,
	Craft                                    = 1,
	Trade                                    = 2,
	ETLItemCollectionItemInfoTabType_MAX     = 3,
};

// Enum TLClient.ETLOpenResultSlotState
// NumValues: 0x0005
enum class ETLOpenResultSlotState : uint8
{
	Empty                                    = 0,
	Closed                                   = 1,
	Opening                                  = 2,
	Opened                                   = 3,
	ETLOpenResultSlotState_MAX               = 4,
};

// Enum TLClient.ETLItemCompositionResultMode
// NumValues: 0x0004
enum class ETLItemCompositionResultMode : uint8
{
	None                                     = 0,
	Open                                     = 1,
	Review                                   = 2,
	ETLItemCompositionResultMode_MAX         = 3,
};

// Enum TLClient.ETLLifeContentsType
// NumValues: 0x0005
enum class ETLLifeContentsType : uint8
{
	KNone                                    = 0,
	KCooking                                 = 1,
	KFishing                                 = 2,
	KMagicDollExpedition                     = 3,
	ETLLifeContentsType_MAX                  = 4,
};

// Enum TLClient.ETLMagicDollUIContentType
// NumValues: 0x0003
enum class ETLMagicDollUIContentType : uint8
{
	DEFAULT_LIST                             = 0,
	COLLECTION                               = 1,
	ETLMagicDollUIContentType_MAX            = 2,
};

// Enum TLClient.ETLExpeditionDollIconState
// NumValues: 0x0004
enum class ETLExpeditionDollIconState : uint8
{
	MagicDoll                                = 0,
	Ready                                    = 1,
	Empty                                    = 2,
	ETLExpeditionDollIconState_MAX           = 3,
};

// Enum TLClient.EMainMenuTooltipAnchor
// NumValues: 0x0004
enum class EMainMenuTooltipAnchor : uint8
{
	Left                                     = 0,
	Center                                   = 1,
	Right                                    = 2,
	EMainMenuTooltipAnchor_MAX               = 3,
};

// Enum TLClient.EStrongholdFilterType
// NumValues: 0x0005
enum class EStrongholdFilterType : uint8
{
	Default                                  = 0,
	NeedRepair                               = 1,
	NeedBuild                                = 2,
	EndOfEnum                                = 3,
	EStrongholdFilterType_MAX                = 4,
};

// Enum TLClient.EBattleInfoShowState
// NumValues: 0x0004
enum class EBattleInfoShowState : uint8
{
	KHide                                    = 0,
	KOnlyIcon                                = 1,
	KAll                                     = 2,
	EBattleInfoShowState_MAX                 = 3,
};

// Enum TLClient.EOtherPlayerRankingType
// NumValues: 0x0005
enum class EOtherPlayerRankingType : uint8
{
	KNone                                    = 0,
	KRanker_No1                              = 1,
	KRanker_No2                              = 2,
	KRanker_No3                              = 3,
	EOtherPlayerRankingType_MAX              = 4,
};

// Enum TLClient.EMapIconThroneToolTipDescStateType
// NumValues: 0x0004
enum class EMapIconThroneToolTipDescStateType : uint8
{
	MYCASTLE_PROGRESS_SIEGE                  = 0,
	MYCASTLE_NONE_SIEGE                      = 1,
	NOT_OWNER_CASTLE                         = 2,
	EMapIconThroneToolTipDescStateType_MAX   = 3,
};

// Enum TLClient.ETLWeaponMasteryUpType
// NumValues: 0x0004
enum class ETLWeaponMasteryUpType : uint8
{
	None                                     = 0,
	Distribution                             = 1,
	Upgrade                                  = 2,
	ETLWeaponMasteryUpType_MAX               = 3,
};

// Enum TLClient.ETLWeaponMasteryType
// NumValues: 0x0004
enum class ETLWeaponMasteryType : uint8
{
	None                                     = 0,
	Stat                                     = 1,
	Skill                                    = 2,
	ETLWeaponMasteryType_MAX                 = 3,
};

// Enum TLClient.ETLNameplateSimpleLayout
// NumValues: 0x0008
enum class ETLNameplateSimpleLayout : uint8
{
	None                                     = 0,
	ShowName                                 = 2,
	ShowHPBar                                = 4,
	HideNameHideHPBar                        = 0,
	ShowNameHideHPBar                        = 2,
	HideNameShowHPBar                        = 4,
	ShowNameShowHPBar                        = 6,
	ETLNameplateSimpleLayout_MAX             = 7,
};

// Enum TLClient.ETLNameplateMassCombatModeState
// NumValues: 0x0004
enum class ETLNameplateMassCombatModeState : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Friendly                                 = 2,
	ETLNameplateMassCombatModeState_MAX      = 3,
};

// Enum TLClient.ETLNameplateLayout
// NumValues: 0x0009
enum class ETLNameplateLayout : uint8
{
	ShowGuildShowHpbarShowSubtitle           = 0,
	ShowGuildShowHpbarHideSubtitle           = 1,
	ShowGuildHideHpbarShowSubtitle           = 2,
	ShowGuildHideHpbarHideSubtitle           = 3,
	HideGuildShowHpbarShowSubtitle           = 4,
	HideGuildShowHpbarHideSubtitle           = 5,
	HideGuildHideHpbarShowSubtitle           = 6,
	HideGuildHideHpbarHideSubtitle           = 7,
	ETLNameplateLayout_MAX                   = 8,
};

// Enum TLClient.ETLNameplateTaregetState
// NumValues: 0x0006
enum class ETLNameplateTaregetState : uint8
{
	KNone                                    = 0,
	KFixTarget                               = 1,
	KFriendlyTarget                          = 2,
	KIntermTarget                            = 3,
	KInteractionTarget                       = 4,
	ETLNameplateTaregetState_MAX             = 5,
};

// Enum TLClient.ETLOptionMacroType
// NumValues: 0x0003
enum class ETLOptionMacroType : uint8
{
	ClientMacro                              = 0,
	ServerMacro                              = 1,
	ETLOptionMacroType_MAX                   = 2,
};

// Enum TLClient.EPartyMemberSimpleProfileFlags
// NumValues: 0x0007
enum class EPartyMemberSimpleProfileFlags : uint8
{
	None                                     = 0,
	VisibleLevel                             = 1,
	UseButtonDrawParty                       = 2,
	UseButtonChangeMaster                    = 4,
	UseButtonKickMember                      = 8,
	Default                                  = 14,
	EPartyMemberSimpleProfileFlags_MAX       = 15,
};

// Enum TLClient.ETLPolymorphIconType
// NumValues: 0x000C
enum class ETLPolymorphIconType : uint8
{
	KCombat                                  = 0,
	KDash                                    = 1,
	KGlide                                   = 2,
	KSwim                                    = 3,
	KCamouflage                              = 4,
	KAmusement                               = 5,
	KSiege                                   = 6,
	KSiegeTax                                = 7,
	KUsurping                                = 8,
	KDE                                      = 9,
	KContents                                = 10,
	ETLPolymorphIconType_MAX                 = 11,
};

// Enum TLClient.EPhotoModeInputMode
// NumValues: 0x0005
enum class EPhotoModeInputMode : uint8
{
	DefaultPC                                = 0,
	DefaultConsole                           = 1,
	Common                                   = 2,
	Advanced                                 = 3,
	EPhotoModeInputMode_MAX                  = 4,
};

// Enum TLClient.ETLPolymorphCategoryFilter
// NumValues: 0x0008
enum class ETLPolymorphCategoryFilter : uint8
{
	Combat                                   = 0,
	Dash                                     = 1,
	Glide                                    = 2,
	Swim                                     = 3,
	Social                                   = 4,
	None                                     = 5,
	EndOfEnum                                = 6,
	ETLPolymorphCategoryFilter_MAX           = 7,
};

// Enum TLClient.EPortraitLineListItemStatus
// NumValues: 0x0005
enum class EPortraitLineListItemStatus : uint8
{
	None                                     = 0,
	NotAcquired                              = 1,
	Acquired                                 = 2,
	Equiped                                  = 3,
	Max                                      = 4,
};

// Enum TLClient.ETLRadialMenuAngleType
// NumValues: 0x0003
enum class ETLRadialMenuAngleType : uint32
{
	CommonOffset                             = 0,
	IndividualAngle                          = 1,
	ETLRadialMenuAngleType_MAX               = 2,
};

// Enum TLClient.ERangeSelectorButtonState
// NumValues: 0x0004
enum class ERangeSelectorButtonState : uint8
{
	OutOfRange                               = 0,
	InRange                                  = 1,
	EdgeOfRange                              = 2,
	ERangeSelectorButtonState_MAX            = 3,
};

// Enum TLClient.ETLRankingSubTabType
// NumValues: 0x0003
enum class ETLRankingSubTabType : uint8
{
	DefaultRankingTab                        = 0,
	RealTimeRankingTab                       = 1,
	ETLRankingSubTabType_MAX                 = 2,
};

// Enum TLClient.ETLRankingMainTabType
// NumValues: 0x0006
enum class ETLRankingMainTabType : uint8
{
	MainTab                                  = 0,
	ActivatePointTab                         = 1,
	PVPTab                                   = 2,
	GuildTab                                 = 3,
	LevelTab                                 = 4,
	ETLRankingMainTabType_MAX                = 5,
};

// Enum TLClient.ERefreshButtonType
// NumValues: 0x0004
enum class ERefreshButtonType : uint8
{
	None                                     = 0,
	Manual                                   = 1,
	ClickAndRefreshStart                     = 2,
	Max                                      = 3,
};

// Enum TLClient.ETLRequestSlotType
// NumValues: 0x0006
enum class ETLRequestSlotType : uint8
{
	None                                     = 0,
	ArenaInvite                              = 1,
	PartyInvite                              = 2,
	CallClan                                 = 3,
	SharedContract                           = 4,
	ETLRequestSlotType_MAX                   = 5,
};

// Enum TLClient.ESeasonPassWeeklyType
// NumValues: 0x0007
enum class ESeasonPassWeeklyType : uint8
{
	WEEK_1                                   = 0,
	WEEK_2                                   = 1,
	WEEK_3                                   = 2,
	WEEK_4                                   = 3,
	WEEK_5                                   = 4,
	WEEK_6                                   = 5,
	WEEK_MAX                                 = 6,
};

// Enum TLClient.ETLSkillBookSelectedSkillSlotType
// NumValues: 0x0005
enum class ETLSkillBookSelectedSkillSlotType : uint8
{
	None                                     = 0,
	ActiveSkill                              = 1,
	PassiveSkill                             = 2,
	DefenseActionSkill                       = 3,
	ETLSkillBookSelectedSkillSlotType_MAX    = 4,
};

// Enum TLClient.ETLSkillBookWeaponSetType
// NumValues: 0x0005
enum class ETLSkillBookWeaponSetType : uint8
{
	Default                                  = 0,
	NotWeapon                                = 1,
	SameEquipSetWeapon                       = 2,
	NotEquipSetWeapon                        = 3,
	ETLSkillBookWeaponSetType_MAX            = 4,
};

// Enum TLClient.EEquipWeaponSet
// NumValues: 0x0004
enum class EEquipWeaponSet : uint8
{
	None                                     = 0,
	FirstWeaponSet                           = 1,
	SecondWeaponSet                          = 2,
	EEquipWeaponSet_MAX                      = 3,
};

// Enum TLClient.ETLSpecialShopWidgetState
// NumValues: 0x0006
enum class ETLSpecialShopWidgetState : uint8
{
	None                                     = 0,
	DisplayPanel                             = 1,
	GoodsDetail                              = 2,
	Warehouse                                = 3,
	ServerTransfer                           = 4,
	ETLSpecialShopWidgetState_MAX            = 5,
};

// Enum TLClient.ETLSpinnerValueCompareResult
// NumValues: 0x0004
enum class ETLSpinnerValueCompareResult : uint8
{
	LessThanMin                              = 0,
	WithinMinMax                             = 1,
	GreaterThanMax                           = 2,
	ETLSpinnerValueCompareResult_MAX         = 3,
};

// Enum TLClient.ESpinnerDirection
// NumValues: 0x0003
enum class ESpinnerDirection : uint8
{
	Horizontal                               = 0,
	Vertical                                 = 1,
	ESpinnerDirection_MAX                    = 2,
};

// Enum TLClient.ETLStaminaGaugeType
// NumValues: 0x0003
enum class ETLStaminaGaugeType : uint8
{
	Stamina                                  = 0,
	Fishing                                  = 1,
	ETLStaminaGaugeType_MAX                  = 2,
};

// Enum TLClient.ETLStaminaGaugeState
// NumValues: 0x0004
enum class ETLStaminaGaugeState : uint8
{
	Normal                                   = 0,
	Fast                                     = 1,
	Slow                                     = 2,
	ETLStaminaGaugeState_MAX                 = 3,
};

// Enum TLClient.ESystemMenuType
// NumValues: 0x0008
enum class ESystemMenuType : uint8
{
	KSystemMenuTypeNone                      = 0,
	KSystemMenuTypeCancel                    = 1,
	KSystemMenuTypeScreenShot                = 2,
	KSystemMenuTypeOpenOption                = 3,
	KSystemMenuTypeMoveToLobby               = 4,
	KSystemMenuTypeHelp                      = 5,
	KSystemMenuTypeQuitGame                  = 6,
	ESystemMenuType_MAX                      = 7,
};

// Enum TLClient.EIndicatorType
// NumValues: 0x0004
enum class EIndicatorType : uint8
{
	MyPcObject                               = 0,
	FriendlyObject                           = 1,
	OppositeObject                           = 2,
	EIndicatorType_MAX                       = 3,
};

// Enum TLClient.ETLTaxDeliveryUIItemType
// NumValues: 0x0003
enum class ETLTaxDeliveryUIItemType : uint8
{
	KMonthDay                                = 0,
	KTime                                    = 1,
	ETLTaxDeliveryUIItemType_MAX             = 2,
};

// Enum TLClient.ETimeTableAlarmAniState
// NumValues: 0x0005
enum class ETimeTableAlarmAniState : uint8
{
	KReady                                   = 0,
	KPlay                                    = 1,
	KStop                                    = 2,
	KEndOfEnum                               = 3,
	ETimeTableAlarmAniState_MAX              = 4,
};

// Enum TLClient.ETLTradeSearchSummaryColumn
// NumValues: 0x0005
enum class ETLTradeSearchSummaryColumn : uint8
{
	ItemInfo                                 = 0,
	ItemTrait                                = 1,
	LowestSalePrice                          = 2,
	StockCount                               = 3,
	ETLTradeSearchSummaryColumn_MAX          = 4,
};

// Enum TLClient.ETLTradeSearchUnitColumn
// NumValues: 0x0005
enum class ETLTradeSearchUnitColumn : uint8
{
	ItemInfo                                 = 0,
	ItemTrait                                = 1,
	RemainingTime                            = 2,
	SalePrice                                = 3,
	ETLTradeSearchUnitColumn_MAX             = 4,
};

// Enum TLClient.ETLTreeViewSelectionMode
// NumValues: 0x0004
enum class ETLTreeViewSelectionMode : uint32
{
	None                                     = 0,
	RelationParent                           = 1,
	OnlyRelationParent                       = 2,
	ETLTreeViewSelectionMode_MAX             = 3,
};

// Enum TLClient.ETLOnboardTutorialType
// NumValues: 0x0004
enum class ETLOnboardTutorialType : uint8
{
	None                                     = 0,
	MainMenuHUD                              = 1,
	MainMenuButton                           = 2,
	ETLOnboardTutorialType_MAX               = 3,
};

// Enum TLClient.ETLOnboardParagraphType
// NumValues: 0x0004
enum class ETLOnboardParagraphType : uint8
{
	Static                                   = 0,
	Position                                 = 1,
	PositionAndSize                          = 2,
	ETLOnboardParagraphType_MAX              = 3,
};

// Enum TLClient.EUnionCreateFailType
// NumValues: 0x0007
enum class EUnionCreateFailType : uint8
{
	NONE                                     = 0,
	HAVE_NOT_GUILD                           = 1,
	NOT_GUILD_MASTER                         = 2,
	LOW_GUILD_LEVEL                          = 4,
	CREATE_WAIT_TIME                         = 8,
	COST_LACK                                = 16,
	EUnionCreateFailType_MAX                 = 17,
};

// Enum TLClient.ETLWindowType
// NumValues: 0x0007
enum class ETLWindowType : uint8
{
	KPopup                                   = 0,
	KOnlyPopup                               = 1,
	KFullscreen                              = 2,
	KFullscreenPopup                         = 3,
	KContextPopup                            = 4,
	KNone                                    = 5,
	ETLWindowType_MAX                        = 6,
};

// Enum TLClient.ETLWindowPosType
// NumValues: 0x0005
enum class ETLWindowPosType : uint8
{
	None                                     = 0,
	Left                                     = 1,
	Right                                    = 2,
	Center                                   = 3,
	ETLWindowPosType_MAX                     = 4,
};

// Enum TLClient.EWorldCommunityTabType
// NumValues: 0x0003
enum class EWorldCommunityTabType : uint8
{
	TAB_GUILD                                = 0,
	TAB_UNION                                = 1,
	TAB_MAX                                  = 2,
};

// Enum TLClient.EWorldEventStatus
// NumValues: 0x0004
enum class EWorldEventStatus : uint8
{
	Invalid                                  = 0,
	Upcoming                                 = 1,
	InProgress                               = 2,
	EWorldEventStatus_MAX                    = 3,
};

// Enum TLClient.ERankingRewardItemType
// NumValues: 0x0004
enum class ERankingRewardItemType : uint8
{
	Skill                                    = 0,
	Effect                                   = 1,
	RankerMark                               = 2,
	ERankingRewardItemType_MAX               = 3,
};

// Enum TLClient.ETLWeaponMasteryNodeState
// NumValues: 0x0005
enum class ETLWeaponMasteryNodeState : uint8
{
	NotOpened                                = 0,
	Connected                                = 1,
	NotConnected                             = 2,
	MaxAchivement                            = 3,
	ETLWeaponMasteryNodeState_MAX            = 4,
};

// Enum TLClient.EEnvironmentalType
// NumValues: 0x0005
enum class EEnvironmentalType : uint8
{
	MagicRain                                = 0,
	MagicWind                                = 1,
	MagicEclipse                             = 2,
	EndOfEnum                                = 3,
	EEnvironmentalType_MAX                   = 4,
};

// Enum TLClient.ETLWidgetBankType
// NumValues: 0x0003
enum class ETLWidgetBankType : uint8
{
	FIND_OR_CREATE                           = 0,
	WIDGET_SHARE                             = 1,
	ETLWidgetBankType_MAX                    = 2,
};

// Enum TLClient.ETLSelectableMode
// NumValues: 0x0006
enum class ETLSelectableMode : uint8
{
	KDisableByClick                          = 0,
	KSingle                                  = 1,
	KRadio                                   = 2,
	KRadioToggle                             = 3,
	KMulti                                   = 4,
	ETLSelectableMode_MAX                    = 5,
};

// Enum TLClient.ETLWorldBossEventState
// NumValues: 0x0005
enum class ETLWorldBossEventState : uint8
{
	PREPARE                                  = 0,
	PROGRESS                                 = 1,
	COMPLETE                                 = 2,
	NONE                                     = 3,
	ETLWorldBossEventState_MAX               = 4,
};

// Enum TLClient.ETLWorldPinAddReason
// NumValues: 0x0003
enum class ETLWorldPinAddReason : uint8
{
	INITIALIZE                               = 0,
	REAL_TIME                                = 1,
	ETLWorldPinAddReason_MAX                 = 2,
};

// Enum TLClient.ETLWorldPinOperationType
// NumValues: 0x0003
enum class ETLWorldPinOperationType : uint8
{
	CREATE                                   = 0,
	RENAME                                   = 1,
	ETLWorldPinOperationType_MAX             = 2,
};

// Enum TLClient.ETLWorldPinSpaceType
// NumValues: 0x0004
enum class ETLWorldPinSpaceType : uint8
{
	WORLD_MAP                                = 0,
	MINI_MAP                                 = 1,
	IN_GAME                                  = 2,
	ETLWorldPinSpaceType_MAX                 = 3,
};

// Enum TLClient.ETLUnionPinAuthorityLevel
// NumValues: 0x0004
enum class ETLUnionPinAuthorityLevel : uint8
{
	GUARDIAN                                 = 0,
	LEADERGROUP                              = 1,
	LEADERONLY                               = 2,
	ETLUnionPinAuthorityLevel_MAX            = 3,
};

// Enum TLClient.ETLGuildPinAuthorityLevel
// NumValues: 0x0005
enum class ETLGuildPinAuthorityLevel : uint8
{
	MASTER                                   = 0,
	MASTERGROUP                              = 1,
	GUARDIAN                                 = 2,
	MEMBER                                   = 3,
	ETLGuildPinAuthorityLevel_MAX            = 4,
};

// Enum TLClient.ETLWorldPinSetType
// NumValues: 0x0003
enum class ETLWorldPinSetType : uint8
{
	STANDALONE                               = 0,
	IN_ORDER                                 = 1,
	ETLWorldPinSetType_MAX                   = 2,
};

// Enum TLClient.ETLWorldPinType
// NumValues: 0x0006
enum class ETLWorldPinType : uint8
{
	USER                                     = 0,
	PARTY                                    = 1,
	GUILD                                    = 2,
	UNION                                    = 3,
	TEMPORARY                                = 4,
	ETLWorldPinType_MAX                      = 5,
};

// Enum TLClient.EYetiGameCharacterInfoItemStatus
// NumValues: 0x0003
enum class EYetiGameCharacterInfoItemStatus : uint8
{
	Unequip                                  = 0,
	Equip                                    = 1,
	EYetiGameCharacterInfoItemStatus_MAX     = 2,
};

// Enum TLClient.EYetiGameCharacterInfoCategoryType
// NumValues: 0x000C
enum class EYetiGameCharacterInfoCategoryType : uint8
{
	INFO_LEVEL                               = 1,
	INFO_LOCATION                            = 2,
	INFO_GOLD                                = 3,
	INFO_RETURN_BTN                          = 20,
	INFO_AUTO_COMBAT_ON                      = 30,
	INFO_AUTO_COMBAT_TIME                    = 31,
	INFO_AUTO_COMBAT_GOLD                    = 32,
	INFO_AUTO_COMBAT_EXP                     = 33,
	INFO_LEAF                                = 101,
	INFO_AMMO                                = 103,
	INFO_INVEN_WEIGHT                        = 105,
	INFO_MAX                                 = 106,
};

// Enum TLClient.EYetiChatCategoryType
// NumValues: 0x0018
enum class EYetiChatCategoryType : uint16
{
	CMT_CHAT_GENERAL                         = 0,
	CMT_CHAT_ALL                             = 1,
	CMT_CHAT_WHISPER_RECV                    = 10,
	CMT_CHAT_WHISPER_SEND                    = 11,
	CMT_CHAT_GUILD                           = 100,
	CMT_CHAT_GUILD_SYSTEM                    = 101,
	CMT_CHAT_ALLIANCE                        = 110,
	CMT_CHAT_ALLIANCE_SYSTEM                 = 111,
	CMT_CHAT_PARTY                           = 120,
	CMT_CHAT_PARTY_SYSTEM                    = 121,
	CMT_CHAT_SYSTEM                          = 200,
	CMT_CHAT_CONTENTS                        = 220,
	CMT_CHAT_GROUP1                          = 300,
	CMT_CHAT_GROUP1_SYSTEM                   = 301,
	CMT_CHAT_GROUP2                          = 310,
	CMT_CHAT_GROUP2_SYSTEM                   = 311,
	CMT_CHAT_GROUP3                          = 320,
	CMT_CHAT_GROUP3_SYSTEM                   = 321,
	CMT_CHAT_GROUP4                          = 330,
	CMT_CHAT_GROUP4_SYSTEM                   = 331,
	CMT_CHAT_GROUP5                          = 340,
	CMT_CHAT_GROUP5_SYSTEM                   = 341,
	CMT_CHAT_INSTANT                         = 400,
	CMT_CHAT_MAX                             = 401,
};

// ScriptStruct TLClient.TLActionKeyGuideInfo
// 0x0060 (0x0060 - 0x0000)
struct FTLActionKeyGuideInfo final
{
public:
	ETLActionKeyGuideType                         Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionName;                                        // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayText;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ConditionText;                                     // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   KeyIconMarkup;                                     // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bLongPress;                                        // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeftAxis;                                         // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AxisEventType;                                     // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLActionKeyGuideInfo) == 0x000008, "Wrong alignment on FTLActionKeyGuideInfo");
static_assert(sizeof(FTLActionKeyGuideInfo) == 0x000060, "Wrong size on FTLActionKeyGuideInfo");
static_assert(offsetof(FTLActionKeyGuideInfo, Type) == 0x000000, "Member 'FTLActionKeyGuideInfo::Type' has a wrong offset!");
static_assert(offsetof(FTLActionKeyGuideInfo, ActionName) == 0x000004, "Member 'FTLActionKeyGuideInfo::ActionName' has a wrong offset!");
static_assert(offsetof(FTLActionKeyGuideInfo, DisplayText) == 0x000010, "Member 'FTLActionKeyGuideInfo::DisplayText' has a wrong offset!");
static_assert(offsetof(FTLActionKeyGuideInfo, ConditionText) == 0x000028, "Member 'FTLActionKeyGuideInfo::ConditionText' has a wrong offset!");
static_assert(offsetof(FTLActionKeyGuideInfo, KeyIconMarkup) == 0x000040, "Member 'FTLActionKeyGuideInfo::KeyIconMarkup' has a wrong offset!");
static_assert(offsetof(FTLActionKeyGuideInfo, bLongPress) == 0x000058, "Member 'FTLActionKeyGuideInfo::bLongPress' has a wrong offset!");
static_assert(offsetof(FTLActionKeyGuideInfo, bLeftAxis) == 0x000059, "Member 'FTLActionKeyGuideInfo::bLeftAxis' has a wrong offset!");
static_assert(offsetof(FTLActionKeyGuideInfo, AxisEventType) == 0x00005C, "Member 'FTLActionKeyGuideInfo::AxisEventType' has a wrong offset!");

// ScriptStruct TLClient.TLWidgetModalDisableData
// 0x0010 (0x0010 - 0x0000)
struct FTLWidgetModalDisableData final
{
public:
	class UWidget*                                DisabledWidget;                                    // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCachedEnable;                                     // 0x0008(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLWidgetModalDisableData) == 0x000008, "Wrong alignment on FTLWidgetModalDisableData");
static_assert(sizeof(FTLWidgetModalDisableData) == 0x000010, "Wrong size on FTLWidgetModalDisableData");
static_assert(offsetof(FTLWidgetModalDisableData, DisabledWidget) == 0x000000, "Member 'FTLWidgetModalDisableData::DisabledWidget' has a wrong offset!");
static_assert(offsetof(FTLWidgetModalDisableData, bCachedEnable) == 0x000008, "Member 'FTLWidgetModalDisableData::bCachedEnable' has a wrong offset!");

// ScriptStruct TLClient.TLWidgetModalData
// 0x0020 (0x0020 - 0x0000)
struct FTLWidgetModalData final
{
public:
	TArray<class UWidget*>                        DesiredWidgets;                                    // 0x0000(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FTLWidgetModalDisableData>      DisabledWidgetDatas;                               // 0x0010(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLWidgetModalData) == 0x000008, "Wrong alignment on FTLWidgetModalData");
static_assert(sizeof(FTLWidgetModalData) == 0x000020, "Wrong size on FTLWidgetModalData");
static_assert(offsetof(FTLWidgetModalData, DesiredWidgets) == 0x000000, "Member 'FTLWidgetModalData::DesiredWidgets' has a wrong offset!");
static_assert(offsetof(FTLWidgetModalData, DisabledWidgetDatas) == 0x000010, "Member 'FTLWidgetModalData::DisabledWidgetDatas' has a wrong offset!");

// ScriptStruct TLClient.TLModalWidgetAgent
// 0x0028 (0x0028 - 0x0000)
struct FTLModalWidgetAgent final
{
public:
	class UTLUserWidget*                          OuterWidget;                                       // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTLWidgetModalData                     ModalData;                                         // 0x0008(0x0020)(Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTLModalWidgetAgent) == 0x000008, "Wrong alignment on FTLModalWidgetAgent");
static_assert(sizeof(FTLModalWidgetAgent) == 0x000028, "Wrong size on FTLModalWidgetAgent");
static_assert(offsetof(FTLModalWidgetAgent, OuterWidget) == 0x000000, "Member 'FTLModalWidgetAgent::OuterWidget' has a wrong offset!");
static_assert(offsetof(FTLModalWidgetAgent, ModalData) == 0x000008, "Member 'FTLModalWidgetAgent::ModalData' has a wrong offset!");

// ScriptStruct TLClient.TLAnalogCursorSetting
// 0x0020 (0x0020 - 0x0000)
struct FTLAnalogCursorSetting final
{
public:
	float                                         MaxSpeed;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StickySlowdownSeconds;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StickySlowdownMin;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StickySlowdownMax;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CursorInteractableRadius;                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncreaseSpeedMultDurationSec;                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StickySlowdownOut;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CursorStickySlowdownRadius;                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLAnalogCursorSetting) == 0x000004, "Wrong alignment on FTLAnalogCursorSetting");
static_assert(sizeof(FTLAnalogCursorSetting) == 0x000020, "Wrong size on FTLAnalogCursorSetting");
static_assert(offsetof(FTLAnalogCursorSetting, MaxSpeed) == 0x000000, "Member 'FTLAnalogCursorSetting::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FTLAnalogCursorSetting, StickySlowdownSeconds) == 0x000004, "Member 'FTLAnalogCursorSetting::StickySlowdownSeconds' has a wrong offset!");
static_assert(offsetof(FTLAnalogCursorSetting, StickySlowdownMin) == 0x000008, "Member 'FTLAnalogCursorSetting::StickySlowdownMin' has a wrong offset!");
static_assert(offsetof(FTLAnalogCursorSetting, StickySlowdownMax) == 0x00000C, "Member 'FTLAnalogCursorSetting::StickySlowdownMax' has a wrong offset!");
static_assert(offsetof(FTLAnalogCursorSetting, CursorInteractableRadius) == 0x000010, "Member 'FTLAnalogCursorSetting::CursorInteractableRadius' has a wrong offset!");
static_assert(offsetof(FTLAnalogCursorSetting, IncreaseSpeedMultDurationSec) == 0x000014, "Member 'FTLAnalogCursorSetting::IncreaseSpeedMultDurationSec' has a wrong offset!");
static_assert(offsetof(FTLAnalogCursorSetting, StickySlowdownOut) == 0x000018, "Member 'FTLAnalogCursorSetting::StickySlowdownOut' has a wrong offset!");
static_assert(offsetof(FTLAnalogCursorSetting, CursorStickySlowdownRadius) == 0x00001C, "Member 'FTLAnalogCursorSetting::CursorStickySlowdownRadius' has a wrong offset!");

// ScriptStruct TLClient.TLDebugStringData
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FTLDebugStringData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLDebugStringData) == 0x000008, "Wrong alignment on FTLDebugStringData");
static_assert(sizeof(FTLDebugStringData) == 0x000010, "Wrong size on FTLDebugStringData");

// ScriptStruct TLClient.TLFocusActionData
// 0x0008 (0x0008 - 0x0000)
struct FTLFocusActionData final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLFocusActionData) == 0x000004, "Wrong alignment on FTLFocusActionData");
static_assert(sizeof(FTLFocusActionData) == 0x000008, "Wrong size on FTLFocusActionData");
static_assert(offsetof(FTLFocusActionData, ActionName) == 0x000000, "Member 'FTLFocusActionData::ActionName' has a wrong offset!");

// ScriptStruct TLClient.TLHomeServerData
// 0x0098 (0x0098 - 0x0000)
struct FTLHomeServerData final
{
public:
	class FName                                   TableRowName;                                      // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerId;                                          // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealmID;                                           // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorldID;                                           // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealmNameID;                                       // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ServerName;                                        // 0x0018(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         DisplayNumer;                                      // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDisplay;                                         // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOpen;                                            // 0x0035(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCanCreateCharacter;                              // 0x0036(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAlive;                                           // 0x0037(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsShowNewMark;                                     // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayStationOnly;                                 // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WaitPlayerCount;                                   // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaitCapacity;                                      // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NowPlayer;                                         // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerCapacity;                                    // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NowCharacter;                                      // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterCapacity;                                 // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsIncubating;                                      // 0x0054(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DeletableCharacterLevel;                           // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsShowRecommendationMark;                          // 0x005C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LocationTag;                                       // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DevelopmentName;                                   // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EServerPopulationStatus                       ServerStatus;                                      // 0x0080(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DisplayOrder;                                      // 0x0084(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEarlyAccess;                                     // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCombackBenefitEnabled;                           // 0x0089(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNewbieBenefitEanbled;                            // 0x008A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8B[0x1];                                       // 0x008B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RandomOrder;                                       // 0x008C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NowTransferExclusivePlayer;                        // 0x0090(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLHomeServerData) == 0x000008, "Wrong alignment on FTLHomeServerData");
static_assert(sizeof(FTLHomeServerData) == 0x000098, "Wrong size on FTLHomeServerData");
static_assert(offsetof(FTLHomeServerData, TableRowName) == 0x000000, "Member 'FTLHomeServerData::TableRowName' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, ServerId) == 0x000008, "Member 'FTLHomeServerData::ServerId' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, RealmID) == 0x00000C, "Member 'FTLHomeServerData::RealmID' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, WorldID) == 0x000010, "Member 'FTLHomeServerData::WorldID' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, RealmNameID) == 0x000014, "Member 'FTLHomeServerData::RealmNameID' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, ServerName) == 0x000018, "Member 'FTLHomeServerData::ServerName' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, DisplayNumer) == 0x000030, "Member 'FTLHomeServerData::DisplayNumer' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, IsDisplay) == 0x000034, "Member 'FTLHomeServerData::IsDisplay' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, IsOpen) == 0x000035, "Member 'FTLHomeServerData::IsOpen' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, IsCanCreateCharacter) == 0x000036, "Member 'FTLHomeServerData::IsCanCreateCharacter' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, IsAlive) == 0x000037, "Member 'FTLHomeServerData::IsAlive' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, IsShowNewMark) == 0x000038, "Member 'FTLHomeServerData::IsShowNewMark' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, IsPlayStationOnly) == 0x000039, "Member 'FTLHomeServerData::IsPlayStationOnly' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, WaitPlayerCount) == 0x00003C, "Member 'FTLHomeServerData::WaitPlayerCount' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, WaitCapacity) == 0x000040, "Member 'FTLHomeServerData::WaitCapacity' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, NowPlayer) == 0x000044, "Member 'FTLHomeServerData::NowPlayer' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, PlayerCapacity) == 0x000048, "Member 'FTLHomeServerData::PlayerCapacity' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, NowCharacter) == 0x00004C, "Member 'FTLHomeServerData::NowCharacter' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, CharacterCapacity) == 0x000050, "Member 'FTLHomeServerData::CharacterCapacity' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, IsIncubating) == 0x000054, "Member 'FTLHomeServerData::IsIncubating' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, DeletableCharacterLevel) == 0x000058, "Member 'FTLHomeServerData::DeletableCharacterLevel' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, IsShowRecommendationMark) == 0x00005C, "Member 'FTLHomeServerData::IsShowRecommendationMark' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, LocationTag) == 0x000060, "Member 'FTLHomeServerData::LocationTag' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, DevelopmentName) == 0x000070, "Member 'FTLHomeServerData::DevelopmentName' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, ServerStatus) == 0x000080, "Member 'FTLHomeServerData::ServerStatus' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, DisplayOrder) == 0x000084, "Member 'FTLHomeServerData::DisplayOrder' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, IsEarlyAccess) == 0x000088, "Member 'FTLHomeServerData::IsEarlyAccess' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, IsCombackBenefitEnabled) == 0x000089, "Member 'FTLHomeServerData::IsCombackBenefitEnabled' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, IsNewbieBenefitEanbled) == 0x00008A, "Member 'FTLHomeServerData::IsNewbieBenefitEanbled' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, RandomOrder) == 0x00008C, "Member 'FTLHomeServerData::RandomOrder' has a wrong offset!");
static_assert(offsetof(FTLHomeServerData, NowTransferExclusivePlayer) == 0x000090, "Member 'FTLHomeServerData::NowTransferExclusivePlayer' has a wrong offset!");

// ScriptStruct TLClient.TLWorldServerData
// 0x0050 (0x0050 - 0x0000)
struct FTLWorldServerData final
{
public:
	class FName                                   TableRowName;                                      // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorldID;                                           // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UTC_Offset;                                        // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   RegionName;                                        // 0x0010(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DisplayUTC;                                        // 0x0028(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FTLHomeServerData>              HomeServerArray;                                   // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLWorldServerData) == 0x000008, "Wrong alignment on FTLWorldServerData");
static_assert(sizeof(FTLWorldServerData) == 0x000050, "Wrong size on FTLWorldServerData");
static_assert(offsetof(FTLWorldServerData, TableRowName) == 0x000000, "Member 'FTLWorldServerData::TableRowName' has a wrong offset!");
static_assert(offsetof(FTLWorldServerData, WorldID) == 0x000008, "Member 'FTLWorldServerData::WorldID' has a wrong offset!");
static_assert(offsetof(FTLWorldServerData, UTC_Offset) == 0x00000C, "Member 'FTLWorldServerData::UTC_Offset' has a wrong offset!");
static_assert(offsetof(FTLWorldServerData, RegionName) == 0x000010, "Member 'FTLWorldServerData::RegionName' has a wrong offset!");
static_assert(offsetof(FTLWorldServerData, DisplayUTC) == 0x000028, "Member 'FTLWorldServerData::DisplayUTC' has a wrong offset!");
static_assert(offsetof(FTLWorldServerData, HomeServerArray) == 0x000040, "Member 'FTLWorldServerData::HomeServerArray' has a wrong offset!");

// ScriptStruct TLClient.ImageAppearance
// 0x0098 (0x0098 - 0x0000)
struct FImageAppearance final
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0000(0x0088)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0088(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FImageAppearance) == 0x000008, "Wrong alignment on FImageAppearance");
static_assert(sizeof(FImageAppearance) == 0x000098, "Wrong size on FImageAppearance");
static_assert(offsetof(FImageAppearance, Brush) == 0x000000, "Member 'FImageAppearance::Brush' has a wrong offset!");
static_assert(offsetof(FImageAppearance, ColorAndOpacity) == 0x000088, "Member 'FImageAppearance::ColorAndOpacity' has a wrong offset!");

// ScriptStruct TLClient.TLWidgetHandle
// 0x0010 (0x0010 - 0x0000)
struct FTLWidgetHandle final
{
public:
	class FName                                   NameKey;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        IndexKey;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        WidgetHandle;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTLWidgetHandle) == 0x000004, "Wrong alignment on FTLWidgetHandle");
static_assert(sizeof(FTLWidgetHandle) == 0x000010, "Wrong size on FTLWidgetHandle");
static_assert(offsetof(FTLWidgetHandle, NameKey) == 0x000000, "Member 'FTLWidgetHandle::NameKey' has a wrong offset!");
static_assert(offsetof(FTLWidgetHandle, IndexKey) == 0x000008, "Member 'FTLWidgetHandle::IndexKey' has a wrong offset!");
static_assert(offsetof(FTLWidgetHandle, WidgetHandle) == 0x00000C, "Member 'FTLWidgetHandle::WidgetHandle' has a wrong offset!");

// ScriptStruct TLClient.TLWidgetBindingUserWidgetVisible
// 0x0010 (0x0040 - 0x0030)
struct FTLWidgetBindingUserWidgetVisible final : public FTLWidgetBinding
{
public:
	TDelegate<void(class UTLUserWidget* Widget)>  OnUpdateVisible;                                   // 0x0030(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLWidgetBindingUserWidgetVisible) == 0x000008, "Wrong alignment on FTLWidgetBindingUserWidgetVisible");
static_assert(sizeof(FTLWidgetBindingUserWidgetVisible) == 0x000040, "Wrong size on FTLWidgetBindingUserWidgetVisible");
static_assert(offsetof(FTLWidgetBindingUserWidgetVisible, OnUpdateVisible) == 0x000030, "Member 'FTLWidgetBindingUserWidgetVisible::OnUpdateVisible' has a wrong offset!");

// ScriptStruct TLClient.TLDynamicEventCondition
// 0x0028 (0x0028 - 0x0000)
struct FTLDynamicEventCondition final
{
public:
	struct FTLDataTableRowHandle                  DynamicEvent;                                      // 0x0000(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDynamicEventProgressType                     DynamicEventStepProgress;                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTLJsonGuid>                    QuestGuids;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLDynamicEventCondition) == 0x000008, "Wrong alignment on FTLDynamicEventCondition");
static_assert(sizeof(FTLDynamicEventCondition) == 0x000028, "Wrong size on FTLDynamicEventCondition");
static_assert(offsetof(FTLDynamicEventCondition, DynamicEvent) == 0x000000, "Member 'FTLDynamicEventCondition::DynamicEvent' has a wrong offset!");
static_assert(offsetof(FTLDynamicEventCondition, DynamicEventStepProgress) == 0x000010, "Member 'FTLDynamicEventCondition::DynamicEventStepProgress' has a wrong offset!");
static_assert(offsetof(FTLDynamicEventCondition, QuestGuids) == 0x000018, "Member 'FTLDynamicEventCondition::QuestGuids' has a wrong offset!");

// ScriptStruct TLClient.TLGameProfilingFixedLocation
// 0x0030 (0x0030 - 0x0000)
struct FTLGameProfilingFixedLocation final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WorldInfoString;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLGameProfilingFixedLocation) == 0x000008, "Wrong alignment on FTLGameProfilingFixedLocation");
static_assert(sizeof(FTLGameProfilingFixedLocation) == 0x000030, "Wrong size on FTLGameProfilingFixedLocation");
static_assert(offsetof(FTLGameProfilingFixedLocation, Name) == 0x000000, "Member 'FTLGameProfilingFixedLocation::Name' has a wrong offset!");
static_assert(offsetof(FTLGameProfilingFixedLocation, Description) == 0x000010, "Member 'FTLGameProfilingFixedLocation::Description' has a wrong offset!");
static_assert(offsetof(FTLGameProfilingFixedLocation, WorldInfoString) == 0x000020, "Member 'FTLGameProfilingFixedLocation::WorldInfoString' has a wrong offset!");

// ScriptStruct TLClient.TLItemSlotDimmedInfo
// 0x0030 (0x0030 - 0x0000)
struct FTLItemSlotDimmedInfo final
{
public:
	struct FSoftObjectPath                        DimmedImagePath;                                   // 0x0000(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DimmedFontStylePath;                               // 0x0018(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLItemSlotDimmedInfo) == 0x000008, "Wrong alignment on FTLItemSlotDimmedInfo");
static_assert(sizeof(FTLItemSlotDimmedInfo) == 0x000030, "Wrong size on FTLItemSlotDimmedInfo");
static_assert(offsetof(FTLItemSlotDimmedInfo, DimmedImagePath) == 0x000000, "Member 'FTLItemSlotDimmedInfo::DimmedImagePath' has a wrong offset!");
static_assert(offsetof(FTLItemSlotDimmedInfo, DimmedFontStylePath) == 0x000018, "Member 'FTLItemSlotDimmedInfo::DimmedFontStylePath' has a wrong offset!");

// ScriptStruct TLClient.TLEquipmentCondition
// 0x0006 (0x0006 - 0x0000)
struct FTLEquipmentCondition final
{
public:
	EEquipCategory                                EquipCategory;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompareItemGrade;                                 // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemGrade                                    InclusiveLowerItemGrade;                           // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemGrade                                    InclusiveUpperItemGrade;                           // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompareItemCategory;                              // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 ItemCategory;                                      // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLEquipmentCondition) == 0x000001, "Wrong alignment on FTLEquipmentCondition");
static_assert(sizeof(FTLEquipmentCondition) == 0x000006, "Wrong size on FTLEquipmentCondition");
static_assert(offsetof(FTLEquipmentCondition, EquipCategory) == 0x000000, "Member 'FTLEquipmentCondition::EquipCategory' has a wrong offset!");
static_assert(offsetof(FTLEquipmentCondition, bCompareItemGrade) == 0x000001, "Member 'FTLEquipmentCondition::bCompareItemGrade' has a wrong offset!");
static_assert(offsetof(FTLEquipmentCondition, InclusiveLowerItemGrade) == 0x000002, "Member 'FTLEquipmentCondition::InclusiveLowerItemGrade' has a wrong offset!");
static_assert(offsetof(FTLEquipmentCondition, InclusiveUpperItemGrade) == 0x000003, "Member 'FTLEquipmentCondition::InclusiveUpperItemGrade' has a wrong offset!");
static_assert(offsetof(FTLEquipmentCondition, bCompareItemCategory) == 0x000004, "Member 'FTLEquipmentCondition::bCompareItemCategory' has a wrong offset!");
static_assert(offsetof(FTLEquipmentCondition, ItemCategory) == 0x000005, "Member 'FTLEquipmentCondition::ItemCategory' has a wrong offset!");

// ScriptStruct TLClient.TLWidgetBankParam
// 0x0048 (0x0048 - 0x0000)
struct FTLWidgetBankParam final
{
public:
	class FName                                   BankKey;                                           // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   WidgetSoftClassPtr;                                // 0x0008(0x0028)(Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLWidgetBankType                             ReturnType;                                        // 0x0038(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultCreateCount;                                // 0x003C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCreateCount;                                    // 0x0040(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLWidgetBankParam) == 0x000008, "Wrong alignment on FTLWidgetBankParam");
static_assert(sizeof(FTLWidgetBankParam) == 0x000048, "Wrong size on FTLWidgetBankParam");
static_assert(offsetof(FTLWidgetBankParam, BankKey) == 0x000000, "Member 'FTLWidgetBankParam::BankKey' has a wrong offset!");
static_assert(offsetof(FTLWidgetBankParam, WidgetSoftClassPtr) == 0x000008, "Member 'FTLWidgetBankParam::WidgetSoftClassPtr' has a wrong offset!");
static_assert(offsetof(FTLWidgetBankParam, WidgetClass) == 0x000030, "Member 'FTLWidgetBankParam::WidgetClass' has a wrong offset!");
static_assert(offsetof(FTLWidgetBankParam, ReturnType) == 0x000038, "Member 'FTLWidgetBankParam::ReturnType' has a wrong offset!");
static_assert(offsetof(FTLWidgetBankParam, DefaultCreateCount) == 0x00003C, "Member 'FTLWidgetBankParam::DefaultCreateCount' has a wrong offset!");
static_assert(offsetof(FTLWidgetBankParam, MaxCreateCount) == 0x000040, "Member 'FTLWidgetBankParam::MaxCreateCount' has a wrong offset!");

// ScriptStruct TLClient.TLWidgetBankPendingDeleteData
// 0x0010 (0x0010 - 0x0000)
struct FTLWidgetBankPendingDeleteData final
{
public:
	float                                         DeleteTimeSeconds;                                 // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            Widget;                                            // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLWidgetBankPendingDeleteData) == 0x000008, "Wrong alignment on FTLWidgetBankPendingDeleteData");
static_assert(sizeof(FTLWidgetBankPendingDeleteData) == 0x000010, "Wrong size on FTLWidgetBankPendingDeleteData");
static_assert(offsetof(FTLWidgetBankPendingDeleteData, DeleteTimeSeconds) == 0x000000, "Member 'FTLWidgetBankPendingDeleteData::DeleteTimeSeconds' has a wrong offset!");
static_assert(offsetof(FTLWidgetBankPendingDeleteData, Widget) == 0x000008, "Member 'FTLWidgetBankPendingDeleteData::Widget' has a wrong offset!");

// ScriptStruct TLClient.TLWidgetBankData
// 0x0078 (0x0078 - 0x0000)
struct FTLWidgetBankData final
{
public:
	struct FTLWidgetBankParam                     CreateParam;                                       // 0x0000(0x0048)(Transient, NativeAccessSpecifierPublic)
	TArray<class UUserWidget*>                    BankWidgets;                                       // 0x0048(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UUserWidget*>                    UsedWidgets;                                       // 0x0058(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FTLWidgetBankPendingDeleteData> PendingDeleteWidgetDatas;                          // 0x0068(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLWidgetBankData) == 0x000008, "Wrong alignment on FTLWidgetBankData");
static_assert(sizeof(FTLWidgetBankData) == 0x000078, "Wrong size on FTLWidgetBankData");
static_assert(offsetof(FTLWidgetBankData, CreateParam) == 0x000000, "Member 'FTLWidgetBankData::CreateParam' has a wrong offset!");
static_assert(offsetof(FTLWidgetBankData, BankWidgets) == 0x000048, "Member 'FTLWidgetBankData::BankWidgets' has a wrong offset!");
static_assert(offsetof(FTLWidgetBankData, UsedWidgets) == 0x000058, "Member 'FTLWidgetBankData::UsedWidgets' has a wrong offset!");
static_assert(offsetof(FTLWidgetBankData, PendingDeleteWidgetDatas) == 0x000068, "Member 'FTLWidgetBankData::PendingDeleteWidgetDatas' has a wrong offset!");

// ScriptStruct TLClient.TLLoopMotionCondition
// 0x0018 (0x0018 - 0x0000)
struct FTLLoopMotionCondition final
{
public:
	struct FTLDataTableRowHandle                  LoopMotion;                                        // 0x0000(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLoopMotionType;                                // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLPlayLoopMotion_MotionType                  LoopMotionType;                                    // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLLoopMotionCondition) == 0x000008, "Wrong alignment on FTLLoopMotionCondition");
static_assert(sizeof(FTLLoopMotionCondition) == 0x000018, "Wrong size on FTLLoopMotionCondition");
static_assert(offsetof(FTLLoopMotionCondition, LoopMotion) == 0x000000, "Member 'FTLLoopMotionCondition::LoopMotion' has a wrong offset!");
static_assert(offsetof(FTLLoopMotionCondition, bUseLoopMotionType) == 0x000010, "Member 'FTLLoopMotionCondition::bUseLoopMotionType' has a wrong offset!");
static_assert(offsetof(FTLLoopMotionCondition, LoopMotionType) == 0x000011, "Member 'FTLLoopMotionCondition::LoopMotionType' has a wrong offset!");

// ScriptStruct TLClient.TLMotionCondition
// 0x0010 (0x0010 - 0x0000)
struct FTLMotionCondition final
{
public:
	struct FTLDataTableRowHandle                  Motion;                                            // 0x0000(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLMotionCondition) == 0x000008, "Wrong alignment on FTLMotionCondition");
static_assert(sizeof(FTLMotionCondition) == 0x000010, "Wrong size on FTLMotionCondition");
static_assert(offsetof(FTLMotionCondition, Motion) == 0x000000, "Member 'FTLMotionCondition::Motion' has a wrong offset!");

// ScriptStruct TLClient.ActionKeyIconText
// 0x0050 (0x0050 - 0x0000)
struct FActionKeyIconText final
{
public:
	class UTLTextBlock*                           HotkeyText;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                HotkeyBgOverlay;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETLKeyIconType                                KeyIconType;                                       // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EActionKeyVisibleType                         ActionKeyVisibleType;                              // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionName;                                        // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                        KeyActionGuideOptionFlag;                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ConsoleFontSize;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PCFontSize;                                        // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        PCTextBlockStyle;                                  // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTLUserWidget*                          Owner;                                             // 0x0040(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionKeyIconText) == 0x000008, "Wrong alignment on FActionKeyIconText");
static_assert(sizeof(FActionKeyIconText) == 0x000050, "Wrong size on FActionKeyIconText");
static_assert(offsetof(FActionKeyIconText, HotkeyText) == 0x000000, "Member 'FActionKeyIconText::HotkeyText' has a wrong offset!");
static_assert(offsetof(FActionKeyIconText, HotkeyBgOverlay) == 0x000008, "Member 'FActionKeyIconText::HotkeyBgOverlay' has a wrong offset!");
static_assert(offsetof(FActionKeyIconText, KeyIconType) == 0x000010, "Member 'FActionKeyIconText::KeyIconType' has a wrong offset!");
static_assert(offsetof(FActionKeyIconText, ActionKeyVisibleType) == 0x000011, "Member 'FActionKeyIconText::ActionKeyVisibleType' has a wrong offset!");
static_assert(offsetof(FActionKeyIconText, ActionName) == 0x000014, "Member 'FActionKeyIconText::ActionName' has a wrong offset!");
static_assert(offsetof(FActionKeyIconText, KeyActionGuideOptionFlag) == 0x00001C, "Member 'FActionKeyIconText::KeyActionGuideOptionFlag' has a wrong offset!");
static_assert(offsetof(FActionKeyIconText, ConsoleFontSize) == 0x000020, "Member 'FActionKeyIconText::ConsoleFontSize' has a wrong offset!");
static_assert(offsetof(FActionKeyIconText, PCFontSize) == 0x000024, "Member 'FActionKeyIconText::PCFontSize' has a wrong offset!");
static_assert(offsetof(FActionKeyIconText, PCTextBlockStyle) == 0x000028, "Member 'FActionKeyIconText::PCTextBlockStyle' has a wrong offset!");
static_assert(offsetof(FActionKeyIconText, Owner) == 0x000040, "Member 'FActionKeyIconText::Owner' has a wrong offset!");

// ScriptStruct TLClient.TLAlchemyTransmuteResultItemInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FTLAlchemyTransmuteResultItemInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLAlchemyTransmuteResultItemInfo) == 0x000008, "Wrong alignment on FTLAlchemyTransmuteResultItemInfo");
static_assert(sizeof(FTLAlchemyTransmuteResultItemInfo) == 0x000018, "Wrong size on FTLAlchemyTransmuteResultItemInfo");

// ScriptStruct TLClient.NpAppInfo
// 0x0030 (0x0030 - 0x0000)
struct FNpAppInfo final
{
public:
	class FString                                 GameCode;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientAppId;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AgsGameAlias;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpAppInfo) == 0x000008, "Wrong alignment on FNpAppInfo");
static_assert(sizeof(FNpAppInfo) == 0x000030, "Wrong size on FNpAppInfo");
static_assert(offsetof(FNpAppInfo, GameCode) == 0x000000, "Member 'FNpAppInfo::GameCode' has a wrong offset!");
static_assert(offsetof(FNpAppInfo, ClientAppId) == 0x000010, "Member 'FNpAppInfo::ClientAppId' has a wrong offset!");
static_assert(offsetof(FNpAppInfo, AgsGameAlias) == 0x000020, "Member 'FNpAppInfo::AgsGameAlias' has a wrong offset!");

// ScriptStruct TLClient.NpServiceInfo
// 0x0040 (0x0040 - 0x0000)
struct FNpServiceInfo final
{
public:
	class FString                                 ServiceNetwork;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppConfigApiUrl;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AIAuthorizationToken;                              // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNpAppInfo>                     NpAppInfoArray;                                    // 0x0030(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpServiceInfo) == 0x000008, "Wrong alignment on FNpServiceInfo");
static_assert(sizeof(FNpServiceInfo) == 0x000040, "Wrong size on FNpServiceInfo");
static_assert(offsetof(FNpServiceInfo, ServiceNetwork) == 0x000000, "Member 'FNpServiceInfo::ServiceNetwork' has a wrong offset!");
static_assert(offsetof(FNpServiceInfo, AppConfigApiUrl) == 0x000010, "Member 'FNpServiceInfo::AppConfigApiUrl' has a wrong offset!");
static_assert(offsetof(FNpServiceInfo, AIAuthorizationToken) == 0x000020, "Member 'FNpServiceInfo::AIAuthorizationToken' has a wrong offset!");
static_assert(offsetof(FNpServiceInfo, NpAppInfoArray) == 0x000030, "Member 'FNpServiceInfo::NpAppInfoArray' has a wrong offset!");

// ScriptStruct TLClient.TLWidgetTestUnitData
// 0x0010 (0x0010 - 0x0000)
struct FTLWidgetTestUnitData final
{
public:
	class UObject*                                SlotObject;                                        // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLWidgetTestUnitData) == 0x000008, "Wrong alignment on FTLWidgetTestUnitData");
static_assert(sizeof(FTLWidgetTestUnitData) == 0x000010, "Wrong size on FTLWidgetTestUnitData");
static_assert(offsetof(FTLWidgetTestUnitData, SlotObject) == 0x000000, "Member 'FTLWidgetTestUnitData::SlotObject' has a wrong offset!");

// ScriptStruct TLClient.TLBuilderCommandMacro
// 0x0020 (0x0020 - 0x0000)
struct FTLBuilderCommandMacro final
{
public:
	TArray<class FString>                         BuilderCommands;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLBuilderCommandMacro) == 0x000008, "Wrong alignment on FTLBuilderCommandMacro");
static_assert(sizeof(FTLBuilderCommandMacro) == 0x000020, "Wrong size on FTLBuilderCommandMacro");
static_assert(offsetof(FTLBuilderCommandMacro, BuilderCommands) == 0x000000, "Member 'FTLBuilderCommandMacro::BuilderCommands' has a wrong offset!");
static_assert(offsetof(FTLBuilderCommandMacro, Description) == 0x000010, "Member 'FTLBuilderCommandMacro::Description' has a wrong offset!");

// ScriptStruct TLClient.TLBuilderCommandMacroContext
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FTLBuilderCommandMacroContext final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLBuilderCommandMacroContext) == 0x000008, "Wrong alignment on FTLBuilderCommandMacroContext");
static_assert(sizeof(FTLBuilderCommandMacroContext) == 0x000028, "Wrong size on FTLBuilderCommandMacroContext");

// ScriptStruct TLClient.TLMacroActionMapping
// 0x000C (0x000C - 0x0000)
struct FTLMacroActionMapping final
{
public:
	EActionBuilderCommandMacro                    Action;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MacroId;                                           // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLMacroActionMapping) == 0x000004, "Wrong alignment on FTLMacroActionMapping");
static_assert(sizeof(FTLMacroActionMapping) == 0x00000C, "Wrong size on FTLMacroActionMapping");
static_assert(offsetof(FTLMacroActionMapping, Action) == 0x000000, "Member 'FTLMacroActionMapping::Action' has a wrong offset!");
static_assert(offsetof(FTLMacroActionMapping, MacroId) == 0x000004, "Member 'FTLMacroActionMapping::MacroId' has a wrong offset!");

// ScriptStruct TLClient.TLButtonData
// 0x0258 (0x0258 - 0x0000)
struct FTLButtonData final
{
public:
	class FText                                   ButtonText;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	class FName                                   TextTooltipId;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ToolTipText;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Icon;                                              // 0x0038(0x0088)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoverIcon;                                         // 0x00C0(0x0088)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CheckIcon;                                         // 0x0148(0x0088)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CheckHoverIcon;                                    // 0x01D0(0x0088)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLButtonData) == 0x000008, "Wrong alignment on FTLButtonData");
static_assert(sizeof(FTLButtonData) == 0x000258, "Wrong size on FTLButtonData");
static_assert(offsetof(FTLButtonData, ButtonText) == 0x000000, "Member 'FTLButtonData::ButtonText' has a wrong offset!");
static_assert(offsetof(FTLButtonData, TextTooltipId) == 0x000018, "Member 'FTLButtonData::TextTooltipId' has a wrong offset!");
static_assert(offsetof(FTLButtonData, ToolTipText) == 0x000020, "Member 'FTLButtonData::ToolTipText' has a wrong offset!");
static_assert(offsetof(FTLButtonData, Icon) == 0x000038, "Member 'FTLButtonData::Icon' has a wrong offset!");
static_assert(offsetof(FTLButtonData, HoverIcon) == 0x0000C0, "Member 'FTLButtonData::HoverIcon' has a wrong offset!");
static_assert(offsetof(FTLButtonData, CheckIcon) == 0x000148, "Member 'FTLButtonData::CheckIcon' has a wrong offset!");
static_assert(offsetof(FTLButtonData, CheckHoverIcon) == 0x0001D0, "Member 'FTLButtonData::CheckHoverIcon' has a wrong offset!");

// ScriptStruct TLClient.TLInputActionKeyCombinationMapping
// 0x0048 (0x0048 - 0x0000)
struct FTLInputActionKeyCombinationMapping final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           ModifierKeys;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           IgnoreModifierKeyActions;                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0028(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLGamepadInputEvent                          InputEvent;                                        // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLGamepadMappingType                         MappingType;                                       // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLInputActionKeyCombinationMapping) == 0x000008, "Wrong alignment on FTLInputActionKeyCombinationMapping");
static_assert(sizeof(FTLInputActionKeyCombinationMapping) == 0x000048, "Wrong size on FTLInputActionKeyCombinationMapping");
static_assert(offsetof(FTLInputActionKeyCombinationMapping, ActionName) == 0x000000, "Member 'FTLInputActionKeyCombinationMapping::ActionName' has a wrong offset!");
static_assert(offsetof(FTLInputActionKeyCombinationMapping, ModifierKeys) == 0x000008, "Member 'FTLInputActionKeyCombinationMapping::ModifierKeys' has a wrong offset!");
static_assert(offsetof(FTLInputActionKeyCombinationMapping, IgnoreModifierKeyActions) == 0x000018, "Member 'FTLInputActionKeyCombinationMapping::IgnoreModifierKeyActions' has a wrong offset!");
static_assert(offsetof(FTLInputActionKeyCombinationMapping, Key) == 0x000028, "Member 'FTLInputActionKeyCombinationMapping::Key' has a wrong offset!");
static_assert(offsetof(FTLInputActionKeyCombinationMapping, InputEvent) == 0x000040, "Member 'FTLInputActionKeyCombinationMapping::InputEvent' has a wrong offset!");
static_assert(offsetof(FTLInputActionKeyCombinationMapping, MappingType) == 0x000041, "Member 'FTLInputActionKeyCombinationMapping::MappingType' has a wrong offset!");

// ScriptStruct TLClient.TLConsoleGameTestExternalAccount
// 0x0010 (0x0010 - 0x0000)
struct FTLConsoleGameTestExternalAccount final
{
public:
	class FString                                 CharacterName;                                     // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLConsoleGameTestExternalAccount) == 0x000008, "Wrong alignment on FTLConsoleGameTestExternalAccount");
static_assert(sizeof(FTLConsoleGameTestExternalAccount) == 0x000010, "Wrong size on FTLConsoleGameTestExternalAccount");
static_assert(offsetof(FTLConsoleGameTestExternalAccount, CharacterName) == 0x000000, "Member 'FTLConsoleGameTestExternalAccount::CharacterName' has a wrong offset!");

// ScriptStruct TLClient.TLConsoleGameTestLocation
// 0x0030 (0x0030 - 0x0000)
struct FTLConsoleGameTestLocation final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WorldInfoString;                                   // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLConsoleGameTestLocation) == 0x000008, "Wrong alignment on FTLConsoleGameTestLocation");
static_assert(sizeof(FTLConsoleGameTestLocation) == 0x000030, "Wrong size on FTLConsoleGameTestLocation");
static_assert(offsetof(FTLConsoleGameTestLocation, Name) == 0x000000, "Member 'FTLConsoleGameTestLocation::Name' has a wrong offset!");
static_assert(offsetof(FTLConsoleGameTestLocation, Description) == 0x000010, "Member 'FTLConsoleGameTestLocation::Description' has a wrong offset!");
static_assert(offsetof(FTLConsoleGameTestLocation, WorldInfoString) == 0x000020, "Member 'FTLConsoleGameTestLocation::WorldInfoString' has a wrong offset!");

// ScriptStruct TLClient.TLGachaActionTree
// 0x0058 (0x0058 - 0x0000)
struct FTLGachaActionTree final
{
public:
	TMap<ETLGachaCategory, class UTLActionTree*>  CategoryActionTreeMap;                             // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UTLActionTree*                          DefaultActionTree;                                 // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLGachaActionTree) == 0x000008, "Wrong alignment on FTLGachaActionTree");
static_assert(sizeof(FTLGachaActionTree) == 0x000058, "Wrong size on FTLGachaActionTree");
static_assert(offsetof(FTLGachaActionTree, CategoryActionTreeMap) == 0x000000, "Member 'FTLGachaActionTree::CategoryActionTreeMap' has a wrong offset!");
static_assert(offsetof(FTLGachaActionTree, DefaultActionTree) == 0x000050, "Member 'FTLGachaActionTree::DefaultActionTree' has a wrong offset!");

// ScriptStruct TLClient.TLCharacterInfoUIEtcStatCategory
// 0x0040 (0x0040 - 0x0000)
struct FTLCharacterInfoUIEtcStatCategory final
{
public:
	class FText                                   CategoryName;                                      // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	TArray<EPcStatsType>                          FirstStatList;                                     // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EPcStatsType>                          SecondStatList;                                    // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         UISortIndex;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLCharacterInfoUIEtcStatCategory) == 0x000008, "Wrong alignment on FTLCharacterInfoUIEtcStatCategory");
static_assert(sizeof(FTLCharacterInfoUIEtcStatCategory) == 0x000040, "Wrong size on FTLCharacterInfoUIEtcStatCategory");
static_assert(offsetof(FTLCharacterInfoUIEtcStatCategory, CategoryName) == 0x000000, "Member 'FTLCharacterInfoUIEtcStatCategory::CategoryName' has a wrong offset!");
static_assert(offsetof(FTLCharacterInfoUIEtcStatCategory, FirstStatList) == 0x000018, "Member 'FTLCharacterInfoUIEtcStatCategory::FirstStatList' has a wrong offset!");
static_assert(offsetof(FTLCharacterInfoUIEtcStatCategory, SecondStatList) == 0x000028, "Member 'FTLCharacterInfoUIEtcStatCategory::SecondStatList' has a wrong offset!");
static_assert(offsetof(FTLCharacterInfoUIEtcStatCategory, UISortIndex) == 0x000038, "Member 'FTLCharacterInfoUIEtcStatCategory::UISortIndex' has a wrong offset!");

// ScriptStruct TLClient.TLFishingClientOnlyCommonInfo
// 0x0020 (0x0020 - 0x0000)
struct FTLFishingClientOnlyCommonInfo final
{
public:
	float                                         FishingPowerDecreaseDuration;                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FishingPowerRecoveryDuration;                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FishingPowerRecoveryDelay;                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FishingPowerPenaltyScale;                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProbabilityVarianceStartDistanceRatio;             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProbabilityVarianceEndDistanceRatio;               // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProbabilityVarianceMax;                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlertDistanceRatio;                                // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLFishingClientOnlyCommonInfo) == 0x000004, "Wrong alignment on FTLFishingClientOnlyCommonInfo");
static_assert(sizeof(FTLFishingClientOnlyCommonInfo) == 0x000020, "Wrong size on FTLFishingClientOnlyCommonInfo");
static_assert(offsetof(FTLFishingClientOnlyCommonInfo, FishingPowerDecreaseDuration) == 0x000000, "Member 'FTLFishingClientOnlyCommonInfo::FishingPowerDecreaseDuration' has a wrong offset!");
static_assert(offsetof(FTLFishingClientOnlyCommonInfo, FishingPowerRecoveryDuration) == 0x000004, "Member 'FTLFishingClientOnlyCommonInfo::FishingPowerRecoveryDuration' has a wrong offset!");
static_assert(offsetof(FTLFishingClientOnlyCommonInfo, FishingPowerRecoveryDelay) == 0x000008, "Member 'FTLFishingClientOnlyCommonInfo::FishingPowerRecoveryDelay' has a wrong offset!");
static_assert(offsetof(FTLFishingClientOnlyCommonInfo, FishingPowerPenaltyScale) == 0x00000C, "Member 'FTLFishingClientOnlyCommonInfo::FishingPowerPenaltyScale' has a wrong offset!");
static_assert(offsetof(FTLFishingClientOnlyCommonInfo, ProbabilityVarianceStartDistanceRatio) == 0x000010, "Member 'FTLFishingClientOnlyCommonInfo::ProbabilityVarianceStartDistanceRatio' has a wrong offset!");
static_assert(offsetof(FTLFishingClientOnlyCommonInfo, ProbabilityVarianceEndDistanceRatio) == 0x000014, "Member 'FTLFishingClientOnlyCommonInfo::ProbabilityVarianceEndDistanceRatio' has a wrong offset!");
static_assert(offsetof(FTLFishingClientOnlyCommonInfo, ProbabilityVarianceMax) == 0x000018, "Member 'FTLFishingClientOnlyCommonInfo::ProbabilityVarianceMax' has a wrong offset!");
static_assert(offsetof(FTLFishingClientOnlyCommonInfo, AlertDistanceRatio) == 0x00001C, "Member 'FTLFishingClientOnlyCommonInfo::AlertDistanceRatio' has a wrong offset!");

// ScriptStruct TLClient.TLDefaultTextTooltipProxy
// 0x0070 (0x0070 - 0x0000)
struct FTLDefaultTextTooltipProxy final
{
public:
	class FName                                   TextTooltipTableID;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TitleValue;                                        // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        IconPath;                                          // 0x0058(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLDefaultTextTooltipProxy) == 0x000008, "Wrong alignment on FTLDefaultTextTooltipProxy");
static_assert(sizeof(FTLDefaultTextTooltipProxy) == 0x000070, "Wrong size on FTLDefaultTextTooltipProxy");
static_assert(offsetof(FTLDefaultTextTooltipProxy, TextTooltipTableID) == 0x000000, "Member 'FTLDefaultTextTooltipProxy::TextTooltipTableID' has a wrong offset!");
static_assert(offsetof(FTLDefaultTextTooltipProxy, Title) == 0x000008, "Member 'FTLDefaultTextTooltipProxy::Title' has a wrong offset!");
static_assert(offsetof(FTLDefaultTextTooltipProxy, Description) == 0x000020, "Member 'FTLDefaultTextTooltipProxy::Description' has a wrong offset!");
static_assert(offsetof(FTLDefaultTextTooltipProxy, TitleValue) == 0x000040, "Member 'FTLDefaultTextTooltipProxy::TitleValue' has a wrong offset!");
static_assert(offsetof(FTLDefaultTextTooltipProxy, IconPath) == 0x000058, "Member 'FTLDefaultTextTooltipProxy::IconPath' has a wrong offset!");

// ScriptStruct TLClient.TLContentsScreenMsgParams
// 0x0140 (0x0140 - 0x0000)
struct FTLContentsScreenMsgParams final
{
public:
	EContentsEventType                            ContentsType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x13];                                       // 0x0001(0x0013)(Fixing Size After Last Property [ Dumper-7 ])
	EMapRegionType                                StaticRegionType;                                  // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContentsToContents;                               // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEclipseStart;                                     // 0x0016(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInterServerEvent;                               // 0x0017(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SiegeWarfareName;                                  // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsSiegeProgress;                                  // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        CastleGuid;                                        // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CastleName;                                        // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsSiegePolymorph;                                 // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SiegePolymorphName;                                // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OccupationName;                                    // 0x0080(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bParticipatingGuild;                               // 0x0098(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DynamicEventName;                                  // 0x00A0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ETLEventScheduleType                          DynamicEventType;                                  // 0x00B8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DynamicEventEffectName;                            // 0x00C0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   WorldBossName;                                     // 0x00D8(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bWorldBossPeace;                                   // 0x00F0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FieldBossEventName;                                // 0x00F8(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bFieldBossPeace;                                   // 0x0110(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TaxDeliveryName;                                   // 0x0118(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLContentsScreenMsgParams) == 0x000008, "Wrong alignment on FTLContentsScreenMsgParams");
static_assert(sizeof(FTLContentsScreenMsgParams) == 0x000140, "Wrong size on FTLContentsScreenMsgParams");
static_assert(offsetof(FTLContentsScreenMsgParams, ContentsType) == 0x000000, "Member 'FTLContentsScreenMsgParams::ContentsType' has a wrong offset!");
static_assert(offsetof(FTLContentsScreenMsgParams, StaticRegionType) == 0x000014, "Member 'FTLContentsScreenMsgParams::StaticRegionType' has a wrong offset!");
static_assert(offsetof(FTLContentsScreenMsgParams, bContentsToContents) == 0x000015, "Member 'FTLContentsScreenMsgParams::bContentsToContents' has a wrong offset!");
static_assert(offsetof(FTLContentsScreenMsgParams, bEclipseStart) == 0x000016, "Member 'FTLContentsScreenMsgParams::bEclipseStart' has a wrong offset!");
static_assert(offsetof(FTLContentsScreenMsgParams, bIsInterServerEvent) == 0x000017, "Member 'FTLContentsScreenMsgParams::bIsInterServerEvent' has a wrong offset!");
static_assert(offsetof(FTLContentsScreenMsgParams, SiegeWarfareName) == 0x000018, "Member 'FTLContentsScreenMsgParams::SiegeWarfareName' has a wrong offset!");
static_assert(offsetof(FTLContentsScreenMsgParams, bIsSiegeProgress) == 0x000030, "Member 'FTLContentsScreenMsgParams::bIsSiegeProgress' has a wrong offset!");
static_assert(offsetof(FTLContentsScreenMsgParams, CastleGuid) == 0x000038, "Member 'FTLContentsScreenMsgParams::CastleGuid' has a wrong offset!");
static_assert(offsetof(FTLContentsScreenMsgParams, CastleName) == 0x000040, "Member 'FTLContentsScreenMsgParams::CastleName' has a wrong offset!");
static_assert(offsetof(FTLContentsScreenMsgParams, bIsSiegePolymorph) == 0x000058, "Member 'FTLContentsScreenMsgParams::bIsSiegePolymorph' has a wrong offset!");
static_assert(offsetof(FTLContentsScreenMsgParams, SiegePolymorphName) == 0x000060, "Member 'FTLContentsScreenMsgParams::SiegePolymorphName' has a wrong offset!");
static_assert(offsetof(FTLContentsScreenMsgParams, OccupationName) == 0x000080, "Member 'FTLContentsScreenMsgParams::OccupationName' has a wrong offset!");
static_assert(offsetof(FTLContentsScreenMsgParams, bParticipatingGuild) == 0x000098, "Member 'FTLContentsScreenMsgParams::bParticipatingGuild' has a wrong offset!");
static_assert(offsetof(FTLContentsScreenMsgParams, DynamicEventName) == 0x0000A0, "Member 'FTLContentsScreenMsgParams::DynamicEventName' has a wrong offset!");
static_assert(offsetof(FTLContentsScreenMsgParams, DynamicEventType) == 0x0000B8, "Member 'FTLContentsScreenMsgParams::DynamicEventType' has a wrong offset!");
static_assert(offsetof(FTLContentsScreenMsgParams, DynamicEventEffectName) == 0x0000C0, "Member 'FTLContentsScreenMsgParams::DynamicEventEffectName' has a wrong offset!");
static_assert(offsetof(FTLContentsScreenMsgParams, WorldBossName) == 0x0000D8, "Member 'FTLContentsScreenMsgParams::WorldBossName' has a wrong offset!");
static_assert(offsetof(FTLContentsScreenMsgParams, bWorldBossPeace) == 0x0000F0, "Member 'FTLContentsScreenMsgParams::bWorldBossPeace' has a wrong offset!");
static_assert(offsetof(FTLContentsScreenMsgParams, FieldBossEventName) == 0x0000F8, "Member 'FTLContentsScreenMsgParams::FieldBossEventName' has a wrong offset!");
static_assert(offsetof(FTLContentsScreenMsgParams, bFieldBossPeace) == 0x000110, "Member 'FTLContentsScreenMsgParams::bFieldBossPeace' has a wrong offset!");
static_assert(offsetof(FTLContentsScreenMsgParams, TaxDeliveryName) == 0x000118, "Member 'FTLContentsScreenMsgParams::TaxDeliveryName' has a wrong offset!");

// ScriptStruct TLClient.TLContentsEventParameter
// 0x0002 (0x0002 - 0x0000)
struct FTLContentsEventParameter final
{
public:
	ETLContentsEvent                              Event;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLContentsEventRunType                       RunType;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLContentsEventParameter) == 0x000001, "Wrong alignment on FTLContentsEventParameter");
static_assert(sizeof(FTLContentsEventParameter) == 0x000002, "Wrong size on FTLContentsEventParameter");
static_assert(offsetof(FTLContentsEventParameter, Event) == 0x000000, "Member 'FTLContentsEventParameter::Event' has a wrong offset!");
static_assert(offsetof(FTLContentsEventParameter, RunType) == 0x000001, "Member 'FTLContentsEventParameter::RunType' has a wrong offset!");

// ScriptStruct TLClient.TLCustomizeHistoryData
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FTLCustomizeHistoryData final
{
public:
	ECustomizeHistoryType                         HistoryType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomizeUIMiddleCategory                    PresetType;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomizeType                                CustomizeType;                                     // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5D];                                       // 0x0003(0x005D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLCustomizeHistoryData) == 0x000008, "Wrong alignment on FTLCustomizeHistoryData");
static_assert(sizeof(FTLCustomizeHistoryData) == 0x000060, "Wrong size on FTLCustomizeHistoryData");
static_assert(offsetof(FTLCustomizeHistoryData, HistoryType) == 0x000000, "Member 'FTLCustomizeHistoryData::HistoryType' has a wrong offset!");
static_assert(offsetof(FTLCustomizeHistoryData, PresetType) == 0x000001, "Member 'FTLCustomizeHistoryData::PresetType' has a wrong offset!");
static_assert(offsetof(FTLCustomizeHistoryData, CustomizeType) == 0x000002, "Member 'FTLCustomizeHistoryData::CustomizeType' has a wrong offset!");

// ScriptStruct TLClient.TLDeathPenaltyInfo
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FTLDeathPenaltyInfo final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLDeathPenaltyInfo) == 0x000008, "Wrong alignment on FTLDeathPenaltyInfo");
static_assert(sizeof(FTLDeathPenaltyInfo) == 0x000038, "Wrong size on FTLDeathPenaltyInfo");

// ScriptStruct TLClient.TLGachaHiveEntityData
// 0x0050 (0x0050 - 0x0000)
struct FTLGachaHiveEntityData final
{
public:
	TMap<ETLGachaCategory, class UHiveEntityData*> CategoryHiveEntityDataMap;                         // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLGachaHiveEntityData) == 0x000008, "Wrong alignment on FTLGachaHiveEntityData");
static_assert(sizeof(FTLGachaHiveEntityData) == 0x000050, "Wrong size on FTLGachaHiveEntityData");
static_assert(offsetof(FTLGachaHiveEntityData, CategoryHiveEntityDataMap) == 0x000000, "Member 'FTLGachaHiveEntityData::CategoryHiveEntityDataMap' has a wrong offset!");

// ScriptStruct TLClient.TLDebugAuthInfo
// 0x0028 (0x0028 - 0x0000)
struct FTLDebugAuthInfo final
{
public:
	int32                                         PIEInstance;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AuthAccountId;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuthPassword_V2;                                   // 0x0018(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLDebugAuthInfo) == 0x000008, "Wrong alignment on FTLDebugAuthInfo");
static_assert(sizeof(FTLDebugAuthInfo) == 0x000028, "Wrong size on FTLDebugAuthInfo");
static_assert(offsetof(FTLDebugAuthInfo, PIEInstance) == 0x000000, "Member 'FTLDebugAuthInfo::PIEInstance' has a wrong offset!");
static_assert(offsetof(FTLDebugAuthInfo, AuthAccountId) == 0x000008, "Member 'FTLDebugAuthInfo::AuthAccountId' has a wrong offset!");
static_assert(offsetof(FTLDebugAuthInfo, AuthPassword_V2) == 0x000018, "Member 'FTLDebugAuthInfo::AuthPassword_V2' has a wrong offset!");

// ScriptStruct TLClient.TLDebugString
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FTLDebugString final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLDebugString) == 0x000008, "Wrong alignment on FTLDebugString");
static_assert(sizeof(FTLDebugString) == 0x000020, "Wrong size on FTLDebugString");

// ScriptStruct TLClient.TLEditableTextBlockComponent
// 0x0010 (0x0010 - 0x0000)
struct FTLEditableTextBlockComponent final
{
public:
	class UTLTextBlock*                           NameText;                                          // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLEditableTextBox*                     NameTextInput;                                     // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLEditableTextBlockComponent) == 0x000008, "Wrong alignment on FTLEditableTextBlockComponent");
static_assert(sizeof(FTLEditableTextBlockComponent) == 0x000010, "Wrong size on FTLEditableTextBlockComponent");
static_assert(offsetof(FTLEditableTextBlockComponent, NameText) == 0x000000, "Member 'FTLEditableTextBlockComponent::NameText' has a wrong offset!");
static_assert(offsetof(FTLEditableTextBlockComponent, NameTextInput) == 0x000008, "Member 'FTLEditableTextBlockComponent::NameTextInput' has a wrong offset!");

// ScriptStruct TLClient.TLEnchantTransferSimulatedResult
// 0x003C (0x003C - 0x0000)
struct alignas(0x04) FTLEnchantTransferSimulatedResult final
{
public:
	uint8                                         Pad_0[0x3C];                                       // 0x0000(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLEnchantTransferSimulatedResult) == 0x000004, "Wrong alignment on FTLEnchantTransferSimulatedResult");
static_assert(sizeof(FTLEnchantTransferSimulatedResult) == 0x00003C, "Wrong size on FTLEnchantTransferSimulatedResult");

// ScriptStruct TLClient.CameraMovement
// 0x0020 (0x0020 - 0x0000)
struct FCameraMovement final
{
public:
	float                                         TimeInSeconds;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentFocalLength;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraMovement) == 0x000004, "Wrong alignment on FCameraMovement");
static_assert(sizeof(FCameraMovement) == 0x000020, "Wrong size on FCameraMovement");
static_assert(offsetof(FCameraMovement, TimeInSeconds) == 0x000000, "Member 'FCameraMovement::TimeInSeconds' has a wrong offset!");
static_assert(offsetof(FCameraMovement, CurrentFocalLength) == 0x000004, "Member 'FCameraMovement::CurrentFocalLength' has a wrong offset!");
static_assert(offsetof(FCameraMovement, Location) == 0x000008, "Member 'FCameraMovement::Location' has a wrong offset!");
static_assert(offsetof(FCameraMovement, Rotation) == 0x000014, "Member 'FCameraMovement::Rotation' has a wrong offset!");

// ScriptStruct TLClient.TLGachaLevelActionTree
// 0x0010 (0x0010 - 0x0000)
struct FTLGachaLevelActionTree final
{
public:
	TArray<struct FTLGachaActionTree>             LevelActionTreeList;                               // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLGachaLevelActionTree) == 0x000008, "Wrong alignment on FTLGachaLevelActionTree");
static_assert(sizeof(FTLGachaLevelActionTree) == 0x000010, "Wrong size on FTLGachaLevelActionTree");
static_assert(offsetof(FTLGachaLevelActionTree, LevelActionTreeList) == 0x000000, "Member 'FTLGachaLevelActionTree::LevelActionTreeList' has a wrong offset!");

// ScriptStruct TLClient.TLGachaPercentageLevel
// 0x0010 (0x0010 - 0x0000)
struct FTLGachaPercentageLevel final
{
public:
	TArray<int32>                                 PercentageLevelSequenceInfoList;                   // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLGachaPercentageLevel) == 0x000008, "Wrong alignment on FTLGachaPercentageLevel");
static_assert(sizeof(FTLGachaPercentageLevel) == 0x000010, "Wrong size on FTLGachaPercentageLevel");
static_assert(offsetof(FTLGachaPercentageLevel, PercentageLevelSequenceInfoList) == 0x000000, "Member 'FTLGachaPercentageLevel::PercentageLevelSequenceInfoList' has a wrong offset!");

// ScriptStruct TLClient.TLGachaLevelSequence
// 0x0028 (0x0028 - 0x0000)
struct FTLGachaLevelSequence final
{
public:
	ETLGachaBranchType                            GachaBranchType;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULevelSequence*>                 LevelSequenceList;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTLGachaPercentageLevel>        PercentageLevelList;                               // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLGachaLevelSequence) == 0x000008, "Wrong alignment on FTLGachaLevelSequence");
static_assert(sizeof(FTLGachaLevelSequence) == 0x000028, "Wrong size on FTLGachaLevelSequence");
static_assert(offsetof(FTLGachaLevelSequence, GachaBranchType) == 0x000000, "Member 'FTLGachaLevelSequence::GachaBranchType' has a wrong offset!");
static_assert(offsetof(FTLGachaLevelSequence, LevelSequenceList) == 0x000008, "Member 'FTLGachaLevelSequence::LevelSequenceList' has a wrong offset!");
static_assert(offsetof(FTLGachaLevelSequence, PercentageLevelList) == 0x000018, "Member 'FTLGachaLevelSequence::PercentageLevelList' has a wrong offset!");

// ScriptStruct TLClient.LobbyWindAffectorSetting
// 0x001C (0x001C - 0x0000)
struct FLobbyWindAffectorSetting final
{
public:
	struct FRotator                               WorldRotation;                                     // 0x0000(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUpdateWind;                                       // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindIntensity;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableForceBlendDuration;                         // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForceBlendDuration;                                // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyWindAffectorSetting) == 0x000004, "Wrong alignment on FLobbyWindAffectorSetting");
static_assert(sizeof(FLobbyWindAffectorSetting) == 0x00001C, "Wrong size on FLobbyWindAffectorSetting");
static_assert(offsetof(FLobbyWindAffectorSetting, WorldRotation) == 0x000000, "Member 'FLobbyWindAffectorSetting::WorldRotation' has a wrong offset!");
static_assert(offsetof(FLobbyWindAffectorSetting, bUpdateWind) == 0x00000C, "Member 'FLobbyWindAffectorSetting::bUpdateWind' has a wrong offset!");
static_assert(offsetof(FLobbyWindAffectorSetting, WindIntensity) == 0x000010, "Member 'FLobbyWindAffectorSetting::WindIntensity' has a wrong offset!");
static_assert(offsetof(FLobbyWindAffectorSetting, bEnableForceBlendDuration) == 0x000014, "Member 'FLobbyWindAffectorSetting::bEnableForceBlendDuration' has a wrong offset!");
static_assert(offsetof(FLobbyWindAffectorSetting, ForceBlendDuration) == 0x000018, "Member 'FLobbyWindAffectorSetting::ForceBlendDuration' has a wrong offset!");

// ScriptStruct TLClient.LobbyPreviewCharacterInfo
// 0x00B8 (0x00B8 - 0x0000)
struct FLobbyPreviewCharacterInfo final
{
public:
	class FName                                   CameraTag;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ZoomCameraTag;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpawnPointTag;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DefaultIdleAT;                                     // 0x0018(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SelectStartAT;                                     // 0x0030(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SelectIdleAT;                                      // 0x0048(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SelectEndAT;                                       // 0x0060(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        GameEnterStartAT;                                  // 0x0078(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        GameEnterIdleAT;                                   // 0x0090(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATLCharacter*                           Character;                                         // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x8];                                       // 0x00B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLobbyPreviewCharacterInfo) == 0x000008, "Wrong alignment on FLobbyPreviewCharacterInfo");
static_assert(sizeof(FLobbyPreviewCharacterInfo) == 0x0000B8, "Wrong size on FLobbyPreviewCharacterInfo");
static_assert(offsetof(FLobbyPreviewCharacterInfo, CameraTag) == 0x000000, "Member 'FLobbyPreviewCharacterInfo::CameraTag' has a wrong offset!");
static_assert(offsetof(FLobbyPreviewCharacterInfo, ZoomCameraTag) == 0x000008, "Member 'FLobbyPreviewCharacterInfo::ZoomCameraTag' has a wrong offset!");
static_assert(offsetof(FLobbyPreviewCharacterInfo, SpawnPointTag) == 0x000010, "Member 'FLobbyPreviewCharacterInfo::SpawnPointTag' has a wrong offset!");
static_assert(offsetof(FLobbyPreviewCharacterInfo, DefaultIdleAT) == 0x000018, "Member 'FLobbyPreviewCharacterInfo::DefaultIdleAT' has a wrong offset!");
static_assert(offsetof(FLobbyPreviewCharacterInfo, SelectStartAT) == 0x000030, "Member 'FLobbyPreviewCharacterInfo::SelectStartAT' has a wrong offset!");
static_assert(offsetof(FLobbyPreviewCharacterInfo, SelectIdleAT) == 0x000048, "Member 'FLobbyPreviewCharacterInfo::SelectIdleAT' has a wrong offset!");
static_assert(offsetof(FLobbyPreviewCharacterInfo, SelectEndAT) == 0x000060, "Member 'FLobbyPreviewCharacterInfo::SelectEndAT' has a wrong offset!");
static_assert(offsetof(FLobbyPreviewCharacterInfo, GameEnterStartAT) == 0x000078, "Member 'FLobbyPreviewCharacterInfo::GameEnterStartAT' has a wrong offset!");
static_assert(offsetof(FLobbyPreviewCharacterInfo, GameEnterIdleAT) == 0x000090, "Member 'FLobbyPreviewCharacterInfo::GameEnterIdleAT' has a wrong offset!");
static_assert(offsetof(FLobbyPreviewCharacterInfo, Character) == 0x0000A8, "Member 'FLobbyPreviewCharacterInfo::Character' has a wrong offset!");

// ScriptStruct TLClient.LobbyCustomizeCharacterInfo
// 0x0020 (0x0020 - 0x0000)
struct FLobbyCustomizeCharacterInfo final
{
public:
	ETLCharacterGender                            SpawnGender;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SpawnPointTag;                                     // 0x0004(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpawnTag;                                          // 0x000C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATLCharacter*                           Character;                                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyCustomizeCharacterInfo) == 0x000008, "Wrong alignment on FLobbyCustomizeCharacterInfo");
static_assert(sizeof(FLobbyCustomizeCharacterInfo) == 0x000020, "Wrong size on FLobbyCustomizeCharacterInfo");
static_assert(offsetof(FLobbyCustomizeCharacterInfo, SpawnGender) == 0x000000, "Member 'FLobbyCustomizeCharacterInfo::SpawnGender' has a wrong offset!");
static_assert(offsetof(FLobbyCustomizeCharacterInfo, SpawnPointTag) == 0x000004, "Member 'FLobbyCustomizeCharacterInfo::SpawnPointTag' has a wrong offset!");
static_assert(offsetof(FLobbyCustomizeCharacterInfo, SpawnTag) == 0x00000C, "Member 'FLobbyCustomizeCharacterInfo::SpawnTag' has a wrong offset!");
static_assert(offsetof(FLobbyCustomizeCharacterInfo, Character) == 0x000018, "Member 'FLobbyCustomizeCharacterInfo::Character' has a wrong offset!");

// ScriptStruct TLClient.LobbyCustomizeCharacterAnim
// 0x0060 (0x0060 - 0x0000)
struct FLobbyCustomizeCharacterAnim final
{
public:
	struct FSoftObjectPath                        CustomizeIdlePose;                                 // 0x0000(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        CustomizeHoverInPose;                              // 0x0018(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        CustomizeHoverIdlePose;                            // 0x0030(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        CustomizeHoverOutPose;                             // 0x0048(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyCustomizeCharacterAnim) == 0x000008, "Wrong alignment on FLobbyCustomizeCharacterAnim");
static_assert(sizeof(FLobbyCustomizeCharacterAnim) == 0x000060, "Wrong size on FLobbyCustomizeCharacterAnim");
static_assert(offsetof(FLobbyCustomizeCharacterAnim, CustomizeIdlePose) == 0x000000, "Member 'FLobbyCustomizeCharacterAnim::CustomizeIdlePose' has a wrong offset!");
static_assert(offsetof(FLobbyCustomizeCharacterAnim, CustomizeHoverInPose) == 0x000018, "Member 'FLobbyCustomizeCharacterAnim::CustomizeHoverInPose' has a wrong offset!");
static_assert(offsetof(FLobbyCustomizeCharacterAnim, CustomizeHoverIdlePose) == 0x000030, "Member 'FLobbyCustomizeCharacterAnim::CustomizeHoverIdlePose' has a wrong offset!");
static_assert(offsetof(FLobbyCustomizeCharacterAnim, CustomizeHoverOutPose) == 0x000048, "Member 'FLobbyCustomizeCharacterAnim::CustomizeHoverOutPose' has a wrong offset!");

// ScriptStruct TLClient.LobbyCameraSequence
// 0x0010 (0x0010 - 0x0000)
struct FLobbyCameraSequence final
{
public:
	ELobbySceneState                              From;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELobbySceneState                              To;                                                // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         TransitionSequence;                                // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyCameraSequence) == 0x000008, "Wrong alignment on FLobbyCameraSequence");
static_assert(sizeof(FLobbyCameraSequence) == 0x000010, "Wrong size on FLobbyCameraSequence");
static_assert(offsetof(FLobbyCameraSequence, From) == 0x000000, "Member 'FLobbyCameraSequence::From' has a wrong offset!");
static_assert(offsetof(FLobbyCameraSequence, To) == 0x000001, "Member 'FLobbyCameraSequence::To' has a wrong offset!");
static_assert(offsetof(FLobbyCameraSequence, TransitionSequence) == 0x000008, "Member 'FLobbyCameraSequence::TransitionSequence' has a wrong offset!");

// ScriptStruct TLClient.TLEquipData
// 0x000C (0x000C - 0x0000)
struct FTLEquipData final
{
public:
	EEquipCategory                                EquipCategory;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemId;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLEquipData) == 0x000004, "Wrong alignment on FTLEquipData");
static_assert(sizeof(FTLEquipData) == 0x00000C, "Wrong size on FTLEquipData");
static_assert(offsetof(FTLEquipData, EquipCategory) == 0x000000, "Member 'FTLEquipData::EquipCategory' has a wrong offset!");
static_assert(offsetof(FTLEquipData, ItemId) == 0x000004, "Member 'FTLEquipData::ItemId' has a wrong offset!");

// ScriptStruct TLClient.TLCharacterData
// 0x01C8 (0x01C8 - 0x0000)
struct FTLCharacterData final
{
public:
	bool                                          bDataInvalid;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ServerId;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealmID;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CharacterId;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PolymorphId;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLCharacterGender                            Gender;                                            // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAccountStatus                              AccountStatus;                                     // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GuildName;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UnionName;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBanned;                                         // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPendingDelete;                                    // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPendingGuildDissolution;                          // 0x005A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        RecentRegionId;                                    // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecentMapID;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildEmblemID;                                     // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildEmblemColor1;                                 // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildEmblemColor2;                                 // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RecentPosition;                                    // 0x0078(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTLEquipData>                   EquipDatas;                                        // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTLEquipData>                   SubEquipDatas;                                     // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x10];                                      // 0x00A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ServerName;                                        // 0x00B8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 RealmNameString;                                   // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LatestPlayDateTimeString;                          // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecentRegionString;                                // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeleteRemainTime;                                  // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeleteRemainTimeString;                            // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GuildDissolutionRemainTime;                        // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GuildDissolutionRemainTimeString;                  // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x98];                                     // 0x0130(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLCharacterData) == 0x000008, "Wrong alignment on FTLCharacterData");
static_assert(sizeof(FTLCharacterData) == 0x0001C8, "Wrong size on FTLCharacterData");
static_assert(offsetof(FTLCharacterData, bDataInvalid) == 0x000000, "Member 'FTLCharacterData::bDataInvalid' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, ServerId) == 0x000004, "Member 'FTLCharacterData::ServerId' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, RealmID) == 0x000008, "Member 'FTLCharacterData::RealmID' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, CharacterId) == 0x000010, "Member 'FTLCharacterData::CharacterId' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, Name) == 0x000018, "Member 'FTLCharacterData::Name' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, PolymorphId) == 0x000028, "Member 'FTLCharacterData::PolymorphId' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, Gender) == 0x00002C, "Member 'FTLCharacterData::Gender' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, Level) == 0x000030, "Member 'FTLCharacterData::Level' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, AccountStatus) == 0x000034, "Member 'FTLCharacterData::AccountStatus' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, GuildName) == 0x000038, "Member 'FTLCharacterData::GuildName' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, UnionName) == 0x000048, "Member 'FTLCharacterData::UnionName' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, bIsBanned) == 0x000058, "Member 'FTLCharacterData::bIsBanned' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, bPendingDelete) == 0x000059, "Member 'FTLCharacterData::bPendingDelete' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, bPendingGuildDissolution) == 0x00005A, "Member 'FTLCharacterData::bPendingGuildDissolution' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, RecentRegionId) == 0x000060, "Member 'FTLCharacterData::RecentRegionId' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, RecentMapID) == 0x000068, "Member 'FTLCharacterData::RecentMapID' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, GuildEmblemID) == 0x00006C, "Member 'FTLCharacterData::GuildEmblemID' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, GuildEmblemColor1) == 0x000070, "Member 'FTLCharacterData::GuildEmblemColor1' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, GuildEmblemColor2) == 0x000074, "Member 'FTLCharacterData::GuildEmblemColor2' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, RecentPosition) == 0x000078, "Member 'FTLCharacterData::RecentPosition' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, EquipDatas) == 0x000088, "Member 'FTLCharacterData::EquipDatas' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, SubEquipDatas) == 0x000098, "Member 'FTLCharacterData::SubEquipDatas' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, ServerName) == 0x0000B8, "Member 'FTLCharacterData::ServerName' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, RealmNameString) == 0x0000D0, "Member 'FTLCharacterData::RealmNameString' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, LatestPlayDateTimeString) == 0x0000E0, "Member 'FTLCharacterData::LatestPlayDateTimeString' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, RecentRegionString) == 0x0000F0, "Member 'FTLCharacterData::RecentRegionString' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, DeleteRemainTime) == 0x000100, "Member 'FTLCharacterData::DeleteRemainTime' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, DeleteRemainTimeString) == 0x000108, "Member 'FTLCharacterData::DeleteRemainTimeString' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, GuildDissolutionRemainTime) == 0x000118, "Member 'FTLCharacterData::GuildDissolutionRemainTime' has a wrong offset!");
static_assert(offsetof(FTLCharacterData, GuildDissolutionRemainTimeString) == 0x000120, "Member 'FTLCharacterData::GuildDissolutionRemainTimeString' has a wrong offset!");

// ScriptStruct TLClient.TLGameProfilingResolution
// 0x000C (0x000C - 0x0000)
struct FTLGameProfilingResolution final
{
public:
	int32                                         SizeX;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWindowMode                                   WindowMode;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLGameProfilingResolution) == 0x000004, "Wrong alignment on FTLGameProfilingResolution");
static_assert(sizeof(FTLGameProfilingResolution) == 0x00000C, "Wrong size on FTLGameProfilingResolution");
static_assert(offsetof(FTLGameProfilingResolution, SizeX) == 0x000000, "Member 'FTLGameProfilingResolution::SizeX' has a wrong offset!");
static_assert(offsetof(FTLGameProfilingResolution, SizeY) == 0x000004, "Member 'FTLGameProfilingResolution::SizeY' has a wrong offset!");
static_assert(offsetof(FTLGameProfilingResolution, WindowMode) == 0x000008, "Member 'FTLGameProfilingResolution::WindowMode' has a wrong offset!");

// ScriptStruct TLClient.TLGameProfilingQualitySettings
// 0x0018 (0x0018 - 0x0000)
struct FTLGameProfilingQualitySettings final
{
public:
	struct FTLGameProfilingResolution             Resolution;                                        // 0x0000(0x000C)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ScalabilityLevel;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameRateLimit;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationSettleDuration;                            // 0x0014(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLGameProfilingQualitySettings) == 0x000004, "Wrong alignment on FTLGameProfilingQualitySettings");
static_assert(sizeof(FTLGameProfilingQualitySettings) == 0x000018, "Wrong size on FTLGameProfilingQualitySettings");
static_assert(offsetof(FTLGameProfilingQualitySettings, Resolution) == 0x000000, "Member 'FTLGameProfilingQualitySettings::Resolution' has a wrong offset!");
static_assert(offsetof(FTLGameProfilingQualitySettings, ScalabilityLevel) == 0x00000C, "Member 'FTLGameProfilingQualitySettings::ScalabilityLevel' has a wrong offset!");
static_assert(offsetof(FTLGameProfilingQualitySettings, FrameRateLimit) == 0x000010, "Member 'FTLGameProfilingQualitySettings::FrameRateLimit' has a wrong offset!");
static_assert(offsetof(FTLGameProfilingQualitySettings, LocationSettleDuration) == 0x000014, "Member 'FTLGameProfilingQualitySettings::LocationSettleDuration' has a wrong offset!");

// ScriptStruct TLClient.TLGrowthPendingData
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FTLGrowthPendingData final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bSuccess;                                          // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGrowthByExpPoint;                                 // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x3A];                                      // 0x0016(0x003A)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLGrowthPendingData) == 0x000008, "Wrong alignment on FTLGrowthPendingData");
static_assert(sizeof(FTLGrowthPendingData) == 0x000050, "Wrong size on FTLGrowthPendingData");
static_assert(offsetof(FTLGrowthPendingData, bSuccess) == 0x000014, "Member 'FTLGrowthPendingData::bSuccess' has a wrong offset!");
static_assert(offsetof(FTLGrowthPendingData, bGrowthByExpPoint) == 0x000015, "Member 'FTLGrowthPendingData::bGrowthByExpPoint' has a wrong offset!");

// ScriptStruct TLClient.TLHudComponentUICondition
// 0x0018 (0x0018 - 0x0000)
struct FTLHudComponentUICondition final
{
public:
	ETLHudComponentUIType                         UIType;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Condition1NotFlag;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Condition1AnyFlag;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Condition2AnyFlag;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Condition3AnyFlag;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConditionSatisfied;                               // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLHudComponentUICondition) == 0x000004, "Wrong alignment on FTLHudComponentUICondition");
static_assert(sizeof(FTLHudComponentUICondition) == 0x000018, "Wrong size on FTLHudComponentUICondition");
static_assert(offsetof(FTLHudComponentUICondition, UIType) == 0x000000, "Member 'FTLHudComponentUICondition::UIType' has a wrong offset!");
static_assert(offsetof(FTLHudComponentUICondition, Condition1NotFlag) == 0x000004, "Member 'FTLHudComponentUICondition::Condition1NotFlag' has a wrong offset!");
static_assert(offsetof(FTLHudComponentUICondition, Condition1AnyFlag) == 0x000008, "Member 'FTLHudComponentUICondition::Condition1AnyFlag' has a wrong offset!");
static_assert(offsetof(FTLHudComponentUICondition, Condition2AnyFlag) == 0x00000C, "Member 'FTLHudComponentUICondition::Condition2AnyFlag' has a wrong offset!");
static_assert(offsetof(FTLHudComponentUICondition, Condition3AnyFlag) == 0x000010, "Member 'FTLHudComponentUICondition::Condition3AnyFlag' has a wrong offset!");
static_assert(offsetof(FTLHudComponentUICondition, bConditionSatisfied) == 0x000014, "Member 'FTLHudComponentUICondition::bConditionSatisfied' has a wrong offset!");

// ScriptStruct TLClient.TLItemCollectionPreviousPanelInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FTLItemCollectionPreviousPanelInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLItemCollectionPreviousPanelInfo) == 0x000004, "Wrong alignment on FTLItemCollectionPreviousPanelInfo");
static_assert(sizeof(FTLItemCollectionPreviousPanelInfo) == 0x000010, "Wrong size on FTLItemCollectionPreviousPanelInfo");

// ScriptStruct TLClient.TLItemCollectionItemViewInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FTLItemCollectionItemViewInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLItemCollectionItemViewInfo) == 0x000004, "Wrong alignment on FTLItemCollectionItemViewInfo");
static_assert(sizeof(FTLItemCollectionItemViewInfo) == 0x000008, "Wrong size on FTLItemCollectionItemViewInfo");

// ScriptStruct TLClient.TLItemRubbingResultItemInfo
// 0x00E0 (0x00E0 - 0x0000)
struct alignas(0x08) FTLItemRubbingResultItemInfo final
{
public:
	uint8                                         Pad_0[0xE0];                                       // 0x0000(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLItemRubbingResultItemInfo) == 0x000008, "Wrong alignment on FTLItemRubbingResultItemInfo");
static_assert(sizeof(FTLItemRubbingResultItemInfo) == 0x0000E0, "Wrong size on FTLItemRubbingResultItemInfo");

// ScriptStruct TLClient.TLItemRubbingMaterialItemInfo
// 0x00E8 (0x00E8 - 0x0000)
struct alignas(0x08) FTLItemRubbingMaterialItemInfo final
{
public:
	uint8                                         Pad_0[0xE8];                                       // 0x0000(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLItemRubbingMaterialItemInfo) == 0x000008, "Wrong alignment on FTLItemRubbingMaterialItemInfo");
static_assert(sizeof(FTLItemRubbingMaterialItemInfo) == 0x0000E8, "Wrong size on FTLItemRubbingMaterialItemInfo");

// ScriptStruct TLClient.TLItemSlotViewDragOverSideImage
// 0x0020 (0x0020 - 0x0000)
struct FTLItemSlotViewDragOverSideImage final
{
public:
	class UTLImage*                               HoverLineImage;                                    // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTLImage*                               RightSideIndexImage;                               // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTLImage*                               LeftSideIndexImage;                                // 0x0010(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLItemSlotViewDragOverSideImage) == 0x000008, "Wrong alignment on FTLItemSlotViewDragOverSideImage");
static_assert(sizeof(FTLItemSlotViewDragOverSideImage) == 0x000020, "Wrong size on FTLItemSlotViewDragOverSideImage");
static_assert(offsetof(FTLItemSlotViewDragOverSideImage, HoverLineImage) == 0x000000, "Member 'FTLItemSlotViewDragOverSideImage::HoverLineImage' has a wrong offset!");
static_assert(offsetof(FTLItemSlotViewDragOverSideImage, RightSideIndexImage) == 0x000008, "Member 'FTLItemSlotViewDragOverSideImage::RightSideIndexImage' has a wrong offset!");
static_assert(offsetof(FTLItemSlotViewDragOverSideImage, LeftSideIndexImage) == 0x000010, "Member 'FTLItemSlotViewDragOverSideImage::LeftSideIndexImage' has a wrong offset!");

// ScriptStruct TLClient.LookAtMouseCursorByAngle
// 0x0010 (0x0010 - 0x0000)
struct FLookAtMouseCursorByAngle final
{
public:
	class UCurveFloat*                            AngleCurve;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtMouseCursorPositionToCamera;                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLookAtMouseCursorByAngle) == 0x000008, "Wrong alignment on FLookAtMouseCursorByAngle");
static_assert(sizeof(FLookAtMouseCursorByAngle) == 0x000010, "Wrong size on FLookAtMouseCursorByAngle");
static_assert(offsetof(FLookAtMouseCursorByAngle, AngleCurve) == 0x000000, "Member 'FLookAtMouseCursorByAngle::AngleCurve' has a wrong offset!");
static_assert(offsetof(FLookAtMouseCursorByAngle, LookAtMouseCursorPositionToCamera) == 0x000008, "Member 'FLookAtMouseCursorByAngle::LookAtMouseCursorPositionToCamera' has a wrong offset!");

// ScriptStruct TLClient.SceneContiByAngle
// 0x0028 (0x0028 - 0x0000)
struct FSceneContiByAngle final
{
public:
	TArray<class UCurveFloat*>                    AngleCurvesByZoomLevel;                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SceneConti;                                        // 0x0010(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSceneContiByAngle) == 0x000008, "Wrong alignment on FSceneContiByAngle");
static_assert(sizeof(FSceneContiByAngle) == 0x000028, "Wrong size on FSceneContiByAngle");
static_assert(offsetof(FSceneContiByAngle, AngleCurvesByZoomLevel) == 0x000000, "Member 'FSceneContiByAngle::AngleCurvesByZoomLevel' has a wrong offset!");
static_assert(offsetof(FSceneContiByAngle, SceneConti) == 0x000010, "Member 'FSceneContiByAngle::SceneConti' has a wrong offset!");

// ScriptStruct TLClient.TLMapIconCreateParameter
// 0x00A8 (0x00A8 - 0x0000)
struct alignas(0x08) FTLMapIconCreateParameter final
{
public:
	uint8                                         Pad_0[0xA8];                                       // 0x0000(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLMapIconCreateParameter) == 0x000008, "Wrong alignment on FTLMapIconCreateParameter");
static_assert(sizeof(FTLMapIconCreateParameter) == 0x0000A8, "Wrong size on FTLMapIconCreateParameter");

// ScriptStruct TLClient.TLSiegeWarfareStatus
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FTLSiegeWarfareStatus final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLSiegeWarfareStatus) == 0x000008, "Wrong alignment on FTLSiegeWarfareStatus");
static_assert(sizeof(FTLSiegeWarfareStatus) == 0x000018, "Wrong size on FTLSiegeWarfareStatus");

// ScriptStruct TLClient.TLMyPcFXContentImportancePolicyRow
// 0x0005 (0x0005 - 0x0000)
struct FTLMyPcFXContentImportancePolicyRow final
{
public:
	ESnEffectContentImportance                    MyPc;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnEffectContentImportance                    PartyMember;                                       // 0x0001(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnEffectContentImportance                    Target;                                            // 0x0002(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnEffectContentImportance                    Boss;                                              // 0x0003(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnEffectContentImportance                    Etc;                                               // 0x0004(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLMyPcFXContentImportancePolicyRow) == 0x000001, "Wrong alignment on FTLMyPcFXContentImportancePolicyRow");
static_assert(sizeof(FTLMyPcFXContentImportancePolicyRow) == 0x000005, "Wrong size on FTLMyPcFXContentImportancePolicyRow");
static_assert(offsetof(FTLMyPcFXContentImportancePolicyRow, MyPc) == 0x000000, "Member 'FTLMyPcFXContentImportancePolicyRow::MyPc' has a wrong offset!");
static_assert(offsetof(FTLMyPcFXContentImportancePolicyRow, PartyMember) == 0x000001, "Member 'FTLMyPcFXContentImportancePolicyRow::PartyMember' has a wrong offset!");
static_assert(offsetof(FTLMyPcFXContentImportancePolicyRow, Target) == 0x000002, "Member 'FTLMyPcFXContentImportancePolicyRow::Target' has a wrong offset!");
static_assert(offsetof(FTLMyPcFXContentImportancePolicyRow, Boss) == 0x000003, "Member 'FTLMyPcFXContentImportancePolicyRow::Boss' has a wrong offset!");
static_assert(offsetof(FTLMyPcFXContentImportancePolicyRow, Etc) == 0x000004, "Member 'FTLMyPcFXContentImportancePolicyRow::Etc' has a wrong offset!");

// ScriptStruct TLClient.TLPcRelationshipMemberInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FTLPcRelationshipMemberInfo final
{
public:
	int64                                         PcId;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterName;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         GuildId;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildName;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ServerId;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealmID;                                           // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ServerName;                                        // 0x0050(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ERelationConnectionState                      ConnectionState;                                   // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LogoutTime;                                        // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         LocationGuid;                                      // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedTime;                                       // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpirationTime;                                    // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Memo;                                              // 0x0090(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ETLPcRelationshipType                         PcRelationType;                                    // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextGender                                   Gender;                                            // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLPcRelationshipMemberInfo) == 0x000008, "Wrong alignment on FTLPcRelationshipMemberInfo");
static_assert(sizeof(FTLPcRelationshipMemberInfo) == 0x0000B0, "Wrong size on FTLPcRelationshipMemberInfo");
static_assert(offsetof(FTLPcRelationshipMemberInfo, PcId) == 0x000000, "Member 'FTLPcRelationshipMemberInfo::PcId' has a wrong offset!");
static_assert(offsetof(FTLPcRelationshipMemberInfo, CharacterName) == 0x000008, "Member 'FTLPcRelationshipMemberInfo::CharacterName' has a wrong offset!");
static_assert(offsetof(FTLPcRelationshipMemberInfo, GuildId) == 0x000018, "Member 'FTLPcRelationshipMemberInfo::GuildId' has a wrong offset!");
static_assert(offsetof(FTLPcRelationshipMemberInfo, GuildName) == 0x000020, "Member 'FTLPcRelationshipMemberInfo::GuildName' has a wrong offset!");
static_assert(offsetof(FTLPcRelationshipMemberInfo, ServerId) == 0x000048, "Member 'FTLPcRelationshipMemberInfo::ServerId' has a wrong offset!");
static_assert(offsetof(FTLPcRelationshipMemberInfo, RealmID) == 0x00004C, "Member 'FTLPcRelationshipMemberInfo::RealmID' has a wrong offset!");
static_assert(offsetof(FTLPcRelationshipMemberInfo, ServerName) == 0x000050, "Member 'FTLPcRelationshipMemberInfo::ServerName' has a wrong offset!");
static_assert(offsetof(FTLPcRelationshipMemberInfo, ConnectionState) == 0x000068, "Member 'FTLPcRelationshipMemberInfo::ConnectionState' has a wrong offset!");
static_assert(offsetof(FTLPcRelationshipMemberInfo, LogoutTime) == 0x000070, "Member 'FTLPcRelationshipMemberInfo::LogoutTime' has a wrong offset!");
static_assert(offsetof(FTLPcRelationshipMemberInfo, LocationGuid) == 0x000078, "Member 'FTLPcRelationshipMemberInfo::LocationGuid' has a wrong offset!");
static_assert(offsetof(FTLPcRelationshipMemberInfo, CreatedTime) == 0x000080, "Member 'FTLPcRelationshipMemberInfo::CreatedTime' has a wrong offset!");
static_assert(offsetof(FTLPcRelationshipMemberInfo, ExpirationTime) == 0x000088, "Member 'FTLPcRelationshipMemberInfo::ExpirationTime' has a wrong offset!");
static_assert(offsetof(FTLPcRelationshipMemberInfo, Memo) == 0x000090, "Member 'FTLPcRelationshipMemberInfo::Memo' has a wrong offset!");
static_assert(offsetof(FTLPcRelationshipMemberInfo, PcRelationType) == 0x0000A8, "Member 'FTLPcRelationshipMemberInfo::PcRelationType' has a wrong offset!");
static_assert(offsetof(FTLPcRelationshipMemberInfo, Gender) == 0x0000A9, "Member 'FTLPcRelationshipMemberInfo::Gender' has a wrong offset!");

// ScriptStruct TLClient.PhotoEffectData
// 0x05B0 (0x05B0 - 0x0000)
struct FPhotoEffectData final
{
public:
	class FText                                   ThumbnailText;                                     // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ThumbnailTexturePath;                              // 0x0018(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     PostProcessMat;                                    // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   PostProcessSetting;                                // 0x0040(0x0570)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhotoEffectData) == 0x000010, "Wrong alignment on FPhotoEffectData");
static_assert(sizeof(FPhotoEffectData) == 0x0005B0, "Wrong size on FPhotoEffectData");
static_assert(offsetof(FPhotoEffectData, ThumbnailText) == 0x000000, "Member 'FPhotoEffectData::ThumbnailText' has a wrong offset!");
static_assert(offsetof(FPhotoEffectData, ThumbnailTexturePath) == 0x000018, "Member 'FPhotoEffectData::ThumbnailTexturePath' has a wrong offset!");
static_assert(offsetof(FPhotoEffectData, PostProcessMat) == 0x000030, "Member 'FPhotoEffectData::PostProcessMat' has a wrong offset!");
static_assert(offsetof(FPhotoEffectData, PostProcessSetting) == 0x000040, "Member 'FPhotoEffectData::PostProcessSetting' has a wrong offset!");

// ScriptStruct TLClient.PhotoFilterData
// 0x0038 (0x0038 - 0x0000)
struct FPhotoFilterData final
{
public:
	class FText                                   ThumbnailText;                                     // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ThumbnailTexturePath;                              // 0x0018(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               ColorGradingLUT;                                   // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhotoFilterData) == 0x000008, "Wrong alignment on FPhotoFilterData");
static_assert(sizeof(FPhotoFilterData) == 0x000038, "Wrong size on FPhotoFilterData");
static_assert(offsetof(FPhotoFilterData, ThumbnailText) == 0x000000, "Member 'FPhotoFilterData::ThumbnailText' has a wrong offset!");
static_assert(offsetof(FPhotoFilterData, ThumbnailTexturePath) == 0x000018, "Member 'FPhotoFilterData::ThumbnailTexturePath' has a wrong offset!");
static_assert(offsetof(FPhotoFilterData, ColorGradingLUT) == 0x000030, "Member 'FPhotoFilterData::ColorGradingLUT' has a wrong offset!");

// ScriptStruct TLClient.TLWildCollectionData
// 0x01A0 (0x01A0 - 0x0000)
struct alignas(0x08) FTLWildCollectionData final
{
public:
	uint8                                         Pad_0[0x1A0];                                      // 0x0000(0x01A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLWildCollectionData) == 0x000008, "Wrong alignment on FTLWildCollectionData");
static_assert(sizeof(FTLWildCollectionData) == 0x0001A0, "Wrong size on FTLWildCollectionData");

// ScriptStruct TLClient.TLCombatCollectionData
// 0x0170 (0x0170 - 0x0000)
struct alignas(0x08) FTLCombatCollectionData final
{
public:
	uint8                                         Pad_0[0x170];                                      // 0x0000(0x0170)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLCombatCollectionData) == 0x000008, "Wrong alignment on FTLCombatCollectionData");
static_assert(sizeof(FTLCombatCollectionData) == 0x000170, "Wrong size on FTLCombatCollectionData");

// ScriptStruct TLClient.TLSavedPlaceInfo
// 0x0038 (0x0038 - 0x0000)
struct FTLSavedPlaceInfo final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         MapUid;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstTimeCreatedEvent;                            // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLSavedPlaceInfo) == 0x000008, "Wrong alignment on FTLSavedPlaceInfo");
static_assert(sizeof(FTLSavedPlaceInfo) == 0x000038, "Wrong size on FTLSavedPlaceInfo");
static_assert(offsetof(FTLSavedPlaceInfo, ID) == 0x000000, "Member 'FTLSavedPlaceInfo::ID' has a wrong offset!");
static_assert(offsetof(FTLSavedPlaceInfo, Name) == 0x000008, "Member 'FTLSavedPlaceInfo::Name' has a wrong offset!");
static_assert(offsetof(FTLSavedPlaceInfo, MapUid) == 0x000020, "Member 'FTLSavedPlaceInfo::MapUid' has a wrong offset!");
static_assert(offsetof(FTLSavedPlaceInfo, Position) == 0x000024, "Member 'FTLSavedPlaceInfo::Position' has a wrong offset!");
static_assert(offsetof(FTLSavedPlaceInfo, bFirstTimeCreatedEvent) == 0x000030, "Member 'FTLSavedPlaceInfo::bFirstTimeCreatedEvent' has a wrong offset!");

// ScriptStruct TLClient.TLShopBatchBuyItemInfo
// 0x0010 (0x0010 - 0x0000)
struct FTLShopBatchBuyItemInfo final
{
public:
	int32                                         ShopId;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemTableId;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseCount;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsChecked;                                        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLShopBatchBuyItemInfo) == 0x000004, "Wrong alignment on FTLShopBatchBuyItemInfo");
static_assert(sizeof(FTLShopBatchBuyItemInfo) == 0x000010, "Wrong size on FTLShopBatchBuyItemInfo");
static_assert(offsetof(FTLShopBatchBuyItemInfo, ShopId) == 0x000000, "Member 'FTLShopBatchBuyItemInfo::ShopId' has a wrong offset!");
static_assert(offsetof(FTLShopBatchBuyItemInfo, ItemTableId) == 0x000004, "Member 'FTLShopBatchBuyItemInfo::ItemTableId' has a wrong offset!");
static_assert(offsetof(FTLShopBatchBuyItemInfo, PurchaseCount) == 0x000008, "Member 'FTLShopBatchBuyItemInfo::PurchaseCount' has a wrong offset!");
static_assert(offsetof(FTLShopBatchBuyItemInfo, bIsChecked) == 0x00000C, "Member 'FTLShopBatchBuyItemInfo::bIsChecked' has a wrong offset!");

// ScriptStruct TLClient.TLShopBatchSellOption
// 0x0028 (0x0028 - 0x0000)
struct FTLShopBatchSellOption final
{
public:
	TArray<ETLItemGroupFilter>                    GroupFilters;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EItemGrade>                            GradeFilters;                                      // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bExceptTradable;                                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExceptEnchanted;                                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExceptCollectionRegisterable;                     // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLShopBatchSellOption) == 0x000008, "Wrong alignment on FTLShopBatchSellOption");
static_assert(sizeof(FTLShopBatchSellOption) == 0x000028, "Wrong size on FTLShopBatchSellOption");
static_assert(offsetof(FTLShopBatchSellOption, GroupFilters) == 0x000000, "Member 'FTLShopBatchSellOption::GroupFilters' has a wrong offset!");
static_assert(offsetof(FTLShopBatchSellOption, GradeFilters) == 0x000010, "Member 'FTLShopBatchSellOption::GradeFilters' has a wrong offset!");
static_assert(offsetof(FTLShopBatchSellOption, bExceptTradable) == 0x000020, "Member 'FTLShopBatchSellOption::bExceptTradable' has a wrong offset!");
static_assert(offsetof(FTLShopBatchSellOption, bExceptEnchanted) == 0x000021, "Member 'FTLShopBatchSellOption::bExceptEnchanted' has a wrong offset!");
static_assert(offsetof(FTLShopBatchSellOption, bExceptCollectionRegisterable) == 0x000022, "Member 'FTLShopBatchSellOption::bExceptCollectionRegisterable' has a wrong offset!");

// ScriptStruct TLClient.TLShopCurrencyItemData
// 0x0010 (0x0010 - 0x0000)
struct FTLShopCurrencyItemData final
{
public:
	int32                                         ClassId;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Amount;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLShopCurrencyItemData) == 0x000008, "Wrong alignment on FTLShopCurrencyItemData");
static_assert(sizeof(FTLShopCurrencyItemData) == 0x000010, "Wrong size on FTLShopCurrencyItemData");
static_assert(offsetof(FTLShopCurrencyItemData, ClassId) == 0x000000, "Member 'FTLShopCurrencyItemData::ClassId' has a wrong offset!");
static_assert(offsetof(FTLShopCurrencyItemData, Amount) == 0x000008, "Member 'FTLShopCurrencyItemData::Amount' has a wrong offset!");

// ScriptStruct TLClient.TLSkillSetSkillObjects
// 0x0010 (0x0010 - 0x0000)
struct FTLSkillSetSkillObjects final
{
public:
	TArray<class UTLSkillSetSkillObject*>         Objects;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLSkillSetSkillObjects) == 0x000008, "Wrong alignment on FTLSkillSetSkillObjects");
static_assert(sizeof(FTLSkillSetSkillObjects) == 0x000010, "Wrong size on FTLSkillSetSkillObjects");
static_assert(offsetof(FTLSkillSetSkillObjects, Objects) == 0x000000, "Member 'FTLSkillSetSkillObjects::Objects' has a wrong offset!");

// ScriptStruct TLClient.TLWeaponCategorySkillObjects
// 0x0090 (0x0090 - 0x0000)
struct FTLWeaponCategorySkillObjects final
{
public:
	TMap<int32, class UTLSkillSetSkillObject*>    SkillSetSkillObjectMap;                            // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	class UTLSkillSetSkillObject*                 DefenseActionSkillObject;                          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTLSkillSetSkillObject*>         ActiveSkillObjects;                                // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UTLSkillSetSkillObject*>         ActiveOmnipotenceSkillObjects;                     // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UTLSkillSetSkillObject*>         PassiveSkillObjects;                               // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLWeaponCategorySkillObjects) == 0x000008, "Wrong alignment on FTLWeaponCategorySkillObjects");
static_assert(sizeof(FTLWeaponCategorySkillObjects) == 0x000090, "Wrong size on FTLWeaponCategorySkillObjects");
static_assert(offsetof(FTLWeaponCategorySkillObjects, SkillSetSkillObjectMap) == 0x000000, "Member 'FTLWeaponCategorySkillObjects::SkillSetSkillObjectMap' has a wrong offset!");
static_assert(offsetof(FTLWeaponCategorySkillObjects, DefenseActionSkillObject) == 0x000050, "Member 'FTLWeaponCategorySkillObjects::DefenseActionSkillObject' has a wrong offset!");
static_assert(offsetof(FTLWeaponCategorySkillObjects, ActiveSkillObjects) == 0x000058, "Member 'FTLWeaponCategorySkillObjects::ActiveSkillObjects' has a wrong offset!");
static_assert(offsetof(FTLWeaponCategorySkillObjects, ActiveOmnipotenceSkillObjects) == 0x000068, "Member 'FTLWeaponCategorySkillObjects::ActiveOmnipotenceSkillObjects' has a wrong offset!");
static_assert(offsetof(FTLWeaponCategorySkillObjects, PassiveSkillObjects) == 0x000078, "Member 'FTLWeaponCategorySkillObjects::PassiveSkillObjects' has a wrong offset!");

// ScriptStruct TLClient.TLSoundSnapshotSetting
// 0x000C (0x000C - 0x0000)
struct FTLSoundSnapshotSetting final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLSoundSnapshotType                          Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          Priority;                                          // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLSoundSnapshotSetting) == 0x000004, "Wrong alignment on FTLSoundSnapshotSetting");
static_assert(sizeof(FTLSoundSnapshotSetting) == 0x00000C, "Wrong size on FTLSoundSnapshotSetting");
static_assert(offsetof(FTLSoundSnapshotSetting, Name) == 0x000000, "Member 'FTLSoundSnapshotSetting::Name' has a wrong offset!");
static_assert(offsetof(FTLSoundSnapshotSetting, Type) == 0x000008, "Member 'FTLSoundSnapshotSetting::Type' has a wrong offset!");
static_assert(offsetof(FTLSoundSnapshotSetting, Priority) == 0x000009, "Member 'FTLSoundSnapshotSetting::Priority' has a wrong offset!");

// ScriptStruct TLClient.TLObjectWorldTutorialBindingData
// 0x0018 (0x0018 - 0x0000)
struct FTLObjectWorldTutorialBindingData final
{
public:
	class UTLObjectWorldProxy*                    ObjProxy;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BindingObjectIDs;                                  // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLObjectWorldTutorialBindingData) == 0x000008, "Wrong alignment on FTLObjectWorldTutorialBindingData");
static_assert(sizeof(FTLObjectWorldTutorialBindingData) == 0x000018, "Wrong size on FTLObjectWorldTutorialBindingData");
static_assert(offsetof(FTLObjectWorldTutorialBindingData, ObjProxy) == 0x000000, "Member 'FTLObjectWorldTutorialBindingData::ObjProxy' has a wrong offset!");
static_assert(offsetof(FTLObjectWorldTutorialBindingData, BindingObjectIDs) == 0x000008, "Member 'FTLObjectWorldTutorialBindingData::BindingObjectIDs' has a wrong offset!");

// ScriptStruct TLClient.TLUIAssetBinder
// 0x0030 (0x0030 - 0x0000)
struct FTLUIAssetBinder final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        Assets;                                            // 0x0020(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTLUIAssetBinder) == 0x000008, "Wrong alignment on FTLUIAssetBinder");
static_assert(sizeof(FTLUIAssetBinder) == 0x000030, "Wrong size on FTLUIAssetBinder");
static_assert(offsetof(FTLUIAssetBinder, Assets) == 0x000020, "Member 'FTLUIAssetBinder::Assets' has a wrong offset!");

// ScriptStruct TLClient.TLWidgetClassInfo
// 0x0010 (0x0010 - 0x0000)
struct FTLWidgetClassInfo final
{
public:
	class FName                                   NameKey;                                           // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTLWidgetClassInfo) == 0x000008, "Wrong alignment on FTLWidgetClassInfo");
static_assert(sizeof(FTLWidgetClassInfo) == 0x000010, "Wrong size on FTLWidgetClassInfo");
static_assert(offsetof(FTLWidgetClassInfo, NameKey) == 0x000000, "Member 'FTLWidgetClassInfo::NameKey' has a wrong offset!");
static_assert(offsetof(FTLWidgetClassInfo, WidgetClass) == 0x000008, "Member 'FTLWidgetClassInfo::WidgetClass' has a wrong offset!");

// ScriptStruct TLClient.TLWidgetSizeData
// 0x0010 (0x0010 - 0x0000)
struct FTLWidgetSizeData final
{
public:
	class FName                                   WidgetKey;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WidgetSize;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLWidgetSizeData) == 0x000004, "Wrong alignment on FTLWidgetSizeData");
static_assert(sizeof(FTLWidgetSizeData) == 0x000010, "Wrong size on FTLWidgetSizeData");
static_assert(offsetof(FTLWidgetSizeData, WidgetKey) == 0x000000, "Member 'FTLWidgetSizeData::WidgetKey' has a wrong offset!");
static_assert(offsetof(FTLWidgetSizeData, WidgetSize) == 0x000008, "Member 'FTLWidgetSizeData::WidgetSize' has a wrong offset!");

// ScriptStruct TLClient.TLWidgetPosData
// 0x0010 (0x0010 - 0x0000)
struct FTLWidgetPosData final
{
public:
	class FName                                   WidgetKey;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WidgetPos;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLWidgetPosData) == 0x000004, "Wrong alignment on FTLWidgetPosData");
static_assert(sizeof(FTLWidgetPosData) == 0x000010, "Wrong size on FTLWidgetPosData");
static_assert(offsetof(FTLWidgetPosData, WidgetKey) == 0x000000, "Member 'FTLWidgetPosData::WidgetKey' has a wrong offset!");
static_assert(offsetof(FTLWidgetPosData, WidgetPos) == 0x000008, "Member 'FTLWidgetPosData::WidgetPos' has a wrong offset!");

// ScriptStruct TLClient.LoadingScreenParameter
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FLoadingScreenParameter final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLoadingScreenParameter) == 0x000008, "Wrong alignment on FLoadingScreenParameter");
static_assert(sizeof(FLoadingScreenParameter) == 0x000018, "Wrong size on FLoadingScreenParameter");

// ScriptStruct TLClient.TLArenaBattleStatusTeamPanel
// 0x0020 (0x0020 - 0x0000)
struct FTLArenaBattleStatusTeamPanel final
{
public:
	TSubclassOf<class UTLUserWidgetArenaBattleMemberSlot> SlotClass;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLVerticalBox*                         Panel;                                             // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLGridPanel*                           MyTeamIndicator;                                   // 0x0010(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLTextBlock*                           TeamName;                                          // 0x0018(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLArenaBattleStatusTeamPanel) == 0x000008, "Wrong alignment on FTLArenaBattleStatusTeamPanel");
static_assert(sizeof(FTLArenaBattleStatusTeamPanel) == 0x000020, "Wrong size on FTLArenaBattleStatusTeamPanel");
static_assert(offsetof(FTLArenaBattleStatusTeamPanel, SlotClass) == 0x000000, "Member 'FTLArenaBattleStatusTeamPanel::SlotClass' has a wrong offset!");
static_assert(offsetof(FTLArenaBattleStatusTeamPanel, Panel) == 0x000008, "Member 'FTLArenaBattleStatusTeamPanel::Panel' has a wrong offset!");
static_assert(offsetof(FTLArenaBattleStatusTeamPanel, MyTeamIndicator) == 0x000010, "Member 'FTLArenaBattleStatusTeamPanel::MyTeamIndicator' has a wrong offset!");
static_assert(offsetof(FTLArenaBattleStatusTeamPanel, TeamName) == 0x000018, "Member 'FTLArenaBattleStatusTeamPanel::TeamName' has a wrong offset!");

// ScriptStruct TLClient.ArenaBattleStatusBar
// 0x0050 (0x0050 - 0x0000)
struct FArenaBattleStatusBar final
{
public:
	class UTLTextBlock*                           TeamNameText;                                      // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLTextBlock*                           ScoreText;                                         // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLProgressBar*                         ScoreBar;                                          // 0x0010(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLTextBlock*                           EEText;                                            // 0x0018(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLProgressBar*                         ExpectedScoreBar;                                  // 0x0020(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLImage*                               MyTeamIndicator;                                   // 0x0028(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLUserWidgetArenaScoreEffectWidget*    AddedScoreWidget;                                  // 0x0030(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLUserWidgetArenaScoreEffectWidget*    KillScoreWidget;                                   // 0x0038(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTLUserWidgetArenaCalledGameScoreIcon*> CalledGameScoreIcons;                              // 0x0040(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArenaBattleStatusBar) == 0x000008, "Wrong alignment on FArenaBattleStatusBar");
static_assert(sizeof(FArenaBattleStatusBar) == 0x000050, "Wrong size on FArenaBattleStatusBar");
static_assert(offsetof(FArenaBattleStatusBar, TeamNameText) == 0x000000, "Member 'FArenaBattleStatusBar::TeamNameText' has a wrong offset!");
static_assert(offsetof(FArenaBattleStatusBar, ScoreText) == 0x000008, "Member 'FArenaBattleStatusBar::ScoreText' has a wrong offset!");
static_assert(offsetof(FArenaBattleStatusBar, ScoreBar) == 0x000010, "Member 'FArenaBattleStatusBar::ScoreBar' has a wrong offset!");
static_assert(offsetof(FArenaBattleStatusBar, EEText) == 0x000018, "Member 'FArenaBattleStatusBar::EEText' has a wrong offset!");
static_assert(offsetof(FArenaBattleStatusBar, ExpectedScoreBar) == 0x000020, "Member 'FArenaBattleStatusBar::ExpectedScoreBar' has a wrong offset!");
static_assert(offsetof(FArenaBattleStatusBar, MyTeamIndicator) == 0x000028, "Member 'FArenaBattleStatusBar::MyTeamIndicator' has a wrong offset!");
static_assert(offsetof(FArenaBattleStatusBar, AddedScoreWidget) == 0x000030, "Member 'FArenaBattleStatusBar::AddedScoreWidget' has a wrong offset!");
static_assert(offsetof(FArenaBattleStatusBar, KillScoreWidget) == 0x000038, "Member 'FArenaBattleStatusBar::KillScoreWidget' has a wrong offset!");
static_assert(offsetof(FArenaBattleStatusBar, CalledGameScoreIcons) == 0x000040, "Member 'FArenaBattleStatusBar::CalledGameScoreIcons' has a wrong offset!");

// ScriptStruct TLClient.TLArenaRecordTeamComponent
// 0x0020 (0x0020 - 0x0000)
struct FTLArenaRecordTeamComponent final
{
public:
	TSubclassOf<class UTLUserWidgetArenaMatchUserRecord> ItemClass;                                         // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLTextBlock*                           ScoreText;                                         // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLVerticalBox*                         MemberList;                                        // 0x0010(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLTextBlock*                           TeamName;                                          // 0x0018(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLArenaRecordTeamComponent) == 0x000008, "Wrong alignment on FTLArenaRecordTeamComponent");
static_assert(sizeof(FTLArenaRecordTeamComponent) == 0x000020, "Wrong size on FTLArenaRecordTeamComponent");
static_assert(offsetof(FTLArenaRecordTeamComponent, ItemClass) == 0x000000, "Member 'FTLArenaRecordTeamComponent::ItemClass' has a wrong offset!");
static_assert(offsetof(FTLArenaRecordTeamComponent, ScoreText) == 0x000008, "Member 'FTLArenaRecordTeamComponent::ScoreText' has a wrong offset!");
static_assert(offsetof(FTLArenaRecordTeamComponent, MemberList) == 0x000010, "Member 'FTLArenaRecordTeamComponent::MemberList' has a wrong offset!");
static_assert(offsetof(FTLArenaRecordTeamComponent, TeamName) == 0x000018, "Member 'FTLArenaRecordTeamComponent::TeamName' has a wrong offset!");

// ScriptStruct TLClient.TLWidgetBattleCollectionSummaryParam
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FTLWidgetBattleCollectionSummaryParam
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLWidgetBattleCollectionSummaryParam) == 0x000008, "Wrong alignment on FTLWidgetBattleCollectionSummaryParam");
static_assert(sizeof(FTLWidgetBattleCollectionSummaryParam) == 0x000020, "Wrong size on FTLWidgetBattleCollectionSummaryParam");

// ScriptStruct TLClient.TLWidgetRewardData
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FTLWidgetRewardData final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLWidgetRewardData) == 0x000008, "Wrong alignment on FTLWidgetRewardData");
static_assert(sizeof(FTLWidgetRewardData) == 0x000048, "Wrong size on FTLWidgetRewardData");

// ScriptStruct TLClient.TLWidgetRewardStatData
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FTLWidgetRewardStatData final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLWidgetRewardStatData) == 0x000008, "Wrong alignment on FTLWidgetRewardStatData");
static_assert(sizeof(FTLWidgetRewardStatData) == 0x000060, "Wrong size on FTLWidgetRewardStatData");

// ScriptStruct TLClient.WidgetBindingTest
// 0x0020 (0x0020 - 0x0000)
struct FWidgetBindingTest final
{
public:
	FMulticastInlineDelegateProperty_             UpdateAllDelegate;                                 // 0x0000(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	float                                         HpPercent;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HpPercentDelegate;                                 // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWidgetBindingTest) == 0x000008, "Wrong alignment on FWidgetBindingTest");
static_assert(sizeof(FWidgetBindingTest) == 0x000020, "Wrong size on FWidgetBindingTest");
static_assert(offsetof(FWidgetBindingTest, UpdateAllDelegate) == 0x000000, "Member 'FWidgetBindingTest::UpdateAllDelegate' has a wrong offset!");
static_assert(offsetof(FWidgetBindingTest, HpPercent) == 0x000010, "Member 'FWidgetBindingTest::HpPercent' has a wrong offset!");
static_assert(offsetof(FWidgetBindingTest, HpPercentDelegate) == 0x000014, "Member 'FWidgetBindingTest::HpPercentDelegate' has a wrong offset!");

// ScriptStruct TLClient.ChatGroupItemInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FChatGroupItemInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChatGroupItemInfo) == 0x000008, "Wrong alignment on FChatGroupItemInfo");
static_assert(sizeof(FChatGroupItemInfo) == 0x000010, "Wrong size on FChatGroupItemInfo");

// ScriptStruct TLClient.TLEmojiListGroup
// 0x0010 (0x0010 - 0x0000)
struct FTLEmojiListGroup final
{
public:
	TArray<class UTLEmojiListItem*>               EmojiListGroup;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLEmojiListGroup) == 0x000008, "Wrong alignment on FTLEmojiListGroup");
static_assert(sizeof(FTLEmojiListGroup) == 0x000010, "Wrong size on FTLEmojiListGroup");
static_assert(offsetof(FTLEmojiListGroup, EmojiListGroup) == 0x000000, "Member 'FTLEmojiListGroup::EmojiListGroup' has a wrong offset!");

// ScriptStruct TLClient.TLCinematicDialogSequenceData
// 0x0050 (0x0050 - 0x0000)
struct FTLCinematicDialogSequenceData final
{
public:
	bool                                          bWarpMyPCToEndPos;                                 // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLDataAssetHandle                     TakeCutsceneData;                                  // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FTransform                             MyPCEndTransform;                                  // 0x0020(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLCinematicDialogSequenceData) == 0x000010, "Wrong alignment on FTLCinematicDialogSequenceData");
static_assert(sizeof(FTLCinematicDialogSequenceData) == 0x000050, "Wrong size on FTLCinematicDialogSequenceData");
static_assert(offsetof(FTLCinematicDialogSequenceData, bWarpMyPCToEndPos) == 0x000000, "Member 'FTLCinematicDialogSequenceData::bWarpMyPCToEndPos' has a wrong offset!");
static_assert(offsetof(FTLCinematicDialogSequenceData, TakeCutsceneData) == 0x000008, "Member 'FTLCinematicDialogSequenceData::TakeCutsceneData' has a wrong offset!");
static_assert(offsetof(FTLCinematicDialogSequenceData, MyPCEndTransform) == 0x000020, "Member 'FTLCinematicDialogSequenceData::MyPCEndTransform' has a wrong offset!");

// ScriptStruct TLClient.TLMenuGroupPanel
// 0x0010 (0x0010 - 0x0000)
struct FTLMenuGroupPanel final
{
public:
	class UPanelWidget*                           MenuPanel;                                         // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelWidget*                           MenuListPanel;                                     // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLMenuGroupPanel) == 0x000008, "Wrong alignment on FTLMenuGroupPanel");
static_assert(sizeof(FTLMenuGroupPanel) == 0x000010, "Wrong size on FTLMenuGroupPanel");
static_assert(offsetof(FTLMenuGroupPanel, MenuPanel) == 0x000000, "Member 'FTLMenuGroupPanel::MenuPanel' has a wrong offset!");
static_assert(offsetof(FTLMenuGroupPanel, MenuListPanel) == 0x000008, "Member 'FTLMenuGroupPanel::MenuListPanel' has a wrong offset!");

// ScriptStruct TLClient.CraftingResultEntry
// 0x0020 (0x0020 - 0x0000)
struct FCraftingResultEntry final
{
public:
	class UTLUserWidgetCraftingResultEntry*       ResultEntry;                                       // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLTextBlock*                           ResultItemName;                                    // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLUserWidgetItemSlot*                  SuccessItemSlot;                                   // 0x0010(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLUserWidgetItemSlot*                  FailItemSlot;                                      // 0x0018(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingResultEntry) == 0x000008, "Wrong alignment on FCraftingResultEntry");
static_assert(sizeof(FCraftingResultEntry) == 0x000020, "Wrong size on FCraftingResultEntry");
static_assert(offsetof(FCraftingResultEntry, ResultEntry) == 0x000000, "Member 'FCraftingResultEntry::ResultEntry' has a wrong offset!");
static_assert(offsetof(FCraftingResultEntry, ResultItemName) == 0x000008, "Member 'FCraftingResultEntry::ResultItemName' has a wrong offset!");
static_assert(offsetof(FCraftingResultEntry, SuccessItemSlot) == 0x000010, "Member 'FCraftingResultEntry::SuccessItemSlot' has a wrong offset!");
static_assert(offsetof(FCraftingResultEntry, FailItemSlot) == 0x000018, "Member 'FCraftingResultEntry::FailItemSlot' has a wrong offset!");

// ScriptStruct TLClient.CustomizePresetBlenderUIData
// 0x0018 (0x0018 - 0x0000)
struct FCustomizePresetBlenderUIData final
{
public:
	class FString                                 TextKey;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           Sprite;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizePresetBlenderUIData) == 0x000008, "Wrong alignment on FCustomizePresetBlenderUIData");
static_assert(sizeof(FCustomizePresetBlenderUIData) == 0x000018, "Wrong size on FCustomizePresetBlenderUIData");
static_assert(offsetof(FCustomizePresetBlenderUIData, TextKey) == 0x000000, "Member 'FCustomizePresetBlenderUIData::TextKey' has a wrong offset!");
static_assert(offsetof(FCustomizePresetBlenderUIData, Sprite) == 0x000010, "Member 'FCustomizePresetBlenderUIData::Sprite' has a wrong offset!");

// ScriptStruct TLClient.CustomizeSnapshotSlotData
// 0x0068 (0x0068 - 0x0000)
struct FCustomizeSnapshotSlotData final
{
public:
	class UTexture2D*                             Image;                                             // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x5F];                                       // 0x0009(0x005F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomizeSnapshotSlotData) == 0x000008, "Wrong alignment on FCustomizeSnapshotSlotData");
static_assert(sizeof(FCustomizeSnapshotSlotData) == 0x000068, "Wrong size on FCustomizeSnapshotSlotData");
static_assert(offsetof(FCustomizeSnapshotSlotData, Image) == 0x000000, "Member 'FCustomizeSnapshotSlotData::Image' has a wrong offset!");
static_assert(offsetof(FCustomizeSnapshotSlotData, bValid) == 0x000008, "Member 'FCustomizeSnapshotSlotData::bValid' has a wrong offset!");

// ScriptStruct TLClient.CustomizeVoiceSelectAT
// 0x0048 (0x0048 - 0x0000)
struct FCustomizeVoiceSelectAT final
{
public:
	struct FSoftObjectPath                        VoiceFacialAT_Male;                                // 0x0000(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        VoiceFacialAT_Female;                              // 0x0018(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        VoiceBodyAT;                                       // 0x0030(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizeVoiceSelectAT) == 0x000008, "Wrong alignment on FCustomizeVoiceSelectAT");
static_assert(sizeof(FCustomizeVoiceSelectAT) == 0x000048, "Wrong size on FCustomizeVoiceSelectAT");
static_assert(offsetof(FCustomizeVoiceSelectAT, VoiceFacialAT_Male) == 0x000000, "Member 'FCustomizeVoiceSelectAT::VoiceFacialAT_Male' has a wrong offset!");
static_assert(offsetof(FCustomizeVoiceSelectAT, VoiceFacialAT_Female) == 0x000018, "Member 'FCustomizeVoiceSelectAT::VoiceFacialAT_Female' has a wrong offset!");
static_assert(offsetof(FCustomizeVoiceSelectAT, VoiceBodyAT) == 0x000030, "Member 'FCustomizeVoiceSelectAT::VoiceBodyAT' has a wrong offset!");

// ScriptStruct TLClient.TLEquipWeaponPresetWidgetInfo
// 0x0070 (0x0070 - 0x0000)
struct FTLEquipWeaponPresetWidgetInfo final
{
public:
	class UTLUserWidgetEquipSlot*                 MainWeaponWidget;                                  // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTLUserWidgetEquipSlot*                 MainAmmoWidget;                                    // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10[0x60];                                      // 0x0010(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLEquipWeaponPresetWidgetInfo) == 0x000008, "Wrong alignment on FTLEquipWeaponPresetWidgetInfo");
static_assert(sizeof(FTLEquipWeaponPresetWidgetInfo) == 0x000070, "Wrong size on FTLEquipWeaponPresetWidgetInfo");
static_assert(offsetof(FTLEquipWeaponPresetWidgetInfo, MainWeaponWidget) == 0x000000, "Member 'FTLEquipWeaponPresetWidgetInfo::MainWeaponWidget' has a wrong offset!");
static_assert(offsetof(FTLEquipWeaponPresetWidgetInfo, MainAmmoWidget) == 0x000008, "Member 'FTLEquipWeaponPresetWidgetInfo::MainAmmoWidget' has a wrong offset!");

// ScriptStruct TLClient.TLOrderdObjData
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FTLOrderdObjData final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLOrderdObjData) == 0x000004, "Wrong alignment on FTLOrderdObjData");
static_assert(sizeof(FTLOrderdObjData) == 0x00000C, "Wrong size on FTLOrderdObjData");

// ScriptStruct TLClient.TLGuideButtonArrayData
// 0x0010 (0x0010 - 0x0000)
struct FTLGuideButtonArrayData final
{
public:
	TArray<class UTLUserWidgetActionGuideButton*> ButtonArray;                                       // 0x0000(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTLGuideButtonArrayData) == 0x000008, "Wrong alignment on FTLGuideButtonArrayData");
static_assert(sizeof(FTLGuideButtonArrayData) == 0x000010, "Wrong size on FTLGuideButtonArrayData");
static_assert(offsetof(FTLGuideButtonArrayData, ButtonArray) == 0x000000, "Member 'FTLGuideButtonArrayData::ButtonArray' has a wrong offset!");

// ScriptStruct TLClient.ActionIconSet
// 0x0010 (0x0010 - 0x0000)
struct FActionIconSet final
{
public:
	class UPaperSprite*                           Enable;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           Disable;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionIconSet) == 0x000008, "Wrong alignment on FActionIconSet");
static_assert(sizeof(FActionIconSet) == 0x000010, "Wrong size on FActionIconSet");
static_assert(offsetof(FActionIconSet, Enable) == 0x000000, "Member 'FActionIconSet::Enable' has a wrong offset!");
static_assert(offsetof(FActionIconSet, Disable) == 0x000008, "Member 'FActionIconSet::Disable' has a wrong offset!");

// ScriptStruct TLClient.TLInvenSlotUidInfo
// 0x0010 (0x0010 - 0x0000)
struct FTLInvenSlotUidInfo final
{
public:
	TArray<uint64>                                ItemUidList;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLInvenSlotUidInfo) == 0x000008, "Wrong alignment on FTLInvenSlotUidInfo");
static_assert(sizeof(FTLInvenSlotUidInfo) == 0x000010, "Wrong size on FTLInvenSlotUidInfo");
static_assert(offsetof(FTLInvenSlotUidInfo, ItemUidList) == 0x000000, "Member 'FTLInvenSlotUidInfo::ItemUidList' has a wrong offset!");

// ScriptStruct TLClient.TLInvenSlotAutonFocusInfo
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FTLInvenSlotAutonFocusInfo final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLInvenSlotAutonFocusInfo) == 0x000004, "Wrong alignment on FTLInvenSlotAutonFocusInfo");
static_assert(sizeof(FTLInvenSlotAutonFocusInfo) == 0x000004, "Wrong size on FTLInvenSlotAutonFocusInfo");

// ScriptStruct TLClient.TLItemCollectionSummaryStatusComponent
// 0x0048 (0x0048 - 0x0000)
struct FTLItemCollectionSummaryStatusComponent final
{
public:
	FMulticastInlineDelegateProperty_             ProgressDelegate;                                  // 0x0000(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class FText                                   StatusText;                                        // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   StatusTextDelegate;                                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CompletionPercent;                                 // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CompletionPercentDelegate;                         // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressingPercent;                                // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProgressingPercentDelegate;                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLItemCollectionSummaryStatusComponent) == 0x000008, "Wrong alignment on FTLItemCollectionSummaryStatusComponent");
static_assert(sizeof(FTLItemCollectionSummaryStatusComponent) == 0x000048, "Wrong size on FTLItemCollectionSummaryStatusComponent");
static_assert(offsetof(FTLItemCollectionSummaryStatusComponent, ProgressDelegate) == 0x000000, "Member 'FTLItemCollectionSummaryStatusComponent::ProgressDelegate' has a wrong offset!");
static_assert(offsetof(FTLItemCollectionSummaryStatusComponent, StatusText) == 0x000010, "Member 'FTLItemCollectionSummaryStatusComponent::StatusText' has a wrong offset!");
static_assert(offsetof(FTLItemCollectionSummaryStatusComponent, StatusTextDelegate) == 0x000028, "Member 'FTLItemCollectionSummaryStatusComponent::StatusTextDelegate' has a wrong offset!");
static_assert(offsetof(FTLItemCollectionSummaryStatusComponent, CompletionPercent) == 0x000030, "Member 'FTLItemCollectionSummaryStatusComponent::CompletionPercent' has a wrong offset!");
static_assert(offsetof(FTLItemCollectionSummaryStatusComponent, CompletionPercentDelegate) == 0x000034, "Member 'FTLItemCollectionSummaryStatusComponent::CompletionPercentDelegate' has a wrong offset!");
static_assert(offsetof(FTLItemCollectionSummaryStatusComponent, ProgressingPercent) == 0x00003C, "Member 'FTLItemCollectionSummaryStatusComponent::ProgressingPercent' has a wrong offset!");
static_assert(offsetof(FTLItemCollectionSummaryStatusComponent, ProgressingPercentDelegate) == 0x000040, "Member 'FTLItemCollectionSummaryStatusComponent::ProgressingPercentDelegate' has a wrong offset!");

// ScriptStruct TLClient.ItemGradeImages
// 0x0018 (0x0018 - 0x0000)
struct FItemGradeImages final
{
public:
	class UPaperSprite*                           ItemGradeTitleImage;                               // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           ItemGradeTitleLineImage;                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           ItemGradeBottomImage;                              // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemGradeImages) == 0x000008, "Wrong alignment on FItemGradeImages");
static_assert(sizeof(FItemGradeImages) == 0x000018, "Wrong size on FItemGradeImages");
static_assert(offsetof(FItemGradeImages, ItemGradeTitleImage) == 0x000000, "Member 'FItemGradeImages::ItemGradeTitleImage' has a wrong offset!");
static_assert(offsetof(FItemGradeImages, ItemGradeTitleLineImage) == 0x000008, "Member 'FItemGradeImages::ItemGradeTitleLineImage' has a wrong offset!");
static_assert(offsetof(FItemGradeImages, ItemGradeBottomImage) == 0x000010, "Member 'FItemGradeImages::ItemGradeBottomImage' has a wrong offset!");

// ScriptStruct TLClient.TLTooltipStatCompareComponent
// 0x0020 (0x0020 - 0x0000)
struct FTLTooltipStatCompareComponent final
{
public:
	class UTLImage*                               CompareStatImage;                                  // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLBorder*                              CompareStatColorBorder;                            // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLTextBlock*                           CompareStatValueTextBlock;                         // 0x0010(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLCanvasPanel*                         CompareStatPanel;                                  // 0x0018(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLTooltipStatCompareComponent) == 0x000008, "Wrong alignment on FTLTooltipStatCompareComponent");
static_assert(sizeof(FTLTooltipStatCompareComponent) == 0x000020, "Wrong size on FTLTooltipStatCompareComponent");
static_assert(offsetof(FTLTooltipStatCompareComponent, CompareStatImage) == 0x000000, "Member 'FTLTooltipStatCompareComponent::CompareStatImage' has a wrong offset!");
static_assert(offsetof(FTLTooltipStatCompareComponent, CompareStatColorBorder) == 0x000008, "Member 'FTLTooltipStatCompareComponent::CompareStatColorBorder' has a wrong offset!");
static_assert(offsetof(FTLTooltipStatCompareComponent, CompareStatValueTextBlock) == 0x000010, "Member 'FTLTooltipStatCompareComponent::CompareStatValueTextBlock' has a wrong offset!");
static_assert(offsetof(FTLTooltipStatCompareComponent, CompareStatPanel) == 0x000018, "Member 'FTLTooltipStatCompareComponent::CompareStatPanel' has a wrong offset!");

// ScriptStruct TLClient.TLWidgetMagicDollCollectionSummaryParam
// 0x0010 (0x0030 - 0x0020)
struct FTLWidgetMagicDollCollectionSummaryParam final : public FTLWidgetBattleCollectionSummaryParam
{
public:
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLWidgetMagicDollCollectionSummaryParam) == 0x000008, "Wrong alignment on FTLWidgetMagicDollCollectionSummaryParam");
static_assert(sizeof(FTLWidgetMagicDollCollectionSummaryParam) == 0x000030, "Wrong size on FTLWidgetMagicDollCollectionSummaryParam");

// ScriptStruct TLClient.ShowStateScale
// 0x0008 (0x0008 - 0x0000)
struct FShowStateScale final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShowStateScale) == 0x000004, "Wrong alignment on FShowStateScale");
static_assert(sizeof(FShowStateScale) == 0x000008, "Wrong size on FShowStateScale");
static_assert(offsetof(FShowStateScale, Min) == 0x000000, "Member 'FShowStateScale::Min' has a wrong offset!");
static_assert(offsetof(FShowStateScale, Max) == 0x000004, "Member 'FShowStateScale::Max' has a wrong offset!");

// ScriptStruct TLClient.TLMinimapSizeTypeInfo
// 0x0018 (0x0018 - 0x0000)
struct FTLMinimapSizeTypeInfo final
{
public:
	struct FVector2D                              SizeInfo;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SizeIconTableKey;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ClippingSizeInfo;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLMinimapSizeTypeInfo) == 0x000004, "Wrong alignment on FTLMinimapSizeTypeInfo");
static_assert(sizeof(FTLMinimapSizeTypeInfo) == 0x000018, "Wrong size on FTLMinimapSizeTypeInfo");
static_assert(offsetof(FTLMinimapSizeTypeInfo, SizeInfo) == 0x000000, "Member 'FTLMinimapSizeTypeInfo::SizeInfo' has a wrong offset!");
static_assert(offsetof(FTLMinimapSizeTypeInfo, SizeIconTableKey) == 0x000008, "Member 'FTLMinimapSizeTypeInfo::SizeIconTableKey' has a wrong offset!");
static_assert(offsetof(FTLMinimapSizeTypeInfo, ClippingSizeInfo) == 0x000010, "Member 'FTLMinimapSizeTypeInfo::ClippingSizeInfo' has a wrong offset!");

// ScriptStruct TLClient.TLOptionTab
// 0x0030 (0x0030 - 0x0000)
struct FTLOptionTab final
{
public:
	bool                                          EnabledInLobby;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VisibleInShipping;                                 // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VisibleInGamepad;                                  // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VisibleInConsole;                                  // 0x0003(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VisibleInKeyboardMouse;                            // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ButtonText;                                        // 0x0008(0x0018)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TSubclassOf<class UTLUserWidgetButton>        ButtonWidgetClass;                                 // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTLUserWidgetOptionBasePanel> PanelWidgetClass;                                  // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLOptionTab) == 0x000008, "Wrong alignment on FTLOptionTab");
static_assert(sizeof(FTLOptionTab) == 0x000030, "Wrong size on FTLOptionTab");
static_assert(offsetof(FTLOptionTab, EnabledInLobby) == 0x000000, "Member 'FTLOptionTab::EnabledInLobby' has a wrong offset!");
static_assert(offsetof(FTLOptionTab, VisibleInShipping) == 0x000001, "Member 'FTLOptionTab::VisibleInShipping' has a wrong offset!");
static_assert(offsetof(FTLOptionTab, VisibleInGamepad) == 0x000002, "Member 'FTLOptionTab::VisibleInGamepad' has a wrong offset!");
static_assert(offsetof(FTLOptionTab, VisibleInConsole) == 0x000003, "Member 'FTLOptionTab::VisibleInConsole' has a wrong offset!");
static_assert(offsetof(FTLOptionTab, VisibleInKeyboardMouse) == 0x000004, "Member 'FTLOptionTab::VisibleInKeyboardMouse' has a wrong offset!");
static_assert(offsetof(FTLOptionTab, ButtonText) == 0x000008, "Member 'FTLOptionTab::ButtonText' has a wrong offset!");
static_assert(offsetof(FTLOptionTab, ButtonWidgetClass) == 0x000020, "Member 'FTLOptionTab::ButtonWidgetClass' has a wrong offset!");
static_assert(offsetof(FTLOptionTab, PanelWidgetClass) == 0x000028, "Member 'FTLOptionTab::PanelWidgetClass' has a wrong offset!");

// ScriptStruct TLClient.CheckButtonImages
// 0x0278 (0x0278 - 0x0000)
struct FCheckButtonImages final
{
public:
	struct FImageAppearance                       ImageIcon;                                         // 0x0000(0x0098)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	struct FImageAppearance                       ImageHoverIcon;                                    // 0x0098(0x0098)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	struct FImageAppearance                       ImageCheckIcon;                                    // 0x0130(0x0098)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	struct FImageAppearance                       ImageCheckHoverIcon;                               // 0x01C8(0x0098)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	class FText                                   ToolTip;                                           // 0x0260(0x0018)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCheckButtonImages) == 0x000008, "Wrong alignment on FCheckButtonImages");
static_assert(sizeof(FCheckButtonImages) == 0x000278, "Wrong size on FCheckButtonImages");
static_assert(offsetof(FCheckButtonImages, ImageIcon) == 0x000000, "Member 'FCheckButtonImages::ImageIcon' has a wrong offset!");
static_assert(offsetof(FCheckButtonImages, ImageHoverIcon) == 0x000098, "Member 'FCheckButtonImages::ImageHoverIcon' has a wrong offset!");
static_assert(offsetof(FCheckButtonImages, ImageCheckIcon) == 0x000130, "Member 'FCheckButtonImages::ImageCheckIcon' has a wrong offset!");
static_assert(offsetof(FCheckButtonImages, ImageCheckHoverIcon) == 0x0001C8, "Member 'FCheckButtonImages::ImageCheckHoverIcon' has a wrong offset!");
static_assert(offsetof(FCheckButtonImages, ToolTip) == 0x000260, "Member 'FCheckButtonImages::ToolTip' has a wrong offset!");

// ScriptStruct TLClient.TLRoleTextureData
// 0x0048 (0x0048 - 0x0000)
struct FTLRoleTextureData final
{
public:
	struct FSoftObjectPath                        NormalIcon;                                        // 0x0000(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SelectIcon;                                        // 0x0018(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SelectFX;                                          // 0x0030(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLRoleTextureData) == 0x000008, "Wrong alignment on FTLRoleTextureData");
static_assert(sizeof(FTLRoleTextureData) == 0x000048, "Wrong size on FTLRoleTextureData");
static_assert(offsetof(FTLRoleTextureData, NormalIcon) == 0x000000, "Member 'FTLRoleTextureData::NormalIcon' has a wrong offset!");
static_assert(offsetof(FTLRoleTextureData, SelectIcon) == 0x000018, "Member 'FTLRoleTextureData::SelectIcon' has a wrong offset!");
static_assert(offsetof(FTLRoleTextureData, SelectFX) == 0x000030, "Member 'FTLRoleTextureData::SelectFX' has a wrong offset!");

// ScriptStruct TLClient.TLRoleIconData
// 0x0018 (0x0018 - 0x0000)
struct FTLRoleIconData final
{
public:
	EPartyRole                                    Role;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTLUserWidgetPartyMatchingRoleIcon*> Icons;                                             // 0x0008(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLRoleIconData) == 0x000008, "Wrong alignment on FTLRoleIconData");
static_assert(sizeof(FTLRoleIconData) == 0x000018, "Wrong size on FTLRoleIconData");
static_assert(offsetof(FTLRoleIconData, Role) == 0x000000, "Member 'FTLRoleIconData::Role' has a wrong offset!");
static_assert(offsetof(FTLRoleIconData, Icons) == 0x000008, "Member 'FTLRoleIconData::Icons' has a wrong offset!");

// ScriptStruct TLClient.TLWidgetPolymorphCollectionSummaryParam
// 0x0100 (0x0120 - 0x0020)
struct FTLWidgetPolymorphCollectionSummaryParam final : public FTLWidgetBattleCollectionSummaryParam
{
public:
	uint8                                         Pad_20[0x100];                                     // 0x0020(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLWidgetPolymorphCollectionSummaryParam) == 0x000008, "Wrong alignment on FTLWidgetPolymorphCollectionSummaryParam");
static_assert(sizeof(FTLWidgetPolymorphCollectionSummaryParam) == 0x000120, "Wrong size on FTLWidgetPolymorphCollectionSummaryParam");

// ScriptStruct TLClient.TLRadialListSetting
// 0x0008 (0x0008 - 0x0000)
struct FTLRadialListSetting final
{
public:
	float                                         OffsetAngle;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAngle;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLRadialListSetting) == 0x000004, "Wrong alignment on FTLRadialListSetting");
static_assert(sizeof(FTLRadialListSetting) == 0x000008, "Wrong size on FTLRadialListSetting");
static_assert(offsetof(FTLRadialListSetting, OffsetAngle) == 0x000000, "Member 'FTLRadialListSetting::OffsetAngle' has a wrong offset!");
static_assert(offsetof(FTLRadialListSetting, StartAngle) == 0x000004, "Member 'FTLRadialListSetting::StartAngle' has a wrong offset!");

// ScriptStruct TLClient.TLRadialMenuItem
// 0x0010 (0x0010 - 0x0000)
struct FTLRadialMenuItem final
{
public:
	class UTLUserWidget*                          ItemWidget;                                        // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleDegree;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLRadialMenuItem) == 0x000008, "Wrong alignment on FTLRadialMenuItem");
static_assert(sizeof(FTLRadialMenuItem) == 0x000010, "Wrong size on FTLRadialMenuItem");
static_assert(offsetof(FTLRadialMenuItem, ItemWidget) == 0x000000, "Member 'FTLRadialMenuItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(FTLRadialMenuItem, AngleDegree) == 0x000008, "Member 'FTLRadialMenuItem::AngleDegree' has a wrong offset!");

// ScriptStruct TLClient.SiegeWarfareFailureeData
// 0x0048 (0x0048 - 0x0000)
struct FSiegeWarfareFailureeData final
{
public:
	struct FSoftObjectPath                        Symbol1;                                           // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Symbol2;                                           // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Symbol3;                                           // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSiegeWarfareFailureeData) == 0x000008, "Wrong alignment on FSiegeWarfareFailureeData");
static_assert(sizeof(FSiegeWarfareFailureeData) == 0x000048, "Wrong size on FSiegeWarfareFailureeData");
static_assert(offsetof(FSiegeWarfareFailureeData, Symbol1) == 0x000000, "Member 'FSiegeWarfareFailureeData::Symbol1' has a wrong offset!");
static_assert(offsetof(FSiegeWarfareFailureeData, Symbol2) == 0x000018, "Member 'FSiegeWarfareFailureeData::Symbol2' has a wrong offset!");
static_assert(offsetof(FSiegeWarfareFailureeData, Symbol3) == 0x000030, "Member 'FSiegeWarfareFailureeData::Symbol3' has a wrong offset!");

// ScriptStruct TLClient.SiegeWarfareSuccessData
// 0x0030 (0x0030 - 0x0000)
struct FSiegeWarfareSuccessData final
{
public:
	struct FSoftObjectPath                        Symbol1;                                           // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SymbolFx;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSiegeWarfareSuccessData) == 0x000008, "Wrong alignment on FSiegeWarfareSuccessData");
static_assert(sizeof(FSiegeWarfareSuccessData) == 0x000030, "Wrong size on FSiegeWarfareSuccessData");
static_assert(offsetof(FSiegeWarfareSuccessData, Symbol1) == 0x000000, "Member 'FSiegeWarfareSuccessData::Symbol1' has a wrong offset!");
static_assert(offsetof(FSiegeWarfareSuccessData, SymbolFx) == 0x000018, "Member 'FSiegeWarfareSuccessData::SymbolFx' has a wrong offset!");

// ScriptStruct TLClient.SiegeWarfareStatusMapHPRangeColor
// 0x0018 (0x0018 - 0x0000)
struct FSiegeWarfareStatusMapHPRangeColor final
{
public:
	struct FFloatRange                            HPRange;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BrushName;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSiegeWarfareStatusMapHPRangeColor) == 0x000004, "Wrong alignment on FSiegeWarfareStatusMapHPRangeColor");
static_assert(sizeof(FSiegeWarfareStatusMapHPRangeColor) == 0x000018, "Wrong size on FSiegeWarfareStatusMapHPRangeColor");
static_assert(offsetof(FSiegeWarfareStatusMapHPRangeColor, HPRange) == 0x000000, "Member 'FSiegeWarfareStatusMapHPRangeColor::HPRange' has a wrong offset!");
static_assert(offsetof(FSiegeWarfareStatusMapHPRangeColor, BrushName) == 0x000010, "Member 'FSiegeWarfareStatusMapHPRangeColor::BrushName' has a wrong offset!");

// ScriptStruct TLClient.TLUserWidgetSkillMasteryTree
// 0x0020 (0x0020 - 0x0000)
struct FTLUserWidgetSkillMasteryTree final
{
public:
	TArray<class UTLUserWidget*>                  NodeList;                                          // 0x0000(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UTLUserWidgetSkillMasterySkillSlot*> NodeWidgetList;                                    // 0x0010(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLUserWidgetSkillMasteryTree) == 0x000008, "Wrong alignment on FTLUserWidgetSkillMasteryTree");
static_assert(sizeof(FTLUserWidgetSkillMasteryTree) == 0x000020, "Wrong size on FTLUserWidgetSkillMasteryTree");
static_assert(offsetof(FTLUserWidgetSkillMasteryTree, NodeList) == 0x000000, "Member 'FTLUserWidgetSkillMasteryTree::NodeList' has a wrong offset!");
static_assert(offsetof(FTLUserWidgetSkillMasteryTree, NodeWidgetList) == 0x000010, "Member 'FTLUserWidgetSkillMasteryTree::NodeWidgetList' has a wrong offset!");

// ScriptStruct TLClient.TLStorageSlotUidInfo
// 0x0010 (0x0010 - 0x0000)
struct FTLStorageSlotUidInfo final
{
public:
	TArray<uint64>                                ItemUidList;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLStorageSlotUidInfo) == 0x000008, "Wrong alignment on FTLStorageSlotUidInfo");
static_assert(sizeof(FTLStorageSlotUidInfo) == 0x000010, "Wrong size on FTLStorageSlotUidInfo");
static_assert(offsetof(FTLStorageSlotUidInfo, ItemUidList) == 0x000000, "Member 'FTLStorageSlotUidInfo::ItemUidList' has a wrong offset!");

// ScriptStruct TLClient.TLStorageSlotAutonFocusInfo
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FTLStorageSlotAutonFocusInfo final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLStorageSlotAutonFocusInfo) == 0x000004, "Wrong alignment on FTLStorageSlotAutonFocusInfo");
static_assert(sizeof(FTLStorageSlotAutonFocusInfo) == 0x000004, "Wrong size on FTLStorageSlotAutonFocusInfo");

// ScriptStruct TLClient.TLSubButtonData
// 0x0258 (0x0258 - 0x0000)
struct FTLSubButtonData final
{
public:
	class FText                                   ButtonText;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	class FName                                   TextTooltipId;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ToolTipText;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Icon;                                              // 0x0038(0x0088)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoverIcon;                                         // 0x00C0(0x0088)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CheckIcon;                                         // 0x0148(0x0088)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CheckHoverIcon;                                    // 0x01D0(0x0088)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLSubButtonData) == 0x000008, "Wrong alignment on FTLSubButtonData");
static_assert(sizeof(FTLSubButtonData) == 0x000258, "Wrong size on FTLSubButtonData");
static_assert(offsetof(FTLSubButtonData, ButtonText) == 0x000000, "Member 'FTLSubButtonData::ButtonText' has a wrong offset!");
static_assert(offsetof(FTLSubButtonData, TextTooltipId) == 0x000018, "Member 'FTLSubButtonData::TextTooltipId' has a wrong offset!");
static_assert(offsetof(FTLSubButtonData, ToolTipText) == 0x000020, "Member 'FTLSubButtonData::ToolTipText' has a wrong offset!");
static_assert(offsetof(FTLSubButtonData, Icon) == 0x000038, "Member 'FTLSubButtonData::Icon' has a wrong offset!");
static_assert(offsetof(FTLSubButtonData, HoverIcon) == 0x0000C0, "Member 'FTLSubButtonData::HoverIcon' has a wrong offset!");
static_assert(offsetof(FTLSubButtonData, CheckIcon) == 0x000148, "Member 'FTLSubButtonData::CheckIcon' has a wrong offset!");
static_assert(offsetof(FTLSubButtonData, CheckHoverIcon) == 0x0001D0, "Member 'FTLSubButtonData::CheckHoverIcon' has a wrong offset!");

// ScriptStruct TLClient.SystemMenuItem
// 0x0018 (0x0018 - 0x0000)
struct FSystemMenuItem final
{
public:
	class UTLUserWidgetCheckButton*               CheckButtonUserWidget;                             // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLButton*                              Button;                                            // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLTextBlock*                           TextBlock;                                         // 0x0010(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSystemMenuItem) == 0x000008, "Wrong alignment on FSystemMenuItem");
static_assert(sizeof(FSystemMenuItem) == 0x000018, "Wrong size on FSystemMenuItem");
static_assert(offsetof(FSystemMenuItem, CheckButtonUserWidget) == 0x000000, "Member 'FSystemMenuItem::CheckButtonUserWidget' has a wrong offset!");
static_assert(offsetof(FSystemMenuItem, Button) == 0x000008, "Member 'FSystemMenuItem::Button' has a wrong offset!");
static_assert(offsetof(FSystemMenuItem, TextBlock) == 0x000010, "Member 'FSystemMenuItem::TextBlock' has a wrong offset!");

// ScriptStruct TLClient.TLTabButtonData
// 0x0260 (0x0260 - 0x0000)
struct FTLTabButtonData final
{
public:
	class FText                                   ButtonText;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	class FName                                   TextTooltipId;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ToolTipText;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	bool                                          bIconVisible;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Icon;                                              // 0x0040(0x0088)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoverIcon;                                         // 0x00C8(0x0088)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CheckIcon;                                         // 0x0150(0x0088)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CheckHoverIcon;                                    // 0x01D8(0x0088)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLTabButtonData) == 0x000008, "Wrong alignment on FTLTabButtonData");
static_assert(sizeof(FTLTabButtonData) == 0x000260, "Wrong size on FTLTabButtonData");
static_assert(offsetof(FTLTabButtonData, ButtonText) == 0x000000, "Member 'FTLTabButtonData::ButtonText' has a wrong offset!");
static_assert(offsetof(FTLTabButtonData, TextTooltipId) == 0x000018, "Member 'FTLTabButtonData::TextTooltipId' has a wrong offset!");
static_assert(offsetof(FTLTabButtonData, ToolTipText) == 0x000020, "Member 'FTLTabButtonData::ToolTipText' has a wrong offset!");
static_assert(offsetof(FTLTabButtonData, bIconVisible) == 0x000038, "Member 'FTLTabButtonData::bIconVisible' has a wrong offset!");
static_assert(offsetof(FTLTabButtonData, Icon) == 0x000040, "Member 'FTLTabButtonData::Icon' has a wrong offset!");
static_assert(offsetof(FTLTabButtonData, HoverIcon) == 0x0000C8, "Member 'FTLTabButtonData::HoverIcon' has a wrong offset!");
static_assert(offsetof(FTLTabButtonData, CheckIcon) == 0x000150, "Member 'FTLTabButtonData::CheckIcon' has a wrong offset!");
static_assert(offsetof(FTLTabButtonData, CheckHoverIcon) == 0x0001D8, "Member 'FTLTabButtonData::CheckHoverIcon' has a wrong offset!");

// ScriptStruct TLClient.WorldEventScheduleSlotInfo
// 0x0030 (0x0030 - 0x0000)
struct FWorldEventScheduleSlotInfo final
{
public:
	class UTLUserWidgetTimeTableAlarmContextMenuSlot* SlotWidget;                                        // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x28];                                       // 0x0008(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldEventScheduleSlotInfo) == 0x000008, "Wrong alignment on FWorldEventScheduleSlotInfo");
static_assert(sizeof(FWorldEventScheduleSlotInfo) == 0x000030, "Wrong size on FWorldEventScheduleSlotInfo");
static_assert(offsetof(FWorldEventScheduleSlotInfo, SlotWidget) == 0x000000, "Member 'FWorldEventScheduleSlotInfo::SlotWidget' has a wrong offset!");

}

