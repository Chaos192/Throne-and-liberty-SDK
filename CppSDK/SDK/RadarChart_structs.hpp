#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RadarChart

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum RadarChart.ERadarChartLabelBackgroundMethod
// NumValues: 0x0005
enum class ERadarChartLabelBackgroundMethod : uint8
{
	Label                                    = 0,
	SubLabel                                 = 1,
	Icon                                     = 2,
	Custom                                   = 3,
	ERadarChartLabelBackgroundMethod_MAX     = 4,
};

// Enum RadarChart.ERadarChartBlendMode
// NumValues: 0x0004
enum class ERadarChartBlendMode : uint8
{
	Opaque                                   = 0,
	Translucent                              = 1,
	Additive                                 = 2,
	ERadarChartBlendMode_MAX                 = 3,
};

// Enum RadarChart.ERadarChartColorOverride
// NumValues: 0x0009
enum class ERadarChartColorOverride : uint8
{
	None                                     = 0,
	Multiply                                 = 1,
	Overwrite                                = 2,
	OverwriteAlphaOnly                       = 3,
	OverwriteHue                             = 4,
	OverwriteHueAndAlpha                     = 5,
	Desaturate                               = 6,
	DesaturateAndAlpha                       = 7,
	ERadarChartColorOverride_MAX             = 8,
};

// ScriptStruct RadarChart.RadarChartColorOverride
// 0x0014 (0x0014 - 0x0000)
struct FRadarChartColorOverride final
{
public:
	ERadarChartColorOverride                      Method;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRadarChartColorOverride) == 0x000004, "Wrong alignment on FRadarChartColorOverride");
static_assert(sizeof(FRadarChartColorOverride) == 0x000014, "Wrong size on FRadarChartColorOverride");
static_assert(offsetof(FRadarChartColorOverride, Method) == 0x000000, "Member 'FRadarChartColorOverride::Method' has a wrong offset!");
static_assert(offsetof(FRadarChartColorOverride, Color) == 0x000004, "Member 'FRadarChartColorOverride::Color' has a wrong offset!");

// ScriptStruct RadarChart.RadarChartPin
// 0x0030 (0x0030 - 0x0000)
struct FRadarChartPin final
{
public:
	class UObject*                                Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRadarChartColorOverride               Color;                                             // 0x0010(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ZOrderOffset;                                      // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRadarChartPin) == 0x000008, "Wrong alignment on FRadarChartPin");
static_assert(sizeof(FRadarChartPin) == 0x000030, "Wrong size on FRadarChartPin");
static_assert(offsetof(FRadarChartPin, Icon) == 0x000000, "Member 'FRadarChartPin::Icon' has a wrong offset!");
static_assert(offsetof(FRadarChartPin, Size) == 0x000008, "Member 'FRadarChartPin::Size' has a wrong offset!");
static_assert(offsetof(FRadarChartPin, Color) == 0x000010, "Member 'FRadarChartPin::Color' has a wrong offset!");
static_assert(offsetof(FRadarChartPin, Distance) == 0x000024, "Member 'FRadarChartPin::Distance' has a wrong offset!");
static_assert(offsetof(FRadarChartPin, Angle) == 0x000028, "Member 'FRadarChartPin::Angle' has a wrong offset!");
static_assert(offsetof(FRadarChartPin, ZOrderOffset) == 0x00002C, "Member 'FRadarChartPin::ZOrderOffset' has a wrong offset!");

// ScriptStruct RadarChart.RadarChartAppearance
// 0x0108 (0x0108 - 0x0000)
struct FRadarChartAppearance final
{
public:
	uint8                                         bDraw : 1;                                         // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawShape : 1;                                    // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConcentricUVs : 1;                                // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawOutline : 1;                                  // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawPins : 1;                                     // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ERadarChartBlendMode                          BlendMode;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRadarChartColorOverride               ShapeColor;                                        // 0x0004(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UTexture*                               Texture;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TextureScale;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Panner;                                            // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutlineColor;                                      // 0x0034(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutlineThickness;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRadarChartPin                         Pin;                                               // 0x0048(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x90];                                      // 0x0078(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRadarChartAppearance) == 0x000008, "Wrong alignment on FRadarChartAppearance");
static_assert(sizeof(FRadarChartAppearance) == 0x000108, "Wrong size on FRadarChartAppearance");
static_assert(offsetof(FRadarChartAppearance, BlendMode) == 0x000001, "Member 'FRadarChartAppearance::BlendMode' has a wrong offset!");
static_assert(offsetof(FRadarChartAppearance, ShapeColor) == 0x000004, "Member 'FRadarChartAppearance::ShapeColor' has a wrong offset!");
static_assert(offsetof(FRadarChartAppearance, Texture) == 0x000018, "Member 'FRadarChartAppearance::Texture' has a wrong offset!");
static_assert(offsetof(FRadarChartAppearance, TextureScale) == 0x000020, "Member 'FRadarChartAppearance::TextureScale' has a wrong offset!");
static_assert(offsetof(FRadarChartAppearance, Angle) == 0x000028, "Member 'FRadarChartAppearance::Angle' has a wrong offset!");
static_assert(offsetof(FRadarChartAppearance, Panner) == 0x00002C, "Member 'FRadarChartAppearance::Panner' has a wrong offset!");
static_assert(offsetof(FRadarChartAppearance, OutlineColor) == 0x000034, "Member 'FRadarChartAppearance::OutlineColor' has a wrong offset!");
static_assert(offsetof(FRadarChartAppearance, OutlineThickness) == 0x000044, "Member 'FRadarChartAppearance::OutlineThickness' has a wrong offset!");
static_assert(offsetof(FRadarChartAppearance, Pin) == 0x000048, "Member 'FRadarChartAppearance::Pin' has a wrong offset!");

// ScriptStruct RadarChart.RadarChartSegment
// 0x0050 (0x0050 - 0x0000)
struct FRadarChartSegment final
{
public:
	struct FLinearColor                           SegmentColor;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Icon;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Label;                                             // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   SubLabel;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector2D                              Offset;                                            // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRadarChartSegment) == 0x000008, "Wrong alignment on FRadarChartSegment");
static_assert(sizeof(FRadarChartSegment) == 0x000050, "Wrong size on FRadarChartSegment");
static_assert(offsetof(FRadarChartSegment, SegmentColor) == 0x000000, "Member 'FRadarChartSegment::SegmentColor' has a wrong offset!");
static_assert(offsetof(FRadarChartSegment, Icon) == 0x000010, "Member 'FRadarChartSegment::Icon' has a wrong offset!");
static_assert(offsetof(FRadarChartSegment, Label) == 0x000018, "Member 'FRadarChartSegment::Label' has a wrong offset!");
static_assert(offsetof(FRadarChartSegment, SubLabel) == 0x000030, "Member 'FRadarChartSegment::SubLabel' has a wrong offset!");
static_assert(offsetof(FRadarChartSegment, Offset) == 0x000048, "Member 'FRadarChartSegment::Offset' has a wrong offset!");

// ScriptStruct RadarChart.RadarChartStyle
// 0x0308 (0x0308 - 0x0000)
struct FRadarChartStyle final
{
public:
	uint8                                         bKeepAspectRatio : 1;                              // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawIcons : 1;                                    // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawLabels : 1;                                   // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawSubLabels : 1;                                // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawLabelBackground : 1;                          // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawCuts : 1;                                     // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawDividers : 1;                                 // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRadarChartAppearance                  Appearance;                                        // 0x0008(0x0108)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FRadarChartSegment>             Segments;                                          // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           CutsColor;                                         // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CutsThickness;                                     // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CutsZOrderOffset;                                  // 0x0134(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DividersColor;                                     // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DividersCount;                                     // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DividersThickness;                                 // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DividerZOrderOffset;                               // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LabelDistance;                                     // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LabelOffset;                                       // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRadarChartColorOverride               IconColor;                                         // 0x015C(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              IconSize;                                          // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              IconOffset;                                        // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRadarChartColorOverride               LabelColor;                                        // 0x0180(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         LabelFont;                                         // 0x0198(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRadarChartColorOverride               SubLabelColor;                                     // 0x01F0(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         SubLabelFont;                                      // 0x0208(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SubLabelOffset;                                    // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            LabelBackground;                                   // 0x0268(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ERadarChartLabelBackgroundMethod              LabelBackgroundMethod;                             // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F1[0x3];                                      // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              LabelBackgroundPadding;                            // 0x02F4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LabelBackgroundOffset;                             // 0x02FC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRadarChartStyle) == 0x000008, "Wrong alignment on FRadarChartStyle");
static_assert(sizeof(FRadarChartStyle) == 0x000308, "Wrong size on FRadarChartStyle");
static_assert(offsetof(FRadarChartStyle, Scale) == 0x000004, "Member 'FRadarChartStyle::Scale' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, Appearance) == 0x000008, "Member 'FRadarChartStyle::Appearance' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, Segments) == 0x000110, "Member 'FRadarChartStyle::Segments' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, CutsColor) == 0x000120, "Member 'FRadarChartStyle::CutsColor' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, CutsThickness) == 0x000130, "Member 'FRadarChartStyle::CutsThickness' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, CutsZOrderOffset) == 0x000134, "Member 'FRadarChartStyle::CutsZOrderOffset' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, DividersColor) == 0x000138, "Member 'FRadarChartStyle::DividersColor' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, DividersCount) == 0x000148, "Member 'FRadarChartStyle::DividersCount' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, DividersThickness) == 0x00014C, "Member 'FRadarChartStyle::DividersThickness' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, DividerZOrderOffset) == 0x000150, "Member 'FRadarChartStyle::DividerZOrderOffset' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, LabelDistance) == 0x000154, "Member 'FRadarChartStyle::LabelDistance' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, LabelOffset) == 0x000158, "Member 'FRadarChartStyle::LabelOffset' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, IconColor) == 0x00015C, "Member 'FRadarChartStyle::IconColor' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, IconSize) == 0x000170, "Member 'FRadarChartStyle::IconSize' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, IconOffset) == 0x000178, "Member 'FRadarChartStyle::IconOffset' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, LabelColor) == 0x000180, "Member 'FRadarChartStyle::LabelColor' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, LabelFont) == 0x000198, "Member 'FRadarChartStyle::LabelFont' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, SubLabelColor) == 0x0001F0, "Member 'FRadarChartStyle::SubLabelColor' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, SubLabelFont) == 0x000208, "Member 'FRadarChartStyle::SubLabelFont' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, SubLabelOffset) == 0x000260, "Member 'FRadarChartStyle::SubLabelOffset' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, LabelBackground) == 0x000268, "Member 'FRadarChartStyle::LabelBackground' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, LabelBackgroundMethod) == 0x0002F0, "Member 'FRadarChartStyle::LabelBackgroundMethod' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, LabelBackgroundPadding) == 0x0002F4, "Member 'FRadarChartStyle::LabelBackgroundPadding' has a wrong offset!");
static_assert(offsetof(FRadarChartStyle, LabelBackgroundOffset) == 0x0002FC, "Member 'FRadarChartStyle::LabelBackgroundOffset' has a wrong offset!");

// ScriptStruct RadarChart.RadarChartValueData
// 0x0118 (0x0118 - 0x0000)
struct FRadarChartValueData final
{
public:
	TArray<float>                                 Values;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRadarChartAppearance                  Appearance;                                        // 0x0010(0x0108)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRadarChartValueData) == 0x000008, "Wrong alignment on FRadarChartValueData");
static_assert(sizeof(FRadarChartValueData) == 0x000118, "Wrong size on FRadarChartValueData");
static_assert(offsetof(FRadarChartValueData, Values) == 0x000000, "Member 'FRadarChartValueData::Values' has a wrong offset!");
static_assert(offsetof(FRadarChartValueData, Appearance) == 0x000010, "Member 'FRadarChartValueData::Appearance' has a wrong offset!");

}

