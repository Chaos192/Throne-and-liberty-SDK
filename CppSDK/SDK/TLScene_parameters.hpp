#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TLScene

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "TLScene_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK::Params
{

// Function TLScene.TLScenarioPreloadingVolume.OnBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct TLScenarioPreloadingVolume_OnBeginOverlap final
{
public:
	class AActor*                                 MyActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLScenarioPreloadingVolume_OnBeginOverlap) == 0x000008, "Wrong alignment on TLScenarioPreloadingVolume_OnBeginOverlap");
static_assert(sizeof(TLScenarioPreloadingVolume_OnBeginOverlap) == 0x000010, "Wrong size on TLScenarioPreloadingVolume_OnBeginOverlap");
static_assert(offsetof(TLScenarioPreloadingVolume_OnBeginOverlap, MyActor) == 0x000000, "Member 'TLScenarioPreloadingVolume_OnBeginOverlap::MyActor' has a wrong offset!");
static_assert(offsetof(TLScenarioPreloadingVolume_OnBeginOverlap, OtherActor) == 0x000008, "Member 'TLScenarioPreloadingVolume_OnBeginOverlap::OtherActor' has a wrong offset!");

// Function TLScene.TLScenarioPreloadingVolume.OnEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct TLScenarioPreloadingVolume_OnEndOverlap final
{
public:
	class AActor*                                 MyActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLScenarioPreloadingVolume_OnEndOverlap) == 0x000008, "Wrong alignment on TLScenarioPreloadingVolume_OnEndOverlap");
static_assert(sizeof(TLScenarioPreloadingVolume_OnEndOverlap) == 0x000010, "Wrong size on TLScenarioPreloadingVolume_OnEndOverlap");
static_assert(offsetof(TLScenarioPreloadingVolume_OnEndOverlap, MyActor) == 0x000000, "Member 'TLScenarioPreloadingVolume_OnEndOverlap::MyActor' has a wrong offset!");
static_assert(offsetof(TLScenarioPreloadingVolume_OnEndOverlap, OtherActor) == 0x000008, "Member 'TLScenarioPreloadingVolume_OnEndOverlap::OtherActor' has a wrong offset!");

// Function TLScene.UnrealCameraActor.GetCameraTypeBP
// 0x0001 (0x0001 - 0x0000)
struct UnrealCameraActor_GetCameraTypeBP final
{
public:
	ESnCameraType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealCameraActor_GetCameraTypeBP) == 0x000001, "Wrong alignment on UnrealCameraActor_GetCameraTypeBP");
static_assert(sizeof(UnrealCameraActor_GetCameraTypeBP) == 0x000001, "Wrong size on UnrealCameraActor_GetCameraTypeBP");
static_assert(offsetof(UnrealCameraActor_GetCameraTypeBP, ReturnValue) == 0x000000, "Member 'UnrealCameraActor_GetCameraTypeBP::ReturnValue' has a wrong offset!");

// Function TLScene.UnrealCameraActor.GetFOVBP
// 0x0004 (0x0004 - 0x0000)
struct UnrealCameraActor_GetFOVBP final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealCameraActor_GetFOVBP) == 0x000004, "Wrong alignment on UnrealCameraActor_GetFOVBP");
static_assert(sizeof(UnrealCameraActor_GetFOVBP) == 0x000004, "Wrong size on UnrealCameraActor_GetFOVBP");
static_assert(offsetof(UnrealCameraActor_GetFOVBP, ReturnValue) == 0x000000, "Member 'UnrealCameraActor_GetFOVBP::ReturnValue' has a wrong offset!");

// Function TLScene.UnrealCameraActor.GetPosittionBP
// 0x000C (0x000C - 0x0000)
struct UnrealCameraActor_GetPosittionBP final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealCameraActor_GetPosittionBP) == 0x000004, "Wrong alignment on UnrealCameraActor_GetPosittionBP");
static_assert(sizeof(UnrealCameraActor_GetPosittionBP) == 0x00000C, "Wrong size on UnrealCameraActor_GetPosittionBP");
static_assert(offsetof(UnrealCameraActor_GetPosittionBP, ReturnValue) == 0x000000, "Member 'UnrealCameraActor_GetPosittionBP::ReturnValue' has a wrong offset!");

// Function TLScene.UnrealCameraActor.GetRotationBP
// 0x000C (0x000C - 0x0000)
struct UnrealCameraActor_GetRotationBP final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealCameraActor_GetRotationBP) == 0x000004, "Wrong alignment on UnrealCameraActor_GetRotationBP");
static_assert(sizeof(UnrealCameraActor_GetRotationBP) == 0x00000C, "Wrong size on UnrealCameraActor_GetRotationBP");
static_assert(offsetof(UnrealCameraActor_GetRotationBP, ReturnValue) == 0x000000, "Member 'UnrealCameraActor_GetRotationBP::ReturnValue' has a wrong offset!");

// Function TLScene.UnrealCameraActor.SetFOVBP
// 0x0004 (0x0004 - 0x0000)
struct UnrealCameraActor_SetFOVBP final
{
public:
	float                                         InFOV;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealCameraActor_SetFOVBP) == 0x000004, "Wrong alignment on UnrealCameraActor_SetFOVBP");
static_assert(sizeof(UnrealCameraActor_SetFOVBP) == 0x000004, "Wrong size on UnrealCameraActor_SetFOVBP");
static_assert(offsetof(UnrealCameraActor_SetFOVBP, InFOV) == 0x000000, "Member 'UnrealCameraActor_SetFOVBP::InFOV' has a wrong offset!");

// Function TLScene.UnrealCameraActor.SetPosisionBP
// 0x000C (0x000C - 0x0000)
struct UnrealCameraActor_SetPosisionBP final
{
public:
	struct FVector                                InPosition;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealCameraActor_SetPosisionBP) == 0x000004, "Wrong alignment on UnrealCameraActor_SetPosisionBP");
static_assert(sizeof(UnrealCameraActor_SetPosisionBP) == 0x00000C, "Wrong size on UnrealCameraActor_SetPosisionBP");
static_assert(offsetof(UnrealCameraActor_SetPosisionBP, InPosition) == 0x000000, "Member 'UnrealCameraActor_SetPosisionBP::InPosition' has a wrong offset!");

// Function TLScene.UnrealCameraActor.SetRotationBP
// 0x000C (0x000C - 0x0000)
struct UnrealCameraActor_SetRotationBP final
{
public:
	struct FRotator                               InRotation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealCameraActor_SetRotationBP) == 0x000004, "Wrong alignment on UnrealCameraActor_SetRotationBP");
static_assert(sizeof(UnrealCameraActor_SetRotationBP) == 0x00000C, "Wrong size on UnrealCameraActor_SetRotationBP");
static_assert(offsetof(UnrealCameraActor_SetRotationBP, InRotation) == 0x000000, "Member 'UnrealCameraActor_SetRotationBP::InRotation' has a wrong offset!");

// Function TLScene.UnrealCutSceneCameraActor.OnUpdateCameraCut
// 0x0008 (0x0008 - 0x0000)
struct UnrealCutSceneCameraActor_OnUpdateCameraCut final
{
public:
	class UCameraComponent*                       CinemaCameraComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealCutSceneCameraActor_OnUpdateCameraCut) == 0x000008, "Wrong alignment on UnrealCutSceneCameraActor_OnUpdateCameraCut");
static_assert(sizeof(UnrealCutSceneCameraActor_OnUpdateCameraCut) == 0x000008, "Wrong size on UnrealCutSceneCameraActor_OnUpdateCameraCut");
static_assert(offsetof(UnrealCutSceneCameraActor_OnUpdateCameraCut, CinemaCameraComponent) == 0x000000, "Member 'UnrealCutSceneCameraActor_OnUpdateCameraCut::CinemaCameraComponent' has a wrong offset!");

// Function TLScene.UnrealSceneBoidActor.TickMoveTimeline
// 0x0004 (0x0004 - 0x0000)
struct UnrealSceneBoidActor_TickMoveTimeline final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealSceneBoidActor_TickMoveTimeline) == 0x000004, "Wrong alignment on UnrealSceneBoidActor_TickMoveTimeline");
static_assert(sizeof(UnrealSceneBoidActor_TickMoveTimeline) == 0x000004, "Wrong size on UnrealSceneBoidActor_TickMoveTimeline");
static_assert(offsetof(UnrealSceneBoidActor_TickMoveTimeline, Value) == 0x000000, "Member 'UnrealSceneBoidActor_TickMoveTimeline::Value' has a wrong offset!");

// Function TLScene.GameplayTask_AttachMagicDoll.OnMasterCharacterMovementUpdated
// 0x001C (0x001C - 0x0000)
struct GameplayTask_AttachMagicDoll_OnMasterCharacterMovementUpdated final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldLocation;                                       // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldVelocity;                                       // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_AttachMagicDoll_OnMasterCharacterMovementUpdated) == 0x000004, "Wrong alignment on GameplayTask_AttachMagicDoll_OnMasterCharacterMovementUpdated");
static_assert(sizeof(GameplayTask_AttachMagicDoll_OnMasterCharacterMovementUpdated) == 0x00001C, "Wrong size on GameplayTask_AttachMagicDoll_OnMasterCharacterMovementUpdated");
static_assert(offsetof(GameplayTask_AttachMagicDoll_OnMasterCharacterMovementUpdated, DeltaSeconds) == 0x000000, "Member 'GameplayTask_AttachMagicDoll_OnMasterCharacterMovementUpdated::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(GameplayTask_AttachMagicDoll_OnMasterCharacterMovementUpdated, OldLocation) == 0x000004, "Member 'GameplayTask_AttachMagicDoll_OnMasterCharacterMovementUpdated::OldLocation' has a wrong offset!");
static_assert(offsetof(GameplayTask_AttachMagicDoll_OnMasterCharacterMovementUpdated, OldVelocity) == 0x000010, "Member 'GameplayTask_AttachMagicDoll_OnMasterCharacterMovementUpdated::OldVelocity' has a wrong offset!");

// Function TLScene.GameplayTask_AttachWorldObject.OnAttachedCollisionActorEndPlay
// 0x0010 (0x0010 - 0x0000)
struct GameplayTask_AttachWorldObject_OnAttachedCollisionActorEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayTask_AttachWorldObject_OnAttachedCollisionActorEndPlay) == 0x000008, "Wrong alignment on GameplayTask_AttachWorldObject_OnAttachedCollisionActorEndPlay");
static_assert(sizeof(GameplayTask_AttachWorldObject_OnAttachedCollisionActorEndPlay) == 0x000010, "Wrong size on GameplayTask_AttachWorldObject_OnAttachedCollisionActorEndPlay");
static_assert(offsetof(GameplayTask_AttachWorldObject_OnAttachedCollisionActorEndPlay, Actor) == 0x000000, "Member 'GameplayTask_AttachWorldObject_OnAttachedCollisionActorEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(GameplayTask_AttachWorldObject_OnAttachedCollisionActorEndPlay, EndPlayReason) == 0x000008, "Member 'GameplayTask_AttachWorldObject_OnAttachedCollisionActorEndPlay::EndPlayReason' has a wrong offset!");

// Function TLScene.GameplayTask_AttachWorldObject.OnAttachedParentEndPlay
// 0x0010 (0x0010 - 0x0000)
struct GameplayTask_AttachWorldObject_OnAttachedParentEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayTask_AttachWorldObject_OnAttachedParentEndPlay) == 0x000008, "Wrong alignment on GameplayTask_AttachWorldObject_OnAttachedParentEndPlay");
static_assert(sizeof(GameplayTask_AttachWorldObject_OnAttachedParentEndPlay) == 0x000010, "Wrong size on GameplayTask_AttachWorldObject_OnAttachedParentEndPlay");
static_assert(offsetof(GameplayTask_AttachWorldObject_OnAttachedParentEndPlay, Actor) == 0x000000, "Member 'GameplayTask_AttachWorldObject_OnAttachedParentEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(GameplayTask_AttachWorldObject_OnAttachedParentEndPlay, EndPlayReason) == 0x000008, "Member 'GameplayTask_AttachWorldObject_OnAttachedParentEndPlay::EndPlayReason' has a wrong offset!");

// Function TLScene.GameplayTask_Mount.OnMasterCharacterMovementUpdated
// 0x001C (0x001C - 0x0000)
struct GameplayTask_Mount_OnMasterCharacterMovementUpdated final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldLocation;                                       // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldVelocity;                                       // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_Mount_OnMasterCharacterMovementUpdated) == 0x000004, "Wrong alignment on GameplayTask_Mount_OnMasterCharacterMovementUpdated");
static_assert(sizeof(GameplayTask_Mount_OnMasterCharacterMovementUpdated) == 0x00001C, "Wrong size on GameplayTask_Mount_OnMasterCharacterMovementUpdated");
static_assert(offsetof(GameplayTask_Mount_OnMasterCharacterMovementUpdated, DeltaSeconds) == 0x000000, "Member 'GameplayTask_Mount_OnMasterCharacterMovementUpdated::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(GameplayTask_Mount_OnMasterCharacterMovementUpdated, OldLocation) == 0x000004, "Member 'GameplayTask_Mount_OnMasterCharacterMovementUpdated::OldLocation' has a wrong offset!");
static_assert(offsetof(GameplayTask_Mount_OnMasterCharacterMovementUpdated, OldVelocity) == 0x000010, "Member 'GameplayTask_Mount_OnMasterCharacterMovementUpdated::OldVelocity' has a wrong offset!");

// Function TLScene.ImageAttachmentComponent.AttachImage
// 0x0010 (0x0010 - 0x0000)
struct ImageAttachmentComponent_AttachImage final
{
public:
	class FString                                 ImagePath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImageAttachmentComponent_AttachImage) == 0x000008, "Wrong alignment on ImageAttachmentComponent_AttachImage");
static_assert(sizeof(ImageAttachmentComponent_AttachImage) == 0x000010, "Wrong size on ImageAttachmentComponent_AttachImage");
static_assert(offsetof(ImageAttachmentComponent_AttachImage, ImagePath) == 0x000000, "Member 'ImageAttachmentComponent_AttachImage::ImagePath' has a wrong offset!");

// Function TLScene.MapActorManager.OnActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct MapActorManager_OnActorDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapActorManager_OnActorDestroyed) == 0x000008, "Wrong alignment on MapActorManager_OnActorDestroyed");
static_assert(sizeof(MapActorManager_OnActorDestroyed) == 0x000008, "Wrong size on MapActorManager_OnActorDestroyed");
static_assert(offsetof(MapActorManager_OnActorDestroyed, DestroyedActor) == 0x000000, "Member 'MapActorManager_OnActorDestroyed::DestroyedActor' has a wrong offset!");

// Function TLScene.MapMiniActor.OnParticleEvent
// 0x0024 (0x0024 - 0x0000)
struct MapMiniActor_OnParticleEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitterTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapMiniActor_OnParticleEvent) == 0x000004, "Wrong alignment on MapMiniActor_OnParticleEvent");
static_assert(sizeof(MapMiniActor_OnParticleEvent) == 0x000024, "Wrong size on MapMiniActor_OnParticleEvent");
static_assert(offsetof(MapMiniActor_OnParticleEvent, EventName) == 0x000000, "Member 'MapMiniActor_OnParticleEvent::EventName' has a wrong offset!");
static_assert(offsetof(MapMiniActor_OnParticleEvent, EmitterTime) == 0x000008, "Member 'MapMiniActor_OnParticleEvent::EmitterTime' has a wrong offset!");
static_assert(offsetof(MapMiniActor_OnParticleEvent, Location) == 0x00000C, "Member 'MapMiniActor_OnParticleEvent::Location' has a wrong offset!");
static_assert(offsetof(MapMiniActor_OnParticleEvent, Velocity) == 0x000018, "Member 'MapMiniActor_OnParticleEvent::Velocity' has a wrong offset!");

// Function TLScene.MapRoomActor.OnBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct MapRoomActor_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRoomActor_OnBeginOverlap) == 0x000008, "Wrong alignment on MapRoomActor_OnBeginOverlap");
static_assert(sizeof(MapRoomActor_OnBeginOverlap) == 0x0000A8, "Wrong size on MapRoomActor_OnBeginOverlap");
static_assert(offsetof(MapRoomActor_OnBeginOverlap, OverlappedComp) == 0x000000, "Member 'MapRoomActor_OnBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(MapRoomActor_OnBeginOverlap, OtherActor) == 0x000008, "Member 'MapRoomActor_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(MapRoomActor_OnBeginOverlap, OtherComp) == 0x000010, "Member 'MapRoomActor_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(MapRoomActor_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'MapRoomActor_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(MapRoomActor_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'MapRoomActor_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(MapRoomActor_OnBeginOverlap, SweepResult) == 0x000020, "Member 'MapRoomActor_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function TLScene.MapRoomActor.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct MapRoomActor_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapRoomActor_OnEndOverlap) == 0x000008, "Wrong alignment on MapRoomActor_OnEndOverlap");
static_assert(sizeof(MapRoomActor_OnEndOverlap) == 0x000020, "Wrong size on MapRoomActor_OnEndOverlap");
static_assert(offsetof(MapRoomActor_OnEndOverlap, OverlappedComp) == 0x000000, "Member 'MapRoomActor_OnEndOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(MapRoomActor_OnEndOverlap, OtherActor) == 0x000008, "Member 'MapRoomActor_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(MapRoomActor_OnEndOverlap, OtherComp) == 0x000010, "Member 'MapRoomActor_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(MapRoomActor_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'MapRoomActor_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function TLScene.TLCharacterAnimInstance.GetFacialAnimComponent
// 0x0008 (0x0008 - 0x0000)
struct TLCharacterAnimInstance_GetFacialAnimComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCharacterAnimInstance_GetFacialAnimComponent) == 0x000008, "Wrong alignment on TLCharacterAnimInstance_GetFacialAnimComponent");
static_assert(sizeof(TLCharacterAnimInstance_GetFacialAnimComponent) == 0x000008, "Wrong size on TLCharacterAnimInstance_GetFacialAnimComponent");
static_assert(offsetof(TLCharacterAnimInstance_GetFacialAnimComponent, ReturnValue) == 0x000000, "Member 'TLCharacterAnimInstance_GetFacialAnimComponent::ReturnValue' has a wrong offset!");

// Function TLScene.TLCharacterSubAnimInstance.TLAnim_GetInverseSpeedBasedRate
// 0x0008 (0x0008 - 0x0000)
struct TLCharacterSubAnimInstance_TLAnim_GetInverseSpeedBasedRate final
{
public:
	float                                         InSeqBaseSpeed;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCharacterSubAnimInstance_TLAnim_GetInverseSpeedBasedRate) == 0x000004, "Wrong alignment on TLCharacterSubAnimInstance_TLAnim_GetInverseSpeedBasedRate");
static_assert(sizeof(TLCharacterSubAnimInstance_TLAnim_GetInverseSpeedBasedRate) == 0x000008, "Wrong size on TLCharacterSubAnimInstance_TLAnim_GetInverseSpeedBasedRate");
static_assert(offsetof(TLCharacterSubAnimInstance_TLAnim_GetInverseSpeedBasedRate, InSeqBaseSpeed) == 0x000000, "Member 'TLCharacterSubAnimInstance_TLAnim_GetInverseSpeedBasedRate::InSeqBaseSpeed' has a wrong offset!");
static_assert(offsetof(TLCharacterSubAnimInstance_TLAnim_GetInverseSpeedBasedRate, ReturnValue) == 0x000004, "Member 'TLCharacterSubAnimInstance_TLAnim_GetInverseSpeedBasedRate::ReturnValue' has a wrong offset!");

// Function TLScene.UnrealCableComponent.SetAttachEndTo
// 0x0018 (0x0018 - 0x0000)
struct UnrealCableComponent_SetAttachEndTo final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComponentProperty;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealCableComponent_SetAttachEndTo) == 0x000008, "Wrong alignment on UnrealCableComponent_SetAttachEndTo");
static_assert(sizeof(UnrealCableComponent_SetAttachEndTo) == 0x000018, "Wrong size on UnrealCableComponent_SetAttachEndTo");
static_assert(offsetof(UnrealCableComponent_SetAttachEndTo, Actor) == 0x000000, "Member 'UnrealCableComponent_SetAttachEndTo::Actor' has a wrong offset!");
static_assert(offsetof(UnrealCableComponent_SetAttachEndTo, ComponentProperty) == 0x000008, "Member 'UnrealCableComponent_SetAttachEndTo::ComponentProperty' has a wrong offset!");
static_assert(offsetof(UnrealCableComponent_SetAttachEndTo, SocketName) == 0x000010, "Member 'UnrealCableComponent_SetAttachEndTo::SocketName' has a wrong offset!");

// Function TLScene.UnrealCableComponent.SetAttachEndToComponent
// 0x0010 (0x0010 - 0x0000)
struct UnrealCableComponent_SetAttachEndToComponent final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealCableComponent_SetAttachEndToComponent) == 0x000008, "Wrong alignment on UnrealCableComponent_SetAttachEndToComponent");
static_assert(sizeof(UnrealCableComponent_SetAttachEndToComponent) == 0x000010, "Wrong size on UnrealCableComponent_SetAttachEndToComponent");
static_assert(offsetof(UnrealCableComponent_SetAttachEndToComponent, Component) == 0x000000, "Member 'UnrealCableComponent_SetAttachEndToComponent::Component' has a wrong offset!");
static_assert(offsetof(UnrealCableComponent_SetAttachEndToComponent, SocketName) == 0x000008, "Member 'UnrealCableComponent_SetAttachEndToComponent::SocketName' has a wrong offset!");

// Function TLScene.UnrealCableComponent.GetAttachedActor
// 0x0008 (0x0008 - 0x0000)
struct UnrealCableComponent_GetAttachedActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealCableComponent_GetAttachedActor) == 0x000008, "Wrong alignment on UnrealCableComponent_GetAttachedActor");
static_assert(sizeof(UnrealCableComponent_GetAttachedActor) == 0x000008, "Wrong size on UnrealCableComponent_GetAttachedActor");
static_assert(offsetof(UnrealCableComponent_GetAttachedActor, ReturnValue) == 0x000000, "Member 'UnrealCableComponent_GetAttachedActor::ReturnValue' has a wrong offset!");

// Function TLScene.UnrealCableComponent.GetAttachedComponent
// 0x0008 (0x0008 - 0x0000)
struct UnrealCableComponent_GetAttachedComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealCableComponent_GetAttachedComponent) == 0x000008, "Wrong alignment on UnrealCableComponent_GetAttachedComponent");
static_assert(sizeof(UnrealCableComponent_GetAttachedComponent) == 0x000008, "Wrong size on UnrealCableComponent_GetAttachedComponent");
static_assert(offsetof(UnrealCableComponent_GetAttachedComponent, ReturnValue) == 0x000000, "Member 'UnrealCableComponent_GetAttachedComponent::ReturnValue' has a wrong offset!");

// Function TLScene.UnrealCableComponent.GetCableParticleLocations
// 0x0010 (0x0010 - 0x0000)
struct UnrealCableComponent_GetCableParticleLocations final
{
public:
	TArray<struct FVector>                        Locations;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealCableComponent_GetCableParticleLocations) == 0x000008, "Wrong alignment on UnrealCableComponent_GetCableParticleLocations");
static_assert(sizeof(UnrealCableComponent_GetCableParticleLocations) == 0x000010, "Wrong size on UnrealCableComponent_GetCableParticleLocations");
static_assert(offsetof(UnrealCableComponent_GetCableParticleLocations, Locations) == 0x000000, "Member 'UnrealCableComponent_GetCableParticleLocations::Locations' has a wrong offset!");

// Function TLScene.TLForceFeedbackLibrary.GetWorldByContext
// 0x0010 (0x0010 - 0x0000)
struct TLForceFeedbackLibrary_GetWorldByContext final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLForceFeedbackLibrary_GetWorldByContext) == 0x000008, "Wrong alignment on TLForceFeedbackLibrary_GetWorldByContext");
static_assert(sizeof(TLForceFeedbackLibrary_GetWorldByContext) == 0x000010, "Wrong size on TLForceFeedbackLibrary_GetWorldByContext");
static_assert(offsetof(TLForceFeedbackLibrary_GetWorldByContext, InWorldContextObject) == 0x000000, "Member 'TLForceFeedbackLibrary_GetWorldByContext::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLForceFeedbackLibrary_GetWorldByContext, ReturnValue) == 0x000008, "Member 'TLForceFeedbackLibrary_GetWorldByContext::ReturnValue' has a wrong offset!");

// Function TLScene.TLForceFeedbackLibrary.PlayForceFeedback
// 0x0020 (0x0020 - 0x0000)
struct TLForceFeedbackLibrary_PlayForceFeedback final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   ForceFeedbackEffect;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreTimeDilation;                               // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayWhilePaused;                                  // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLForceFeedbackLibrary_PlayForceFeedback) == 0x000008, "Wrong alignment on TLForceFeedbackLibrary_PlayForceFeedback");
static_assert(sizeof(TLForceFeedbackLibrary_PlayForceFeedback) == 0x000020, "Wrong size on TLForceFeedbackLibrary_PlayForceFeedback");
static_assert(offsetof(TLForceFeedbackLibrary_PlayForceFeedback, InWorldContextObject) == 0x000000, "Member 'TLForceFeedbackLibrary_PlayForceFeedback::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLForceFeedbackLibrary_PlayForceFeedback, ForceFeedbackEffect) == 0x000008, "Member 'TLForceFeedbackLibrary_PlayForceFeedback::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(TLForceFeedbackLibrary_PlayForceFeedback, Tag) == 0x000010, "Member 'TLForceFeedbackLibrary_PlayForceFeedback::Tag' has a wrong offset!");
static_assert(offsetof(TLForceFeedbackLibrary_PlayForceFeedback, bLooping) == 0x000018, "Member 'TLForceFeedbackLibrary_PlayForceFeedback::bLooping' has a wrong offset!");
static_assert(offsetof(TLForceFeedbackLibrary_PlayForceFeedback, bIgnoreTimeDilation) == 0x000019, "Member 'TLForceFeedbackLibrary_PlayForceFeedback::bIgnoreTimeDilation' has a wrong offset!");
static_assert(offsetof(TLForceFeedbackLibrary_PlayForceFeedback, bPlayWhilePaused) == 0x00001A, "Member 'TLForceFeedbackLibrary_PlayForceFeedback::bPlayWhilePaused' has a wrong offset!");

// Function TLScene.TLForceFeedbackLibrary.StopForceFeedback
// 0x0010 (0x0010 - 0x0000)
struct TLForceFeedbackLibrary_StopForceFeedback final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   ForceFeedbackEffect;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLForceFeedbackLibrary_StopForceFeedback) == 0x000008, "Wrong alignment on TLForceFeedbackLibrary_StopForceFeedback");
static_assert(sizeof(TLForceFeedbackLibrary_StopForceFeedback) == 0x000010, "Wrong size on TLForceFeedbackLibrary_StopForceFeedback");
static_assert(offsetof(TLForceFeedbackLibrary_StopForceFeedback, InWorldContextObject) == 0x000000, "Member 'TLForceFeedbackLibrary_StopForceFeedback::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLForceFeedbackLibrary_StopForceFeedback, ForceFeedbackEffect) == 0x000008, "Member 'TLForceFeedbackLibrary_StopForceFeedback::ForceFeedbackEffect' has a wrong offset!");

// Function TLScene.TLForceFeedbackLibrary.StopForceFeedbackAll
// 0x0008 (0x0008 - 0x0000)
struct TLForceFeedbackLibrary_StopForceFeedbackAll final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLForceFeedbackLibrary_StopForceFeedbackAll) == 0x000008, "Wrong alignment on TLForceFeedbackLibrary_StopForceFeedbackAll");
static_assert(sizeof(TLForceFeedbackLibrary_StopForceFeedbackAll) == 0x000008, "Wrong size on TLForceFeedbackLibrary_StopForceFeedbackAll");
static_assert(offsetof(TLForceFeedbackLibrary_StopForceFeedbackAll, InWorldContextObject) == 0x000000, "Member 'TLForceFeedbackLibrary_StopForceFeedbackAll::InWorldContextObject' has a wrong offset!");

// Function TLScene.TLAnimationStatics.GetSkeletonBoneNames
// 0x0018 (0x0018 - 0x0000)
struct TLAnimationStatics_GetSkeletonBoneNames final
{
public:
	class USkeleton*                              InSkeleton;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLAnimationStatics_GetSkeletonBoneNames) == 0x000008, "Wrong alignment on TLAnimationStatics_GetSkeletonBoneNames");
static_assert(sizeof(TLAnimationStatics_GetSkeletonBoneNames) == 0x000018, "Wrong size on TLAnimationStatics_GetSkeletonBoneNames");
static_assert(offsetof(TLAnimationStatics_GetSkeletonBoneNames, InSkeleton) == 0x000000, "Member 'TLAnimationStatics_GetSkeletonBoneNames::InSkeleton' has a wrong offset!");
static_assert(offsetof(TLAnimationStatics_GetSkeletonBoneNames, ReturnValue) == 0x000008, "Member 'TLAnimationStatics_GetSkeletonBoneNames::ReturnValue' has a wrong offset!");

// Function TLScene.TLAnimationStatics.SkeletalMeshAssiginNewSkeleton
// 0x0018 (0x0018 - 0x0000)
struct TLAnimationStatics_SkeletalMeshAssiginNewSkeleton final
{
public:
	class USkeletalMesh*                          InSkeletalMesh;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeleton*                              InSkeleton;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLAnimationStatics_SkeletalMeshAssiginNewSkeleton) == 0x000008, "Wrong alignment on TLAnimationStatics_SkeletalMeshAssiginNewSkeleton");
static_assert(sizeof(TLAnimationStatics_SkeletalMeshAssiginNewSkeleton) == 0x000018, "Wrong size on TLAnimationStatics_SkeletalMeshAssiginNewSkeleton");
static_assert(offsetof(TLAnimationStatics_SkeletalMeshAssiginNewSkeleton, InSkeletalMesh) == 0x000000, "Member 'TLAnimationStatics_SkeletalMeshAssiginNewSkeleton::InSkeletalMesh' has a wrong offset!");
static_assert(offsetof(TLAnimationStatics_SkeletalMeshAssiginNewSkeleton, InSkeleton) == 0x000008, "Member 'TLAnimationStatics_SkeletalMeshAssiginNewSkeleton::InSkeleton' has a wrong offset!");
static_assert(offsetof(TLAnimationStatics_SkeletalMeshAssiginNewSkeleton, ReturnValue) == 0x000010, "Member 'TLAnimationStatics_SkeletalMeshAssiginNewSkeleton::ReturnValue' has a wrong offset!");

// Function TLScene.TLAssetStatics.DuplicateAsset
// 0x0030 (0x0030 - 0x0000)
struct TLAssetStatics_DuplicateAsset final
{
public:
	class FString                                 AssetName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackagePath;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OriginalObject;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLAssetStatics_DuplicateAsset) == 0x000008, "Wrong alignment on TLAssetStatics_DuplicateAsset");
static_assert(sizeof(TLAssetStatics_DuplicateAsset) == 0x000030, "Wrong size on TLAssetStatics_DuplicateAsset");
static_assert(offsetof(TLAssetStatics_DuplicateAsset, AssetName) == 0x000000, "Member 'TLAssetStatics_DuplicateAsset::AssetName' has a wrong offset!");
static_assert(offsetof(TLAssetStatics_DuplicateAsset, PackagePath) == 0x000010, "Member 'TLAssetStatics_DuplicateAsset::PackagePath' has a wrong offset!");
static_assert(offsetof(TLAssetStatics_DuplicateAsset, OriginalObject) == 0x000020, "Member 'TLAssetStatics_DuplicateAsset::OriginalObject' has a wrong offset!");
static_assert(offsetof(TLAssetStatics_DuplicateAsset, ReturnValue) == 0x000028, "Member 'TLAssetStatics_DuplicateAsset::ReturnValue' has a wrong offset!");

// Function TLScene.TLAssetStatics.DuplicateAssetWithDialog
// 0x0030 (0x0030 - 0x0000)
struct TLAssetStatics_DuplicateAssetWithDialog final
{
public:
	class FString                                 AssetName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackagePath;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OriginalObject;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLAssetStatics_DuplicateAssetWithDialog) == 0x000008, "Wrong alignment on TLAssetStatics_DuplicateAssetWithDialog");
static_assert(sizeof(TLAssetStatics_DuplicateAssetWithDialog) == 0x000030, "Wrong size on TLAssetStatics_DuplicateAssetWithDialog");
static_assert(offsetof(TLAssetStatics_DuplicateAssetWithDialog, AssetName) == 0x000000, "Member 'TLAssetStatics_DuplicateAssetWithDialog::AssetName' has a wrong offset!");
static_assert(offsetof(TLAssetStatics_DuplicateAssetWithDialog, PackagePath) == 0x000010, "Member 'TLAssetStatics_DuplicateAssetWithDialog::PackagePath' has a wrong offset!");
static_assert(offsetof(TLAssetStatics_DuplicateAssetWithDialog, OriginalObject) == 0x000020, "Member 'TLAssetStatics_DuplicateAssetWithDialog::OriginalObject' has a wrong offset!");
static_assert(offsetof(TLAssetStatics_DuplicateAssetWithDialog, ReturnValue) == 0x000028, "Member 'TLAssetStatics_DuplicateAssetWithDialog::ReturnValue' has a wrong offset!");

// Function TLScene.TLAssetStatics.FindSoftReferencesToObject
// 0x0028 (0x0028 - 0x0000)
struct TLAssetStatics_FindSoftReferencesToObject final
{
public:
	struct FSoftObjectPath                        TargetObject;                                      // 0x0000(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ReferencingObjects;                                // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLAssetStatics_FindSoftReferencesToObject) == 0x000008, "Wrong alignment on TLAssetStatics_FindSoftReferencesToObject");
static_assert(sizeof(TLAssetStatics_FindSoftReferencesToObject) == 0x000028, "Wrong size on TLAssetStatics_FindSoftReferencesToObject");
static_assert(offsetof(TLAssetStatics_FindSoftReferencesToObject, TargetObject) == 0x000000, "Member 'TLAssetStatics_FindSoftReferencesToObject::TargetObject' has a wrong offset!");
static_assert(offsetof(TLAssetStatics_FindSoftReferencesToObject, ReferencingObjects) == 0x000018, "Member 'TLAssetStatics_FindSoftReferencesToObject::ReferencingObjects' has a wrong offset!");

// Function TLScene.TLAssetStatics.RenameAssetIfEditorBuild
// 0x0030 (0x0030 - 0x0000)
struct TLAssetStatics_RenameAssetIfEditorBuild final
{
public:
	class UObject*                                InAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InNewPackagePath;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InNewName;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLAssetStatics_RenameAssetIfEditorBuild) == 0x000008, "Wrong alignment on TLAssetStatics_RenameAssetIfEditorBuild");
static_assert(sizeof(TLAssetStatics_RenameAssetIfEditorBuild) == 0x000030, "Wrong size on TLAssetStatics_RenameAssetIfEditorBuild");
static_assert(offsetof(TLAssetStatics_RenameAssetIfEditorBuild, InAsset) == 0x000000, "Member 'TLAssetStatics_RenameAssetIfEditorBuild::InAsset' has a wrong offset!");
static_assert(offsetof(TLAssetStatics_RenameAssetIfEditorBuild, InNewPackagePath) == 0x000008, "Member 'TLAssetStatics_RenameAssetIfEditorBuild::InNewPackagePath' has a wrong offset!");
static_assert(offsetof(TLAssetStatics_RenameAssetIfEditorBuild, InNewName) == 0x000018, "Member 'TLAssetStatics_RenameAssetIfEditorBuild::InNewName' has a wrong offset!");
static_assert(offsetof(TLAssetStatics_RenameAssetIfEditorBuild, ReturnValue) == 0x000028, "Member 'TLAssetStatics_RenameAssetIfEditorBuild::ReturnValue' has a wrong offset!");

// Function TLScene.TLMapBlueprintFunctionLibrary.BuildHierarchicalInstancedStaticMesh
// 0x0010 (0x0010 - 0x0000)
struct TLMapBlueprintFunctionLibrary_BuildHierarchicalInstancedStaticMesh final
{
public:
	class UHierarchicalInstancedStaticMeshComponent* Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Async;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLMapBlueprintFunctionLibrary_BuildHierarchicalInstancedStaticMesh) == 0x000008, "Wrong alignment on TLMapBlueprintFunctionLibrary_BuildHierarchicalInstancedStaticMesh");
static_assert(sizeof(TLMapBlueprintFunctionLibrary_BuildHierarchicalInstancedStaticMesh) == 0x000010, "Wrong size on TLMapBlueprintFunctionLibrary_BuildHierarchicalInstancedStaticMesh");
static_assert(offsetof(TLMapBlueprintFunctionLibrary_BuildHierarchicalInstancedStaticMesh, Component) == 0x000000, "Member 'TLMapBlueprintFunctionLibrary_BuildHierarchicalInstancedStaticMesh::Component' has a wrong offset!");
static_assert(offsetof(TLMapBlueprintFunctionLibrary_BuildHierarchicalInstancedStaticMesh, Async) == 0x000008, "Member 'TLMapBlueprintFunctionLibrary_BuildHierarchicalInstancedStaticMesh::Async' has a wrong offset!");
static_assert(offsetof(TLMapBlueprintFunctionLibrary_BuildHierarchicalInstancedStaticMesh, Force) == 0x000009, "Member 'TLMapBlueprintFunctionLibrary_BuildHierarchicalInstancedStaticMesh::Force' has a wrong offset!");
static_assert(offsetof(TLMapBlueprintFunctionLibrary_BuildHierarchicalInstancedStaticMesh, ReturnValue) == 0x00000A, "Member 'TLMapBlueprintFunctionLibrary_BuildHierarchicalInstancedStaticMesh::ReturnValue' has a wrong offset!");

// Function TLScene.TLMapBlueprintFunctionLibrary.UpdatePrimitiveBounds
// 0x0008 (0x0008 - 0x0000)
struct TLMapBlueprintFunctionLibrary_UpdatePrimitiveBounds final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMapBlueprintFunctionLibrary_UpdatePrimitiveBounds) == 0x000008, "Wrong alignment on TLMapBlueprintFunctionLibrary_UpdatePrimitiveBounds");
static_assert(sizeof(TLMapBlueprintFunctionLibrary_UpdatePrimitiveBounds) == 0x000008, "Wrong size on TLMapBlueprintFunctionLibrary_UpdatePrimitiveBounds");
static_assert(offsetof(TLMapBlueprintFunctionLibrary_UpdatePrimitiveBounds, PrimitiveComponent) == 0x000000, "Member 'TLMapBlueprintFunctionLibrary_UpdatePrimitiveBounds::PrimitiveComponent' has a wrong offset!");

// Function TLScene.TLLandscapeSamplerComponent.CalculateNormalsFromHeightfield
// 0x0028 (0x0028 - 0x0000)
struct TLLandscapeSamplerComponent_CalculateNormalsFromHeightfield final
{
public:
	TArray<float>                                 HeightField;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         NumWidth;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumHeight;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLLandscapeSamplerComponent_CalculateNormalsFromHeightfield) == 0x000008, "Wrong alignment on TLLandscapeSamplerComponent_CalculateNormalsFromHeightfield");
static_assert(sizeof(TLLandscapeSamplerComponent_CalculateNormalsFromHeightfield) == 0x000028, "Wrong size on TLLandscapeSamplerComponent_CalculateNormalsFromHeightfield");
static_assert(offsetof(TLLandscapeSamplerComponent_CalculateNormalsFromHeightfield, HeightField) == 0x000000, "Member 'TLLandscapeSamplerComponent_CalculateNormalsFromHeightfield::HeightField' has a wrong offset!");
static_assert(offsetof(TLLandscapeSamplerComponent_CalculateNormalsFromHeightfield, NumWidth) == 0x000010, "Member 'TLLandscapeSamplerComponent_CalculateNormalsFromHeightfield::NumWidth' has a wrong offset!");
static_assert(offsetof(TLLandscapeSamplerComponent_CalculateNormalsFromHeightfield, NumHeight) == 0x000014, "Member 'TLLandscapeSamplerComponent_CalculateNormalsFromHeightfield::NumHeight' has a wrong offset!");
static_assert(offsetof(TLLandscapeSamplerComponent_CalculateNormalsFromHeightfield, ReturnValue) == 0x000018, "Member 'TLLandscapeSamplerComponent_CalculateNormalsFromHeightfield::ReturnValue' has a wrong offset!");

// Function TLScene.TLLandscapeSamplerComponent.FindMajorSlopeNormal
// 0x0020 (0x0020 - 0x0000)
struct TLLandscapeSamplerComponent_FindMajorSlopeNormal final
{
public:
	TArray<struct FVector>                        Normals;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLLandscapeSamplerComponent_FindMajorSlopeNormal) == 0x000008, "Wrong alignment on TLLandscapeSamplerComponent_FindMajorSlopeNormal");
static_assert(sizeof(TLLandscapeSamplerComponent_FindMajorSlopeNormal) == 0x000020, "Wrong size on TLLandscapeSamplerComponent_FindMajorSlopeNormal");
static_assert(offsetof(TLLandscapeSamplerComponent_FindMajorSlopeNormal, Normals) == 0x000000, "Member 'TLLandscapeSamplerComponent_FindMajorSlopeNormal::Normals' has a wrong offset!");
static_assert(offsetof(TLLandscapeSamplerComponent_FindMajorSlopeNormal, ReturnValue) == 0x000010, "Member 'TLLandscapeSamplerComponent_FindMajorSlopeNormal::ReturnValue' has a wrong offset!");

// Function TLScene.TLLandscapeSamplerComponent.GetLandscapeHeights
// 0x0020 (0x0020 - 0x0000)
struct TLLandscapeSamplerComponent_GetLandscapeHeights final
{
public:
	struct FVector2D                              Extent;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWidth;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumHeight;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLLandscapeSamplerComponent_GetLandscapeHeights) == 0x000008, "Wrong alignment on TLLandscapeSamplerComponent_GetLandscapeHeights");
static_assert(sizeof(TLLandscapeSamplerComponent_GetLandscapeHeights) == 0x000020, "Wrong size on TLLandscapeSamplerComponent_GetLandscapeHeights");
static_assert(offsetof(TLLandscapeSamplerComponent_GetLandscapeHeights, Extent) == 0x000000, "Member 'TLLandscapeSamplerComponent_GetLandscapeHeights::Extent' has a wrong offset!");
static_assert(offsetof(TLLandscapeSamplerComponent_GetLandscapeHeights, NumWidth) == 0x000008, "Member 'TLLandscapeSamplerComponent_GetLandscapeHeights::NumWidth' has a wrong offset!");
static_assert(offsetof(TLLandscapeSamplerComponent_GetLandscapeHeights, NumHeight) == 0x00000C, "Member 'TLLandscapeSamplerComponent_GetLandscapeHeights::NumHeight' has a wrong offset!");
static_assert(offsetof(TLLandscapeSamplerComponent_GetLandscapeHeights, ReturnValue) == 0x000010, "Member 'TLLandscapeSamplerComponent_GetLandscapeHeights::ReturnValue' has a wrong offset!");

// Function TLScene.TLMapRoomStatics.GetMapRoomActorAllComponents
// 0x0018 (0x0018 - 0x0000)
struct TLMapRoomStatics_GetMapRoomActorAllComponents final
{
public:
	class AMapRoomActor*                          InMapRoomActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USceneComponent*>                OutSceneComponents;                                // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMapRoomStatics_GetMapRoomActorAllComponents) == 0x000008, "Wrong alignment on TLMapRoomStatics_GetMapRoomActorAllComponents");
static_assert(sizeof(TLMapRoomStatics_GetMapRoomActorAllComponents) == 0x000018, "Wrong size on TLMapRoomStatics_GetMapRoomActorAllComponents");
static_assert(offsetof(TLMapRoomStatics_GetMapRoomActorAllComponents, InMapRoomActor) == 0x000000, "Member 'TLMapRoomStatics_GetMapRoomActorAllComponents::InMapRoomActor' has a wrong offset!");
static_assert(offsetof(TLMapRoomStatics_GetMapRoomActorAllComponents, OutSceneComponents) == 0x000008, "Member 'TLMapRoomStatics_GetMapRoomActorAllComponents::OutSceneComponents' has a wrong offset!");

// Function TLScene.TLMapRoomStatics.GetMapRoomAllComponents
// 0x0018 (0x0018 - 0x0000)
struct TLMapRoomStatics_GetMapRoomAllComponents final
{
public:
	class UMaproom*                               InMapRoom;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USceneComponent*>                OutSceneComponents;                                // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMapRoomStatics_GetMapRoomAllComponents) == 0x000008, "Wrong alignment on TLMapRoomStatics_GetMapRoomAllComponents");
static_assert(sizeof(TLMapRoomStatics_GetMapRoomAllComponents) == 0x000018, "Wrong size on TLMapRoomStatics_GetMapRoomAllComponents");
static_assert(offsetof(TLMapRoomStatics_GetMapRoomAllComponents, InMapRoom) == 0x000000, "Member 'TLMapRoomStatics_GetMapRoomAllComponents::InMapRoom' has a wrong offset!");
static_assert(offsetof(TLMapRoomStatics_GetMapRoomAllComponents, OutSceneComponents) == 0x000008, "Member 'TLMapRoomStatics_GetMapRoomAllComponents::OutSceneComponents' has a wrong offset!");

// Function TLScene.TLMyPCActorComponent.OnFootprint
// 0x000C (0x000C - 0x0000)
struct TLMyPCActorComponent_OnFootprint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMyPCActorComponent_OnFootprint) == 0x000004, "Wrong alignment on TLMyPCActorComponent_OnFootprint");
static_assert(sizeof(TLMyPCActorComponent_OnFootprint) == 0x00000C, "Wrong size on TLMyPCActorComponent_OnFootprint");
static_assert(offsetof(TLMyPCActorComponent_OnFootprint, Location) == 0x000000, "Member 'TLMyPCActorComponent_OnFootprint::Location' has a wrong offset!");

// Function TLScene.TLMyPCActorComponent.OnModelLoaded
// 0x0008 (0x0008 - 0x0000)
struct TLMyPCActorComponent_OnModelLoaded final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMyPCActorComponent_OnModelLoaded) == 0x000008, "Wrong alignment on TLMyPCActorComponent_OnModelLoaded");
static_assert(sizeof(TLMyPCActorComponent_OnModelLoaded) == 0x000008, "Wrong size on TLMyPCActorComponent_OnModelLoaded");
static_assert(offsetof(TLMyPCActorComponent_OnModelLoaded, SkeletalMeshComponent) == 0x000000, "Member 'TLMyPCActorComponent_OnModelLoaded::SkeletalMeshComponent' has a wrong offset!");

// Function TLScene.TLMyPCActorComponent.OnMovementModeChanged
// 0x0004 (0x0004 - 0x0000)
struct TLMyPCActorComponent_OnMovementModeChanged final
{
public:
	EMovementMode                                 CurrentMovementMode;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CurrentCustomMode;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 PreviousMovementMode;                              // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PreviousCustomMode;                                // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMyPCActorComponent_OnMovementModeChanged) == 0x000001, "Wrong alignment on TLMyPCActorComponent_OnMovementModeChanged");
static_assert(sizeof(TLMyPCActorComponent_OnMovementModeChanged) == 0x000004, "Wrong size on TLMyPCActorComponent_OnMovementModeChanged");
static_assert(offsetof(TLMyPCActorComponent_OnMovementModeChanged, CurrentMovementMode) == 0x000000, "Member 'TLMyPCActorComponent_OnMovementModeChanged::CurrentMovementMode' has a wrong offset!");
static_assert(offsetof(TLMyPCActorComponent_OnMovementModeChanged, CurrentCustomMode) == 0x000001, "Member 'TLMyPCActorComponent_OnMovementModeChanged::CurrentCustomMode' has a wrong offset!");
static_assert(offsetof(TLMyPCActorComponent_OnMovementModeChanged, PreviousMovementMode) == 0x000002, "Member 'TLMyPCActorComponent_OnMovementModeChanged::PreviousMovementMode' has a wrong offset!");
static_assert(offsetof(TLMyPCActorComponent_OnMovementModeChanged, PreviousCustomMode) == 0x000003, "Member 'TLMyPCActorComponent_OnMovementModeChanged::PreviousCustomMode' has a wrong offset!");

// Function TLScene.CreatureRootMotionTask_CreatureFall.OnCreatureLanded
// 0x0088 (0x0088 - 0x0000)
struct CreatureRootMotionTask_CreatureFall_OnCreatureLanded final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreatureRootMotionTask_CreatureFall_OnCreatureLanded) == 0x000004, "Wrong alignment on CreatureRootMotionTask_CreatureFall_OnCreatureLanded");
static_assert(sizeof(CreatureRootMotionTask_CreatureFall_OnCreatureLanded) == 0x000088, "Wrong size on CreatureRootMotionTask_CreatureFall_OnCreatureLanded");
static_assert(offsetof(CreatureRootMotionTask_CreatureFall_OnCreatureLanded, Hit) == 0x000000, "Member 'CreatureRootMotionTask_CreatureFall_OnCreatureLanded::Hit' has a wrong offset!");

// Function TLScene.CreatureRootMotionTask_CreatureFall.OnCreaturemovementModeChanged
// 0x0010 (0x0010 - 0x0000)
struct CreatureRootMotionTask_CreatureFall_OnCreaturemovementModeChanged final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 PrevMovementMode;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PreviousCustomMode;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CreatureRootMotionTask_CreatureFall_OnCreaturemovementModeChanged) == 0x000008, "Wrong alignment on CreatureRootMotionTask_CreatureFall_OnCreaturemovementModeChanged");
static_assert(sizeof(CreatureRootMotionTask_CreatureFall_OnCreaturemovementModeChanged) == 0x000010, "Wrong size on CreatureRootMotionTask_CreatureFall_OnCreaturemovementModeChanged");
static_assert(offsetof(CreatureRootMotionTask_CreatureFall_OnCreaturemovementModeChanged, Character) == 0x000000, "Member 'CreatureRootMotionTask_CreatureFall_OnCreaturemovementModeChanged::Character' has a wrong offset!");
static_assert(offsetof(CreatureRootMotionTask_CreatureFall_OnCreaturemovementModeChanged, PrevMovementMode) == 0x000008, "Member 'CreatureRootMotionTask_CreatureFall_OnCreaturemovementModeChanged::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(CreatureRootMotionTask_CreatureFall_OnCreaturemovementModeChanged, PreviousCustomMode) == 0x000009, "Member 'CreatureRootMotionTask_CreatureFall_OnCreaturemovementModeChanged::PreviousCustomMode' has a wrong offset!");

// Function TLScene.TLCharacterStatics.GetCharacterHairGroomComponent
// 0x0010 (0x0010 - 0x0000)
struct TLCharacterStatics_GetCharacterHairGroomComponent final
{
public:
	class ATLCharacter*                           InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGroomComponent*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCharacterStatics_GetCharacterHairGroomComponent) == 0x000008, "Wrong alignment on TLCharacterStatics_GetCharacterHairGroomComponent");
static_assert(sizeof(TLCharacterStatics_GetCharacterHairGroomComponent) == 0x000010, "Wrong size on TLCharacterStatics_GetCharacterHairGroomComponent");
static_assert(offsetof(TLCharacterStatics_GetCharacterHairGroomComponent, InCharacter) == 0x000000, "Member 'TLCharacterStatics_GetCharacterHairGroomComponent::InCharacter' has a wrong offset!");
static_assert(offsetof(TLCharacterStatics_GetCharacterHairGroomComponent, ReturnValue) == 0x000008, "Member 'TLCharacterStatics_GetCharacterHairGroomComponent::ReturnValue' has a wrong offset!");

// Function TLScene.TLCharacterStatics.GetCharacterModelType
// 0x0010 (0x0010 - 0x0000)
struct TLCharacterStatics_GetCharacterModelType final
{
public:
	class UTLCharacterAsset*                      CharacterAsset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLCharacterModelType                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLCharacterStatics_GetCharacterModelType) == 0x000008, "Wrong alignment on TLCharacterStatics_GetCharacterModelType");
static_assert(sizeof(TLCharacterStatics_GetCharacterModelType) == 0x000010, "Wrong size on TLCharacterStatics_GetCharacterModelType");
static_assert(offsetof(TLCharacterStatics_GetCharacterModelType, CharacterAsset) == 0x000000, "Member 'TLCharacterStatics_GetCharacterModelType::CharacterAsset' has a wrong offset!");
static_assert(offsetof(TLCharacterStatics_GetCharacterModelType, ReturnValue) == 0x000008, "Member 'TLCharacterStatics_GetCharacterModelType::ReturnValue' has a wrong offset!");

// Function TLScene.TLCharacterStatics.GetGender
// 0x0018 (0x0018 - 0x0000)
struct TLCharacterStatics_GetGender final
{
public:
	class UTLPlayerCharacterAsset*                PCAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaleFallback;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLCharacterStatics_GetGender) == 0x000008, "Wrong alignment on TLCharacterStatics_GetGender");
static_assert(sizeof(TLCharacterStatics_GetGender) == 0x000018, "Wrong size on TLCharacterStatics_GetGender");
static_assert(offsetof(TLCharacterStatics_GetGender, PCAsset) == 0x000000, "Member 'TLCharacterStatics_GetGender::PCAsset' has a wrong offset!");
static_assert(offsetof(TLCharacterStatics_GetGender, bMaleFallback) == 0x000008, "Member 'TLCharacterStatics_GetGender::bMaleFallback' has a wrong offset!");
static_assert(offsetof(TLCharacterStatics_GetGender, ReturnValue) == 0x00000C, "Member 'TLCharacterStatics_GetGender::ReturnValue' has a wrong offset!");

// Function TLScene.TLCharacterStatics.GetMasterPosePartWithNPCPart
// 0x0002 (0x0002 - 0x0000)
struct TLCharacterStatics_GetMasterPosePartWithNPCPart final
{
public:
	ESnModelNpcCompositePart                      InNPCPartType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnModelCompositeMasterPoseParts              ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCharacterStatics_GetMasterPosePartWithNPCPart) == 0x000001, "Wrong alignment on TLCharacterStatics_GetMasterPosePartWithNPCPart");
static_assert(sizeof(TLCharacterStatics_GetMasterPosePartWithNPCPart) == 0x000002, "Wrong size on TLCharacterStatics_GetMasterPosePartWithNPCPart");
static_assert(offsetof(TLCharacterStatics_GetMasterPosePartWithNPCPart, InNPCPartType) == 0x000000, "Member 'TLCharacterStatics_GetMasterPosePartWithNPCPart::InNPCPartType' has a wrong offset!");
static_assert(offsetof(TLCharacterStatics_GetMasterPosePartWithNPCPart, ReturnValue) == 0x000001, "Member 'TLCharacterStatics_GetMasterPosePartWithNPCPart::ReturnValue' has a wrong offset!");

// Function TLScene.TLCharacterStatics.GetMasterPosePartWithPCPart
// 0x0002 (0x0002 - 0x0000)
struct TLCharacterStatics_GetMasterPosePartWithPCPart final
{
public:
	ESnModelCompositeArmorPart                    InPCPartType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnModelCompositeMasterPoseParts              ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCharacterStatics_GetMasterPosePartWithPCPart) == 0x000001, "Wrong alignment on TLCharacterStatics_GetMasterPosePartWithPCPart");
static_assert(sizeof(TLCharacterStatics_GetMasterPosePartWithPCPart) == 0x000002, "Wrong size on TLCharacterStatics_GetMasterPosePartWithPCPart");
static_assert(offsetof(TLCharacterStatics_GetMasterPosePartWithPCPart, InPCPartType) == 0x000000, "Member 'TLCharacterStatics_GetMasterPosePartWithPCPart::InPCPartType' has a wrong offset!");
static_assert(offsetof(TLCharacterStatics_GetMasterPosePartWithPCPart, ReturnValue) == 0x000001, "Member 'TLCharacterStatics_GetMasterPosePartWithPCPart::ReturnValue' has a wrong offset!");

// Function TLScene.TLCharacterStatics.GetPCPartSkinMaskTextureMaterialParamName
// 0x000C (0x000C - 0x0000)
struct TLCharacterStatics_GetPCPartSkinMaskTextureMaterialParamName final
{
public:
	ESnModelCompositeArmorPart                    InPCPartType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCharacterStatics_GetPCPartSkinMaskTextureMaterialParamName) == 0x000004, "Wrong alignment on TLCharacterStatics_GetPCPartSkinMaskTextureMaterialParamName");
static_assert(sizeof(TLCharacterStatics_GetPCPartSkinMaskTextureMaterialParamName) == 0x00000C, "Wrong size on TLCharacterStatics_GetPCPartSkinMaskTextureMaterialParamName");
static_assert(offsetof(TLCharacterStatics_GetPCPartSkinMaskTextureMaterialParamName, InPCPartType) == 0x000000, "Member 'TLCharacterStatics_GetPCPartSkinMaskTextureMaterialParamName::InPCPartType' has a wrong offset!");
static_assert(offsetof(TLCharacterStatics_GetPCPartSkinMaskTextureMaterialParamName, ReturnValue) == 0x000004, "Member 'TLCharacterStatics_GetPCPartSkinMaskTextureMaterialParamName::ReturnValue' has a wrong offset!");

// Function TLScene.TLCharacterStatics.GetPlayerCharacterPartType
// 0x0002 (0x0002 - 0x0000)
struct TLCharacterStatics_GetPlayerCharacterPartType final
{
public:
	ESnModelCompositeMasterPoseParts              InMasterPosePart;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnModelCompositeArmorPart                    ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCharacterStatics_GetPlayerCharacterPartType) == 0x000001, "Wrong alignment on TLCharacterStatics_GetPlayerCharacterPartType");
static_assert(sizeof(TLCharacterStatics_GetPlayerCharacterPartType) == 0x000002, "Wrong size on TLCharacterStatics_GetPlayerCharacterPartType");
static_assert(offsetof(TLCharacterStatics_GetPlayerCharacterPartType, InMasterPosePart) == 0x000000, "Member 'TLCharacterStatics_GetPlayerCharacterPartType::InMasterPosePart' has a wrong offset!");
static_assert(offsetof(TLCharacterStatics_GetPlayerCharacterPartType, ReturnValue) == 0x000001, "Member 'TLCharacterStatics_GetPlayerCharacterPartType::ReturnValue' has a wrong offset!");

// Function TLScene.TLCharacterStatics.SetGroomComponentHairWidth
// 0x0010 (0x0010 - 0x0000)
struct TLCharacterStatics_SetGroomComponentHairWidth final
{
public:
	class UGroomComponent*                        InGroomComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHairWidth;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLCharacterStatics_SetGroomComponentHairWidth) == 0x000008, "Wrong alignment on TLCharacterStatics_SetGroomComponentHairWidth");
static_assert(sizeof(TLCharacterStatics_SetGroomComponentHairWidth) == 0x000010, "Wrong size on TLCharacterStatics_SetGroomComponentHairWidth");
static_assert(offsetof(TLCharacterStatics_SetGroomComponentHairWidth, InGroomComponent) == 0x000000, "Member 'TLCharacterStatics_SetGroomComponentHairWidth::InGroomComponent' has a wrong offset!");
static_assert(offsetof(TLCharacterStatics_SetGroomComponentHairWidth, InHairWidth) == 0x000008, "Member 'TLCharacterStatics_SetGroomComponentHairWidth::InHairWidth' has a wrong offset!");

// Function TLScene.TLCharacterStatics.SetGroomComponentIgnoreOnTransformChanged
// 0x0010 (0x0010 - 0x0000)
struct TLCharacterStatics_SetGroomComponentIgnoreOnTransformChanged final
{
public:
	class UGroomComponent*                        InGroomComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLCharacterStatics_SetGroomComponentIgnoreOnTransformChanged) == 0x000008, "Wrong alignment on TLCharacterStatics_SetGroomComponentIgnoreOnTransformChanged");
static_assert(sizeof(TLCharacterStatics_SetGroomComponentIgnoreOnTransformChanged) == 0x000010, "Wrong size on TLCharacterStatics_SetGroomComponentIgnoreOnTransformChanged");
static_assert(offsetof(TLCharacterStatics_SetGroomComponentIgnoreOnTransformChanged, InGroomComponent) == 0x000000, "Member 'TLCharacterStatics_SetGroomComponentIgnoreOnTransformChanged::InGroomComponent' has a wrong offset!");
static_assert(offsetof(TLCharacterStatics_SetGroomComponentIgnoreOnTransformChanged, bEnabled) == 0x000008, "Member 'TLCharacterStatics_SetGroomComponentIgnoreOnTransformChanged::bEnabled' has a wrong offset!");

// Function TLScene.TLCheatManager.SetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct TLCheatManager_SetTargetActor final
{
public:
	class AActor*                                 InTargetActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCheatManager_SetTargetActor) == 0x000008, "Wrong alignment on TLCheatManager_SetTargetActor");
static_assert(sizeof(TLCheatManager_SetTargetActor) == 0x000008, "Wrong size on TLCheatManager_SetTargetActor");
static_assert(offsetof(TLCheatManager_SetTargetActor, InTargetActor) == 0x000000, "Member 'TLCheatManager_SetTargetActor::InTargetActor' has a wrong offset!");

// Function TLScene.TLCheatManager.TLShowPlayerRuler
// 0x0004 (0x0004 - 0x0000)
struct TLCheatManager_TLShowPlayerRuler final
{
public:
	int32                                         CircleCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCheatManager_TLShowPlayerRuler) == 0x000004, "Wrong alignment on TLCheatManager_TLShowPlayerRuler");
static_assert(sizeof(TLCheatManager_TLShowPlayerRuler) == 0x000004, "Wrong size on TLCheatManager_TLShowPlayerRuler");
static_assert(offsetof(TLCheatManager_TLShowPlayerRuler, CircleCount) == 0x000000, "Member 'TLCheatManager_TLShowPlayerRuler::CircleCount' has a wrong offset!");

// Function TLScene.TLDevelopmentStatics.EnableBudget
// 0x0010 (0x0010 - 0x0000)
struct TLDevelopmentStatics_EnableBudget final
{
public:
	class FString                                 BudgetName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLDevelopmentStatics_EnableBudget) == 0x000008, "Wrong alignment on TLDevelopmentStatics_EnableBudget");
static_assert(sizeof(TLDevelopmentStatics_EnableBudget) == 0x000010, "Wrong size on TLDevelopmentStatics_EnableBudget");
static_assert(offsetof(TLDevelopmentStatics_EnableBudget, BudgetName) == 0x000000, "Member 'TLDevelopmentStatics_EnableBudget::BudgetName' has a wrong offset!");

// Function TLScene.TLDevelopmentStatics.IsAutoSyncCutSceneTable
// 0x0001 (0x0001 - 0x0000)
struct TLDevelopmentStatics_IsAutoSyncCutSceneTable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLDevelopmentStatics_IsAutoSyncCutSceneTable) == 0x000001, "Wrong alignment on TLDevelopmentStatics_IsAutoSyncCutSceneTable");
static_assert(sizeof(TLDevelopmentStatics_IsAutoSyncCutSceneTable) == 0x000001, "Wrong size on TLDevelopmentStatics_IsAutoSyncCutSceneTable");
static_assert(offsetof(TLDevelopmentStatics_IsAutoSyncCutSceneTable, ReturnValue) == 0x000000, "Member 'TLDevelopmentStatics_IsAutoSyncCutSceneTable::ReturnValue' has a wrong offset!");

// Function TLScene.TLDevelopmentStatics.IsFastInGame
// 0x0001 (0x0001 - 0x0000)
struct TLDevelopmentStatics_IsFastInGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLDevelopmentStatics_IsFastInGame) == 0x000001, "Wrong alignment on TLDevelopmentStatics_IsFastInGame");
static_assert(sizeof(TLDevelopmentStatics_IsFastInGame) == 0x000001, "Wrong size on TLDevelopmentStatics_IsFastInGame");
static_assert(offsetof(TLDevelopmentStatics_IsFastInGame, ReturnValue) == 0x000000, "Member 'TLDevelopmentStatics_IsFastInGame::ReturnValue' has a wrong offset!");

// Function TLScene.TLDevelopmentStatics.IsFastNewCharacter
// 0x0001 (0x0001 - 0x0000)
struct TLDevelopmentStatics_IsFastNewCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLDevelopmentStatics_IsFastNewCharacter) == 0x000001, "Wrong alignment on TLDevelopmentStatics_IsFastNewCharacter");
static_assert(sizeof(TLDevelopmentStatics_IsFastNewCharacter) == 0x000001, "Wrong size on TLDevelopmentStatics_IsFastNewCharacter");
static_assert(offsetof(TLDevelopmentStatics_IsFastNewCharacter, ReturnValue) == 0x000000, "Member 'TLDevelopmentStatics_IsFastNewCharacter::ReturnValue' has a wrong offset!");

// Function TLScene.TLDevelopmentStatics.IsPlayerCharacterCustomizingEnabled
// 0x0001 (0x0001 - 0x0000)
struct TLDevelopmentStatics_IsPlayerCharacterCustomizingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLDevelopmentStatics_IsPlayerCharacterCustomizingEnabled) == 0x000001, "Wrong alignment on TLDevelopmentStatics_IsPlayerCharacterCustomizingEnabled");
static_assert(sizeof(TLDevelopmentStatics_IsPlayerCharacterCustomizingEnabled) == 0x000001, "Wrong size on TLDevelopmentStatics_IsPlayerCharacterCustomizingEnabled");
static_assert(offsetof(TLDevelopmentStatics_IsPlayerCharacterCustomizingEnabled, ReturnValue) == 0x000000, "Member 'TLDevelopmentStatics_IsPlayerCharacterCustomizingEnabled::ReturnValue' has a wrong offset!");

// Function TLScene.TLDevelopmentStatics.IsSoundEnabled
// 0x0010 (0x0010 - 0x0000)
struct TLDevelopmentStatics_IsSoundEnabled final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLDevelopmentStatics_IsSoundEnabled) == 0x000008, "Wrong alignment on TLDevelopmentStatics_IsSoundEnabled");
static_assert(sizeof(TLDevelopmentStatics_IsSoundEnabled) == 0x000010, "Wrong size on TLDevelopmentStatics_IsSoundEnabled");
static_assert(offsetof(TLDevelopmentStatics_IsSoundEnabled, World) == 0x000000, "Member 'TLDevelopmentStatics_IsSoundEnabled::World' has a wrong offset!");
static_assert(offsetof(TLDevelopmentStatics_IsSoundEnabled, ReturnValue) == 0x000008, "Member 'TLDevelopmentStatics_IsSoundEnabled::ReturnValue' has a wrong offset!");

// Function TLScene.TLDevelopmentStatics.IsTutorialEnabled
// 0x0010 (0x0010 - 0x0000)
struct TLDevelopmentStatics_IsTutorialEnabled final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLDevelopmentStatics_IsTutorialEnabled) == 0x000008, "Wrong alignment on TLDevelopmentStatics_IsTutorialEnabled");
static_assert(sizeof(TLDevelopmentStatics_IsTutorialEnabled) == 0x000010, "Wrong size on TLDevelopmentStatics_IsTutorialEnabled");
static_assert(offsetof(TLDevelopmentStatics_IsTutorialEnabled, World) == 0x000000, "Member 'TLDevelopmentStatics_IsTutorialEnabled::World' has a wrong offset!");
static_assert(offsetof(TLDevelopmentStatics_IsTutorialEnabled, ReturnValue) == 0x000008, "Member 'TLDevelopmentStatics_IsTutorialEnabled::ReturnValue' has a wrong offset!");

// Function TLScene.TLDevelopmentStatics.IsWorldCompositionLevelLODEnabled
// 0x0010 (0x0010 - 0x0000)
struct TLDevelopmentStatics_IsWorldCompositionLevelLODEnabled final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLDevelopmentStatics_IsWorldCompositionLevelLODEnabled) == 0x000008, "Wrong alignment on TLDevelopmentStatics_IsWorldCompositionLevelLODEnabled");
static_assert(sizeof(TLDevelopmentStatics_IsWorldCompositionLevelLODEnabled) == 0x000010, "Wrong size on TLDevelopmentStatics_IsWorldCompositionLevelLODEnabled");
static_assert(offsetof(TLDevelopmentStatics_IsWorldCompositionLevelLODEnabled, World) == 0x000000, "Member 'TLDevelopmentStatics_IsWorldCompositionLevelLODEnabled::World' has a wrong offset!");
static_assert(offsetof(TLDevelopmentStatics_IsWorldCompositionLevelLODEnabled, ReturnValue) == 0x000008, "Member 'TLDevelopmentStatics_IsWorldCompositionLevelLODEnabled::ReturnValue' has a wrong offset!");

// Function TLScene.TLDevelopmentStatics.ParseWorldInfoAttributeString
// 0x0038 (0x0038 - 0x0000)
struct TLDevelopmentStatics_ParseWorldInfoAttributeString final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InAttributeName;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutAttributeValue;                                 // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLDevelopmentStatics_ParseWorldInfoAttributeString) == 0x000008, "Wrong alignment on TLDevelopmentStatics_ParseWorldInfoAttributeString");
static_assert(sizeof(TLDevelopmentStatics_ParseWorldInfoAttributeString) == 0x000038, "Wrong size on TLDevelopmentStatics_ParseWorldInfoAttributeString");
static_assert(offsetof(TLDevelopmentStatics_ParseWorldInfoAttributeString, InString) == 0x000000, "Member 'TLDevelopmentStatics_ParseWorldInfoAttributeString::InString' has a wrong offset!");
static_assert(offsetof(TLDevelopmentStatics_ParseWorldInfoAttributeString, InAttributeName) == 0x000010, "Member 'TLDevelopmentStatics_ParseWorldInfoAttributeString::InAttributeName' has a wrong offset!");
static_assert(offsetof(TLDevelopmentStatics_ParseWorldInfoAttributeString, OutAttributeValue) == 0x000020, "Member 'TLDevelopmentStatics_ParseWorldInfoAttributeString::OutAttributeValue' has a wrong offset!");
static_assert(offsetof(TLDevelopmentStatics_ParseWorldInfoAttributeString, ReturnValue) == 0x000030, "Member 'TLDevelopmentStatics_ParseWorldInfoAttributeString::ReturnValue' has a wrong offset!");

// Function TLScene.TLDevelopmentStatics.ParseWorldInfoString
// 0x0050 (0x0050 - 0x0000)
struct TLDevelopmentStatics_ParseWorldInfoString final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutMapId;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutPlayerPos;                                      // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutPlayerRotation;                                 // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OutCameraPos;                                      // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCameraFwd;                                      // 0x0038(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutCameraDistance;                                 // 0x0044(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLDevelopmentStatics_ParseWorldInfoString) == 0x000008, "Wrong alignment on TLDevelopmentStatics_ParseWorldInfoString");
static_assert(sizeof(TLDevelopmentStatics_ParseWorldInfoString) == 0x000050, "Wrong size on TLDevelopmentStatics_ParseWorldInfoString");
static_assert(offsetof(TLDevelopmentStatics_ParseWorldInfoString, InString) == 0x000000, "Member 'TLDevelopmentStatics_ParseWorldInfoString::InString' has a wrong offset!");
static_assert(offsetof(TLDevelopmentStatics_ParseWorldInfoString, OutMapId) == 0x000010, "Member 'TLDevelopmentStatics_ParseWorldInfoString::OutMapId' has a wrong offset!");
static_assert(offsetof(TLDevelopmentStatics_ParseWorldInfoString, OutPlayerPos) == 0x000014, "Member 'TLDevelopmentStatics_ParseWorldInfoString::OutPlayerPos' has a wrong offset!");
static_assert(offsetof(TLDevelopmentStatics_ParseWorldInfoString, OutPlayerRotation) == 0x000020, "Member 'TLDevelopmentStatics_ParseWorldInfoString::OutPlayerRotation' has a wrong offset!");
static_assert(offsetof(TLDevelopmentStatics_ParseWorldInfoString, OutCameraPos) == 0x00002C, "Member 'TLDevelopmentStatics_ParseWorldInfoString::OutCameraPos' has a wrong offset!");
static_assert(offsetof(TLDevelopmentStatics_ParseWorldInfoString, OutCameraFwd) == 0x000038, "Member 'TLDevelopmentStatics_ParseWorldInfoString::OutCameraFwd' has a wrong offset!");
static_assert(offsetof(TLDevelopmentStatics_ParseWorldInfoString, OutCameraDistance) == 0x000044, "Member 'TLDevelopmentStatics_ParseWorldInfoString::OutCameraDistance' has a wrong offset!");
static_assert(offsetof(TLDevelopmentStatics_ParseWorldInfoString, ReturnValue) == 0x000048, "Member 'TLDevelopmentStatics_ParseWorldInfoString::ReturnValue' has a wrong offset!");

// Function TLScene.TLDevelopmentStatics.ParseWorldInfoStringShort
// 0x0028 (0x0028 - 0x0000)
struct TLDevelopmentStatics_ParseWorldInfoStringShort final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutMapId;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutPlayerPos;                                      // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLDevelopmentStatics_ParseWorldInfoStringShort) == 0x000008, "Wrong alignment on TLDevelopmentStatics_ParseWorldInfoStringShort");
static_assert(sizeof(TLDevelopmentStatics_ParseWorldInfoStringShort) == 0x000028, "Wrong size on TLDevelopmentStatics_ParseWorldInfoStringShort");
static_assert(offsetof(TLDevelopmentStatics_ParseWorldInfoStringShort, InString) == 0x000000, "Member 'TLDevelopmentStatics_ParseWorldInfoStringShort::InString' has a wrong offset!");
static_assert(offsetof(TLDevelopmentStatics_ParseWorldInfoStringShort, OutMapId) == 0x000010, "Member 'TLDevelopmentStatics_ParseWorldInfoStringShort::OutMapId' has a wrong offset!");
static_assert(offsetof(TLDevelopmentStatics_ParseWorldInfoStringShort, OutPlayerPos) == 0x000014, "Member 'TLDevelopmentStatics_ParseWorldInfoStringShort::OutPlayerPos' has a wrong offset!");
static_assert(offsetof(TLDevelopmentStatics_ParseWorldInfoStringShort, ReturnValue) == 0x000020, "Member 'TLDevelopmentStatics_ParseWorldInfoStringShort::ReturnValue' has a wrong offset!");

// Function TLScene.TLDevelopmentStatics.ParseWorldInfoVectorString
// 0x0020 (0x0020 - 0x0000)
struct TLDevelopmentStatics_ParseWorldInfoVectorString final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutVector;                                         // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLDevelopmentStatics_ParseWorldInfoVectorString) == 0x000008, "Wrong alignment on TLDevelopmentStatics_ParseWorldInfoVectorString");
static_assert(sizeof(TLDevelopmentStatics_ParseWorldInfoVectorString) == 0x000020, "Wrong size on TLDevelopmentStatics_ParseWorldInfoVectorString");
static_assert(offsetof(TLDevelopmentStatics_ParseWorldInfoVectorString, InString) == 0x000000, "Member 'TLDevelopmentStatics_ParseWorldInfoVectorString::InString' has a wrong offset!");
static_assert(offsetof(TLDevelopmentStatics_ParseWorldInfoVectorString, OutVector) == 0x000010, "Member 'TLDevelopmentStatics_ParseWorldInfoVectorString::OutVector' has a wrong offset!");
static_assert(offsetof(TLDevelopmentStatics_ParseWorldInfoVectorString, ReturnValue) == 0x00001C, "Member 'TLDevelopmentStatics_ParseWorldInfoVectorString::ReturnValue' has a wrong offset!");

// Function TLScene.TLDevelopmentStatics.ShouldAnimationAssetsBeLazyLoaded
// 0x0001 (0x0001 - 0x0000)
struct TLDevelopmentStatics_ShouldAnimationAssetsBeLazyLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLDevelopmentStatics_ShouldAnimationAssetsBeLazyLoaded) == 0x000001, "Wrong alignment on TLDevelopmentStatics_ShouldAnimationAssetsBeLazyLoaded");
static_assert(sizeof(TLDevelopmentStatics_ShouldAnimationAssetsBeLazyLoaded) == 0x000001, "Wrong size on TLDevelopmentStatics_ShouldAnimationAssetsBeLazyLoaded");
static_assert(offsetof(TLDevelopmentStatics_ShouldAnimationAssetsBeLazyLoaded, ReturnValue) == 0x000000, "Member 'TLDevelopmentStatics_ShouldAnimationAssetsBeLazyLoaded::ReturnValue' has a wrong offset!");

// Function TLScene.TLDevelopmentStatics.ShouldMaximizeGameThreadLoadingTimeLimit
// 0x0001 (0x0001 - 0x0000)
struct TLDevelopmentStatics_ShouldMaximizeGameThreadLoadingTimeLimit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLDevelopmentStatics_ShouldMaximizeGameThreadLoadingTimeLimit) == 0x000001, "Wrong alignment on TLDevelopmentStatics_ShouldMaximizeGameThreadLoadingTimeLimit");
static_assert(sizeof(TLDevelopmentStatics_ShouldMaximizeGameThreadLoadingTimeLimit) == 0x000001, "Wrong size on TLDevelopmentStatics_ShouldMaximizeGameThreadLoadingTimeLimit");
static_assert(offsetof(TLDevelopmentStatics_ShouldMaximizeGameThreadLoadingTimeLimit, ReturnValue) == 0x000000, "Member 'TLDevelopmentStatics_ShouldMaximizeGameThreadLoadingTimeLimit::ReturnValue' has a wrong offset!");

// Function TLScene.TLDevelopmentStatics.ShouldSkipIntroGameState
// 0x0010 (0x0010 - 0x0000)
struct TLDevelopmentStatics_ShouldSkipIntroGameState final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLDevelopmentStatics_ShouldSkipIntroGameState) == 0x000008, "Wrong alignment on TLDevelopmentStatics_ShouldSkipIntroGameState");
static_assert(sizeof(TLDevelopmentStatics_ShouldSkipIntroGameState) == 0x000010, "Wrong size on TLDevelopmentStatics_ShouldSkipIntroGameState");
static_assert(offsetof(TLDevelopmentStatics_ShouldSkipIntroGameState, World) == 0x000000, "Member 'TLDevelopmentStatics_ShouldSkipIntroGameState::World' has a wrong offset!");
static_assert(offsetof(TLDevelopmentStatics_ShouldSkipIntroGameState, ReturnValue) == 0x000008, "Member 'TLDevelopmentStatics_ShouldSkipIntroGameState::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.ActorIsPendingKillPendingOrHasLifeSpan
// 0x0010 (0x0010 - 0x0000)
struct TLEngineStatics_ActorIsPendingKillPendingOrHasLifeSpan final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLEngineStatics_ActorIsPendingKillPendingOrHasLifeSpan) == 0x000008, "Wrong alignment on TLEngineStatics_ActorIsPendingKillPendingOrHasLifeSpan");
static_assert(sizeof(TLEngineStatics_ActorIsPendingKillPendingOrHasLifeSpan) == 0x000010, "Wrong size on TLEngineStatics_ActorIsPendingKillPendingOrHasLifeSpan");
static_assert(offsetof(TLEngineStatics_ActorIsPendingKillPendingOrHasLifeSpan, Actor) == 0x000000, "Member 'TLEngineStatics_ActorIsPendingKillPendingOrHasLifeSpan::Actor' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_ActorIsPendingKillPendingOrHasLifeSpan, ReturnValue) == 0x000008, "Member 'TLEngineStatics_ActorIsPendingKillPendingOrHasLifeSpan::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.BuildNormalTexture
// 0x0028 (0x0028 - 0x0000)
struct TLEngineStatics_BuildNormalTexture final
{
public:
	TArray<struct FVector>                        Normals;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Outer_0;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_BuildNormalTexture) == 0x000008, "Wrong alignment on TLEngineStatics_BuildNormalTexture");
static_assert(sizeof(TLEngineStatics_BuildNormalTexture) == 0x000028, "Wrong size on TLEngineStatics_BuildNormalTexture");
static_assert(offsetof(TLEngineStatics_BuildNormalTexture, Normals) == 0x000000, "Member 'TLEngineStatics_BuildNormalTexture::Normals' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_BuildNormalTexture, Width) == 0x000010, "Member 'TLEngineStatics_BuildNormalTexture::Width' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_BuildNormalTexture, Height) == 0x000014, "Member 'TLEngineStatics_BuildNormalTexture::Height' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_BuildNormalTexture, Outer_0) == 0x000018, "Member 'TLEngineStatics_BuildNormalTexture::Outer_0' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_BuildNormalTexture, ReturnValue) == 0x000020, "Member 'TLEngineStatics_BuildNormalTexture::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.BuildVelocityTexture
// 0x0028 (0x0028 - 0x0000)
struct TLEngineStatics_BuildVelocityTexture final
{
public:
	TArray<struct FVector>                        Normals;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Outer_0;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_BuildVelocityTexture) == 0x000008, "Wrong alignment on TLEngineStatics_BuildVelocityTexture");
static_assert(sizeof(TLEngineStatics_BuildVelocityTexture) == 0x000028, "Wrong size on TLEngineStatics_BuildVelocityTexture");
static_assert(offsetof(TLEngineStatics_BuildVelocityTexture, Normals) == 0x000000, "Member 'TLEngineStatics_BuildVelocityTexture::Normals' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_BuildVelocityTexture, Width) == 0x000010, "Member 'TLEngineStatics_BuildVelocityTexture::Width' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_BuildVelocityTexture, Height) == 0x000014, "Member 'TLEngineStatics_BuildVelocityTexture::Height' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_BuildVelocityTexture, Outer_0) == 0x000018, "Member 'TLEngineStatics_BuildVelocityTexture::Outer_0' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_BuildVelocityTexture, ReturnValue) == 0x000020, "Member 'TLEngineStatics_BuildVelocityTexture::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.CalculateDesiredMaxDrawDistanceForISM
// 0x0010 (0x0010 - 0x0000)
struct TLEngineStatics_CalculateDesiredMaxDrawDistanceForISM final
{
public:
	class UInstancedStaticMeshComponent*          InstancedStaticMesh;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLEngineStatics_CalculateDesiredMaxDrawDistanceForISM) == 0x000008, "Wrong alignment on TLEngineStatics_CalculateDesiredMaxDrawDistanceForISM");
static_assert(sizeof(TLEngineStatics_CalculateDesiredMaxDrawDistanceForISM) == 0x000010, "Wrong size on TLEngineStatics_CalculateDesiredMaxDrawDistanceForISM");
static_assert(offsetof(TLEngineStatics_CalculateDesiredMaxDrawDistanceForISM, InstancedStaticMesh) == 0x000000, "Member 'TLEngineStatics_CalculateDesiredMaxDrawDistanceForISM::InstancedStaticMesh' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_CalculateDesiredMaxDrawDistanceForISM, ReturnValue) == 0x000008, "Member 'TLEngineStatics_CalculateDesiredMaxDrawDistanceForISM::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.GetActiveDeviceProfileName
// 0x0010 (0x0010 - 0x0000)
struct TLEngineStatics_GetActiveDeviceProfileName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_GetActiveDeviceProfileName) == 0x000008, "Wrong alignment on TLEngineStatics_GetActiveDeviceProfileName");
static_assert(sizeof(TLEngineStatics_GetActiveDeviceProfileName) == 0x000010, "Wrong size on TLEngineStatics_GetActiveDeviceProfileName");
static_assert(offsetof(TLEngineStatics_GetActiveDeviceProfileName, ReturnValue) == 0x000000, "Member 'TLEngineStatics_GetActiveDeviceProfileName::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.GetBaseDeviceProfileName
// 0x0010 (0x0010 - 0x0000)
struct TLEngineStatics_GetBaseDeviceProfileName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_GetBaseDeviceProfileName) == 0x000008, "Wrong alignment on TLEngineStatics_GetBaseDeviceProfileName");
static_assert(sizeof(TLEngineStatics_GetBaseDeviceProfileName) == 0x000010, "Wrong size on TLEngineStatics_GetBaseDeviceProfileName");
static_assert(offsetof(TLEngineStatics_GetBaseDeviceProfileName, ReturnValue) == 0x000000, "Member 'TLEngineStatics_GetBaseDeviceProfileName::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.GetFirstGameplayTask
// 0x0018 (0x0018 - 0x0000)
struct TLEngineStatics_GetFirstGameplayTask final
{
public:
	class UGameplayTasksComponent*                InGameplayTasksComponent;                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayTask>              InClass;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayTask*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_GetFirstGameplayTask) == 0x000008, "Wrong alignment on TLEngineStatics_GetFirstGameplayTask");
static_assert(sizeof(TLEngineStatics_GetFirstGameplayTask) == 0x000018, "Wrong size on TLEngineStatics_GetFirstGameplayTask");
static_assert(offsetof(TLEngineStatics_GetFirstGameplayTask, InGameplayTasksComponent) == 0x000000, "Member 'TLEngineStatics_GetFirstGameplayTask::InGameplayTasksComponent' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_GetFirstGameplayTask, InClass) == 0x000008, "Member 'TLEngineStatics_GetFirstGameplayTask::InClass' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_GetFirstGameplayTask, ReturnValue) == 0x000010, "Member 'TLEngineStatics_GetFirstGameplayTask::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.GetFirstLocalPlayerController
// 0x0010 (0x0010 - 0x0000)
struct TLEngineStatics_GetFirstLocalPlayerController final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_GetFirstLocalPlayerController) == 0x000008, "Wrong alignment on TLEngineStatics_GetFirstLocalPlayerController");
static_assert(sizeof(TLEngineStatics_GetFirstLocalPlayerController) == 0x000010, "Wrong size on TLEngineStatics_GetFirstLocalPlayerController");
static_assert(offsetof(TLEngineStatics_GetFirstLocalPlayerController, WorldContextObject) == 0x000000, "Member 'TLEngineStatics_GetFirstLocalPlayerController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_GetFirstLocalPlayerController, ReturnValue) == 0x000008, "Member 'TLEngineStatics_GetFirstLocalPlayerController::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.GetLandscapeMaterials
// 0x0018 (0x0018 - 0x0000)
struct TLEngineStatics_GetLandscapeMaterials final
{
public:
	class ULandscapeComponent*                    LandscapeComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceConstant*>      ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_GetLandscapeMaterials) == 0x000008, "Wrong alignment on TLEngineStatics_GetLandscapeMaterials");
static_assert(sizeof(TLEngineStatics_GetLandscapeMaterials) == 0x000018, "Wrong size on TLEngineStatics_GetLandscapeMaterials");
static_assert(offsetof(TLEngineStatics_GetLandscapeMaterials, LandscapeComponent) == 0x000000, "Member 'TLEngineStatics_GetLandscapeMaterials::LandscapeComponent' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_GetLandscapeMaterials, ReturnValue) == 0x000008, "Member 'TLEngineStatics_GetLandscapeMaterials::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.GetMaterialBlendMode
// 0x0010 (0x0010 - 0x0000)
struct TLEngineStatics_GetMaterialBlendMode final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlendMode                                    ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLEngineStatics_GetMaterialBlendMode) == 0x000008, "Wrong alignment on TLEngineStatics_GetMaterialBlendMode");
static_assert(sizeof(TLEngineStatics_GetMaterialBlendMode) == 0x000010, "Wrong size on TLEngineStatics_GetMaterialBlendMode");
static_assert(offsetof(TLEngineStatics_GetMaterialBlendMode, Material) == 0x000000, "Member 'TLEngineStatics_GetMaterialBlendMode::Material' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_GetMaterialBlendMode, ReturnValue) == 0x000008, "Member 'TLEngineStatics_GetMaterialBlendMode::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.GetSkipUnnecessaryDOF
// 0x0001 (0x0001 - 0x0000)
struct TLEngineStatics_GetSkipUnnecessaryDOF final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_GetSkipUnnecessaryDOF) == 0x000001, "Wrong alignment on TLEngineStatics_GetSkipUnnecessaryDOF");
static_assert(sizeof(TLEngineStatics_GetSkipUnnecessaryDOF) == 0x000001, "Wrong size on TLEngineStatics_GetSkipUnnecessaryDOF");
static_assert(offsetof(TLEngineStatics_GetSkipUnnecessaryDOF, ReturnValue) == 0x000000, "Member 'TLEngineStatics_GetSkipUnnecessaryDOF::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.GetSuperSamplingMethod
// 0x0001 (0x0001 - 0x0000)
struct TLEngineStatics_GetSuperSamplingMethod final
{
public:
	ETLEngineSuperSamplingMethod                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_GetSuperSamplingMethod) == 0x000001, "Wrong alignment on TLEngineStatics_GetSuperSamplingMethod");
static_assert(sizeof(TLEngineStatics_GetSuperSamplingMethod) == 0x000001, "Wrong size on TLEngineStatics_GetSuperSamplingMethod");
static_assert(offsetof(TLEngineStatics_GetSuperSamplingMethod, ReturnValue) == 0x000000, "Member 'TLEngineStatics_GetSuperSamplingMethod::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.IsDLSSModeSupported
// 0x0008 (0x0008 - 0x0000)
struct TLEngineStatics_IsDLSSModeSupported final
{
public:
	int32                                         InDLSSMode;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLEngineStatics_IsDLSSModeSupported) == 0x000004, "Wrong alignment on TLEngineStatics_IsDLSSModeSupported");
static_assert(sizeof(TLEngineStatics_IsDLSSModeSupported) == 0x000008, "Wrong size on TLEngineStatics_IsDLSSModeSupported");
static_assert(offsetof(TLEngineStatics_IsDLSSModeSupported, InDLSSMode) == 0x000000, "Member 'TLEngineStatics_IsDLSSModeSupported::InDLSSMode' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_IsDLSSModeSupported, ReturnValue) == 0x000004, "Member 'TLEngineStatics_IsDLSSModeSupported::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.IsDLSSSupported
// 0x0001 (0x0001 - 0x0000)
struct TLEngineStatics_IsDLSSSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_IsDLSSSupported) == 0x000001, "Wrong alignment on TLEngineStatics_IsDLSSSupported");
static_assert(sizeof(TLEngineStatics_IsDLSSSupported) == 0x000001, "Wrong size on TLEngineStatics_IsDLSSSupported");
static_assert(offsetof(TLEngineStatics_IsDLSSSupported, ReturnValue) == 0x000000, "Member 'TLEngineStatics_IsDLSSSupported::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.IsFSR2Supported
// 0x0001 (0x0001 - 0x0000)
struct TLEngineStatics_IsFSR2Supported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_IsFSR2Supported) == 0x000001, "Wrong alignment on TLEngineStatics_IsFSR2Supported");
static_assert(sizeof(TLEngineStatics_IsFSR2Supported) == 0x000001, "Wrong size on TLEngineStatics_IsFSR2Supported");
static_assert(offsetof(TLEngineStatics_IsFSR2Supported, ReturnValue) == 0x000000, "Member 'TLEngineStatics_IsFSR2Supported::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.IsShowBloodSplatter
// 0x0001 (0x0001 - 0x0000)
struct TLEngineStatics_IsShowBloodSplatter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_IsShowBloodSplatter) == 0x000001, "Wrong alignment on TLEngineStatics_IsShowBloodSplatter");
static_assert(sizeof(TLEngineStatics_IsShowBloodSplatter) == 0x000001, "Wrong size on TLEngineStatics_IsShowBloodSplatter");
static_assert(offsetof(TLEngineStatics_IsShowBloodSplatter, ReturnValue) == 0x000000, "Member 'TLEngineStatics_IsShowBloodSplatter::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.IsXeSSSupported
// 0x0001 (0x0001 - 0x0000)
struct TLEngineStatics_IsXeSSSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_IsXeSSSupported) == 0x000001, "Wrong alignment on TLEngineStatics_IsXeSSSupported");
static_assert(sizeof(TLEngineStatics_IsXeSSSupported) == 0x000001, "Wrong size on TLEngineStatics_IsXeSSSupported");
static_assert(offsetof(TLEngineStatics_IsXeSSSupported, ReturnValue) == 0x000000, "Member 'TLEngineStatics_IsXeSSSupported::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.SetDetailMode
// 0x0010 (0x0010 - 0x0000)
struct TLEngineStatics_SetDetailMode final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDetailModeBP                                 NewDetailMode;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLEngineStatics_SetDetailMode) == 0x000008, "Wrong alignment on TLEngineStatics_SetDetailMode");
static_assert(sizeof(TLEngineStatics_SetDetailMode) == 0x000010, "Wrong size on TLEngineStatics_SetDetailMode");
static_assert(offsetof(TLEngineStatics_SetDetailMode, Component) == 0x000000, "Member 'TLEngineStatics_SetDetailMode::Component' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_SetDetailMode, NewDetailMode) == 0x000008, "Member 'TLEngineStatics_SetDetailMode::NewDetailMode' has a wrong offset!");

// Function TLScene.TLEngineStatics.SetDLSSMode
// 0x0004 (0x0004 - 0x0000)
struct TLEngineStatics_SetDLSSMode final
{
public:
	int32                                         DLSSMode;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_SetDLSSMode) == 0x000004, "Wrong alignment on TLEngineStatics_SetDLSSMode");
static_assert(sizeof(TLEngineStatics_SetDLSSMode) == 0x000004, "Wrong size on TLEngineStatics_SetDLSSMode");
static_assert(offsetof(TLEngineStatics_SetDLSSMode, DLSSMode) == 0x000000, "Member 'TLEngineStatics_SetDLSSMode::DLSSMode' has a wrong offset!");

// Function TLScene.TLEngineStatics.SetFSR2Mode
// 0x0004 (0x0004 - 0x0000)
struct TLEngineStatics_SetFSR2Mode final
{
public:
	int32                                         FSR2Mode;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_SetFSR2Mode) == 0x000004, "Wrong alignment on TLEngineStatics_SetFSR2Mode");
static_assert(sizeof(TLEngineStatics_SetFSR2Mode) == 0x000004, "Wrong size on TLEngineStatics_SetFSR2Mode");
static_assert(offsetof(TLEngineStatics_SetFSR2Mode, FSR2Mode) == 0x000000, "Member 'TLEngineStatics_SetFSR2Mode::FSR2Mode' has a wrong offset!");

// Function TLScene.TLEngineStatics.SetFSR2Sharpness
// 0x0004 (0x0004 - 0x0000)
struct TLEngineStatics_SetFSR2Sharpness final
{
public:
	float                                         Sharpness;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_SetFSR2Sharpness) == 0x000004, "Wrong alignment on TLEngineStatics_SetFSR2Sharpness");
static_assert(sizeof(TLEngineStatics_SetFSR2Sharpness) == 0x000004, "Wrong size on TLEngineStatics_SetFSR2Sharpness");
static_assert(offsetof(TLEngineStatics_SetFSR2Sharpness, Sharpness) == 0x000000, "Member 'TLEngineStatics_SetFSR2Sharpness::Sharpness' has a wrong offset!");

// Function TLScene.TLEngineStatics.SetHairStrandsDOFDepth
// 0x0001 (0x0001 - 0x0000)
struct TLEngineStatics_SetHairStrandsDOFDepth final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_SetHairStrandsDOFDepth) == 0x000001, "Wrong alignment on TLEngineStatics_SetHairStrandsDOFDepth");
static_assert(sizeof(TLEngineStatics_SetHairStrandsDOFDepth) == 0x000001, "Wrong size on TLEngineStatics_SetHairStrandsDOFDepth");
static_assert(offsetof(TLEngineStatics_SetHairStrandsDOFDepth, bEnable) == 0x000000, "Member 'TLEngineStatics_SetHairStrandsDOFDepth::bEnable' has a wrong offset!");

// Function TLScene.TLEngineStatics.SetSkipUnnecessaryDOF
// 0x0001 (0x0001 - 0x0000)
struct TLEngineStatics_SetSkipUnnecessaryDOF final
{
public:
	bool                                          bShouldSkip;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_SetSkipUnnecessaryDOF) == 0x000001, "Wrong alignment on TLEngineStatics_SetSkipUnnecessaryDOF");
static_assert(sizeof(TLEngineStatics_SetSkipUnnecessaryDOF) == 0x000001, "Wrong size on TLEngineStatics_SetSkipUnnecessaryDOF");
static_assert(offsetof(TLEngineStatics_SetSkipUnnecessaryDOF, bShouldSkip) == 0x000000, "Member 'TLEngineStatics_SetSkipUnnecessaryDOF::bShouldSkip' has a wrong offset!");

// Function TLScene.TLEngineStatics.SetSuperSamplingMethod
// 0x0001 (0x0001 - 0x0000)
struct TLEngineStatics_SetSuperSamplingMethod final
{
public:
	ETLEngineSuperSamplingMethod                  NewMethod;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_SetSuperSamplingMethod) == 0x000001, "Wrong alignment on TLEngineStatics_SetSuperSamplingMethod");
static_assert(sizeof(TLEngineStatics_SetSuperSamplingMethod) == 0x000001, "Wrong size on TLEngineStatics_SetSuperSamplingMethod");
static_assert(offsetof(TLEngineStatics_SetSuperSamplingMethod, NewMethod) == 0x000000, "Member 'TLEngineStatics_SetSuperSamplingMethod::NewMethod' has a wrong offset!");

// Function TLScene.TLEngineStatics.SetXeSSEnabled
// 0x0001 (0x0001 - 0x0000)
struct TLEngineStatics_SetXeSSEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_SetXeSSEnabled) == 0x000001, "Wrong alignment on TLEngineStatics_SetXeSSEnabled");
static_assert(sizeof(TLEngineStatics_SetXeSSEnabled) == 0x000001, "Wrong size on TLEngineStatics_SetXeSSEnabled");
static_assert(offsetof(TLEngineStatics_SetXeSSEnabled, bEnabled) == 0x000000, "Member 'TLEngineStatics_SetXeSSEnabled::bEnabled' has a wrong offset!");

// Function TLScene.TLEngineStatics.SetXeSSMode
// 0x0004 (0x0004 - 0x0000)
struct TLEngineStatics_SetXeSSMode final
{
public:
	int32                                         XeSSMode;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_SetXeSSMode) == 0x000004, "Wrong alignment on TLEngineStatics_SetXeSSMode");
static_assert(sizeof(TLEngineStatics_SetXeSSMode) == 0x000004, "Wrong size on TLEngineStatics_SetXeSSMode");
static_assert(offsetof(TLEngineStatics_SetXeSSMode, XeSSMode) == 0x000000, "Member 'TLEngineStatics_SetXeSSMode::XeSSMode' has a wrong offset!");

// Function TLScene.TLEngineStatics.ShowBloodSplatter
// 0x0001 (0x0001 - 0x0000)
struct TLEngineStatics_ShowBloodSplatter final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_ShowBloodSplatter) == 0x000001, "Wrong alignment on TLEngineStatics_ShowBloodSplatter");
static_assert(sizeof(TLEngineStatics_ShowBloodSplatter) == 0x000001, "Wrong size on TLEngineStatics_ShowBloodSplatter");
static_assert(offsetof(TLEngineStatics_ShowBloodSplatter, bShow) == 0x000000, "Member 'TLEngineStatics_ShowBloodSplatter::bShow' has a wrong offset!");

// Function TLScene.TLEngineStatics.TLBuildNormalTexture
// 0x0020 (0x0020 - 0x0000)
struct TLEngineStatics_TLBuildNormalTexture final
{
public:
	TArray<struct FVector>                        Normals;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_TLBuildNormalTexture) == 0x000008, "Wrong alignment on TLEngineStatics_TLBuildNormalTexture");
static_assert(sizeof(TLEngineStatics_TLBuildNormalTexture) == 0x000020, "Wrong size on TLEngineStatics_TLBuildNormalTexture");
static_assert(offsetof(TLEngineStatics_TLBuildNormalTexture, Normals) == 0x000000, "Member 'TLEngineStatics_TLBuildNormalTexture::Normals' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_TLBuildNormalTexture, Width) == 0x000010, "Member 'TLEngineStatics_TLBuildNormalTexture::Width' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_TLBuildNormalTexture, Height) == 0x000014, "Member 'TLEngineStatics_TLBuildNormalTexture::Height' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_TLBuildNormalTexture, ReturnValue) == 0x000018, "Member 'TLEngineStatics_TLBuildNormalTexture::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.TLBuildVelocityTexture
// 0x0020 (0x0020 - 0x0000)
struct TLEngineStatics_TLBuildVelocityTexture final
{
public:
	TArray<struct FVector>                        Normals;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_TLBuildVelocityTexture) == 0x000008, "Wrong alignment on TLEngineStatics_TLBuildVelocityTexture");
static_assert(sizeof(TLEngineStatics_TLBuildVelocityTexture) == 0x000020, "Wrong size on TLEngineStatics_TLBuildVelocityTexture");
static_assert(offsetof(TLEngineStatics_TLBuildVelocityTexture, Normals) == 0x000000, "Member 'TLEngineStatics_TLBuildVelocityTexture::Normals' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_TLBuildVelocityTexture, Width) == 0x000010, "Member 'TLEngineStatics_TLBuildVelocityTexture::Width' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_TLBuildVelocityTexture, Height) == 0x000014, "Member 'TLEngineStatics_TLBuildVelocityTexture::Height' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_TLBuildVelocityTexture, ReturnValue) == 0x000018, "Member 'TLEngineStatics_TLBuildVelocityTexture::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.TLCalcFlowingSandDecalRotationAndSpeed
// 0x0020 (0x0020 - 0x0000)
struct TLEngineStatics_TLCalcFlowingSandDecalRotationAndSpeed final
{
public:
	TArray<struct FVector>                        Normals;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDecalRotation;                                  // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDecalSpeed;                                     // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_TLCalcFlowingSandDecalRotationAndSpeed) == 0x000008, "Wrong alignment on TLEngineStatics_TLCalcFlowingSandDecalRotationAndSpeed");
static_assert(sizeof(TLEngineStatics_TLCalcFlowingSandDecalRotationAndSpeed) == 0x000020, "Wrong size on TLEngineStatics_TLCalcFlowingSandDecalRotationAndSpeed");
static_assert(offsetof(TLEngineStatics_TLCalcFlowingSandDecalRotationAndSpeed, Normals) == 0x000000, "Member 'TLEngineStatics_TLCalcFlowingSandDecalRotationAndSpeed::Normals' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_TLCalcFlowingSandDecalRotationAndSpeed, Width) == 0x000010, "Member 'TLEngineStatics_TLCalcFlowingSandDecalRotationAndSpeed::Width' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_TLCalcFlowingSandDecalRotationAndSpeed, Height) == 0x000014, "Member 'TLEngineStatics_TLCalcFlowingSandDecalRotationAndSpeed::Height' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_TLCalcFlowingSandDecalRotationAndSpeed, OutDecalRotation) == 0x000018, "Member 'TLEngineStatics_TLCalcFlowingSandDecalRotationAndSpeed::OutDecalRotation' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_TLCalcFlowingSandDecalRotationAndSpeed, OutDecalSpeed) == 0x00001C, "Member 'TLEngineStatics_TLCalcFlowingSandDecalRotationAndSpeed::OutDecalSpeed' has a wrong offset!");

// Function TLScene.TLEngineStatics.TLGetDebugFlowingSandBall
// 0x0001 (0x0001 - 0x0000)
struct TLEngineStatics_TLGetDebugFlowingSandBall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_TLGetDebugFlowingSandBall) == 0x000001, "Wrong alignment on TLEngineStatics_TLGetDebugFlowingSandBall");
static_assert(sizeof(TLEngineStatics_TLGetDebugFlowingSandBall) == 0x000001, "Wrong size on TLEngineStatics_TLGetDebugFlowingSandBall");
static_assert(offsetof(TLEngineStatics_TLGetDebugFlowingSandBall, ReturnValue) == 0x000000, "Member 'TLEngineStatics_TLGetDebugFlowingSandBall::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.TLGetFluidSimFootprintAutoGeneration
// 0x0001 (0x0001 - 0x0000)
struct TLEngineStatics_TLGetFluidSimFootprintAutoGeneration final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_TLGetFluidSimFootprintAutoGeneration) == 0x000001, "Wrong alignment on TLEngineStatics_TLGetFluidSimFootprintAutoGeneration");
static_assert(sizeof(TLEngineStatics_TLGetFluidSimFootprintAutoGeneration) == 0x000001, "Wrong size on TLEngineStatics_TLGetFluidSimFootprintAutoGeneration");
static_assert(offsetof(TLEngineStatics_TLGetFluidSimFootprintAutoGeneration, ReturnValue) == 0x000000, "Member 'TLEngineStatics_TLGetFluidSimFootprintAutoGeneration::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.TLGetPhysicalSurfaceFinalWeather
// 0x0090 (0x0090 - 0x0000)
struct TLEngineStatics_TLGetPhysicalSurfaceFinalWeather final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ESnPhysicalSurface                            OutSurface;                                        // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutTextureBlendingWeight;                          // 0x008C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_TLGetPhysicalSurfaceFinalWeather) == 0x000004, "Wrong alignment on TLEngineStatics_TLGetPhysicalSurfaceFinalWeather");
static_assert(sizeof(TLEngineStatics_TLGetPhysicalSurfaceFinalWeather) == 0x000090, "Wrong size on TLEngineStatics_TLGetPhysicalSurfaceFinalWeather");
static_assert(offsetof(TLEngineStatics_TLGetPhysicalSurfaceFinalWeather, HitResult) == 0x000000, "Member 'TLEngineStatics_TLGetPhysicalSurfaceFinalWeather::HitResult' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_TLGetPhysicalSurfaceFinalWeather, OutSurface) == 0x000088, "Member 'TLEngineStatics_TLGetPhysicalSurfaceFinalWeather::OutSurface' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_TLGetPhysicalSurfaceFinalWeather, OutTextureBlendingWeight) == 0x00008C, "Member 'TLEngineStatics_TLGetPhysicalSurfaceFinalWeather::OutTextureBlendingWeight' has a wrong offset!");

// Function TLScene.TLEngineStatics.TLGetPhysicalSurfaceOriginal
// 0x0090 (0x0090 - 0x0000)
struct TLEngineStatics_TLGetPhysicalSurfaceOriginal final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ESnPhysicalSurface                            OutSurface;                                        // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutTextureBlendingWeight;                          // 0x008C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_TLGetPhysicalSurfaceOriginal) == 0x000004, "Wrong alignment on TLEngineStatics_TLGetPhysicalSurfaceOriginal");
static_assert(sizeof(TLEngineStatics_TLGetPhysicalSurfaceOriginal) == 0x000090, "Wrong size on TLEngineStatics_TLGetPhysicalSurfaceOriginal");
static_assert(offsetof(TLEngineStatics_TLGetPhysicalSurfaceOriginal, HitResult) == 0x000000, "Member 'TLEngineStatics_TLGetPhysicalSurfaceOriginal::HitResult' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_TLGetPhysicalSurfaceOriginal, OutSurface) == 0x000088, "Member 'TLEngineStatics_TLGetPhysicalSurfaceOriginal::OutSurface' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_TLGetPhysicalSurfaceOriginal, OutTextureBlendingWeight) == 0x00008C, "Member 'TLEngineStatics_TLGetPhysicalSurfaceOriginal::OutTextureBlendingWeight' has a wrong offset!");

// Function TLScene.TLEngineStatics.TLGetTraceCollisionType
// 0x000C (0x000C - 0x0000)
struct TLEngineStatics_TLGetTraceCollisionType final
{
public:
	class FName                                   ChannelName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceType;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLEngineStatics_TLGetTraceCollisionType) == 0x000004, "Wrong alignment on TLEngineStatics_TLGetTraceCollisionType");
static_assert(sizeof(TLEngineStatics_TLGetTraceCollisionType) == 0x00000C, "Wrong size on TLEngineStatics_TLGetTraceCollisionType");
static_assert(offsetof(TLEngineStatics_TLGetTraceCollisionType, ChannelName) == 0x000000, "Member 'TLEngineStatics_TLGetTraceCollisionType::ChannelName' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_TLGetTraceCollisionType, TraceType) == 0x000008, "Member 'TLEngineStatics_TLGetTraceCollisionType::TraceType' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_TLGetTraceCollisionType, CollisionChannel) == 0x000009, "Member 'TLEngineStatics_TLGetTraceCollisionType::CollisionChannel' has a wrong offset!");

// Function TLScene.TLEngineStatics.TLGetUseFlowingSandBall
// 0x0001 (0x0001 - 0x0000)
struct TLEngineStatics_TLGetUseFlowingSandBall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_TLGetUseFlowingSandBall) == 0x000001, "Wrong alignment on TLEngineStatics_TLGetUseFlowingSandBall");
static_assert(sizeof(TLEngineStatics_TLGetUseFlowingSandBall) == 0x000001, "Wrong size on TLEngineStatics_TLGetUseFlowingSandBall");
static_assert(offsetof(TLEngineStatics_TLGetUseFlowingSandBall, ReturnValue) == 0x000000, "Member 'TLEngineStatics_TLGetUseFlowingSandBall::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.TLIsTrailsEnabled
// 0x0001 (0x0001 - 0x0000)
struct TLEngineStatics_TLIsTrailsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_TLIsTrailsEnabled) == 0x000001, "Wrong alignment on TLEngineStatics_TLIsTrailsEnabled");
static_assert(sizeof(TLEngineStatics_TLIsTrailsEnabled) == 0x000001, "Wrong size on TLEngineStatics_TLIsTrailsEnabled");
static_assert(offsetof(TLEngineStatics_TLIsTrailsEnabled, ReturnValue) == 0x000000, "Member 'TLEngineStatics_TLIsTrailsEnabled::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.UsingDLSS
// 0x0001 (0x0001 - 0x0000)
struct TLEngineStatics_UsingDLSS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEngineStatics_UsingDLSS) == 0x000001, "Wrong alignment on TLEngineStatics_UsingDLSS");
static_assert(sizeof(TLEngineStatics_UsingDLSS) == 0x000001, "Wrong size on TLEngineStatics_UsingDLSS");
static_assert(offsetof(TLEngineStatics_UsingDLSS, ReturnValue) == 0x000000, "Member 'TLEngineStatics_UsingDLSS::ReturnValue' has a wrong offset!");

// Function TLScene.TLEngineStatics.VolumeEncompassesActor
// 0x0018 (0x0018 - 0x0000)
struct TLEngineStatics_VolumeEncompassesActor final
{
public:
	class AVolume*                                Volume;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TestingActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLEngineStatics_VolumeEncompassesActor) == 0x000008, "Wrong alignment on TLEngineStatics_VolumeEncompassesActor");
static_assert(sizeof(TLEngineStatics_VolumeEncompassesActor) == 0x000018, "Wrong size on TLEngineStatics_VolumeEncompassesActor");
static_assert(offsetof(TLEngineStatics_VolumeEncompassesActor, Volume) == 0x000000, "Member 'TLEngineStatics_VolumeEncompassesActor::Volume' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_VolumeEncompassesActor, TestingActor) == 0x000008, "Member 'TLEngineStatics_VolumeEncompassesActor::TestingActor' has a wrong offset!");
static_assert(offsetof(TLEngineStatics_VolumeEncompassesActor, ReturnValue) == 0x000010, "Member 'TLEngineStatics_VolumeEncompassesActor::ReturnValue' has a wrong offset!");

// Function TLScene.TLPhysicsStatics.TLMultiSphereTraceForObjects
// 0x0068 (0x0068 - 0x0000)
struct TLPhysicsStatics_TLMultiSphereTraceForObjects final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     OutHits;                                           // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0061(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLPhysicsStatics_TLMultiSphereTraceForObjects) == 0x000008, "Wrong alignment on TLPhysicsStatics_TLMultiSphereTraceForObjects");
static_assert(sizeof(TLPhysicsStatics_TLMultiSphereTraceForObjects) == 0x000068, "Wrong size on TLPhysicsStatics_TLMultiSphereTraceForObjects");
static_assert(offsetof(TLPhysicsStatics_TLMultiSphereTraceForObjects, WorldContextObject) == 0x000000, "Member 'TLPhysicsStatics_TLMultiSphereTraceForObjects::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TLPhysicsStatics_TLMultiSphereTraceForObjects, Start) == 0x000008, "Member 'TLPhysicsStatics_TLMultiSphereTraceForObjects::Start' has a wrong offset!");
static_assert(offsetof(TLPhysicsStatics_TLMultiSphereTraceForObjects, End) == 0x000014, "Member 'TLPhysicsStatics_TLMultiSphereTraceForObjects::End' has a wrong offset!");
static_assert(offsetof(TLPhysicsStatics_TLMultiSphereTraceForObjects, Radius) == 0x000020, "Member 'TLPhysicsStatics_TLMultiSphereTraceForObjects::Radius' has a wrong offset!");
static_assert(offsetof(TLPhysicsStatics_TLMultiSphereTraceForObjects, ObjectTypes) == 0x000028, "Member 'TLPhysicsStatics_TLMultiSphereTraceForObjects::ObjectTypes' has a wrong offset!");
static_assert(offsetof(TLPhysicsStatics_TLMultiSphereTraceForObjects, bTraceComplex) == 0x000038, "Member 'TLPhysicsStatics_TLMultiSphereTraceForObjects::bTraceComplex' has a wrong offset!");
static_assert(offsetof(TLPhysicsStatics_TLMultiSphereTraceForObjects, ActorsToIgnore) == 0x000040, "Member 'TLPhysicsStatics_TLMultiSphereTraceForObjects::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(TLPhysicsStatics_TLMultiSphereTraceForObjects, OutHits) == 0x000050, "Member 'TLPhysicsStatics_TLMultiSphereTraceForObjects::OutHits' has a wrong offset!");
static_assert(offsetof(TLPhysicsStatics_TLMultiSphereTraceForObjects, bIgnoreSelf) == 0x000060, "Member 'TLPhysicsStatics_TLMultiSphereTraceForObjects::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(TLPhysicsStatics_TLMultiSphereTraceForObjects, ReturnValue) == 0x000061, "Member 'TLPhysicsStatics_TLMultiSphereTraceForObjects::ReturnValue' has a wrong offset!");

// Function TLScene.TLScenarioActor.GetBoundObjectActor
// 0x0008 (0x0008 - 0x0000)
struct TLScenarioActor_GetBoundObjectActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLScenarioActor_GetBoundObjectActor) == 0x000008, "Wrong alignment on TLScenarioActor_GetBoundObjectActor");
static_assert(sizeof(TLScenarioActor_GetBoundObjectActor) == 0x000008, "Wrong size on TLScenarioActor_GetBoundObjectActor");
static_assert(offsetof(TLScenarioActor_GetBoundObjectActor, ReturnValue) == 0x000000, "Member 'TLScenarioActor_GetBoundObjectActor::ReturnValue' has a wrong offset!");

// Function TLScene.TLScenarioActor.GetBoundTagName
// 0x0008 (0x0008 - 0x0000)
struct TLScenarioActor_GetBoundTagName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLScenarioActor_GetBoundTagName) == 0x000004, "Wrong alignment on TLScenarioActor_GetBoundTagName");
static_assert(sizeof(TLScenarioActor_GetBoundTagName) == 0x000008, "Wrong size on TLScenarioActor_GetBoundTagName");
static_assert(offsetof(TLScenarioActor_GetBoundTagName, ReturnValue) == 0x000000, "Member 'TLScenarioActor_GetBoundTagName::ReturnValue' has a wrong offset!");

// Function TLScene.TLSceneCapture2DAutoResize.OnInterpToggle
// 0x0001 (0x0001 - 0x0000)
struct TLSceneCapture2DAutoResize_OnInterpToggle final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSceneCapture2DAutoResize_OnInterpToggle) == 0x000001, "Wrong alignment on TLSceneCapture2DAutoResize_OnInterpToggle");
static_assert(sizeof(TLSceneCapture2DAutoResize_OnInterpToggle) == 0x000001, "Wrong size on TLSceneCapture2DAutoResize_OnInterpToggle");
static_assert(offsetof(TLSceneCapture2DAutoResize_OnInterpToggle, bEnable) == 0x000000, "Member 'TLSceneCapture2DAutoResize_OnInterpToggle::bEnable' has a wrong offset!");

// Function TLScene.TLSplineParticleBlueprintComponent.AddSegment
// 0x0030 (0x0030 - 0x0000)
struct TLSplineParticleBlueprintComponent_AddSegment final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSplineParticleBlueprintComponent_AddSegment) == 0x000010, "Wrong alignment on TLSplineParticleBlueprintComponent_AddSegment");
static_assert(sizeof(TLSplineParticleBlueprintComponent_AddSegment) == 0x000030, "Wrong size on TLSplineParticleBlueprintComponent_AddSegment");
static_assert(offsetof(TLSplineParticleBlueprintComponent_AddSegment, Transform) == 0x000000, "Member 'TLSplineParticleBlueprintComponent_AddSegment::Transform' has a wrong offset!");

// Function TLScene.TLTrailComponent.SetTrailProperties
// 0x0010 (0x0010 - 0x0000)
struct TLTrailComponent_SetTrailProperties final
{
public:
	struct FTrailProperties                       Properties;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTrailComponent_SetTrailProperties) == 0x000004, "Wrong alignment on TLTrailComponent_SetTrailProperties");
static_assert(sizeof(TLTrailComponent_SetTrailProperties) == 0x000010, "Wrong size on TLTrailComponent_SetTrailProperties");
static_assert(offsetof(TLTrailComponent_SetTrailProperties, Properties) == 0x000000, "Member 'TLTrailComponent_SetTrailProperties::Properties' has a wrong offset!");

// Function TLScene.TLTransformTransitionSection.SetConstraintBindingID
// 0x0018 (0x0018 - 0x0000)
struct TLTransformTransitionSection_SetConstraintBindingID final
{
public:
	struct FMovieSceneObjectBindingID             InConstraintBindingID;                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTransformTransitionSection_SetConstraintBindingID) == 0x000004, "Wrong alignment on TLTransformTransitionSection_SetConstraintBindingID");
static_assert(sizeof(TLTransformTransitionSection_SetConstraintBindingID) == 0x000018, "Wrong size on TLTransformTransitionSection_SetConstraintBindingID");
static_assert(offsetof(TLTransformTransitionSection_SetConstraintBindingID, InConstraintBindingID) == 0x000000, "Member 'TLTransformTransitionSection_SetConstraintBindingID::InConstraintBindingID' has a wrong offset!");

// Function TLScene.TLTransformTransitionSection.GetConstraintBindingID
// 0x0018 (0x0018 - 0x0000)
struct TLTransformTransitionSection_GetConstraintBindingID final
{
public:
	struct FMovieSceneObjectBindingID             ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTransformTransitionSection_GetConstraintBindingID) == 0x000004, "Wrong alignment on TLTransformTransitionSection_GetConstraintBindingID");
static_assert(sizeof(TLTransformTransitionSection_GetConstraintBindingID) == 0x000018, "Wrong size on TLTransformTransitionSection_GetConstraintBindingID");
static_assert(offsetof(TLTransformTransitionSection_GetConstraintBindingID, ReturnValue) == 0x000000, "Member 'TLTransformTransitionSection_GetConstraintBindingID::ReturnValue' has a wrong offset!");

// Function TLScene.UnrealCharacterPreviewCameraActor.EnablePreviewCharacaterLookat
// 0x0001 (0x0001 - 0x0000)
struct UnrealCharacterPreviewCameraActor_EnablePreviewCharacaterLookat final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealCharacterPreviewCameraActor_EnablePreviewCharacaterLookat) == 0x000001, "Wrong alignment on UnrealCharacterPreviewCameraActor_EnablePreviewCharacaterLookat");
static_assert(sizeof(UnrealCharacterPreviewCameraActor_EnablePreviewCharacaterLookat) == 0x000001, "Wrong size on UnrealCharacterPreviewCameraActor_EnablePreviewCharacaterLookat");
static_assert(offsetof(UnrealCharacterPreviewCameraActor_EnablePreviewCharacaterLookat, bEnable) == 0x000000, "Member 'UnrealCharacterPreviewCameraActor_EnablePreviewCharacaterLookat::bEnable' has a wrong offset!");

// Function TLScene.UnrealCharacterPreviewCameraActor.ForceSetZoomStep
// 0x0004 (0x0004 - 0x0000)
struct UnrealCharacterPreviewCameraActor_ForceSetZoomStep final
{
public:
	int32                                         InZoomStep;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealCharacterPreviewCameraActor_ForceSetZoomStep) == 0x000004, "Wrong alignment on UnrealCharacterPreviewCameraActor_ForceSetZoomStep");
static_assert(sizeof(UnrealCharacterPreviewCameraActor_ForceSetZoomStep) == 0x000004, "Wrong size on UnrealCharacterPreviewCameraActor_ForceSetZoomStep");
static_assert(offsetof(UnrealCharacterPreviewCameraActor_ForceSetZoomStep, InZoomStep) == 0x000000, "Member 'UnrealCharacterPreviewCameraActor_ForceSetZoomStep::InZoomStep' has a wrong offset!");

// Function TLScene.UnrealCharacterPreviewCameraActor.GetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct UnrealCharacterPreviewCameraActor_GetTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealCharacterPreviewCameraActor_GetTargetActor) == 0x000008, "Wrong alignment on UnrealCharacterPreviewCameraActor_GetTargetActor");
static_assert(sizeof(UnrealCharacterPreviewCameraActor_GetTargetActor) == 0x000008, "Wrong size on UnrealCharacterPreviewCameraActor_GetTargetActor");
static_assert(offsetof(UnrealCharacterPreviewCameraActor_GetTargetActor, ReturnValue) == 0x000000, "Member 'UnrealCharacterPreviewCameraActor_GetTargetActor::ReturnValue' has a wrong offset!");

// Function TLScene.UnrealCharacterPreviewCameraActor.SetOffCenterOffset
// 0x000C (0x000C - 0x0000)
struct UnrealCharacterPreviewCameraActor_SetOffCenterOffset final
{
public:
	struct FVector2D                              InCenterOffset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDistOffset;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealCharacterPreviewCameraActor_SetOffCenterOffset) == 0x000004, "Wrong alignment on UnrealCharacterPreviewCameraActor_SetOffCenterOffset");
static_assert(sizeof(UnrealCharacterPreviewCameraActor_SetOffCenterOffset) == 0x00000C, "Wrong size on UnrealCharacterPreviewCameraActor_SetOffCenterOffset");
static_assert(offsetof(UnrealCharacterPreviewCameraActor_SetOffCenterOffset, InCenterOffset) == 0x000000, "Member 'UnrealCharacterPreviewCameraActor_SetOffCenterOffset::InCenterOffset' has a wrong offset!");
static_assert(offsetof(UnrealCharacterPreviewCameraActor_SetOffCenterOffset, InDistOffset) == 0x000008, "Member 'UnrealCharacterPreviewCameraActor_SetOffCenterOffset::InDistOffset' has a wrong offset!");

// Function TLScene.UnrealCharacterPreviewCameraActor.TryChangeZoomStep
// 0x0004 (0x0004 - 0x0000)
struct UnrealCharacterPreviewCameraActor_TryChangeZoomStep final
{
public:
	int32                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealCharacterPreviewCameraActor_TryChangeZoomStep) == 0x000004, "Wrong alignment on UnrealCharacterPreviewCameraActor_TryChangeZoomStep");
static_assert(sizeof(UnrealCharacterPreviewCameraActor_TryChangeZoomStep) == 0x000004, "Wrong size on UnrealCharacterPreviewCameraActor_TryChangeZoomStep");
static_assert(offsetof(UnrealCharacterPreviewCameraActor_TryChangeZoomStep, Offset) == 0x000000, "Member 'UnrealCharacterPreviewCameraActor_TryChangeZoomStep::Offset' has a wrong offset!");

// Function TLScene.UnrealContentsTriggerVolume.OnBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct UnrealContentsTriggerVolume_OnBeginOverlap final
{
public:
	class AActor*                                 MyActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealContentsTriggerVolume_OnBeginOverlap) == 0x000008, "Wrong alignment on UnrealContentsTriggerVolume_OnBeginOverlap");
static_assert(sizeof(UnrealContentsTriggerVolume_OnBeginOverlap) == 0x000010, "Wrong size on UnrealContentsTriggerVolume_OnBeginOverlap");
static_assert(offsetof(UnrealContentsTriggerVolume_OnBeginOverlap, MyActor) == 0x000000, "Member 'UnrealContentsTriggerVolume_OnBeginOverlap::MyActor' has a wrong offset!");
static_assert(offsetof(UnrealContentsTriggerVolume_OnBeginOverlap, OtherActor) == 0x000008, "Member 'UnrealContentsTriggerVolume_OnBeginOverlap::OtherActor' has a wrong offset!");

// Function TLScene.UnrealContentsTriggerVolume.OnEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct UnrealContentsTriggerVolume_OnEndOverlap final
{
public:
	class AActor*                                 MyActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealContentsTriggerVolume_OnEndOverlap) == 0x000008, "Wrong alignment on UnrealContentsTriggerVolume_OnEndOverlap");
static_assert(sizeof(UnrealContentsTriggerVolume_OnEndOverlap) == 0x000010, "Wrong size on UnrealContentsTriggerVolume_OnEndOverlap");
static_assert(offsetof(UnrealContentsTriggerVolume_OnEndOverlap, MyActor) == 0x000000, "Member 'UnrealContentsTriggerVolume_OnEndOverlap::MyActor' has a wrong offset!");
static_assert(offsetof(UnrealContentsTriggerVolume_OnEndOverlap, OtherActor) == 0x000008, "Member 'UnrealContentsTriggerVolume_OnEndOverlap::OtherActor' has a wrong offset!");

// Function TLScene.UnrealSceneBoidController.OnPlayerSeen
// 0x0001 (0x0001 - 0x0000)
struct UnrealSceneBoidController_OnPlayerSeen final
{
public:
	bool                                          bSeen;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealSceneBoidController_OnPlayerSeen) == 0x000001, "Wrong alignment on UnrealSceneBoidController_OnPlayerSeen");
static_assert(sizeof(UnrealSceneBoidController_OnPlayerSeen) == 0x000001, "Wrong size on UnrealSceneBoidController_OnPlayerSeen");
static_assert(offsetof(UnrealSceneBoidController_OnPlayerSeen, bSeen) == 0x000000, "Member 'UnrealSceneBoidController_OnPlayerSeen::bSeen' has a wrong offset!");

// Function TLScene.UnrealSceneBoidParticle.OnSensingEnter
// 0x00A8 (0x00A8 - 0x0000)
struct UnrealSceneBoidParticle_OnSensingEnter final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnrealSceneBoidParticle_OnSensingEnter) == 0x000008, "Wrong alignment on UnrealSceneBoidParticle_OnSensingEnter");
static_assert(sizeof(UnrealSceneBoidParticle_OnSensingEnter) == 0x0000A8, "Wrong size on UnrealSceneBoidParticle_OnSensingEnter");
static_assert(offsetof(UnrealSceneBoidParticle_OnSensingEnter, OverlappedComp) == 0x000000, "Member 'UnrealSceneBoidParticle_OnSensingEnter::OverlappedComp' has a wrong offset!");
static_assert(offsetof(UnrealSceneBoidParticle_OnSensingEnter, OtherActor) == 0x000008, "Member 'UnrealSceneBoidParticle_OnSensingEnter::OtherActor' has a wrong offset!");
static_assert(offsetof(UnrealSceneBoidParticle_OnSensingEnter, OtherComp) == 0x000010, "Member 'UnrealSceneBoidParticle_OnSensingEnter::OtherComp' has a wrong offset!");
static_assert(offsetof(UnrealSceneBoidParticle_OnSensingEnter, OtherBodyIndex) == 0x000018, "Member 'UnrealSceneBoidParticle_OnSensingEnter::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(UnrealSceneBoidParticle_OnSensingEnter, bFromSweep) == 0x00001C, "Member 'UnrealSceneBoidParticle_OnSensingEnter::bFromSweep' has a wrong offset!");
static_assert(offsetof(UnrealSceneBoidParticle_OnSensingEnter, SweepResult) == 0x000020, "Member 'UnrealSceneBoidParticle_OnSensingEnter::SweepResult' has a wrong offset!");

// Function TLScene.UnrealSceneBoidParticle.OnSensingLeave
// 0x0020 (0x0020 - 0x0000)
struct UnrealSceneBoidParticle_OnSensingLeave final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnrealSceneBoidParticle_OnSensingLeave) == 0x000008, "Wrong alignment on UnrealSceneBoidParticle_OnSensingLeave");
static_assert(sizeof(UnrealSceneBoidParticle_OnSensingLeave) == 0x000020, "Wrong size on UnrealSceneBoidParticle_OnSensingLeave");
static_assert(offsetof(UnrealSceneBoidParticle_OnSensingLeave, OverlappedComp) == 0x000000, "Member 'UnrealSceneBoidParticle_OnSensingLeave::OverlappedComp' has a wrong offset!");
static_assert(offsetof(UnrealSceneBoidParticle_OnSensingLeave, OtherActor) == 0x000008, "Member 'UnrealSceneBoidParticle_OnSensingLeave::OtherActor' has a wrong offset!");
static_assert(offsetof(UnrealSceneBoidParticle_OnSensingLeave, OtherComp) == 0x000010, "Member 'UnrealSceneBoidParticle_OnSensingLeave::OtherComp' has a wrong offset!");
static_assert(offsetof(UnrealSceneBoidParticle_OnSensingLeave, OtherBodyIndex) == 0x000018, "Member 'UnrealSceneBoidParticle_OnSensingLeave::OtherBodyIndex' has a wrong offset!");

}

