#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TrailComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "TLScene_structs.hpp"
#include "TLScene_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TrailComponent.BP_TrailComponent_C
// 0x00C0 (0x02D0 - 0x0210)
class UBP_TrailComponent_C final : public UTLTrailComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0210(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_TrailsManager_C*                    TrailManagerInstance;                              // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Hardness;                                          // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FName                                   ReceivingActorsTag;                                // 0x0224(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastLocation;                                      // 0x022C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForMud;                                           // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldLocation;                                     // 0x023C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RayOffset;                                         // 0x0248(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      TargetSufaceTypes;                                 // 0x0258(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Radius;                                            // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         RadiusWorld;                                       // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RadiusVisualScale;                                 // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         WeightScale;                                       // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bPileWhenInside;                                   // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PileRadiusScale;                                   // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         PileTestScale;                                     // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   DebugMesh;                                         // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PileFrom;                                          // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PileWeightScale;                                   // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         PileHardness;                                      // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Initial_Overlap;                                   // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29D[0x3];                                      // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SurfaceOffset;                                     // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempRadiusForManager;                              // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugThis;                                        // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RayStartLocation;                                  // 0x02AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SurfaceLocation;                                   // 0x02B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceDepthXTimesRadius;                            // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_TrailComponent(int32 EntryPoint);
	void SetTrailProperties(const struct FTrailProperties& Properties);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void CalculateWeight(float Distance, float* Weight);
	void CalculateWeight2(float Distance, float* Weight);
	void TryRegisterTrail();
	void FindTrailSurface(TArray<struct FHitResult>& InHitResults, TArray<struct FHitResult>* OutHitResult);
	struct FVector GetCameraLocation();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TrailComponent_C">();
	}
	static class UBP_TrailComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_TrailComponent_C>();
	}
};
static_assert(alignof(UBP_TrailComponent_C) == 0x000010, "Wrong alignment on UBP_TrailComponent_C");
static_assert(sizeof(UBP_TrailComponent_C) == 0x0002D0, "Wrong size on UBP_TrailComponent_C");
static_assert(offsetof(UBP_TrailComponent_C, UberGraphFrame) == 0x000210, "Member 'UBP_TrailComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, TrailManagerInstance) == 0x000218, "Member 'UBP_TrailComponent_C::TrailManagerInstance' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, Hardness) == 0x000220, "Member 'UBP_TrailComponent_C::Hardness' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, ReceivingActorsTag) == 0x000224, "Member 'UBP_TrailComponent_C::ReceivingActorsTag' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, LastLocation) == 0x00022C, "Member 'UBP_TrailComponent_C::LastLocation' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, bForMud) == 0x000238, "Member 'UBP_TrailComponent_C::bForMud' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, WorldLocation) == 0x00023C, "Member 'UBP_TrailComponent_C::WorldLocation' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, RayOffset) == 0x000248, "Member 'UBP_TrailComponent_C::RayOffset' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, TargetSufaceTypes) == 0x000258, "Member 'UBP_TrailComponent_C::TargetSufaceTypes' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, Radius) == 0x000268, "Member 'UBP_TrailComponent_C::Radius' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, RadiusWorld) == 0x00026C, "Member 'UBP_TrailComponent_C::RadiusWorld' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, RadiusVisualScale) == 0x000270, "Member 'UBP_TrailComponent_C::RadiusVisualScale' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, WeightScale) == 0x000274, "Member 'UBP_TrailComponent_C::WeightScale' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, bPileWhenInside) == 0x000278, "Member 'UBP_TrailComponent_C::bPileWhenInside' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, PileRadiusScale) == 0x00027C, "Member 'UBP_TrailComponent_C::PileRadiusScale' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, PileTestScale) == 0x000280, "Member 'UBP_TrailComponent_C::PileTestScale' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, DebugMesh) == 0x000288, "Member 'UBP_TrailComponent_C::DebugMesh' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, PileFrom) == 0x000290, "Member 'UBP_TrailComponent_C::PileFrom' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, PileWeightScale) == 0x000294, "Member 'UBP_TrailComponent_C::PileWeightScale' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, PileHardness) == 0x000298, "Member 'UBP_TrailComponent_C::PileHardness' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, Initial_Overlap) == 0x00029C, "Member 'UBP_TrailComponent_C::Initial_Overlap' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, SurfaceOffset) == 0x0002A0, "Member 'UBP_TrailComponent_C::SurfaceOffset' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, TempRadiusForManager) == 0x0002A4, "Member 'UBP_TrailComponent_C::TempRadiusForManager' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, bDebugThis) == 0x0002A8, "Member 'UBP_TrailComponent_C::bDebugThis' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, RayStartLocation) == 0x0002AC, "Member 'UBP_TrailComponent_C::RayStartLocation' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, SurfaceLocation) == 0x0002B8, "Member 'UBP_TrailComponent_C::SurfaceLocation' has a wrong offset!");
static_assert(offsetof(UBP_TrailComponent_C, TraceDepthXTimesRadius) == 0x0002C4, "Member 'UBP_TrailComponent_C::TraceDepthXTimesRadius' has a wrong offset!");

}

