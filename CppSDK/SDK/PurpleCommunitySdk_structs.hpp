#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PurpleCommunitySdk

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct PurpleCommunitySdk.AttachmentMetaData
// 0x0008 (0x0008 - 0x0000)
struct FAttachmentMetaData final
{
public:
	int32                                         PlayTime;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FileSize;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttachmentMetaData) == 0x000004, "Wrong alignment on FAttachmentMetaData");
static_assert(sizeof(FAttachmentMetaData) == 0x000008, "Wrong size on FAttachmentMetaData");
static_assert(offsetof(FAttachmentMetaData, PlayTime) == 0x000000, "Member 'FAttachmentMetaData::PlayTime' has a wrong offset!");
static_assert(offsetof(FAttachmentMetaData, FileSize) == 0x000004, "Member 'FAttachmentMetaData::FileSize' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.AttachmentInfo
// 0x0028 (0x0028 - 0x0000)
struct FAttachmentInfo final
{
public:
	class FString                                 FileUrl;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttachmentMetaData                    MetadataInfo;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttachmentInfo) == 0x000008, "Wrong alignment on FAttachmentInfo");
static_assert(sizeof(FAttachmentInfo) == 0x000028, "Wrong size on FAttachmentInfo");
static_assert(offsetof(FAttachmentInfo, FileUrl) == 0x000000, "Member 'FAttachmentInfo::FileUrl' has a wrong offset!");
static_assert(offsetof(FAttachmentInfo, Type) == 0x000010, "Member 'FAttachmentInfo::Type' has a wrong offset!");
static_assert(offsetof(FAttachmentInfo, MetadataInfo) == 0x000020, "Member 'FAttachmentInfo::MetadataInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.GameRoomKeyInfo
// 0x0030 (0x0030 - 0x0000)
struct FGameRoomKeyInfo final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerKey;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoomKey;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameRoomKeyInfo) == 0x000008, "Wrong alignment on FGameRoomKeyInfo");
static_assert(sizeof(FGameRoomKeyInfo) == 0x000030, "Wrong size on FGameRoomKeyInfo");
static_assert(offsetof(FGameRoomKeyInfo, Type) == 0x000000, "Member 'FGameRoomKeyInfo::Type' has a wrong offset!");
static_assert(offsetof(FGameRoomKeyInfo, ServerKey) == 0x000010, "Member 'FGameRoomKeyInfo::ServerKey' has a wrong offset!");
static_assert(offsetof(FGameRoomKeyInfo, RoomKey) == 0x000020, "Member 'FGameRoomKeyInfo::RoomKey' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.Original
// 0x0010 (0x0010 - 0x0000)
struct FOriginal final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOriginal) == 0x000008, "Wrong alignment on FOriginal");
static_assert(sizeof(FOriginal) == 0x000010, "Wrong size on FOriginal");
static_assert(offsetof(FOriginal, Value) == 0x000000, "Member 'FOriginal::Value' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.Replaced
// 0x0010 (0x0010 - 0x0000)
struct FReplaced final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplaced) == 0x000008, "Wrong alignment on FReplaced");
static_assert(sizeof(FReplaced) == 0x000010, "Wrong size on FReplaced");
static_assert(offsetof(FReplaced, Value) == 0x000000, "Member 'FReplaced::Value' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ReplacedMessageInfo
// 0x0030 (0x0030 - 0x0000)
struct FReplacedMessageInfo final
{
public:
	struct FOriginal                              Original;                                          // 0x0000(0x0010)(NativeAccessSpecifierPublic)
	struct FReplaced                              Replaced;                                          // 0x0010(0x0010)(NativeAccessSpecifierPublic)
	class FString                                 AdditionalData;                                    // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplacedMessageInfo) == 0x000008, "Wrong alignment on FReplacedMessageInfo");
static_assert(sizeof(FReplacedMessageInfo) == 0x000030, "Wrong size on FReplacedMessageInfo");
static_assert(offsetof(FReplacedMessageInfo, Original) == 0x000000, "Member 'FReplacedMessageInfo::Original' has a wrong offset!");
static_assert(offsetof(FReplacedMessageInfo, Replaced) == 0x000010, "Member 'FReplacedMessageInfo::Replaced' has a wrong offset!");
static_assert(offsetof(FReplacedMessageInfo, AdditionalData) == 0x000020, "Member 'FReplacedMessageInfo::AdditionalData' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ExternalAccount
// 0x0020 (0x0020 - 0x0000)
struct FExternalAccount final
{
public:
	class FString                                 AuthProviderCode;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExternalAccountKey;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExternalAccount) == 0x000008, "Wrong alignment on FExternalAccount");
static_assert(sizeof(FExternalAccount) == 0x000020, "Wrong size on FExternalAccount");
static_assert(offsetof(FExternalAccount, AuthProviderCode) == 0x000000, "Member 'FExternalAccount::AuthProviderCode' has a wrong offset!");
static_assert(offsetof(FExternalAccount, ExternalAccountKey) == 0x000010, "Member 'FExternalAccount::ExternalAccountKey' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.BaseNotification
// 0x0250 (0x0250 - 0x0000)
struct FBaseNotification
{
public:
	class FString                                 Guid;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seq;                                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RoomId;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameUserId;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayNcCharId;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerId;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceiverCharacterId;                               // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceiverUserName;                                  // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceiverServerId;                                  // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Alias;                                             // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClassId;                                           // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClassName;                                         // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasCastle;                                         // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ranking;                                           // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Gender;                                            // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Attribute;                                         // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Optional;                                          // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0130(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Role;                                              // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFromGame;                                        // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SenderGameCode;                                    // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CastleNo;                                          // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GuildId;                                           // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceiverGameCode;                                  // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasReplacedContent;                                // 0x01B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FReplacedMessageInfo>           ReplacedMessageInfoList;                           // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 DateCreated;                                       // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x01D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x01E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Locale;                                            // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttachmentInfo                        AttachmentInfo;                                    // 0x0208(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FExternalAccount>               ExternalAccounts;                                  // 0x0230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InitialContent;                                    // 0x0240(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseNotification) == 0x000008, "Wrong alignment on FBaseNotification");
static_assert(sizeof(FBaseNotification) == 0x000250, "Wrong size on FBaseNotification");
static_assert(offsetof(FBaseNotification, Guid) == 0x000000, "Member 'FBaseNotification::Guid' has a wrong offset!");
static_assert(offsetof(FBaseNotification, Seq) == 0x000010, "Member 'FBaseNotification::Seq' has a wrong offset!");
static_assert(offsetof(FBaseNotification, RoomId) == 0x000018, "Member 'FBaseNotification::RoomId' has a wrong offset!");
static_assert(offsetof(FBaseNotification, GameUserId) == 0x000028, "Member 'FBaseNotification::GameUserId' has a wrong offset!");
static_assert(offsetof(FBaseNotification, PlayNcCharId) == 0x000038, "Member 'FBaseNotification::PlayNcCharId' has a wrong offset!");
static_assert(offsetof(FBaseNotification, UserName) == 0x000048, "Member 'FBaseNotification::UserName' has a wrong offset!");
static_assert(offsetof(FBaseNotification, ServerId) == 0x000058, "Member 'FBaseNotification::ServerId' has a wrong offset!");
static_assert(offsetof(FBaseNotification, ReceiverCharacterId) == 0x000068, "Member 'FBaseNotification::ReceiverCharacterId' has a wrong offset!");
static_assert(offsetof(FBaseNotification, ReceiverUserName) == 0x000078, "Member 'FBaseNotification::ReceiverUserName' has a wrong offset!");
static_assert(offsetof(FBaseNotification, ReceiverServerId) == 0x000088, "Member 'FBaseNotification::ReceiverServerId' has a wrong offset!");
static_assert(offsetof(FBaseNotification, Alias) == 0x000098, "Member 'FBaseNotification::Alias' has a wrong offset!");
static_assert(offsetof(FBaseNotification, ClassId) == 0x0000A8, "Member 'FBaseNotification::ClassId' has a wrong offset!");
static_assert(offsetof(FBaseNotification, ClassName) == 0x0000B8, "Member 'FBaseNotification::ClassName' has a wrong offset!");
static_assert(offsetof(FBaseNotification, HasCastle) == 0x0000C8, "Member 'FBaseNotification::HasCastle' has a wrong offset!");
static_assert(offsetof(FBaseNotification, Ranking) == 0x0000CC, "Member 'FBaseNotification::Ranking' has a wrong offset!");
static_assert(offsetof(FBaseNotification, Gender) == 0x0000D0, "Member 'FBaseNotification::Gender' has a wrong offset!");
static_assert(offsetof(FBaseNotification, Type) == 0x0000E0, "Member 'FBaseNotification::Type' has a wrong offset!");
static_assert(offsetof(FBaseNotification, SubType) == 0x0000F0, "Member 'FBaseNotification::SubType' has a wrong offset!");
static_assert(offsetof(FBaseNotification, Content) == 0x000100, "Member 'FBaseNotification::Content' has a wrong offset!");
static_assert(offsetof(FBaseNotification, Attribute) == 0x000110, "Member 'FBaseNotification::Attribute' has a wrong offset!");
static_assert(offsetof(FBaseNotification, Optional) == 0x000120, "Member 'FBaseNotification::Optional' has a wrong offset!");
static_assert(offsetof(FBaseNotification, GameRoomKeyInfo) == 0x000130, "Member 'FBaseNotification::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FBaseNotification, Role) == 0x000160, "Member 'FBaseNotification::Role' has a wrong offset!");
static_assert(offsetof(FBaseNotification, IsFromGame) == 0x000170, "Member 'FBaseNotification::IsFromGame' has a wrong offset!");
static_assert(offsetof(FBaseNotification, SenderGameCode) == 0x000178, "Member 'FBaseNotification::SenderGameCode' has a wrong offset!");
static_assert(offsetof(FBaseNotification, CastleNo) == 0x000188, "Member 'FBaseNotification::CastleNo' has a wrong offset!");
static_assert(offsetof(FBaseNotification, GuildId) == 0x000190, "Member 'FBaseNotification::GuildId' has a wrong offset!");
static_assert(offsetof(FBaseNotification, ReceiverGameCode) == 0x0001A0, "Member 'FBaseNotification::ReceiverGameCode' has a wrong offset!");
static_assert(offsetof(FBaseNotification, HasReplacedContent) == 0x0001B0, "Member 'FBaseNotification::HasReplacedContent' has a wrong offset!");
static_assert(offsetof(FBaseNotification, ReplacedMessageInfoList) == 0x0001B8, "Member 'FBaseNotification::ReplacedMessageInfoList' has a wrong offset!");
static_assert(offsetof(FBaseNotification, DateCreated) == 0x0001C8, "Member 'FBaseNotification::DateCreated' has a wrong offset!");
static_assert(offsetof(FBaseNotification, Language) == 0x0001D8, "Member 'FBaseNotification::Language' has a wrong offset!");
static_assert(offsetof(FBaseNotification, Country) == 0x0001E8, "Member 'FBaseNotification::Country' has a wrong offset!");
static_assert(offsetof(FBaseNotification, Locale) == 0x0001F8, "Member 'FBaseNotification::Locale' has a wrong offset!");
static_assert(offsetof(FBaseNotification, AttachmentInfo) == 0x000208, "Member 'FBaseNotification::AttachmentInfo' has a wrong offset!");
static_assert(offsetof(FBaseNotification, ExternalAccounts) == 0x000230, "Member 'FBaseNotification::ExternalAccounts' has a wrong offset!");
static_assert(offsetof(FBaseNotification, InitialContent) == 0x000240, "Member 'FBaseNotification::InitialContent' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.NotificationVoice
// 0x0000 (0x0250 - 0x0250)
struct FNotificationVoice final : public FBaseNotification
{
};
static_assert(alignof(FNotificationVoice) == 0x000008, "Wrong alignment on FNotificationVoice");
static_assert(sizeof(FNotificationVoice) == 0x000250, "Wrong size on FNotificationVoice");

// ScriptStruct PurpleCommunitySdk.NotificationUpdateUserRole
// 0x0000 (0x0250 - 0x0250)
struct FNotificationUpdateUserRole final : public FBaseNotification
{
};
static_assert(alignof(FNotificationUpdateUserRole) == 0x000008, "Wrong alignment on FNotificationUpdateUserRole");
static_assert(sizeof(FNotificationUpdateUserRole) == 0x000250, "Wrong size on FNotificationUpdateUserRole");

// ScriptStruct PurpleCommunitySdk.GameUserInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FGameUserInfo final
{
public:
	class FString                                 GameUserId;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NpGameAccountId;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameCode;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerId;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerName;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterName;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClassId;                                           // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RankName;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Intro;                                             // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameUserInfo) == 0x000008, "Wrong alignment on FGameUserInfo");
static_assert(sizeof(FGameUserInfo) == 0x0000A0, "Wrong size on FGameUserInfo");
static_assert(offsetof(FGameUserInfo, GameUserId) == 0x000000, "Member 'FGameUserInfo::GameUserId' has a wrong offset!");
static_assert(offsetof(FGameUserInfo, NpGameAccountId) == 0x000010, "Member 'FGameUserInfo::NpGameAccountId' has a wrong offset!");
static_assert(offsetof(FGameUserInfo, GameCode) == 0x000020, "Member 'FGameUserInfo::GameCode' has a wrong offset!");
static_assert(offsetof(FGameUserInfo, ServerId) == 0x000030, "Member 'FGameUserInfo::ServerId' has a wrong offset!");
static_assert(offsetof(FGameUserInfo, ServerName) == 0x000040, "Member 'FGameUserInfo::ServerName' has a wrong offset!");
static_assert(offsetof(FGameUserInfo, CharacterId) == 0x000050, "Member 'FGameUserInfo::CharacterId' has a wrong offset!");
static_assert(offsetof(FGameUserInfo, CharacterName) == 0x000060, "Member 'FGameUserInfo::CharacterName' has a wrong offset!");
static_assert(offsetof(FGameUserInfo, ClassId) == 0x000070, "Member 'FGameUserInfo::ClassId' has a wrong offset!");
static_assert(offsetof(FGameUserInfo, RankName) == 0x000080, "Member 'FGameUserInfo::RankName' has a wrong offset!");
static_assert(offsetof(FGameUserInfo, Intro) == 0x000090, "Member 'FGameUserInfo::Intro' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.MessageInfo
// 0x0218 (0x0218 - 0x0000)
struct FMessageInfo final
{
public:
	class FString                                 Guid;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameUserId;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayNcCharId;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Attribute;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Optional;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttachmentInfo                        AttachmentInfo;                                    // 0x0090(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Deleted;                                           // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DateCreated;                                       // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameUserInfo                          GameUserInfo;                                      // 0x00D0(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Seq;                                               // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserServerKey;                                     // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasReplacedContent;                                // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FReplacedMessageInfo>           ReplacedMessageInfoList;                           // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ReceiverCharacterId;                               // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceiverUserName;                                  // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x01C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Locale;                                            // 0x01D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x01E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFromGame;                                        // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FExternalAccount>               ExternalAccounts;                                  // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ReceiverServerId;                                  // 0x0208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMessageInfo) == 0x000008, "Wrong alignment on FMessageInfo");
static_assert(sizeof(FMessageInfo) == 0x000218, "Wrong size on FMessageInfo");
static_assert(offsetof(FMessageInfo, Guid) == 0x000000, "Member 'FMessageInfo::Guid' has a wrong offset!");
static_assert(offsetof(FMessageInfo, GameUserId) == 0x000010, "Member 'FMessageInfo::GameUserId' has a wrong offset!");
static_assert(offsetof(FMessageInfo, PlayNcCharId) == 0x000020, "Member 'FMessageInfo::PlayNcCharId' has a wrong offset!");
static_assert(offsetof(FMessageInfo, UserName) == 0x000030, "Member 'FMessageInfo::UserName' has a wrong offset!");
static_assert(offsetof(FMessageInfo, Type) == 0x000040, "Member 'FMessageInfo::Type' has a wrong offset!");
static_assert(offsetof(FMessageInfo, SubType) == 0x000050, "Member 'FMessageInfo::SubType' has a wrong offset!");
static_assert(offsetof(FMessageInfo, Content) == 0x000060, "Member 'FMessageInfo::Content' has a wrong offset!");
static_assert(offsetof(FMessageInfo, Attribute) == 0x000070, "Member 'FMessageInfo::Attribute' has a wrong offset!");
static_assert(offsetof(FMessageInfo, Optional) == 0x000080, "Member 'FMessageInfo::Optional' has a wrong offset!");
static_assert(offsetof(FMessageInfo, AttachmentInfo) == 0x000090, "Member 'FMessageInfo::AttachmentInfo' has a wrong offset!");
static_assert(offsetof(FMessageInfo, Deleted) == 0x0000B8, "Member 'FMessageInfo::Deleted' has a wrong offset!");
static_assert(offsetof(FMessageInfo, DateCreated) == 0x0000C0, "Member 'FMessageInfo::DateCreated' has a wrong offset!");
static_assert(offsetof(FMessageInfo, GameUserInfo) == 0x0000D0, "Member 'FMessageInfo::GameUserInfo' has a wrong offset!");
static_assert(offsetof(FMessageInfo, Seq) == 0x000170, "Member 'FMessageInfo::Seq' has a wrong offset!");
static_assert(offsetof(FMessageInfo, UserServerKey) == 0x000178, "Member 'FMessageInfo::UserServerKey' has a wrong offset!");
static_assert(offsetof(FMessageInfo, HasReplacedContent) == 0x000188, "Member 'FMessageInfo::HasReplacedContent' has a wrong offset!");
static_assert(offsetof(FMessageInfo, ReplacedMessageInfoList) == 0x000190, "Member 'FMessageInfo::ReplacedMessageInfoList' has a wrong offset!");
static_assert(offsetof(FMessageInfo, ReceiverCharacterId) == 0x0001A0, "Member 'FMessageInfo::ReceiverCharacterId' has a wrong offset!");
static_assert(offsetof(FMessageInfo, ReceiverUserName) == 0x0001B0, "Member 'FMessageInfo::ReceiverUserName' has a wrong offset!");
static_assert(offsetof(FMessageInfo, Language) == 0x0001C0, "Member 'FMessageInfo::Language' has a wrong offset!");
static_assert(offsetof(FMessageInfo, Locale) == 0x0001D0, "Member 'FMessageInfo::Locale' has a wrong offset!");
static_assert(offsetof(FMessageInfo, Country) == 0x0001E0, "Member 'FMessageInfo::Country' has a wrong offset!");
static_assert(offsetof(FMessageInfo, IsFromGame) == 0x0001F0, "Member 'FMessageInfo::IsFromGame' has a wrong offset!");
static_assert(offsetof(FMessageInfo, ExternalAccounts) == 0x0001F8, "Member 'FMessageInfo::ExternalAccounts' has a wrong offset!");
static_assert(offsetof(FMessageInfo, ReceiverServerId) == 0x000208, "Member 'FMessageInfo::ReceiverServerId' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.BaseRequest
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FBaseRequest
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBaseRequest) == 0x000008, "Wrong alignment on FBaseRequest");
static_assert(sizeof(FBaseRequest) == 0x000028, "Wrong size on FBaseRequest");

// ScriptStruct PurpleCommunitySdk.RequestStartVoiceChat
// 0x0058 (0x0080 - 0x0028)
struct FRequestStartVoiceChat final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 ChannelId;                                         // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MicOffed;                                          // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpeakerOffed;                                      // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Protocol;                                          // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestStartVoiceChat) == 0x000008, "Wrong alignment on FRequestStartVoiceChat");
static_assert(sizeof(FRequestStartVoiceChat) == 0x000080, "Wrong size on FRequestStartVoiceChat");
static_assert(offsetof(FRequestStartVoiceChat, GameRoomKeyInfo) == 0x000028, "Member 'FRequestStartVoiceChat::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestStartVoiceChat, ChannelId) == 0x000058, "Member 'FRequestStartVoiceChat::ChannelId' has a wrong offset!");
static_assert(offsetof(FRequestStartVoiceChat, MicOffed) == 0x000068, "Member 'FRequestStartVoiceChat::MicOffed' has a wrong offset!");
static_assert(offsetof(FRequestStartVoiceChat, SpeakerOffed) == 0x000069, "Member 'FRequestStartVoiceChat::SpeakerOffed' has a wrong offset!");
static_assert(offsetof(FRequestStartVoiceChat, Protocol) == 0x000070, "Member 'FRequestStartVoiceChat::Protocol' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.AudioDeviceChange
// 0x0010 (0x0010 - 0x0000)
struct FAudioDeviceChange final
{
public:
	int32                                         SelectedInputDevice;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedOutputDevice;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLostMicrophone;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLostSpeaker;                                     // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChangedMicrophoneDefault;                        // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChangedMicrophoneCommunications;                 // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChangedSpeakerDefault;                           // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChangedSpeakerCommunications;                    // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioDeviceChange) == 0x000004, "Wrong alignment on FAudioDeviceChange");
static_assert(sizeof(FAudioDeviceChange) == 0x000010, "Wrong size on FAudioDeviceChange");
static_assert(offsetof(FAudioDeviceChange, SelectedInputDevice) == 0x000000, "Member 'FAudioDeviceChange::SelectedInputDevice' has a wrong offset!");
static_assert(offsetof(FAudioDeviceChange, SelectedOutputDevice) == 0x000004, "Member 'FAudioDeviceChange::SelectedOutputDevice' has a wrong offset!");
static_assert(offsetof(FAudioDeviceChange, IsLostMicrophone) == 0x000008, "Member 'FAudioDeviceChange::IsLostMicrophone' has a wrong offset!");
static_assert(offsetof(FAudioDeviceChange, IsLostSpeaker) == 0x000009, "Member 'FAudioDeviceChange::IsLostSpeaker' has a wrong offset!");
static_assert(offsetof(FAudioDeviceChange, IsChangedMicrophoneDefault) == 0x00000A, "Member 'FAudioDeviceChange::IsChangedMicrophoneDefault' has a wrong offset!");
static_assert(offsetof(FAudioDeviceChange, IsChangedMicrophoneCommunications) == 0x00000B, "Member 'FAudioDeviceChange::IsChangedMicrophoneCommunications' has a wrong offset!");
static_assert(offsetof(FAudioDeviceChange, IsChangedSpeakerDefault) == 0x00000C, "Member 'FAudioDeviceChange::IsChangedSpeakerDefault' has a wrong offset!");
static_assert(offsetof(FAudioDeviceChange, IsChangedSpeakerCommunications) == 0x00000D, "Member 'FAudioDeviceChange::IsChangedSpeakerCommunications' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.MediaStatus
// 0x0020 (0x0020 - 0x0000)
struct FMediaStatus final
{
public:
	class FString                                 Audio;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Video;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMediaStatus) == 0x000008, "Wrong alignment on FMediaStatus");
static_assert(sizeof(FMediaStatus) == 0x000020, "Wrong size on FMediaStatus");
static_assert(offsetof(FMediaStatus, Audio) == 0x000000, "Member 'FMediaStatus::Audio' has a wrong offset!");
static_assert(offsetof(FMediaStatus, Video) == 0x000010, "Member 'FMediaStatus::Video' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.AudioDeviceInfo
// 0x0028 (0x0028 - 0x0000)
struct FAudioDeviceInfo final
{
public:
	bool                                          IsInput;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDefault;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCommunications;                                  // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioDeviceInfo) == 0x000008, "Wrong alignment on FAudioDeviceInfo");
static_assert(sizeof(FAudioDeviceInfo) == 0x000028, "Wrong size on FAudioDeviceInfo");
static_assert(offsetof(FAudioDeviceInfo, IsInput) == 0x000000, "Member 'FAudioDeviceInfo::IsInput' has a wrong offset!");
static_assert(offsetof(FAudioDeviceInfo, IsDefault) == 0x000001, "Member 'FAudioDeviceInfo::IsDefault' has a wrong offset!");
static_assert(offsetof(FAudioDeviceInfo, IsCommunications) == 0x000002, "Member 'FAudioDeviceInfo::IsCommunications' has a wrong offset!");
static_assert(offsetof(FAudioDeviceInfo, Name) == 0x000008, "Member 'FAudioDeviceInfo::Name' has a wrong offset!");
static_assert(offsetof(FAudioDeviceInfo, ID) == 0x000018, "Member 'FAudioDeviceInfo::ID' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.NotificationLeaveRoom
// 0x0000 (0x0250 - 0x0250)
struct FNotificationLeaveRoom final : public FBaseNotification
{
};
static_assert(alignof(FNotificationLeaveRoom) == 0x000008, "Wrong alignment on FNotificationLeaveRoom");
static_assert(sizeof(FNotificationLeaveRoom) == 0x000250, "Wrong size on FNotificationLeaveRoom");

// ScriptStruct PurpleCommunitySdk.BaseEvent
// 0x0030 (0x0030 - 0x0000)
struct FBaseEvent
{
public:
	class FString                                 Guid;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameCode;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventType;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseEvent) == 0x000008, "Wrong alignment on FBaseEvent");
static_assert(sizeof(FBaseEvent) == 0x000030, "Wrong size on FBaseEvent");
static_assert(offsetof(FBaseEvent, Guid) == 0x000000, "Member 'FBaseEvent::Guid' has a wrong offset!");
static_assert(offsetof(FBaseEvent, GameCode) == 0x000010, "Member 'FBaseEvent::GameCode' has a wrong offset!");
static_assert(offsetof(FBaseEvent, EventType) == 0x000020, "Member 'FBaseEvent::EventType' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.NotificationEnterRoom
// 0x0000 (0x0250 - 0x0250)
struct FNotificationEnterRoom final : public FBaseNotification
{
};
static_assert(alignof(FNotificationEnterRoom) == 0x000008, "Wrong alignment on FNotificationEnterRoom");
static_assert(sizeof(FNotificationEnterRoom) == 0x000250, "Wrong size on FNotificationEnterRoom");

// ScriptStruct PurpleCommunitySdk.BaseGoogleSTTResponse
// 0x0030 (0x0030 - 0x0000)
struct FBaseGoogleSTTResponse
{
public:
	int32                                         Error;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Module;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Line;                                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Defined;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseGoogleSTTResponse) == 0x000008, "Wrong alignment on FBaseGoogleSTTResponse");
static_assert(sizeof(FBaseGoogleSTTResponse) == 0x000030, "Wrong size on FBaseGoogleSTTResponse");
static_assert(offsetof(FBaseGoogleSTTResponse, Error) == 0x000000, "Member 'FBaseGoogleSTTResponse::Error' has a wrong offset!");
static_assert(offsetof(FBaseGoogleSTTResponse, Module) == 0x000004, "Member 'FBaseGoogleSTTResponse::Module' has a wrong offset!");
static_assert(offsetof(FBaseGoogleSTTResponse, Line) == 0x000008, "Member 'FBaseGoogleSTTResponse::Line' has a wrong offset!");
static_assert(offsetof(FBaseGoogleSTTResponse, Text) == 0x000010, "Member 'FBaseGoogleSTTResponse::Text' has a wrong offset!");
static_assert(offsetof(FBaseGoogleSTTResponse, Defined) == 0x000020, "Member 'FBaseGoogleSTTResponse::Defined' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.NotificationVoiceMute
// 0x0000 (0x0250 - 0x0250)
struct FNotificationVoiceMute final : public FBaseNotification
{
};
static_assert(alignof(FNotificationVoiceMute) == 0x000008, "Wrong alignment on FNotificationVoiceMute");
static_assert(sizeof(FNotificationVoiceMute) == 0x000250, "Wrong size on FNotificationVoiceMute");

// ScriptStruct PurpleCommunitySdk.NotificationVoiceMic
// 0x0000 (0x0250 - 0x0250)
struct FNotificationVoiceMic final : public FBaseNotification
{
};
static_assert(alignof(FNotificationVoiceMic) == 0x000008, "Wrong alignment on FNotificationVoiceMic");
static_assert(sizeof(FNotificationVoiceMic) == 0x000250, "Wrong size on FNotificationVoiceMic");

// ScriptStruct PurpleCommunitySdk.BaseResponse
// 0x0030 (0x0030 - 0x0000)
struct FBaseResponse
{
public:
	int32                                         Error;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Module;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Line;                                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Defined;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseResponse) == 0x000008, "Wrong alignment on FBaseResponse");
static_assert(sizeof(FBaseResponse) == 0x000030, "Wrong size on FBaseResponse");
static_assert(offsetof(FBaseResponse, Error) == 0x000000, "Member 'FBaseResponse::Error' has a wrong offset!");
static_assert(offsetof(FBaseResponse, Module) == 0x000004, "Member 'FBaseResponse::Module' has a wrong offset!");
static_assert(offsetof(FBaseResponse, Line) == 0x000008, "Member 'FBaseResponse::Line' has a wrong offset!");
static_assert(offsetof(FBaseResponse, Text) == 0x000010, "Member 'FBaseResponse::Text' has a wrong offset!");
static_assert(offsetof(FBaseResponse, Defined) == 0x000020, "Member 'FBaseResponse::Defined' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.SubscriptionInfo
// 0x0060 (0x0060 - 0x0000)
struct FSubscriptionInfo final
{
public:
	class FString                                 TopicName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubscribeUrl;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Login;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Passcode;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WorldTopic;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerAppDest;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubscriptionInfo) == 0x000008, "Wrong alignment on FSubscriptionInfo");
static_assert(sizeof(FSubscriptionInfo) == 0x000060, "Wrong size on FSubscriptionInfo");
static_assert(offsetof(FSubscriptionInfo, TopicName) == 0x000000, "Member 'FSubscriptionInfo::TopicName' has a wrong offset!");
static_assert(offsetof(FSubscriptionInfo, SubscribeUrl) == 0x000010, "Member 'FSubscriptionInfo::SubscribeUrl' has a wrong offset!");
static_assert(offsetof(FSubscriptionInfo, Login) == 0x000020, "Member 'FSubscriptionInfo::Login' has a wrong offset!");
static_assert(offsetof(FSubscriptionInfo, Passcode) == 0x000030, "Member 'FSubscriptionInfo::Passcode' has a wrong offset!");
static_assert(offsetof(FSubscriptionInfo, WorldTopic) == 0x000040, "Member 'FSubscriptionInfo::WorldTopic' has a wrong offset!");
static_assert(offsetof(FSubscriptionInfo, ServerAppDest) == 0x000050, "Member 'FSubscriptionInfo::ServerAppDest' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.GameRoomInfo
// 0x00A8 (0x00A8 - 0x0000)
struct FGameRoomInfo final
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0000(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 GameCode;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MemberCount;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceMemberCount;                                  // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMemberCount;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LastMessageContent;                                // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateLastMessagePublished;                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastMessageGuid;                                   // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateCreated;                                       // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Deleted;                                           // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameRoomInfo) == 0x000008, "Wrong alignment on FGameRoomInfo");
static_assert(sizeof(FGameRoomInfo) == 0x0000A8, "Wrong size on FGameRoomInfo");
static_assert(offsetof(FGameRoomInfo, GameRoomKeyInfo) == 0x000000, "Member 'FGameRoomInfo::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FGameRoomInfo, GameCode) == 0x000030, "Member 'FGameRoomInfo::GameCode' has a wrong offset!");
static_assert(offsetof(FGameRoomInfo, Name) == 0x000040, "Member 'FGameRoomInfo::Name' has a wrong offset!");
static_assert(offsetof(FGameRoomInfo, MemberCount) == 0x000050, "Member 'FGameRoomInfo::MemberCount' has a wrong offset!");
static_assert(offsetof(FGameRoomInfo, VoiceMemberCount) == 0x000054, "Member 'FGameRoomInfo::VoiceMemberCount' has a wrong offset!");
static_assert(offsetof(FGameRoomInfo, MaxMemberCount) == 0x000058, "Member 'FGameRoomInfo::MaxMemberCount' has a wrong offset!");
static_assert(offsetof(FGameRoomInfo, LastMessageContent) == 0x000060, "Member 'FGameRoomInfo::LastMessageContent' has a wrong offset!");
static_assert(offsetof(FGameRoomInfo, DateLastMessagePublished) == 0x000070, "Member 'FGameRoomInfo::DateLastMessagePublished' has a wrong offset!");
static_assert(offsetof(FGameRoomInfo, LastMessageGuid) == 0x000080, "Member 'FGameRoomInfo::LastMessageGuid' has a wrong offset!");
static_assert(offsetof(FGameRoomInfo, DateCreated) == 0x000090, "Member 'FGameRoomInfo::DateCreated' has a wrong offset!");
static_assert(offsetof(FGameRoomInfo, Deleted) == 0x0000A0, "Member 'FGameRoomInfo::Deleted' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.BaseResponseSubscriptionInfo
// 0x00A0 (0x00D0 - 0x0030)
struct FBaseResponseSubscriptionInfo : public FBaseResponse
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MtalkToken;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSubscriptionInfo                      SubscriptionInfo;                                  // 0x0060(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FGameRoomInfo>                  GameRoomInfoList;                                  // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseResponseSubscriptionInfo) == 0x000008, "Wrong alignment on FBaseResponseSubscriptionInfo");
static_assert(sizeof(FBaseResponseSubscriptionInfo) == 0x0000D0, "Wrong size on FBaseResponseSubscriptionInfo");
static_assert(offsetof(FBaseResponseSubscriptionInfo, MtalkToken) == 0x000040, "Member 'FBaseResponseSubscriptionInfo::MtalkToken' has a wrong offset!");
static_assert(offsetof(FBaseResponseSubscriptionInfo, CharacterId) == 0x000050, "Member 'FBaseResponseSubscriptionInfo::CharacterId' has a wrong offset!");
static_assert(offsetof(FBaseResponseSubscriptionInfo, SubscriptionInfo) == 0x000060, "Member 'FBaseResponseSubscriptionInfo::SubscriptionInfo' has a wrong offset!");
static_assert(offsetof(FBaseResponseSubscriptionInfo, GameRoomInfoList) == 0x0000C0, "Member 'FBaseResponseSubscriptionInfo::GameRoomInfoList' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.BaseTranslateApiResponse
// 0x0020 (0x0020 - 0x0000)
struct FBaseTranslateApiResponse
{
public:
	class FString                                 Raw_data;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tid;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseTranslateApiResponse) == 0x000008, "Wrong alignment on FBaseTranslateApiResponse");
static_assert(sizeof(FBaseTranslateApiResponse) == 0x000020, "Wrong size on FBaseTranslateApiResponse");
static_assert(offsetof(FBaseTranslateApiResponse, Raw_data) == 0x000000, "Member 'FBaseTranslateApiResponse::Raw_data' has a wrong offset!");
static_assert(offsetof(FBaseTranslateApiResponse, Tid) == 0x000010, "Member 'FBaseTranslateApiResponse::Tid' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.EventBlockUserContent
// 0x0030 (0x0030 - 0x0000)
struct FEventBlockUserContent final
{
public:
	class FString                                 TargetServerId;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetCharacterId;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetCharacterName;                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventBlockUserContent) == 0x000008, "Wrong alignment on FEventBlockUserContent");
static_assert(sizeof(FEventBlockUserContent) == 0x000030, "Wrong size on FEventBlockUserContent");
static_assert(offsetof(FEventBlockUserContent, TargetServerId) == 0x000000, "Member 'FEventBlockUserContent::TargetServerId' has a wrong offset!");
static_assert(offsetof(FEventBlockUserContent, TargetCharacterId) == 0x000010, "Member 'FEventBlockUserContent::TargetCharacterId' has a wrong offset!");
static_assert(offsetof(FEventBlockUserContent, TargetCharacterName) == 0x000020, "Member 'FEventBlockUserContent::TargetCharacterName' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.EventBlockUser
// 0x0030 (0x0060 - 0x0030)
struct FEventBlockUser final : public FBaseEvent
{
public:
	struct FEventBlockUserContent                 EventContent;                                      // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventBlockUser) == 0x000008, "Wrong alignment on FEventBlockUser");
static_assert(sizeof(FEventBlockUser) == 0x000060, "Wrong size on FEventBlockUser");
static_assert(offsetof(FEventBlockUser, EventContent) == 0x000030, "Member 'FEventBlockUser::EventContent' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.GameRoomInvitationInfo
// 0x00D0 (0x00D0 - 0x0000)
struct FGameRoomInvitationInfo final
{
public:
	class FString                                 InvitationId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChatGroupId;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0020(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 RoomName;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InviterGameCode;                                   // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InviterCharacterId;                                // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InviterCharacterName;                              // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InviteeGameCode;                                   // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InviteeCharacterId;                                // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InviteeCharacterName;                              // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateCreated;                                       // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameRoomInvitationInfo) == 0x000008, "Wrong alignment on FGameRoomInvitationInfo");
static_assert(sizeof(FGameRoomInvitationInfo) == 0x0000D0, "Wrong size on FGameRoomInvitationInfo");
static_assert(offsetof(FGameRoomInvitationInfo, InvitationId) == 0x000000, "Member 'FGameRoomInvitationInfo::InvitationId' has a wrong offset!");
static_assert(offsetof(FGameRoomInvitationInfo, ChatGroupId) == 0x000010, "Member 'FGameRoomInvitationInfo::ChatGroupId' has a wrong offset!");
static_assert(offsetof(FGameRoomInvitationInfo, GameRoomKeyInfo) == 0x000020, "Member 'FGameRoomInvitationInfo::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FGameRoomInvitationInfo, RoomName) == 0x000050, "Member 'FGameRoomInvitationInfo::RoomName' has a wrong offset!");
static_assert(offsetof(FGameRoomInvitationInfo, InviterGameCode) == 0x000060, "Member 'FGameRoomInvitationInfo::InviterGameCode' has a wrong offset!");
static_assert(offsetof(FGameRoomInvitationInfo, InviterCharacterId) == 0x000070, "Member 'FGameRoomInvitationInfo::InviterCharacterId' has a wrong offset!");
static_assert(offsetof(FGameRoomInvitationInfo, InviterCharacterName) == 0x000080, "Member 'FGameRoomInvitationInfo::InviterCharacterName' has a wrong offset!");
static_assert(offsetof(FGameRoomInvitationInfo, InviteeGameCode) == 0x000090, "Member 'FGameRoomInvitationInfo::InviteeGameCode' has a wrong offset!");
static_assert(offsetof(FGameRoomInvitationInfo, InviteeCharacterId) == 0x0000A0, "Member 'FGameRoomInvitationInfo::InviteeCharacterId' has a wrong offset!");
static_assert(offsetof(FGameRoomInvitationInfo, InviteeCharacterName) == 0x0000B0, "Member 'FGameRoomInvitationInfo::InviteeCharacterName' has a wrong offset!");
static_assert(offsetof(FGameRoomInvitationInfo, DateCreated) == 0x0000C0, "Member 'FGameRoomInvitationInfo::DateCreated' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.EventInvitationContent
// 0x00D0 (0x00D0 - 0x0000)
struct FEventInvitationContent final
{
public:
	struct FGameRoomInvitationInfo                InvitationInfo;                                    // 0x0000(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventInvitationContent) == 0x000008, "Wrong alignment on FEventInvitationContent");
static_assert(sizeof(FEventInvitationContent) == 0x0000D0, "Wrong size on FEventInvitationContent");
static_assert(offsetof(FEventInvitationContent, InvitationInfo) == 0x000000, "Member 'FEventInvitationContent::InvitationInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.EventInvitation
// 0x00D0 (0x0100 - 0x0030)
struct FEventInvitation final : public FBaseEvent
{
public:
	struct FEventInvitationContent                EventContent;                                      // 0x0030(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventInvitation) == 0x000008, "Wrong alignment on FEventInvitation");
static_assert(sizeof(FEventInvitation) == 0x000100, "Wrong size on FEventInvitation");
static_assert(offsetof(FEventInvitation, EventContent) == 0x000030, "Member 'FEventInvitation::EventContent' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.GameUserKey
// 0x0020 (0x0020 - 0x0000)
struct FGameUserKey final
{
public:
	class FString                                 CharacterId;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerKey;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameUserKey) == 0x000008, "Wrong alignment on FGameUserKey");
static_assert(sizeof(FGameUserKey) == 0x000020, "Wrong size on FGameUserKey");
static_assert(offsetof(FGameUserKey, CharacterId) == 0x000000, "Member 'FGameUserKey::CharacterId' has a wrong offset!");
static_assert(offsetof(FGameUserKey, ServerKey) == 0x000010, "Member 'FGameUserKey::ServerKey' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.EventRemoveUserMessageContent
// 0x0010 (0x0010 - 0x0000)
struct FEventRemoveUserMessageContent final
{
public:
	TArray<struct FGameUserKey>                   UserKeysForMessageDeletion;                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventRemoveUserMessageContent) == 0x000008, "Wrong alignment on FEventRemoveUserMessageContent");
static_assert(sizeof(FEventRemoveUserMessageContent) == 0x000010, "Wrong size on FEventRemoveUserMessageContent");
static_assert(offsetof(FEventRemoveUserMessageContent, UserKeysForMessageDeletion) == 0x000000, "Member 'FEventRemoveUserMessageContent::UserKeysForMessageDeletion' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.EventRemoveUserMessage
// 0x0010 (0x0040 - 0x0030)
struct FEventRemoveUserMessage final : public FBaseEvent
{
public:
	struct FEventRemoveUserMessageContent         EventContent;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventRemoveUserMessage) == 0x000008, "Wrong alignment on FEventRemoveUserMessage");
static_assert(sizeof(FEventRemoveUserMessage) == 0x000040, "Wrong size on FEventRemoveUserMessage");
static_assert(offsetof(FEventRemoveUserMessage, EventContent) == 0x000030, "Member 'FEventRemoveUserMessage::EventContent' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.GameRoomUserInfo
// 0x0178 (0x0178 - 0x0000)
struct FGameRoomUserInfo final
{
public:
	class FString                                 CharacterId;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Role;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateUserJoined;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UserLeft;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DateUserLeft;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UserBanned;                                        // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DateUserBanned;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UserVoiceMuted;                                    // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DateUserVoiceMuted;                                // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UserMicOffed;                                      // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DateUserMicOffed;                                  // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UserSpeakerOffed;                                  // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DateUserSpeakerOffed;                              // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UserVoiceJoined;                                   // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DateUserVoiceJoined;                               // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UserDeported;                                      // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DateUserDeported;                                  // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameUserInfo                          GameUserInfo;                                      // 0x00D8(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameRoomUserInfo) == 0x000008, "Wrong alignment on FGameRoomUserInfo");
static_assert(sizeof(FGameRoomUserInfo) == 0x000178, "Wrong size on FGameRoomUserInfo");
static_assert(offsetof(FGameRoomUserInfo, CharacterId) == 0x000000, "Member 'FGameRoomUserInfo::CharacterId' has a wrong offset!");
static_assert(offsetof(FGameRoomUserInfo, Role) == 0x000010, "Member 'FGameRoomUserInfo::Role' has a wrong offset!");
static_assert(offsetof(FGameRoomUserInfo, DateUserJoined) == 0x000020, "Member 'FGameRoomUserInfo::DateUserJoined' has a wrong offset!");
static_assert(offsetof(FGameRoomUserInfo, UserLeft) == 0x000030, "Member 'FGameRoomUserInfo::UserLeft' has a wrong offset!");
static_assert(offsetof(FGameRoomUserInfo, DateUserLeft) == 0x000038, "Member 'FGameRoomUserInfo::DateUserLeft' has a wrong offset!");
static_assert(offsetof(FGameRoomUserInfo, UserBanned) == 0x000048, "Member 'FGameRoomUserInfo::UserBanned' has a wrong offset!");
static_assert(offsetof(FGameRoomUserInfo, DateUserBanned) == 0x000050, "Member 'FGameRoomUserInfo::DateUserBanned' has a wrong offset!");
static_assert(offsetof(FGameRoomUserInfo, UserVoiceMuted) == 0x000060, "Member 'FGameRoomUserInfo::UserVoiceMuted' has a wrong offset!");
static_assert(offsetof(FGameRoomUserInfo, DateUserVoiceMuted) == 0x000068, "Member 'FGameRoomUserInfo::DateUserVoiceMuted' has a wrong offset!");
static_assert(offsetof(FGameRoomUserInfo, UserMicOffed) == 0x000078, "Member 'FGameRoomUserInfo::UserMicOffed' has a wrong offset!");
static_assert(offsetof(FGameRoomUserInfo, DateUserMicOffed) == 0x000080, "Member 'FGameRoomUserInfo::DateUserMicOffed' has a wrong offset!");
static_assert(offsetof(FGameRoomUserInfo, UserSpeakerOffed) == 0x000090, "Member 'FGameRoomUserInfo::UserSpeakerOffed' has a wrong offset!");
static_assert(offsetof(FGameRoomUserInfo, DateUserSpeakerOffed) == 0x000098, "Member 'FGameRoomUserInfo::DateUserSpeakerOffed' has a wrong offset!");
static_assert(offsetof(FGameRoomUserInfo, UserVoiceJoined) == 0x0000A8, "Member 'FGameRoomUserInfo::UserVoiceJoined' has a wrong offset!");
static_assert(offsetof(FGameRoomUserInfo, DateUserVoiceJoined) == 0x0000B0, "Member 'FGameRoomUserInfo::DateUserVoiceJoined' has a wrong offset!");
static_assert(offsetof(FGameRoomUserInfo, UserDeported) == 0x0000C0, "Member 'FGameRoomUserInfo::UserDeported' has a wrong offset!");
static_assert(offsetof(FGameRoomUserInfo, DateUserDeported) == 0x0000C8, "Member 'FGameRoomUserInfo::DateUserDeported' has a wrong offset!");
static_assert(offsetof(FGameRoomUserInfo, GameUserInfo) == 0x0000D8, "Member 'FGameRoomUserInfo::GameUserInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.EventUpdateRoomContent
// 0x00B8 (0x00B8 - 0x0000)
struct FEventUpdateRoomContent final
{
public:
	struct FGameRoomInfo                          GameRoomInfo;                                      // 0x0000(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FGameRoomUserInfo>              GameRoomUserInfoList;                              // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventUpdateRoomContent) == 0x000008, "Wrong alignment on FEventUpdateRoomContent");
static_assert(sizeof(FEventUpdateRoomContent) == 0x0000B8, "Wrong size on FEventUpdateRoomContent");
static_assert(offsetof(FEventUpdateRoomContent, GameRoomInfo) == 0x000000, "Member 'FEventUpdateRoomContent::GameRoomInfo' has a wrong offset!");
static_assert(offsetof(FEventUpdateRoomContent, GameRoomUserInfoList) == 0x0000A8, "Member 'FEventUpdateRoomContent::GameRoomUserInfoList' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.EventUpdateRoom
// 0x00B8 (0x00E8 - 0x0030)
struct FEventUpdateRoom final : public FBaseEvent
{
public:
	struct FEventUpdateRoomContent                EventContent;                                      // 0x0030(0x00B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventUpdateRoom) == 0x000008, "Wrong alignment on FEventUpdateRoom");
static_assert(sizeof(FEventUpdateRoom) == 0x0000E8, "Wrong size on FEventUpdateRoom");
static_assert(offsetof(FEventUpdateRoom, EventContent) == 0x000030, "Member 'FEventUpdateRoom::EventContent' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.EventVoiceChatContent
// 0x0058 (0x0058 - 0x0000)
struct FEventVoiceChatContent final
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0000(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ChannelId;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MemberCount;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameRoomUserInfo>              GameRoomUserInfoList;                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventVoiceChatContent) == 0x000008, "Wrong alignment on FEventVoiceChatContent");
static_assert(sizeof(FEventVoiceChatContent) == 0x000058, "Wrong size on FEventVoiceChatContent");
static_assert(offsetof(FEventVoiceChatContent, GameRoomKeyInfo) == 0x000000, "Member 'FEventVoiceChatContent::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FEventVoiceChatContent, ChannelId) == 0x000030, "Member 'FEventVoiceChatContent::ChannelId' has a wrong offset!");
static_assert(offsetof(FEventVoiceChatContent, MemberCount) == 0x000040, "Member 'FEventVoiceChatContent::MemberCount' has a wrong offset!");
static_assert(offsetof(FEventVoiceChatContent, GameRoomUserInfoList) == 0x000048, "Member 'FEventVoiceChatContent::GameRoomUserInfoList' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.EventVoiceChat
// 0x0058 (0x0088 - 0x0030)
struct FEventVoiceChat final : public FBaseEvent
{
public:
	struct FEventVoiceChatContent                 EventContent;                                      // 0x0030(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventVoiceChat) == 0x000008, "Wrong alignment on FEventVoiceChat");
static_assert(sizeof(FEventVoiceChat) == 0x000088, "Wrong size on FEventVoiceChat");
static_assert(offsetof(FEventVoiceChat, EventContent) == 0x000030, "Member 'FEventVoiceChat::EventContent' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.GameChatMessageInfo
// 0x0030 (0x0030 - 0x0000)
struct FGameChatMessageInfo final
{
public:
	class FString                                 Guid;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateCreated;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameChatMessageInfo) == 0x000008, "Wrong alignment on FGameChatMessageInfo");
static_assert(sizeof(FGameChatMessageInfo) == 0x000030, "Wrong size on FGameChatMessageInfo");
static_assert(offsetof(FGameChatMessageInfo, Guid) == 0x000000, "Member 'FGameChatMessageInfo::Guid' has a wrong offset!");
static_assert(offsetof(FGameChatMessageInfo, Content) == 0x000010, "Member 'FGameChatMessageInfo::Content' has a wrong offset!");
static_assert(offsetof(FGameChatMessageInfo, DateCreated) == 0x000020, "Member 'FGameChatMessageInfo::DateCreated' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.MessageUserProperties
// 0x0001 (0x0001 - 0x0000)
struct FMessageUserProperties final
{
public:
	bool                                          Hidden;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMessageUserProperties) == 0x000001, "Wrong alignment on FMessageUserProperties");
static_assert(sizeof(FMessageUserProperties) == 0x000001, "Wrong size on FMessageUserProperties");
static_assert(offsetof(FMessageUserProperties, Hidden) == 0x000000, "Member 'FMessageUserProperties::Hidden' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.GameMessageInfo
// 0x00D0 (0x00D0 - 0x0000)
struct FGameMessageInfo final
{
public:
	class FString                                 UserName;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OriginalContent;                                   // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Attribute;                                         // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Optional;                                          // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttachmentInfo                        AttachmentInfo;                                    // 0x0070(0x0028)(NativeAccessSpecifierPublic)
	struct FMessageUserProperties                 SenderProperties;                                  // 0x0098(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReceiverCharacterId;                               // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceiverUserName;                                  // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceiverServerId;                                  // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameMessageInfo) == 0x000008, "Wrong alignment on FGameMessageInfo");
static_assert(sizeof(FGameMessageInfo) == 0x0000D0, "Wrong size on FGameMessageInfo");
static_assert(offsetof(FGameMessageInfo, UserName) == 0x000000, "Member 'FGameMessageInfo::UserName' has a wrong offset!");
static_assert(offsetof(FGameMessageInfo, Type) == 0x000010, "Member 'FGameMessageInfo::Type' has a wrong offset!");
static_assert(offsetof(FGameMessageInfo, SubType) == 0x000020, "Member 'FGameMessageInfo::SubType' has a wrong offset!");
static_assert(offsetof(FGameMessageInfo, Content) == 0x000030, "Member 'FGameMessageInfo::Content' has a wrong offset!");
static_assert(offsetof(FGameMessageInfo, OriginalContent) == 0x000040, "Member 'FGameMessageInfo::OriginalContent' has a wrong offset!");
static_assert(offsetof(FGameMessageInfo, Attribute) == 0x000050, "Member 'FGameMessageInfo::Attribute' has a wrong offset!");
static_assert(offsetof(FGameMessageInfo, Optional) == 0x000060, "Member 'FGameMessageInfo::Optional' has a wrong offset!");
static_assert(offsetof(FGameMessageInfo, AttachmentInfo) == 0x000070, "Member 'FGameMessageInfo::AttachmentInfo' has a wrong offset!");
static_assert(offsetof(FGameMessageInfo, SenderProperties) == 0x000098, "Member 'FGameMessageInfo::SenderProperties' has a wrong offset!");
static_assert(offsetof(FGameMessageInfo, ReceiverCharacterId) == 0x0000A0, "Member 'FGameMessageInfo::ReceiverCharacterId' has a wrong offset!");
static_assert(offsetof(FGameMessageInfo, ReceiverUserName) == 0x0000B0, "Member 'FGameMessageInfo::ReceiverUserName' has a wrong offset!");
static_assert(offsetof(FGameMessageInfo, ReceiverServerId) == 0x0000C0, "Member 'FGameMessageInfo::ReceiverServerId' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.GamePresetInfo
// 0x0048 (0x0048 - 0x0000)
struct FGamePresetInfo final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameCode;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ServerKeyRequired;                                 // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ValidatePlayNcUser;                                // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ValidateGameKey;                                   // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseGameData;                                       // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoCreateGameUser;                                // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DateCreated;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateLastUpdated;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGamePresetInfo) == 0x000008, "Wrong alignment on FGamePresetInfo");
static_assert(sizeof(FGamePresetInfo) == 0x000048, "Wrong size on FGamePresetInfo");
static_assert(offsetof(FGamePresetInfo, ID) == 0x000000, "Member 'FGamePresetInfo::ID' has a wrong offset!");
static_assert(offsetof(FGamePresetInfo, GameCode) == 0x000010, "Member 'FGamePresetInfo::GameCode' has a wrong offset!");
static_assert(offsetof(FGamePresetInfo, ServerKeyRequired) == 0x000020, "Member 'FGamePresetInfo::ServerKeyRequired' has a wrong offset!");
static_assert(offsetof(FGamePresetInfo, ValidatePlayNcUser) == 0x000021, "Member 'FGamePresetInfo::ValidatePlayNcUser' has a wrong offset!");
static_assert(offsetof(FGamePresetInfo, ValidateGameKey) == 0x000022, "Member 'FGamePresetInfo::ValidateGameKey' has a wrong offset!");
static_assert(offsetof(FGamePresetInfo, UseGameData) == 0x000023, "Member 'FGamePresetInfo::UseGameData' has a wrong offset!");
static_assert(offsetof(FGamePresetInfo, AutoCreateGameUser) == 0x000024, "Member 'FGamePresetInfo::AutoCreateGameUser' has a wrong offset!");
static_assert(offsetof(FGamePresetInfo, DateCreated) == 0x000028, "Member 'FGamePresetInfo::DateCreated' has a wrong offset!");
static_assert(offsetof(FGamePresetInfo, DateLastUpdated) == 0x000038, "Member 'FGamePresetInfo::DateLastUpdated' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.GameRoomSecurityInfo
// 0x0018 (0x0018 - 0x0000)
struct FGameRoomSecurityInfo final
{
public:
	bool                                          IsPrivate;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Password;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameRoomSecurityInfo) == 0x000008, "Wrong alignment on FGameRoomSecurityInfo");
static_assert(sizeof(FGameRoomSecurityInfo) == 0x000018, "Wrong size on FGameRoomSecurityInfo");
static_assert(offsetof(FGameRoomSecurityInfo, IsPrivate) == 0x000000, "Member 'FGameRoomSecurityInfo::IsPrivate' has a wrong offset!");
static_assert(offsetof(FGameRoomSecurityInfo, Password) == 0x000008, "Member 'FGameRoomSecurityInfo::Password' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.GameRoomUserVoiceInfo
// 0x0058 (0x0058 - 0x0000)
struct FGameRoomUserVoiceInfo final
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0000(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 GameUserId;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VoiceJoined;                                       // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DateUserVoiceJoined;                               // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameRoomUserVoiceInfo) == 0x000008, "Wrong alignment on FGameRoomUserVoiceInfo");
static_assert(sizeof(FGameRoomUserVoiceInfo) == 0x000058, "Wrong size on FGameRoomUserVoiceInfo");
static_assert(offsetof(FGameRoomUserVoiceInfo, GameRoomKeyInfo) == 0x000000, "Member 'FGameRoomUserVoiceInfo::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FGameRoomUserVoiceInfo, GameUserId) == 0x000030, "Member 'FGameRoomUserVoiceInfo::GameUserId' has a wrong offset!");
static_assert(offsetof(FGameRoomUserVoiceInfo, VoiceJoined) == 0x000040, "Member 'FGameRoomUserVoiceInfo::VoiceJoined' has a wrong offset!");
static_assert(offsetof(FGameRoomUserVoiceInfo, DateUserVoiceJoined) == 0x000048, "Member 'FGameRoomUserVoiceInfo::DateUserVoiceJoined' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.GoogleJson
// 0x00A8 (0x00A8 - 0x0000)
struct FGoogleJson final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Type;                                              // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Project_id;                                        // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Private_key_id;                                    // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Private_key;                                       // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Client_email;                                      // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Client_id;                                         // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Auth_uri;                                          // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token_uri;                                         // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Auth_provider_x509_cert_url;                       // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Client_x509_cert_url;                              // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoogleJson) == 0x000008, "Wrong alignment on FGoogleJson");
static_assert(sizeof(FGoogleJson) == 0x0000A8, "Wrong size on FGoogleJson");
static_assert(offsetof(FGoogleJson, Type) == 0x000008, "Member 'FGoogleJson::Type' has a wrong offset!");
static_assert(offsetof(FGoogleJson, Project_id) == 0x000018, "Member 'FGoogleJson::Project_id' has a wrong offset!");
static_assert(offsetof(FGoogleJson, Private_key_id) == 0x000028, "Member 'FGoogleJson::Private_key_id' has a wrong offset!");
static_assert(offsetof(FGoogleJson, Private_key) == 0x000038, "Member 'FGoogleJson::Private_key' has a wrong offset!");
static_assert(offsetof(FGoogleJson, Client_email) == 0x000048, "Member 'FGoogleJson::Client_email' has a wrong offset!");
static_assert(offsetof(FGoogleJson, Client_id) == 0x000058, "Member 'FGoogleJson::Client_id' has a wrong offset!");
static_assert(offsetof(FGoogleJson, Auth_uri) == 0x000068, "Member 'FGoogleJson::Auth_uri' has a wrong offset!");
static_assert(offsetof(FGoogleJson, Token_uri) == 0x000078, "Member 'FGoogleJson::Token_uri' has a wrong offset!");
static_assert(offsetof(FGoogleJson, Auth_provider_x509_cert_url) == 0x000088, "Member 'FGoogleJson::Auth_provider_x509_cert_url' has a wrong offset!");
static_assert(offsetof(FGoogleJson, Client_x509_cert_url) == 0x000098, "Member 'FGoogleJson::Client_x509_cert_url' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.GoogleSTTError
// 0x0018 (0x0018 - 0x0000)
struct FGoogleSTTError final
{
public:
	bool                                          IsError;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Error;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoogleSTTError) == 0x000008, "Wrong alignment on FGoogleSTTError");
static_assert(sizeof(FGoogleSTTError) == 0x000018, "Wrong size on FGoogleSTTError");
static_assert(offsetof(FGoogleSTTError, IsError) == 0x000000, "Member 'FGoogleSTTError::IsError' has a wrong offset!");
static_assert(offsetof(FGoogleSTTError, Error) == 0x000004, "Member 'FGoogleSTTError::Error' has a wrong offset!");
static_assert(offsetof(FGoogleSTTError, Reason) == 0x000008, "Member 'FGoogleSTTError::Reason' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.MediaRole
// 0x0020 (0x0020 - 0x0000)
struct FMediaRole final
{
public:
	class FString                                 Audio;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Video;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMediaRole) == 0x000008, "Wrong alignment on FMediaRole");
static_assert(sizeof(FMediaRole) == 0x000020, "Wrong size on FMediaRole");
static_assert(offsetof(FMediaRole, Audio) == 0x000000, "Member 'FMediaRole::Audio' has a wrong offset!");
static_assert(offsetof(FMediaRole, Video) == 0x000010, "Member 'FMediaRole::Video' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.MediaSignalServer
// 0x0030 (0x0030 - 0x0000)
struct FMediaSignalServer final
{
public:
	class FString                                 HttpHost;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WebSocketURL;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Address;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMediaSignalServer) == 0x000008, "Wrong alignment on FMediaSignalServer");
static_assert(sizeof(FMediaSignalServer) == 0x000030, "Wrong size on FMediaSignalServer");
static_assert(offsetof(FMediaSignalServer, HttpHost) == 0x000000, "Member 'FMediaSignalServer::HttpHost' has a wrong offset!");
static_assert(offsetof(FMediaSignalServer, WebSocketURL) == 0x000010, "Member 'FMediaSignalServer::WebSocketURL' has a wrong offset!");
static_assert(offsetof(FMediaSignalServer, Address) == 0x000020, "Member 'FMediaSignalServer::Address' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.NotificationBanChat
// 0x0000 (0x0250 - 0x0250)
struct FNotificationBanChat final : public FBaseNotification
{
};
static_assert(alignof(FNotificationBanChat) == 0x000008, "Wrong alignment on FNotificationBanChat");
static_assert(sizeof(FNotificationBanChat) == 0x000250, "Wrong size on FNotificationBanChat");

// ScriptStruct PurpleCommunitySdk.NotificationBlockUser
// 0x0000 (0x0250 - 0x0250)
struct FNotificationBlockUser final : public FBaseNotification
{
};
static_assert(alignof(FNotificationBlockUser) == 0x000008, "Wrong alignment on FNotificationBlockUser");
static_assert(sizeof(FNotificationBlockUser) == 0x000250, "Wrong size on FNotificationBlockUser");

// ScriptStruct PurpleCommunitySdk.NotificationCloseRoom
// 0x0000 (0x0250 - 0x0250)
struct FNotificationCloseRoom final : public FBaseNotification
{
};
static_assert(alignof(FNotificationCloseRoom) == 0x000008, "Wrong alignment on FNotificationCloseRoom");
static_assert(sizeof(FNotificationCloseRoom) == 0x000250, "Wrong size on FNotificationCloseRoom");

// ScriptStruct PurpleCommunitySdk.NotificationDeportRoom
// 0x0000 (0x0250 - 0x0250)
struct FNotificationDeportRoom final : public FBaseNotification
{
};
static_assert(alignof(FNotificationDeportRoom) == 0x000008, "Wrong alignment on FNotificationDeportRoom");
static_assert(sizeof(FNotificationDeportRoom) == 0x000250, "Wrong size on FNotificationDeportRoom");

// ScriptStruct PurpleCommunitySdk.NotificationReceiveMessage
// 0x0000 (0x0250 - 0x0250)
struct FNotificationReceiveMessage final : public FBaseNotification
{
};
static_assert(alignof(FNotificationReceiveMessage) == 0x000008, "Wrong alignment on FNotificationReceiveMessage");
static_assert(sizeof(FNotificationReceiveMessage) == 0x000250, "Wrong size on FNotificationReceiveMessage");

// ScriptStruct PurpleCommunitySdk.NotificationTransferOwnerRoom
// 0x0000 (0x0250 - 0x0250)
struct FNotificationTransferOwnerRoom final : public FBaseNotification
{
};
static_assert(alignof(FNotificationTransferOwnerRoom) == 0x000008, "Wrong alignment on FNotificationTransferOwnerRoom");
static_assert(sizeof(FNotificationTransferOwnerRoom) == 0x000250, "Wrong size on FNotificationTransferOwnerRoom");

// ScriptStruct PurpleCommunitySdk.NotificationVoiceSpeaker
// 0x0000 (0x0250 - 0x0250)
struct FNotificationVoiceSpeaker final : public FBaseNotification
{
};
static_assert(alignof(FNotificationVoiceSpeaker) == 0x000008, "Wrong alignment on FNotificationVoiceSpeaker");
static_assert(sizeof(FNotificationVoiceSpeaker) == 0x000250, "Wrong size on FNotificationVoiceSpeaker");

// ScriptStruct PurpleCommunitySdk.PlayerInfo
// 0x00C0 (0x00C0 - 0x0000)
struct FPlayerInfo final
{
public:
	class FString                                 ServiceType;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppGroupCode;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Scope;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoomId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerId;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Role;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMediaRole                             MediaRole;                                         // 0x0070(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMediaStatus                           MediaStatus;                                       // 0x0090(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 CreateTime;                                        // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerInfo) == 0x000008, "Wrong alignment on FPlayerInfo");
static_assert(sizeof(FPlayerInfo) == 0x0000C0, "Wrong size on FPlayerInfo");
static_assert(offsetof(FPlayerInfo, ServiceType) == 0x000000, "Member 'FPlayerInfo::ServiceType' has a wrong offset!");
static_assert(offsetof(FPlayerInfo, AppGroupCode) == 0x000010, "Member 'FPlayerInfo::AppGroupCode' has a wrong offset!");
static_assert(offsetof(FPlayerInfo, Scope) == 0x000020, "Member 'FPlayerInfo::Scope' has a wrong offset!");
static_assert(offsetof(FPlayerInfo, RoomId) == 0x000030, "Member 'FPlayerInfo::RoomId' has a wrong offset!");
static_assert(offsetof(FPlayerInfo, PlayerId) == 0x000040, "Member 'FPlayerInfo::PlayerId' has a wrong offset!");
static_assert(offsetof(FPlayerInfo, PlayerName) == 0x000050, "Member 'FPlayerInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FPlayerInfo, Role) == 0x000060, "Member 'FPlayerInfo::Role' has a wrong offset!");
static_assert(offsetof(FPlayerInfo, MediaRole) == 0x000070, "Member 'FPlayerInfo::MediaRole' has a wrong offset!");
static_assert(offsetof(FPlayerInfo, MediaStatus) == 0x000090, "Member 'FPlayerInfo::MediaStatus' has a wrong offset!");
static_assert(offsetof(FPlayerInfo, CreateTime) == 0x0000B0, "Member 'FPlayerInfo::CreateTime' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.PurpleCommunityChatError
// 0x0020 (0x0020 - 0x0000)
struct FPurpleCommunityChatError final
{
public:
	bool                                          IsError;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Domain;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Error;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPurpleCommunityChatError) == 0x000008, "Wrong alignment on FPurpleCommunityChatError");
static_assert(sizeof(FPurpleCommunityChatError) == 0x000020, "Wrong size on FPurpleCommunityChatError");
static_assert(offsetof(FPurpleCommunityChatError, IsError) == 0x000000, "Member 'FPurpleCommunityChatError::IsError' has a wrong offset!");
static_assert(offsetof(FPurpleCommunityChatError, Domain) == 0x000004, "Member 'FPurpleCommunityChatError::Domain' has a wrong offset!");
static_assert(offsetof(FPurpleCommunityChatError, Error) == 0x000008, "Member 'FPurpleCommunityChatError::Error' has a wrong offset!");
static_assert(offsetof(FPurpleCommunityChatError, Reason) == 0x000010, "Member 'FPurpleCommunityChatError::Reason' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.PurpleCommunityLiveError
// 0x0040 (0x0040 - 0x0000)
struct FPurpleCommunityLiveError final
{
public:
	bool                                          IsError;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Domain;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Uri;                                               // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Error;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPurpleCommunityLiveError) == 0x000008, "Wrong alignment on FPurpleCommunityLiveError");
static_assert(sizeof(FPurpleCommunityLiveError) == 0x000040, "Wrong size on FPurpleCommunityLiveError");
static_assert(offsetof(FPurpleCommunityLiveError, IsError) == 0x000000, "Member 'FPurpleCommunityLiveError::IsError' has a wrong offset!");
static_assert(offsetof(FPurpleCommunityLiveError, Domain) == 0x000008, "Member 'FPurpleCommunityLiveError::Domain' has a wrong offset!");
static_assert(offsetof(FPurpleCommunityLiveError, Uri) == 0x000018, "Member 'FPurpleCommunityLiveError::Uri' has a wrong offset!");
static_assert(offsetof(FPurpleCommunityLiveError, Error) == 0x000028, "Member 'FPurpleCommunityLiveError::Error' has a wrong offset!");
static_assert(offsetof(FPurpleCommunityLiveError, Reason) == 0x000030, "Member 'FPurpleCommunityLiveError::Reason' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestAcceptInvitation
// 0x0018 (0x0040 - 0x0028)
struct FRequestAcceptInvitation final : public FBaseRequest
{
public:
	class FString                                 InvitationId;                                      // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Accept;                                            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRequestAcceptInvitation) == 0x000008, "Wrong alignment on FRequestAcceptInvitation");
static_assert(sizeof(FRequestAcceptInvitation) == 0x000040, "Wrong size on FRequestAcceptInvitation");
static_assert(offsetof(FRequestAcceptInvitation, InvitationId) == 0x000028, "Member 'FRequestAcceptInvitation::InvitationId' has a wrong offset!");
static_assert(offsetof(FRequestAcceptInvitation, Accept) == 0x000038, "Member 'FRequestAcceptInvitation::Accept' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestBanUser
// 0x0050 (0x0078 - 0x0028)
struct FRequestBanUser final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerKey;                                         // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestBanUser) == 0x000008, "Wrong alignment on FRequestBanUser");
static_assert(sizeof(FRequestBanUser) == 0x000078, "Wrong size on FRequestBanUser");
static_assert(offsetof(FRequestBanUser, GameRoomKeyInfo) == 0x000028, "Member 'FRequestBanUser::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestBanUser, CharacterId) == 0x000058, "Member 'FRequestBanUser::CharacterId' has a wrong offset!");
static_assert(offsetof(FRequestBanUser, ServerKey) == 0x000068, "Member 'FRequestBanUser::ServerKey' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.TargetUserKey
// 0x0030 (0x0030 - 0x0000)
struct FTargetUserKey final
{
public:
	class FString                                 CharacterId;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterName;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerKey;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTargetUserKey) == 0x000008, "Wrong alignment on FTargetUserKey");
static_assert(sizeof(FTargetUserKey) == 0x000030, "Wrong size on FTargetUserKey");
static_assert(offsetof(FTargetUserKey, CharacterId) == 0x000000, "Member 'FTargetUserKey::CharacterId' has a wrong offset!");
static_assert(offsetof(FTargetUserKey, CharacterName) == 0x000010, "Member 'FTargetUserKey::CharacterName' has a wrong offset!");
static_assert(offsetof(FTargetUserKey, ServerKey) == 0x000020, "Member 'FTargetUserKey::ServerKey' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ValidationInfo
// 0x0010 (0x0010 - 0x0000)
struct FValidationInfo final
{
public:
	class FString                                 TargetCharacterName;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValidationInfo) == 0x000008, "Wrong alignment on FValidationInfo");
static_assert(sizeof(FValidationInfo) == 0x000010, "Wrong size on FValidationInfo");
static_assert(offsetof(FValidationInfo, TargetCharacterName) == 0x000000, "Member 'FValidationInfo::TargetCharacterName' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestBlockUser
// 0x0040 (0x0068 - 0x0028)
struct FRequestBlockUser final : public FBaseRequest
{
public:
	struct FTargetUserKey                         TargetUserKey;                                     // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	struct FValidationInfo                        ValidationInfo;                                    // 0x0058(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestBlockUser) == 0x000008, "Wrong alignment on FRequestBlockUser");
static_assert(sizeof(FRequestBlockUser) == 0x000068, "Wrong size on FRequestBlockUser");
static_assert(offsetof(FRequestBlockUser, TargetUserKey) == 0x000028, "Member 'FRequestBlockUser::TargetUserKey' has a wrong offset!");
static_assert(offsetof(FRequestBlockUser, ValidationInfo) == 0x000058, "Member 'FRequestBlockUser::ValidationInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestBlockVoiceChannelUser
// 0x0080 (0x00A8 - 0x0028)
struct FRequestBlockVoiceChannelUser final : public FBaseRequest
{
public:
	struct FTargetUserKey                         TargetUserKey;                                     // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0058(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 ChannelId;                                         // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FValidationInfo                        ValidationInfo;                                    // 0x0098(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestBlockVoiceChannelUser) == 0x000008, "Wrong alignment on FRequestBlockVoiceChannelUser");
static_assert(sizeof(FRequestBlockVoiceChannelUser) == 0x0000A8, "Wrong size on FRequestBlockVoiceChannelUser");
static_assert(offsetof(FRequestBlockVoiceChannelUser, TargetUserKey) == 0x000028, "Member 'FRequestBlockVoiceChannelUser::TargetUserKey' has a wrong offset!");
static_assert(offsetof(FRequestBlockVoiceChannelUser, GameRoomKeyInfo) == 0x000058, "Member 'FRequestBlockVoiceChannelUser::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestBlockVoiceChannelUser, ChannelId) == 0x000088, "Member 'FRequestBlockVoiceChannelUser::ChannelId' has a wrong offset!");
static_assert(offsetof(FRequestBlockVoiceChannelUser, ValidationInfo) == 0x000098, "Member 'FRequestBlockVoiceChannelUser::ValidationInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestCancelInvitation
// 0x0040 (0x0068 - 0x0028)
struct FRequestCancelInvitation final : public FBaseRequest
{
public:
	class FString                                 InvitationId;                                      // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0038(0x0030)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestCancelInvitation) == 0x000008, "Wrong alignment on FRequestCancelInvitation");
static_assert(sizeof(FRequestCancelInvitation) == 0x000068, "Wrong size on FRequestCancelInvitation");
static_assert(offsetof(FRequestCancelInvitation, InvitationId) == 0x000028, "Member 'FRequestCancelInvitation::InvitationId' has a wrong offset!");
static_assert(offsetof(FRequestCancelInvitation, GameRoomKeyInfo) == 0x000038, "Member 'FRequestCancelInvitation::GameRoomKeyInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestChangeReceivingVolume
// 0x0068 (0x0090 - 0x0028)
struct FRequestChangeReceivingVolume final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	struct FGameUserKey                           GameUserKey;                                       // 0x0058(0x0020)(NativeAccessSpecifierPublic)
	int32                                         Volume;                                            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChannelId;                                         // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestChangeReceivingVolume) == 0x000008, "Wrong alignment on FRequestChangeReceivingVolume");
static_assert(sizeof(FRequestChangeReceivingVolume) == 0x000090, "Wrong size on FRequestChangeReceivingVolume");
static_assert(offsetof(FRequestChangeReceivingVolume, GameRoomKeyInfo) == 0x000028, "Member 'FRequestChangeReceivingVolume::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestChangeReceivingVolume, GameUserKey) == 0x000058, "Member 'FRequestChangeReceivingVolume::GameUserKey' has a wrong offset!");
static_assert(offsetof(FRequestChangeReceivingVolume, Volume) == 0x000078, "Member 'FRequestChangeReceivingVolume::Volume' has a wrong offset!");
static_assert(offsetof(FRequestChangeReceivingVolume, ChannelId) == 0x000080, "Member 'FRequestChangeReceivingVolume::ChannelId' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestCreateAccessToken
// 0x0060 (0x0088 - 0x0028)
struct FRequestCreateAccessToken final : public FBaseRequest
{
public:
	class FString                                 Provider;                                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Payload;                                           // 0x0038(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestCreateAccessToken) == 0x000008, "Wrong alignment on FRequestCreateAccessToken");
static_assert(sizeof(FRequestCreateAccessToken) == 0x000088, "Wrong size on FRequestCreateAccessToken");
static_assert(offsetof(FRequestCreateAccessToken, Provider) == 0x000028, "Member 'FRequestCreateAccessToken::Provider' has a wrong offset!");
static_assert(offsetof(FRequestCreateAccessToken, Payload) == 0x000038, "Member 'FRequestCreateAccessToken::Payload' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestCreateGameReport
// 0x00A0 (0x00C8 - 0x0028)
struct FRequestCreateGameReport final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	struct FGameChatMessageInfo                   GameChatMessageInfo;                               // 0x0058(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 GameCode;                                          // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerKey;                                         // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestCreateGameReport) == 0x000008, "Wrong alignment on FRequestCreateGameReport");
static_assert(sizeof(FRequestCreateGameReport) == 0x0000C8, "Wrong size on FRequestCreateGameReport");
static_assert(offsetof(FRequestCreateGameReport, GameRoomKeyInfo) == 0x000028, "Member 'FRequestCreateGameReport::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestCreateGameReport, GameChatMessageInfo) == 0x000058, "Member 'FRequestCreateGameReport::GameChatMessageInfo' has a wrong offset!");
static_assert(offsetof(FRequestCreateGameReport, GameCode) == 0x000088, "Member 'FRequestCreateGameReport::GameCode' has a wrong offset!");
static_assert(offsetof(FRequestCreateGameReport, CharacterId) == 0x000098, "Member 'FRequestCreateGameReport::CharacterId' has a wrong offset!");
static_assert(offsetof(FRequestCreateGameReport, Reason) == 0x0000A8, "Member 'FRequestCreateGameReport::Reason' has a wrong offset!");
static_assert(offsetof(FRequestCreateGameReport, ServerKey) == 0x0000B8, "Member 'FRequestCreateGameReport::ServerKey' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestCreateOneOnOneRoomWithUser
// 0x0020 (0x0048 - 0x0028)
struct FRequestCreateOneOnOneRoomWithUser final : public FBaseRequest
{
public:
	struct FGameUserKey                           GameUserKey;                                       // 0x0028(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestCreateOneOnOneRoomWithUser) == 0x000008, "Wrong alignment on FRequestCreateOneOnOneRoomWithUser");
static_assert(sizeof(FRequestCreateOneOnOneRoomWithUser) == 0x000048, "Wrong size on FRequestCreateOneOnOneRoomWithUser");
static_assert(offsetof(FRequestCreateOneOnOneRoomWithUser, GameUserKey) == 0x000028, "Member 'FRequestCreateOneOnOneRoomWithUser::GameUserKey' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestCreateRoom
// 0x0058 (0x0080 - 0x0028)
struct FRequestCreateRoom final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameRoomSecurityInfo                  GameRoomSecurityInfo;                              // 0x0068(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestCreateRoom) == 0x000008, "Wrong alignment on FRequestCreateRoom");
static_assert(sizeof(FRequestCreateRoom) == 0x000080, "Wrong size on FRequestCreateRoom");
static_assert(offsetof(FRequestCreateRoom, GameRoomKeyInfo) == 0x000028, "Member 'FRequestCreateRoom::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestCreateRoom, Name) == 0x000058, "Member 'FRequestCreateRoom::Name' has a wrong offset!");
static_assert(offsetof(FRequestCreateRoom, GameRoomSecurityInfo) == 0x000068, "Member 'FRequestCreateRoom::GameRoomSecurityInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestDeleteRoom
// 0x0030 (0x0058 - 0x0028)
struct FRequestDeleteRoom final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestDeleteRoom) == 0x000008, "Wrong alignment on FRequestDeleteRoom");
static_assert(sizeof(FRequestDeleteRoom) == 0x000058, "Wrong size on FRequestDeleteRoom");
static_assert(offsetof(FRequestDeleteRoom, GameRoomKeyInfo) == 0x000028, "Member 'FRequestDeleteRoom::GameRoomKeyInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestDeportUser
// 0x0050 (0x0078 - 0x0028)
struct FRequestDeportUser final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerKey;                                         // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestDeportUser) == 0x000008, "Wrong alignment on FRequestDeportUser");
static_assert(sizeof(FRequestDeportUser) == 0x000078, "Wrong size on FRequestDeportUser");
static_assert(offsetof(FRequestDeportUser, GameRoomKeyInfo) == 0x000028, "Member 'FRequestDeportUser::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestDeportUser, CharacterId) == 0x000058, "Member 'FRequestDeportUser::CharacterId' has a wrong offset!");
static_assert(offsetof(FRequestDeportUser, ServerKey) == 0x000068, "Member 'FRequestDeportUser::ServerKey' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestDeportVoiceChannelUser
// 0x0060 (0x0088 - 0x0028)
struct FRequestDeportVoiceChannelUser final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 ChannelId;                                         // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerKey;                                         // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestDeportVoiceChannelUser) == 0x000008, "Wrong alignment on FRequestDeportVoiceChannelUser");
static_assert(sizeof(FRequestDeportVoiceChannelUser) == 0x000088, "Wrong size on FRequestDeportVoiceChannelUser");
static_assert(offsetof(FRequestDeportVoiceChannelUser, GameRoomKeyInfo) == 0x000028, "Member 'FRequestDeportVoiceChannelUser::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestDeportVoiceChannelUser, ChannelId) == 0x000058, "Member 'FRequestDeportVoiceChannelUser::ChannelId' has a wrong offset!");
static_assert(offsetof(FRequestDeportVoiceChannelUser, CharacterId) == 0x000068, "Member 'FRequestDeportVoiceChannelUser::CharacterId' has a wrong offset!");
static_assert(offsetof(FRequestDeportVoiceChannelUser, ServerKey) == 0x000078, "Member 'FRequestDeportVoiceChannelUser::ServerKey' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestFilterContent
// 0x0080 (0x00A8 - 0x0028)
struct FRequestFilterContent final : public FBaseRequest
{
public:
	class FString                                 RuleSetType;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Masking;                                           // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExtraData;                                         // 0x0058(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestFilterContent) == 0x000008, "Wrong alignment on FRequestFilterContent");
static_assert(sizeof(FRequestFilterContent) == 0x0000A8, "Wrong size on FRequestFilterContent");
static_assert(offsetof(FRequestFilterContent, RuleSetType) == 0x000028, "Member 'FRequestFilterContent::RuleSetType' has a wrong offset!");
static_assert(offsetof(FRequestFilterContent, Content) == 0x000038, "Member 'FRequestFilterContent::Content' has a wrong offset!");
static_assert(offsetof(FRequestFilterContent, Masking) == 0x000048, "Member 'FRequestFilterContent::Masking' has a wrong offset!");
static_assert(offsetof(FRequestFilterContent, ExtraData) == 0x000058, "Member 'FRequestFilterContent::ExtraData' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestGetBlockUserList
// 0x0000 (0x0028 - 0x0028)
struct FRequestGetBlockUserList final : public FBaseRequest
{
};
static_assert(alignof(FRequestGetBlockUserList) == 0x000008, "Wrong alignment on FRequestGetBlockUserList");
static_assert(sizeof(FRequestGetBlockUserList) == 0x000028, "Wrong size on FRequestGetBlockUserList");

// ScriptStruct PurpleCommunitySdk.RequestGetFileUploadUrl
// 0x0000 (0x0028 - 0x0028)
struct FRequestGetFileUploadUrl final : public FBaseRequest
{
};
static_assert(alignof(FRequestGetFileUploadUrl) == 0x000008, "Wrong alignment on FRequestGetFileUploadUrl");
static_assert(sizeof(FRequestGetFileUploadUrl) == 0x000028, "Wrong size on FRequestGetFileUploadUrl");

// ScriptStruct PurpleCommunitySdk.RequestGetInvitationList
// 0x0018 (0x0040 - 0x0028)
struct FRequestGetInvitationList final : public FBaseRequest
{
public:
	class FString                                 Cursor;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxListCount;                                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRequestGetInvitationList) == 0x000008, "Wrong alignment on FRequestGetInvitationList");
static_assert(sizeof(FRequestGetInvitationList) == 0x000040, "Wrong size on FRequestGetInvitationList");
static_assert(offsetof(FRequestGetInvitationList, Cursor) == 0x000028, "Member 'FRequestGetInvitationList::Cursor' has a wrong offset!");
static_assert(offsetof(FRequestGetInvitationList, MaxListCount) == 0x000038, "Member 'FRequestGetInvitationList::MaxListCount' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestGetJoinedRoomListWithRoomUsers
// 0x0018 (0x0040 - 0x0028)
struct FRequestGetJoinedRoomListWithRoomUsers final : public FBaseRequest
{
public:
	class FString                                 GameRoomType;                                      // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxListCount;                                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRequestGetJoinedRoomListWithRoomUsers) == 0x000008, "Wrong alignment on FRequestGetJoinedRoomListWithRoomUsers");
static_assert(sizeof(FRequestGetJoinedRoomListWithRoomUsers) == 0x000040, "Wrong size on FRequestGetJoinedRoomListWithRoomUsers");
static_assert(offsetof(FRequestGetJoinedRoomListWithRoomUsers, GameRoomType) == 0x000028, "Member 'FRequestGetJoinedRoomListWithRoomUsers::GameRoomType' has a wrong offset!");
static_assert(offsetof(FRequestGetJoinedRoomListWithRoomUsers, MaxListCount) == 0x000038, "Member 'FRequestGetJoinedRoomListWithRoomUsers::MaxListCount' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestGetRoom
// 0x0030 (0x0058 - 0x0028)
struct FRequestGetRoom final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestGetRoom) == 0x000008, "Wrong alignment on FRequestGetRoom");
static_assert(sizeof(FRequestGetRoom) == 0x000058, "Wrong size on FRequestGetRoom");
static_assert(offsetof(FRequestGetRoom, GameRoomKeyInfo) == 0x000028, "Member 'FRequestGetRoom::GameRoomKeyInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestGetRoomInvitationToken
// 0x0030 (0x0058 - 0x0028)
struct FRequestGetRoomInvitationToken final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestGetRoomInvitationToken) == 0x000008, "Wrong alignment on FRequestGetRoomInvitationToken");
static_assert(sizeof(FRequestGetRoomInvitationToken) == 0x000058, "Wrong size on FRequestGetRoomInvitationToken");
static_assert(offsetof(FRequestGetRoomInvitationToken, GameRoomKeyInfo) == 0x000028, "Member 'FRequestGetRoomInvitationToken::GameRoomKeyInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestGetRoomVoiceUsers
// 0x0048 (0x0070 - 0x0028)
struct FRequestGetRoomVoiceUsers final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 Cursor;                                            // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxListCount;                                      // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRequestGetRoomVoiceUsers) == 0x000008, "Wrong alignment on FRequestGetRoomVoiceUsers");
static_assert(sizeof(FRequestGetRoomVoiceUsers) == 0x000070, "Wrong size on FRequestGetRoomVoiceUsers");
static_assert(offsetof(FRequestGetRoomVoiceUsers, GameRoomKeyInfo) == 0x000028, "Member 'FRequestGetRoomVoiceUsers::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestGetRoomVoiceUsers, Cursor) == 0x000058, "Member 'FRequestGetRoomVoiceUsers::Cursor' has a wrong offset!");
static_assert(offsetof(FRequestGetRoomVoiceUsers, MaxListCount) == 0x000068, "Member 'FRequestGetRoomVoiceUsers::MaxListCount' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestGetSubscriptionInfo
// 0x0020 (0x0048 - 0x0028)
struct FRequestGetSubscriptionInfo final : public FBaseRequest
{
public:
	class FString                                 CharacterId;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerKey;                                         // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestGetSubscriptionInfo) == 0x000008, "Wrong alignment on FRequestGetSubscriptionInfo");
static_assert(sizeof(FRequestGetSubscriptionInfo) == 0x000048, "Wrong size on FRequestGetSubscriptionInfo");
static_assert(offsetof(FRequestGetSubscriptionInfo, CharacterId) == 0x000028, "Member 'FRequestGetSubscriptionInfo::CharacterId' has a wrong offset!");
static_assert(offsetof(FRequestGetSubscriptionInfo, ServerKey) == 0x000038, "Member 'FRequestGetSubscriptionInfo::ServerKey' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestGetUserProfile
// 0x0020 (0x0048 - 0x0028)
struct FRequestGetUserProfile final : public FBaseRequest
{
public:
	struct FGameUserKey                           GameUserKey;                                       // 0x0028(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestGetUserProfile) == 0x000008, "Wrong alignment on FRequestGetUserProfile");
static_assert(sizeof(FRequestGetUserProfile) == 0x000048, "Wrong size on FRequestGetUserProfile");
static_assert(offsetof(FRequestGetUserProfile, GameUserKey) == 0x000028, "Member 'FRequestGetUserProfile::GameUserKey' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestGetVoiceChannelUsers
// 0x0058 (0x0080 - 0x0028)
struct FRequestGetVoiceChannelUsers final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 ChannelId;                                         // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Cursor;                                            // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxListCount;                                      // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRequestGetVoiceChannelUsers) == 0x000008, "Wrong alignment on FRequestGetVoiceChannelUsers");
static_assert(sizeof(FRequestGetVoiceChannelUsers) == 0x000080, "Wrong size on FRequestGetVoiceChannelUsers");
static_assert(offsetof(FRequestGetVoiceChannelUsers, GameRoomKeyInfo) == 0x000028, "Member 'FRequestGetVoiceChannelUsers::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestGetVoiceChannelUsers, ChannelId) == 0x000058, "Member 'FRequestGetVoiceChannelUsers::ChannelId' has a wrong offset!");
static_assert(offsetof(FRequestGetVoiceChannelUsers, Cursor) == 0x000068, "Member 'FRequestGetVoiceChannelUsers::Cursor' has a wrong offset!");
static_assert(offsetof(FRequestGetVoiceChannelUsers, MaxListCount) == 0x000078, "Member 'FRequestGetVoiceChannelUsers::MaxListCount' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestGetVoiceJoinedChannelList
// 0x0010 (0x0038 - 0x0028)
struct FRequestGetVoiceJoinedChannelList final : public FBaseRequest
{
public:
	class FString                                 ServerKey;                                         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestGetVoiceJoinedChannelList) == 0x000008, "Wrong alignment on FRequestGetVoiceJoinedChannelList");
static_assert(sizeof(FRequestGetVoiceJoinedChannelList) == 0x000038, "Wrong size on FRequestGetVoiceJoinedChannelList");
static_assert(offsetof(FRequestGetVoiceJoinedChannelList, ServerKey) == 0x000028, "Member 'FRequestGetVoiceJoinedChannelList::ServerKey' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestGetVoiceRoomList
// 0x0000 (0x0028 - 0x0028)
struct FRequestGetVoiceRoomList final : public FBaseRequest
{
};
static_assert(alignof(FRequestGetVoiceRoomList) == 0x000008, "Wrong alignment on FRequestGetVoiceRoomList");
static_assert(sizeof(FRequestGetVoiceRoomList) == 0x000028, "Wrong size on FRequestGetVoiceRoomList");

// ScriptStruct PurpleCommunitySdk.RequestGetWaitingInvitationList
// 0x0030 (0x0058 - 0x0028)
struct FRequestGetWaitingInvitationList final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestGetWaitingInvitationList) == 0x000008, "Wrong alignment on FRequestGetWaitingInvitationList");
static_assert(sizeof(FRequestGetWaitingInvitationList) == 0x000058, "Wrong size on FRequestGetWaitingInvitationList");
static_assert(offsetof(FRequestGetWaitingInvitationList, GameRoomKeyInfo) == 0x000028, "Member 'FRequestGetWaitingInvitationList::GameRoomKeyInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.Config
// 0x0028 (0x0028 - 0x0000)
struct FConfig final
{
public:
	class FString                                 LanguageCode;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Encoding;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SampleRateHertz;                                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConfig) == 0x000008, "Wrong alignment on FConfig");
static_assert(sizeof(FConfig) == 0x000028, "Wrong size on FConfig");
static_assert(offsetof(FConfig, LanguageCode) == 0x000000, "Member 'FConfig::LanguageCode' has a wrong offset!");
static_assert(offsetof(FConfig, Encoding) == 0x000010, "Member 'FConfig::Encoding' has a wrong offset!");
static_assert(offsetof(FConfig, SampleRateHertz) == 0x000020, "Member 'FConfig::SampleRateHertz' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.Audio
// 0x0010 (0x0010 - 0x0000)
struct FAudio final
{
public:
	class FString                                 Content;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudio) == 0x000008, "Wrong alignment on FAudio");
static_assert(sizeof(FAudio) == 0x000010, "Wrong size on FAudio");
static_assert(offsetof(FAudio, Content) == 0x000000, "Member 'FAudio::Content' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestGoogleSTTRecognize
// 0x0040 (0x0040 - 0x0000)
struct FRequestGoogleSTTRecognize final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FConfig                                Config;                                            // 0x0008(0x0028)(NativeAccessSpecifierPublic)
	struct FAudio                                 Audio;                                             // 0x0030(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestGoogleSTTRecognize) == 0x000008, "Wrong alignment on FRequestGoogleSTTRecognize");
static_assert(sizeof(FRequestGoogleSTTRecognize) == 0x000040, "Wrong size on FRequestGoogleSTTRecognize");
static_assert(offsetof(FRequestGoogleSTTRecognize, Config) == 0x000008, "Member 'FRequestGoogleSTTRecognize::Config' has a wrong offset!");
static_assert(offsetof(FRequestGoogleSTTRecognize, Audio) == 0x000030, "Member 'FRequestGoogleSTTRecognize::Audio' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestInviteUser
// 0x0050 (0x0078 - 0x0028)
struct FRequestInviteUser final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerKey;                                         // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestInviteUser) == 0x000008, "Wrong alignment on FRequestInviteUser");
static_assert(sizeof(FRequestInviteUser) == 0x000078, "Wrong size on FRequestInviteUser");
static_assert(offsetof(FRequestInviteUser, GameRoomKeyInfo) == 0x000028, "Member 'FRequestInviteUser::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestInviteUser, CharacterId) == 0x000058, "Member 'FRequestInviteUser::CharacterId' has a wrong offset!");
static_assert(offsetof(FRequestInviteUser, ServerKey) == 0x000068, "Member 'FRequestInviteUser::ServerKey' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestJoinedRoomList
// 0x0028 (0x0050 - 0x0028)
struct FRequestJoinedRoomList final : public FBaseRequest
{
public:
	class FString                                 ServerKey;                                         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameRoomType;                                      // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxListCount;                                      // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRequestJoinedRoomList) == 0x000008, "Wrong alignment on FRequestJoinedRoomList");
static_assert(sizeof(FRequestJoinedRoomList) == 0x000050, "Wrong size on FRequestJoinedRoomList");
static_assert(offsetof(FRequestJoinedRoomList, ServerKey) == 0x000028, "Member 'FRequestJoinedRoomList::ServerKey' has a wrong offset!");
static_assert(offsetof(FRequestJoinedRoomList, GameRoomType) == 0x000038, "Member 'FRequestJoinedRoomList::GameRoomType' has a wrong offset!");
static_assert(offsetof(FRequestJoinedRoomList, MaxListCount) == 0x000048, "Member 'FRequestJoinedRoomList::MaxListCount' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestJoinRoom
// 0x0058 (0x0080 - 0x0028)
struct FRequestJoinRoom final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 Role;                                              // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameRoomSecurityInfo                  GameRoomSecurityInfo;                              // 0x0068(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestJoinRoom) == 0x000008, "Wrong alignment on FRequestJoinRoom");
static_assert(sizeof(FRequestJoinRoom) == 0x000080, "Wrong size on FRequestJoinRoom");
static_assert(offsetof(FRequestJoinRoom, GameRoomKeyInfo) == 0x000028, "Member 'FRequestJoinRoom::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestJoinRoom, Role) == 0x000058, "Member 'FRequestJoinRoom::Role' has a wrong offset!");
static_assert(offsetof(FRequestJoinRoom, GameRoomSecurityInfo) == 0x000068, "Member 'FRequestJoinRoom::GameRoomSecurityInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestLeaveRoom
// 0x0030 (0x0058 - 0x0028)
struct FRequestLeaveRoom final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestLeaveRoom) == 0x000008, "Wrong alignment on FRequestLeaveRoom");
static_assert(sizeof(FRequestLeaveRoom) == 0x000058, "Wrong size on FRequestLeaveRoom");
static_assert(offsetof(FRequestLeaveRoom, GameRoomKeyInfo) == 0x000028, "Member 'FRequestLeaveRoom::GameRoomKeyInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestLoginWithToken
// 0x0080 (0x00A8 - 0x0028)
struct FRequestLoginWithToken final : public FBaseRequest
{
public:
	class FString                                 AuthnToken;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameCode;                                          // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceID;                                          // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientType;                                        // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerKey;                                         // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Locale;                                            // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientAppId;                                       // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRequestLoginWithToken) == 0x000008, "Wrong alignment on FRequestLoginWithToken");
static_assert(sizeof(FRequestLoginWithToken) == 0x0000A8, "Wrong size on FRequestLoginWithToken");
static_assert(offsetof(FRequestLoginWithToken, AuthnToken) == 0x000028, "Member 'FRequestLoginWithToken::AuthnToken' has a wrong offset!");
static_assert(offsetof(FRequestLoginWithToken, GameCode) == 0x000038, "Member 'FRequestLoginWithToken::GameCode' has a wrong offset!");
static_assert(offsetof(FRequestLoginWithToken, DeviceID) == 0x000048, "Member 'FRequestLoginWithToken::DeviceID' has a wrong offset!");
static_assert(offsetof(FRequestLoginWithToken, ClientType) == 0x000058, "Member 'FRequestLoginWithToken::ClientType' has a wrong offset!");
static_assert(offsetof(FRequestLoginWithToken, CharacterId) == 0x000068, "Member 'FRequestLoginWithToken::CharacterId' has a wrong offset!");
static_assert(offsetof(FRequestLoginWithToken, ServerKey) == 0x000078, "Member 'FRequestLoginWithToken::ServerKey' has a wrong offset!");
static_assert(offsetof(FRequestLoginWithToken, Locale) == 0x000088, "Member 'FRequestLoginWithToken::Locale' has a wrong offset!");
static_assert(offsetof(FRequestLoginWithToken, ClientAppId) == 0x000098, "Member 'FRequestLoginWithToken::ClientAppId' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestLogoutWithJwtToken
// 0x0000 (0x0028 - 0x0028)
struct FRequestLogoutWithJwtToken final : public FBaseRequest
{
};
static_assert(alignof(FRequestLogoutWithJwtToken) == 0x000008, "Wrong alignment on FRequestLogoutWithJwtToken");
static_assert(sizeof(FRequestLogoutWithJwtToken) == 0x000028, "Wrong size on FRequestLogoutWithJwtToken");

// ScriptStruct PurpleCommunitySdk.RequestManualTranslate
// 0x0040 (0x0068 - 0x0028)
struct FRequestManualTranslate final : public FBaseRequest
{
public:
	class FString                                 Content;                                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourceLang;                                        // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetLang;                                        // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InputType;                                         // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestManualTranslate) == 0x000008, "Wrong alignment on FRequestManualTranslate");
static_assert(sizeof(FRequestManualTranslate) == 0x000068, "Wrong size on FRequestManualTranslate");
static_assert(offsetof(FRequestManualTranslate, Content) == 0x000028, "Member 'FRequestManualTranslate::Content' has a wrong offset!");
static_assert(offsetof(FRequestManualTranslate, SourceLang) == 0x000038, "Member 'FRequestManualTranslate::SourceLang' has a wrong offset!");
static_assert(offsetof(FRequestManualTranslate, TargetLang) == 0x000048, "Member 'FRequestManualTranslate::TargetLang' has a wrong offset!");
static_assert(offsetof(FRequestManualTranslate, InputType) == 0x000058, "Member 'FRequestManualTranslate::InputType' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestMessagesBackward
// 0x0048 (0x0070 - 0x0028)
struct FRequestMessagesBackward final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 Cursor;                                            // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxListCount;                                      // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRequestMessagesBackward) == 0x000008, "Wrong alignment on FRequestMessagesBackward");
static_assert(sizeof(FRequestMessagesBackward) == 0x000070, "Wrong size on FRequestMessagesBackward");
static_assert(offsetof(FRequestMessagesBackward, GameRoomKeyInfo) == 0x000028, "Member 'FRequestMessagesBackward::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestMessagesBackward, Cursor) == 0x000058, "Member 'FRequestMessagesBackward::Cursor' has a wrong offset!");
static_assert(offsetof(FRequestMessagesBackward, MaxListCount) == 0x000068, "Member 'FRequestMessagesBackward::MaxListCount' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestMessagesForward
// 0x0048 (0x0070 - 0x0028)
struct FRequestMessagesForward final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 Cursor;                                            // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxListCount;                                      // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRequestMessagesForward) == 0x000008, "Wrong alignment on FRequestMessagesForward");
static_assert(sizeof(FRequestMessagesForward) == 0x000070, "Wrong size on FRequestMessagesForward");
static_assert(offsetof(FRequestMessagesForward, GameRoomKeyInfo) == 0x000028, "Member 'FRequestMessagesForward::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestMessagesForward, Cursor) == 0x000058, "Member 'FRequestMessagesForward::Cursor' has a wrong offset!");
static_assert(offsetof(FRequestMessagesForward, MaxListCount) == 0x000068, "Member 'FRequestMessagesForward::MaxListCount' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestMuteVoiceUser
// 0x0060 (0x0088 - 0x0028)
struct FRequestMuteVoiceUser final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerKey;                                         // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChannelId;                                         // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestMuteVoiceUser) == 0x000008, "Wrong alignment on FRequestMuteVoiceUser");
static_assert(sizeof(FRequestMuteVoiceUser) == 0x000088, "Wrong size on FRequestMuteVoiceUser");
static_assert(offsetof(FRequestMuteVoiceUser, GameRoomKeyInfo) == 0x000028, "Member 'FRequestMuteVoiceUser::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestMuteVoiceUser, CharacterId) == 0x000058, "Member 'FRequestMuteVoiceUser::CharacterId' has a wrong offset!");
static_assert(offsetof(FRequestMuteVoiceUser, ServerKey) == 0x000068, "Member 'FRequestMuteVoiceUser::ServerKey' has a wrong offset!");
static_assert(offsetof(FRequestMuteVoiceUser, ChannelId) == 0x000078, "Member 'FRequestMuteVoiceUser::ChannelId' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestRoomUsers
// 0x0048 (0x0070 - 0x0028)
struct FRequestRoomUsers final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 Cursor;                                            // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxListCount;                                      // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRequestRoomUsers) == 0x000008, "Wrong alignment on FRequestRoomUsers");
static_assert(sizeof(FRequestRoomUsers) == 0x000070, "Wrong size on FRequestRoomUsers");
static_assert(offsetof(FRequestRoomUsers, GameRoomKeyInfo) == 0x000028, "Member 'FRequestRoomUsers::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestRoomUsers, Cursor) == 0x000058, "Member 'FRequestRoomUsers::Cursor' has a wrong offset!");
static_assert(offsetof(FRequestRoomUsers, MaxListCount) == 0x000068, "Member 'FRequestRoomUsers::MaxListCount' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.SearchRoomObject
// 0x0098 (0x0098 - 0x0000)
struct FSearchRoomObject final
{
public:
	class FString                                 SearchType;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            SearchCondition;                                   // 0x0010(0x0050)(NativeAccessSpecifierPublic)
	class FString                                 SortField;                                         // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SortOrder;                                         // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Cursor;                                            // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxListCount;                                      // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSearchRoomObject) == 0x000008, "Wrong alignment on FSearchRoomObject");
static_assert(sizeof(FSearchRoomObject) == 0x000098, "Wrong size on FSearchRoomObject");
static_assert(offsetof(FSearchRoomObject, SearchType) == 0x000000, "Member 'FSearchRoomObject::SearchType' has a wrong offset!");
static_assert(offsetof(FSearchRoomObject, SearchCondition) == 0x000010, "Member 'FSearchRoomObject::SearchCondition' has a wrong offset!");
static_assert(offsetof(FSearchRoomObject, SortField) == 0x000060, "Member 'FSearchRoomObject::SortField' has a wrong offset!");
static_assert(offsetof(FSearchRoomObject, SortOrder) == 0x000070, "Member 'FSearchRoomObject::SortOrder' has a wrong offset!");
static_assert(offsetof(FSearchRoomObject, Cursor) == 0x000080, "Member 'FSearchRoomObject::Cursor' has a wrong offset!");
static_assert(offsetof(FSearchRoomObject, MaxListCount) == 0x000090, "Member 'FSearchRoomObject::MaxListCount' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestSearchRoom
// 0x0098 (0x00C0 - 0x0028)
struct FRequestSearchRoom final : public FBaseRequest
{
public:
	struct FSearchRoomObject                      SearchRoomObject;                                  // 0x0028(0x0098)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestSearchRoom) == 0x000008, "Wrong alignment on FRequestSearchRoom");
static_assert(sizeof(FRequestSearchRoom) == 0x0000C0, "Wrong size on FRequestSearchRoom");
static_assert(offsetof(FRequestSearchRoom, SearchRoomObject) == 0x000028, "Member 'FRequestSearchRoom::SearchRoomObject' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestSendMessage
// 0x0160 (0x0188 - 0x0028)
struct FRequestSendMessage final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	struct FGameMessageInfo                       GameMessageInfo;                                   // 0x0058(0x00D0)(NativeAccessSpecifierPublic)
	struct FValidationInfo                        ValidationInfo;                                    // 0x0128(0x0010)(NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExtraData;                                         // 0x0138(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestSendMessage) == 0x000008, "Wrong alignment on FRequestSendMessage");
static_assert(sizeof(FRequestSendMessage) == 0x000188, "Wrong size on FRequestSendMessage");
static_assert(offsetof(FRequestSendMessage, GameRoomKeyInfo) == 0x000028, "Member 'FRequestSendMessage::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestSendMessage, GameMessageInfo) == 0x000058, "Member 'FRequestSendMessage::GameMessageInfo' has a wrong offset!");
static_assert(offsetof(FRequestSendMessage, ValidationInfo) == 0x000128, "Member 'FRequestSendMessage::ValidationInfo' has a wrong offset!");
static_assert(offsetof(FRequestSendMessage, ExtraData) == 0x000138, "Member 'FRequestSendMessage::ExtraData' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestSendWhisper
// 0x0150 (0x0178 - 0x0028)
struct FRequestSendWhisper final : public FBaseRequest
{
public:
	struct FGameUserKey                           GameUserKey;                                       // 0x0028(0x0020)(NativeAccessSpecifierPublic)
	struct FGameMessageInfo                       GameMessageInfo;                                   // 0x0048(0x00D0)(NativeAccessSpecifierPublic)
	struct FValidationInfo                        ValidationInfo;                                    // 0x0118(0x0010)(NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExtraData;                                         // 0x0128(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestSendWhisper) == 0x000008, "Wrong alignment on FRequestSendWhisper");
static_assert(sizeof(FRequestSendWhisper) == 0x000178, "Wrong size on FRequestSendWhisper");
static_assert(offsetof(FRequestSendWhisper, GameUserKey) == 0x000028, "Member 'FRequestSendWhisper::GameUserKey' has a wrong offset!");
static_assert(offsetof(FRequestSendWhisper, GameMessageInfo) == 0x000048, "Member 'FRequestSendWhisper::GameMessageInfo' has a wrong offset!");
static_assert(offsetof(FRequestSendWhisper, ValidationInfo) == 0x000118, "Member 'FRequestSendWhisper::ValidationInfo' has a wrong offset!");
static_assert(offsetof(FRequestSendWhisper, ExtraData) == 0x000128, "Member 'FRequestSendWhisper::ExtraData' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestStopVoiceChat
// 0x0040 (0x0068 - 0x0028)
struct FRequestStopVoiceChat final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 ChannelId;                                         // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestStopVoiceChat) == 0x000008, "Wrong alignment on FRequestStopVoiceChat");
static_assert(sizeof(FRequestStopVoiceChat) == 0x000068, "Wrong size on FRequestStopVoiceChat");
static_assert(offsetof(FRequestStopVoiceChat, GameRoomKeyInfo) == 0x000028, "Member 'FRequestStopVoiceChat::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestStopVoiceChat, ChannelId) == 0x000058, "Member 'FRequestStopVoiceChat::ChannelId' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestTransferOwner
// 0x0050 (0x0078 - 0x0028)
struct FRequestTransferOwner final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerKey;                                         // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestTransferOwner) == 0x000008, "Wrong alignment on FRequestTransferOwner");
static_assert(sizeof(FRequestTransferOwner) == 0x000078, "Wrong size on FRequestTransferOwner");
static_assert(offsetof(FRequestTransferOwner, GameRoomKeyInfo) == 0x000028, "Member 'FRequestTransferOwner::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestTransferOwner, CharacterId) == 0x000058, "Member 'FRequestTransferOwner::CharacterId' has a wrong offset!");
static_assert(offsetof(FRequestTransferOwner, ServerKey) == 0x000068, "Member 'FRequestTransferOwner::ServerKey' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestTranslate
// 0x0058 (0x0058 - 0x0000)
struct FRequestTranslate final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Tid;                                               // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Source_lang;                                       // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Source_text;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Target_lang;                                       // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sent_from;                                         // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestTranslate) == 0x000008, "Wrong alignment on FRequestTranslate");
static_assert(sizeof(FRequestTranslate) == 0x000058, "Wrong size on FRequestTranslate");
static_assert(offsetof(FRequestTranslate, Tid) == 0x000008, "Member 'FRequestTranslate::Tid' has a wrong offset!");
static_assert(offsetof(FRequestTranslate, Source_lang) == 0x000018, "Member 'FRequestTranslate::Source_lang' has a wrong offset!");
static_assert(offsetof(FRequestTranslate, Source_text) == 0x000028, "Member 'FRequestTranslate::Source_text' has a wrong offset!");
static_assert(offsetof(FRequestTranslate, Target_lang) == 0x000038, "Member 'FRequestTranslate::Target_lang' has a wrong offset!");
static_assert(offsetof(FRequestTranslate, Sent_from) == 0x000048, "Member 'FRequestTranslate::Sent_from' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestUnbanUser
// 0x0050 (0x0078 - 0x0028)
struct FRequestUnbanUser final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerKey;                                         // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestUnbanUser) == 0x000008, "Wrong alignment on FRequestUnbanUser");
static_assert(sizeof(FRequestUnbanUser) == 0x000078, "Wrong size on FRequestUnbanUser");
static_assert(offsetof(FRequestUnbanUser, GameRoomKeyInfo) == 0x000028, "Member 'FRequestUnbanUser::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestUnbanUser, CharacterId) == 0x000058, "Member 'FRequestUnbanUser::CharacterId' has a wrong offset!");
static_assert(offsetof(FRequestUnbanUser, ServerKey) == 0x000068, "Member 'FRequestUnbanUser::ServerKey' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestUnblockUser
// 0x0030 (0x0058 - 0x0028)
struct FRequestUnblockUser final : public FBaseRequest
{
public:
	struct FTargetUserKey                         TargetUserKey;                                     // 0x0028(0x0030)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestUnblockUser) == 0x000008, "Wrong alignment on FRequestUnblockUser");
static_assert(sizeof(FRequestUnblockUser) == 0x000058, "Wrong size on FRequestUnblockUser");
static_assert(offsetof(FRequestUnblockUser, TargetUserKey) == 0x000028, "Member 'FRequestUnblockUser::TargetUserKey' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestUnmuteVoiceUser
// 0x0060 (0x0088 - 0x0028)
struct FRequestUnmuteVoiceUser final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerKey;                                         // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChannelId;                                         // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestUnmuteVoiceUser) == 0x000008, "Wrong alignment on FRequestUnmuteVoiceUser");
static_assert(sizeof(FRequestUnmuteVoiceUser) == 0x000088, "Wrong size on FRequestUnmuteVoiceUser");
static_assert(offsetof(FRequestUnmuteVoiceUser, GameRoomKeyInfo) == 0x000028, "Member 'FRequestUnmuteVoiceUser::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestUnmuteVoiceUser, CharacterId) == 0x000058, "Member 'FRequestUnmuteVoiceUser::CharacterId' has a wrong offset!");
static_assert(offsetof(FRequestUnmuteVoiceUser, ServerKey) == 0x000068, "Member 'FRequestUnmuteVoiceUser::ServerKey' has a wrong offset!");
static_assert(offsetof(FRequestUnmuteVoiceUser, ChannelId) == 0x000078, "Member 'FRequestUnmuteVoiceUser::ChannelId' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestUpdateRoom
// 0x0050 (0x0078 - 0x0028)
struct FRequestUpdateRoom final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 NewPassword;                                       // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewName;                                           // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestUpdateRoom) == 0x000008, "Wrong alignment on FRequestUpdateRoom");
static_assert(sizeof(FRequestUpdateRoom) == 0x000078, "Wrong size on FRequestUpdateRoom");
static_assert(offsetof(FRequestUpdateRoom, GameRoomKeyInfo) == 0x000028, "Member 'FRequestUpdateRoom::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestUpdateRoom, NewPassword) == 0x000058, "Member 'FRequestUpdateRoom::NewPassword' has a wrong offset!");
static_assert(offsetof(FRequestUpdateRoom, NewName) == 0x000068, "Member 'FRequestUpdateRoom::NewName' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.UserProfile
// 0x0010 (0x0010 - 0x0000)
struct FUserProfile final
{
public:
	class FString                                 Intro;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserProfile) == 0x000008, "Wrong alignment on FUserProfile");
static_assert(sizeof(FUserProfile) == 0x000010, "Wrong size on FUserProfile");
static_assert(offsetof(FUserProfile, Intro) == 0x000000, "Member 'FUserProfile::Intro' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestUpdateUserProfile
// 0x0080 (0x00A8 - 0x0028)
struct FRequestUpdateUserProfile final : public FBaseRequest
{
public:
	struct FGameUserKey                           GameUserKey;                                       // 0x0028(0x0020)(NativeAccessSpecifierPublic)
	struct FUserProfile                           UserProfile;                                       // 0x0048(0x0010)(NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExtraData;                                         // 0x0058(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestUpdateUserProfile) == 0x000008, "Wrong alignment on FRequestUpdateUserProfile");
static_assert(sizeof(FRequestUpdateUserProfile) == 0x0000A8, "Wrong size on FRequestUpdateUserProfile");
static_assert(offsetof(FRequestUpdateUserProfile, GameUserKey) == 0x000028, "Member 'FRequestUpdateUserProfile::GameUserKey' has a wrong offset!");
static_assert(offsetof(FRequestUpdateUserProfile, UserProfile) == 0x000048, "Member 'FRequestUpdateUserProfile::UserProfile' has a wrong offset!");
static_assert(offsetof(FRequestUpdateUserProfile, ExtraData) == 0x000058, "Member 'FRequestUpdateUserProfile::ExtraData' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestUpdateUserRole
// 0x0060 (0x0088 - 0x0028)
struct FRequestUpdateUserRole final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerKey;                                         // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Role;                                              // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestUpdateUserRole) == 0x000008, "Wrong alignment on FRequestUpdateUserRole");
static_assert(sizeof(FRequestUpdateUserRole) == 0x000088, "Wrong size on FRequestUpdateUserRole");
static_assert(offsetof(FRequestUpdateUserRole, GameRoomKeyInfo) == 0x000028, "Member 'FRequestUpdateUserRole::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestUpdateUserRole, CharacterId) == 0x000058, "Member 'FRequestUpdateUserRole::CharacterId' has a wrong offset!");
static_assert(offsetof(FRequestUpdateUserRole, ServerKey) == 0x000068, "Member 'FRequestUpdateUserRole::ServerKey' has a wrong offset!");
static_assert(offsetof(FRequestUpdateUserRole, Role) == 0x000078, "Member 'FRequestUpdateUserRole::Role' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestUpdateVoiceChatStatus
// 0x0048 (0x0070 - 0x0028)
struct FRequestUpdateVoiceChatStatus final : public FBaseRequest
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	bool                                          MicOffed;                                          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpeakerOffed;                                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChannelId;                                         // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestUpdateVoiceChatStatus) == 0x000008, "Wrong alignment on FRequestUpdateVoiceChatStatus");
static_assert(sizeof(FRequestUpdateVoiceChatStatus) == 0x000070, "Wrong size on FRequestUpdateVoiceChatStatus");
static_assert(offsetof(FRequestUpdateVoiceChatStatus, GameRoomKeyInfo) == 0x000028, "Member 'FRequestUpdateVoiceChatStatus::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRequestUpdateVoiceChatStatus, MicOffed) == 0x000058, "Member 'FRequestUpdateVoiceChatStatus::MicOffed' has a wrong offset!");
static_assert(offsetof(FRequestUpdateVoiceChatStatus, SpeakerOffed) == 0x000059, "Member 'FRequestUpdateVoiceChatStatus::SpeakerOffed' has a wrong offset!");
static_assert(offsetof(FRequestUpdateVoiceChatStatus, ChannelId) == 0x000060, "Member 'FRequestUpdateVoiceChatStatus::ChannelId' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RequestUploadFile
// 0x0020 (0x0048 - 0x0028)
struct FRequestUploadFile final : public FBaseRequest
{
public:
	class FString                                 UploadUrl;                                         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestUploadFile) == 0x000008, "Wrong alignment on FRequestUploadFile");
static_assert(sizeof(FRequestUploadFile) == 0x000048, "Wrong size on FRequestUploadFile");
static_assert(offsetof(FRequestUploadFile, UploadUrl) == 0x000028, "Member 'FRequestUploadFile::UploadUrl' has a wrong offset!");
static_assert(offsetof(FRequestUploadFile, FilePath) == 0x000038, "Member 'FRequestUploadFile::FilePath' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseAcceptInvitation
// 0x0180 (0x01B0 - 0x0030)
struct FResponseAcceptInvitation final : public FBaseResponse
{
public:
	struct FGameRoomInvitationInfo                InvitationInfo;                                    // 0x0030(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameRoomInfo                          GameRoomInfo;                                      // 0x0100(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Accept;                                            // 0x01A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResponseAcceptInvitation) == 0x000008, "Wrong alignment on FResponseAcceptInvitation");
static_assert(sizeof(FResponseAcceptInvitation) == 0x0001B0, "Wrong size on FResponseAcceptInvitation");
static_assert(offsetof(FResponseAcceptInvitation, InvitationInfo) == 0x000030, "Member 'FResponseAcceptInvitation::InvitationInfo' has a wrong offset!");
static_assert(offsetof(FResponseAcceptInvitation, GameRoomInfo) == 0x000100, "Member 'FResponseAcceptInvitation::GameRoomInfo' has a wrong offset!");
static_assert(offsetof(FResponseAcceptInvitation, Accept) == 0x0001A8, "Member 'FResponseAcceptInvitation::Accept' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseBanUser
// 0x01A8 (0x01D8 - 0x0030)
struct FResponseBanUser final : public FBaseResponse
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameRoomUserInfo                      GameRoomUserInfo;                                  // 0x0060(0x0178)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseBanUser) == 0x000008, "Wrong alignment on FResponseBanUser");
static_assert(sizeof(FResponseBanUser) == 0x0001D8, "Wrong size on FResponseBanUser");
static_assert(offsetof(FResponseBanUser, GameRoomKeyInfo) == 0x000030, "Member 'FResponseBanUser::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FResponseBanUser, GameRoomUserInfo) == 0x000060, "Member 'FResponseBanUser::GameRoomUserInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseBlockUser
// 0x0038 (0x0068 - 0x0030)
struct FResponseBlockUser final : public FBaseResponse
{
public:
	struct FTargetUserKey                         TargetUserKey;                                     // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bLocked;                                           // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResponseBlockUser) == 0x000008, "Wrong alignment on FResponseBlockUser");
static_assert(sizeof(FResponseBlockUser) == 0x000068, "Wrong size on FResponseBlockUser");
static_assert(offsetof(FResponseBlockUser, TargetUserKey) == 0x000030, "Member 'FResponseBlockUser::TargetUserKey' has a wrong offset!");
static_assert(offsetof(FResponseBlockUser, bLocked) == 0x000060, "Member 'FResponseBlockUser::bLocked' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseBlockVoiceChannelUser
// 0x0038 (0x0068 - 0x0030)
struct FResponseBlockVoiceChannelUser final : public FBaseResponse
{
public:
	struct FTargetUserKey                         TargetUserKey;                                     // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bLocked;                                           // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResponseBlockVoiceChannelUser) == 0x000008, "Wrong alignment on FResponseBlockVoiceChannelUser");
static_assert(sizeof(FResponseBlockVoiceChannelUser) == 0x000068, "Wrong size on FResponseBlockVoiceChannelUser");
static_assert(offsetof(FResponseBlockVoiceChannelUser, TargetUserKey) == 0x000030, "Member 'FResponseBlockVoiceChannelUser::TargetUserKey' has a wrong offset!");
static_assert(offsetof(FResponseBlockVoiceChannelUser, bLocked) == 0x000060, "Member 'FResponseBlockVoiceChannelUser::bLocked' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseCancelInvitation
// 0x0010 (0x0040 - 0x0030)
struct FResponseCancelInvitation final : public FBaseResponse
{
public:
	class FString                                 InvitationId;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseCancelInvitation) == 0x000008, "Wrong alignment on FResponseCancelInvitation");
static_assert(sizeof(FResponseCancelInvitation) == 0x000040, "Wrong size on FResponseCancelInvitation");
static_assert(offsetof(FResponseCancelInvitation, InvitationId) == 0x000030, "Member 'FResponseCancelInvitation::InvitationId' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseChangeReceivingVolume
// 0x0010 (0x0040 - 0x0030)
struct FResponseChangeReceivingVolume final : public FBaseResponse
{
public:
	class FString                                 Message;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseChangeReceivingVolume) == 0x000008, "Wrong alignment on FResponseChangeReceivingVolume");
static_assert(sizeof(FResponseChangeReceivingVolume) == 0x000040, "Wrong size on FResponseChangeReceivingVolume");
static_assert(offsetof(FResponseChangeReceivingVolume, Message) == 0x000030, "Member 'FResponseChangeReceivingVolume::Message' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseCreateAccessToken
// 0x0040 (0x0070 - 0x0030)
struct FResponseCreateAccessToken final : public FBaseResponse
{
public:
	class FString                                 Provider;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token;                                             // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExpirationTime;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseCreateAccessToken) == 0x000008, "Wrong alignment on FResponseCreateAccessToken");
static_assert(sizeof(FResponseCreateAccessToken) == 0x000070, "Wrong size on FResponseCreateAccessToken");
static_assert(offsetof(FResponseCreateAccessToken, Provider) == 0x000030, "Member 'FResponseCreateAccessToken::Provider' has a wrong offset!");
static_assert(offsetof(FResponseCreateAccessToken, Type) == 0x000040, "Member 'FResponseCreateAccessToken::Type' has a wrong offset!");
static_assert(offsetof(FResponseCreateAccessToken, Token) == 0x000050, "Member 'FResponseCreateAccessToken::Token' has a wrong offset!");
static_assert(offsetof(FResponseCreateAccessToken, ExpirationTime) == 0x000060, "Member 'FResponseCreateAccessToken::ExpirationTime' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseCreateGameReport
// 0x0010 (0x0040 - 0x0030)
struct FResponseCreateGameReport final : public FBaseResponse
{
public:
	class FString                                 Message;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseCreateGameReport) == 0x000008, "Wrong alignment on FResponseCreateGameReport");
static_assert(sizeof(FResponseCreateGameReport) == 0x000040, "Wrong size on FResponseCreateGameReport");
static_assert(offsetof(FResponseCreateGameReport, Message) == 0x000030, "Member 'FResponseCreateGameReport::Message' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseCreateOneOnOneRoomWithUser
// 0x00A8 (0x00D8 - 0x0030)
struct FResponseCreateOneOnOneRoomWithUser final : public FBaseResponse
{
public:
	struct FGameRoomInfo                          GameRoomInfo;                                      // 0x0030(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseCreateOneOnOneRoomWithUser) == 0x000008, "Wrong alignment on FResponseCreateOneOnOneRoomWithUser");
static_assert(sizeof(FResponseCreateOneOnOneRoomWithUser) == 0x0000D8, "Wrong size on FResponseCreateOneOnOneRoomWithUser");
static_assert(offsetof(FResponseCreateOneOnOneRoomWithUser, GameRoomInfo) == 0x000030, "Member 'FResponseCreateOneOnOneRoomWithUser::GameRoomInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseCreateRoom
// 0x00A8 (0x00D8 - 0x0030)
struct FResponseCreateRoom final : public FBaseResponse
{
public:
	struct FGameRoomInfo                          GameRoomInfo;                                      // 0x0030(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseCreateRoom) == 0x000008, "Wrong alignment on FResponseCreateRoom");
static_assert(sizeof(FResponseCreateRoom) == 0x0000D8, "Wrong size on FResponseCreateRoom");
static_assert(offsetof(FResponseCreateRoom, GameRoomInfo) == 0x000030, "Member 'FResponseCreateRoom::GameRoomInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseDeleteRoom
// 0x00A8 (0x00D8 - 0x0030)
struct FResponseDeleteRoom final : public FBaseResponse
{
public:
	struct FGameRoomInfo                          GameRoomInfo;                                      // 0x0030(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseDeleteRoom) == 0x000008, "Wrong alignment on FResponseDeleteRoom");
static_assert(sizeof(FResponseDeleteRoom) == 0x0000D8, "Wrong size on FResponseDeleteRoom");
static_assert(offsetof(FResponseDeleteRoom, GameRoomInfo) == 0x000030, "Member 'FResponseDeleteRoom::GameRoomInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseDeportUser
// 0x01A8 (0x01D8 - 0x0030)
struct FResponseDeportUser final : public FBaseResponse
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameRoomUserInfo                      GameRoomUserInfo;                                  // 0x0060(0x0178)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseDeportUser) == 0x000008, "Wrong alignment on FResponseDeportUser");
static_assert(sizeof(FResponseDeportUser) == 0x0001D8, "Wrong size on FResponseDeportUser");
static_assert(offsetof(FResponseDeportUser, GameRoomKeyInfo) == 0x000030, "Member 'FResponseDeportUser::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FResponseDeportUser, GameRoomUserInfo) == 0x000060, "Member 'FResponseDeportUser::GameRoomUserInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseDeportVoiceChannelUser
// 0x01B8 (0x01E8 - 0x0030)
struct FResponseDeportVoiceChannelUser final : public FBaseResponse
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ChannelId;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameRoomUserInfo                      GameRoomUserInfo;                                  // 0x0070(0x0178)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseDeportVoiceChannelUser) == 0x000008, "Wrong alignment on FResponseDeportVoiceChannelUser");
static_assert(sizeof(FResponseDeportVoiceChannelUser) == 0x0001E8, "Wrong size on FResponseDeportVoiceChannelUser");
static_assert(offsetof(FResponseDeportVoiceChannelUser, GameRoomKeyInfo) == 0x000030, "Member 'FResponseDeportVoiceChannelUser::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FResponseDeportVoiceChannelUser, ChannelId) == 0x000060, "Member 'FResponseDeportVoiceChannelUser::ChannelId' has a wrong offset!");
static_assert(offsetof(FResponseDeportVoiceChannelUser, GameRoomUserInfo) == 0x000070, "Member 'FResponseDeportVoiceChannelUser::GameRoomUserInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseFilterContent
// 0x0020 (0x0050 - 0x0030)
struct FResponseFilterContent final : public FBaseResponse
{
public:
	class FString                                 Content;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Result;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseFilterContent) == 0x000008, "Wrong alignment on FResponseFilterContent");
static_assert(sizeof(FResponseFilterContent) == 0x000050, "Wrong size on FResponseFilterContent");
static_assert(offsetof(FResponseFilterContent, Content) == 0x000030, "Member 'FResponseFilterContent::Content' has a wrong offset!");
static_assert(offsetof(FResponseFilterContent, Result) == 0x000040, "Member 'FResponseFilterContent::Result' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseGetBlockUserList
// 0x0010 (0x0040 - 0x0030)
struct FResponseGetBlockUserList final : public FBaseResponse
{
public:
	TArray<struct FTargetUserKey>                 BlockedUserList;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseGetBlockUserList) == 0x000008, "Wrong alignment on FResponseGetBlockUserList");
static_assert(sizeof(FResponseGetBlockUserList) == 0x000040, "Wrong size on FResponseGetBlockUserList");
static_assert(offsetof(FResponseGetBlockUserList, BlockedUserList) == 0x000030, "Member 'FResponseGetBlockUserList::BlockedUserList' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseGetFileUploadUrl
// 0x0010 (0x0040 - 0x0030)
struct FResponseGetFileUploadUrl final : public FBaseResponse
{
public:
	class FString                                 UploadUrl;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseGetFileUploadUrl) == 0x000008, "Wrong alignment on FResponseGetFileUploadUrl");
static_assert(sizeof(FResponseGetFileUploadUrl) == 0x000040, "Wrong size on FResponseGetFileUploadUrl");
static_assert(offsetof(FResponseGetFileUploadUrl, UploadUrl) == 0x000030, "Member 'FResponseGetFileUploadUrl::UploadUrl' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseGetInvitationList
// 0x0028 (0x0058 - 0x0030)
struct FResponseGetInvitationList final : public FBaseResponse
{
public:
	class FString                                 Cursor;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameRoomInvitationInfo>        InvitationInfoList;                                // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseGetInvitationList) == 0x000008, "Wrong alignment on FResponseGetInvitationList");
static_assert(sizeof(FResponseGetInvitationList) == 0x000058, "Wrong size on FResponseGetInvitationList");
static_assert(offsetof(FResponseGetInvitationList, Cursor) == 0x000030, "Member 'FResponseGetInvitationList::Cursor' has a wrong offset!");
static_assert(offsetof(FResponseGetInvitationList, Count) == 0x000040, "Member 'FResponseGetInvitationList::Count' has a wrong offset!");
static_assert(offsetof(FResponseGetInvitationList, InvitationInfoList) == 0x000048, "Member 'FResponseGetInvitationList::InvitationInfoList' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RoomInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FRoomInfo final
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0000(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 GameCode;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MemberCount;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMemberCount;                                    // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastMessageContent;                                // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateLastMessagePublished;                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastMessageGuid;                                   // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Deleted;                                           // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdminGameUserId;                                   // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRoomInfo) == 0x000008, "Wrong alignment on FRoomInfo");
static_assert(sizeof(FRoomInfo) == 0x0000A0, "Wrong size on FRoomInfo");
static_assert(offsetof(FRoomInfo, GameRoomKeyInfo) == 0x000000, "Member 'FRoomInfo::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FRoomInfo, GameCode) == 0x000030, "Member 'FRoomInfo::GameCode' has a wrong offset!");
static_assert(offsetof(FRoomInfo, Name) == 0x000040, "Member 'FRoomInfo::Name' has a wrong offset!");
static_assert(offsetof(FRoomInfo, MemberCount) == 0x000050, "Member 'FRoomInfo::MemberCount' has a wrong offset!");
static_assert(offsetof(FRoomInfo, MaxMemberCount) == 0x000054, "Member 'FRoomInfo::MaxMemberCount' has a wrong offset!");
static_assert(offsetof(FRoomInfo, LastMessageContent) == 0x000058, "Member 'FRoomInfo::LastMessageContent' has a wrong offset!");
static_assert(offsetof(FRoomInfo, DateLastMessagePublished) == 0x000068, "Member 'FRoomInfo::DateLastMessagePublished' has a wrong offset!");
static_assert(offsetof(FRoomInfo, LastMessageGuid) == 0x000078, "Member 'FRoomInfo::LastMessageGuid' has a wrong offset!");
static_assert(offsetof(FRoomInfo, Deleted) == 0x000088, "Member 'FRoomInfo::Deleted' has a wrong offset!");
static_assert(offsetof(FRoomInfo, AdminGameUserId) == 0x000090, "Member 'FRoomInfo::AdminGameUserId' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RoomUserInfo
// 0x0078 (0x0078 - 0x0000)
struct FRoomUserInfo final
{
public:
	class FString                                 CharacterId;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterName;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Role;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UserBanned;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UserVoiceJoined;                                   // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UserVoiceMuted;                                    // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UserMicOffed;                                      // 0x0033(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UserSpeakerOffed;                                  // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameUserId;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerId;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClassId;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Intro;                                             // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRoomUserInfo) == 0x000008, "Wrong alignment on FRoomUserInfo");
static_assert(sizeof(FRoomUserInfo) == 0x000078, "Wrong size on FRoomUserInfo");
static_assert(offsetof(FRoomUserInfo, CharacterId) == 0x000000, "Member 'FRoomUserInfo::CharacterId' has a wrong offset!");
static_assert(offsetof(FRoomUserInfo, CharacterName) == 0x000010, "Member 'FRoomUserInfo::CharacterName' has a wrong offset!");
static_assert(offsetof(FRoomUserInfo, Role) == 0x000020, "Member 'FRoomUserInfo::Role' has a wrong offset!");
static_assert(offsetof(FRoomUserInfo, UserBanned) == 0x000030, "Member 'FRoomUserInfo::UserBanned' has a wrong offset!");
static_assert(offsetof(FRoomUserInfo, UserVoiceJoined) == 0x000031, "Member 'FRoomUserInfo::UserVoiceJoined' has a wrong offset!");
static_assert(offsetof(FRoomUserInfo, UserVoiceMuted) == 0x000032, "Member 'FRoomUserInfo::UserVoiceMuted' has a wrong offset!");
static_assert(offsetof(FRoomUserInfo, UserMicOffed) == 0x000033, "Member 'FRoomUserInfo::UserMicOffed' has a wrong offset!");
static_assert(offsetof(FRoomUserInfo, UserSpeakerOffed) == 0x000034, "Member 'FRoomUserInfo::UserSpeakerOffed' has a wrong offset!");
static_assert(offsetof(FRoomUserInfo, GameUserId) == 0x000038, "Member 'FRoomUserInfo::GameUserId' has a wrong offset!");
static_assert(offsetof(FRoomUserInfo, ServerId) == 0x000048, "Member 'FRoomUserInfo::ServerId' has a wrong offset!");
static_assert(offsetof(FRoomUserInfo, ClassId) == 0x000058, "Member 'FRoomUserInfo::ClassId' has a wrong offset!");
static_assert(offsetof(FRoomUserInfo, Intro) == 0x000068, "Member 'FRoomUserInfo::Intro' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RoomWithRoomUserInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FRoomWithRoomUserInfo final
{
public:
	struct FRoomInfo                              RoomInfo;                                          // 0x0000(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FRoomUserInfo>                  RoomUserInfoList;                                  // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRoomWithRoomUserInfo) == 0x000008, "Wrong alignment on FRoomWithRoomUserInfo");
static_assert(sizeof(FRoomWithRoomUserInfo) == 0x0000B0, "Wrong size on FRoomWithRoomUserInfo");
static_assert(offsetof(FRoomWithRoomUserInfo, RoomInfo) == 0x000000, "Member 'FRoomWithRoomUserInfo::RoomInfo' has a wrong offset!");
static_assert(offsetof(FRoomWithRoomUserInfo, RoomUserInfoList) == 0x0000A0, "Member 'FRoomWithRoomUserInfo::RoomUserInfoList' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseGetJoinedRoomListWithRoomUsers
// 0x0010 (0x0040 - 0x0030)
struct FResponseGetJoinedRoomListWithRoomUsers final : public FBaseResponse
{
public:
	TArray<struct FRoomWithRoomUserInfo>          RoomWithRoomUserInfoList;                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseGetJoinedRoomListWithRoomUsers) == 0x000008, "Wrong alignment on FResponseGetJoinedRoomListWithRoomUsers");
static_assert(sizeof(FResponseGetJoinedRoomListWithRoomUsers) == 0x000040, "Wrong size on FResponseGetJoinedRoomListWithRoomUsers");
static_assert(offsetof(FResponseGetJoinedRoomListWithRoomUsers, RoomWithRoomUserInfoList) == 0x000030, "Member 'FResponseGetJoinedRoomListWithRoomUsers::RoomWithRoomUserInfoList' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseGetRoom
// 0x00A8 (0x00D8 - 0x0030)
struct FResponseGetRoom final : public FBaseResponse
{
public:
	struct FGameRoomInfo                          GameRoomInfo;                                      // 0x0030(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseGetRoom) == 0x000008, "Wrong alignment on FResponseGetRoom");
static_assert(sizeof(FResponseGetRoom) == 0x0000D8, "Wrong size on FResponseGetRoom");
static_assert(offsetof(FResponseGetRoom, GameRoomInfo) == 0x000030, "Member 'FResponseGetRoom::GameRoomInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseGetRoomInvitationToken
// 0x00C8 (0x00F8 - 0x0030)
struct FResponseGetRoomInvitationToken final : public FBaseResponse
{
public:
	class FString                                 InvitationToken;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InvitationUrl;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameRoomInfo                          GameRoomInfo;                                      // 0x0050(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseGetRoomInvitationToken) == 0x000008, "Wrong alignment on FResponseGetRoomInvitationToken");
static_assert(sizeof(FResponseGetRoomInvitationToken) == 0x0000F8, "Wrong size on FResponseGetRoomInvitationToken");
static_assert(offsetof(FResponseGetRoomInvitationToken, InvitationToken) == 0x000030, "Member 'FResponseGetRoomInvitationToken::InvitationToken' has a wrong offset!");
static_assert(offsetof(FResponseGetRoomInvitationToken, InvitationUrl) == 0x000040, "Member 'FResponseGetRoomInvitationToken::InvitationUrl' has a wrong offset!");
static_assert(offsetof(FResponseGetRoomInvitationToken, GameRoomInfo) == 0x000050, "Member 'FResponseGetRoomInvitationToken::GameRoomInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseGetRoomVoiceUsers
// 0x0058 (0x0088 - 0x0030)
struct FResponseGetRoomVoiceUsers final : public FBaseResponse
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FGameRoomUserInfo>              GameRoomUserInfoList;                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Cursor;                                            // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseGetRoomVoiceUsers) == 0x000008, "Wrong alignment on FResponseGetRoomVoiceUsers");
static_assert(sizeof(FResponseGetRoomVoiceUsers) == 0x000088, "Wrong size on FResponseGetRoomVoiceUsers");
static_assert(offsetof(FResponseGetRoomVoiceUsers, GameRoomKeyInfo) == 0x000030, "Member 'FResponseGetRoomVoiceUsers::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FResponseGetRoomVoiceUsers, GameRoomUserInfoList) == 0x000060, "Member 'FResponseGetRoomVoiceUsers::GameRoomUserInfoList' has a wrong offset!");
static_assert(offsetof(FResponseGetRoomVoiceUsers, Count) == 0x000070, "Member 'FResponseGetRoomVoiceUsers::Count' has a wrong offset!");
static_assert(offsetof(FResponseGetRoomVoiceUsers, Cursor) == 0x000078, "Member 'FResponseGetRoomVoiceUsers::Cursor' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseGetSubscriptionInfo
// 0x0000 (0x00D0 - 0x00D0)
struct FResponseGetSubscriptionInfo final : public FBaseResponseSubscriptionInfo
{
};
static_assert(alignof(FResponseGetSubscriptionInfo) == 0x000008, "Wrong alignment on FResponseGetSubscriptionInfo");
static_assert(sizeof(FResponseGetSubscriptionInfo) == 0x0000D0, "Wrong size on FResponseGetSubscriptionInfo");

// ScriptStruct PurpleCommunitySdk.ResponseGetUserProfile
// 0x0010 (0x0040 - 0x0030)
struct FResponseGetUserProfile final : public FBaseResponse
{
public:
	struct FUserProfile                           UserProfile;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseGetUserProfile) == 0x000008, "Wrong alignment on FResponseGetUserProfile");
static_assert(sizeof(FResponseGetUserProfile) == 0x000040, "Wrong size on FResponseGetUserProfile");
static_assert(offsetof(FResponseGetUserProfile, UserProfile) == 0x000030, "Member 'FResponseGetUserProfile::UserProfile' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseGetVoiceChannelUsers
// 0x0068 (0x0098 - 0x0030)
struct FResponseGetVoiceChannelUsers final : public FBaseResponse
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ChannelId;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameRoomUserInfo>              GameRoomUserInfoList;                              // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Cursor;                                            // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseGetVoiceChannelUsers) == 0x000008, "Wrong alignment on FResponseGetVoiceChannelUsers");
static_assert(sizeof(FResponseGetVoiceChannelUsers) == 0x000098, "Wrong size on FResponseGetVoiceChannelUsers");
static_assert(offsetof(FResponseGetVoiceChannelUsers, GameRoomKeyInfo) == 0x000030, "Member 'FResponseGetVoiceChannelUsers::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FResponseGetVoiceChannelUsers, ChannelId) == 0x000060, "Member 'FResponseGetVoiceChannelUsers::ChannelId' has a wrong offset!");
static_assert(offsetof(FResponseGetVoiceChannelUsers, GameRoomUserInfoList) == 0x000070, "Member 'FResponseGetVoiceChannelUsers::GameRoomUserInfoList' has a wrong offset!");
static_assert(offsetof(FResponseGetVoiceChannelUsers, Count) == 0x000080, "Member 'FResponseGetVoiceChannelUsers::Count' has a wrong offset!");
static_assert(offsetof(FResponseGetVoiceChannelUsers, Cursor) == 0x000088, "Member 'FResponseGetVoiceChannelUsers::Cursor' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.VoiceChannelInfo
// 0x0048 (0x0048 - 0x0000)
struct FVoiceChannelInfo final
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0000(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ChannelId;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MemberCount;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoiceChannelInfo) == 0x000008, "Wrong alignment on FVoiceChannelInfo");
static_assert(sizeof(FVoiceChannelInfo) == 0x000048, "Wrong size on FVoiceChannelInfo");
static_assert(offsetof(FVoiceChannelInfo, GameRoomKeyInfo) == 0x000000, "Member 'FVoiceChannelInfo::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FVoiceChannelInfo, ChannelId) == 0x000030, "Member 'FVoiceChannelInfo::ChannelId' has a wrong offset!");
static_assert(offsetof(FVoiceChannelInfo, MemberCount) == 0x000040, "Member 'FVoiceChannelInfo::MemberCount' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseGetVoiceJoinedChannelList
// 0x0010 (0x0040 - 0x0030)
struct FResponseGetVoiceJoinedChannelList final : public FBaseResponse
{
public:
	TArray<struct FVoiceChannelInfo>              VoiceChannelInfoList;                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseGetVoiceJoinedChannelList) == 0x000008, "Wrong alignment on FResponseGetVoiceJoinedChannelList");
static_assert(sizeof(FResponseGetVoiceJoinedChannelList) == 0x000040, "Wrong size on FResponseGetVoiceJoinedChannelList");
static_assert(offsetof(FResponseGetVoiceJoinedChannelList, VoiceChannelInfoList) == 0x000030, "Member 'FResponseGetVoiceJoinedChannelList::VoiceChannelInfoList' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseGetVoiceRoomList
// 0x0020 (0x0050 - 0x0030)
struct FResponseGetVoiceRoomList final : public FBaseResponse
{
public:
	TArray<struct FGameRoomInfo>                  GameRoomInfoList;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGameRoomUserVoiceInfo>         GameRoomUserVoiceInfoList;                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseGetVoiceRoomList) == 0x000008, "Wrong alignment on FResponseGetVoiceRoomList");
static_assert(sizeof(FResponseGetVoiceRoomList) == 0x000050, "Wrong size on FResponseGetVoiceRoomList");
static_assert(offsetof(FResponseGetVoiceRoomList, GameRoomInfoList) == 0x000030, "Member 'FResponseGetVoiceRoomList::GameRoomInfoList' has a wrong offset!");
static_assert(offsetof(FResponseGetVoiceRoomList, GameRoomUserVoiceInfoList) == 0x000040, "Member 'FResponseGetVoiceRoomList::GameRoomUserVoiceInfoList' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseGetWaitingInvitationList
// 0x0010 (0x0040 - 0x0030)
struct FResponseGetWaitingInvitationList final : public FBaseResponse
{
public:
	TArray<struct FGameRoomInvitationInfo>        WaitingInvitationInfoList;                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseGetWaitingInvitationList) == 0x000008, "Wrong alignment on FResponseGetWaitingInvitationList");
static_assert(sizeof(FResponseGetWaitingInvitationList) == 0x000040, "Wrong size on FResponseGetWaitingInvitationList");
static_assert(offsetof(FResponseGetWaitingInvitationList, WaitingInvitationInfoList) == 0x000030, "Member 'FResponseGetWaitingInvitationList::WaitingInvitationInfoList' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.Alternatives
// 0x0020 (0x0020 - 0x0000)
struct FAlternatives final
{
public:
	class FString                                 Confidence;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Transcript;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAlternatives) == 0x000008, "Wrong alignment on FAlternatives");
static_assert(sizeof(FAlternatives) == 0x000020, "Wrong size on FAlternatives");
static_assert(offsetof(FAlternatives, Confidence) == 0x000000, "Member 'FAlternatives::Confidence' has a wrong offset!");
static_assert(offsetof(FAlternatives, Transcript) == 0x000010, "Member 'FAlternatives::Transcript' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.Results
// 0x0010 (0x0010 - 0x0000)
struct FResults final
{
public:
	TArray<struct FAlternatives>                  Alternatives;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResults) == 0x000008, "Wrong alignment on FResults");
static_assert(sizeof(FResults) == 0x000010, "Wrong size on FResults");
static_assert(offsetof(FResults, Alternatives) == 0x000000, "Member 'FResults::Alternatives' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseGoogleSTTRecognize
// 0x0020 (0x0050 - 0x0030)
struct FResponseGoogleSTTRecognize final : public FBaseGoogleSTTResponse
{
public:
	TArray<struct FResults>                       Results;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 TotalBilledTime;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseGoogleSTTRecognize) == 0x000008, "Wrong alignment on FResponseGoogleSTTRecognize");
static_assert(sizeof(FResponseGoogleSTTRecognize) == 0x000050, "Wrong size on FResponseGoogleSTTRecognize");
static_assert(offsetof(FResponseGoogleSTTRecognize, Results) == 0x000030, "Member 'FResponseGoogleSTTRecognize::Results' has a wrong offset!");
static_assert(offsetof(FResponseGoogleSTTRecognize, TotalBilledTime) == 0x000040, "Member 'FResponseGoogleSTTRecognize::TotalBilledTime' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseGoogleSTTUpload
// 0x0010 (0x0040 - 0x0030)
struct FResponseGoogleSTTUpload final : public FBaseGoogleSTTResponse
{
public:
	class FString                                 TempText;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseGoogleSTTUpload) == 0x000008, "Wrong alignment on FResponseGoogleSTTUpload");
static_assert(sizeof(FResponseGoogleSTTUpload) == 0x000040, "Wrong size on FResponseGoogleSTTUpload");
static_assert(offsetof(FResponseGoogleSTTUpload, TempText) == 0x000030, "Member 'FResponseGoogleSTTUpload::TempText' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseInviteUser
// 0x00D0 (0x0100 - 0x0030)
struct FResponseInviteUser final : public FBaseResponse
{
public:
	struct FGameRoomInvitationInfo                InvitationInfo;                                    // 0x0030(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseInviteUser) == 0x000008, "Wrong alignment on FResponseInviteUser");
static_assert(sizeof(FResponseInviteUser) == 0x000100, "Wrong size on FResponseInviteUser");
static_assert(offsetof(FResponseInviteUser, InvitationInfo) == 0x000030, "Member 'FResponseInviteUser::InvitationInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseJoinedRoomList
// 0x0010 (0x0040 - 0x0030)
struct FResponseJoinedRoomList final : public FBaseResponse
{
public:
	TArray<struct FGameRoomInfo>                  GameRoomInfoList;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseJoinedRoomList) == 0x000008, "Wrong alignment on FResponseJoinedRoomList");
static_assert(sizeof(FResponseJoinedRoomList) == 0x000040, "Wrong size on FResponseJoinedRoomList");
static_assert(offsetof(FResponseJoinedRoomList, GameRoomInfoList) == 0x000030, "Member 'FResponseJoinedRoomList::GameRoomInfoList' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseJoinRoom
// 0x00A8 (0x00D8 - 0x0030)
struct FResponseJoinRoom final : public FBaseResponse
{
public:
	struct FGameRoomInfo                          GameRoomInfo;                                      // 0x0030(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseJoinRoom) == 0x000008, "Wrong alignment on FResponseJoinRoom");
static_assert(sizeof(FResponseJoinRoom) == 0x0000D8, "Wrong size on FResponseJoinRoom");
static_assert(offsetof(FResponseJoinRoom, GameRoomInfo) == 0x000030, "Member 'FResponseJoinRoom::GameRoomInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseLeaveRoom
// 0x00A8 (0x00D8 - 0x0030)
struct FResponseLeaveRoom final : public FBaseResponse
{
public:
	struct FGameRoomInfo                          GameRoomInfo;                                      // 0x0030(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseLeaveRoom) == 0x000008, "Wrong alignment on FResponseLeaveRoom");
static_assert(sizeof(FResponseLeaveRoom) == 0x0000D8, "Wrong size on FResponseLeaveRoom");
static_assert(offsetof(FResponseLeaveRoom, GameRoomInfo) == 0x000030, "Member 'FResponseLeaveRoom::GameRoomInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseLoginWithToken
// 0x0000 (0x00D0 - 0x00D0)
struct FResponseLoginWithToken final : public FBaseResponseSubscriptionInfo
{
};
static_assert(alignof(FResponseLoginWithToken) == 0x000008, "Wrong alignment on FResponseLoginWithToken");
static_assert(sizeof(FResponseLoginWithToken) == 0x0000D0, "Wrong size on FResponseLoginWithToken");

// ScriptStruct PurpleCommunitySdk.ResponseLogoutWithJwtToken
// 0x0000 (0x0030 - 0x0030)
struct FResponseLogoutWithJwtToken final : public FBaseResponse
{
};
static_assert(alignof(FResponseLogoutWithJwtToken) == 0x000008, "Wrong alignment on FResponseLogoutWithJwtToken");
static_assert(sizeof(FResponseLogoutWithJwtToken) == 0x000030, "Wrong size on FResponseLogoutWithJwtToken");

// ScriptStruct PurpleCommunitySdk.ResponseManualTranslate
// 0x0040 (0x0070 - 0x0030)
struct FResponseManualTranslate final : public FBaseResponse
{
public:
	class FString                                 SourceContent;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetContent;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourceLang;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetLang;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseManualTranslate) == 0x000008, "Wrong alignment on FResponseManualTranslate");
static_assert(sizeof(FResponseManualTranslate) == 0x000070, "Wrong size on FResponseManualTranslate");
static_assert(offsetof(FResponseManualTranslate, SourceContent) == 0x000030, "Member 'FResponseManualTranslate::SourceContent' has a wrong offset!");
static_assert(offsetof(FResponseManualTranslate, TargetContent) == 0x000040, "Member 'FResponseManualTranslate::TargetContent' has a wrong offset!");
static_assert(offsetof(FResponseManualTranslate, SourceLang) == 0x000050, "Member 'FResponseManualTranslate::SourceLang' has a wrong offset!");
static_assert(offsetof(FResponseManualTranslate, TargetLang) == 0x000060, "Member 'FResponseManualTranslate::TargetLang' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseMessagesBackward
// 0x0078 (0x00A8 - 0x0030)
struct FResponseMessagesBackward final : public FBaseResponse
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 DateBucketStart;                                   // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMessageInfo>                   MessageInfoList;                                   // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MessageCount;                                      // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BackwardCursor;                                    // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ForwardCursor;                                     // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseMessagesBackward) == 0x000008, "Wrong alignment on FResponseMessagesBackward");
static_assert(sizeof(FResponseMessagesBackward) == 0x0000A8, "Wrong size on FResponseMessagesBackward");
static_assert(offsetof(FResponseMessagesBackward, GameRoomKeyInfo) == 0x000030, "Member 'FResponseMessagesBackward::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FResponseMessagesBackward, DateBucketStart) == 0x000060, "Member 'FResponseMessagesBackward::DateBucketStart' has a wrong offset!");
static_assert(offsetof(FResponseMessagesBackward, MessageInfoList) == 0x000070, "Member 'FResponseMessagesBackward::MessageInfoList' has a wrong offset!");
static_assert(offsetof(FResponseMessagesBackward, MessageCount) == 0x000080, "Member 'FResponseMessagesBackward::MessageCount' has a wrong offset!");
static_assert(offsetof(FResponseMessagesBackward, BackwardCursor) == 0x000088, "Member 'FResponseMessagesBackward::BackwardCursor' has a wrong offset!");
static_assert(offsetof(FResponseMessagesBackward, ForwardCursor) == 0x000098, "Member 'FResponseMessagesBackward::ForwardCursor' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseMessagesForward
// 0x0078 (0x00A8 - 0x0030)
struct FResponseMessagesForward final : public FBaseResponse
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 DateBucketStart;                                   // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMessageInfo>                   MessageInfoList;                                   // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MessageCount;                                      // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BackwardCursor;                                    // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ForwardCursor;                                     // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseMessagesForward) == 0x000008, "Wrong alignment on FResponseMessagesForward");
static_assert(sizeof(FResponseMessagesForward) == 0x0000A8, "Wrong size on FResponseMessagesForward");
static_assert(offsetof(FResponseMessagesForward, GameRoomKeyInfo) == 0x000030, "Member 'FResponseMessagesForward::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FResponseMessagesForward, DateBucketStart) == 0x000060, "Member 'FResponseMessagesForward::DateBucketStart' has a wrong offset!");
static_assert(offsetof(FResponseMessagesForward, MessageInfoList) == 0x000070, "Member 'FResponseMessagesForward::MessageInfoList' has a wrong offset!");
static_assert(offsetof(FResponseMessagesForward, MessageCount) == 0x000080, "Member 'FResponseMessagesForward::MessageCount' has a wrong offset!");
static_assert(offsetof(FResponseMessagesForward, BackwardCursor) == 0x000088, "Member 'FResponseMessagesForward::BackwardCursor' has a wrong offset!");
static_assert(offsetof(FResponseMessagesForward, ForwardCursor) == 0x000098, "Member 'FResponseMessagesForward::ForwardCursor' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseMuteVoiceUser
// 0x01A8 (0x01D8 - 0x0030)
struct FResponseMuteVoiceUser final : public FBaseResponse
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameRoomUserInfo                      GameRoomUserInfo;                                  // 0x0060(0x0178)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseMuteVoiceUser) == 0x000008, "Wrong alignment on FResponseMuteVoiceUser");
static_assert(sizeof(FResponseMuteVoiceUser) == 0x0001D8, "Wrong size on FResponseMuteVoiceUser");
static_assert(offsetof(FResponseMuteVoiceUser, GameRoomKeyInfo) == 0x000030, "Member 'FResponseMuteVoiceUser::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FResponseMuteVoiceUser, GameRoomUserInfo) == 0x000060, "Member 'FResponseMuteVoiceUser::GameRoomUserInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseRoomUsers
// 0x0058 (0x0088 - 0x0030)
struct FResponseRoomUsers final : public FBaseResponse
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FGameRoomUserInfo>              GameRoomUserInfoList;                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Cursor;                                            // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseRoomUsers) == 0x000008, "Wrong alignment on FResponseRoomUsers");
static_assert(sizeof(FResponseRoomUsers) == 0x000088, "Wrong size on FResponseRoomUsers");
static_assert(offsetof(FResponseRoomUsers, GameRoomKeyInfo) == 0x000030, "Member 'FResponseRoomUsers::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FResponseRoomUsers, GameRoomUserInfoList) == 0x000060, "Member 'FResponseRoomUsers::GameRoomUserInfoList' has a wrong offset!");
static_assert(offsetof(FResponseRoomUsers, Count) == 0x000070, "Member 'FResponseRoomUsers::Count' has a wrong offset!");
static_assert(offsetof(FResponseRoomUsers, Cursor) == 0x000078, "Member 'FResponseRoomUsers::Cursor' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseSearchRoom
// 0x0018 (0x0048 - 0x0030)
struct FResponseSearchRoom final : public FBaseResponse
{
public:
	int32                                         Count;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameRoomInfo>                  GameRoomInfoList;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseSearchRoom) == 0x000008, "Wrong alignment on FResponseSearchRoom");
static_assert(sizeof(FResponseSearchRoom) == 0x000048, "Wrong size on FResponseSearchRoom");
static_assert(offsetof(FResponseSearchRoom, Count) == 0x000030, "Member 'FResponseSearchRoom::Count' has a wrong offset!");
static_assert(offsetof(FResponseSearchRoom, GameRoomInfoList) == 0x000038, "Member 'FResponseSearchRoom::GameRoomInfoList' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.RestrictInfo
// 0x0048 (0x0048 - 0x0000)
struct FRestrictInfo final
{
public:
	int32                                         RestrictStep;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartTime;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExpirationTime;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BlockedType;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRestrictInfo) == 0x000008, "Wrong alignment on FRestrictInfo");
static_assert(sizeof(FRestrictInfo) == 0x000048, "Wrong size on FRestrictInfo");
static_assert(offsetof(FRestrictInfo, RestrictStep) == 0x000000, "Member 'FRestrictInfo::RestrictStep' has a wrong offset!");
static_assert(offsetof(FRestrictInfo, StartTime) == 0x000008, "Member 'FRestrictInfo::StartTime' has a wrong offset!");
static_assert(offsetof(FRestrictInfo, ExpirationTime) == 0x000018, "Member 'FRestrictInfo::ExpirationTime' has a wrong offset!");
static_assert(offsetof(FRestrictInfo, BlockedType) == 0x000028, "Member 'FRestrictInfo::BlockedType' has a wrong offset!");
static_assert(offsetof(FRestrictInfo, Reason) == 0x000038, "Member 'FRestrictInfo::Reason' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseSendMessage
// 0x0058 (0x0088 - 0x0030)
struct FResponseSendMessage final : public FBaseResponse
{
public:
	class FString                                 Guid;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRestrictInfo                          RestrictInfo;                                      // 0x0040(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseSendMessage) == 0x000008, "Wrong alignment on FResponseSendMessage");
static_assert(sizeof(FResponseSendMessage) == 0x000088, "Wrong size on FResponseSendMessage");
static_assert(offsetof(FResponseSendMessage, Guid) == 0x000030, "Member 'FResponseSendMessage::Guid' has a wrong offset!");
static_assert(offsetof(FResponseSendMessage, RestrictInfo) == 0x000040, "Member 'FResponseSendMessage::RestrictInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseSendWhisper
// 0x0058 (0x0088 - 0x0030)
struct FResponseSendWhisper final : public FBaseResponse
{
public:
	class FString                                 Guid;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRestrictInfo                          RestrictInfo;                                      // 0x0040(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseSendWhisper) == 0x000008, "Wrong alignment on FResponseSendWhisper");
static_assert(sizeof(FResponseSendWhisper) == 0x000088, "Wrong size on FResponseSendWhisper");
static_assert(offsetof(FResponseSendWhisper, Guid) == 0x000030, "Member 'FResponseSendWhisper::Guid' has a wrong offset!");
static_assert(offsetof(FResponseSendWhisper, RestrictInfo) == 0x000040, "Member 'FResponseSendWhisper::RestrictInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseStartVoiceChat
// 0x0128 (0x0158 - 0x0030)
struct FResponseStartVoiceChat final : public FBaseResponse
{
public:
	class FString                                 Tid;                                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Action;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuthKey;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerInfo                            Player;                                            // 0x0060(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMediaSignalServer                     MediaSignalServer;                                 // 0x0120(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         KeepAliveInterval;                                 // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UserMicOffedForced;                                // 0x0154(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResponseStartVoiceChat) == 0x000008, "Wrong alignment on FResponseStartVoiceChat");
static_assert(sizeof(FResponseStartVoiceChat) == 0x000158, "Wrong size on FResponseStartVoiceChat");
static_assert(offsetof(FResponseStartVoiceChat, Tid) == 0x000030, "Member 'FResponseStartVoiceChat::Tid' has a wrong offset!");
static_assert(offsetof(FResponseStartVoiceChat, Action) == 0x000040, "Member 'FResponseStartVoiceChat::Action' has a wrong offset!");
static_assert(offsetof(FResponseStartVoiceChat, AuthKey) == 0x000050, "Member 'FResponseStartVoiceChat::AuthKey' has a wrong offset!");
static_assert(offsetof(FResponseStartVoiceChat, Player) == 0x000060, "Member 'FResponseStartVoiceChat::Player' has a wrong offset!");
static_assert(offsetof(FResponseStartVoiceChat, MediaSignalServer) == 0x000120, "Member 'FResponseStartVoiceChat::MediaSignalServer' has a wrong offset!");
static_assert(offsetof(FResponseStartVoiceChat, KeepAliveInterval) == 0x000150, "Member 'FResponseStartVoiceChat::KeepAliveInterval' has a wrong offset!");
static_assert(offsetof(FResponseStartVoiceChat, UserMicOffedForced) == 0x000154, "Member 'FResponseStartVoiceChat::UserMicOffedForced' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseStopVoiceChat
// 0x0020 (0x0050 - 0x0030)
struct FResponseStopVoiceChat final : public FBaseResponse
{
public:
	class FString                                 Tid;                                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Action;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseStopVoiceChat) == 0x000008, "Wrong alignment on FResponseStopVoiceChat");
static_assert(sizeof(FResponseStopVoiceChat) == 0x000050, "Wrong size on FResponseStopVoiceChat");
static_assert(offsetof(FResponseStopVoiceChat, Tid) == 0x000030, "Member 'FResponseStopVoiceChat::Tid' has a wrong offset!");
static_assert(offsetof(FResponseStopVoiceChat, Action) == 0x000040, "Member 'FResponseStopVoiceChat::Action' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseTransferOwner
// 0x0320 (0x0350 - 0x0030)
struct FResponseTransferOwner final : public FBaseResponse
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameRoomUserInfo                      PredecessorUserInfo;                               // 0x0060(0x0178)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameRoomUserInfo                      SuccessorUserInfo;                                 // 0x01D8(0x0178)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseTransferOwner) == 0x000008, "Wrong alignment on FResponseTransferOwner");
static_assert(sizeof(FResponseTransferOwner) == 0x000350, "Wrong size on FResponseTransferOwner");
static_assert(offsetof(FResponseTransferOwner, GameRoomKeyInfo) == 0x000030, "Member 'FResponseTransferOwner::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FResponseTransferOwner, PredecessorUserInfo) == 0x000060, "Member 'FResponseTransferOwner::PredecessorUserInfo' has a wrong offset!");
static_assert(offsetof(FResponseTransferOwner, SuccessorUserInfo) == 0x0001D8, "Member 'FResponseTransferOwner::SuccessorUserInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseTranslate
// 0x0070 (0x0090 - 0x0020)
struct FResponseTranslate final : public FBaseTranslateApiResponse
{
public:
	class FString                                 Source_lang;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Source_text;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Target_lang;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Target_text;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Game_code;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sent_from;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Mt_region;                                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseTranslate) == 0x000008, "Wrong alignment on FResponseTranslate");
static_assert(sizeof(FResponseTranslate) == 0x000090, "Wrong size on FResponseTranslate");
static_assert(offsetof(FResponseTranslate, Source_lang) == 0x000020, "Member 'FResponseTranslate::Source_lang' has a wrong offset!");
static_assert(offsetof(FResponseTranslate, Source_text) == 0x000030, "Member 'FResponseTranslate::Source_text' has a wrong offset!");
static_assert(offsetof(FResponseTranslate, Target_lang) == 0x000040, "Member 'FResponseTranslate::Target_lang' has a wrong offset!");
static_assert(offsetof(FResponseTranslate, Target_text) == 0x000050, "Member 'FResponseTranslate::Target_text' has a wrong offset!");
static_assert(offsetof(FResponseTranslate, Game_code) == 0x000060, "Member 'FResponseTranslate::Game_code' has a wrong offset!");
static_assert(offsetof(FResponseTranslate, Sent_from) == 0x000070, "Member 'FResponseTranslate::Sent_from' has a wrong offset!");
static_assert(offsetof(FResponseTranslate, Mt_region) == 0x000080, "Member 'FResponseTranslate::Mt_region' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseUnbanUser
// 0x01A8 (0x01D8 - 0x0030)
struct FResponseUnbanUser final : public FBaseResponse
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameRoomUserInfo                      GameRoomUserInfo;                                  // 0x0060(0x0178)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseUnbanUser) == 0x000008, "Wrong alignment on FResponseUnbanUser");
static_assert(sizeof(FResponseUnbanUser) == 0x0001D8, "Wrong size on FResponseUnbanUser");
static_assert(offsetof(FResponseUnbanUser, GameRoomKeyInfo) == 0x000030, "Member 'FResponseUnbanUser::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FResponseUnbanUser, GameRoomUserInfo) == 0x000060, "Member 'FResponseUnbanUser::GameRoomUserInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseUnblockUser
// 0x0038 (0x0068 - 0x0030)
struct FResponseUnblockUser final : public FBaseResponse
{
public:
	struct FTargetUserKey                         TargetUserKey;                                     // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bLocked;                                           // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResponseUnblockUser) == 0x000008, "Wrong alignment on FResponseUnblockUser");
static_assert(sizeof(FResponseUnblockUser) == 0x000068, "Wrong size on FResponseUnblockUser");
static_assert(offsetof(FResponseUnblockUser, TargetUserKey) == 0x000030, "Member 'FResponseUnblockUser::TargetUserKey' has a wrong offset!");
static_assert(offsetof(FResponseUnblockUser, bLocked) == 0x000060, "Member 'FResponseUnblockUser::bLocked' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseUnmuteVoiceUser
// 0x01A8 (0x01D8 - 0x0030)
struct FResponseUnmuteVoiceUser final : public FBaseResponse
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameRoomUserInfo                      GameRoomUserInfo;                                  // 0x0060(0x0178)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseUnmuteVoiceUser) == 0x000008, "Wrong alignment on FResponseUnmuteVoiceUser");
static_assert(sizeof(FResponseUnmuteVoiceUser) == 0x0001D8, "Wrong size on FResponseUnmuteVoiceUser");
static_assert(offsetof(FResponseUnmuteVoiceUser, GameRoomKeyInfo) == 0x000030, "Member 'FResponseUnmuteVoiceUser::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FResponseUnmuteVoiceUser, GameRoomUserInfo) == 0x000060, "Member 'FResponseUnmuteVoiceUser::GameRoomUserInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseUpdateRoom
// 0x00A8 (0x00D8 - 0x0030)
struct FResponseUpdateRoom final : public FBaseResponse
{
public:
	struct FGameRoomInfo                          GameRoomInfo;                                      // 0x0030(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseUpdateRoom) == 0x000008, "Wrong alignment on FResponseUpdateRoom");
static_assert(sizeof(FResponseUpdateRoom) == 0x0000D8, "Wrong size on FResponseUpdateRoom");
static_assert(offsetof(FResponseUpdateRoom, GameRoomInfo) == 0x000030, "Member 'FResponseUpdateRoom::GameRoomInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseUpdateUserProfile
// 0x0010 (0x0040 - 0x0030)
struct FResponseUpdateUserProfile final : public FBaseResponse
{
public:
	struct FUserProfile                           UserProfile;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseUpdateUserProfile) == 0x000008, "Wrong alignment on FResponseUpdateUserProfile");
static_assert(sizeof(FResponseUpdateUserProfile) == 0x000040, "Wrong size on FResponseUpdateUserProfile");
static_assert(offsetof(FResponseUpdateUserProfile, UserProfile) == 0x000030, "Member 'FResponseUpdateUserProfile::UserProfile' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseUpdateUserRole
// 0x01A8 (0x01D8 - 0x0030)
struct FResponseUpdateUserRole final : public FBaseResponse
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameRoomUserInfo                      GameRoomUserInfo;                                  // 0x0060(0x0178)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseUpdateUserRole) == 0x000008, "Wrong alignment on FResponseUpdateUserRole");
static_assert(sizeof(FResponseUpdateUserRole) == 0x0001D8, "Wrong size on FResponseUpdateUserRole");
static_assert(offsetof(FResponseUpdateUserRole, GameRoomKeyInfo) == 0x000030, "Member 'FResponseUpdateUserRole::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FResponseUpdateUserRole, GameRoomUserInfo) == 0x000060, "Member 'FResponseUpdateUserRole::GameRoomUserInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseUpdateVoiceChatStatus
// 0x01A8 (0x01D8 - 0x0030)
struct FResponseUpdateVoiceChatStatus final : public FBaseResponse
{
public:
	struct FGameRoomKeyInfo                       GameRoomKeyInfo;                                   // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameRoomUserInfo                      GameRoomUserInfo;                                  // 0x0060(0x0178)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseUpdateVoiceChatStatus) == 0x000008, "Wrong alignment on FResponseUpdateVoiceChatStatus");
static_assert(sizeof(FResponseUpdateVoiceChatStatus) == 0x0001D8, "Wrong size on FResponseUpdateVoiceChatStatus");
static_assert(offsetof(FResponseUpdateVoiceChatStatus, GameRoomKeyInfo) == 0x000030, "Member 'FResponseUpdateVoiceChatStatus::GameRoomKeyInfo' has a wrong offset!");
static_assert(offsetof(FResponseUpdateVoiceChatStatus, GameRoomUserInfo) == 0x000060, "Member 'FResponseUpdateVoiceChatStatus::GameRoomUserInfo' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.UploadFileMetaData
// 0x0038 (0x0038 - 0x0000)
struct FUploadFileMetaData final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rotate_orientation;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FileSize;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayTime;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Format;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Codec;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUploadFileMetaData) == 0x000008, "Wrong alignment on FUploadFileMetaData");
static_assert(sizeof(FUploadFileMetaData) == 0x000038, "Wrong size on FUploadFileMetaData");
static_assert(offsetof(FUploadFileMetaData, Width) == 0x000000, "Member 'FUploadFileMetaData::Width' has a wrong offset!");
static_assert(offsetof(FUploadFileMetaData, Height) == 0x000004, "Member 'FUploadFileMetaData::Height' has a wrong offset!");
static_assert(offsetof(FUploadFileMetaData, Rotate_orientation) == 0x000008, "Member 'FUploadFileMetaData::Rotate_orientation' has a wrong offset!");
static_assert(offsetof(FUploadFileMetaData, FileSize) == 0x00000C, "Member 'FUploadFileMetaData::FileSize' has a wrong offset!");
static_assert(offsetof(FUploadFileMetaData, PlayTime) == 0x000010, "Member 'FUploadFileMetaData::PlayTime' has a wrong offset!");
static_assert(offsetof(FUploadFileMetaData, Format) == 0x000018, "Member 'FUploadFileMetaData::Format' has a wrong offset!");
static_assert(offsetof(FUploadFileMetaData, Codec) == 0x000028, "Member 'FUploadFileMetaData::Codec' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.UploadResult
// 0x0098 (0x0098 - 0x0000)
struct FUploadResult final
{
public:
	class FString                                 Download_url;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 View_url;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Thumbnail_url;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Extension;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUploadFileMetaData                    MetaData;                                          // 0x0040(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Expire_at;                                         // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Auth_key;                                          // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUploadResult) == 0x000008, "Wrong alignment on FUploadResult");
static_assert(sizeof(FUploadResult) == 0x000098, "Wrong size on FUploadResult");
static_assert(offsetof(FUploadResult, Download_url) == 0x000000, "Member 'FUploadResult::Download_url' has a wrong offset!");
static_assert(offsetof(FUploadResult, View_url) == 0x000010, "Member 'FUploadResult::View_url' has a wrong offset!");
static_assert(offsetof(FUploadResult, Thumbnail_url) == 0x000020, "Member 'FUploadResult::Thumbnail_url' has a wrong offset!");
static_assert(offsetof(FUploadResult, Extension) == 0x000030, "Member 'FUploadResult::Extension' has a wrong offset!");
static_assert(offsetof(FUploadResult, MetaData) == 0x000040, "Member 'FUploadResult::MetaData' has a wrong offset!");
static_assert(offsetof(FUploadResult, Expire_at) == 0x000078, "Member 'FUploadResult::Expire_at' has a wrong offset!");
static_assert(offsetof(FUploadResult, Auth_key) == 0x000088, "Member 'FUploadResult::Auth_key' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.ResponseUploadFile
// 0x0058 (0x0058 - 0x0000)
struct FResponseUploadFile final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Error;                                             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Auth_type;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUploadResult>                  Upload_result_list;                                // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponseUploadFile) == 0x000008, "Wrong alignment on FResponseUploadFile");
static_assert(sizeof(FResponseUploadFile) == 0x000058, "Wrong size on FResponseUploadFile");
static_assert(offsetof(FResponseUploadFile, Status) == 0x000000, "Member 'FResponseUploadFile::Status' has a wrong offset!");
static_assert(offsetof(FResponseUploadFile, Error) == 0x000008, "Member 'FResponseUploadFile::Error' has a wrong offset!");
static_assert(offsetof(FResponseUploadFile, Message) == 0x000018, "Member 'FResponseUploadFile::Message' has a wrong offset!");
static_assert(offsetof(FResponseUploadFile, Auth_type) == 0x000038, "Member 'FResponseUploadFile::Auth_type' has a wrong offset!");
static_assert(offsetof(FResponseUploadFile, Upload_result_list) == 0x000048, "Member 'FResponseUploadFile::Upload_result_list' has a wrong offset!");

// ScriptStruct PurpleCommunitySdk.TextToSpeechVoiceInfo
// 0x0030 (0x0030 - 0x0000)
struct FTextToSpeechVoiceInfo final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTextToSpeechVoiceInfo) == 0x000008, "Wrong alignment on FTextToSpeechVoiceInfo");
static_assert(sizeof(FTextToSpeechVoiceInfo) == 0x000030, "Wrong size on FTextToSpeechVoiceInfo");
static_assert(offsetof(FTextToSpeechVoiceInfo, Key) == 0x000000, "Member 'FTextToSpeechVoiceInfo::Key' has a wrong offset!");
static_assert(offsetof(FTextToSpeechVoiceInfo, DisplayName) == 0x000010, "Member 'FTextToSpeechVoiceInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FTextToSpeechVoiceInfo, Language) == 0x000020, "Member 'FTextToSpeechVoiceInfo::Language' has a wrong offset!");

}

