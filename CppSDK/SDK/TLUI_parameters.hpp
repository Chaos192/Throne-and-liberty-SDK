#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TLUI

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "TLUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function TLUI.TLListView.AddItemAt
// 0x0010 (0x0010 - 0x0000)
struct TLListView_AddItemAt final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLListView_AddItemAt) == 0x000008, "Wrong alignment on TLListView_AddItemAt");
static_assert(sizeof(TLListView_AddItemAt) == 0x000010, "Wrong size on TLListView_AddItemAt");
static_assert(offsetof(TLListView_AddItemAt, Item) == 0x000000, "Member 'TLListView_AddItemAt::Item' has a wrong offset!");
static_assert(offsetof(TLListView_AddItemAt, Index_0) == 0x000008, "Member 'TLListView_AddItemAt::Index_0' has a wrong offset!");

// Function TLUI.TLRadioGroup.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct TLRadioGroup_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLRadioGroup_GetSelectedIndex) == 0x000004, "Wrong alignment on TLRadioGroup_GetSelectedIndex");
static_assert(sizeof(TLRadioGroup_GetSelectedIndex) == 0x000004, "Wrong size on TLRadioGroup_GetSelectedIndex");
static_assert(offsetof(TLRadioGroup_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'TLRadioGroup_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function TLUI.TLRadioGroup.SetCheckIndex
// 0x0004 (0x0004 - 0x0000)
struct TLRadioGroup_SetCheckIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLRadioGroup_SetCheckIndex) == 0x000004, "Wrong alignment on TLRadioGroup_SetCheckIndex");
static_assert(sizeof(TLRadioGroup_SetCheckIndex) == 0x000004, "Wrong size on TLRadioGroup_SetCheckIndex");
static_assert(offsetof(TLRadioGroup_SetCheckIndex, Index_0) == 0x000000, "Member 'TLRadioGroup_SetCheckIndex::Index_0' has a wrong offset!");

// Function TLUI.TLLinearBox.SetOrientation
// 0x0001 (0x0001 - 0x0000)
struct TLLinearBox_SetOrientation final
{
public:
	EOrientation                                  InOrientation;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLLinearBox_SetOrientation) == 0x000001, "Wrong alignment on TLLinearBox_SetOrientation");
static_assert(sizeof(TLLinearBox_SetOrientation) == 0x000001, "Wrong size on TLLinearBox_SetOrientation");
static_assert(offsetof(TLLinearBox_SetOrientation, InOrientation) == 0x000000, "Member 'TLLinearBox_SetOrientation::InOrientation' has a wrong offset!");

// Function TLUI.TLLinearBox.SetReverseOrder
// 0x0001 (0x0001 - 0x0000)
struct TLLinearBox_SetReverseOrder final
{
public:
	bool                                          bInReverseOrder;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLLinearBox_SetReverseOrder) == 0x000001, "Wrong alignment on TLLinearBox_SetReverseOrder");
static_assert(sizeof(TLLinearBox_SetReverseOrder) == 0x000001, "Wrong size on TLLinearBox_SetReverseOrder");
static_assert(offsetof(TLLinearBox_SetReverseOrder, bInReverseOrder) == 0x000000, "Member 'TLLinearBox_SetReverseOrder::bInReverseOrder' has a wrong offset!");

// Function TLUI.TLLinearBox.GetOrientation
// 0x0001 (0x0001 - 0x0000)
struct TLLinearBox_GetOrientation final
{
public:
	EOrientation                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLLinearBox_GetOrientation) == 0x000001, "Wrong alignment on TLLinearBox_GetOrientation");
static_assert(sizeof(TLLinearBox_GetOrientation) == 0x000001, "Wrong size on TLLinearBox_GetOrientation");
static_assert(offsetof(TLLinearBox_GetOrientation, ReturnValue) == 0x000000, "Member 'TLLinearBox_GetOrientation::ReturnValue' has a wrong offset!");

// Function TLUI.TLLinearBox.GetReverseOrder
// 0x0001 (0x0001 - 0x0000)
struct TLLinearBox_GetReverseOrder final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLLinearBox_GetReverseOrder) == 0x000001, "Wrong alignment on TLLinearBox_GetReverseOrder");
static_assert(sizeof(TLLinearBox_GetReverseOrder) == 0x000001, "Wrong size on TLLinearBox_GetReverseOrder");
static_assert(offsetof(TLLinearBox_GetReverseOrder, ReturnValue) == 0x000000, "Member 'TLLinearBox_GetReverseOrder::ReturnValue' has a wrong offset!");

// Function TLUI.ComboBoxStringTL.AddOption
// 0x0010 (0x0010 - 0x0000)
struct ComboBoxStringTL_AddOption final
{
public:
	class FString                                 Option;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxStringTL_AddOption) == 0x000008, "Wrong alignment on ComboBoxStringTL_AddOption");
static_assert(sizeof(ComboBoxStringTL_AddOption) == 0x000010, "Wrong size on ComboBoxStringTL_AddOption");
static_assert(offsetof(ComboBoxStringTL_AddOption, Option) == 0x000000, "Member 'ComboBoxStringTL_AddOption::Option' has a wrong offset!");

// DelegateFunction TLUI.ComboBoxStringTL.OnSelectionChangedEvent__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct ComboBoxStringTL_OnSelectionChangedEvent__DelegateSignature final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ComboBoxStringTL_OnSelectionChangedEvent__DelegateSignature) == 0x000008, "Wrong alignment on ComboBoxStringTL_OnSelectionChangedEvent__DelegateSignature");
static_assert(sizeof(ComboBoxStringTL_OnSelectionChangedEvent__DelegateSignature) == 0x000018, "Wrong size on ComboBoxStringTL_OnSelectionChangedEvent__DelegateSignature");
static_assert(offsetof(ComboBoxStringTL_OnSelectionChangedEvent__DelegateSignature, SelectedItem) == 0x000000, "Member 'ComboBoxStringTL_OnSelectionChangedEvent__DelegateSignature::SelectedItem' has a wrong offset!");
static_assert(offsetof(ComboBoxStringTL_OnSelectionChangedEvent__DelegateSignature, SelectionType) == 0x000010, "Member 'ComboBoxStringTL_OnSelectionChangedEvent__DelegateSignature::SelectionType' has a wrong offset!");

// Function TLUI.ComboBoxStringTL.RemoveOption
// 0x0018 (0x0018 - 0x0000)
struct ComboBoxStringTL_RemoveOption final
{
public:
	class FString                                 Option;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ComboBoxStringTL_RemoveOption) == 0x000008, "Wrong alignment on ComboBoxStringTL_RemoveOption");
static_assert(sizeof(ComboBoxStringTL_RemoveOption) == 0x000018, "Wrong size on ComboBoxStringTL_RemoveOption");
static_assert(offsetof(ComboBoxStringTL_RemoveOption, Option) == 0x000000, "Member 'ComboBoxStringTL_RemoveOption::Option' has a wrong offset!");
static_assert(offsetof(ComboBoxStringTL_RemoveOption, ReturnValue) == 0x000010, "Member 'ComboBoxStringTL_RemoveOption::ReturnValue' has a wrong offset!");

// Function TLUI.ComboBoxStringTL.SetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct ComboBoxStringTL_SetSelectedIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxStringTL_SetSelectedIndex) == 0x000004, "Wrong alignment on ComboBoxStringTL_SetSelectedIndex");
static_assert(sizeof(ComboBoxStringTL_SetSelectedIndex) == 0x000004, "Wrong size on ComboBoxStringTL_SetSelectedIndex");
static_assert(offsetof(ComboBoxStringTL_SetSelectedIndex, Index_0) == 0x000000, "Member 'ComboBoxStringTL_SetSelectedIndex::Index_0' has a wrong offset!");

// Function TLUI.ComboBoxStringTL.SetSelectedOption
// 0x0010 (0x0010 - 0x0000)
struct ComboBoxStringTL_SetSelectedOption final
{
public:
	class FString                                 Option;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxStringTL_SetSelectedOption) == 0x000008, "Wrong alignment on ComboBoxStringTL_SetSelectedOption");
static_assert(sizeof(ComboBoxStringTL_SetSelectedOption) == 0x000010, "Wrong size on ComboBoxStringTL_SetSelectedOption");
static_assert(offsetof(ComboBoxStringTL_SetSelectedOption, Option) == 0x000000, "Member 'ComboBoxStringTL_SetSelectedOption::Option' has a wrong offset!");

// Function TLUI.ComboBoxStringTL.FindOptionIndex
// 0x0018 (0x0018 - 0x0000)
struct ComboBoxStringTL_FindOptionIndex final
{
public:
	class FString                                 Option;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ComboBoxStringTL_FindOptionIndex) == 0x000008, "Wrong alignment on ComboBoxStringTL_FindOptionIndex");
static_assert(sizeof(ComboBoxStringTL_FindOptionIndex) == 0x000018, "Wrong size on ComboBoxStringTL_FindOptionIndex");
static_assert(offsetof(ComboBoxStringTL_FindOptionIndex, Option) == 0x000000, "Member 'ComboBoxStringTL_FindOptionIndex::Option' has a wrong offset!");
static_assert(offsetof(ComboBoxStringTL_FindOptionIndex, ReturnValue) == 0x000010, "Member 'ComboBoxStringTL_FindOptionIndex::ReturnValue' has a wrong offset!");

// Function TLUI.ComboBoxStringTL.GetOptionAtIndex
// 0x0018 (0x0018 - 0x0000)
struct ComboBoxStringTL_GetOptionAtIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxStringTL_GetOptionAtIndex) == 0x000008, "Wrong alignment on ComboBoxStringTL_GetOptionAtIndex");
static_assert(sizeof(ComboBoxStringTL_GetOptionAtIndex) == 0x000018, "Wrong size on ComboBoxStringTL_GetOptionAtIndex");
static_assert(offsetof(ComboBoxStringTL_GetOptionAtIndex, Index_0) == 0x000000, "Member 'ComboBoxStringTL_GetOptionAtIndex::Index_0' has a wrong offset!");
static_assert(offsetof(ComboBoxStringTL_GetOptionAtIndex, ReturnValue) == 0x000008, "Member 'ComboBoxStringTL_GetOptionAtIndex::ReturnValue' has a wrong offset!");

// Function TLUI.ComboBoxStringTL.GetOptionCount
// 0x0004 (0x0004 - 0x0000)
struct ComboBoxStringTL_GetOptionCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxStringTL_GetOptionCount) == 0x000004, "Wrong alignment on ComboBoxStringTL_GetOptionCount");
static_assert(sizeof(ComboBoxStringTL_GetOptionCount) == 0x000004, "Wrong size on ComboBoxStringTL_GetOptionCount");
static_assert(offsetof(ComboBoxStringTL_GetOptionCount, ReturnValue) == 0x000000, "Member 'ComboBoxStringTL_GetOptionCount::ReturnValue' has a wrong offset!");

// Function TLUI.ComboBoxStringTL.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct ComboBoxStringTL_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxStringTL_GetSelectedIndex) == 0x000004, "Wrong alignment on ComboBoxStringTL_GetSelectedIndex");
static_assert(sizeof(ComboBoxStringTL_GetSelectedIndex) == 0x000004, "Wrong size on ComboBoxStringTL_GetSelectedIndex");
static_assert(offsetof(ComboBoxStringTL_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'ComboBoxStringTL_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function TLUI.ComboBoxStringTL.GetSelectedOption
// 0x0010 (0x0010 - 0x0000)
struct ComboBoxStringTL_GetSelectedOption final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxStringTL_GetSelectedOption) == 0x000008, "Wrong alignment on ComboBoxStringTL_GetSelectedOption");
static_assert(sizeof(ComboBoxStringTL_GetSelectedOption) == 0x000010, "Wrong size on ComboBoxStringTL_GetSelectedOption");
static_assert(offsetof(ComboBoxStringTL_GetSelectedOption, ReturnValue) == 0x000000, "Member 'ComboBoxStringTL_GetSelectedOption::ReturnValue' has a wrong offset!");

// Function TLUI.ComboBoxStringTL.IsOpen
// 0x0001 (0x0001 - 0x0000)
struct ComboBoxStringTL_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxStringTL_IsOpen) == 0x000001, "Wrong alignment on ComboBoxStringTL_IsOpen");
static_assert(sizeof(ComboBoxStringTL_IsOpen) == 0x000001, "Wrong size on ComboBoxStringTL_IsOpen");
static_assert(offsetof(ComboBoxStringTL_IsOpen, ReturnValue) == 0x000000, "Member 'ComboBoxStringTL_IsOpen::ReturnValue' has a wrong offset!");

// Function TLUI.TextLayoutWidgetTL.SetJustification
// 0x0001 (0x0001 - 0x0000)
struct TextLayoutWidgetTL_SetJustification final
{
public:
	ETextJustifyTL                                InJustification;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextLayoutWidgetTL_SetJustification) == 0x000001, "Wrong alignment on TextLayoutWidgetTL_SetJustification");
static_assert(sizeof(TextLayoutWidgetTL_SetJustification) == 0x000001, "Wrong size on TextLayoutWidgetTL_SetJustification");
static_assert(offsetof(TextLayoutWidgetTL_SetJustification, InJustification) == 0x000000, "Member 'TextLayoutWidgetTL_SetJustification::InJustification' has a wrong offset!");

// Function TLUI.TLBorder.SetBrushFromSoftObjectPath
// 0x0020 (0x0020 - 0x0000)
struct TLBorder_SetBrushFromSoftObjectPath final
{
public:
	struct FSoftObjectPath                        Path;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAsyncLoad;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBorder_SetBrushFromSoftObjectPath) == 0x000008, "Wrong alignment on TLBorder_SetBrushFromSoftObjectPath");
static_assert(sizeof(TLBorder_SetBrushFromSoftObjectPath) == 0x000020, "Wrong size on TLBorder_SetBrushFromSoftObjectPath");
static_assert(offsetof(TLBorder_SetBrushFromSoftObjectPath, Path) == 0x000000, "Member 'TLBorder_SetBrushFromSoftObjectPath::Path' has a wrong offset!");
static_assert(offsetof(TLBorder_SetBrushFromSoftObjectPath, bInAsyncLoad) == 0x000018, "Member 'TLBorder_SetBrushFromSoftObjectPath::bInAsyncLoad' has a wrong offset!");

// Function TLUI.TLBorder.SetBrushFromSprite
// 0x0008 (0x0008 - 0x0000)
struct TLBorder_SetBrushFromSprite final
{
public:
	class UPaperSprite*                           Sprite;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBorder_SetBrushFromSprite) == 0x000008, "Wrong alignment on TLBorder_SetBrushFromSprite");
static_assert(sizeof(TLBorder_SetBrushFromSprite) == 0x000008, "Wrong size on TLBorder_SetBrushFromSprite");
static_assert(offsetof(TLBorder_SetBrushFromSprite, Sprite) == 0x000000, "Member 'TLBorder_SetBrushFromSprite::Sprite' has a wrong offset!");

// Function TLUI.TLBorder.SetBrushTintColorWithColorTable
// 0x0008 (0x0008 - 0x0000)
struct TLBorder_SetBrushTintColorWithColorTable final
{
public:
	class FName                                   InTableColorKey;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBorder_SetBrushTintColorWithColorTable) == 0x000004, "Wrong alignment on TLBorder_SetBrushTintColorWithColorTable");
static_assert(sizeof(TLBorder_SetBrushTintColorWithColorTable) == 0x000008, "Wrong size on TLBorder_SetBrushTintColorWithColorTable");
static_assert(offsetof(TLBorder_SetBrushTintColorWithColorTable, InTableColorKey) == 0x000000, "Member 'TLBorder_SetBrushTintColorWithColorTable::InTableColorKey' has a wrong offset!");

// Function TLUI.TLBorder.SetContentColorWithColorTable
// 0x0008 (0x0008 - 0x0000)
struct TLBorder_SetContentColorWithColorTable final
{
public:
	class FName                                   InTableColorKey;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBorder_SetContentColorWithColorTable) == 0x000004, "Wrong alignment on TLBorder_SetContentColorWithColorTable");
static_assert(sizeof(TLBorder_SetContentColorWithColorTable) == 0x000008, "Wrong size on TLBorder_SetContentColorWithColorTable");
static_assert(offsetof(TLBorder_SetContentColorWithColorTable, InTableColorKey) == 0x000000, "Member 'TLBorder_SetContentColorWithColorTable::InTableColorKey' has a wrong offset!");

// Function TLUI.TLCheckBox.OnTLCheckStateChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct TLCheckBox_OnTLCheckStateChangedCallback final
{
public:
	bool                                          IsChecked_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCheckBox_OnTLCheckStateChangedCallback) == 0x000001, "Wrong alignment on TLCheckBox_OnTLCheckStateChangedCallback");
static_assert(sizeof(TLCheckBox_OnTLCheckStateChangedCallback) == 0x000001, "Wrong size on TLCheckBox_OnTLCheckStateChangedCallback");
static_assert(offsetof(TLCheckBox_OnTLCheckStateChangedCallback, IsChecked_0) == 0x000000, "Member 'TLCheckBox_OnTLCheckStateChangedCallback::IsChecked_0' has a wrong offset!");

// Function TLUI.TLComboBoxString.OnSelectionChangedHandler
// 0x0018 (0x0018 - 0x0000)
struct TLComboBoxString_OnSelectionChangedHandler final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLComboBoxString_OnSelectionChangedHandler) == 0x000008, "Wrong alignment on TLComboBoxString_OnSelectionChangedHandler");
static_assert(sizeof(TLComboBoxString_OnSelectionChangedHandler) == 0x000018, "Wrong size on TLComboBoxString_OnSelectionChangedHandler");
static_assert(offsetof(TLComboBoxString_OnSelectionChangedHandler, SelectedItem) == 0x000000, "Member 'TLComboBoxString_OnSelectionChangedHandler::SelectedItem' has a wrong offset!");
static_assert(offsetof(TLComboBoxString_OnSelectionChangedHandler, SelectionType) == 0x000010, "Member 'TLComboBoxString_OnSelectionChangedHandler::SelectionType' has a wrong offset!");

// Function TLUI.TLComboBoxString.SetMenuPlacement
// 0x0001 (0x0001 - 0x0000)
struct TLComboBoxString_SetMenuPlacement final
{
public:
	EMenuPlacement                                InMenuPlacement;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLComboBoxString_SetMenuPlacement) == 0x000001, "Wrong alignment on TLComboBoxString_SetMenuPlacement");
static_assert(sizeof(TLComboBoxString_SetMenuPlacement) == 0x000001, "Wrong size on TLComboBoxString_SetMenuPlacement");
static_assert(offsetof(TLComboBoxString_SetMenuPlacement, InMenuPlacement) == 0x000000, "Member 'TLComboBoxString_SetMenuPlacement::InMenuPlacement' has a wrong offset!");

// Function TLUI.TLComboBoxString.SetSelectedOptionIndex
// 0x0004 (0x0004 - 0x0000)
struct TLComboBoxString_SetSelectedOptionIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLComboBoxString_SetSelectedOptionIndex) == 0x000004, "Wrong alignment on TLComboBoxString_SetSelectedOptionIndex");
static_assert(sizeof(TLComboBoxString_SetSelectedOptionIndex) == 0x000004, "Wrong size on TLComboBoxString_SetSelectedOptionIndex");
static_assert(offsetof(TLComboBoxString_SetSelectedOptionIndex, Index_0) == 0x000000, "Member 'TLComboBoxString_SetSelectedOptionIndex::Index_0' has a wrong offset!");

// Function TLUI.TLComboBoxString.GetSelectedOptionIndex
// 0x0004 (0x0004 - 0x0000)
struct TLComboBoxString_GetSelectedOptionIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLComboBoxString_GetSelectedOptionIndex) == 0x000004, "Wrong alignment on TLComboBoxString_GetSelectedOptionIndex");
static_assert(sizeof(TLComboBoxString_GetSelectedOptionIndex) == 0x000004, "Wrong size on TLComboBoxString_GetSelectedOptionIndex");
static_assert(offsetof(TLComboBoxString_GetSelectedOptionIndex, ReturnValue) == 0x000000, "Member 'TLComboBoxString_GetSelectedOptionIndex::ReturnValue' has a wrong offset!");

// DelegateFunction TLUI.TLEditableTextBox.OnEditableTextBoxChangedEvent__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct TLEditableTextBox_OnEditableTextBoxChangedEvent__DelegateSignature final
{
public:
	class FText                                   Text_0;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEditableTextBox_OnEditableTextBoxChangedEvent__DelegateSignature) == 0x000008, "Wrong alignment on TLEditableTextBox_OnEditableTextBoxChangedEvent__DelegateSignature");
static_assert(sizeof(TLEditableTextBox_OnEditableTextBoxChangedEvent__DelegateSignature) == 0x000018, "Wrong size on TLEditableTextBox_OnEditableTextBoxChangedEvent__DelegateSignature");
static_assert(offsetof(TLEditableTextBox_OnEditableTextBoxChangedEvent__DelegateSignature, Text_0) == 0x000000, "Member 'TLEditableTextBox_OnEditableTextBoxChangedEvent__DelegateSignature::Text_0' has a wrong offset!");

// DelegateFunction TLUI.TLEditableTextBox.OnEditableTextBoxCommittedEvent__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct TLEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature final
{
public:
	class FText                                   Text_0;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature) == 0x000008, "Wrong alignment on TLEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature");
static_assert(sizeof(TLEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature) == 0x000020, "Wrong size on TLEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature");
static_assert(offsetof(TLEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature, Text_0) == 0x000000, "Member 'TLEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature::Text_0' has a wrong offset!");
static_assert(offsetof(TLEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature, CommitMethod) == 0x000018, "Member 'TLEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature::CommitMethod' has a wrong offset!");

// DelegateFunction TLUI.TLEditableTextBox.OnEditableTextFocusLostEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct TLEditableTextBox_OnEditableTextFocusLostEvent__DelegateSignature final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEditableTextBox_OnEditableTextFocusLostEvent__DelegateSignature) == 0x000004, "Wrong alignment on TLEditableTextBox_OnEditableTextFocusLostEvent__DelegateSignature");
static_assert(sizeof(TLEditableTextBox_OnEditableTextFocusLostEvent__DelegateSignature) == 0x000008, "Wrong size on TLEditableTextBox_OnEditableTextFocusLostEvent__DelegateSignature");
static_assert(offsetof(TLEditableTextBox_OnEditableTextFocusLostEvent__DelegateSignature, InFocusEvent) == 0x000000, "Member 'TLEditableTextBox_OnEditableTextFocusLostEvent__DelegateSignature::InFocusEvent' has a wrong offset!");

// DelegateFunction TLUI.TLEditableTextBox.OnEditableTextFocusReceivedEvent__DelegateSignature
// 0x0040 (0x0040 - 0x0000)
struct TLEditableTextBox_OnEditableTextFocusReceivedEvent__DelegateSignature final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEditableTextBox_OnEditableTextFocusReceivedEvent__DelegateSignature) == 0x000004, "Wrong alignment on TLEditableTextBox_OnEditableTextFocusReceivedEvent__DelegateSignature");
static_assert(sizeof(TLEditableTextBox_OnEditableTextFocusReceivedEvent__DelegateSignature) == 0x000040, "Wrong size on TLEditableTextBox_OnEditableTextFocusReceivedEvent__DelegateSignature");
static_assert(offsetof(TLEditableTextBox_OnEditableTextFocusReceivedEvent__DelegateSignature, MyGeometry) == 0x000000, "Member 'TLEditableTextBox_OnEditableTextFocusReceivedEvent__DelegateSignature::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLEditableTextBox_OnEditableTextFocusReceivedEvent__DelegateSignature, InFocusEvent) == 0x000038, "Member 'TLEditableTextBox_OnEditableTextFocusReceivedEvent__DelegateSignature::InFocusEvent' has a wrong offset!");

// DelegateFunction TLUI.TLEditableTextBox.OnEditableTextMouseButtonDownEvent__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct TLEditableTextBox_OnEditableTextMouseButtonDownEvent__DelegateSignature final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEditableTextBox_OnEditableTextMouseButtonDownEvent__DelegateSignature) == 0x000008, "Wrong alignment on TLEditableTextBox_OnEditableTextMouseButtonDownEvent__DelegateSignature");
static_assert(sizeof(TLEditableTextBox_OnEditableTextMouseButtonDownEvent__DelegateSignature) == 0x0000A8, "Wrong size on TLEditableTextBox_OnEditableTextMouseButtonDownEvent__DelegateSignature");
static_assert(offsetof(TLEditableTextBox_OnEditableTextMouseButtonDownEvent__DelegateSignature, MyGeometry) == 0x000000, "Member 'TLEditableTextBox_OnEditableTextMouseButtonDownEvent__DelegateSignature::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLEditableTextBox_OnEditableTextMouseButtonDownEvent__DelegateSignature, InMouseEvent) == 0x000038, "Member 'TLEditableTextBox_OnEditableTextMouseButtonDownEvent__DelegateSignature::InMouseEvent' has a wrong offset!");

// Function TLUI.TLEditableTextBox.SetError
// 0x0018 (0x0018 - 0x0000)
struct TLEditableTextBox_SetError final
{
public:
	class FText                                   InError;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEditableTextBox_SetError) == 0x000008, "Wrong alignment on TLEditableTextBox_SetError");
static_assert(sizeof(TLEditableTextBox_SetError) == 0x000018, "Wrong size on TLEditableTextBox_SetError");
static_assert(offsetof(TLEditableTextBox_SetError, InError) == 0x000000, "Member 'TLEditableTextBox_SetError::InError' has a wrong offset!");

// Function TLUI.TLEditableTextBox.SetEscapeAction
// 0x0001 (0x0001 - 0x0000)
struct TLEditableTextBox_SetEscapeAction final
{
public:
	ETLEditableBoxEscapeAction                    InEscapeAction;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEditableTextBox_SetEscapeAction) == 0x000001, "Wrong alignment on TLEditableTextBox_SetEscapeAction");
static_assert(sizeof(TLEditableTextBox_SetEscapeAction) == 0x000001, "Wrong size on TLEditableTextBox_SetEscapeAction");
static_assert(offsetof(TLEditableTextBox_SetEscapeAction, InEscapeAction) == 0x000000, "Member 'TLEditableTextBox_SetEscapeAction::InEscapeAction' has a wrong offset!");

// Function TLUI.TLEditableTextBox.SetHintText
// 0x0018 (0x0018 - 0x0000)
struct TLEditableTextBox_SetHintText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEditableTextBox_SetHintText) == 0x000008, "Wrong alignment on TLEditableTextBox_SetHintText");
static_assert(sizeof(TLEditableTextBox_SetHintText) == 0x000018, "Wrong size on TLEditableTextBox_SetHintText");
static_assert(offsetof(TLEditableTextBox_SetHintText, InText) == 0x000000, "Member 'TLEditableTextBox_SetHintText::InText' has a wrong offset!");

// Function TLUI.TLEditableTextBox.SetIgnoreFocusLostCommited
// 0x0001 (0x0001 - 0x0000)
struct TLEditableTextBox_SetIgnoreFocusLostCommited final
{
public:
	bool                                          InIsIgnore;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEditableTextBox_SetIgnoreFocusLostCommited) == 0x000001, "Wrong alignment on TLEditableTextBox_SetIgnoreFocusLostCommited");
static_assert(sizeof(TLEditableTextBox_SetIgnoreFocusLostCommited) == 0x000001, "Wrong size on TLEditableTextBox_SetIgnoreFocusLostCommited");
static_assert(offsetof(TLEditableTextBox_SetIgnoreFocusLostCommited, InIsIgnore) == 0x000000, "Member 'TLEditableTextBox_SetIgnoreFocusLostCommited::InIsIgnore' has a wrong offset!");

// Function TLUI.TLEditableTextBox.SetIsPassword
// 0x0001 (0x0001 - 0x0000)
struct TLEditableTextBox_SetIsPassword final
{
public:
	bool                                          bIsPassword;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEditableTextBox_SetIsPassword) == 0x000001, "Wrong alignment on TLEditableTextBox_SetIsPassword");
static_assert(sizeof(TLEditableTextBox_SetIsPassword) == 0x000001, "Wrong size on TLEditableTextBox_SetIsPassword");
static_assert(offsetof(TLEditableTextBox_SetIsPassword, bIsPassword) == 0x000000, "Member 'TLEditableTextBox_SetIsPassword::bIsPassword' has a wrong offset!");

// Function TLUI.TLEditableTextBox.SetIsReadOnly
// 0x0001 (0x0001 - 0x0000)
struct TLEditableTextBox_SetIsReadOnly final
{
public:
	bool                                          bReadOnly;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEditableTextBox_SetIsReadOnly) == 0x000001, "Wrong alignment on TLEditableTextBox_SetIsReadOnly");
static_assert(sizeof(TLEditableTextBox_SetIsReadOnly) == 0x000001, "Wrong size on TLEditableTextBox_SetIsReadOnly");
static_assert(offsetof(TLEditableTextBox_SetIsReadOnly, bReadOnly) == 0x000000, "Member 'TLEditableTextBox_SetIsReadOnly::bReadOnly' has a wrong offset!");

// Function TLUI.TLEditableTextBox.SetMaxChar
// 0x0004 (0x0004 - 0x0000)
struct TLEditableTextBox_SetMaxChar final
{
public:
	int32                                         InMaxChar;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEditableTextBox_SetMaxChar) == 0x000004, "Wrong alignment on TLEditableTextBox_SetMaxChar");
static_assert(sizeof(TLEditableTextBox_SetMaxChar) == 0x000004, "Wrong size on TLEditableTextBox_SetMaxChar");
static_assert(offsetof(TLEditableTextBox_SetMaxChar, InMaxChar) == 0x000000, "Member 'TLEditableTextBox_SetMaxChar::InMaxChar' has a wrong offset!");

// Function TLUI.TLEditableTextBox.SetReplyUnhandledWhenVirtualAcceptKeyDown
// 0x0001 (0x0001 - 0x0000)
struct TLEditableTextBox_SetReplyUnhandledWhenVirtualAcceptKeyDown final
{
public:
	bool                                          InReplyUnhandled;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEditableTextBox_SetReplyUnhandledWhenVirtualAcceptKeyDown) == 0x000001, "Wrong alignment on TLEditableTextBox_SetReplyUnhandledWhenVirtualAcceptKeyDown");
static_assert(sizeof(TLEditableTextBox_SetReplyUnhandledWhenVirtualAcceptKeyDown) == 0x000001, "Wrong size on TLEditableTextBox_SetReplyUnhandledWhenVirtualAcceptKeyDown");
static_assert(offsetof(TLEditableTextBox_SetReplyUnhandledWhenVirtualAcceptKeyDown, InReplyUnhandled) == 0x000000, "Member 'TLEditableTextBox_SetReplyUnhandledWhenVirtualAcceptKeyDown::InReplyUnhandled' has a wrong offset!");

// Function TLUI.TLEditableTextBox.SetText
// 0x0018 (0x0018 - 0x0000)
struct TLEditableTextBox_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEditableTextBox_SetText) == 0x000008, "Wrong alignment on TLEditableTextBox_SetText");
static_assert(sizeof(TLEditableTextBox_SetText) == 0x000018, "Wrong size on TLEditableTextBox_SetText");
static_assert(offsetof(TLEditableTextBox_SetText, InText) == 0x000000, "Member 'TLEditableTextBox_SetText::InText' has a wrong offset!");

// Function TLUI.TLEditableTextBox.GetText
// 0x0018 (0x0018 - 0x0000)
struct TLEditableTextBox_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEditableTextBox_GetText) == 0x000008, "Wrong alignment on TLEditableTextBox_GetText");
static_assert(sizeof(TLEditableTextBox_GetText) == 0x000018, "Wrong size on TLEditableTextBox_GetText");
static_assert(offsetof(TLEditableTextBox_GetText, ReturnValue) == 0x000000, "Member 'TLEditableTextBox_GetText::ReturnValue' has a wrong offset!");

// Function TLUI.TLEditableTextBox.HasError
// 0x0001 (0x0001 - 0x0000)
struct TLEditableTextBox_HasError final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEditableTextBox_HasError) == 0x000001, "Wrong alignment on TLEditableTextBox_HasError");
static_assert(sizeof(TLEditableTextBox_HasError) == 0x000001, "Wrong size on TLEditableTextBox_HasError");
static_assert(offsetof(TLEditableTextBox_HasError, ReturnValue) == 0x000000, "Member 'TLEditableTextBox_HasError::ReturnValue' has a wrong offset!");

// Function TLUI.TLImageBase.GetDynamicMaterial
// 0x0008 (0x0008 - 0x0000)
struct TLImageBase_GetDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLImageBase_GetDynamicMaterial) == 0x000008, "Wrong alignment on TLImageBase_GetDynamicMaterial");
static_assert(sizeof(TLImageBase_GetDynamicMaterial) == 0x000008, "Wrong size on TLImageBase_GetDynamicMaterial");
static_assert(offsetof(TLImageBase_GetDynamicMaterial, ReturnValue) == 0x000000, "Member 'TLImageBase_GetDynamicMaterial::ReturnValue' has a wrong offset!");

// Function TLUI.TLImageBase.PlayOrCloseBinkMediaPlayer
// 0x0001 (0x0001 - 0x0000)
struct TLImageBase_PlayOrCloseBinkMediaPlayer final
{
public:
	bool                                          bInPlay;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLImageBase_PlayOrCloseBinkMediaPlayer) == 0x000001, "Wrong alignment on TLImageBase_PlayOrCloseBinkMediaPlayer");
static_assert(sizeof(TLImageBase_PlayOrCloseBinkMediaPlayer) == 0x000001, "Wrong size on TLImageBase_PlayOrCloseBinkMediaPlayer");
static_assert(offsetof(TLImageBase_PlayOrCloseBinkMediaPlayer, bInPlay) == 0x000000, "Member 'TLImageBase_PlayOrCloseBinkMediaPlayer::bInPlay' has a wrong offset!");

// Function TLUI.TLImageBase.SetBrush
// 0x0088 (0x0088 - 0x0000)
struct TLImageBase_SetBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLImageBase_SetBrush) == 0x000008, "Wrong alignment on TLImageBase_SetBrush");
static_assert(sizeof(TLImageBase_SetBrush) == 0x000088, "Wrong size on TLImageBase_SetBrush");
static_assert(offsetof(TLImageBase_SetBrush, InBrush) == 0x000000, "Member 'TLImageBase_SetBrush::InBrush' has a wrong offset!");

// Function TLUI.TLImageBase.SetBrushFromAsset
// 0x0008 (0x0008 - 0x0000)
struct TLImageBase_SetBrushFromAsset final
{
public:
	class USlateBrushAsset*                       Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLImageBase_SetBrushFromAsset) == 0x000008, "Wrong alignment on TLImageBase_SetBrushFromAsset");
static_assert(sizeof(TLImageBase_SetBrushFromAsset) == 0x000008, "Wrong size on TLImageBase_SetBrushFromAsset");
static_assert(offsetof(TLImageBase_SetBrushFromAsset, Asset) == 0x000000, "Member 'TLImageBase_SetBrushFromAsset::Asset' has a wrong offset!");

// Function TLUI.TLImageBase.SetBrushFromAtlasInterface
// 0x0018 (0x0018 - 0x0000)
struct TLImageBase_SetBrushFromAtlasInterface final
{
public:
	TScriptInterface<class ISlateTextureAtlasInterface> AtlasRegion;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLImageBase_SetBrushFromAtlasInterface) == 0x000008, "Wrong alignment on TLImageBase_SetBrushFromAtlasInterface");
static_assert(sizeof(TLImageBase_SetBrushFromAtlasInterface) == 0x000018, "Wrong size on TLImageBase_SetBrushFromAtlasInterface");
static_assert(offsetof(TLImageBase_SetBrushFromAtlasInterface, AtlasRegion) == 0x000000, "Member 'TLImageBase_SetBrushFromAtlasInterface::AtlasRegion' has a wrong offset!");
static_assert(offsetof(TLImageBase_SetBrushFromAtlasInterface, bMatchSize) == 0x000010, "Member 'TLImageBase_SetBrushFromAtlasInterface::bMatchSize' has a wrong offset!");

// Function TLUI.TLImageBase.SetBrushFromMaterial
// 0x0008 (0x0008 - 0x0000)
struct TLImageBase_SetBrushFromMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLImageBase_SetBrushFromMaterial) == 0x000008, "Wrong alignment on TLImageBase_SetBrushFromMaterial");
static_assert(sizeof(TLImageBase_SetBrushFromMaterial) == 0x000008, "Wrong size on TLImageBase_SetBrushFromMaterial");
static_assert(offsetof(TLImageBase_SetBrushFromMaterial, Material) == 0x000000, "Member 'TLImageBase_SetBrushFromMaterial::Material' has a wrong offset!");

// Function TLUI.TLImageBase.SetBrushFromMediaTexture
// 0x0008 (0x0008 - 0x0000)
struct TLImageBase_SetBrushFromMediaTexture final
{
public:
	class UBinkMediaTexture*                      Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLImageBase_SetBrushFromMediaTexture) == 0x000008, "Wrong alignment on TLImageBase_SetBrushFromMediaTexture");
static_assert(sizeof(TLImageBase_SetBrushFromMediaTexture) == 0x000008, "Wrong size on TLImageBase_SetBrushFromMediaTexture");
static_assert(offsetof(TLImageBase_SetBrushFromMediaTexture, Texture) == 0x000000, "Member 'TLImageBase_SetBrushFromMediaTexture::Texture' has a wrong offset!");

// Function TLUI.TLImageBase.SetBrushFromRenderTarget
// 0x0010 (0x0010 - 0x0000)
struct TLImageBase_SetBrushFromRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLImageBase_SetBrushFromRenderTarget) == 0x000008, "Wrong alignment on TLImageBase_SetBrushFromRenderTarget");
static_assert(sizeof(TLImageBase_SetBrushFromRenderTarget) == 0x000010, "Wrong size on TLImageBase_SetBrushFromRenderTarget");
static_assert(offsetof(TLImageBase_SetBrushFromRenderTarget, Texture) == 0x000000, "Member 'TLImageBase_SetBrushFromRenderTarget::Texture' has a wrong offset!");
static_assert(offsetof(TLImageBase_SetBrushFromRenderTarget, bMatchSize) == 0x000008, "Member 'TLImageBase_SetBrushFromRenderTarget::bMatchSize' has a wrong offset!");

// Function TLUI.TLImageBase.SetBrushFromSoftMaterial
// 0x0028 (0x0028 - 0x0000)
struct TLImageBase_SetBrushFromSoftMaterial final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      SoftMaterial;                                      // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLImageBase_SetBrushFromSoftMaterial) == 0x000008, "Wrong alignment on TLImageBase_SetBrushFromSoftMaterial");
static_assert(sizeof(TLImageBase_SetBrushFromSoftMaterial) == 0x000028, "Wrong size on TLImageBase_SetBrushFromSoftMaterial");
static_assert(offsetof(TLImageBase_SetBrushFromSoftMaterial, SoftMaterial) == 0x000000, "Member 'TLImageBase_SetBrushFromSoftMaterial::SoftMaterial' has a wrong offset!");

// Function TLUI.TLImageBase.SetBrushFromSoftTexture
// 0x0030 (0x0030 - 0x0000)
struct TLImageBase_SetBrushFromSoftTexture final
{
public:
	TSoftObjectPtr<class UTexture2D>              SoftTexture;                                       // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLImageBase_SetBrushFromSoftTexture) == 0x000008, "Wrong alignment on TLImageBase_SetBrushFromSoftTexture");
static_assert(sizeof(TLImageBase_SetBrushFromSoftTexture) == 0x000030, "Wrong size on TLImageBase_SetBrushFromSoftTexture");
static_assert(offsetof(TLImageBase_SetBrushFromSoftTexture, SoftTexture) == 0x000000, "Member 'TLImageBase_SetBrushFromSoftTexture::SoftTexture' has a wrong offset!");
static_assert(offsetof(TLImageBase_SetBrushFromSoftTexture, bMatchSize) == 0x000028, "Member 'TLImageBase_SetBrushFromSoftTexture::bMatchSize' has a wrong offset!");

// Function TLUI.TLImageBase.SetBrushFromTexture
// 0x0010 (0x0010 - 0x0000)
struct TLImageBase_SetBrushFromTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLImageBase_SetBrushFromTexture) == 0x000008, "Wrong alignment on TLImageBase_SetBrushFromTexture");
static_assert(sizeof(TLImageBase_SetBrushFromTexture) == 0x000010, "Wrong size on TLImageBase_SetBrushFromTexture");
static_assert(offsetof(TLImageBase_SetBrushFromTexture, Texture) == 0x000000, "Member 'TLImageBase_SetBrushFromTexture::Texture' has a wrong offset!");
static_assert(offsetof(TLImageBase_SetBrushFromTexture, bMatchSize) == 0x000008, "Member 'TLImageBase_SetBrushFromTexture::bMatchSize' has a wrong offset!");

// Function TLUI.TLImageBase.SetBrushFromTexture_MaintainRatio
// 0x0010 (0x0010 - 0x0000)
struct TLImageBase_SetBrushFromTexture_MaintainRatio final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DefaultSize;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLImageBase_SetBrushFromTexture_MaintainRatio) == 0x000008, "Wrong alignment on TLImageBase_SetBrushFromTexture_MaintainRatio");
static_assert(sizeof(TLImageBase_SetBrushFromTexture_MaintainRatio) == 0x000010, "Wrong size on TLImageBase_SetBrushFromTexture_MaintainRatio");
static_assert(offsetof(TLImageBase_SetBrushFromTexture_MaintainRatio, Texture) == 0x000000, "Member 'TLImageBase_SetBrushFromTexture_MaintainRatio::Texture' has a wrong offset!");
static_assert(offsetof(TLImageBase_SetBrushFromTexture_MaintainRatio, DefaultSize) == 0x000008, "Member 'TLImageBase_SetBrushFromTexture_MaintainRatio::DefaultSize' has a wrong offset!");

// Function TLUI.TLImageBase.SetBrushFromTextureDynamic
// 0x0010 (0x0010 - 0x0000)
struct TLImageBase_SetBrushFromTextureDynamic final
{
public:
	class UTexture2DDynamic*                      Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLImageBase_SetBrushFromTextureDynamic) == 0x000008, "Wrong alignment on TLImageBase_SetBrushFromTextureDynamic");
static_assert(sizeof(TLImageBase_SetBrushFromTextureDynamic) == 0x000010, "Wrong size on TLImageBase_SetBrushFromTextureDynamic");
static_assert(offsetof(TLImageBase_SetBrushFromTextureDynamic, Texture) == 0x000000, "Member 'TLImageBase_SetBrushFromTextureDynamic::Texture' has a wrong offset!");
static_assert(offsetof(TLImageBase_SetBrushFromTextureDynamic, bMatchSize) == 0x000008, "Member 'TLImageBase_SetBrushFromTextureDynamic::bMatchSize' has a wrong offset!");

// Function TLUI.TLImageBase.SetBrushResourceObject
// 0x0008 (0x0008 - 0x0000)
struct TLImageBase_SetBrushResourceObject final
{
public:
	class UObject*                                ResourceObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLImageBase_SetBrushResourceObject) == 0x000008, "Wrong alignment on TLImageBase_SetBrushResourceObject");
static_assert(sizeof(TLImageBase_SetBrushResourceObject) == 0x000008, "Wrong size on TLImageBase_SetBrushResourceObject");
static_assert(offsetof(TLImageBase_SetBrushResourceObject, ResourceObject) == 0x000000, "Member 'TLImageBase_SetBrushResourceObject::ResourceObject' has a wrong offset!");

// Function TLUI.TLImageBase.SetBrushSize
// 0x0008 (0x0008 - 0x0000)
struct TLImageBase_SetBrushSize final
{
public:
	struct FVector2D                              DesiredSize;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLImageBase_SetBrushSize) == 0x000004, "Wrong alignment on TLImageBase_SetBrushSize");
static_assert(sizeof(TLImageBase_SetBrushSize) == 0x000008, "Wrong size on TLImageBase_SetBrushSize");
static_assert(offsetof(TLImageBase_SetBrushSize, DesiredSize) == 0x000000, "Member 'TLImageBase_SetBrushSize::DesiredSize' has a wrong offset!");

// Function TLUI.TLImageBase.SetBrushTintColor
// 0x0028 (0x0028 - 0x0000)
struct TLImageBase_SetBrushTintColor final
{
public:
	struct FSlateColor                            TintColor;                                         // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLImageBase_SetBrushTintColor) == 0x000008, "Wrong alignment on TLImageBase_SetBrushTintColor");
static_assert(sizeof(TLImageBase_SetBrushTintColor) == 0x000028, "Wrong size on TLImageBase_SetBrushTintColor");
static_assert(offsetof(TLImageBase_SetBrushTintColor, TintColor) == 0x000000, "Member 'TLImageBase_SetBrushTintColor::TintColor' has a wrong offset!");

// Function TLUI.TLImageBase.SetBrushTintColorWithColorTable
// 0x0008 (0x0008 - 0x0000)
struct TLImageBase_SetBrushTintColorWithColorTable final
{
public:
	class FName                                   InTableColorKey;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLImageBase_SetBrushTintColorWithColorTable) == 0x000004, "Wrong alignment on TLImageBase_SetBrushTintColorWithColorTable");
static_assert(sizeof(TLImageBase_SetBrushTintColorWithColorTable) == 0x000008, "Wrong size on TLImageBase_SetBrushTintColorWithColorTable");
static_assert(offsetof(TLImageBase_SetBrushTintColorWithColorTable, InTableColorKey) == 0x000000, "Member 'TLImageBase_SetBrushTintColorWithColorTable::InTableColorKey' has a wrong offset!");

// Function TLUI.TLImageBase.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct TLImageBase_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLImageBase_SetColorAndOpacity) == 0x000004, "Wrong alignment on TLImageBase_SetColorAndOpacity");
static_assert(sizeof(TLImageBase_SetColorAndOpacity) == 0x000010, "Wrong size on TLImageBase_SetColorAndOpacity");
static_assert(offsetof(TLImageBase_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'TLImageBase_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function TLUI.TLImageBase.SetColorWithColorTable
// 0x0008 (0x0008 - 0x0000)
struct TLImageBase_SetColorWithColorTable final
{
public:
	class FName                                   InTableColorKey;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLImageBase_SetColorWithColorTable) == 0x000004, "Wrong alignment on TLImageBase_SetColorWithColorTable");
static_assert(sizeof(TLImageBase_SetColorWithColorTable) == 0x000008, "Wrong size on TLImageBase_SetColorWithColorTable");
static_assert(offsetof(TLImageBase_SetColorWithColorTable, InTableColorKey) == 0x000000, "Member 'TLImageBase_SetColorWithColorTable::InTableColorKey' has a wrong offset!");

// Function TLUI.TLImageBase.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct TLImageBase_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLImageBase_SetOpacity) == 0x000004, "Wrong alignment on TLImageBase_SetOpacity");
static_assert(sizeof(TLImageBase_SetOpacity) == 0x000004, "Wrong size on TLImageBase_SetOpacity");
static_assert(offsetof(TLImageBase_SetOpacity, InOpacity) == 0x000000, "Member 'TLImageBase_SetOpacity::InOpacity' has a wrong offset!");

// Function TLUI.TLFlipBookImage.SetCurrentFrame
// 0x0004 (0x0004 - 0x0000)
struct TLFlipBookImage_SetCurrentFrame final
{
public:
	int32                                         Frame;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLFlipBookImage_SetCurrentFrame) == 0x000004, "Wrong alignment on TLFlipBookImage_SetCurrentFrame");
static_assert(sizeof(TLFlipBookImage_SetCurrentFrame) == 0x000004, "Wrong size on TLFlipBookImage_SetCurrentFrame");
static_assert(offsetof(TLFlipBookImage_SetCurrentFrame, Frame) == 0x000000, "Member 'TLFlipBookImage_SetCurrentFrame::Frame' has a wrong offset!");

// Function TLUI.TLFlipBookImage.SetFlipbookFromSoftObjectPath
// 0x0018 (0x0018 - 0x0000)
struct TLFlipBookImage_SetFlipbookFromSoftObjectPath final
{
public:
	struct FSoftObjectPath                        Path;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLFlipBookImage_SetFlipbookFromSoftObjectPath) == 0x000008, "Wrong alignment on TLFlipBookImage_SetFlipbookFromSoftObjectPath");
static_assert(sizeof(TLFlipBookImage_SetFlipbookFromSoftObjectPath) == 0x000018, "Wrong size on TLFlipBookImage_SetFlipbookFromSoftObjectPath");
static_assert(offsetof(TLFlipBookImage_SetFlipbookFromSoftObjectPath, Path) == 0x000000, "Member 'TLFlipBookImage_SetFlipbookFromSoftObjectPath::Path' has a wrong offset!");

// Function TLUI.TLImage.HandleBinkMediaPlayerReachedEnd
// 0x0008 (0x0008 - 0x0000)
struct TLImage_HandleBinkMediaPlayerReachedEnd final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLImage_HandleBinkMediaPlayerReachedEnd) == 0x000008, "Wrong alignment on TLImage_HandleBinkMediaPlayerReachedEnd");
static_assert(sizeof(TLImage_HandleBinkMediaPlayerReachedEnd) == 0x000008, "Wrong size on TLImage_HandleBinkMediaPlayerReachedEnd");
static_assert(offsetof(TLImage_HandleBinkMediaPlayerReachedEnd, InBinkMediaPlayer) == 0x000000, "Member 'TLImage_HandleBinkMediaPlayerReachedEnd::InBinkMediaPlayer' has a wrong offset!");

// Function TLUI.TLImage.SetBrushByName
// 0x000C (0x000C - 0x0000)
struct TLImage_SetBrushByName final
{
public:
	class FName                                   InSlateBrushName;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InApplyVisible;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLImage_SetBrushByName) == 0x000004, "Wrong alignment on TLImage_SetBrushByName");
static_assert(sizeof(TLImage_SetBrushByName) == 0x00000C, "Wrong size on TLImage_SetBrushByName");
static_assert(offsetof(TLImage_SetBrushByName, InSlateBrushName) == 0x000000, "Member 'TLImage_SetBrushByName::InSlateBrushName' has a wrong offset!");
static_assert(offsetof(TLImage_SetBrushByName, InApplyVisible) == 0x000008, "Member 'TLImage_SetBrushByName::InApplyVisible' has a wrong offset!");
static_assert(offsetof(TLImage_SetBrushByName, ReturnValue) == 0x000009, "Member 'TLImage_SetBrushByName::ReturnValue' has a wrong offset!");

// Function TLUI.TLImage.SetBrushFromCustomMaterial
// 0x0008 (0x0008 - 0x0000)
struct TLImage_SetBrushFromCustomMaterial final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLImage_SetBrushFromCustomMaterial) == 0x000008, "Wrong alignment on TLImage_SetBrushFromCustomMaterial");
static_assert(sizeof(TLImage_SetBrushFromCustomMaterial) == 0x000008, "Wrong size on TLImage_SetBrushFromCustomMaterial");
static_assert(offsetof(TLImage_SetBrushFromCustomMaterial, InObject) == 0x000000, "Member 'TLImage_SetBrushFromCustomMaterial::InObject' has a wrong offset!");

// Function TLUI.TLImage.SetBrushFromSoftObjectPath
// 0x0020 (0x0020 - 0x0000)
struct TLImage_SetBrushFromSoftObjectPath final
{
public:
	struct FSoftObjectPath                        Path;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAsyncLoad;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAutoShowAfterBrushLoading;                      // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLImage_SetBrushFromSoftObjectPath) == 0x000008, "Wrong alignment on TLImage_SetBrushFromSoftObjectPath");
static_assert(sizeof(TLImage_SetBrushFromSoftObjectPath) == 0x000020, "Wrong size on TLImage_SetBrushFromSoftObjectPath");
static_assert(offsetof(TLImage_SetBrushFromSoftObjectPath, Path) == 0x000000, "Member 'TLImage_SetBrushFromSoftObjectPath::Path' has a wrong offset!");
static_assert(offsetof(TLImage_SetBrushFromSoftObjectPath, bInAsyncLoad) == 0x000018, "Member 'TLImage_SetBrushFromSoftObjectPath::bInAsyncLoad' has a wrong offset!");
static_assert(offsetof(TLImage_SetBrushFromSoftObjectPath, bInAutoShowAfterBrushLoading) == 0x000019, "Member 'TLImage_SetBrushFromSoftObjectPath::bInAutoShowAfterBrushLoading' has a wrong offset!");
static_assert(offsetof(TLImage_SetBrushFromSoftObjectPath, bMatchSize) == 0x00001A, "Member 'TLImage_SetBrushFromSoftObjectPath::bMatchSize' has a wrong offset!");

// Function TLUI.TLImage.SetBrushFromSprite
// 0x0010 (0x0010 - 0x0000)
struct TLImage_SetBrushFromSprite final
{
public:
	class UPaperSprite*                           Sprite;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLImage_SetBrushFromSprite) == 0x000008, "Wrong alignment on TLImage_SetBrushFromSprite");
static_assert(sizeof(TLImage_SetBrushFromSprite) == 0x000010, "Wrong size on TLImage_SetBrushFromSprite");
static_assert(offsetof(TLImage_SetBrushFromSprite, Sprite) == 0x000000, "Member 'TLImage_SetBrushFromSprite::Sprite' has a wrong offset!");
static_assert(offsetof(TLImage_SetBrushFromSprite, bMatchSize) == 0x000008, "Member 'TLImage_SetBrushFromSprite::bMatchSize' has a wrong offset!");

// Function TLUI.TLImage.SetHslShift
// 0x0010 (0x0010 - 0x0000)
struct TLImage_SetHslShift final
{
public:
	struct FLinearColor                           InHslShift;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLImage_SetHslShift) == 0x000004, "Wrong alignment on TLImage_SetHslShift");
static_assert(sizeof(TLImage_SetHslShift) == 0x000010, "Wrong size on TLImage_SetHslShift");
static_assert(offsetof(TLImage_SetHslShift, InHslShift) == 0x000000, "Member 'TLImage_SetHslShift::InHslShift' has a wrong offset!");

// Function TLUI.TLImage.SetMaskTexture
// 0x0008 (0x0008 - 0x0000)
struct TLImage_SetMaskTexture final
{
public:
	class UTexture*                               InMaskTexture;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLImage_SetMaskTexture) == 0x000008, "Wrong alignment on TLImage_SetMaskTexture");
static_assert(sizeof(TLImage_SetMaskTexture) == 0x000008, "Wrong size on TLImage_SetMaskTexture");
static_assert(offsetof(TLImage_SetMaskTexture, InMaskTexture) == 0x000000, "Member 'TLImage_SetMaskTexture::InMaskTexture' has a wrong offset!");

// DelegateFunction TLUI.TLInputKeyCombiSelector.OnKeySelected__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct TLInputKeyCombiSelector_OnKeySelected__DelegateSignature final
{
public:
	TArray<struct FInputChord>                    SelectedKeys_0;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInputKeyCombiSelector_OnKeySelected__DelegateSignature) == 0x000008, "Wrong alignment on TLInputKeyCombiSelector_OnKeySelected__DelegateSignature");
static_assert(sizeof(TLInputKeyCombiSelector_OnKeySelected__DelegateSignature) == 0x000010, "Wrong size on TLInputKeyCombiSelector_OnKeySelected__DelegateSignature");
static_assert(offsetof(TLInputKeyCombiSelector_OnKeySelected__DelegateSignature, SelectedKeys_0) == 0x000000, "Member 'TLInputKeyCombiSelector_OnKeySelected__DelegateSignature::SelectedKeys_0' has a wrong offset!");

// DelegateFunction TLUI.TLInputKeyCombiSelector.OnKeySelecting__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct TLInputKeyCombiSelector_OnKeySelecting__DelegateSignature final
{
public:
	TArray<struct FInputChord>                    SelectedKeys_0;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Repeat;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLInputKeyCombiSelector_OnKeySelecting__DelegateSignature) == 0x000008, "Wrong alignment on TLInputKeyCombiSelector_OnKeySelecting__DelegateSignature");
static_assert(sizeof(TLInputKeyCombiSelector_OnKeySelecting__DelegateSignature) == 0x000018, "Wrong size on TLInputKeyCombiSelector_OnKeySelecting__DelegateSignature");
static_assert(offsetof(TLInputKeyCombiSelector_OnKeySelecting__DelegateSignature, SelectedKeys_0) == 0x000000, "Member 'TLInputKeyCombiSelector_OnKeySelecting__DelegateSignature::SelectedKeys_0' has a wrong offset!");
static_assert(offsetof(TLInputKeyCombiSelector_OnKeySelecting__DelegateSignature, Repeat) == 0x000010, "Member 'TLInputKeyCombiSelector_OnKeySelecting__DelegateSignature::Repeat' has a wrong offset!");

// DelegateFunction TLUI.TLInputKeyCombiSelector.OnLongPressKeySelected__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct TLInputKeyCombiSelector_OnLongPressKeySelected__DelegateSignature final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInputKeyCombiSelector_OnLongPressKeySelected__DelegateSignature) == 0x000008, "Wrong alignment on TLInputKeyCombiSelector_OnLongPressKeySelected__DelegateSignature");
static_assert(sizeof(TLInputKeyCombiSelector_OnLongPressKeySelected__DelegateSignature) == 0x000018, "Wrong size on TLInputKeyCombiSelector_OnLongPressKeySelected__DelegateSignature");
static_assert(offsetof(TLInputKeyCombiSelector_OnLongPressKeySelected__DelegateSignature, InKey) == 0x000000, "Member 'TLInputKeyCombiSelector_OnLongPressKeySelected__DelegateSignature::InKey' has a wrong offset!");

// Function TLUI.TLInputKeyCombiSelector.SetAllowGamepadKeys
// 0x0001 (0x0001 - 0x0000)
struct TLInputKeyCombiSelector_SetAllowGamepadKeys final
{
public:
	bool                                          bInAllowGamepadKeys;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInputKeyCombiSelector_SetAllowGamepadKeys) == 0x000001, "Wrong alignment on TLInputKeyCombiSelector_SetAllowGamepadKeys");
static_assert(sizeof(TLInputKeyCombiSelector_SetAllowGamepadKeys) == 0x000001, "Wrong size on TLInputKeyCombiSelector_SetAllowGamepadKeys");
static_assert(offsetof(TLInputKeyCombiSelector_SetAllowGamepadKeys, bInAllowGamepadKeys) == 0x000000, "Member 'TLInputKeyCombiSelector_SetAllowGamepadKeys::bInAllowGamepadKeys' has a wrong offset!");

// Function TLUI.TLInputKeyCombiSelector.SetAllowModifierKeys
// 0x0001 (0x0001 - 0x0000)
struct TLInputKeyCombiSelector_SetAllowModifierKeys final
{
public:
	bool                                          bInAllowModifierKeys;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInputKeyCombiSelector_SetAllowModifierKeys) == 0x000001, "Wrong alignment on TLInputKeyCombiSelector_SetAllowModifierKeys");
static_assert(sizeof(TLInputKeyCombiSelector_SetAllowModifierKeys) == 0x000001, "Wrong size on TLInputKeyCombiSelector_SetAllowModifierKeys");
static_assert(offsetof(TLInputKeyCombiSelector_SetAllowModifierKeys, bInAllowModifierKeys) == 0x000000, "Member 'TLInputKeyCombiSelector_SetAllowModifierKeys::bInAllowModifierKeys' has a wrong offset!");

// Function TLUI.TLInputKeyCombiSelector.SetAllowOnlyGamepadKeys
// 0x0001 (0x0001 - 0x0000)
struct TLInputKeyCombiSelector_SetAllowOnlyGamepadKeys final
{
public:
	bool                                          bInAllowOnlyGamepadKeys;                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInputKeyCombiSelector_SetAllowOnlyGamepadKeys) == 0x000001, "Wrong alignment on TLInputKeyCombiSelector_SetAllowOnlyGamepadKeys");
static_assert(sizeof(TLInputKeyCombiSelector_SetAllowOnlyGamepadKeys) == 0x000001, "Wrong size on TLInputKeyCombiSelector_SetAllowOnlyGamepadKeys");
static_assert(offsetof(TLInputKeyCombiSelector_SetAllowOnlyGamepadKeys, bInAllowOnlyGamepadKeys) == 0x000000, "Member 'TLInputKeyCombiSelector_SetAllowOnlyGamepadKeys::bInAllowOnlyGamepadKeys' has a wrong offset!");

// Function TLUI.TLInputKeyCombiSelector.SetAllowOnlyGamepadModifierKeys
// 0x0001 (0x0001 - 0x0000)
struct TLInputKeyCombiSelector_SetAllowOnlyGamepadModifierKeys final
{
public:
	bool                                          bInAllowOnlyGamepadModifierKey;                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInputKeyCombiSelector_SetAllowOnlyGamepadModifierKeys) == 0x000001, "Wrong alignment on TLInputKeyCombiSelector_SetAllowOnlyGamepadModifierKeys");
static_assert(sizeof(TLInputKeyCombiSelector_SetAllowOnlyGamepadModifierKeys) == 0x000001, "Wrong size on TLInputKeyCombiSelector_SetAllowOnlyGamepadModifierKeys");
static_assert(offsetof(TLInputKeyCombiSelector_SetAllowOnlyGamepadModifierKeys, bInAllowOnlyGamepadModifierKey) == 0x000000, "Member 'TLInputKeyCombiSelector_SetAllowOnlyGamepadModifierKeys::bInAllowOnlyGamepadModifierKey' has a wrong offset!");

// Function TLUI.TLInputKeyCombiSelector.SetKeySelectionText
// 0x0018 (0x0018 - 0x0000)
struct TLInputKeyCombiSelector_SetKeySelectionText final
{
public:
	class FText                                   InKeySelectionText;                                // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInputKeyCombiSelector_SetKeySelectionText) == 0x000008, "Wrong alignment on TLInputKeyCombiSelector_SetKeySelectionText");
static_assert(sizeof(TLInputKeyCombiSelector_SetKeySelectionText) == 0x000018, "Wrong size on TLInputKeyCombiSelector_SetKeySelectionText");
static_assert(offsetof(TLInputKeyCombiSelector_SetKeySelectionText, InKeySelectionText) == 0x000000, "Member 'TLInputKeyCombiSelector_SetKeySelectionText::InKeySelectionText' has a wrong offset!");

// Function TLUI.TLInputKeyCombiSelector.SetMaxKeyCount
// 0x0004 (0x0004 - 0x0000)
struct TLInputKeyCombiSelector_SetMaxKeyCount final
{
public:
	int32                                         InMaxKeyCount;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInputKeyCombiSelector_SetMaxKeyCount) == 0x000004, "Wrong alignment on TLInputKeyCombiSelector_SetMaxKeyCount");
static_assert(sizeof(TLInputKeyCombiSelector_SetMaxKeyCount) == 0x000004, "Wrong size on TLInputKeyCombiSelector_SetMaxKeyCount");
static_assert(offsetof(TLInputKeyCombiSelector_SetMaxKeyCount, InMaxKeyCount) == 0x000000, "Member 'TLInputKeyCombiSelector_SetMaxKeyCount::InMaxKeyCount' has a wrong offset!");

// Function TLUI.TLInputKeyCombiSelector.SetNoKeySpecifiedText
// 0x0018 (0x0018 - 0x0000)
struct TLInputKeyCombiSelector_SetNoKeySpecifiedText final
{
public:
	class FText                                   InNoKeySpecifiedText;                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInputKeyCombiSelector_SetNoKeySpecifiedText) == 0x000008, "Wrong alignment on TLInputKeyCombiSelector_SetNoKeySpecifiedText");
static_assert(sizeof(TLInputKeyCombiSelector_SetNoKeySpecifiedText) == 0x000018, "Wrong size on TLInputKeyCombiSelector_SetNoKeySpecifiedText");
static_assert(offsetof(TLInputKeyCombiSelector_SetNoKeySpecifiedText, InNoKeySpecifiedText) == 0x000000, "Member 'TLInputKeyCombiSelector_SetNoKeySpecifiedText::InNoKeySpecifiedText' has a wrong offset!");

// Function TLUI.TLInputKeyCombiSelector.SetSelectedKey
// 0x0010 (0x0010 - 0x0000)
struct TLInputKeyCombiSelector_SetSelectedKey final
{
public:
	TArray<struct FInputChord>                    InSelectedKey;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInputKeyCombiSelector_SetSelectedKey) == 0x000008, "Wrong alignment on TLInputKeyCombiSelector_SetSelectedKey");
static_assert(sizeof(TLInputKeyCombiSelector_SetSelectedKey) == 0x000010, "Wrong size on TLInputKeyCombiSelector_SetSelectedKey");
static_assert(offsetof(TLInputKeyCombiSelector_SetSelectedKey, InSelectedKey) == 0x000000, "Member 'TLInputKeyCombiSelector_SetSelectedKey::InSelectedKey' has a wrong offset!");

// Function TLUI.TLInputKeyCombiSelector.GetIsSelectingKey
// 0x0001 (0x0001 - 0x0000)
struct TLInputKeyCombiSelector_GetIsSelectingKey final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInputKeyCombiSelector_GetIsSelectingKey) == 0x000001, "Wrong alignment on TLInputKeyCombiSelector_GetIsSelectingKey");
static_assert(sizeof(TLInputKeyCombiSelector_GetIsSelectingKey) == 0x000001, "Wrong size on TLInputKeyCombiSelector_GetIsSelectingKey");
static_assert(offsetof(TLInputKeyCombiSelector_GetIsSelectingKey, ReturnValue) == 0x000000, "Member 'TLInputKeyCombiSelector_GetIsSelectingKey::ReturnValue' has a wrong offset!");

// DelegateFunction TLUI.TLInputKeySelector.OnKeySelected__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct TLInputKeySelector_OnKeySelected__DelegateSignature final
{
public:
	struct FInputChord                            SelectedKey_0;                                     // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInputKeySelector_OnKeySelected__DelegateSignature) == 0x000008, "Wrong alignment on TLInputKeySelector_OnKeySelected__DelegateSignature");
static_assert(sizeof(TLInputKeySelector_OnKeySelected__DelegateSignature) == 0x000020, "Wrong size on TLInputKeySelector_OnKeySelected__DelegateSignature");
static_assert(offsetof(TLInputKeySelector_OnKeySelected__DelegateSignature, SelectedKey_0) == 0x000000, "Member 'TLInputKeySelector_OnKeySelected__DelegateSignature::SelectedKey_0' has a wrong offset!");

// Function TLUI.TLInputKeySelector.SetAllowGamepadKeys
// 0x0001 (0x0001 - 0x0000)
struct TLInputKeySelector_SetAllowGamepadKeys final
{
public:
	bool                                          bInAllowGamepadKeys;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInputKeySelector_SetAllowGamepadKeys) == 0x000001, "Wrong alignment on TLInputKeySelector_SetAllowGamepadKeys");
static_assert(sizeof(TLInputKeySelector_SetAllowGamepadKeys) == 0x000001, "Wrong size on TLInputKeySelector_SetAllowGamepadKeys");
static_assert(offsetof(TLInputKeySelector_SetAllowGamepadKeys, bInAllowGamepadKeys) == 0x000000, "Member 'TLInputKeySelector_SetAllowGamepadKeys::bInAllowGamepadKeys' has a wrong offset!");

// Function TLUI.TLInputKeySelector.SetAllowModifierKeys
// 0x0001 (0x0001 - 0x0000)
struct TLInputKeySelector_SetAllowModifierKeys final
{
public:
	bool                                          bInAllowModifierKeys;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInputKeySelector_SetAllowModifierKeys) == 0x000001, "Wrong alignment on TLInputKeySelector_SetAllowModifierKeys");
static_assert(sizeof(TLInputKeySelector_SetAllowModifierKeys) == 0x000001, "Wrong size on TLInputKeySelector_SetAllowModifierKeys");
static_assert(offsetof(TLInputKeySelector_SetAllowModifierKeys, bInAllowModifierKeys) == 0x000000, "Member 'TLInputKeySelector_SetAllowModifierKeys::bInAllowModifierKeys' has a wrong offset!");

// Function TLUI.TLInputKeySelector.SetKeySelectionText
// 0x0018 (0x0018 - 0x0000)
struct TLInputKeySelector_SetKeySelectionText final
{
public:
	class FText                                   InKeySelectionText;                                // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInputKeySelector_SetKeySelectionText) == 0x000008, "Wrong alignment on TLInputKeySelector_SetKeySelectionText");
static_assert(sizeof(TLInputKeySelector_SetKeySelectionText) == 0x000018, "Wrong size on TLInputKeySelector_SetKeySelectionText");
static_assert(offsetof(TLInputKeySelector_SetKeySelectionText, InKeySelectionText) == 0x000000, "Member 'TLInputKeySelector_SetKeySelectionText::InKeySelectionText' has a wrong offset!");

// Function TLUI.TLInputKeySelector.SetNoKeySpecifiedText
// 0x0018 (0x0018 - 0x0000)
struct TLInputKeySelector_SetNoKeySpecifiedText final
{
public:
	class FText                                   InNoKeySpecifiedText;                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInputKeySelector_SetNoKeySpecifiedText) == 0x000008, "Wrong alignment on TLInputKeySelector_SetNoKeySpecifiedText");
static_assert(sizeof(TLInputKeySelector_SetNoKeySpecifiedText) == 0x000018, "Wrong size on TLInputKeySelector_SetNoKeySpecifiedText");
static_assert(offsetof(TLInputKeySelector_SetNoKeySpecifiedText, InNoKeySpecifiedText) == 0x000000, "Member 'TLInputKeySelector_SetNoKeySpecifiedText::InNoKeySpecifiedText' has a wrong offset!");

// Function TLUI.TLInputKeySelector.SetSelectedKey
// 0x0020 (0x0020 - 0x0000)
struct TLInputKeySelector_SetSelectedKey final
{
public:
	struct FInputChord                            InSelectedKey;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInputKeySelector_SetSelectedKey) == 0x000008, "Wrong alignment on TLInputKeySelector_SetSelectedKey");
static_assert(sizeof(TLInputKeySelector_SetSelectedKey) == 0x000020, "Wrong size on TLInputKeySelector_SetSelectedKey");
static_assert(offsetof(TLInputKeySelector_SetSelectedKey, InSelectedKey) == 0x000000, "Member 'TLInputKeySelector_SetSelectedKey::InSelectedKey' has a wrong offset!");

// Function TLUI.TLInputKeySelector.SetTextBlockVisibility
// 0x0001 (0x0001 - 0x0000)
struct TLInputKeySelector_SetTextBlockVisibility final
{
public:
	ESlateVisibility                              InVisibility;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInputKeySelector_SetTextBlockVisibility) == 0x000001, "Wrong alignment on TLInputKeySelector_SetTextBlockVisibility");
static_assert(sizeof(TLInputKeySelector_SetTextBlockVisibility) == 0x000001, "Wrong size on TLInputKeySelector_SetTextBlockVisibility");
static_assert(offsetof(TLInputKeySelector_SetTextBlockVisibility, InVisibility) == 0x000000, "Member 'TLInputKeySelector_SetTextBlockVisibility::InVisibility' has a wrong offset!");

// Function TLUI.TLInputKeySelector.GetIsSelectingKey
// 0x0001 (0x0001 - 0x0000)
struct TLInputKeySelector_GetIsSelectingKey final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInputKeySelector_GetIsSelectingKey) == 0x000001, "Wrong alignment on TLInputKeySelector_GetIsSelectingKey");
static_assert(sizeof(TLInputKeySelector_GetIsSelectingKey) == 0x000001, "Wrong size on TLInputKeySelector_GetIsSelectingKey");
static_assert(offsetof(TLInputKeySelector_GetIsSelectingKey, ReturnValue) == 0x000000, "Member 'TLInputKeySelector_GetIsSelectingKey::ReturnValue' has a wrong offset!");

// Function TLUI.TLLinearBoxSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct TLLinearBoxSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLLinearBoxSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on TLLinearBoxSlot_SetHorizontalAlignment");
static_assert(sizeof(TLLinearBoxSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on TLLinearBoxSlot_SetHorizontalAlignment");
static_assert(offsetof(TLLinearBoxSlot_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'TLLinearBoxSlot_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function TLUI.TLLinearBoxSlot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct TLLinearBoxSlot_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLLinearBoxSlot_SetPadding) == 0x000004, "Wrong alignment on TLLinearBoxSlot_SetPadding");
static_assert(sizeof(TLLinearBoxSlot_SetPadding) == 0x000010, "Wrong size on TLLinearBoxSlot_SetPadding");
static_assert(offsetof(TLLinearBoxSlot_SetPadding, InPadding) == 0x000000, "Member 'TLLinearBoxSlot_SetPadding::InPadding' has a wrong offset!");

// Function TLUI.TLLinearBoxSlot.SetSize
// 0x0008 (0x0008 - 0x0000)
struct TLLinearBoxSlot_SetSize final
{
public:
	struct FSlateChildSize                        InSize;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLLinearBoxSlot_SetSize) == 0x000004, "Wrong alignment on TLLinearBoxSlot_SetSize");
static_assert(sizeof(TLLinearBoxSlot_SetSize) == 0x000008, "Wrong size on TLLinearBoxSlot_SetSize");
static_assert(offsetof(TLLinearBoxSlot_SetSize, InSize) == 0x000000, "Member 'TLLinearBoxSlot_SetSize::InSize' has a wrong offset!");

// Function TLUI.TLLinearBoxSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct TLLinearBoxSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLLinearBoxSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on TLLinearBoxSlot_SetVerticalAlignment");
static_assert(sizeof(TLLinearBoxSlot_SetVerticalAlignment) == 0x000001, "Wrong size on TLLinearBoxSlot_SetVerticalAlignment");
static_assert(offsetof(TLLinearBoxSlot_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'TLLinearBoxSlot_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function TLUI.TLMultiLineEditableTextBox.GetCurrentCursorLine
// 0x0004 (0x0004 - 0x0000)
struct TLMultiLineEditableTextBox_GetCurrentCursorLine final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMultiLineEditableTextBox_GetCurrentCursorLine) == 0x000004, "Wrong alignment on TLMultiLineEditableTextBox_GetCurrentCursorLine");
static_assert(sizeof(TLMultiLineEditableTextBox_GetCurrentCursorLine) == 0x000004, "Wrong size on TLMultiLineEditableTextBox_GetCurrentCursorLine");
static_assert(offsetof(TLMultiLineEditableTextBox_GetCurrentCursorLine, ReturnValue) == 0x000000, "Member 'TLMultiLineEditableTextBox_GetCurrentCursorLine::ReturnValue' has a wrong offset!");

// Function TLUI.TLMultiLineEditableTextBox.GetCurrentLineCount
// 0x0004 (0x0004 - 0x0000)
struct TLMultiLineEditableTextBox_GetCurrentLineCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMultiLineEditableTextBox_GetCurrentLineCount) == 0x000004, "Wrong alignment on TLMultiLineEditableTextBox_GetCurrentLineCount");
static_assert(sizeof(TLMultiLineEditableTextBox_GetCurrentLineCount) == 0x000004, "Wrong size on TLMultiLineEditableTextBox_GetCurrentLineCount");
static_assert(offsetof(TLMultiLineEditableTextBox_GetCurrentLineCount, ReturnValue) == 0x000000, "Member 'TLMultiLineEditableTextBox_GetCurrentLineCount::ReturnValue' has a wrong offset!");

// DelegateFunction TLUI.TLMultiLineEditableTextBox.OnEditableTextFocusLostEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct TLMultiLineEditableTextBox_OnEditableTextFocusLostEvent__DelegateSignature final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMultiLineEditableTextBox_OnEditableTextFocusLostEvent__DelegateSignature) == 0x000004, "Wrong alignment on TLMultiLineEditableTextBox_OnEditableTextFocusLostEvent__DelegateSignature");
static_assert(sizeof(TLMultiLineEditableTextBox_OnEditableTextFocusLostEvent__DelegateSignature) == 0x000008, "Wrong size on TLMultiLineEditableTextBox_OnEditableTextFocusLostEvent__DelegateSignature");
static_assert(offsetof(TLMultiLineEditableTextBox_OnEditableTextFocusLostEvent__DelegateSignature, InFocusEvent) == 0x000000, "Member 'TLMultiLineEditableTextBox_OnEditableTextFocusLostEvent__DelegateSignature::InFocusEvent' has a wrong offset!");

// DelegateFunction TLUI.TLMultiLineEditableTextBox.OnEditableTextFocusReceivedEvent__DelegateSignature
// 0x0040 (0x0040 - 0x0000)
struct TLMultiLineEditableTextBox_OnEditableTextFocusReceivedEvent__DelegateSignature final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMultiLineEditableTextBox_OnEditableTextFocusReceivedEvent__DelegateSignature) == 0x000004, "Wrong alignment on TLMultiLineEditableTextBox_OnEditableTextFocusReceivedEvent__DelegateSignature");
static_assert(sizeof(TLMultiLineEditableTextBox_OnEditableTextFocusReceivedEvent__DelegateSignature) == 0x000040, "Wrong size on TLMultiLineEditableTextBox_OnEditableTextFocusReceivedEvent__DelegateSignature");
static_assert(offsetof(TLMultiLineEditableTextBox_OnEditableTextFocusReceivedEvent__DelegateSignature, MyGeometry) == 0x000000, "Member 'TLMultiLineEditableTextBox_OnEditableTextFocusReceivedEvent__DelegateSignature::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLMultiLineEditableTextBox_OnEditableTextFocusReceivedEvent__DelegateSignature, InFocusEvent) == 0x000038, "Member 'TLMultiLineEditableTextBox_OnEditableTextFocusReceivedEvent__DelegateSignature::InFocusEvent' has a wrong offset!");

// DelegateFunction TLUI.TLMultiLineEditableTextBox.OnEditableTextMouseButtonDownEvent__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct TLMultiLineEditableTextBox_OnEditableTextMouseButtonDownEvent__DelegateSignature final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMultiLineEditableTextBox_OnEditableTextMouseButtonDownEvent__DelegateSignature) == 0x000008, "Wrong alignment on TLMultiLineEditableTextBox_OnEditableTextMouseButtonDownEvent__DelegateSignature");
static_assert(sizeof(TLMultiLineEditableTextBox_OnEditableTextMouseButtonDownEvent__DelegateSignature) == 0x0000A8, "Wrong size on TLMultiLineEditableTextBox_OnEditableTextMouseButtonDownEvent__DelegateSignature");
static_assert(offsetof(TLMultiLineEditableTextBox_OnEditableTextMouseButtonDownEvent__DelegateSignature, MyGeometry) == 0x000000, "Member 'TLMultiLineEditableTextBox_OnEditableTextMouseButtonDownEvent__DelegateSignature::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLMultiLineEditableTextBox_OnEditableTextMouseButtonDownEvent__DelegateSignature, InMouseEvent) == 0x000038, "Member 'TLMultiLineEditableTextBox_OnEditableTextMouseButtonDownEvent__DelegateSignature::InMouseEvent' has a wrong offset!");

// DelegateFunction TLUI.TLMultiLineEditableTextBox.OnMultiLineEditableTextBoxChangedEvent__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct TLMultiLineEditableTextBox_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature final
{
public:
	class FText                                   Text_0;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMultiLineEditableTextBox_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature) == 0x000008, "Wrong alignment on TLMultiLineEditableTextBox_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature");
static_assert(sizeof(TLMultiLineEditableTextBox_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature) == 0x000018, "Wrong size on TLMultiLineEditableTextBox_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature");
static_assert(offsetof(TLMultiLineEditableTextBox_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature, Text_0) == 0x000000, "Member 'TLMultiLineEditableTextBox_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature::Text_0' has a wrong offset!");

// DelegateFunction TLUI.TLMultiLineEditableTextBox.OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct TLMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature final
{
public:
	class FText                                   Text_0;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature) == 0x000008, "Wrong alignment on TLMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature");
static_assert(sizeof(TLMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature) == 0x000020, "Wrong size on TLMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature");
static_assert(offsetof(TLMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature, Text_0) == 0x000000, "Member 'TLMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature::Text_0' has a wrong offset!");
static_assert(offsetof(TLMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature, CommitMethod) == 0x000018, "Member 'TLMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature::CommitMethod' has a wrong offset!");

// Function TLUI.TLMultiLineEditableTextBox.SetError
// 0x0018 (0x0018 - 0x0000)
struct TLMultiLineEditableTextBox_SetError final
{
public:
	class FText                                   InError;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMultiLineEditableTextBox_SetError) == 0x000008, "Wrong alignment on TLMultiLineEditableTextBox_SetError");
static_assert(sizeof(TLMultiLineEditableTextBox_SetError) == 0x000018, "Wrong size on TLMultiLineEditableTextBox_SetError");
static_assert(offsetof(TLMultiLineEditableTextBox_SetError, InError) == 0x000000, "Member 'TLMultiLineEditableTextBox_SetError::InError' has a wrong offset!");

// Function TLUI.TLMultiLineEditableTextBox.SetHintText
// 0x0018 (0x0018 - 0x0000)
struct TLMultiLineEditableTextBox_SetHintText final
{
public:
	class FText                                   InHintText;                                        // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMultiLineEditableTextBox_SetHintText) == 0x000008, "Wrong alignment on TLMultiLineEditableTextBox_SetHintText");
static_assert(sizeof(TLMultiLineEditableTextBox_SetHintText) == 0x000018, "Wrong size on TLMultiLineEditableTextBox_SetHintText");
static_assert(offsetof(TLMultiLineEditableTextBox_SetHintText, InHintText) == 0x000000, "Member 'TLMultiLineEditableTextBox_SetHintText::InHintText' has a wrong offset!");

// Function TLUI.TLMultiLineEditableTextBox.SetIsReadOnly
// 0x0001 (0x0001 - 0x0000)
struct TLMultiLineEditableTextBox_SetIsReadOnly final
{
public:
	bool                                          bReadOnly;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMultiLineEditableTextBox_SetIsReadOnly) == 0x000001, "Wrong alignment on TLMultiLineEditableTextBox_SetIsReadOnly");
static_assert(sizeof(TLMultiLineEditableTextBox_SetIsReadOnly) == 0x000001, "Wrong size on TLMultiLineEditableTextBox_SetIsReadOnly");
static_assert(offsetof(TLMultiLineEditableTextBox_SetIsReadOnly, bReadOnly) == 0x000000, "Member 'TLMultiLineEditableTextBox_SetIsReadOnly::bReadOnly' has a wrong offset!");

// Function TLUI.TLMultiLineEditableTextBox.SetMaxChar
// 0x0004 (0x0004 - 0x0000)
struct TLMultiLineEditableTextBox_SetMaxChar final
{
public:
	int32                                         InMaxChar;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMultiLineEditableTextBox_SetMaxChar) == 0x000004, "Wrong alignment on TLMultiLineEditableTextBox_SetMaxChar");
static_assert(sizeof(TLMultiLineEditableTextBox_SetMaxChar) == 0x000004, "Wrong size on TLMultiLineEditableTextBox_SetMaxChar");
static_assert(offsetof(TLMultiLineEditableTextBox_SetMaxChar, InMaxChar) == 0x000000, "Member 'TLMultiLineEditableTextBox_SetMaxChar::InMaxChar' has a wrong offset!");

// Function TLUI.TLMultiLineEditableTextBox.SetText
// 0x0018 (0x0018 - 0x0000)
struct TLMultiLineEditableTextBox_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMultiLineEditableTextBox_SetText) == 0x000008, "Wrong alignment on TLMultiLineEditableTextBox_SetText");
static_assert(sizeof(TLMultiLineEditableTextBox_SetText) == 0x000018, "Wrong size on TLMultiLineEditableTextBox_SetText");
static_assert(offsetof(TLMultiLineEditableTextBox_SetText, InText) == 0x000000, "Member 'TLMultiLineEditableTextBox_SetText::InText' has a wrong offset!");

// Function TLUI.TLMultiLineEditableTextBox.SetTextStyle
// 0x0208 (0x0208 - 0x0000)
struct TLMultiLineEditableTextBox_SetTextStyle final
{
public:
	struct FTextBlockStyleTL                      InTextStyle;                                       // 0x0000(0x0208)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMultiLineEditableTextBox_SetTextStyle) == 0x000008, "Wrong alignment on TLMultiLineEditableTextBox_SetTextStyle");
static_assert(sizeof(TLMultiLineEditableTextBox_SetTextStyle) == 0x000208, "Wrong size on TLMultiLineEditableTextBox_SetTextStyle");
static_assert(offsetof(TLMultiLineEditableTextBox_SetTextStyle, InTextStyle) == 0x000000, "Member 'TLMultiLineEditableTextBox_SetTextStyle::InTextStyle' has a wrong offset!");

// Function TLUI.TLMultiLineEditableTextBox.GetHintText
// 0x0018 (0x0018 - 0x0000)
struct TLMultiLineEditableTextBox_GetHintText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMultiLineEditableTextBox_GetHintText) == 0x000008, "Wrong alignment on TLMultiLineEditableTextBox_GetHintText");
static_assert(sizeof(TLMultiLineEditableTextBox_GetHintText) == 0x000018, "Wrong size on TLMultiLineEditableTextBox_GetHintText");
static_assert(offsetof(TLMultiLineEditableTextBox_GetHintText, ReturnValue) == 0x000000, "Member 'TLMultiLineEditableTextBox_GetHintText::ReturnValue' has a wrong offset!");

// Function TLUI.TLMultiLineEditableTextBox.GetText
// 0x0018 (0x0018 - 0x0000)
struct TLMultiLineEditableTextBox_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMultiLineEditableTextBox_GetText) == 0x000008, "Wrong alignment on TLMultiLineEditableTextBox_GetText");
static_assert(sizeof(TLMultiLineEditableTextBox_GetText) == 0x000018, "Wrong size on TLMultiLineEditableTextBox_GetText");
static_assert(offsetof(TLMultiLineEditableTextBox_GetText, ReturnValue) == 0x000000, "Member 'TLMultiLineEditableTextBox_GetText::ReturnValue' has a wrong offset!");

// Function TLUI.TLProgressBar.AddSubProgressBar
// 0x0008 (0x0008 - 0x0000)
struct TLProgressBar_AddSubProgressBar final
{
public:
	class UTLProgressBar*                         InSubProgressBar;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLProgressBar_AddSubProgressBar) == 0x000008, "Wrong alignment on TLProgressBar_AddSubProgressBar");
static_assert(sizeof(TLProgressBar_AddSubProgressBar) == 0x000008, "Wrong size on TLProgressBar_AddSubProgressBar");
static_assert(offsetof(TLProgressBar_AddSubProgressBar, InSubProgressBar) == 0x000000, "Member 'TLProgressBar_AddSubProgressBar::InSubProgressBar' has a wrong offset!");

// Function TLUI.TLProgressBar.GetFillImageDynamicMaterial
// 0x0008 (0x0008 - 0x0000)
struct TLProgressBar_GetFillImageDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLProgressBar_GetFillImageDynamicMaterial) == 0x000008, "Wrong alignment on TLProgressBar_GetFillImageDynamicMaterial");
static_assert(sizeof(TLProgressBar_GetFillImageDynamicMaterial) == 0x000008, "Wrong size on TLProgressBar_GetFillImageDynamicMaterial");
static_assert(offsetof(TLProgressBar_GetFillImageDynamicMaterial, ReturnValue) == 0x000000, "Member 'TLProgressBar_GetFillImageDynamicMaterial::ReturnValue' has a wrong offset!");

// Function TLUI.TLProgressBar.PlayAfterImageWithDuration
// 0x0004 (0x0004 - 0x0000)
struct TLProgressBar_PlayAfterImageWithDuration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLProgressBar_PlayAfterImageWithDuration) == 0x000004, "Wrong alignment on TLProgressBar_PlayAfterImageWithDuration");
static_assert(sizeof(TLProgressBar_PlayAfterImageWithDuration) == 0x000004, "Wrong size on TLProgressBar_PlayAfterImageWithDuration");
static_assert(offsetof(TLProgressBar_PlayAfterImageWithDuration, Duration) == 0x000000, "Member 'TLProgressBar_PlayAfterImageWithDuration::Duration' has a wrong offset!");

// Function TLUI.TLProgressBar.PlayWithDuration
// 0x0004 (0x0004 - 0x0000)
struct TLProgressBar_PlayWithDuration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLProgressBar_PlayWithDuration) == 0x000004, "Wrong alignment on TLProgressBar_PlayWithDuration");
static_assert(sizeof(TLProgressBar_PlayWithDuration) == 0x000004, "Wrong size on TLProgressBar_PlayWithDuration");
static_assert(offsetof(TLProgressBar_PlayWithDuration, Duration) == 0x000000, "Member 'TLProgressBar_PlayWithDuration::Duration' has a wrong offset!");

// Function TLUI.TLProgressBar.SetAfterImageBar
// 0x0008 (0x0008 - 0x0000)
struct TLProgressBar_SetAfterImageBar final
{
public:
	class UTLProgressBar*                         InAfterImageBar;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLProgressBar_SetAfterImageBar) == 0x000008, "Wrong alignment on TLProgressBar_SetAfterImageBar");
static_assert(sizeof(TLProgressBar_SetAfterImageBar) == 0x000008, "Wrong size on TLProgressBar_SetAfterImageBar");
static_assert(offsetof(TLProgressBar_SetAfterImageBar, InAfterImageBar) == 0x000000, "Member 'TLProgressBar_SetAfterImageBar::InAfterImageBar' has a wrong offset!");

// Function TLUI.TLProgressBar.SetCurrentPercent
// 0x0004 (0x0004 - 0x0000)
struct TLProgressBar_SetCurrentPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLProgressBar_SetCurrentPercent) == 0x000004, "Wrong alignment on TLProgressBar_SetCurrentPercent");
static_assert(sizeof(TLProgressBar_SetCurrentPercent) == 0x000004, "Wrong size on TLProgressBar_SetCurrentPercent");
static_assert(offsetof(TLProgressBar_SetCurrentPercent, InPercent) == 0x000000, "Member 'TLProgressBar_SetCurrentPercent::InPercent' has a wrong offset!");

// Function TLUI.TLProgressBar.SetCurveGraph
// 0x0008 (0x0008 - 0x0000)
struct TLProgressBar_SetCurveGraph final
{
public:
	class UCurveFloat*                            InCurve;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLProgressBar_SetCurveGraph) == 0x000008, "Wrong alignment on TLProgressBar_SetCurveGraph");
static_assert(sizeof(TLProgressBar_SetCurveGraph) == 0x000008, "Wrong size on TLProgressBar_SetCurveGraph");
static_assert(offsetof(TLProgressBar_SetCurveGraph, InCurve) == 0x000000, "Member 'TLProgressBar_SetCurveGraph::InCurve' has a wrong offset!");

// Function TLUI.TLProgressBar.SetDecreaseDuration
// 0x0004 (0x0004 - 0x0000)
struct TLProgressBar_SetDecreaseDuration final
{
public:
	float                                         InDurationSec;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLProgressBar_SetDecreaseDuration) == 0x000004, "Wrong alignment on TLProgressBar_SetDecreaseDuration");
static_assert(sizeof(TLProgressBar_SetDecreaseDuration) == 0x000004, "Wrong size on TLProgressBar_SetDecreaseDuration");
static_assert(offsetof(TLProgressBar_SetDecreaseDuration, InDurationSec) == 0x000000, "Member 'TLProgressBar_SetDecreaseDuration::InDurationSec' has a wrong offset!");

// Function TLUI.TLProgressBar.SetEdgeImage
// 0x0008 (0x0008 - 0x0000)
struct TLProgressBar_SetEdgeImage final
{
public:
	class UWidget*                                InEdgeImage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLProgressBar_SetEdgeImage) == 0x000008, "Wrong alignment on TLProgressBar_SetEdgeImage");
static_assert(sizeof(TLProgressBar_SetEdgeImage) == 0x000008, "Wrong size on TLProgressBar_SetEdgeImage");
static_assert(offsetof(TLProgressBar_SetEdgeImage, InEdgeImage) == 0x000000, "Member 'TLProgressBar_SetEdgeImage::InEdgeImage' has a wrong offset!");

// Function TLUI.TLProgressBar.SetFillImageBrush
// 0x0008 (0x0008 - 0x0000)
struct TLProgressBar_SetFillImageBrush final
{
public:
	class UObject*                                ResourceObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLProgressBar_SetFillImageBrush) == 0x000008, "Wrong alignment on TLProgressBar_SetFillImageBrush");
static_assert(sizeof(TLProgressBar_SetFillImageBrush) == 0x000008, "Wrong size on TLProgressBar_SetFillImageBrush");
static_assert(offsetof(TLProgressBar_SetFillImageBrush, ResourceObject) == 0x000000, "Member 'TLProgressBar_SetFillImageBrush::ResourceObject' has a wrong offset!");

// Function TLUI.TLProgressBar.SetHeadImage
// 0x0008 (0x0008 - 0x0000)
struct TLProgressBar_SetHeadImage final
{
public:
	class UTLImage*                               InHeadImage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLProgressBar_SetHeadImage) == 0x000008, "Wrong alignment on TLProgressBar_SetHeadImage");
static_assert(sizeof(TLProgressBar_SetHeadImage) == 0x000008, "Wrong size on TLProgressBar_SetHeadImage");
static_assert(offsetof(TLProgressBar_SetHeadImage, InHeadImage) == 0x000000, "Member 'TLProgressBar_SetHeadImage::InHeadImage' has a wrong offset!");

// Function TLUI.TLProgressBar.SetIncreaseDuration
// 0x0004 (0x0004 - 0x0000)
struct TLProgressBar_SetIncreaseDuration final
{
public:
	float                                         InDurationSec;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLProgressBar_SetIncreaseDuration) == 0x000004, "Wrong alignment on TLProgressBar_SetIncreaseDuration");
static_assert(sizeof(TLProgressBar_SetIncreaseDuration) == 0x000004, "Wrong size on TLProgressBar_SetIncreaseDuration");
static_assert(offsetof(TLProgressBar_SetIncreaseDuration, InDurationSec) == 0x000000, "Member 'TLProgressBar_SetIncreaseDuration::InDurationSec' has a wrong offset!");

// Function TLUI.TLProgressBar.SetPercentMaterial
// 0x0008 (0x0008 - 0x0000)
struct TLProgressBar_SetPercentMaterial final
{
public:
	class UMaterial*                              InPercentMaterial;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLProgressBar_SetPercentMaterial) == 0x000008, "Wrong alignment on TLProgressBar_SetPercentMaterial");
static_assert(sizeof(TLProgressBar_SetPercentMaterial) == 0x000008, "Wrong size on TLProgressBar_SetPercentMaterial");
static_assert(offsetof(TLProgressBar_SetPercentMaterial, InPercentMaterial) == 0x000000, "Member 'TLProgressBar_SetPercentMaterial::InPercentMaterial' has a wrong offset!");

// Function TLUI.TLProgressBar.SetSubPercent
// 0x0004 (0x0004 - 0x0000)
struct TLProgressBar_SetSubPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLProgressBar_SetSubPercent) == 0x000004, "Wrong alignment on TLProgressBar_SetSubPercent");
static_assert(sizeof(TLProgressBar_SetSubPercent) == 0x000004, "Wrong size on TLProgressBar_SetSubPercent");
static_assert(offsetof(TLProgressBar_SetSubPercent, InPercent) == 0x000000, "Member 'TLProgressBar_SetSubPercent::InPercent' has a wrong offset!");

// Function TLUI.TLProgressBar.SetTargetPercent
// 0x0004 (0x0004 - 0x0000)
struct TLProgressBar_SetTargetPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLProgressBar_SetTargetPercent) == 0x000004, "Wrong alignment on TLProgressBar_SetTargetPercent");
static_assert(sizeof(TLProgressBar_SetTargetPercent) == 0x000004, "Wrong size on TLProgressBar_SetTargetPercent");
static_assert(offsetof(TLProgressBar_SetTargetPercent, InPercent) == 0x000000, "Member 'TLProgressBar_SetTargetPercent::InPercent' has a wrong offset!");

// Function TLUI.TLProgressBar.GetDurationSec
// 0x0004 (0x0004 - 0x0000)
struct TLProgressBar_GetDurationSec final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLProgressBar_GetDurationSec) == 0x000004, "Wrong alignment on TLProgressBar_GetDurationSec");
static_assert(sizeof(TLProgressBar_GetDurationSec) == 0x000004, "Wrong size on TLProgressBar_GetDurationSec");
static_assert(offsetof(TLProgressBar_GetDurationSec, ReturnValue) == 0x000000, "Member 'TLProgressBar_GetDurationSec::ReturnValue' has a wrong offset!");

// Function TLUI.TLProgressBar.GetRemainSec
// 0x0004 (0x0004 - 0x0000)
struct TLProgressBar_GetRemainSec final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLProgressBar_GetRemainSec) == 0x000004, "Wrong alignment on TLProgressBar_GetRemainSec");
static_assert(sizeof(TLProgressBar_GetRemainSec) == 0x000004, "Wrong size on TLProgressBar_GetRemainSec");
static_assert(offsetof(TLProgressBar_GetRemainSec, ReturnValue) == 0x000000, "Member 'TLProgressBar_GetRemainSec::ReturnValue' has a wrong offset!");

// Function TLUI.TLRadarChart.SetValueLayerOutLineColor
// 0x0014 (0x0014 - 0x0000)
struct TLRadarChart_SetValueLayerOutLineColor final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InColor;                                           // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLRadarChart_SetValueLayerOutLineColor) == 0x000004, "Wrong alignment on TLRadarChart_SetValueLayerOutLineColor");
static_assert(sizeof(TLRadarChart_SetValueLayerOutLineColor) == 0x000014, "Wrong size on TLRadarChart_SetValueLayerOutLineColor");
static_assert(offsetof(TLRadarChart_SetValueLayerOutLineColor, InIndex) == 0x000000, "Member 'TLRadarChart_SetValueLayerOutLineColor::InIndex' has a wrong offset!");
static_assert(offsetof(TLRadarChart_SetValueLayerOutLineColor, InColor) == 0x000004, "Member 'TLRadarChart_SetValueLayerOutLineColor::InColor' has a wrong offset!");

// Function TLUI.TLRadarChart.SetValueLayerOutLineThinckness
// 0x0008 (0x0008 - 0x0000)
struct TLRadarChart_SetValueLayerOutLineThinckness final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLRadarChart_SetValueLayerOutLineThinckness) == 0x000004, "Wrong alignment on TLRadarChart_SetValueLayerOutLineThinckness");
static_assert(sizeof(TLRadarChart_SetValueLayerOutLineThinckness) == 0x000008, "Wrong size on TLRadarChart_SetValueLayerOutLineThinckness");
static_assert(offsetof(TLRadarChart_SetValueLayerOutLineThinckness, InIndex) == 0x000000, "Member 'TLRadarChart_SetValueLayerOutLineThinckness::InIndex' has a wrong offset!");
static_assert(offsetof(TLRadarChart_SetValueLayerOutLineThinckness, InValue) == 0x000004, "Member 'TLRadarChart_SetValueLayerOutLineThinckness::InValue' has a wrong offset!");

// Function TLUI.TLRadarChart.SetValueLayerShapeColor
// 0x0014 (0x0014 - 0x0000)
struct TLRadarChart_SetValueLayerShapeColor final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InColor;                                           // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLRadarChart_SetValueLayerShapeColor) == 0x000004, "Wrong alignment on TLRadarChart_SetValueLayerShapeColor");
static_assert(sizeof(TLRadarChart_SetValueLayerShapeColor) == 0x000014, "Wrong size on TLRadarChart_SetValueLayerShapeColor");
static_assert(offsetof(TLRadarChart_SetValueLayerShapeColor, InIndex) == 0x000000, "Member 'TLRadarChart_SetValueLayerShapeColor::InIndex' has a wrong offset!");
static_assert(offsetof(TLRadarChart_SetValueLayerShapeColor, InColor) == 0x000004, "Member 'TLRadarChart_SetValueLayerShapeColor::InColor' has a wrong offset!");

// Function TLUI.TLRadioButton.SetButton
// 0x0001 (0x0001 - 0x0000)
struct TLRadioButton_SetButton final
{
public:
	bool                                          IsChecked_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLRadioButton_SetButton) == 0x000001, "Wrong alignment on TLRadioButton_SetButton");
static_assert(sizeof(TLRadioButton_SetButton) == 0x000001, "Wrong size on TLRadioButton_SetButton");
static_assert(offsetof(TLRadioButton_SetButton, IsChecked_0) == 0x000000, "Member 'TLRadioButton_SetButton::IsChecked_0' has a wrong offset!");

// DelegateFunction TLUI.TLSlider2D.GetVector2D__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct TLSlider2D_GetVector2D__DelegateSignature final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSlider2D_GetVector2D__DelegateSignature) == 0x000004, "Wrong alignment on TLSlider2D_GetVector2D__DelegateSignature");
static_assert(sizeof(TLSlider2D_GetVector2D__DelegateSignature) == 0x000008, "Wrong size on TLSlider2D_GetVector2D__DelegateSignature");
static_assert(offsetof(TLSlider2D_GetVector2D__DelegateSignature, ReturnValue) == 0x000000, "Member 'TLSlider2D_GetVector2D__DelegateSignature::ReturnValue' has a wrong offset!");

// Function TLUI.TLSlider2D.SetIndentHandle
// 0x0001 (0x0001 - 0x0000)
struct TLSlider2D_SetIndentHandle final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSlider2D_SetIndentHandle) == 0x000001, "Wrong alignment on TLSlider2D_SetIndentHandle");
static_assert(sizeof(TLSlider2D_SetIndentHandle) == 0x000001, "Wrong size on TLSlider2D_SetIndentHandle");
static_assert(offsetof(TLSlider2D_SetIndentHandle, InValue) == 0x000000, "Member 'TLSlider2D_SetIndentHandle::InValue' has a wrong offset!");

// Function TLUI.TLSlider2D.SetLocked
// 0x0001 (0x0001 - 0x0000)
struct TLSlider2D_SetLocked final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSlider2D_SetLocked) == 0x000001, "Wrong alignment on TLSlider2D_SetLocked");
static_assert(sizeof(TLSlider2D_SetLocked) == 0x000001, "Wrong size on TLSlider2D_SetLocked");
static_assert(offsetof(TLSlider2D_SetLocked, InValue) == 0x000000, "Member 'TLSlider2D_SetLocked::InValue' has a wrong offset!");

// Function TLUI.TLSlider2D.SetMouseUsesStep
// 0x0001 (0x0001 - 0x0000)
struct TLSlider2D_SetMouseUsesStep final
{
public:
	bool                                          InMouseUsesStep;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSlider2D_SetMouseUsesStep) == 0x000001, "Wrong alignment on TLSlider2D_SetMouseUsesStep");
static_assert(sizeof(TLSlider2D_SetMouseUsesStep) == 0x000001, "Wrong size on TLSlider2D_SetMouseUsesStep");
static_assert(offsetof(TLSlider2D_SetMouseUsesStep, InMouseUsesStep) == 0x000000, "Member 'TLSlider2D_SetMouseUsesStep::InMouseUsesStep' has a wrong offset!");

// Function TLUI.TLSlider2D.SetOnlyPositive
// 0x0001 (0x0001 - 0x0000)
struct TLSlider2D_SetOnlyPositive final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSlider2D_SetOnlyPositive) == 0x000001, "Wrong alignment on TLSlider2D_SetOnlyPositive");
static_assert(sizeof(TLSlider2D_SetOnlyPositive) == 0x000001, "Wrong size on TLSlider2D_SetOnlyPositive");
static_assert(offsetof(TLSlider2D_SetOnlyPositive, InValue) == 0x000000, "Member 'TLSlider2D_SetOnlyPositive::InValue' has a wrong offset!");

// Function TLUI.TLSlider2D.SetRequiresControllerLock
// 0x0001 (0x0001 - 0x0000)
struct TLSlider2D_SetRequiresControllerLock final
{
public:
	bool                                          InRequiresControllerLock;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSlider2D_SetRequiresControllerLock) == 0x000001, "Wrong alignment on TLSlider2D_SetRequiresControllerLock");
static_assert(sizeof(TLSlider2D_SetRequiresControllerLock) == 0x000001, "Wrong size on TLSlider2D_SetRequiresControllerLock");
static_assert(offsetof(TLSlider2D_SetRequiresControllerLock, InRequiresControllerLock) == 0x000000, "Member 'TLSlider2D_SetRequiresControllerLock::InRequiresControllerLock' has a wrong offset!");

// Function TLUI.TLSlider2D.SetSliderBarColor
// 0x0010 (0x0010 - 0x0000)
struct TLSlider2D_SetSliderBarColor final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSlider2D_SetSliderBarColor) == 0x000004, "Wrong alignment on TLSlider2D_SetSliderBarColor");
static_assert(sizeof(TLSlider2D_SetSliderBarColor) == 0x000010, "Wrong size on TLSlider2D_SetSliderBarColor");
static_assert(offsetof(TLSlider2D_SetSliderBarColor, InValue) == 0x000000, "Member 'TLSlider2D_SetSliderBarColor::InValue' has a wrong offset!");

// Function TLUI.TLSlider2D.SetSliderHandleColor
// 0x0010 (0x0010 - 0x0000)
struct TLSlider2D_SetSliderHandleColor final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSlider2D_SetSliderHandleColor) == 0x000004, "Wrong alignment on TLSlider2D_SetSliderHandleColor");
static_assert(sizeof(TLSlider2D_SetSliderHandleColor) == 0x000010, "Wrong size on TLSlider2D_SetSliderHandleColor");
static_assert(offsetof(TLSlider2D_SetSliderHandleColor, InValue) == 0x000000, "Member 'TLSlider2D_SetSliderHandleColor::InValue' has a wrong offset!");

// Function TLUI.TLSlider2D.SetStepSize
// 0x0004 (0x0004 - 0x0000)
struct TLSlider2D_SetStepSize final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSlider2D_SetStepSize) == 0x000004, "Wrong alignment on TLSlider2D_SetStepSize");
static_assert(sizeof(TLSlider2D_SetStepSize) == 0x000004, "Wrong size on TLSlider2D_SetStepSize");
static_assert(offsetof(TLSlider2D_SetStepSize, InValue) == 0x000000, "Member 'TLSlider2D_SetStepSize::InValue' has a wrong offset!");

// Function TLUI.TLSlider2D.SetValue
// 0x0008 (0x0008 - 0x0000)
struct TLSlider2D_SetValue final
{
public:
	struct FVector2D                              InValue;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSlider2D_SetValue) == 0x000004, "Wrong alignment on TLSlider2D_SetValue");
static_assert(sizeof(TLSlider2D_SetValue) == 0x000008, "Wrong size on TLSlider2D_SetValue");
static_assert(offsetof(TLSlider2D_SetValue, InValue) == 0x000000, "Member 'TLSlider2D_SetValue::InValue' has a wrong offset!");

// Function TLUI.TLSlider2D.GetValue
// 0x0008 (0x0008 - 0x0000)
struct TLSlider2D_GetValue final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSlider2D_GetValue) == 0x000004, "Wrong alignment on TLSlider2D_GetValue");
static_assert(sizeof(TLSlider2D_GetValue) == 0x000008, "Wrong size on TLSlider2D_GetValue");
static_assert(offsetof(TLSlider2D_GetValue, ReturnValue) == 0x000000, "Member 'TLSlider2D_GetValue::ReturnValue' has a wrong offset!");

// DelegateFunction TLUI.TLTabButton.GetPanelWidget__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct TLTabButton_GetPanelWidget__DelegateSignature final
{
public:
	class UPanelWidget*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTabButton_GetPanelWidget__DelegateSignature) == 0x000008, "Wrong alignment on TLTabButton_GetPanelWidget__DelegateSignature");
static_assert(sizeof(TLTabButton_GetPanelWidget__DelegateSignature) == 0x000008, "Wrong size on TLTabButton_GetPanelWidget__DelegateSignature");
static_assert(offsetof(TLTabButton_GetPanelWidget__DelegateSignature, ReturnValue) == 0x000000, "Member 'TLTabButton_GetPanelWidget__DelegateSignature::ReturnValue' has a wrong offset!");

// DelegateFunction TLUI.TLTabButton.GetTLTabContent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct TLTabButton_GetTLTabContent__DelegateSignature final
{
public:
	class UTLTabContent*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTabButton_GetTLTabContent__DelegateSignature) == 0x000008, "Wrong alignment on TLTabButton_GetTLTabContent__DelegateSignature");
static_assert(sizeof(TLTabButton_GetTLTabContent__DelegateSignature) == 0x000008, "Wrong size on TLTabButton_GetTLTabContent__DelegateSignature");
static_assert(offsetof(TLTabButton_GetTLTabContent__DelegateSignature, ReturnValue) == 0x000000, "Member 'TLTabButton_GetTLTabContent__DelegateSignature::ReturnValue' has a wrong offset!");

// DelegateFunction TLUI.TLTabButton.GetWidgetAnimation__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct TLTabButton_GetWidgetAnimation__DelegateSignature final
{
public:
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTabButton_GetWidgetAnimation__DelegateSignature) == 0x000008, "Wrong alignment on TLTabButton_GetWidgetAnimation__DelegateSignature");
static_assert(sizeof(TLTabButton_GetWidgetAnimation__DelegateSignature) == 0x000008, "Wrong size on TLTabButton_GetWidgetAnimation__DelegateSignature");
static_assert(offsetof(TLTabButton_GetWidgetAnimation__DelegateSignature, ReturnValue) == 0x000000, "Member 'TLTabButton_GetWidgetAnimation__DelegateSignature::ReturnValue' has a wrong offset!");

// DelegateFunction TLUI.TLTabButton.OnSelected__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct TLTabButton_OnSelected__DelegateSignature final
{
public:
	int32                                         InTabIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTabButton_OnSelected__DelegateSignature) == 0x000004, "Wrong alignment on TLTabButton_OnSelected__DelegateSignature");
static_assert(sizeof(TLTabButton_OnSelected__DelegateSignature) == 0x000004, "Wrong size on TLTabButton_OnSelected__DelegateSignature");
static_assert(offsetof(TLTabButton_OnSelected__DelegateSignature, InTabIndex) == 0x000000, "Member 'TLTabButton_OnSelected__DelegateSignature::InTabIndex' has a wrong offset!");

// DelegateFunction TLUI.TLTabButton.OnUnselected__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct TLTabButton_OnUnselected__DelegateSignature final
{
public:
	int32                                         InTabIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTabButton_OnUnselected__DelegateSignature) == 0x000004, "Wrong alignment on TLTabButton_OnUnselected__DelegateSignature");
static_assert(sizeof(TLTabButton_OnUnselected__DelegateSignature) == 0x000004, "Wrong size on TLTabButton_OnUnselected__DelegateSignature");
static_assert(offsetof(TLTabButton_OnUnselected__DelegateSignature, InTabIndex) == 0x000000, "Member 'TLTabButton_OnUnselected__DelegateSignature::InTabIndex' has a wrong offset!");

// Function TLUI.TLTabButton.This_OnCheckBoxComponentStateChanged
// 0x0001 (0x0001 - 0x0000)
struct TLTabButton_This_OnCheckBoxComponentStateChanged final
{
public:
	bool                                          IsChecked_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTabButton_This_OnCheckBoxComponentStateChanged) == 0x000001, "Wrong alignment on TLTabButton_This_OnCheckBoxComponentStateChanged");
static_assert(sizeof(TLTabButton_This_OnCheckBoxComponentStateChanged) == 0x000001, "Wrong size on TLTabButton_This_OnCheckBoxComponentStateChanged");
static_assert(offsetof(TLTabButton_This_OnCheckBoxComponentStateChanged, IsChecked_0) == 0x000000, "Member 'TLTabButton_This_OnCheckBoxComponentStateChanged::IsChecked_0' has a wrong offset!");

// Function TLUI.TLTextBlockBase.SetAutoWrapText
// 0x0001 (0x0001 - 0x0000)
struct TLTextBlockBase_SetAutoWrapText final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTextBlockBase_SetAutoWrapText) == 0x000001, "Wrong alignment on TLTextBlockBase_SetAutoWrapText");
static_assert(sizeof(TLTextBlockBase_SetAutoWrapText) == 0x000001, "Wrong size on TLTextBlockBase_SetAutoWrapText");
static_assert(offsetof(TLTextBlockBase_SetAutoWrapText, bInValue) == 0x000000, "Member 'TLTextBlockBase_SetAutoWrapText::bInValue' has a wrong offset!");

// Function TLUI.TLTextBlockBase.SetColorAndOpacity
// 0x0028 (0x0028 - 0x0000)
struct TLTextBlockBase_SetColorAndOpacity final
{
public:
	struct FSlateColor                            InColorAndOpacity;                                 // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTextBlockBase_SetColorAndOpacity) == 0x000008, "Wrong alignment on TLTextBlockBase_SetColorAndOpacity");
static_assert(sizeof(TLTextBlockBase_SetColorAndOpacity) == 0x000028, "Wrong size on TLTextBlockBase_SetColorAndOpacity");
static_assert(offsetof(TLTextBlockBase_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'TLTextBlockBase_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function TLUI.TLTextBlockBase.SetCustomDisabledColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct TLTextBlockBase_SetCustomDisabledColorAndOpacity final
{
public:
	struct FLinearColor                           InCustomDisabledColorAndOpacity;                   // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTextBlockBase_SetCustomDisabledColorAndOpacity) == 0x000004, "Wrong alignment on TLTextBlockBase_SetCustomDisabledColorAndOpacity");
static_assert(sizeof(TLTextBlockBase_SetCustomDisabledColorAndOpacity) == 0x000010, "Wrong size on TLTextBlockBase_SetCustomDisabledColorAndOpacity");
static_assert(offsetof(TLTextBlockBase_SetCustomDisabledColorAndOpacity, InCustomDisabledColorAndOpacity) == 0x000000, "Member 'TLTextBlockBase_SetCustomDisabledColorAndOpacity::InCustomDisabledColorAndOpacity' has a wrong offset!");

// Function TLUI.TLTextBlockBase.SetFont
// 0x0058 (0x0058 - 0x0000)
struct TLTextBlockBase_SetFont final
{
public:
	struct FSlateFontInfo                         InFontInfo;                                        // 0x0000(0x0058)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTextBlockBase_SetFont) == 0x000008, "Wrong alignment on TLTextBlockBase_SetFont");
static_assert(sizeof(TLTextBlockBase_SetFont) == 0x000058, "Wrong size on TLTextBlockBase_SetFont");
static_assert(offsetof(TLTextBlockBase_SetFont, InFontInfo) == 0x000000, "Member 'TLTextBlockBase_SetFont::InFontInfo' has a wrong offset!");

// Function TLUI.TLTextBlockBase.SetLineHeightPercentage
// 0x0004 (0x0004 - 0x0000)
struct TLTextBlockBase_SetLineHeightPercentage final
{
public:
	float                                         InLineHeightPercentage;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTextBlockBase_SetLineHeightPercentage) == 0x000004, "Wrong alignment on TLTextBlockBase_SetLineHeightPercentage");
static_assert(sizeof(TLTextBlockBase_SetLineHeightPercentage) == 0x000004, "Wrong size on TLTextBlockBase_SetLineHeightPercentage");
static_assert(offsetof(TLTextBlockBase_SetLineHeightPercentage, InLineHeightPercentage) == 0x000000, "Member 'TLTextBlockBase_SetLineHeightPercentage::InLineHeightPercentage' has a wrong offset!");

// Function TLUI.TLTextBlockBase.SetMinDesiredWidth
// 0x0004 (0x0004 - 0x0000)
struct TLTextBlockBase_SetMinDesiredWidth final
{
public:
	float                                         InMinDesiredWidth;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTextBlockBase_SetMinDesiredWidth) == 0x000004, "Wrong alignment on TLTextBlockBase_SetMinDesiredWidth");
static_assert(sizeof(TLTextBlockBase_SetMinDesiredWidth) == 0x000004, "Wrong size on TLTextBlockBase_SetMinDesiredWidth");
static_assert(offsetof(TLTextBlockBase_SetMinDesiredWidth, InMinDesiredWidth) == 0x000000, "Member 'TLTextBlockBase_SetMinDesiredWidth::InMinDesiredWidth' has a wrong offset!");

// Function TLUI.TLTextBlockBase.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct TLTextBlockBase_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTextBlockBase_SetOpacity) == 0x000004, "Wrong alignment on TLTextBlockBase_SetOpacity");
static_assert(sizeof(TLTextBlockBase_SetOpacity) == 0x000004, "Wrong size on TLTextBlockBase_SetOpacity");
static_assert(offsetof(TLTextBlockBase_SetOpacity, InOpacity) == 0x000000, "Member 'TLTextBlockBase_SetOpacity::InOpacity' has a wrong offset!");

// Function TLUI.TLTextBlockBase.SetShadowColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct TLTextBlockBase_SetShadowColorAndOpacity final
{
public:
	struct FLinearColor                           InShadowColorAndOpacity;                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTextBlockBase_SetShadowColorAndOpacity) == 0x000004, "Wrong alignment on TLTextBlockBase_SetShadowColorAndOpacity");
static_assert(sizeof(TLTextBlockBase_SetShadowColorAndOpacity) == 0x000010, "Wrong size on TLTextBlockBase_SetShadowColorAndOpacity");
static_assert(offsetof(TLTextBlockBase_SetShadowColorAndOpacity, InShadowColorAndOpacity) == 0x000000, "Member 'TLTextBlockBase_SetShadowColorAndOpacity::InShadowColorAndOpacity' has a wrong offset!");

// Function TLUI.TLTextBlockBase.SetShadowOffset
// 0x0008 (0x0008 - 0x0000)
struct TLTextBlockBase_SetShadowOffset final
{
public:
	struct FVector2D                              InShadowOffset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTextBlockBase_SetShadowOffset) == 0x000004, "Wrong alignment on TLTextBlockBase_SetShadowOffset");
static_assert(sizeof(TLTextBlockBase_SetShadowOffset) == 0x000008, "Wrong size on TLTextBlockBase_SetShadowOffset");
static_assert(offsetof(TLTextBlockBase_SetShadowOffset, InShadowOffset) == 0x000000, "Member 'TLTextBlockBase_SetShadowOffset::InShadowOffset' has a wrong offset!");

// Function TLUI.TLTextBlockBase.SetText
// 0x0018 (0x0018 - 0x0000)
struct TLTextBlockBase_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTextBlockBase_SetText) == 0x000008, "Wrong alignment on TLTextBlockBase_SetText");
static_assert(sizeof(TLTextBlockBase_SetText) == 0x000018, "Wrong size on TLTextBlockBase_SetText");
static_assert(offsetof(TLTextBlockBase_SetText, InText) == 0x000000, "Member 'TLTextBlockBase_SetText::InText' has a wrong offset!");

// Function TLUI.TLTextBlockBase.SetUseCustomDisabledColor
// 0x0001 (0x0001 - 0x0000)
struct TLTextBlockBase_SetUseCustomDisabledColor final
{
public:
	bool                                          bInUseCustomDisabledColor;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTextBlockBase_SetUseCustomDisabledColor) == 0x000001, "Wrong alignment on TLTextBlockBase_SetUseCustomDisabledColor");
static_assert(sizeof(TLTextBlockBase_SetUseCustomDisabledColor) == 0x000001, "Wrong size on TLTextBlockBase_SetUseCustomDisabledColor");
static_assert(offsetof(TLTextBlockBase_SetUseCustomDisabledColor, bInUseCustomDisabledColor) == 0x000000, "Member 'TLTextBlockBase_SetUseCustomDisabledColor::bInUseCustomDisabledColor' has a wrong offset!");

// Function TLUI.TLTextBlockBase.SetUseWrapScaling
// 0x0001 (0x0001 - 0x0000)
struct TLTextBlockBase_SetUseWrapScaling final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTextBlockBase_SetUseWrapScaling) == 0x000001, "Wrong alignment on TLTextBlockBase_SetUseWrapScaling");
static_assert(sizeof(TLTextBlockBase_SetUseWrapScaling) == 0x000001, "Wrong size on TLTextBlockBase_SetUseWrapScaling");
static_assert(offsetof(TLTextBlockBase_SetUseWrapScaling, bInValue) == 0x000000, "Member 'TLTextBlockBase_SetUseWrapScaling::bInValue' has a wrong offset!");

// Function TLUI.TLTextBlockBase.SetWrapLimitOverRule
// 0x0001 (0x0001 - 0x0000)
struct TLTextBlockBase_SetWrapLimitOverRule final
{
public:
	ETLTextWrapLimitOverRule                      InWrapLimitOverRule;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTextBlockBase_SetWrapLimitOverRule) == 0x000001, "Wrong alignment on TLTextBlockBase_SetWrapLimitOverRule");
static_assert(sizeof(TLTextBlockBase_SetWrapLimitOverRule) == 0x000001, "Wrong size on TLTextBlockBase_SetWrapLimitOverRule");
static_assert(offsetof(TLTextBlockBase_SetWrapLimitOverRule, InWrapLimitOverRule) == 0x000000, "Member 'TLTextBlockBase_SetWrapLimitOverRule::InWrapLimitOverRule' has a wrong offset!");

// Function TLUI.TLTextBlockBase.SetWrapTextAt
// 0x0004 (0x0004 - 0x0000)
struct TLTextBlockBase_SetWrapTextAt final
{
public:
	float                                         InWrapText;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTextBlockBase_SetWrapTextAt) == 0x000004, "Wrong alignment on TLTextBlockBase_SetWrapTextAt");
static_assert(sizeof(TLTextBlockBase_SetWrapTextAt) == 0x000004, "Wrong size on TLTextBlockBase_SetWrapTextAt");
static_assert(offsetof(TLTextBlockBase_SetWrapTextAt, InWrapText) == 0x000000, "Member 'TLTextBlockBase_SetWrapTextAt::InWrapText' has a wrong offset!");

// Function TLUI.TLTextBlockBase.GetText
// 0x0018 (0x0018 - 0x0000)
struct TLTextBlockBase_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTextBlockBase_GetText) == 0x000008, "Wrong alignment on TLTextBlockBase_GetText");
static_assert(sizeof(TLTextBlockBase_GetText) == 0x000018, "Wrong size on TLTextBlockBase_GetText");
static_assert(offsetof(TLTextBlockBase_GetText, ReturnValue) == 0x000000, "Member 'TLTextBlockBase_GetText::ReturnValue' has a wrong offset!");

// Function TLUI.TLTextBlock.SetTextBlockStyleFromTable
// 0x0008 (0x0008 - 0x0000)
struct TLTextBlock_SetTextBlockStyleFromTable final
{
public:
	class FName                                   InTableKey;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTextBlock_SetTextBlockStyleFromTable) == 0x000004, "Wrong alignment on TLTextBlock_SetTextBlockStyleFromTable");
static_assert(sizeof(TLTextBlock_SetTextBlockStyleFromTable) == 0x000008, "Wrong size on TLTextBlock_SetTextBlockStyleFromTable");
static_assert(offsetof(TLTextBlock_SetTextBlockStyleFromTable, InTableKey) == 0x000000, "Member 'TLTextBlock_SetTextBlockStyleFromTable::InTableKey' has a wrong offset!");

// Function TLUI.TLTextBlock.SetTextBlockStylePath
// 0x0018 (0x0018 - 0x0000)
struct TLTextBlock_SetTextBlockStylePath final
{
public:
	struct FSoftObjectPath                        InTLTextBlockStylePath;                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTextBlock_SetTextBlockStylePath) == 0x000008, "Wrong alignment on TLTextBlock_SetTextBlockStylePath");
static_assert(sizeof(TLTextBlock_SetTextBlockStylePath) == 0x000018, "Wrong size on TLTextBlock_SetTextBlockStylePath");
static_assert(offsetof(TLTextBlock_SetTextBlockStylePath, InTLTextBlockStylePath) == 0x000000, "Member 'TLTextBlock_SetTextBlockStylePath::InTLTextBlockStylePath' has a wrong offset!");

// Function TLUI.TLTextBlock.SetTextColorWithColorTable
// 0x0008 (0x0008 - 0x0000)
struct TLTextBlock_SetTextColorWithColorTable final
{
public:
	class FName                                   InTableColorKey;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTextBlock_SetTextColorWithColorTable) == 0x000004, "Wrong alignment on TLTextBlock_SetTextColorWithColorTable");
static_assert(sizeof(TLTextBlock_SetTextColorWithColorTable) == 0x000008, "Wrong size on TLTextBlock_SetTextColorWithColorTable");
static_assert(offsetof(TLTextBlock_SetTextColorWithColorTable, InTableColorKey) == 0x000000, "Member 'TLTextBlock_SetTextColorWithColorTable::InTableColorKey' has a wrong offset!");

// Function TLUI.TLTiledImage.SetCullingScaleRange
// 0x0010 (0x0010 - 0x0000)
struct TLTiledImage_SetCullingScaleRange final
{
public:
	struct FFloatRange                            InCullingScaleRange;                               // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTiledImage_SetCullingScaleRange) == 0x000004, "Wrong alignment on TLTiledImage_SetCullingScaleRange");
static_assert(sizeof(TLTiledImage_SetCullingScaleRange) == 0x000010, "Wrong size on TLTiledImage_SetCullingScaleRange");
static_assert(offsetof(TLTiledImage_SetCullingScaleRange, InCullingScaleRange) == 0x000000, "Member 'TLTiledImage_SetCullingScaleRange::InCullingScaleRange' has a wrong offset!");

// Function TLUI.TLTiledImage.SetNumColumns
// 0x0004 (0x0004 - 0x0000)
struct TLTiledImage_SetNumColumns final
{
public:
	int32                                         InNumColumns;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTiledImage_SetNumColumns) == 0x000004, "Wrong alignment on TLTiledImage_SetNumColumns");
static_assert(sizeof(TLTiledImage_SetNumColumns) == 0x000004, "Wrong size on TLTiledImage_SetNumColumns");
static_assert(offsetof(TLTiledImage_SetNumColumns, InNumColumns) == 0x000000, "Member 'TLTiledImage_SetNumColumns::InNumColumns' has a wrong offset!");

// Function TLUI.TLTiledMapImage.SetParameterValue
// 0x000C (0x000C - 0x0000)
struct TLTiledMapImage_SetParameterValue final
{
public:
	class FName                                   InParamName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTiledMapImage_SetParameterValue) == 0x000004, "Wrong alignment on TLTiledMapImage_SetParameterValue");
static_assert(sizeof(TLTiledMapImage_SetParameterValue) == 0x00000C, "Wrong size on TLTiledMapImage_SetParameterValue");
static_assert(offsetof(TLTiledMapImage_SetParameterValue, InParamName) == 0x000000, "Member 'TLTiledMapImage_SetParameterValue::InParamName' has a wrong offset!");
static_assert(offsetof(TLTiledMapImage_SetParameterValue, InValue) == 0x000008, "Member 'TLTiledMapImage_SetParameterValue::InValue' has a wrong offset!");

// Function TLUI.TLWidgetBindingLibrary.AddEnabledBinding
// 0x0018 (0x0018 - 0x0000)
struct TLWidgetBindingLibrary_AddEnabledBinding final
{
public:
	class UWidget*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnyValue;                                          // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLBindingOperator                            Operator;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SourceValue;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLWidgetBindingLibrary_AddEnabledBinding) == 0x000008, "Wrong alignment on TLWidgetBindingLibrary_AddEnabledBinding");
static_assert(sizeof(TLWidgetBindingLibrary_AddEnabledBinding) == 0x000018, "Wrong size on TLWidgetBindingLibrary_AddEnabledBinding");
static_assert(offsetof(TLWidgetBindingLibrary_AddEnabledBinding, Target) == 0x000000, "Member 'TLWidgetBindingLibrary_AddEnabledBinding::Target' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddEnabledBinding, AnyValue) == 0x000008, "Member 'TLWidgetBindingLibrary_AddEnabledBinding::AnyValue' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddEnabledBinding, Operator) == 0x00000C, "Member 'TLWidgetBindingLibrary_AddEnabledBinding::Operator' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddEnabledBinding, SourceValue) == 0x000010, "Member 'TLWidgetBindingLibrary_AddEnabledBinding::SourceValue' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddEnabledBinding, ReturnValue) == 0x000014, "Member 'TLWidgetBindingLibrary_AddEnabledBinding::ReturnValue' has a wrong offset!");

// Function TLUI.TLWidgetBindingLibrary.AddImageBrushBinding
// 0x0010 (0x0010 - 0x0000)
struct TLWidgetBindingLibrary_AddImageBrushBinding final
{
public:
	class UTLImage*                               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnyValue;                                          // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetVisibleWithValue;                              // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000E(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLWidgetBindingLibrary_AddImageBrushBinding) == 0x000008, "Wrong alignment on TLWidgetBindingLibrary_AddImageBrushBinding");
static_assert(sizeof(TLWidgetBindingLibrary_AddImageBrushBinding) == 0x000010, "Wrong size on TLWidgetBindingLibrary_AddImageBrushBinding");
static_assert(offsetof(TLWidgetBindingLibrary_AddImageBrushBinding, Target) == 0x000000, "Member 'TLWidgetBindingLibrary_AddImageBrushBinding::Target' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddImageBrushBinding, AnyValue) == 0x000008, "Member 'TLWidgetBindingLibrary_AddImageBrushBinding::AnyValue' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddImageBrushBinding, bMatchSize) == 0x00000C, "Member 'TLWidgetBindingLibrary_AddImageBrushBinding::bMatchSize' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddImageBrushBinding, bSetVisibleWithValue) == 0x00000D, "Member 'TLWidgetBindingLibrary_AddImageBrushBinding::bSetVisibleWithValue' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddImageBrushBinding, ReturnValue) == 0x00000E, "Member 'TLWidgetBindingLibrary_AddImageBrushBinding::ReturnValue' has a wrong offset!");

// Function TLUI.TLWidgetBindingLibrary.AddImageColorAndOpacityBinding
// 0x0010 (0x0010 - 0x0000)
struct TLWidgetBindingLibrary_AddImageColorAndOpacityBinding final
{
public:
	class UTLImage*                               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnyValue;                                          // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLWidgetBindingLibrary_AddImageColorAndOpacityBinding) == 0x000008, "Wrong alignment on TLWidgetBindingLibrary_AddImageColorAndOpacityBinding");
static_assert(sizeof(TLWidgetBindingLibrary_AddImageColorAndOpacityBinding) == 0x000010, "Wrong size on TLWidgetBindingLibrary_AddImageColorAndOpacityBinding");
static_assert(offsetof(TLWidgetBindingLibrary_AddImageColorAndOpacityBinding, Target) == 0x000000, "Member 'TLWidgetBindingLibrary_AddImageColorAndOpacityBinding::Target' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddImageColorAndOpacityBinding, AnyValue) == 0x000008, "Member 'TLWidgetBindingLibrary_AddImageColorAndOpacityBinding::AnyValue' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddImageColorAndOpacityBinding, ReturnValue) == 0x00000C, "Member 'TLWidgetBindingLibrary_AddImageColorAndOpacityBinding::ReturnValue' has a wrong offset!");

// Function TLUI.TLWidgetBindingLibrary.AddPercentBinding
// 0x0010 (0x0010 - 0x0000)
struct TLWidgetBindingLibrary_AddPercentBinding final
{
public:
	class UTLProgressBar*                         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnyValue;                                          // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLWidgetBindingLibrary_AddPercentBinding) == 0x000008, "Wrong alignment on TLWidgetBindingLibrary_AddPercentBinding");
static_assert(sizeof(TLWidgetBindingLibrary_AddPercentBinding) == 0x000010, "Wrong size on TLWidgetBindingLibrary_AddPercentBinding");
static_assert(offsetof(TLWidgetBindingLibrary_AddPercentBinding, Target) == 0x000000, "Member 'TLWidgetBindingLibrary_AddPercentBinding::Target' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddPercentBinding, AnyValue) == 0x000008, "Member 'TLWidgetBindingLibrary_AddPercentBinding::AnyValue' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddPercentBinding, ReturnValue) == 0x00000C, "Member 'TLWidgetBindingLibrary_AddPercentBinding::ReturnValue' has a wrong offset!");

// Function TLUI.TLWidgetBindingLibrary.AddTextBinding
// 0x0010 (0x0010 - 0x0000)
struct TLWidgetBindingLibrary_AddTextBinding final
{
public:
	class UTLTextBlock*                           Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnyValue;                                          // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetVisibleWithValue;                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLWidgetBindingLibrary_AddTextBinding) == 0x000008, "Wrong alignment on TLWidgetBindingLibrary_AddTextBinding");
static_assert(sizeof(TLWidgetBindingLibrary_AddTextBinding) == 0x000010, "Wrong size on TLWidgetBindingLibrary_AddTextBinding");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextBinding, Target) == 0x000000, "Member 'TLWidgetBindingLibrary_AddTextBinding::Target' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextBinding, AnyValue) == 0x000008, "Member 'TLWidgetBindingLibrary_AddTextBinding::AnyValue' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextBinding, bSetVisibleWithValue) == 0x00000C, "Member 'TLWidgetBindingLibrary_AddTextBinding::bSetVisibleWithValue' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextBinding, ReturnValue) == 0x00000D, "Member 'TLWidgetBindingLibrary_AddTextBinding::ReturnValue' has a wrong offset!");

// Function TLUI.TLWidgetBindingLibrary.AddTextBindingFloat
// 0x0018 (0x0018 - 0x0000)
struct TLWidgetBindingLibrary_AddTextBindingFloat final
{
public:
	class UTLTextBlock*                           Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnyValue;                                          // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERoundingMode                                 RoundingMode;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FractionalDigits;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLWidgetBindingLibrary_AddTextBindingFloat) == 0x000008, "Wrong alignment on TLWidgetBindingLibrary_AddTextBindingFloat");
static_assert(sizeof(TLWidgetBindingLibrary_AddTextBindingFloat) == 0x000018, "Wrong size on TLWidgetBindingLibrary_AddTextBindingFloat");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextBindingFloat, Target) == 0x000000, "Member 'TLWidgetBindingLibrary_AddTextBindingFloat::Target' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextBindingFloat, AnyValue) == 0x000008, "Member 'TLWidgetBindingLibrary_AddTextBindingFloat::AnyValue' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextBindingFloat, RoundingMode) == 0x00000C, "Member 'TLWidgetBindingLibrary_AddTextBindingFloat::RoundingMode' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextBindingFloat, FractionalDigits) == 0x000010, "Member 'TLWidgetBindingLibrary_AddTextBindingFloat::FractionalDigits' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextBindingFloat, ReturnValue) == 0x000014, "Member 'TLWidgetBindingLibrary_AddTextBindingFloat::ReturnValue' has a wrong offset!");

// Function TLUI.TLWidgetBindingLibrary.AddTextBlockStyleFromTableBinding
// 0x0010 (0x0010 - 0x0000)
struct TLWidgetBindingLibrary_AddTextBlockStyleFromTableBinding final
{
public:
	class UTLTextBlock*                           Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnyValue;                                          // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyColor;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLWidgetBindingLibrary_AddTextBlockStyleFromTableBinding) == 0x000008, "Wrong alignment on TLWidgetBindingLibrary_AddTextBlockStyleFromTableBinding");
static_assert(sizeof(TLWidgetBindingLibrary_AddTextBlockStyleFromTableBinding) == 0x000010, "Wrong size on TLWidgetBindingLibrary_AddTextBlockStyleFromTableBinding");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextBlockStyleFromTableBinding, Target) == 0x000000, "Member 'TLWidgetBindingLibrary_AddTextBlockStyleFromTableBinding::Target' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextBlockStyleFromTableBinding, AnyValue) == 0x000008, "Member 'TLWidgetBindingLibrary_AddTextBlockStyleFromTableBinding::AnyValue' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextBlockStyleFromTableBinding, bOnlyColor) == 0x00000C, "Member 'TLWidgetBindingLibrary_AddTextBlockStyleFromTableBinding::bOnlyColor' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextBlockStyleFromTableBinding, ReturnValue) == 0x00000D, "Member 'TLWidgetBindingLibrary_AddTextBlockStyleFromTableBinding::ReturnValue' has a wrong offset!");

// Function TLUI.TLWidgetBindingLibrary.AddTextBlockStylePathBinding
// 0x0010 (0x0010 - 0x0000)
struct TLWidgetBindingLibrary_AddTextBlockStylePathBinding final
{
public:
	class UTLTextBlock*                           Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnyValue;                                          // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyColor;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLWidgetBindingLibrary_AddTextBlockStylePathBinding) == 0x000008, "Wrong alignment on TLWidgetBindingLibrary_AddTextBlockStylePathBinding");
static_assert(sizeof(TLWidgetBindingLibrary_AddTextBlockStylePathBinding) == 0x000010, "Wrong size on TLWidgetBindingLibrary_AddTextBlockStylePathBinding");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextBlockStylePathBinding, Target) == 0x000000, "Member 'TLWidgetBindingLibrary_AddTextBlockStylePathBinding::Target' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextBlockStylePathBinding, AnyValue) == 0x000008, "Member 'TLWidgetBindingLibrary_AddTextBlockStylePathBinding::AnyValue' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextBlockStylePathBinding, bOnlyColor) == 0x00000C, "Member 'TLWidgetBindingLibrary_AddTextBlockStylePathBinding::bOnlyColor' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextBlockStylePathBinding, ReturnValue) == 0x00000D, "Member 'TLWidgetBindingLibrary_AddTextBlockStylePathBinding::ReturnValue' has a wrong offset!");

// Function TLUI.TLWidgetBindingLibrary.AddTextColorAndOpacityBinding
// 0x0010 (0x0010 - 0x0000)
struct TLWidgetBindingLibrary_AddTextColorAndOpacityBinding final
{
public:
	class UTLTextBlock*                           Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnyValue;                                          // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLWidgetBindingLibrary_AddTextColorAndOpacityBinding) == 0x000008, "Wrong alignment on TLWidgetBindingLibrary_AddTextColorAndOpacityBinding");
static_assert(sizeof(TLWidgetBindingLibrary_AddTextColorAndOpacityBinding) == 0x000010, "Wrong size on TLWidgetBindingLibrary_AddTextColorAndOpacityBinding");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextColorAndOpacityBinding, Target) == 0x000000, "Member 'TLWidgetBindingLibrary_AddTextColorAndOpacityBinding::Target' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextColorAndOpacityBinding, AnyValue) == 0x000008, "Member 'TLWidgetBindingLibrary_AddTextColorAndOpacityBinding::AnyValue' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextColorAndOpacityBinding, ReturnValue) == 0x00000C, "Member 'TLWidgetBindingLibrary_AddTextColorAndOpacityBinding::ReturnValue' has a wrong offset!");

// Function TLUI.TLWidgetBindingLibrary.AddTextColorWithColorTableBinding
// 0x0010 (0x0010 - 0x0000)
struct TLWidgetBindingLibrary_AddTextColorWithColorTableBinding final
{
public:
	class UTLTextBlock*                           Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnyValue;                                          // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLWidgetBindingLibrary_AddTextColorWithColorTableBinding) == 0x000008, "Wrong alignment on TLWidgetBindingLibrary_AddTextColorWithColorTableBinding");
static_assert(sizeof(TLWidgetBindingLibrary_AddTextColorWithColorTableBinding) == 0x000010, "Wrong size on TLWidgetBindingLibrary_AddTextColorWithColorTableBinding");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextColorWithColorTableBinding, Target) == 0x000000, "Member 'TLWidgetBindingLibrary_AddTextColorWithColorTableBinding::Target' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextColorWithColorTableBinding, AnyValue) == 0x000008, "Member 'TLWidgetBindingLibrary_AddTextColorWithColorTableBinding::AnyValue' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddTextColorWithColorTableBinding, ReturnValue) == 0x00000C, "Member 'TLWidgetBindingLibrary_AddTextColorWithColorTableBinding::ReturnValue' has a wrong offset!");

// Function TLUI.TLWidgetBindingLibrary.AddVisibleBinding
// 0x0018 (0x0018 - 0x0000)
struct TLWidgetBindingLibrary_AddVisibleBinding final
{
public:
	class UWidget*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnyValue;                                          // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLBindingOperator                            Operator;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SourceValue;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLWidgetBindingLibrary_AddVisibleBinding) == 0x000008, "Wrong alignment on TLWidgetBindingLibrary_AddVisibleBinding");
static_assert(sizeof(TLWidgetBindingLibrary_AddVisibleBinding) == 0x000018, "Wrong size on TLWidgetBindingLibrary_AddVisibleBinding");
static_assert(offsetof(TLWidgetBindingLibrary_AddVisibleBinding, Target) == 0x000000, "Member 'TLWidgetBindingLibrary_AddVisibleBinding::Target' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddVisibleBinding, AnyValue) == 0x000008, "Member 'TLWidgetBindingLibrary_AddVisibleBinding::AnyValue' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddVisibleBinding, Operator) == 0x00000C, "Member 'TLWidgetBindingLibrary_AddVisibleBinding::Operator' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddVisibleBinding, SourceValue) == 0x000010, "Member 'TLWidgetBindingLibrary_AddVisibleBinding::SourceValue' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_AddVisibleBinding, ReturnValue) == 0x000014, "Member 'TLWidgetBindingLibrary_AddVisibleBinding::ReturnValue' has a wrong offset!");

// Function TLUI.TLWidgetBindingLibrary.SetOnUpdateDefault
// 0x0018 (0x0018 - 0x0000)
struct TLWidgetBindingLibrary_SetOnUpdateDefault final
{
public:
	int32                                         AnyValue;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             Event;                                             // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLWidgetBindingLibrary_SetOnUpdateDefault) == 0x000004, "Wrong alignment on TLWidgetBindingLibrary_SetOnUpdateDefault");
static_assert(sizeof(TLWidgetBindingLibrary_SetOnUpdateDefault) == 0x000018, "Wrong size on TLWidgetBindingLibrary_SetOnUpdateDefault");
static_assert(offsetof(TLWidgetBindingLibrary_SetOnUpdateDefault, AnyValue) == 0x000000, "Member 'TLWidgetBindingLibrary_SetOnUpdateDefault::AnyValue' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_SetOnUpdateDefault, Event) == 0x000004, "Member 'TLWidgetBindingLibrary_SetOnUpdateDefault::Event' has a wrong offset!");
static_assert(offsetof(TLWidgetBindingLibrary_SetOnUpdateDefault, ReturnValue) == 0x000014, "Member 'TLWidgetBindingLibrary_SetOnUpdateDefault::ReturnValue' has a wrong offset!");

// Function TLUI.TLWidgetFocusableInterface.SetTLFocusableEnable
// 0x0001 (0x0001 - 0x0000)
struct TLWidgetFocusableInterface_SetTLFocusableEnable final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWidgetFocusableInterface_SetTLFocusableEnable) == 0x000001, "Wrong alignment on TLWidgetFocusableInterface_SetTLFocusableEnable");
static_assert(sizeof(TLWidgetFocusableInterface_SetTLFocusableEnable) == 0x000001, "Wrong size on TLWidgetFocusableInterface_SetTLFocusableEnable");
static_assert(offsetof(TLWidgetFocusableInterface_SetTLFocusableEnable, bInEnable) == 0x000000, "Member 'TLWidgetFocusableInterface_SetTLFocusableEnable::bInEnable' has a wrong offset!");

// Function TLUI.TLWidgetFocusableInterface.SetTLSaveLastFocusedChild
// 0x0001 (0x0001 - 0x0000)
struct TLWidgetFocusableInterface_SetTLSaveLastFocusedChild final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWidgetFocusableInterface_SetTLSaveLastFocusedChild) == 0x000001, "Wrong alignment on TLWidgetFocusableInterface_SetTLSaveLastFocusedChild");
static_assert(sizeof(TLWidgetFocusableInterface_SetTLSaveLastFocusedChild) == 0x000001, "Wrong size on TLWidgetFocusableInterface_SetTLSaveLastFocusedChild");
static_assert(offsetof(TLWidgetFocusableInterface_SetTLSaveLastFocusedChild, bInEnable) == 0x000000, "Member 'TLWidgetFocusableInterface_SetTLSaveLastFocusedChild::bInEnable' has a wrong offset!");

// Function TLUI.TLWidgetFocusableInterface.SetTLWidgetToFocusBP
// 0x0010 (0x0010 - 0x0000)
struct TLWidgetFocusableInterface_SetTLWidgetToFocusBP final
{
public:
	TScriptInterface<class ITLWidgetFocusableInterface> WidgetPtr;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWidgetFocusableInterface_SetTLWidgetToFocusBP) == 0x000008, "Wrong alignment on TLWidgetFocusableInterface_SetTLWidgetToFocusBP");
static_assert(sizeof(TLWidgetFocusableInterface_SetTLWidgetToFocusBP) == 0x000010, "Wrong size on TLWidgetFocusableInterface_SetTLWidgetToFocusBP");
static_assert(offsetof(TLWidgetFocusableInterface_SetTLWidgetToFocusBP, WidgetPtr) == 0x000000, "Member 'TLWidgetFocusableInterface_SetTLWidgetToFocusBP::WidgetPtr' has a wrong offset!");

// Function TLUI.TLWidgetFocusableInterface.IsTLFocus
// 0x0001 (0x0001 - 0x0000)
struct TLWidgetFocusableInterface_IsTLFocus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWidgetFocusableInterface_IsTLFocus) == 0x000001, "Wrong alignment on TLWidgetFocusableInterface_IsTLFocus");
static_assert(sizeof(TLWidgetFocusableInterface_IsTLFocus) == 0x000001, "Wrong size on TLWidgetFocusableInterface_IsTLFocus");
static_assert(offsetof(TLWidgetFocusableInterface_IsTLFocus, ReturnValue) == 0x000000, "Member 'TLWidgetFocusableInterface_IsTLFocus::ReturnValue' has a wrong offset!");

// Function TLUI.TLWidgetFocusableInterface.IsTLFocusable
// 0x0001 (0x0001 - 0x0000)
struct TLWidgetFocusableInterface_IsTLFocusable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWidgetFocusableInterface_IsTLFocusable) == 0x000001, "Wrong alignment on TLWidgetFocusableInterface_IsTLFocusable");
static_assert(sizeof(TLWidgetFocusableInterface_IsTLFocusable) == 0x000001, "Wrong size on TLWidgetFocusableInterface_IsTLFocusable");
static_assert(offsetof(TLWidgetFocusableInterface_IsTLFocusable, ReturnValue) == 0x000000, "Member 'TLWidgetFocusableInterface_IsTLFocusable::ReturnValue' has a wrong offset!");

// Function TLUI.TLWidgetFocusableInterface.IsTLFocusableEnable
// 0x0001 (0x0001 - 0x0000)
struct TLWidgetFocusableInterface_IsTLFocusableEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWidgetFocusableInterface_IsTLFocusableEnable) == 0x000001, "Wrong alignment on TLWidgetFocusableInterface_IsTLFocusableEnable");
static_assert(sizeof(TLWidgetFocusableInterface_IsTLFocusableEnable) == 0x000001, "Wrong size on TLWidgetFocusableInterface_IsTLFocusableEnable");
static_assert(offsetof(TLWidgetFocusableInterface_IsTLFocusableEnable, ReturnValue) == 0x000000, "Member 'TLWidgetFocusableInterface_IsTLFocusableEnable::ReturnValue' has a wrong offset!");

// Function TLUI.TLWidgetFocusableInterface.UseTLFocusable
// 0x0001 (0x0001 - 0x0000)
struct TLWidgetFocusableInterface_UseTLFocusable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWidgetFocusableInterface_UseTLFocusable) == 0x000001, "Wrong alignment on TLWidgetFocusableInterface_UseTLFocusable");
static_assert(sizeof(TLWidgetFocusableInterface_UseTLFocusable) == 0x000001, "Wrong size on TLWidgetFocusableInterface_UseTLFocusable");
static_assert(offsetof(TLWidgetFocusableInterface_UseTLFocusable, ReturnValue) == 0x000000, "Member 'TLWidgetFocusableInterface_UseTLFocusable::ReturnValue' has a wrong offset!");

// Function TLUI.TLWidgetTooltipInterface.GetActionGuideAttachPanel
// 0x0008 (0x0008 - 0x0000)
struct TLWidgetTooltipInterface_GetActionGuideAttachPanel final
{
public:
	class UTLSizeBox*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWidgetTooltipInterface_GetActionGuideAttachPanel) == 0x000008, "Wrong alignment on TLWidgetTooltipInterface_GetActionGuideAttachPanel");
static_assert(sizeof(TLWidgetTooltipInterface_GetActionGuideAttachPanel) == 0x000008, "Wrong size on TLWidgetTooltipInterface_GetActionGuideAttachPanel");
static_assert(offsetof(TLWidgetTooltipInterface_GetActionGuideAttachPanel, ReturnValue) == 0x000000, "Member 'TLWidgetTooltipInterface_GetActionGuideAttachPanel::ReturnValue' has a wrong offset!");

// Function TLUI.TLWidgetViewInterface.GetDataContext
// 0x0008 (0x0008 - 0x0000)
struct TLWidgetViewInterface_GetDataContext final
{
public:
	class UTLViewModelBase*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWidgetViewInterface_GetDataContext) == 0x000008, "Wrong alignment on TLWidgetViewInterface_GetDataContext");
static_assert(sizeof(TLWidgetViewInterface_GetDataContext) == 0x000008, "Wrong size on TLWidgetViewInterface_GetDataContext");
static_assert(offsetof(TLWidgetViewInterface_GetDataContext, ReturnValue) == 0x000000, "Member 'TLWidgetViewInterface_GetDataContext::ReturnValue' has a wrong offset!");

// Function TLUI.TLWidgetViewInterface.SetDataContext
// 0x0008 (0x0008 - 0x0000)
struct TLWidgetViewInterface_SetDataContext final
{
public:
	class UTLViewModelBase*                       InDataContext;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWidgetViewInterface_SetDataContext) == 0x000008, "Wrong alignment on TLWidgetViewInterface_SetDataContext");
static_assert(sizeof(TLWidgetViewInterface_SetDataContext) == 0x000008, "Wrong size on TLWidgetViewInterface_SetDataContext");
static_assert(offsetof(TLWidgetViewInterface_SetDataContext, InDataContext) == 0x000000, "Member 'TLWidgetViewInterface_SetDataContext::InDataContext' has a wrong offset!");

// Function TLUI.TLWidgetVisibilityInterface.IsShow
// 0x0001 (0x0001 - 0x0000)
struct TLWidgetVisibilityInterface_IsShow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWidgetVisibilityInterface_IsShow) == 0x000001, "Wrong alignment on TLWidgetVisibilityInterface_IsShow");
static_assert(sizeof(TLWidgetVisibilityInterface_IsShow) == 0x000001, "Wrong size on TLWidgetVisibilityInterface_IsShow");
static_assert(offsetof(TLWidgetVisibilityInterface_IsShow, ReturnValue) == 0x000000, "Member 'TLWidgetVisibilityInterface_IsShow::ReturnValue' has a wrong offset!");

// Function TLUI.TLWidgetVisibilityInterface.SetApplyDisabledHitTestToChildren
// 0x0001 (0x0001 - 0x0000)
struct TLWidgetVisibilityInterface_SetApplyDisabledHitTestToChildren final
{
public:
	bool                                          bInApplyDisabledHitTest;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWidgetVisibilityInterface_SetApplyDisabledHitTestToChildren) == 0x000001, "Wrong alignment on TLWidgetVisibilityInterface_SetApplyDisabledHitTestToChildren");
static_assert(sizeof(TLWidgetVisibilityInterface_SetApplyDisabledHitTestToChildren) == 0x000001, "Wrong size on TLWidgetVisibilityInterface_SetApplyDisabledHitTestToChildren");
static_assert(offsetof(TLWidgetVisibilityInterface_SetApplyDisabledHitTestToChildren, bInApplyDisabledHitTest) == 0x000000, "Member 'TLWidgetVisibilityInterface_SetApplyDisabledHitTestToChildren::bInApplyDisabledHitTest' has a wrong offset!");

// Function TLUI.TLWidgetVisibilityInterface.SetCollapsedWhenHide
// 0x0001 (0x0001 - 0x0000)
struct TLWidgetVisibilityInterface_SetCollapsedWhenHide final
{
public:
	bool                                          bInCollapsedWhenHide;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWidgetVisibilityInterface_SetCollapsedWhenHide) == 0x000001, "Wrong alignment on TLWidgetVisibilityInterface_SetCollapsedWhenHide");
static_assert(sizeof(TLWidgetVisibilityInterface_SetCollapsedWhenHide) == 0x000001, "Wrong size on TLWidgetVisibilityInterface_SetCollapsedWhenHide");
static_assert(offsetof(TLWidgetVisibilityInterface_SetCollapsedWhenHide, bInCollapsedWhenHide) == 0x000000, "Member 'TLWidgetVisibilityInterface_SetCollapsedWhenHide::bInCollapsedWhenHide' has a wrong offset!");

// Function TLUI.TLWidgetVisibilityInterface.SetEnableHitTest
// 0x0001 (0x0001 - 0x0000)
struct TLWidgetVisibilityInterface_SetEnableHitTest final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWidgetVisibilityInterface_SetEnableHitTest) == 0x000001, "Wrong alignment on TLWidgetVisibilityInterface_SetEnableHitTest");
static_assert(sizeof(TLWidgetVisibilityInterface_SetEnableHitTest) == 0x000001, "Wrong size on TLWidgetVisibilityInterface_SetEnableHitTest");
static_assert(offsetof(TLWidgetVisibilityInterface_SetEnableHitTest, Enable) == 0x000000, "Member 'TLWidgetVisibilityInterface_SetEnableHitTest::Enable' has a wrong offset!");

// Function TLUI.TLWidgetVisibilityInterface.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct TLWidgetVisibilityInterface_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWidgetVisibilityInterface_SetOpacity) == 0x000004, "Wrong alignment on TLWidgetVisibilityInterface_SetOpacity");
static_assert(sizeof(TLWidgetVisibilityInterface_SetOpacity) == 0x000004, "Wrong size on TLWidgetVisibilityInterface_SetOpacity");
static_assert(offsetof(TLWidgetVisibilityInterface_SetOpacity, InOpacity) == 0x000000, "Member 'TLWidgetVisibilityInterface_SetOpacity::InOpacity' has a wrong offset!");

// Function TLUI.TLWidgetVisibilityInterface.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct TLWidgetVisibilityInterface_SetVisible final
{
public:
	bool                                          Show_0;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWidgetVisibilityInterface_SetVisible) == 0x000001, "Wrong alignment on TLWidgetVisibilityInterface_SetVisible");
static_assert(sizeof(TLWidgetVisibilityInterface_SetVisible) == 0x000001, "Wrong size on TLWidgetVisibilityInterface_SetVisible");
static_assert(offsetof(TLWidgetVisibilityInterface_SetVisible, Show_0) == 0x000000, "Member 'TLWidgetVisibilityInterface_SetVisible::Show_0' has a wrong offset!");

// Function TLUI.TLWidgetVisibilityInterface.ShowWithValue
// 0x0001 (0x0001 - 0x0000)
struct TLWidgetVisibilityInterface_ShowWithValue final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWidgetVisibilityInterface_ShowWithValue) == 0x000001, "Wrong alignment on TLWidgetVisibilityInterface_ShowWithValue");
static_assert(sizeof(TLWidgetVisibilityInterface_ShowWithValue) == 0x000001, "Wrong size on TLWidgetVisibilityInterface_ShowWithValue");
static_assert(offsetof(TLWidgetVisibilityInterface_ShowWithValue, InVisible) == 0x000000, "Member 'TLWidgetVisibilityInterface_ShowWithValue::InVisible' has a wrong offset!");

// Function TLUI.TLWrapBox.SetWrapSize
// 0x0004 (0x0004 - 0x0000)
struct TLWrapBox_SetWrapSize final
{
public:
	float                                         InWrapSize;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWrapBox_SetWrapSize) == 0x000004, "Wrong alignment on TLWrapBox_SetWrapSize");
static_assert(sizeof(TLWrapBox_SetWrapSize) == 0x000004, "Wrong size on TLWrapBox_SetWrapSize");
static_assert(offsetof(TLWrapBox_SetWrapSize, InWrapSize) == 0x000000, "Member 'TLWrapBox_SetWrapSize::InWrapSize' has a wrong offset!");

}

