#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WorldPartition

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum WorldPartition.EHLODCameraBasedOcclusionCull
// NumValues: 0x0004
enum class EHLODCameraBasedOcclusionCull : uint8
{
	None                                     = 0,
	StandardCulling                          = 1,
	WithMoreCameras                          = 2,
	EHLODCameraBasedOcclusionCull_MAX        = 3,
};

// Enum WorldPartition.EHLODLayerType
// NumValues: 0x0007
enum class EHLODLayerType : uint8
{
	Instancing                               = 0,
	MeshMerge                                = 1,
	MeshSimplify                             = 2,
	RemeshAndCreateImposter                  = 3,
	Remesh                                   = 4,
	RemeshFromInstancing                     = 5,
	EHLODLayerType_MAX                       = 6,
};

// Enum WorldPartition.EWorldPartitionRuntimeCellState
// NumValues: 0x0004
enum class EWorldPartitionRuntimeCellState : uint8
{
	Unloaded                                 = 0,
	Loaded                                   = 1,
	Activated                                = 2,
	EWorldPartitionRuntimeCellState_MAX      = 3,
};

// Enum WorldPartition.EStreamingSourcePriority
// NumValues: 0x0007
enum class EStreamingSourcePriority : uint8
{
	Highest                                  = 0,
	High                                     = 64,
	Normal                                   = 128,
	Low                                      = 192,
	Lowest                                   = 255,
	Default                                  = 128,
	EStreamingSourcePriority_MAX             = 256,
};

// Enum WorldPartition.EStreamingSourceTargetState
// NumValues: 0x0003
enum class EStreamingSourceTargetState : uint8
{
	Loaded                                   = 0,
	Activated                                = 1,
	EStreamingSourceTargetState_MAX          = 2,
};

// ScriptStruct WorldPartition.WPLevels
// 0x0050 (0x0050 - 0x0000)
struct FWPLevels final
{
public:
	TSet<class FName>                             Levels;                                            // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FWPLevels) == 0x000008, "Wrong alignment on FWPLevels");
static_assert(sizeof(FWPLevels) == 0x000050, "Wrong size on FWPLevels");
static_assert(offsetof(FWPLevels, Levels) == 0x000000, "Member 'FWPLevels::Levels' has a wrong offset!");

// ScriptStruct WorldPartition.WorldPartitionCustomStreaming
// 0x0070 (0x0070 - 0x0000)
struct FWorldPartitionCustomStreaming final
{
public:
	TSet<class ULevelStreaming*>                  CustomStreamings;                                  // 0x0000(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_50[0x20];                                      // 0x0050(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldPartitionCustomStreaming) == 0x000008, "Wrong alignment on FWorldPartitionCustomStreaming");
static_assert(sizeof(FWorldPartitionCustomStreaming) == 0x000070, "Wrong size on FWorldPartitionCustomStreaming");
static_assert(offsetof(FWorldPartitionCustomStreaming, CustomStreamings) == 0x000000, "Member 'FWorldPartitionCustomStreaming::CustomStreamings' has a wrong offset!");

// ScriptStruct WorldPartition.LevelStreamings
// 0x0010 (0x0010 - 0x0000)
struct FLevelStreamings final
{
public:
	TArray<class ULevelStreaming*>                LevelStreamings;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FLevelStreamings) == 0x000008, "Wrong alignment on FLevelStreamings");
static_assert(sizeof(FLevelStreamings) == 0x000010, "Wrong size on FLevelStreamings");
static_assert(offsetof(FLevelStreamings, LevelStreamings) == 0x000000, "Member 'FLevelStreamings::LevelStreamings' has a wrong offset!");

// ScriptStruct WorldPartition.WorldPartitionRuntimeCellObjectMapping
// 0x0001 (0x0001 - 0x0000)
struct FWorldPartitionRuntimeCellObjectMapping final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldPartitionRuntimeCellObjectMapping) == 0x000001, "Wrong alignment on FWorldPartitionRuntimeCellObjectMapping");
static_assert(sizeof(FWorldPartitionRuntimeCellObjectMapping) == 0x000001, "Wrong size on FWorldPartitionRuntimeCellObjectMapping");

// ScriptStruct WorldPartition.WorldPartitionRuntimeCellDelegates
// 0x0001 (0x0001 - 0x0000)
struct FWorldPartitionRuntimeCellDelegates final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldPartitionRuntimeCellDelegates) == 0x000001, "Wrong alignment on FWorldPartitionRuntimeCellDelegates");
static_assert(sizeof(FWorldPartitionRuntimeCellDelegates) == 0x000001, "Wrong size on FWorldPartitionRuntimeCellDelegates");

// ScriptStruct WorldPartition.SpatialHashRuntimeGrid
// 0x0001 (0x0001 - 0x0000)
struct FSpatialHashRuntimeGrid final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpatialHashRuntimeGrid) == 0x000001, "Wrong alignment on FSpatialHashRuntimeGrid");
static_assert(sizeof(FSpatialHashRuntimeGrid) == 0x000001, "Wrong size on FSpatialHashRuntimeGrid");

// ScriptStruct WorldPartition.SpatialHashStreamingGridLayerCell
// 0x0010 (0x0010 - 0x0000)
struct FSpatialHashStreamingGridLayerCell final
{
public:
	TArray<class UWorldPartitionRuntimeSpatialHashCell*> GridCells;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpatialHashStreamingGridLayerCell) == 0x000008, "Wrong alignment on FSpatialHashStreamingGridLayerCell");
static_assert(sizeof(FSpatialHashStreamingGridLayerCell) == 0x000010, "Wrong size on FSpatialHashStreamingGridLayerCell");
static_assert(offsetof(FSpatialHashStreamingGridLayerCell, GridCells) == 0x000000, "Member 'FSpatialHashStreamingGridLayerCell::GridCells' has a wrong offset!");

// ScriptStruct WorldPartition.SpatialHashStreamingGridLevel
// 0x0060 (0x0060 - 0x0000)
struct FSpatialHashStreamingGridLevel final
{
public:
	TArray<struct FSpatialHashStreamingGridLayerCell> LayerCells;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            LayerCellsMapping;                                 // 0x0010(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpatialHashStreamingGridLevel) == 0x000008, "Wrong alignment on FSpatialHashStreamingGridLevel");
static_assert(sizeof(FSpatialHashStreamingGridLevel) == 0x000060, "Wrong size on FSpatialHashStreamingGridLevel");
static_assert(offsetof(FSpatialHashStreamingGridLevel, LayerCells) == 0x000000, "Member 'FSpatialHashStreamingGridLevel::LayerCells' has a wrong offset!");
static_assert(offsetof(FSpatialHashStreamingGridLevel, LayerCellsMapping) == 0x000010, "Member 'FSpatialHashStreamingGridLevel::LayerCellsMapping' has a wrong offset!");

// ScriptStruct WorldPartition.SpatialHashStreamingGrid
// 0x0070 (0x0070 - 0x0000)
struct FSpatialHashStreamingGrid final
{
public:
	class FName                                   GridName;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellSize;                                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoadingRange;                                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugColor;                                        // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpatialHashStreamingGridLevel> GridLevels;                                        // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBox                                   WorldBounds;                                       // 0x0040(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x14];                                      // 0x005C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpatialHashStreamingGrid) == 0x000008, "Wrong alignment on FSpatialHashStreamingGrid");
static_assert(sizeof(FSpatialHashStreamingGrid) == 0x000070, "Wrong size on FSpatialHashStreamingGrid");
static_assert(offsetof(FSpatialHashStreamingGrid, GridName) == 0x000000, "Member 'FSpatialHashStreamingGrid::GridName' has a wrong offset!");
static_assert(offsetof(FSpatialHashStreamingGrid, Origin) == 0x000008, "Member 'FSpatialHashStreamingGrid::Origin' has a wrong offset!");
static_assert(offsetof(FSpatialHashStreamingGrid, CellSize) == 0x000014, "Member 'FSpatialHashStreamingGrid::CellSize' has a wrong offset!");
static_assert(offsetof(FSpatialHashStreamingGrid, LoadingRange) == 0x000018, "Member 'FSpatialHashStreamingGrid::LoadingRange' has a wrong offset!");
static_assert(offsetof(FSpatialHashStreamingGrid, DebugColor) == 0x00001C, "Member 'FSpatialHashStreamingGrid::DebugColor' has a wrong offset!");
static_assert(offsetof(FSpatialHashStreamingGrid, GridLevels) == 0x000030, "Member 'FSpatialHashStreamingGrid::GridLevels' has a wrong offset!");
static_assert(offsetof(FSpatialHashStreamingGrid, WorldBounds) == 0x000040, "Member 'FSpatialHashStreamingGrid::WorldBounds' has a wrong offset!");

// ScriptStruct WorldPartition.WorldPartitionRuntimeSpatialHashGridPreviewer
// 0x0001 (0x0001 - 0x0000)
struct FWorldPartitionRuntimeSpatialHashGridPreviewer final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldPartitionRuntimeSpatialHashGridPreviewer) == 0x000001, "Wrong alignment on FWorldPartitionRuntimeSpatialHashGridPreviewer");
static_assert(sizeof(FWorldPartitionRuntimeSpatialHashGridPreviewer) == 0x000001, "Wrong size on FWorldPartitionRuntimeSpatialHashGridPreviewer");

// ScriptStruct WorldPartition.WorldPartitionStreamingQuerySource
// 0x0080 (0x0080 - 0x0000)
struct FWorldPartitionStreamingQuerySource final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLoadingRangeRadius;                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           DataLayers;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bDataLayersOnly;                                   // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpatialQuery;                                     // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             GridsToSearch;                                     // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldPartitionStreamingQuerySource) == 0x000008, "Wrong alignment on FWorldPartitionStreamingQuerySource");
static_assert(sizeof(FWorldPartitionStreamingQuerySource) == 0x000080, "Wrong size on FWorldPartitionStreamingQuerySource");
static_assert(offsetof(FWorldPartitionStreamingQuerySource, Location) == 0x000000, "Member 'FWorldPartitionStreamingQuerySource::Location' has a wrong offset!");
static_assert(offsetof(FWorldPartitionStreamingQuerySource, Radius) == 0x00000C, "Member 'FWorldPartitionStreamingQuerySource::Radius' has a wrong offset!");
static_assert(offsetof(FWorldPartitionStreamingQuerySource, bUseLoadingRangeRadius) == 0x000010, "Member 'FWorldPartitionStreamingQuerySource::bUseLoadingRangeRadius' has a wrong offset!");
static_assert(offsetof(FWorldPartitionStreamingQuerySource, DataLayers) == 0x000018, "Member 'FWorldPartitionStreamingQuerySource::DataLayers' has a wrong offset!");
static_assert(offsetof(FWorldPartitionStreamingQuerySource, bDataLayersOnly) == 0x000028, "Member 'FWorldPartitionStreamingQuerySource::bDataLayersOnly' has a wrong offset!");
static_assert(offsetof(FWorldPartitionStreamingQuerySource, bSpatialQuery) == 0x000029, "Member 'FWorldPartitionStreamingQuerySource::bSpatialQuery' has a wrong offset!");
static_assert(offsetof(FWorldPartitionStreamingQuerySource, GridsToSearch) == 0x000030, "Member 'FWorldPartitionStreamingQuerySource::GridsToSearch' has a wrong offset!");

// ScriptStruct WorldPartition.LandscapeLevelInfo
// 0x0028 (0x0028 - 0x0000)
struct FLandscapeLevelInfo final
{
public:
	struct FIntVector                             Position;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Bounds;                                            // 0x000C(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandscapeLevelInfo) == 0x000004, "Wrong alignment on FLandscapeLevelInfo");
static_assert(sizeof(FLandscapeLevelInfo) == 0x000028, "Wrong size on FLandscapeLevelInfo");
static_assert(offsetof(FLandscapeLevelInfo, Position) == 0x000000, "Member 'FLandscapeLevelInfo::Position' has a wrong offset!");
static_assert(offsetof(FLandscapeLevelInfo, Bounds) == 0x00000C, "Member 'FLandscapeLevelInfo::Bounds' has a wrong offset!");

}

