#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TLUI

#include "Basic.hpp"

#include "TLScheme_structs.hpp"
#include "TLUI_structs.hpp"
#include "Slate_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "Auton_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "InputCore_structs.hpp"
#include "WebBrowserWidget_classes.hpp"
#include "RadarChart_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class TLUI.TLCanvasPanel
// 0x0198 (0x02D0 - 0x0138)
class UTLCanvasPanel : public UCanvasPanel
{
public:
	uint8                                         Pad_138[0x80];                                     // 0x0138(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x01BC(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetFocusableData                 TLFocusableData;                                   // 0x01C8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bUseExplicitChildZOrder;                           // 0x01E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1[0x17];                                     // 0x01E1(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x01F8(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0238(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ETLAutonAreaType                              MyAutonAreaType;                                   // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaGroupIdValue;                             // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutonAreaOrderTagValue;                            // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFence;                                    // 0x0284(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDome;                                     // 0x0285(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarPrevFirstBeforeLeaveFlag;              // 0x0286(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoRecentAreaWhenLeaveFlag;                // 0x0287(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoBackAreaWhenLeaveFlag;                  // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoAreaByOrderTagHintWhenLeaveFlag;        // 0x0289(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonOrderTagHint                          AutonAreaLeaveOrderTagHintValue;                   // 0x028A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28B[0x1];                                      // 0x028B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaLeaveGivenOrderTagValue;                  // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstThenCardinalEnterFlag;          // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstWhenFarCardinalEnterFlag;       // 0x0291(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaTakeRecentIfExistWhenCardinalEnterFlag;   // 0x0292(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonChildNavigationHint                   AutonAreaChildNavigatingHint;                      // 0x0293(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarNavigationWhenShortCardinalFailedFlag; // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_295[0x3];                                      // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds; // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AutonAreaCardinalNavigationWeightValue;            // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseHitOnRoad;                         // 0x02AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseNearest;                           // 0x02AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaHaveNosyNeighborsFlag;                    // 0x02AE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaCouldBeLookingAreaFlag;                   // 0x02AF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                AutonAreaLookingFeedbackWidget;                    // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ITLWidgetVisibilityInterface> AutonAreaFocusPresenter;                           // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ChildDisableHitTestAll;                            // 0x02C8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLCanvasPanel">();
	}
	static class UTLCanvasPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLCanvasPanel>();
	}
};
static_assert(alignof(UTLCanvasPanel) == 0x000008, "Wrong alignment on UTLCanvasPanel");
static_assert(sizeof(UTLCanvasPanel) == 0x0002D0, "Wrong size on UTLCanvasPanel");
static_assert(offsetof(UTLCanvasPanel, TLVisibility) == 0x0001B8, "Member 'UTLCanvasPanel::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, TooltipPositionData) == 0x0001BC, "Member 'UTLCanvasPanel::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, TLFocusableData) == 0x0001C8, "Member 'UTLCanvasPanel::TLFocusableData' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, bUseExplicitChildZOrder) == 0x0001E0, "Member 'UTLCanvasPanel::bUseExplicitChildZOrder' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, VisibleBinding) == 0x0001F8, "Member 'UTLCanvasPanel::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, EnabledBinding) == 0x000238, "Member 'UTLCanvasPanel::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, MyAutonAreaType) == 0x000278, "Member 'UTLCanvasPanel::MyAutonAreaType' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaGroupIdValue) == 0x00027C, "Member 'UTLCanvasPanel::AutonAreaGroupIdValue' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaOrderTagValue) == 0x000280, "Member 'UTLCanvasPanel::AutonAreaOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaFence) == 0x000284, "Member 'UTLCanvasPanel::AutonAreaFence' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaDome) == 0x000285, "Member 'UTLCanvasPanel::AutonAreaDome' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaFarPrevFirstBeforeLeaveFlag) == 0x000286, "Member 'UTLCanvasPanel::AutonAreaFarPrevFirstBeforeLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaGoRecentAreaWhenLeaveFlag) == 0x000287, "Member 'UTLCanvasPanel::AutonAreaGoRecentAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaGoBackAreaWhenLeaveFlag) == 0x000288, "Member 'UTLCanvasPanel::AutonAreaGoBackAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaGoAreaByOrderTagHintWhenLeaveFlag) == 0x000289, "Member 'UTLCanvasPanel::AutonAreaGoAreaByOrderTagHintWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaLeaveOrderTagHintValue) == 0x00028A, "Member 'UTLCanvasPanel::AutonAreaLeaveOrderTagHintValue' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaLeaveGivenOrderTagValue) == 0x00028C, "Member 'UTLCanvasPanel::AutonAreaLeaveGivenOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaOrderFirstThenCardinalEnterFlag) == 0x000290, "Member 'UTLCanvasPanel::AutonAreaOrderFirstThenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaOrderFirstWhenFarCardinalEnterFlag) == 0x000291, "Member 'UTLCanvasPanel::AutonAreaOrderFirstWhenFarCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaTakeRecentIfExistWhenCardinalEnterFlag) == 0x000292, "Member 'UTLCanvasPanel::AutonAreaTakeRecentIfExistWhenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaChildNavigatingHint) == 0x000293, "Member 'UTLCanvasPanel::AutonAreaChildNavigatingHint' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaFarNavigationWhenShortCardinalFailedFlag) == 0x000294, "Member 'UTLCanvasPanel::AutonAreaFarNavigationWhenShortCardinalFailedFlag' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds) == 0x000298, "Member 'UTLCanvasPanel::AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaCardinalNavigationWeightValue) == 0x0002A8, "Member 'UTLCanvasPanel::AutonAreaCardinalNavigationWeightValue' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaDontUseHitOnRoad) == 0x0002AC, "Member 'UTLCanvasPanel::AutonAreaDontUseHitOnRoad' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaDontUseNearest) == 0x0002AD, "Member 'UTLCanvasPanel::AutonAreaDontUseNearest' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaHaveNosyNeighborsFlag) == 0x0002AE, "Member 'UTLCanvasPanel::AutonAreaHaveNosyNeighborsFlag' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaCouldBeLookingAreaFlag) == 0x0002AF, "Member 'UTLCanvasPanel::AutonAreaCouldBeLookingAreaFlag' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaLookingFeedbackWidget) == 0x0002B0, "Member 'UTLCanvasPanel::AutonAreaLookingFeedbackWidget' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, AutonAreaFocusPresenter) == 0x0002B8, "Member 'UTLCanvasPanel::AutonAreaFocusPresenter' has a wrong offset!");
static_assert(offsetof(UTLCanvasPanel, ChildDisableHitTestAll) == 0x0002C8, "Member 'UTLCanvasPanel::ChildDisableHitTestAll' has a wrong offset!");

// Class TLUI.TLListView
// 0x0DF8 (0x1168 - 0x0370)
class UTLListView : public UListView
{
public:
	uint8                                         Pad_370[0x88];                                     // 0x0370(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x03FC(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetFocusableData                 TLFocusableData;                                   // 0x0408(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_420[0x10];                                     // 0x0420(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0430(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0470(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingListChanged            ListChangedBinding;                                // 0x04B0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ETLAutonAreaType                              MyAutonAreaType;                                   // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F1[0x3];                                      // 0x04F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaGroupIdValue;                             // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutonAreaOrderTagValue;                            // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFence;                                    // 0x04FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDome;                                     // 0x04FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarPrevFirstBeforeLeaveFlag;              // 0x04FE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoRecentAreaWhenLeaveFlag;                // 0x04FF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoBackAreaWhenLeaveFlag;                  // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoAreaByOrderTagHintWhenLeaveFlag;        // 0x0501(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonOrderTagHint                          AutonAreaLeaveOrderTagHintValue;                   // 0x0502(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_503[0x1];                                      // 0x0503(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaLeaveGivenOrderTagValue;                  // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstThenCardinalEnterFlag;          // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstWhenFarCardinalEnterFlag;       // 0x0509(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaTakeRecentIfExistWhenCardinalEnterFlag;   // 0x050A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonChildNavigationHint                   AutonAreaChildNavigatingHint;                      // 0x050B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarNavigationWhenShortCardinalFailedFlag; // 0x050C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50D[0x3];                                      // 0x050D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds; // 0x0510(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AutonAreaCardinalNavigationWeightValue;            // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseHitOnRoad;                         // 0x0524(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseNearest;                           // 0x0525(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaHaveNosyNeighborsFlag;                    // 0x0526(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaCouldBeLookingAreaFlag;                   // 0x0527(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                AutonAreaLookingFeedbackWidget;                    // 0x0528(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ITLWidgetVisibilityInterface> AutonAreaFocusPresenter;                           // 0x0530(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          AutonScrollSensitiveFlag;                          // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonScrollDestination                     AutonScrollDestionationFlag;                       // 0x0541(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonLoopNavigationHint                    AutonScrollLoopNavigatingHint;                     // 0x0542(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonScrollUseFastScrolling;                       // 0x0543(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonScrollNavigationClearWhenStartFastScrollingFlag; // 0x0544(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_545[0x3];                                      // 0x0545(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScrollBarStyle                        ScrollBarStyle;                                    // 0x0548(0x05E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bCustomScrollBarStyle;                             // 0x0B28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B29[0x7];                                      // 0x0B29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScrollBarStyle                        ScrollBarStyleConsole;                             // 0x0B30(0x05E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bCustomScrollBarStyleConsole;                      // 0x1110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysShowScrollbar;                              // 0x1111(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1112[0x2];                                     // 0x1112(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ScrollbarThickness;                                // 0x1114(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                ScrollbarPadding;                                  // 0x111C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                ScrollbarTrackPadding;                             // 0x112C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                ScrollbarPaddingConsole;                           // 0x113C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ScrollbarThicknessConsole;                         // 0x114C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                ScrollbarTrackPaddingConsole;                      // 0x1154(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EDragScrollingType                            DragScrollingType;                                 // 0x1164(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1165[0x3];                                     // 0x1165(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddItemAt(class UObject* Item, int32 Index_0);
	void HandleUpdateEnabled();
	void HandleUpdateListChanged();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLListView">();
	}
	static class UTLListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLListView>();
	}
};
static_assert(alignof(UTLListView) == 0x000008, "Wrong alignment on UTLListView");
static_assert(sizeof(UTLListView) == 0x001168, "Wrong size on UTLListView");
static_assert(offsetof(UTLListView, TLVisibility) == 0x0003F8, "Member 'UTLListView::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLListView, TooltipPositionData) == 0x0003FC, "Member 'UTLListView::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLListView, TLFocusableData) == 0x000408, "Member 'UTLListView::TLFocusableData' has a wrong offset!");
static_assert(offsetof(UTLListView, VisibleBinding) == 0x000430, "Member 'UTLListView::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLListView, EnabledBinding) == 0x000470, "Member 'UTLListView::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLListView, ListChangedBinding) == 0x0004B0, "Member 'UTLListView::ListChangedBinding' has a wrong offset!");
static_assert(offsetof(UTLListView, MyAutonAreaType) == 0x0004F0, "Member 'UTLListView::MyAutonAreaType' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaGroupIdValue) == 0x0004F4, "Member 'UTLListView::AutonAreaGroupIdValue' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaOrderTagValue) == 0x0004F8, "Member 'UTLListView::AutonAreaOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaFence) == 0x0004FC, "Member 'UTLListView::AutonAreaFence' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaDome) == 0x0004FD, "Member 'UTLListView::AutonAreaDome' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaFarPrevFirstBeforeLeaveFlag) == 0x0004FE, "Member 'UTLListView::AutonAreaFarPrevFirstBeforeLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaGoRecentAreaWhenLeaveFlag) == 0x0004FF, "Member 'UTLListView::AutonAreaGoRecentAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaGoBackAreaWhenLeaveFlag) == 0x000500, "Member 'UTLListView::AutonAreaGoBackAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaGoAreaByOrderTagHintWhenLeaveFlag) == 0x000501, "Member 'UTLListView::AutonAreaGoAreaByOrderTagHintWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaLeaveOrderTagHintValue) == 0x000502, "Member 'UTLListView::AutonAreaLeaveOrderTagHintValue' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaLeaveGivenOrderTagValue) == 0x000504, "Member 'UTLListView::AutonAreaLeaveGivenOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaOrderFirstThenCardinalEnterFlag) == 0x000508, "Member 'UTLListView::AutonAreaOrderFirstThenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaOrderFirstWhenFarCardinalEnterFlag) == 0x000509, "Member 'UTLListView::AutonAreaOrderFirstWhenFarCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaTakeRecentIfExistWhenCardinalEnterFlag) == 0x00050A, "Member 'UTLListView::AutonAreaTakeRecentIfExistWhenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaChildNavigatingHint) == 0x00050B, "Member 'UTLListView::AutonAreaChildNavigatingHint' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaFarNavigationWhenShortCardinalFailedFlag) == 0x00050C, "Member 'UTLListView::AutonAreaFarNavigationWhenShortCardinalFailedFlag' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds) == 0x000510, "Member 'UTLListView::AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaCardinalNavigationWeightValue) == 0x000520, "Member 'UTLListView::AutonAreaCardinalNavigationWeightValue' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaDontUseHitOnRoad) == 0x000524, "Member 'UTLListView::AutonAreaDontUseHitOnRoad' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaDontUseNearest) == 0x000525, "Member 'UTLListView::AutonAreaDontUseNearest' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaHaveNosyNeighborsFlag) == 0x000526, "Member 'UTLListView::AutonAreaHaveNosyNeighborsFlag' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaCouldBeLookingAreaFlag) == 0x000527, "Member 'UTLListView::AutonAreaCouldBeLookingAreaFlag' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaLookingFeedbackWidget) == 0x000528, "Member 'UTLListView::AutonAreaLookingFeedbackWidget' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonAreaFocusPresenter) == 0x000530, "Member 'UTLListView::AutonAreaFocusPresenter' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonScrollSensitiveFlag) == 0x000540, "Member 'UTLListView::AutonScrollSensitiveFlag' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonScrollDestionationFlag) == 0x000541, "Member 'UTLListView::AutonScrollDestionationFlag' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonScrollLoopNavigatingHint) == 0x000542, "Member 'UTLListView::AutonScrollLoopNavigatingHint' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonScrollUseFastScrolling) == 0x000543, "Member 'UTLListView::AutonScrollUseFastScrolling' has a wrong offset!");
static_assert(offsetof(UTLListView, AutonScrollNavigationClearWhenStartFastScrollingFlag) == 0x000544, "Member 'UTLListView::AutonScrollNavigationClearWhenStartFastScrollingFlag' has a wrong offset!");
static_assert(offsetof(UTLListView, ScrollBarStyle) == 0x000548, "Member 'UTLListView::ScrollBarStyle' has a wrong offset!");
static_assert(offsetof(UTLListView, bCustomScrollBarStyle) == 0x000B28, "Member 'UTLListView::bCustomScrollBarStyle' has a wrong offset!");
static_assert(offsetof(UTLListView, ScrollBarStyleConsole) == 0x000B30, "Member 'UTLListView::ScrollBarStyleConsole' has a wrong offset!");
static_assert(offsetof(UTLListView, bCustomScrollBarStyleConsole) == 0x001110, "Member 'UTLListView::bCustomScrollBarStyleConsole' has a wrong offset!");
static_assert(offsetof(UTLListView, bAlwaysShowScrollbar) == 0x001111, "Member 'UTLListView::bAlwaysShowScrollbar' has a wrong offset!");
static_assert(offsetof(UTLListView, ScrollbarThickness) == 0x001114, "Member 'UTLListView::ScrollbarThickness' has a wrong offset!");
static_assert(offsetof(UTLListView, ScrollbarPadding) == 0x00111C, "Member 'UTLListView::ScrollbarPadding' has a wrong offset!");
static_assert(offsetof(UTLListView, ScrollbarTrackPadding) == 0x00112C, "Member 'UTLListView::ScrollbarTrackPadding' has a wrong offset!");
static_assert(offsetof(UTLListView, ScrollbarPaddingConsole) == 0x00113C, "Member 'UTLListView::ScrollbarPaddingConsole' has a wrong offset!");
static_assert(offsetof(UTLListView, ScrollbarThicknessConsole) == 0x00114C, "Member 'UTLListView::ScrollbarThicknessConsole' has a wrong offset!");
static_assert(offsetof(UTLListView, ScrollbarTrackPaddingConsole) == 0x001154, "Member 'UTLListView::ScrollbarTrackPaddingConsole' has a wrong offset!");
static_assert(offsetof(UTLListView, DragScrollingType) == 0x001164, "Member 'UTLListView::DragScrollingType' has a wrong offset!");

// Class TLUI.TLGridPanel
// 0x0188 (0x02D8 - 0x0150)
class UTLGridPanel : public UGridPanel
{
public:
	uint8                                         Pad_150[0x80];                                     // 0x0150(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x01D4(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetFocusableData                 TLFocusableData;                                   // 0x01E0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F8[0x10];                                     // 0x01F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0208(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0248(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ETLAutonAreaType                              MyAutonAreaType;                                   // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_289[0x3];                                      // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaGroupIdValue;                             // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutonAreaOrderTagValue;                            // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFence;                                    // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDome;                                     // 0x0295(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarPrevFirstBeforeLeaveFlag;              // 0x0296(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoRecentAreaWhenLeaveFlag;                // 0x0297(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoBackAreaWhenLeaveFlag;                  // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoAreaByOrderTagHintWhenLeaveFlag;        // 0x0299(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonOrderTagHint                          AutonAreaLeaveOrderTagHintValue;                   // 0x029A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B[0x1];                                      // 0x029B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaLeaveGivenOrderTagValue;                  // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstThenCardinalEnterFlag;          // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstWhenFarCardinalEnterFlag;       // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaTakeRecentIfExistWhenCardinalEnterFlag;   // 0x02A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonChildNavigationHint                   AutonAreaChildNavigatingHint;                      // 0x02A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarNavigationWhenShortCardinalFailedFlag; // 0x02A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds; // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AutonAreaCardinalNavigationWeightValue;            // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseHitOnRoad;                         // 0x02BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseNearest;                           // 0x02BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaHaveNosyNeighborsFlag;                    // 0x02BE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaCouldBeLookingAreaFlag;                   // 0x02BF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                AutonAreaLookingFeedbackWidget;                    // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ITLWidgetVisibilityInterface> AutonAreaFocusPresenter;                           // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLGridPanel">();
	}
	static class UTLGridPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLGridPanel>();
	}
};
static_assert(alignof(UTLGridPanel) == 0x000008, "Wrong alignment on UTLGridPanel");
static_assert(sizeof(UTLGridPanel) == 0x0002D8, "Wrong size on UTLGridPanel");
static_assert(offsetof(UTLGridPanel, TLVisibility) == 0x0001D0, "Member 'UTLGridPanel::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, TooltipPositionData) == 0x0001D4, "Member 'UTLGridPanel::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, TLFocusableData) == 0x0001E0, "Member 'UTLGridPanel::TLFocusableData' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, VisibleBinding) == 0x000208, "Member 'UTLGridPanel::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, EnabledBinding) == 0x000248, "Member 'UTLGridPanel::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, MyAutonAreaType) == 0x000288, "Member 'UTLGridPanel::MyAutonAreaType' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaGroupIdValue) == 0x00028C, "Member 'UTLGridPanel::AutonAreaGroupIdValue' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaOrderTagValue) == 0x000290, "Member 'UTLGridPanel::AutonAreaOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaFence) == 0x000294, "Member 'UTLGridPanel::AutonAreaFence' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaDome) == 0x000295, "Member 'UTLGridPanel::AutonAreaDome' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaFarPrevFirstBeforeLeaveFlag) == 0x000296, "Member 'UTLGridPanel::AutonAreaFarPrevFirstBeforeLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaGoRecentAreaWhenLeaveFlag) == 0x000297, "Member 'UTLGridPanel::AutonAreaGoRecentAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaGoBackAreaWhenLeaveFlag) == 0x000298, "Member 'UTLGridPanel::AutonAreaGoBackAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaGoAreaByOrderTagHintWhenLeaveFlag) == 0x000299, "Member 'UTLGridPanel::AutonAreaGoAreaByOrderTagHintWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaLeaveOrderTagHintValue) == 0x00029A, "Member 'UTLGridPanel::AutonAreaLeaveOrderTagHintValue' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaLeaveGivenOrderTagValue) == 0x00029C, "Member 'UTLGridPanel::AutonAreaLeaveGivenOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaOrderFirstThenCardinalEnterFlag) == 0x0002A0, "Member 'UTLGridPanel::AutonAreaOrderFirstThenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaOrderFirstWhenFarCardinalEnterFlag) == 0x0002A1, "Member 'UTLGridPanel::AutonAreaOrderFirstWhenFarCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaTakeRecentIfExistWhenCardinalEnterFlag) == 0x0002A2, "Member 'UTLGridPanel::AutonAreaTakeRecentIfExistWhenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaChildNavigatingHint) == 0x0002A3, "Member 'UTLGridPanel::AutonAreaChildNavigatingHint' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaFarNavigationWhenShortCardinalFailedFlag) == 0x0002A4, "Member 'UTLGridPanel::AutonAreaFarNavigationWhenShortCardinalFailedFlag' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds) == 0x0002A8, "Member 'UTLGridPanel::AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaCardinalNavigationWeightValue) == 0x0002B8, "Member 'UTLGridPanel::AutonAreaCardinalNavigationWeightValue' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaDontUseHitOnRoad) == 0x0002BC, "Member 'UTLGridPanel::AutonAreaDontUseHitOnRoad' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaDontUseNearest) == 0x0002BD, "Member 'UTLGridPanel::AutonAreaDontUseNearest' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaHaveNosyNeighborsFlag) == 0x0002BE, "Member 'UTLGridPanel::AutonAreaHaveNosyNeighborsFlag' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaCouldBeLookingAreaFlag) == 0x0002BF, "Member 'UTLGridPanel::AutonAreaCouldBeLookingAreaFlag' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaLookingFeedbackWidget) == 0x0002C0, "Member 'UTLGridPanel::AutonAreaLookingFeedbackWidget' has a wrong offset!");
static_assert(offsetof(UTLGridPanel, AutonAreaFocusPresenter) == 0x0002C8, "Member 'UTLGridPanel::AutonAreaFocusPresenter' has a wrong offset!");

// Class TLUI.TLRadioGroup
// 0x0000 (0x02D8 - 0x02D8)
class UTLRadioGroup final : public UTLGridPanel
{
public:
	int32 GetSelectedIndex();
	void SetCheckIndex(int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLRadioGroup">();
	}
	static class UTLRadioGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLRadioGroup>();
	}
};
static_assert(alignof(UTLRadioGroup) == 0x000008, "Wrong alignment on UTLRadioGroup");
static_assert(sizeof(UTLRadioGroup) == 0x0002D8, "Wrong size on UTLRadioGroup");

// Class TLUI.TLWidgetTextFontScaleFrameInterface
// 0x0000 (0x0028 - 0x0028)
class ITLWidgetTextFontScaleFrameInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLWidgetTextFontScaleFrameInterface">();
	}
	static class ITLWidgetTextFontScaleFrameInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ITLWidgetTextFontScaleFrameInterface>();
	}
};
static_assert(alignof(ITLWidgetTextFontScaleFrameInterface) == 0x000008, "Wrong alignment on ITLWidgetTextFontScaleFrameInterface");
static_assert(sizeof(ITLWidgetTextFontScaleFrameInterface) == 0x000028, "Wrong size on ITLWidgetTextFontScaleFrameInterface");

// Class TLUI.TLLinearBox
// 0x0028 (0x0148 - 0x0120)
class UTLLinearBox final : public UPanelWidget
{
public:
	EOrientation                                  Orientation;                                       // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bReverseOrder;                                     // 0x0121(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_122[0x26];                                     // 0x0122(0x0026)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetOrientation(EOrientation InOrientation);
	void SetReverseOrder(bool bInReverseOrder);
	void ToggleOrientation();

	EOrientation GetOrientation() const;
	bool GetReverseOrder() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLLinearBox">();
	}
	static class UTLLinearBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLLinearBox>();
	}
};
static_assert(alignof(UTLLinearBox) == 0x000008, "Wrong alignment on UTLLinearBox");
static_assert(sizeof(UTLLinearBox) == 0x000148, "Wrong size on UTLLinearBox");
static_assert(offsetof(UTLLinearBox, Orientation) == 0x000120, "Member 'UTLLinearBox::Orientation' has a wrong offset!");
static_assert(offsetof(UTLLinearBox, bReverseOrder) == 0x000121, "Member 'UTLLinearBox::bReverseOrder' has a wrong offset!");

// Class TLUI.TLViewModelBase
// 0x0000 (0x0030 - 0x0030)
class UTLViewModelBase : public UDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLViewModelBase">();
	}
	static class UTLViewModelBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLViewModelBase>();
	}
};
static_assert(alignof(UTLViewModelBase) == 0x000008, "Wrong alignment on UTLViewModelBase");
static_assert(sizeof(UTLViewModelBase) == 0x000030, "Wrong size on UTLViewModelBase");

// Class TLUI.ComboBoxStringTL
// 0x0D08 (0x0E10 - 0x0108)
class UComboBoxStringTL : public UWidget
{
public:
	TArray<class FString>                         DefaultOptions;                                    // 0x0108(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 SelectedOption;                                    // 0x0118(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FComboBoxStyle                         WidgetStyle;                                       // 0x0128(0x03F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTableRowStyle                         ItemStyle;                                         // 0x0518(0x07C8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                ContentPadding;                                    // 0x0CE0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxListHeight;                                     // 0x0CF0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasDownArrow;                                      // 0x0CF4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableGamepadNavigationMode;                       // 0x0CF5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CF6[0x2];                                      // 0x0CF6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         Font;                                              // 0x0CF8(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ForegroundColor;                                   // 0x0D50(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsFocusable;                                      // 0x0D78(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRightThumbstickAccept;                       // 0x0D79(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D7A[0x2];                                      // 0x0D7A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const class FString& Item)>    OnGenerateWidgetEvent;                             // 0x0D7C(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8C[0x4];                                      // 0x0D8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSelectionChanged;                                // 0x0D90(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnOpening;                                         // 0x0DA0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnClosing;                                         // 0x0DB0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC0[0x50];                                     // 0x0DC0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddOption(const class FString& Option);
	void ClearOptions();
	void ClearSelection();
	void OnClosingEvent__DelegateSignature();
	void OnOpeningEvent__DelegateSignature();
	void OnSelectionChangedEvent__DelegateSignature(const class FString& SelectedItem, ESelectInfo SelectionType);
	void RefreshOptions();
	bool RemoveOption(const class FString& Option);
	void SetSelectedIndex(const int32 Index_0);
	void SetSelectedOption(const class FString& Option);

	int32 FindOptionIndex(const class FString& Option) const;
	class FString GetOptionAtIndex(int32 Index_0) const;
	int32 GetOptionCount() const;
	int32 GetSelectedIndex() const;
	class FString GetSelectedOption() const;
	bool IsOpen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ComboBoxStringTL">();
	}
	static class UComboBoxStringTL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComboBoxStringTL>();
	}
};
static_assert(alignof(UComboBoxStringTL) == 0x000008, "Wrong alignment on UComboBoxStringTL");
static_assert(sizeof(UComboBoxStringTL) == 0x000E10, "Wrong size on UComboBoxStringTL");
static_assert(offsetof(UComboBoxStringTL, DefaultOptions) == 0x000108, "Member 'UComboBoxStringTL::DefaultOptions' has a wrong offset!");
static_assert(offsetof(UComboBoxStringTL, SelectedOption) == 0x000118, "Member 'UComboBoxStringTL::SelectedOption' has a wrong offset!");
static_assert(offsetof(UComboBoxStringTL, WidgetStyle) == 0x000128, "Member 'UComboBoxStringTL::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UComboBoxStringTL, ItemStyle) == 0x000518, "Member 'UComboBoxStringTL::ItemStyle' has a wrong offset!");
static_assert(offsetof(UComboBoxStringTL, ContentPadding) == 0x000CE0, "Member 'UComboBoxStringTL::ContentPadding' has a wrong offset!");
static_assert(offsetof(UComboBoxStringTL, MaxListHeight) == 0x000CF0, "Member 'UComboBoxStringTL::MaxListHeight' has a wrong offset!");
static_assert(offsetof(UComboBoxStringTL, HasDownArrow) == 0x000CF4, "Member 'UComboBoxStringTL::HasDownArrow' has a wrong offset!");
static_assert(offsetof(UComboBoxStringTL, EnableGamepadNavigationMode) == 0x000CF5, "Member 'UComboBoxStringTL::EnableGamepadNavigationMode' has a wrong offset!");
static_assert(offsetof(UComboBoxStringTL, Font) == 0x000CF8, "Member 'UComboBoxStringTL::Font' has a wrong offset!");
static_assert(offsetof(UComboBoxStringTL, ForegroundColor) == 0x000D50, "Member 'UComboBoxStringTL::ForegroundColor' has a wrong offset!");
static_assert(offsetof(UComboBoxStringTL, bIsFocusable) == 0x000D78, "Member 'UComboBoxStringTL::bIsFocusable' has a wrong offset!");
static_assert(offsetof(UComboBoxStringTL, EnableRightThumbstickAccept) == 0x000D79, "Member 'UComboBoxStringTL::EnableRightThumbstickAccept' has a wrong offset!");
static_assert(offsetof(UComboBoxStringTL, OnGenerateWidgetEvent) == 0x000D7C, "Member 'UComboBoxStringTL::OnGenerateWidgetEvent' has a wrong offset!");
static_assert(offsetof(UComboBoxStringTL, OnSelectionChanged) == 0x000D90, "Member 'UComboBoxStringTL::OnSelectionChanged' has a wrong offset!");
static_assert(offsetof(UComboBoxStringTL, OnOpening) == 0x000DA0, "Member 'UComboBoxStringTL::OnOpening' has a wrong offset!");
static_assert(offsetof(UComboBoxStringTL, OnClosing) == 0x000DB0, "Member 'UComboBoxStringTL::OnClosing' has a wrong offset!");

// Class TLUI.TLWidgetTextFontScaleInterface
// 0x0000 (0x0028 - 0x0028)
class ITLWidgetTextFontScaleInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLWidgetTextFontScaleInterface">();
	}
	static class ITLWidgetTextFontScaleInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ITLWidgetTextFontScaleInterface>();
	}
};
static_assert(alignof(ITLWidgetTextFontScaleInterface) == 0x000008, "Wrong alignment on ITLWidgetTextFontScaleInterface");
static_assert(sizeof(ITLWidgetTextFontScaleInterface) == 0x000028, "Wrong size on ITLWidgetTextFontScaleInterface");

// Class TLUI.TextLayoutWidgetTL
// 0x00A8 (0x01B0 - 0x0108)
class UTextLayoutWidgetTL : public UWidget
{
public:
	uint8                                         Pad_108[0x10];                                     // 0x0108(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FShapedTextOptions                     ShapedTextOptions;                                 // 0x0118(0x0003)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	ETextJustifyTL                                Justification;                                     // 0x011B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextWrappingPolicy                           WrappingPolicy;                                    // 0x011C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         AutoWrapText : 1;                                  // 0x011D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_11E[0x2];                                      // 0x011E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WrapTextAt;                                        // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         DynamicAutoWrapText : 1;                           // 0x0124(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	bool                                          bUseWrapScaling;                                   // 0x0125(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_126[0x2];                                      // 0x0126(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinWrapLimitOverFontSize;                          // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, int32>                    LanguageMinWrapLimitOverFontSizeMap;               // 0x0130(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	ETLTextWrapLimitOverRule                      WrapLimitOverRule;                                 // 0x0180(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WrapTextHeight;                                    // 0x0184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RollingSpeed;                                      // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                Margin;                                            // 0x018C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	float                                         LineHeightPercentage;                              // 0x019C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseTextFontScale;                                 // 0x01A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A1[0xF];                                      // 0x01A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetJustification(ETextJustifyTL InJustification);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextLayoutWidgetTL">();
	}
	static class UTextLayoutWidgetTL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextLayoutWidgetTL>();
	}
};
static_assert(alignof(UTextLayoutWidgetTL) == 0x000008, "Wrong alignment on UTextLayoutWidgetTL");
static_assert(sizeof(UTextLayoutWidgetTL) == 0x0001B0, "Wrong size on UTextLayoutWidgetTL");
static_assert(offsetof(UTextLayoutWidgetTL, ShapedTextOptions) == 0x000118, "Member 'UTextLayoutWidgetTL::ShapedTextOptions' has a wrong offset!");
static_assert(offsetof(UTextLayoutWidgetTL, Justification) == 0x00011B, "Member 'UTextLayoutWidgetTL::Justification' has a wrong offset!");
static_assert(offsetof(UTextLayoutWidgetTL, WrappingPolicy) == 0x00011C, "Member 'UTextLayoutWidgetTL::WrappingPolicy' has a wrong offset!");
static_assert(offsetof(UTextLayoutWidgetTL, WrapTextAt) == 0x000120, "Member 'UTextLayoutWidgetTL::WrapTextAt' has a wrong offset!");
static_assert(offsetof(UTextLayoutWidgetTL, bUseWrapScaling) == 0x000125, "Member 'UTextLayoutWidgetTL::bUseWrapScaling' has a wrong offset!");
static_assert(offsetof(UTextLayoutWidgetTL, MinWrapLimitOverFontSize) == 0x000128, "Member 'UTextLayoutWidgetTL::MinWrapLimitOverFontSize' has a wrong offset!");
static_assert(offsetof(UTextLayoutWidgetTL, LanguageMinWrapLimitOverFontSizeMap) == 0x000130, "Member 'UTextLayoutWidgetTL::LanguageMinWrapLimitOverFontSizeMap' has a wrong offset!");
static_assert(offsetof(UTextLayoutWidgetTL, WrapLimitOverRule) == 0x000180, "Member 'UTextLayoutWidgetTL::WrapLimitOverRule' has a wrong offset!");
static_assert(offsetof(UTextLayoutWidgetTL, WrapTextHeight) == 0x000184, "Member 'UTextLayoutWidgetTL::WrapTextHeight' has a wrong offset!");
static_assert(offsetof(UTextLayoutWidgetTL, RollingSpeed) == 0x000188, "Member 'UTextLayoutWidgetTL::RollingSpeed' has a wrong offset!");
static_assert(offsetof(UTextLayoutWidgetTL, Margin) == 0x00018C, "Member 'UTextLayoutWidgetTL::Margin' has a wrong offset!");
static_assert(offsetof(UTextLayoutWidgetTL, LineHeightPercentage) == 0x00019C, "Member 'UTextLayoutWidgetTL::LineHeightPercentage' has a wrong offset!");
static_assert(offsetof(UTextLayoutWidgetTL, bUseTextFontScale) == 0x0001A0, "Member 'UTextLayoutWidgetTL::bUseTextFontScale' has a wrong offset!");

// Class TLUI.TLAdvancedMarkupHelper
// 0x0028 (0x0050 - 0x0028)
class UTLAdvancedMarkupHelper final : public UObject
{
public:
	uint8                                         Pad_28[0x28];                                      // 0x0028(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLAdvancedMarkupHelper">();
	}
	static class UTLAdvancedMarkupHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLAdvancedMarkupHelper>();
	}
};
static_assert(alignof(UTLAdvancedMarkupHelper) == 0x000008, "Wrong alignment on UTLAdvancedMarkupHelper");
static_assert(sizeof(UTLAdvancedMarkupHelper) == 0x000050, "Wrong size on UTLAdvancedMarkupHelper");

// Class TLUI.TLAttachPanel
// 0x0018 (0x02E8 - 0x02D0)
class UTLAttachPanel final : public UTLCanvasPanel
{
public:
	TArray<struct FTLAttachedWidget>              PreviewFrameList;                                  // 0x02D0(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	ETLUIPlatform                                 PreviewUIPlatform;                                 // 0x02E0(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLAttachPanel">();
	}
	static class UTLAttachPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLAttachPanel>();
	}
};
static_assert(alignof(UTLAttachPanel) == 0x000008, "Wrong alignment on UTLAttachPanel");
static_assert(sizeof(UTLAttachPanel) == 0x0002E8, "Wrong size on UTLAttachPanel");
static_assert(offsetof(UTLAttachPanel, PreviewFrameList) == 0x0002D0, "Member 'UTLAttachPanel::PreviewFrameList' has a wrong offset!");
static_assert(offsetof(UTLAttachPanel, PreviewUIPlatform) == 0x0002E0, "Member 'UTLAttachPanel::PreviewUIPlatform' has a wrong offset!");

// Class TLUI.TLBackgroundBlur
// 0x00F0 (0x02C8 - 0x01D8)
class UTLBackgroundBlur final : public UBackgroundBlur
{
public:
	uint8                                         Pad_1D8[0x60];                                     // 0x01D8(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x023C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0248(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0288(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLBackgroundBlur">();
	}
	static class UTLBackgroundBlur* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLBackgroundBlur>();
	}
};
static_assert(alignof(UTLBackgroundBlur) == 0x000008, "Wrong alignment on UTLBackgroundBlur");
static_assert(sizeof(UTLBackgroundBlur) == 0x0002C8, "Wrong size on UTLBackgroundBlur");
static_assert(offsetof(UTLBackgroundBlur, TLVisibility) == 0x000238, "Member 'UTLBackgroundBlur::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLBackgroundBlur, TooltipPositionData) == 0x00023C, "Member 'UTLBackgroundBlur::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLBackgroundBlur, VisibleBinding) == 0x000248, "Member 'UTLBackgroundBlur::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLBackgroundBlur, EnabledBinding) == 0x000288, "Member 'UTLBackgroundBlur::EnabledBinding' has a wrong offset!");

// Class TLUI.TLBorder
// 0x0100 (0x0370 - 0x0270)
class UTLBorder final : public UBorder
{
public:
	uint8                                         Pad_270[0x60];                                     // 0x0270(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x02D4(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x02E0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0320(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_360[0x10];                                     // 0x0360(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();
	void SetBrushFromSoftObjectPath(const struct FSoftObjectPath& Path, bool bInAsyncLoad);
	void SetBrushFromSprite(class UPaperSprite* Sprite);
	void SetBrushTintColorWithColorTable(class FName InTableColorKey);
	void SetContentColorWithColorTable(class FName InTableColorKey);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLBorder">();
	}
	static class UTLBorder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLBorder>();
	}
};
static_assert(alignof(UTLBorder) == 0x000008, "Wrong alignment on UTLBorder");
static_assert(sizeof(UTLBorder) == 0x000370, "Wrong size on UTLBorder");
static_assert(offsetof(UTLBorder, TLVisibility) == 0x0002D0, "Member 'UTLBorder::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLBorder, TooltipPositionData) == 0x0002D4, "Member 'UTLBorder::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLBorder, VisibleBinding) == 0x0002E0, "Member 'UTLBorder::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLBorder, EnabledBinding) == 0x000320, "Member 'UTLBorder::EnabledBinding' has a wrong offset!");

// Class TLUI.TLButton
// 0x0120 (0x0548 - 0x0428)
class UTLButton final : public UButton
{
public:
	uint8                                         Pad_428[0x60];                                     // 0x0428(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x048C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0498(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x04D8(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UTLSoundEvent*                          OnClickWEvent;                                     // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLSoundEvent*                          OnPressWEvent;                                     // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLSoundEvent*                          OnReleaseWEvent;                                   // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLSoundEvent*                          OnHoverWEvent;                                     // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLSoundEvent*                          OnUnhoverWEvent;                                   // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLCursorSnappingType                         CursorSnappingType;                                // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_541[0x7];                                      // 0x0541(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();
	void OnClickHandler();
	void OnHoverHandler();
	void OnPressHandler();
	void OnReleaseHandler();
	void OnUnhoverHandler();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLButton">();
	}
	static class UTLButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLButton>();
	}
};
static_assert(alignof(UTLButton) == 0x000008, "Wrong alignment on UTLButton");
static_assert(sizeof(UTLButton) == 0x000548, "Wrong size on UTLButton");
static_assert(offsetof(UTLButton, TLVisibility) == 0x000488, "Member 'UTLButton::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLButton, TooltipPositionData) == 0x00048C, "Member 'UTLButton::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLButton, VisibleBinding) == 0x000498, "Member 'UTLButton::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLButton, EnabledBinding) == 0x0004D8, "Member 'UTLButton::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLButton, OnClickWEvent) == 0x000518, "Member 'UTLButton::OnClickWEvent' has a wrong offset!");
static_assert(offsetof(UTLButton, OnPressWEvent) == 0x000520, "Member 'UTLButton::OnPressWEvent' has a wrong offset!");
static_assert(offsetof(UTLButton, OnReleaseWEvent) == 0x000528, "Member 'UTLButton::OnReleaseWEvent' has a wrong offset!");
static_assert(offsetof(UTLButton, OnHoverWEvent) == 0x000530, "Member 'UTLButton::OnHoverWEvent' has a wrong offset!");
static_assert(offsetof(UTLButton, OnUnhoverWEvent) == 0x000538, "Member 'UTLButton::OnUnhoverWEvent' has a wrong offset!");
static_assert(offsetof(UTLButton, CursorSnappingType) == 0x000540, "Member 'UTLButton::CursorSnappingType' has a wrong offset!");

// Class TLUI.TLCheckBox
// 0x0128 (0x0898 - 0x0770)
class UTLCheckBox : public UCheckBox
{
public:
	uint8                                         Pad_770[0x60];                                     // 0x0770(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x07D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x07D4(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x07E0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0820(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UTLSoundEvent*                          OnCheckSound;                                      // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLSoundEvent*                          OnUncheckSound;                                    // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLSoundEvent*                          OnHoverSound;                                      // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLSoundEvent*                          OnUnhoverSound;                                    // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChecked;                                         // 0x0880(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_890[0x8];                                      // 0x0890(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();
	void OnTLCheckStateChangedCallback(bool IsChecked_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLCheckBox">();
	}
	static class UTLCheckBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLCheckBox>();
	}
};
static_assert(alignof(UTLCheckBox) == 0x000008, "Wrong alignment on UTLCheckBox");
static_assert(sizeof(UTLCheckBox) == 0x000898, "Wrong size on UTLCheckBox");
static_assert(offsetof(UTLCheckBox, TLVisibility) == 0x0007D0, "Member 'UTLCheckBox::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLCheckBox, TooltipPositionData) == 0x0007D4, "Member 'UTLCheckBox::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLCheckBox, VisibleBinding) == 0x0007E0, "Member 'UTLCheckBox::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLCheckBox, EnabledBinding) == 0x000820, "Member 'UTLCheckBox::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLCheckBox, OnCheckSound) == 0x000860, "Member 'UTLCheckBox::OnCheckSound' has a wrong offset!");
static_assert(offsetof(UTLCheckBox, OnUncheckSound) == 0x000868, "Member 'UTLCheckBox::OnUncheckSound' has a wrong offset!");
static_assert(offsetof(UTLCheckBox, OnHoverSound) == 0x000870, "Member 'UTLCheckBox::OnHoverSound' has a wrong offset!");
static_assert(offsetof(UTLCheckBox, OnUnhoverSound) == 0x000878, "Member 'UTLCheckBox::OnUnhoverSound' has a wrong offset!");
static_assert(offsetof(UTLCheckBox, OnChecked) == 0x000880, "Member 'UTLCheckBox::OnChecked' has a wrong offset!");

// Class TLUI.TLCircularThrobber
// 0x00F0 (0x02B0 - 0x01C0)
class UTLCircularThrobber final : public UCircularThrobber
{
public:
	uint8                                         Pad_1C0[0x60];                                     // 0x01C0(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x0224(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0230(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0270(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLCircularThrobber">();
	}
	static class UTLCircularThrobber* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLCircularThrobber>();
	}
};
static_assert(alignof(UTLCircularThrobber) == 0x000008, "Wrong alignment on UTLCircularThrobber");
static_assert(sizeof(UTLCircularThrobber) == 0x0002B0, "Wrong size on UTLCircularThrobber");
static_assert(offsetof(UTLCircularThrobber, TLVisibility) == 0x000220, "Member 'UTLCircularThrobber::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLCircularThrobber, TooltipPositionData) == 0x000224, "Member 'UTLCircularThrobber::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLCircularThrobber, VisibleBinding) == 0x000230, "Member 'UTLCircularThrobber::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLCircularThrobber, EnabledBinding) == 0x000270, "Member 'UTLCircularThrobber::EnabledBinding' has a wrong offset!");

// Class TLUI.TLComboBoxString
// 0x0D38 (0x1B48 - 0x0E10)
class UTLComboBoxString final : public UComboBoxStringTL
{
public:
	uint8                                         Pad_E10[0x60];                                     // 0x0E10(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0E70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x0E74(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0E80(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0EC0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UTLSoundEvent*                          OnSelectionChangedSound;                           // 0x0F00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLSoundEvent*                          OnOpeningSound;                                    // 0x0F08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCustomScrollbar;                                 // 0x0F10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F11[0x7];                                      // 0x0F11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScrollBarStyle                        WidgetScrollbarStyle;                              // 0x0F18(0x05E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bCustomScrollBarStyle;                             // 0x14F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14F9[0x7];                                     // 0x14F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScrollBarStyle                        ScrollBarStyleConsole;                             // 0x1500(0x05E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bCustomScrollBarStyleConsole;                      // 0x1AE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AE1[0x3];                                     // 0x1AE1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ScrollbarThickness;                                // 0x1AE4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                ScrollbarPadding;                                  // 0x1AEC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                ScrollbarTrackPadding;                             // 0x1AFC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                ScrollbarPaddingConsole;                           // 0x1B0C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ScrollbarThicknessConsole;                         // 0x1B1C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                ScrollbarTrackPaddingConsole;                      // 0x1B24(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B34[0x14];                                    // 0x1B34(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();
	void OnOpeningHandler();
	void OnSelectionChangedHandler(const class FString& SelectedItem, ESelectInfo SelectionType);
	void SetMenuPlacement(EMenuPlacement InMenuPlacement);
	void SetSelectedOptionIndex(const int32 Index_0);

	int32 GetSelectedOptionIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLComboBoxString">();
	}
	static class UTLComboBoxString* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLComboBoxString>();
	}
};
static_assert(alignof(UTLComboBoxString) == 0x000008, "Wrong alignment on UTLComboBoxString");
static_assert(sizeof(UTLComboBoxString) == 0x001B48, "Wrong size on UTLComboBoxString");
static_assert(offsetof(UTLComboBoxString, TLVisibility) == 0x000E70, "Member 'UTLComboBoxString::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLComboBoxString, TooltipPositionData) == 0x000E74, "Member 'UTLComboBoxString::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLComboBoxString, VisibleBinding) == 0x000E80, "Member 'UTLComboBoxString::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLComboBoxString, EnabledBinding) == 0x000EC0, "Member 'UTLComboBoxString::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLComboBoxString, OnSelectionChangedSound) == 0x000F00, "Member 'UTLComboBoxString::OnSelectionChangedSound' has a wrong offset!");
static_assert(offsetof(UTLComboBoxString, OnOpeningSound) == 0x000F08, "Member 'UTLComboBoxString::OnOpeningSound' has a wrong offset!");
static_assert(offsetof(UTLComboBoxString, IsCustomScrollbar) == 0x000F10, "Member 'UTLComboBoxString::IsCustomScrollbar' has a wrong offset!");
static_assert(offsetof(UTLComboBoxString, WidgetScrollbarStyle) == 0x000F18, "Member 'UTLComboBoxString::WidgetScrollbarStyle' has a wrong offset!");
static_assert(offsetof(UTLComboBoxString, bCustomScrollBarStyle) == 0x0014F8, "Member 'UTLComboBoxString::bCustomScrollBarStyle' has a wrong offset!");
static_assert(offsetof(UTLComboBoxString, ScrollBarStyleConsole) == 0x001500, "Member 'UTLComboBoxString::ScrollBarStyleConsole' has a wrong offset!");
static_assert(offsetof(UTLComboBoxString, bCustomScrollBarStyleConsole) == 0x001AE0, "Member 'UTLComboBoxString::bCustomScrollBarStyleConsole' has a wrong offset!");
static_assert(offsetof(UTLComboBoxString, ScrollbarThickness) == 0x001AE4, "Member 'UTLComboBoxString::ScrollbarThickness' has a wrong offset!");
static_assert(offsetof(UTLComboBoxString, ScrollbarPadding) == 0x001AEC, "Member 'UTLComboBoxString::ScrollbarPadding' has a wrong offset!");
static_assert(offsetof(UTLComboBoxString, ScrollbarTrackPadding) == 0x001AFC, "Member 'UTLComboBoxString::ScrollbarTrackPadding' has a wrong offset!");
static_assert(offsetof(UTLComboBoxString, ScrollbarPaddingConsole) == 0x001B0C, "Member 'UTLComboBoxString::ScrollbarPaddingConsole' has a wrong offset!");
static_assert(offsetof(UTLComboBoxString, ScrollbarThicknessConsole) == 0x001B1C, "Member 'UTLComboBoxString::ScrollbarThicknessConsole' has a wrong offset!");
static_assert(offsetof(UTLComboBoxString, ScrollbarTrackPaddingConsole) == 0x001B24, "Member 'UTLComboBoxString::ScrollbarTrackPaddingConsole' has a wrong offset!");

// Class TLUI.TLUIInputModeHelper
// 0x0020 (0x0048 - 0x0028)
class UTLUIInputModeHelper final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLUIInputModeHelper">();
	}
	static class UTLUIInputModeHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLUIInputModeHelper>();
	}
};
static_assert(alignof(UTLUIInputModeHelper) == 0x000008, "Wrong alignment on UTLUIInputModeHelper");
static_assert(sizeof(UTLUIInputModeHelper) == 0x000048, "Wrong size on UTLUIInputModeHelper");

// Class TLUI.TLContentsSlot
// 0x0048 (0x0150 - 0x0108)
class UTLContentsSlot final : public UWidget
{
public:
	uint8                                         Pad_108[0x10];                                     // 0x0108(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ContentsWidgetClass;                               // 0x0118(0x0028)(Edit, DisableEditOnTemplate, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWidgetSyncLoad;                                   // 0x0140(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ContentsWidget;                                    // 0x0148(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLContentsSlot">();
	}
	static class UTLContentsSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLContentsSlot>();
	}
};
static_assert(alignof(UTLContentsSlot) == 0x000008, "Wrong alignment on UTLContentsSlot");
static_assert(sizeof(UTLContentsSlot) == 0x000150, "Wrong size on UTLContentsSlot");
static_assert(offsetof(UTLContentsSlot, ContentsWidgetClass) == 0x000118, "Member 'UTLContentsSlot::ContentsWidgetClass' has a wrong offset!");
static_assert(offsetof(UTLContentsSlot, bWidgetSyncLoad) == 0x000140, "Member 'UTLContentsSlot::bWidgetSyncLoad' has a wrong offset!");
static_assert(offsetof(UTLContentsSlot, ContentsWidget) == 0x000148, "Member 'UTLContentsSlot::ContentsWidget' has a wrong offset!");

// Class TLUI.TLDynamicEntryBox
// 0x0190 (0x0370 - 0x01E0)
class UTLDynamicEntryBox final : public UDynamicEntryBox
{
public:
	uint8                                         Pad_1E0[0x80];                                     // 0x01E0(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x0264(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0270(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x02B0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetFocusableData                 TLFocusableData;                                   // 0x02F0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_308[0x10];                                     // 0x0308(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WrapWidth;                                         // 0x0318(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplicitWrapWidth;                                // 0x031C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonAreaType                              MyAutonAreaType;                                   // 0x031D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31E[0x2];                                      // 0x031E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaGroupIdValue;                             // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutonAreaOrderTagValue;                            // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFence;                                    // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDome;                                     // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarPrevFirstBeforeLeaveFlag;              // 0x032A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoRecentAreaWhenLeaveFlag;                // 0x032B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoBackAreaWhenLeaveFlag;                  // 0x032C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoAreaByOrderTagHintWhenLeaveFlag;        // 0x032D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonOrderTagHint                          AutonAreaLeaveOrderTagHintValue;                   // 0x032E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32F[0x1];                                      // 0x032F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaLeaveGivenOrderTagValue;                  // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstThenCardinalEnterFlag;          // 0x0334(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstWhenFarCardinalEnterFlag;       // 0x0335(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaTakeRecentIfExistWhenCardinalEnterFlag;   // 0x0336(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonChildNavigationHint                   AutonAreaChildNavigatingHint;                      // 0x0337(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarNavigationWhenShortCardinalFailedFlag; // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds; // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AutonAreaCardinalNavigationWeightValue;            // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseHitOnRoad;                         // 0x0354(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseNearest;                           // 0x0355(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaHaveNosyNeighborsFlag;                    // 0x0356(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaCouldBeLookingAreaFlag;                   // 0x0357(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                AutonAreaLookingFeedbackWidget;                    // 0x0358(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ITLWidgetVisibilityInterface> AutonAreaFocusPresenter;                           // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLDynamicEntryBox">();
	}
	static class UTLDynamicEntryBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLDynamicEntryBox>();
	}
};
static_assert(alignof(UTLDynamicEntryBox) == 0x000008, "Wrong alignment on UTLDynamicEntryBox");
static_assert(sizeof(UTLDynamicEntryBox) == 0x000370, "Wrong size on UTLDynamicEntryBox");
static_assert(offsetof(UTLDynamicEntryBox, TLVisibility) == 0x000260, "Member 'UTLDynamicEntryBox::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, TooltipPositionData) == 0x000264, "Member 'UTLDynamicEntryBox::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, VisibleBinding) == 0x000270, "Member 'UTLDynamicEntryBox::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, EnabledBinding) == 0x0002B0, "Member 'UTLDynamicEntryBox::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, TLFocusableData) == 0x0002F0, "Member 'UTLDynamicEntryBox::TLFocusableData' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, WrapWidth) == 0x000318, "Member 'UTLDynamicEntryBox::WrapWidth' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, bExplicitWrapWidth) == 0x00031C, "Member 'UTLDynamicEntryBox::bExplicitWrapWidth' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, MyAutonAreaType) == 0x00031D, "Member 'UTLDynamicEntryBox::MyAutonAreaType' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaGroupIdValue) == 0x000320, "Member 'UTLDynamicEntryBox::AutonAreaGroupIdValue' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaOrderTagValue) == 0x000324, "Member 'UTLDynamicEntryBox::AutonAreaOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaFence) == 0x000328, "Member 'UTLDynamicEntryBox::AutonAreaFence' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaDome) == 0x000329, "Member 'UTLDynamicEntryBox::AutonAreaDome' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaFarPrevFirstBeforeLeaveFlag) == 0x00032A, "Member 'UTLDynamicEntryBox::AutonAreaFarPrevFirstBeforeLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaGoRecentAreaWhenLeaveFlag) == 0x00032B, "Member 'UTLDynamicEntryBox::AutonAreaGoRecentAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaGoBackAreaWhenLeaveFlag) == 0x00032C, "Member 'UTLDynamicEntryBox::AutonAreaGoBackAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaGoAreaByOrderTagHintWhenLeaveFlag) == 0x00032D, "Member 'UTLDynamicEntryBox::AutonAreaGoAreaByOrderTagHintWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaLeaveOrderTagHintValue) == 0x00032E, "Member 'UTLDynamicEntryBox::AutonAreaLeaveOrderTagHintValue' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaLeaveGivenOrderTagValue) == 0x000330, "Member 'UTLDynamicEntryBox::AutonAreaLeaveGivenOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaOrderFirstThenCardinalEnterFlag) == 0x000334, "Member 'UTLDynamicEntryBox::AutonAreaOrderFirstThenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaOrderFirstWhenFarCardinalEnterFlag) == 0x000335, "Member 'UTLDynamicEntryBox::AutonAreaOrderFirstWhenFarCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaTakeRecentIfExistWhenCardinalEnterFlag) == 0x000336, "Member 'UTLDynamicEntryBox::AutonAreaTakeRecentIfExistWhenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaChildNavigatingHint) == 0x000337, "Member 'UTLDynamicEntryBox::AutonAreaChildNavigatingHint' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaFarNavigationWhenShortCardinalFailedFlag) == 0x000338, "Member 'UTLDynamicEntryBox::AutonAreaFarNavigationWhenShortCardinalFailedFlag' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds) == 0x000340, "Member 'UTLDynamicEntryBox::AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaCardinalNavigationWeightValue) == 0x000350, "Member 'UTLDynamicEntryBox::AutonAreaCardinalNavigationWeightValue' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaDontUseHitOnRoad) == 0x000354, "Member 'UTLDynamicEntryBox::AutonAreaDontUseHitOnRoad' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaDontUseNearest) == 0x000355, "Member 'UTLDynamicEntryBox::AutonAreaDontUseNearest' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaHaveNosyNeighborsFlag) == 0x000356, "Member 'UTLDynamicEntryBox::AutonAreaHaveNosyNeighborsFlag' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaCouldBeLookingAreaFlag) == 0x000357, "Member 'UTLDynamicEntryBox::AutonAreaCouldBeLookingAreaFlag' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaLookingFeedbackWidget) == 0x000358, "Member 'UTLDynamicEntryBox::AutonAreaLookingFeedbackWidget' has a wrong offset!");
static_assert(offsetof(UTLDynamicEntryBox, AutonAreaFocusPresenter) == 0x000360, "Member 'UTLDynamicEntryBox::AutonAreaFocusPresenter' has a wrong offset!");

// Class TLUI.TLEditableText
// 0x00F0 (0x0550 - 0x0460)
class UTLEditableText final : public UEditableText
{
public:
	uint8                                         Pad_460[0x60];                                     // 0x0460(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x04C4(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x04D0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0510(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLEditableText">();
	}
	static class UTLEditableText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLEditableText>();
	}
};
static_assert(alignof(UTLEditableText) == 0x000008, "Wrong alignment on UTLEditableText");
static_assert(sizeof(UTLEditableText) == 0x000550, "Wrong size on UTLEditableText");
static_assert(offsetof(UTLEditableText, TLVisibility) == 0x0004C0, "Member 'UTLEditableText::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLEditableText, TooltipPositionData) == 0x0004C4, "Member 'UTLEditableText::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLEditableText, VisibleBinding) == 0x0004D0, "Member 'UTLEditableText::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLEditableText, EnabledBinding) == 0x000510, "Member 'UTLEditableText::EnabledBinding' has a wrong offset!");

// Class TLUI.TLEditableTextBox
// 0x0E18 (0x0F20 - 0x0108)
class UTLEditableTextBox final : public UWidget
{
public:
	uint8                                         Pad_108[0x68];                                     // 0x0108(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0170(0x0018)(Edit, NativeAccessSpecifierPublic)
	TDelegate<void()>                             TextDelegate;                                      // 0x0188(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FEditableTextBoxStyle                  WidgetStyle;                                       // 0x0198(0x0908)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USlateWidgetStyleAsset*                 Style;                                             // 0x0AA0(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   HintText;                                          // 0x0AA8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             HintTextDelegate;                                  // 0x0AC0(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x0AD0(0x0058)(Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ForegroundColor;                                   // 0x0B28(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x0B38(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReadOnlyForegroundColor;                           // 0x0B48(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReadOnly;                                        // 0x0B58(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPassword;                                        // 0x0B59(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5A[0x2];                                      // 0x0B5A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumDesiredWidth;                               // 0x0B5C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x0B60(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsCaretMovedWhenGainFocus;                         // 0x0B70(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelectAllTextWhenFocused;                          // 0x0B71(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RevertTextOnEscape;                                // 0x0B72(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearKeyboardFocusOnCommit;                        // 0x0B73(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelectAllTextOnCommit;                             // 0x0B74(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowContextMenu;                                  // 0x0B75(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreFocusLostCommited;                           // 0x0B76(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReplyUnhandledWhenVirtualAcceptKeyDown;            // 0x0B77(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVirtualKeyboardType                          KeyboardType;                                      // 0x0B78(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVirtualKeyboardOptions                VirtualKeyboardOptions;                            // 0x0B79(0x0001)(Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EVirtualKeyboardDismissAction                 VirtualKeyboardDismissAction;                      // 0x0B7A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomVirtualKeyboardKeyIconPosition;             // 0x0B7B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                VirtualKeyboardKeyIconMargin;                      // 0x0B7C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          VirtualKeyboardKeyIconHorizontalAlignment;         // 0x0B8C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VirtualKeyboardKeyIconVerticalAlignment;           // 0x0B8D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJustifyTL                                Justification;                                     // 0x0B8E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FShapedTextOptions                     ShapedTextOptions;                                 // 0x0B8F(0x0003)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_B92[0x6];                                      // 0x0B92(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnTextChanged;                                     // 0x0B98(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTextCommitted;                                   // 0x0BA8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTextFocusReceived;                               // 0x0BB8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTextFocusLost;                                   // 0x0BC8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTextMouseButtonDown;                             // 0x0BD8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_BE8[0x30];                                     // 0x0BE8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTLTextBlockDecorator*>          DecoratorObjects;                                  // 0x0C18(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_C28[0x238];                                    // 0x0C28(0x0238)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0E60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x0E64(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetFocusableData                 TLFocusableData;                                   // 0x0E70(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_E88[0x10];                                     // 0x0E88(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0E98(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0ED8(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         MaxChar;                                           // 0x0F18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCustomWidgetStyle;                                // 0x0F1C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETLEditableBoxEscapeAction                    EscapeAction;                                      // 0x0F1D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F1E[0x2];                                      // 0x0F1E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearError();
	void HandleUpdateEnabled();
	void HandleUpdateVisible();
	void OnEditableTextBoxChangedEvent__DelegateSignature(const class FText& Text_0);
	void OnEditableTextBoxCommittedEvent__DelegateSignature(const class FText& Text_0, ETextCommit CommitMethod);
	void OnEditableTextFocusLostEvent__DelegateSignature(const struct FFocusEvent& InFocusEvent);
	void OnEditableTextFocusReceivedEvent__DelegateSignature(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent);
	void OnEditableTextMouseButtonDownEvent__DelegateSignature(const struct FGeometry& MyGeometry, const struct FPointerEvent& InMouseEvent);
	void SelectAllText();
	void SetError(const class FText& InError);
	void SetEscapeAction(ETLEditableBoxEscapeAction InEscapeAction);
	void SetHintText(const class FText& InText);
	void SetIgnoreFocusLostCommited(bool InIsIgnore);
	void SetIsPassword(bool bIsPassword);
	void SetIsReadOnly(bool bReadOnly);
	void SetMaxChar(int32 InMaxChar);
	void SetReplyUnhandledWhenVirtualAcceptKeyDown(bool InReplyUnhandled);
	void SetText(const class FText& InText);

	class FText GetText() const;
	bool HasError() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLEditableTextBox">();
	}
	static class UTLEditableTextBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLEditableTextBox>();
	}
};
static_assert(alignof(UTLEditableTextBox) == 0x000008, "Wrong alignment on UTLEditableTextBox");
static_assert(sizeof(UTLEditableTextBox) == 0x000F20, "Wrong size on UTLEditableTextBox");
static_assert(offsetof(UTLEditableTextBox, Text) == 0x000170, "Member 'UTLEditableTextBox::Text' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, TextDelegate) == 0x000188, "Member 'UTLEditableTextBox::TextDelegate' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, WidgetStyle) == 0x000198, "Member 'UTLEditableTextBox::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, Style) == 0x000AA0, "Member 'UTLEditableTextBox::Style' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, HintText) == 0x000AA8, "Member 'UTLEditableTextBox::HintText' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, HintTextDelegate) == 0x000AC0, "Member 'UTLEditableTextBox::HintTextDelegate' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, Font) == 0x000AD0, "Member 'UTLEditableTextBox::Font' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, ForegroundColor) == 0x000B28, "Member 'UTLEditableTextBox::ForegroundColor' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, BackgroundColor) == 0x000B38, "Member 'UTLEditableTextBox::BackgroundColor' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, ReadOnlyForegroundColor) == 0x000B48, "Member 'UTLEditableTextBox::ReadOnlyForegroundColor' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, IsReadOnly) == 0x000B58, "Member 'UTLEditableTextBox::IsReadOnly' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, IsPassword) == 0x000B59, "Member 'UTLEditableTextBox::IsPassword' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, MinimumDesiredWidth) == 0x000B5C, "Member 'UTLEditableTextBox::MinimumDesiredWidth' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, Padding) == 0x000B60, "Member 'UTLEditableTextBox::Padding' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, IsCaretMovedWhenGainFocus) == 0x000B70, "Member 'UTLEditableTextBox::IsCaretMovedWhenGainFocus' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, SelectAllTextWhenFocused) == 0x000B71, "Member 'UTLEditableTextBox::SelectAllTextWhenFocused' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, RevertTextOnEscape) == 0x000B72, "Member 'UTLEditableTextBox::RevertTextOnEscape' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, ClearKeyboardFocusOnCommit) == 0x000B73, "Member 'UTLEditableTextBox::ClearKeyboardFocusOnCommit' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, SelectAllTextOnCommit) == 0x000B74, "Member 'UTLEditableTextBox::SelectAllTextOnCommit' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, AllowContextMenu) == 0x000B75, "Member 'UTLEditableTextBox::AllowContextMenu' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, IgnoreFocusLostCommited) == 0x000B76, "Member 'UTLEditableTextBox::IgnoreFocusLostCommited' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, ReplyUnhandledWhenVirtualAcceptKeyDown) == 0x000B77, "Member 'UTLEditableTextBox::ReplyUnhandledWhenVirtualAcceptKeyDown' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, KeyboardType) == 0x000B78, "Member 'UTLEditableTextBox::KeyboardType' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, VirtualKeyboardOptions) == 0x000B79, "Member 'UTLEditableTextBox::VirtualKeyboardOptions' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, VirtualKeyboardDismissAction) == 0x000B7A, "Member 'UTLEditableTextBox::VirtualKeyboardDismissAction' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, bCustomVirtualKeyboardKeyIconPosition) == 0x000B7B, "Member 'UTLEditableTextBox::bCustomVirtualKeyboardKeyIconPosition' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, VirtualKeyboardKeyIconMargin) == 0x000B7C, "Member 'UTLEditableTextBox::VirtualKeyboardKeyIconMargin' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, VirtualKeyboardKeyIconHorizontalAlignment) == 0x000B8C, "Member 'UTLEditableTextBox::VirtualKeyboardKeyIconHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, VirtualKeyboardKeyIconVerticalAlignment) == 0x000B8D, "Member 'UTLEditableTextBox::VirtualKeyboardKeyIconVerticalAlignment' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, Justification) == 0x000B8E, "Member 'UTLEditableTextBox::Justification' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, ShapedTextOptions) == 0x000B8F, "Member 'UTLEditableTextBox::ShapedTextOptions' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, OnTextChanged) == 0x000B98, "Member 'UTLEditableTextBox::OnTextChanged' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, OnTextCommitted) == 0x000BA8, "Member 'UTLEditableTextBox::OnTextCommitted' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, OnTextFocusReceived) == 0x000BB8, "Member 'UTLEditableTextBox::OnTextFocusReceived' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, OnTextFocusLost) == 0x000BC8, "Member 'UTLEditableTextBox::OnTextFocusLost' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, OnTextMouseButtonDown) == 0x000BD8, "Member 'UTLEditableTextBox::OnTextMouseButtonDown' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, DecoratorObjects) == 0x000C18, "Member 'UTLEditableTextBox::DecoratorObjects' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, TLVisibility) == 0x000E60, "Member 'UTLEditableTextBox::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, TooltipPositionData) == 0x000E64, "Member 'UTLEditableTextBox::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, TLFocusableData) == 0x000E70, "Member 'UTLEditableTextBox::TLFocusableData' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, VisibleBinding) == 0x000E98, "Member 'UTLEditableTextBox::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, EnabledBinding) == 0x000ED8, "Member 'UTLEditableTextBox::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, MaxChar) == 0x000F18, "Member 'UTLEditableTextBox::MaxChar' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, bCustomWidgetStyle) == 0x000F1C, "Member 'UTLEditableTextBox::bCustomWidgetStyle' has a wrong offset!");
static_assert(offsetof(UTLEditableTextBox, EscapeAction) == 0x000F1D, "Member 'UTLEditableTextBox::EscapeAction' has a wrong offset!");

// Class TLUI.TLExpandableArea
// 0x00F0 (0x0428 - 0x0338)
class UTLExpandableArea final : public UExpandableArea
{
public:
	uint8                                         Pad_338[0x60];                                     // 0x0338(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x039C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x03A8(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x03E8(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLExpandableArea">();
	}
	static class UTLExpandableArea* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLExpandableArea>();
	}
};
static_assert(alignof(UTLExpandableArea) == 0x000008, "Wrong alignment on UTLExpandableArea");
static_assert(sizeof(UTLExpandableArea) == 0x000428, "Wrong size on UTLExpandableArea");
static_assert(offsetof(UTLExpandableArea, TLVisibility) == 0x000398, "Member 'UTLExpandableArea::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLExpandableArea, TooltipPositionData) == 0x00039C, "Member 'UTLExpandableArea::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLExpandableArea, VisibleBinding) == 0x0003A8, "Member 'UTLExpandableArea::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLExpandableArea, EnabledBinding) == 0x0003E8, "Member 'UTLExpandableArea::EnabledBinding' has a wrong offset!");

// Class TLUI.TLImageBase
// 0x03A0 (0x04A8 - 0x0108)
class UTLImageBase : public UWidget
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0108(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bUseHoverBrush;                                    // 0x0190(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            HoverBrush;                                        // 0x0198(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bHoverWhenParentHovered;                           // 0x0220(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePressBrush;                                    // 0x0221(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222[0x6];                                      // 0x0222(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            PressBrush;                                        // 0x0228(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bUseCheckBrush;                                    // 0x02B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CheckBrush;                                        // 0x02B8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CheckHoverBrush;                                   // 0x0340(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             BrushDelegate;                                     // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             HoverBrushDelegate;                                // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             PressBrushDelegate;                                // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             CheckBrushDelegate;                                // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             CheckHoverBrushDelegate;                           // 0x0408(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0418(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ColorAndOpacityDelegate;                           // 0x0428(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFlipForRightToLeftFlowDirection;                  // 0x0438(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDisableColorAndOpacity;                        // 0x0439(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43A[0x2];                                      // 0x043A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DisabledTint;                                      // 0x043C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             DisabledTintDelegate;                              // 0x044C(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent)> OnMouseButtonDownEvent;                            // 0x045C(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_46C[0x3C];                                     // 0x046C(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMaterialInstanceDynamic* GetDynamicMaterial();
	void PlayOrCloseBinkMediaPlayer(bool bInPlay);
	void SetBrush(const struct FSlateBrush& InBrush);
	void SetBrushFromAsset(class USlateBrushAsset* Asset);
	void SetBrushFromAtlasInterface(TScriptInterface<class ISlateTextureAtlasInterface> AtlasRegion, bool bMatchSize);
	void SetBrushFromMaterial(class UMaterialInterface* Material);
	void SetBrushFromMediaTexture(class UBinkMediaTexture* Texture);
	void SetBrushFromRenderTarget(class UTextureRenderTarget2D* Texture, bool bMatchSize);
	void SetBrushFromSoftMaterial(TSoftObjectPtr<class UMaterialInterface> SoftMaterial);
	void SetBrushFromSoftTexture(TSoftObjectPtr<class UTexture2D> SoftTexture, bool bMatchSize);
	void SetBrushFromTexture(class UTexture2D* Texture, bool bMatchSize);
	void SetBrushFromTexture_MaintainRatio(class UTexture2D* Texture, const struct FVector2D& DefaultSize);
	void SetBrushFromTextureDynamic(class UTexture2DDynamic* Texture, bool bMatchSize);
	void SetBrushResourceObject(class UObject* ResourceObject);
	void SetBrushSize(const struct FVector2D& DesiredSize);
	void SetBrushTintColor(const struct FSlateColor& TintColor);
	void SetBrushTintColorWithColorTable(class FName InTableColorKey);
	void SetColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
	void SetColorWithColorTable(class FName InTableColorKey);
	void SetOpacity(float InOpacity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLImageBase">();
	}
	static class UTLImageBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLImageBase>();
	}
};
static_assert(alignof(UTLImageBase) == 0x000008, "Wrong alignment on UTLImageBase");
static_assert(sizeof(UTLImageBase) == 0x0004A8, "Wrong size on UTLImageBase");
static_assert(offsetof(UTLImageBase, Brush) == 0x000108, "Member 'UTLImageBase::Brush' has a wrong offset!");
static_assert(offsetof(UTLImageBase, bUseHoverBrush) == 0x000190, "Member 'UTLImageBase::bUseHoverBrush' has a wrong offset!");
static_assert(offsetof(UTLImageBase, HoverBrush) == 0x000198, "Member 'UTLImageBase::HoverBrush' has a wrong offset!");
static_assert(offsetof(UTLImageBase, bHoverWhenParentHovered) == 0x000220, "Member 'UTLImageBase::bHoverWhenParentHovered' has a wrong offset!");
static_assert(offsetof(UTLImageBase, bUsePressBrush) == 0x000221, "Member 'UTLImageBase::bUsePressBrush' has a wrong offset!");
static_assert(offsetof(UTLImageBase, PressBrush) == 0x000228, "Member 'UTLImageBase::PressBrush' has a wrong offset!");
static_assert(offsetof(UTLImageBase, bUseCheckBrush) == 0x0002B0, "Member 'UTLImageBase::bUseCheckBrush' has a wrong offset!");
static_assert(offsetof(UTLImageBase, CheckBrush) == 0x0002B8, "Member 'UTLImageBase::CheckBrush' has a wrong offset!");
static_assert(offsetof(UTLImageBase, CheckHoverBrush) == 0x000340, "Member 'UTLImageBase::CheckHoverBrush' has a wrong offset!");
static_assert(offsetof(UTLImageBase, BrushDelegate) == 0x0003C8, "Member 'UTLImageBase::BrushDelegate' has a wrong offset!");
static_assert(offsetof(UTLImageBase, HoverBrushDelegate) == 0x0003D8, "Member 'UTLImageBase::HoverBrushDelegate' has a wrong offset!");
static_assert(offsetof(UTLImageBase, PressBrushDelegate) == 0x0003E8, "Member 'UTLImageBase::PressBrushDelegate' has a wrong offset!");
static_assert(offsetof(UTLImageBase, CheckBrushDelegate) == 0x0003F8, "Member 'UTLImageBase::CheckBrushDelegate' has a wrong offset!");
static_assert(offsetof(UTLImageBase, CheckHoverBrushDelegate) == 0x000408, "Member 'UTLImageBase::CheckHoverBrushDelegate' has a wrong offset!");
static_assert(offsetof(UTLImageBase, ColorAndOpacity) == 0x000418, "Member 'UTLImageBase::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UTLImageBase, ColorAndOpacityDelegate) == 0x000428, "Member 'UTLImageBase::ColorAndOpacityDelegate' has a wrong offset!");
static_assert(offsetof(UTLImageBase, bFlipForRightToLeftFlowDirection) == 0x000438, "Member 'UTLImageBase::bFlipForRightToLeftFlowDirection' has a wrong offset!");
static_assert(offsetof(UTLImageBase, bUseDisableColorAndOpacity) == 0x000439, "Member 'UTLImageBase::bUseDisableColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UTLImageBase, DisabledTint) == 0x00043C, "Member 'UTLImageBase::DisabledTint' has a wrong offset!");
static_assert(offsetof(UTLImageBase, DisabledTintDelegate) == 0x00044C, "Member 'UTLImageBase::DisabledTintDelegate' has a wrong offset!");
static_assert(offsetof(UTLImageBase, OnMouseButtonDownEvent) == 0x00045C, "Member 'UTLImageBase::OnMouseButtonDownEvent' has a wrong offset!");

// Class TLUI.TLFlipBookImage
// 0x0158 (0x0600 - 0x04A8)
class UTLFlipBookImage final : public UTLImageBase
{
public:
	uint8                                         Pad_4A8[0x68];                                     // 0x04A8(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x0514(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0520(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0560(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UObject*                                CustomMaterial;                                    // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperFlipbook*                         Flipbook;                                          // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FramesPerSecond;                                   // 0x05B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentFrame;                                      // 0x05B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TotalFrames;                                       // 0x05B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LoopCount;                                         // 0x05BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AutoPlay;                                          // 0x05C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5C1[0xF];                                      // 0x05C1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKeyFrameBrush>                 KeyFrameBrushes;                                   // 0x05D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5E0[0x20];                                     // 0x05E0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();
	void Play();
	void SetCurrentFrame(int32 Frame);
	void SetFlipbookFromSoftObjectPath(const struct FSoftObjectPath& Path);
	void Stop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLFlipBookImage">();
	}
	static class UTLFlipBookImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLFlipBookImage>();
	}
};
static_assert(alignof(UTLFlipBookImage) == 0x000008, "Wrong alignment on UTLFlipBookImage");
static_assert(sizeof(UTLFlipBookImage) == 0x000600, "Wrong size on UTLFlipBookImage");
static_assert(offsetof(UTLFlipBookImage, TLVisibility) == 0x000510, "Member 'UTLFlipBookImage::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLFlipBookImage, TooltipPositionData) == 0x000514, "Member 'UTLFlipBookImage::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLFlipBookImage, VisibleBinding) == 0x000520, "Member 'UTLFlipBookImage::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLFlipBookImage, EnabledBinding) == 0x000560, "Member 'UTLFlipBookImage::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLFlipBookImage, CustomMaterial) == 0x0005A0, "Member 'UTLFlipBookImage::CustomMaterial' has a wrong offset!");
static_assert(offsetof(UTLFlipBookImage, Flipbook) == 0x0005A8, "Member 'UTLFlipBookImage::Flipbook' has a wrong offset!");
static_assert(offsetof(UTLFlipBookImage, FramesPerSecond) == 0x0005B0, "Member 'UTLFlipBookImage::FramesPerSecond' has a wrong offset!");
static_assert(offsetof(UTLFlipBookImage, CurrentFrame) == 0x0005B4, "Member 'UTLFlipBookImage::CurrentFrame' has a wrong offset!");
static_assert(offsetof(UTLFlipBookImage, TotalFrames) == 0x0005B8, "Member 'UTLFlipBookImage::TotalFrames' has a wrong offset!");
static_assert(offsetof(UTLFlipBookImage, LoopCount) == 0x0005BC, "Member 'UTLFlipBookImage::LoopCount' has a wrong offset!");
static_assert(offsetof(UTLFlipBookImage, AutoPlay) == 0x0005C0, "Member 'UTLFlipBookImage::AutoPlay' has a wrong offset!");
static_assert(offsetof(UTLFlipBookImage, KeyFrameBrushes) == 0x0005D0, "Member 'UTLFlipBookImage::KeyFrameBrushes' has a wrong offset!");

// Class TLUI.TLHorizontalBox
// 0x0188 (0x02B8 - 0x0130)
class UTLHorizontalBox final : public UHorizontalBox
{
public:
	uint8                                         Pad_130[0x80];                                     // 0x0130(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x01B4(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetFocusableData                 TLFocusableData;                                   // 0x01C0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x10];                                     // 0x01D8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x01E8(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0228(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ETLAutonAreaType                              MyAutonAreaType;                                   // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaGroupIdValue;                             // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutonAreaOrderTagValue;                            // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFence;                                    // 0x0274(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDome;                                     // 0x0275(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarPrevFirstBeforeLeaveFlag;              // 0x0276(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoRecentAreaWhenLeaveFlag;                // 0x0277(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoBackAreaWhenLeaveFlag;                  // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoAreaByOrderTagHintWhenLeaveFlag;        // 0x0279(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonOrderTagHint                          AutonAreaLeaveOrderTagHintValue;                   // 0x027A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27B[0x1];                                      // 0x027B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaLeaveGivenOrderTagValue;                  // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstThenCardinalEnterFlag;          // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstWhenFarCardinalEnterFlag;       // 0x0281(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaTakeRecentIfExistWhenCardinalEnterFlag;   // 0x0282(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonChildNavigationHint                   AutonAreaChildNavigatingHint;                      // 0x0283(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarNavigationWhenShortCardinalFailedFlag; // 0x0284(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_285[0x3];                                      // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds; // 0x0288(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AutonAreaCardinalNavigationWeightValue;            // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseHitOnRoad;                         // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseNearest;                           // 0x029D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaHaveNosyNeighborsFlag;                    // 0x029E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaCouldBeLookingAreaFlag;                   // 0x029F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                AutonAreaLookingFeedbackWidget;                    // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ITLWidgetVisibilityInterface> AutonAreaFocusPresenter;                           // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLHorizontalBox">();
	}
	static class UTLHorizontalBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLHorizontalBox>();
	}
};
static_assert(alignof(UTLHorizontalBox) == 0x000008, "Wrong alignment on UTLHorizontalBox");
static_assert(sizeof(UTLHorizontalBox) == 0x0002B8, "Wrong size on UTLHorizontalBox");
static_assert(offsetof(UTLHorizontalBox, TLVisibility) == 0x0001B0, "Member 'UTLHorizontalBox::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, TooltipPositionData) == 0x0001B4, "Member 'UTLHorizontalBox::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, TLFocusableData) == 0x0001C0, "Member 'UTLHorizontalBox::TLFocusableData' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, VisibleBinding) == 0x0001E8, "Member 'UTLHorizontalBox::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, EnabledBinding) == 0x000228, "Member 'UTLHorizontalBox::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, MyAutonAreaType) == 0x000268, "Member 'UTLHorizontalBox::MyAutonAreaType' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaGroupIdValue) == 0x00026C, "Member 'UTLHorizontalBox::AutonAreaGroupIdValue' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaOrderTagValue) == 0x000270, "Member 'UTLHorizontalBox::AutonAreaOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaFence) == 0x000274, "Member 'UTLHorizontalBox::AutonAreaFence' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaDome) == 0x000275, "Member 'UTLHorizontalBox::AutonAreaDome' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaFarPrevFirstBeforeLeaveFlag) == 0x000276, "Member 'UTLHorizontalBox::AutonAreaFarPrevFirstBeforeLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaGoRecentAreaWhenLeaveFlag) == 0x000277, "Member 'UTLHorizontalBox::AutonAreaGoRecentAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaGoBackAreaWhenLeaveFlag) == 0x000278, "Member 'UTLHorizontalBox::AutonAreaGoBackAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaGoAreaByOrderTagHintWhenLeaveFlag) == 0x000279, "Member 'UTLHorizontalBox::AutonAreaGoAreaByOrderTagHintWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaLeaveOrderTagHintValue) == 0x00027A, "Member 'UTLHorizontalBox::AutonAreaLeaveOrderTagHintValue' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaLeaveGivenOrderTagValue) == 0x00027C, "Member 'UTLHorizontalBox::AutonAreaLeaveGivenOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaOrderFirstThenCardinalEnterFlag) == 0x000280, "Member 'UTLHorizontalBox::AutonAreaOrderFirstThenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaOrderFirstWhenFarCardinalEnterFlag) == 0x000281, "Member 'UTLHorizontalBox::AutonAreaOrderFirstWhenFarCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaTakeRecentIfExistWhenCardinalEnterFlag) == 0x000282, "Member 'UTLHorizontalBox::AutonAreaTakeRecentIfExistWhenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaChildNavigatingHint) == 0x000283, "Member 'UTLHorizontalBox::AutonAreaChildNavigatingHint' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaFarNavigationWhenShortCardinalFailedFlag) == 0x000284, "Member 'UTLHorizontalBox::AutonAreaFarNavigationWhenShortCardinalFailedFlag' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds) == 0x000288, "Member 'UTLHorizontalBox::AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaCardinalNavigationWeightValue) == 0x000298, "Member 'UTLHorizontalBox::AutonAreaCardinalNavigationWeightValue' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaDontUseHitOnRoad) == 0x00029C, "Member 'UTLHorizontalBox::AutonAreaDontUseHitOnRoad' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaDontUseNearest) == 0x00029D, "Member 'UTLHorizontalBox::AutonAreaDontUseNearest' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaHaveNosyNeighborsFlag) == 0x00029E, "Member 'UTLHorizontalBox::AutonAreaHaveNosyNeighborsFlag' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaCouldBeLookingAreaFlag) == 0x00029F, "Member 'UTLHorizontalBox::AutonAreaCouldBeLookingAreaFlag' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaLookingFeedbackWidget) == 0x0002A0, "Member 'UTLHorizontalBox::AutonAreaLookingFeedbackWidget' has a wrong offset!");
static_assert(offsetof(UTLHorizontalBox, AutonAreaFocusPresenter) == 0x0002A8, "Member 'UTLHorizontalBox::AutonAreaFocusPresenter' has a wrong offset!");

// Class TLUI.TLImage
// 0x03A8 (0x0850 - 0x04A8)
class UTLImage : public UTLImageBase
{
public:
	uint8                                         Pad_4A8[0x60];                                     // 0x04A8(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x050C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0518(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0558(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingImageBrush             ImageBrushBinding;                                 // 0x0598(0x0048)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingImageColorAndOpacity   ColorAndOpacityBinding;                            // 0x05E0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UObject*                                CustomMaterial;                                    // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HslShift;                                          // 0x0628(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Colorize;                                          // 0x0638(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_639[0x3];                                      // 0x0639(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Opacity;                                           // 0x063C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               MaskTexture;                                       // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      CustomMaterialInstanceScalaParameters;             // 0x0648(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        CustomMaterialInstanceVectorParameters;            // 0x0698(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, class UTexture*>            CustomMaterialInstanceTextureParameters;           // 0x06E8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bUseCustomMaterialInstanceBlendMode;               // 0x0738(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlendMode                                    CustomMaterialInstanceBlendMode;                   // 0x0739(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_73A[0x2];                                      // 0x073A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             RenderedCustomMaterialBrushDelegate;               // 0x073C(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_74C[0x4];                                      // 0x074C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            RenderedCustomMaterialBrush;                       // 0x0750(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSlateBrush>         NamedSlateBrushes;                                 // 0x07D8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   CurrentSlateBrushName;                             // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_830[0x8];                                      // 0x0830(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ResourceObject;                                    // 0x0838(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_840[0x10];                                     // 0x0840(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleBinkMediaPlayerReachedEnd(class UBinkMediaPlayer* InBinkMediaPlayer);
	void HandleUpdateColorAndOpacity();
	void HandleUpdateEnabled();
	void HandleUpdateImageBrush();
	void HandleUpdateVisible();
	bool SetBrushByName(class FName InSlateBrushName, bool InApplyVisible);
	void SetBrushFromCustomMaterial(class UObject* InObject);
	void SetBrushFromSoftObjectPath(const struct FSoftObjectPath& Path, bool bInAsyncLoad, bool bInAutoShowAfterBrushLoading, bool bMatchSize);
	void SetBrushFromSprite(class UPaperSprite* Sprite, bool bMatchSize);
	void SetHslShift(const struct FLinearColor& InHslShift);
	void SetMaskTexture(class UTexture* InMaskTexture);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLImage">();
	}
	static class UTLImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLImage>();
	}
};
static_assert(alignof(UTLImage) == 0x000008, "Wrong alignment on UTLImage");
static_assert(sizeof(UTLImage) == 0x000850, "Wrong size on UTLImage");
static_assert(offsetof(UTLImage, TLVisibility) == 0x000508, "Member 'UTLImage::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLImage, TooltipPositionData) == 0x00050C, "Member 'UTLImage::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLImage, VisibleBinding) == 0x000518, "Member 'UTLImage::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLImage, EnabledBinding) == 0x000558, "Member 'UTLImage::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLImage, ImageBrushBinding) == 0x000598, "Member 'UTLImage::ImageBrushBinding' has a wrong offset!");
static_assert(offsetof(UTLImage, ColorAndOpacityBinding) == 0x0005E0, "Member 'UTLImage::ColorAndOpacityBinding' has a wrong offset!");
static_assert(offsetof(UTLImage, CustomMaterial) == 0x000620, "Member 'UTLImage::CustomMaterial' has a wrong offset!");
static_assert(offsetof(UTLImage, HslShift) == 0x000628, "Member 'UTLImage::HslShift' has a wrong offset!");
static_assert(offsetof(UTLImage, Colorize) == 0x000638, "Member 'UTLImage::Colorize' has a wrong offset!");
static_assert(offsetof(UTLImage, Opacity) == 0x00063C, "Member 'UTLImage::Opacity' has a wrong offset!");
static_assert(offsetof(UTLImage, MaskTexture) == 0x000640, "Member 'UTLImage::MaskTexture' has a wrong offset!");
static_assert(offsetof(UTLImage, CustomMaterialInstanceScalaParameters) == 0x000648, "Member 'UTLImage::CustomMaterialInstanceScalaParameters' has a wrong offset!");
static_assert(offsetof(UTLImage, CustomMaterialInstanceVectorParameters) == 0x000698, "Member 'UTLImage::CustomMaterialInstanceVectorParameters' has a wrong offset!");
static_assert(offsetof(UTLImage, CustomMaterialInstanceTextureParameters) == 0x0006E8, "Member 'UTLImage::CustomMaterialInstanceTextureParameters' has a wrong offset!");
static_assert(offsetof(UTLImage, bUseCustomMaterialInstanceBlendMode) == 0x000738, "Member 'UTLImage::bUseCustomMaterialInstanceBlendMode' has a wrong offset!");
static_assert(offsetof(UTLImage, CustomMaterialInstanceBlendMode) == 0x000739, "Member 'UTLImage::CustomMaterialInstanceBlendMode' has a wrong offset!");
static_assert(offsetof(UTLImage, RenderedCustomMaterialBrushDelegate) == 0x00073C, "Member 'UTLImage::RenderedCustomMaterialBrushDelegate' has a wrong offset!");
static_assert(offsetof(UTLImage, RenderedCustomMaterialBrush) == 0x000750, "Member 'UTLImage::RenderedCustomMaterialBrush' has a wrong offset!");
static_assert(offsetof(UTLImage, NamedSlateBrushes) == 0x0007D8, "Member 'UTLImage::NamedSlateBrushes' has a wrong offset!");
static_assert(offsetof(UTLImage, CurrentSlateBrushName) == 0x000828, "Member 'UTLImage::CurrentSlateBrushName' has a wrong offset!");
static_assert(offsetof(UTLImage, ResourceObject) == 0x000838, "Member 'UTLImage::ResourceObject' has a wrong offset!");

// Class TLUI.TLInputKeyCombiSelector
// 0x0510 (0x0618 - 0x0108)
class UTLInputKeyCombiSelector final : public UWidget
{
public:
	uint8                                         Pad_108[0x68];                                     // 0x0108(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	struct FButtonStyle                           WidgetStyle;                                       // 0x0170(0x0278)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FInputChord>                    SelectedKeys;                                      // 0x03E8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FInputChord>                    SelectingKeys;                                     // 0x03F8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x0408(0x0058)(Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Margin;                                            // 0x0460(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0470(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   KeySelectionText;                                  // 0x0480(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   NoKeySpecifiedText;                                // 0x0498(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bAllowModifierKeys;                                // 0x04B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowGamepadKeys;                                 // 0x04B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowOnlyGamepadModifierKeys;                     // 0x04B2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowOnlyGamepadKeys;                             // 0x04B3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B4[0x4];                                      // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKey>                           EscapeKeys;                                        // 0x04B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UTLSoundEvent*                          OnSelectingKeyChangedSound;                        // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLSoundEvent*                          OnMouseHoverSound;                                 // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnKeySelected;                                     // 0x04D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnKeySelecting;                                    // 0x04E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnIsSelectingKeyChanged;                           // 0x04F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPressedLongPress;                                // 0x0508(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRepeatedStartLongPress;                          // 0x0518(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReleasedLongPress;                               // 0x0528(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_538[0x20];                                     // 0x0538(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxKeyCount;                                       // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTLVisibility                          TLVisibility;                                      // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x0560(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_56C[0x4];                                      // 0x056C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLWidgetFocusableData                 TLFocusableData;                                   // 0x0570(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_588[0x10];                                     // 0x0588(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0598(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x05D8(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();
	void OnIsSelectingKeyChanged__DelegateSignature();
	void OnKeySelected__DelegateSignature(const TArray<struct FInputChord>& SelectedKeys_0);
	void OnKeySelecting__DelegateSignature(const TArray<struct FInputChord>& SelectedKeys_0, bool Repeat);
	void OnLongPressKeySelected__DelegateSignature(const struct FKey& InKey);
	void SetAllowGamepadKeys(bool bInAllowGamepadKeys);
	void SetAllowModifierKeys(bool bInAllowModifierKeys);
	void SetAllowOnlyGamepadKeys(const bool bInAllowOnlyGamepadKeys);
	void SetAllowOnlyGamepadModifierKeys(bool bInAllowOnlyGamepadModifierKey);
	void SetKeySelectionText(const class FText& InKeySelectionText);
	void SetMaxKeyCount(const int32 InMaxKeyCount);
	void SetNoKeySpecifiedText(const class FText& InNoKeySpecifiedText);
	void SetSelectedKey(const TArray<struct FInputChord>& InSelectedKey);

	bool GetIsSelectingKey() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLInputKeyCombiSelector">();
	}
	static class UTLInputKeyCombiSelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLInputKeyCombiSelector>();
	}
};
static_assert(alignof(UTLInputKeyCombiSelector) == 0x000008, "Wrong alignment on UTLInputKeyCombiSelector");
static_assert(sizeof(UTLInputKeyCombiSelector) == 0x000618, "Wrong size on UTLInputKeyCombiSelector");
static_assert(offsetof(UTLInputKeyCombiSelector, WidgetStyle) == 0x000170, "Member 'UTLInputKeyCombiSelector::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, SelectedKeys) == 0x0003E8, "Member 'UTLInputKeyCombiSelector::SelectedKeys' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, SelectingKeys) == 0x0003F8, "Member 'UTLInputKeyCombiSelector::SelectingKeys' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, Font) == 0x000408, "Member 'UTLInputKeyCombiSelector::Font' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, Margin) == 0x000460, "Member 'UTLInputKeyCombiSelector::Margin' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, ColorAndOpacity) == 0x000470, "Member 'UTLInputKeyCombiSelector::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, KeySelectionText) == 0x000480, "Member 'UTLInputKeyCombiSelector::KeySelectionText' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, NoKeySpecifiedText) == 0x000498, "Member 'UTLInputKeyCombiSelector::NoKeySpecifiedText' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, bAllowModifierKeys) == 0x0004B0, "Member 'UTLInputKeyCombiSelector::bAllowModifierKeys' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, bAllowGamepadKeys) == 0x0004B1, "Member 'UTLInputKeyCombiSelector::bAllowGamepadKeys' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, bAllowOnlyGamepadModifierKeys) == 0x0004B2, "Member 'UTLInputKeyCombiSelector::bAllowOnlyGamepadModifierKeys' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, bAllowOnlyGamepadKeys) == 0x0004B3, "Member 'UTLInputKeyCombiSelector::bAllowOnlyGamepadKeys' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, EscapeKeys) == 0x0004B8, "Member 'UTLInputKeyCombiSelector::EscapeKeys' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, OnSelectingKeyChangedSound) == 0x0004C8, "Member 'UTLInputKeyCombiSelector::OnSelectingKeyChangedSound' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, OnMouseHoverSound) == 0x0004D0, "Member 'UTLInputKeyCombiSelector::OnMouseHoverSound' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, OnKeySelected) == 0x0004D8, "Member 'UTLInputKeyCombiSelector::OnKeySelected' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, OnKeySelecting) == 0x0004E8, "Member 'UTLInputKeyCombiSelector::OnKeySelecting' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, OnIsSelectingKeyChanged) == 0x0004F8, "Member 'UTLInputKeyCombiSelector::OnIsSelectingKeyChanged' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, OnPressedLongPress) == 0x000508, "Member 'UTLInputKeyCombiSelector::OnPressedLongPress' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, OnRepeatedStartLongPress) == 0x000518, "Member 'UTLInputKeyCombiSelector::OnRepeatedStartLongPress' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, OnReleasedLongPress) == 0x000528, "Member 'UTLInputKeyCombiSelector::OnReleasedLongPress' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, MaxKeyCount) == 0x000558, "Member 'UTLInputKeyCombiSelector::MaxKeyCount' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, TLVisibility) == 0x00055C, "Member 'UTLInputKeyCombiSelector::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, TooltipPositionData) == 0x000560, "Member 'UTLInputKeyCombiSelector::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, TLFocusableData) == 0x000570, "Member 'UTLInputKeyCombiSelector::TLFocusableData' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, VisibleBinding) == 0x000598, "Member 'UTLInputKeyCombiSelector::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLInputKeyCombiSelector, EnabledBinding) == 0x0005D8, "Member 'UTLInputKeyCombiSelector::EnabledBinding' has a wrong offset!");

// Class TLUI.TLInputKeySelector
// 0x06F8 (0x0800 - 0x0108)
class UTLInputKeySelector final : public UWidget
{
public:
	uint8                                         Pad_108[0x60];                                     // 0x0108(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FButtonStyle                           WidgetStyle;                                       // 0x0168(0x0278)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        TextStyle;                                         // 0x03E0(0x0270)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FInputChord                            SelectedKey;                                       // 0x0650(0x0020)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x0670(0x0058)(Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Margin;                                            // 0x06C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x06D8(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   KeySelectionText;                                  // 0x06E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   NoKeySpecifiedText;                                // 0x0700(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bAllowModifierKeys;                                // 0x0718(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowGamepadKeys;                                 // 0x0719(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71A[0x6];                                      // 0x071A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKey>                           EscapeKeys;                                        // 0x0720(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UTLSoundEvent*                          OnSelectingKeyChangedSound;                        // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLSoundEvent*                          OnMouseHoverSound;                                 // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnKeySelected;                                     // 0x0740(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnIsSelectingKeyChanged;                           // 0x0750(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_760[0x10];                                     // 0x0760(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0770(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x0774(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0780(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x07C0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();
	void OnIsSelectingKeyChanged__DelegateSignature();
	void OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey_0);
	void SetAllowGamepadKeys(bool bInAllowGamepadKeys);
	void SetAllowModifierKeys(bool bInAllowModifierKeys);
	void SetKeySelectionText(const class FText& InKeySelectionText);
	void SetNoKeySpecifiedText(const class FText& InNoKeySpecifiedText);
	void SetSelectedKey(const struct FInputChord& InSelectedKey);
	void SetTextBlockVisibility(const ESlateVisibility InVisibility);

	bool GetIsSelectingKey() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLInputKeySelector">();
	}
	static class UTLInputKeySelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLInputKeySelector>();
	}
};
static_assert(alignof(UTLInputKeySelector) == 0x000008, "Wrong alignment on UTLInputKeySelector");
static_assert(sizeof(UTLInputKeySelector) == 0x000800, "Wrong size on UTLInputKeySelector");
static_assert(offsetof(UTLInputKeySelector, WidgetStyle) == 0x000168, "Member 'UTLInputKeySelector::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UTLInputKeySelector, TextStyle) == 0x0003E0, "Member 'UTLInputKeySelector::TextStyle' has a wrong offset!");
static_assert(offsetof(UTLInputKeySelector, SelectedKey) == 0x000650, "Member 'UTLInputKeySelector::SelectedKey' has a wrong offset!");
static_assert(offsetof(UTLInputKeySelector, Font) == 0x000670, "Member 'UTLInputKeySelector::Font' has a wrong offset!");
static_assert(offsetof(UTLInputKeySelector, Margin) == 0x0006C8, "Member 'UTLInputKeySelector::Margin' has a wrong offset!");
static_assert(offsetof(UTLInputKeySelector, ColorAndOpacity) == 0x0006D8, "Member 'UTLInputKeySelector::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UTLInputKeySelector, KeySelectionText) == 0x0006E8, "Member 'UTLInputKeySelector::KeySelectionText' has a wrong offset!");
static_assert(offsetof(UTLInputKeySelector, NoKeySpecifiedText) == 0x000700, "Member 'UTLInputKeySelector::NoKeySpecifiedText' has a wrong offset!");
static_assert(offsetof(UTLInputKeySelector, bAllowModifierKeys) == 0x000718, "Member 'UTLInputKeySelector::bAllowModifierKeys' has a wrong offset!");
static_assert(offsetof(UTLInputKeySelector, bAllowGamepadKeys) == 0x000719, "Member 'UTLInputKeySelector::bAllowGamepadKeys' has a wrong offset!");
static_assert(offsetof(UTLInputKeySelector, EscapeKeys) == 0x000720, "Member 'UTLInputKeySelector::EscapeKeys' has a wrong offset!");
static_assert(offsetof(UTLInputKeySelector, OnSelectingKeyChangedSound) == 0x000730, "Member 'UTLInputKeySelector::OnSelectingKeyChangedSound' has a wrong offset!");
static_assert(offsetof(UTLInputKeySelector, OnMouseHoverSound) == 0x000738, "Member 'UTLInputKeySelector::OnMouseHoverSound' has a wrong offset!");
static_assert(offsetof(UTLInputKeySelector, OnKeySelected) == 0x000740, "Member 'UTLInputKeySelector::OnKeySelected' has a wrong offset!");
static_assert(offsetof(UTLInputKeySelector, OnIsSelectingKeyChanged) == 0x000750, "Member 'UTLInputKeySelector::OnIsSelectingKeyChanged' has a wrong offset!");
static_assert(offsetof(UTLInputKeySelector, TLVisibility) == 0x000770, "Member 'UTLInputKeySelector::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLInputKeySelector, TooltipPositionData) == 0x000774, "Member 'UTLInputKeySelector::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLInputKeySelector, VisibleBinding) == 0x000780, "Member 'UTLInputKeySelector::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLInputKeySelector, EnabledBinding) == 0x0007C0, "Member 'UTLInputKeySelector::EnabledBinding' has a wrong offset!");

// Class TLUI.TLInvalidationBox
// 0x0100 (0x0238 - 0x0138)
class UTLInvalidationBox final : public UInvalidationBox
{
public:
	uint8                                         Pad_138[0x60];                                     // 0x0138(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x019C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x01A8(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x01E8(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         DebugID;                                           // 0x0228(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecacheByLayerID;                                 // 0x022C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecacheByLocalSize;                               // 0x022D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecacheByAccumScale;                              // 0x022E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecacheByAccumTranslation;                        // 0x022F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecacheByClipRectSize;                            // 0x0230(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecacheByClippingState;                           // 0x0231(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecacheByColorAndOpacityTint;                     // 0x0232(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233[0x5];                                      // 0x0233(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLInvalidationBox">();
	}
	static class UTLInvalidationBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLInvalidationBox>();
	}
};
static_assert(alignof(UTLInvalidationBox) == 0x000008, "Wrong alignment on UTLInvalidationBox");
static_assert(sizeof(UTLInvalidationBox) == 0x000238, "Wrong size on UTLInvalidationBox");
static_assert(offsetof(UTLInvalidationBox, TLVisibility) == 0x000198, "Member 'UTLInvalidationBox::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLInvalidationBox, TooltipPositionData) == 0x00019C, "Member 'UTLInvalidationBox::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLInvalidationBox, VisibleBinding) == 0x0001A8, "Member 'UTLInvalidationBox::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLInvalidationBox, EnabledBinding) == 0x0001E8, "Member 'UTLInvalidationBox::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLInvalidationBox, DebugID) == 0x000228, "Member 'UTLInvalidationBox::DebugID' has a wrong offset!");
static_assert(offsetof(UTLInvalidationBox, bRecacheByLayerID) == 0x00022C, "Member 'UTLInvalidationBox::bRecacheByLayerID' has a wrong offset!");
static_assert(offsetof(UTLInvalidationBox, bRecacheByLocalSize) == 0x00022D, "Member 'UTLInvalidationBox::bRecacheByLocalSize' has a wrong offset!");
static_assert(offsetof(UTLInvalidationBox, bRecacheByAccumScale) == 0x00022E, "Member 'UTLInvalidationBox::bRecacheByAccumScale' has a wrong offset!");
static_assert(offsetof(UTLInvalidationBox, bRecacheByAccumTranslation) == 0x00022F, "Member 'UTLInvalidationBox::bRecacheByAccumTranslation' has a wrong offset!");
static_assert(offsetof(UTLInvalidationBox, bRecacheByClipRectSize) == 0x000230, "Member 'UTLInvalidationBox::bRecacheByClipRectSize' has a wrong offset!");
static_assert(offsetof(UTLInvalidationBox, bRecacheByClippingState) == 0x000231, "Member 'UTLInvalidationBox::bRecacheByClippingState' has a wrong offset!");
static_assert(offsetof(UTLInvalidationBox, bRecacheByColorAndOpacityTint) == 0x000232, "Member 'UTLInvalidationBox::bRecacheByColorAndOpacityTint' has a wrong offset!");

// Class TLUI.TLLinearBoxSlot
// 0x0030 (0x0068 - 0x0038)
class UTLLinearBoxSlot final : public UPanelSlot
{
public:
	struct FSlateChildSize                        Size;                                              // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0061(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetSize(const struct FSlateChildSize& InSize);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLLinearBoxSlot">();
	}
	static class UTLLinearBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLLinearBoxSlot>();
	}
};
static_assert(alignof(UTLLinearBoxSlot) == 0x000008, "Wrong alignment on UTLLinearBoxSlot");
static_assert(sizeof(UTLLinearBoxSlot) == 0x000068, "Wrong size on UTLLinearBoxSlot");
static_assert(offsetof(UTLLinearBoxSlot, Size) == 0x000038, "Member 'UTLLinearBoxSlot::Size' has a wrong offset!");
static_assert(offsetof(UTLLinearBoxSlot, Padding) == 0x000040, "Member 'UTLLinearBoxSlot::Padding' has a wrong offset!");
static_assert(offsetof(UTLLinearBoxSlot, HorizontalAlignment) == 0x000060, "Member 'UTLLinearBoxSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UTLLinearBoxSlot, VerticalAlignment) == 0x000061, "Member 'UTLLinearBoxSlot::VerticalAlignment' has a wrong offset!");

// Class TLUI.TLMenuAnchor
// 0x00F0 (0x0260 - 0x0170)
class UTLMenuAnchor final : public UMenuAnchor
{
public:
	uint8                                         Pad_170[0x60];                                     // 0x0170(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x01D4(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x01E0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0220(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLMenuAnchor">();
	}
	static class UTLMenuAnchor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLMenuAnchor>();
	}
};
static_assert(alignof(UTLMenuAnchor) == 0x000008, "Wrong alignment on UTLMenuAnchor");
static_assert(sizeof(UTLMenuAnchor) == 0x000260, "Wrong size on UTLMenuAnchor");
static_assert(offsetof(UTLMenuAnchor, TLVisibility) == 0x0001D0, "Member 'UTLMenuAnchor::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLMenuAnchor, TooltipPositionData) == 0x0001D4, "Member 'UTLMenuAnchor::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLMenuAnchor, VisibleBinding) == 0x0001E0, "Member 'UTLMenuAnchor::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLMenuAnchor, EnabledBinding) == 0x000220, "Member 'UTLMenuAnchor::EnabledBinding' has a wrong offset!");

// Class TLUI.TLMultiLineEditableText
// 0x0120 (0x0590 - 0x0470)
class UTLMultiLineEditableText final : public UMultiLineEditableText
{
public:
	uint8                                         Pad_470[0x68];                                     // 0x0470(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x04DC(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetFocusableData                 TLFocusableData;                                   // 0x04E8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_500[0x10];                                     // 0x0500(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0510(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0550(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLMultiLineEditableText">();
	}
	static class UTLMultiLineEditableText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLMultiLineEditableText>();
	}
};
static_assert(alignof(UTLMultiLineEditableText) == 0x000008, "Wrong alignment on UTLMultiLineEditableText");
static_assert(sizeof(UTLMultiLineEditableText) == 0x000590, "Wrong size on UTLMultiLineEditableText");
static_assert(offsetof(UTLMultiLineEditableText, TLVisibility) == 0x0004D8, "Member 'UTLMultiLineEditableText::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableText, TooltipPositionData) == 0x0004DC, "Member 'UTLMultiLineEditableText::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableText, TLFocusableData) == 0x0004E8, "Member 'UTLMultiLineEditableText::TLFocusableData' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableText, VisibleBinding) == 0x000510, "Member 'UTLMultiLineEditableText::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableText, EnabledBinding) == 0x000550, "Member 'UTLMultiLineEditableText::EnabledBinding' has a wrong offset!");

// Class TLUI.TLMultiLineEditableTextBox
// 0x0FA8 (0x1158 - 0x01B0)
class UTLMultiLineEditableTextBox final : public UTextLayoutWidgetTL
{
public:
	uint8                                         Pad_1B0[0x68];                                     // 0x01B0(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0218(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   HintText;                                          // 0x0230(0x0018)(Edit, NativeAccessSpecifierPublic)
	TDelegate<void()>                             HintTextDelegate;                                  // 0x0248(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FEditableTextBoxStyle                  WidgetStyle;                                       // 0x0258(0x0908)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTextBlockStyleTL                      TextStyle;                                         // 0x0B60(0x0208)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsReadOnly;                                       // 0x0D68(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowContextMenu;                                  // 0x0D69(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearKeyboardFocusOnCommit;                        // 0x0D6A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVirtualKeyboardOptions                VirtualKeyboardOptions;                            // 0x0D6B(0x0001)(Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EVirtualKeyboardDismissAction                 VirtualKeyboardDismissAction;                      // 0x0D6C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6D[0x3];                                      // 0x0D6D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USlateWidgetStyleAsset*                 Style;                                             // 0x0D70(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x0D78(0x0058)(Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ForegroundColor;                                   // 0x0DD0(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x0DE0(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReadOnlyForegroundColor;                           // 0x0DF0(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTextChanged;                                     // 0x0E00(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTextCommitted;                                   // 0x0E10(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTextFocusReceived;                               // 0x0E20(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTextFocusLost;                                   // 0x0E30(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTextMouseButtonDown;                             // 0x0E40(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UTLTextBlockDecorator*>          DecoratorObjects;                                  // 0x0E50(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_E60[0x238];                                    // 0x0E60(0x0238)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x1098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x109C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetFocusableData                 TLFocusableData;                                   // 0x10A8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C0[0x10];                                    // 0x10C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x10D0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x1110(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         MaxChar;                                           // 0x1150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCustomWidgetStyle;                                // 0x1154(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1155[0x3];                                     // 0x1155(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetCurrentCursorLine();
	int32 GetCurrentLineCount();
	void HandleUpdateEnabled();
	void HandleUpdateVisible();
	void OnEditableTextFocusLostEvent__DelegateSignature(const struct FFocusEvent& InFocusEvent);
	void OnEditableTextFocusReceivedEvent__DelegateSignature(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent);
	void OnEditableTextMouseButtonDownEvent__DelegateSignature(const struct FGeometry& MyGeometry, const struct FPointerEvent& InMouseEvent);
	void OnMultiLineEditableTextBoxChangedEvent__DelegateSignature(const class FText& Text_0);
	void OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature(const class FText& Text_0, ETextCommit CommitMethod);
	void SelectAllText();
	void SetError(const class FText& InError);
	void SetHintText(const class FText& InHintText);
	void SetIsReadOnly(bool bReadOnly);
	void SetMaxChar(int32 InMaxChar);
	void SetText(const class FText& InText);
	void SetTextStyle(const struct FTextBlockStyleTL& InTextStyle);

	class FText GetHintText() const;
	class FText GetText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLMultiLineEditableTextBox">();
	}
	static class UTLMultiLineEditableTextBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLMultiLineEditableTextBox>();
	}
};
static_assert(alignof(UTLMultiLineEditableTextBox) == 0x000008, "Wrong alignment on UTLMultiLineEditableTextBox");
static_assert(sizeof(UTLMultiLineEditableTextBox) == 0x001158, "Wrong size on UTLMultiLineEditableTextBox");
static_assert(offsetof(UTLMultiLineEditableTextBox, Text) == 0x000218, "Member 'UTLMultiLineEditableTextBox::Text' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, HintText) == 0x000230, "Member 'UTLMultiLineEditableTextBox::HintText' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, HintTextDelegate) == 0x000248, "Member 'UTLMultiLineEditableTextBox::HintTextDelegate' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, WidgetStyle) == 0x000258, "Member 'UTLMultiLineEditableTextBox::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, TextStyle) == 0x000B60, "Member 'UTLMultiLineEditableTextBox::TextStyle' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, bIsReadOnly) == 0x000D68, "Member 'UTLMultiLineEditableTextBox::bIsReadOnly' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, AllowContextMenu) == 0x000D69, "Member 'UTLMultiLineEditableTextBox::AllowContextMenu' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, ClearKeyboardFocusOnCommit) == 0x000D6A, "Member 'UTLMultiLineEditableTextBox::ClearKeyboardFocusOnCommit' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, VirtualKeyboardOptions) == 0x000D6B, "Member 'UTLMultiLineEditableTextBox::VirtualKeyboardOptions' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, VirtualKeyboardDismissAction) == 0x000D6C, "Member 'UTLMultiLineEditableTextBox::VirtualKeyboardDismissAction' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, Style) == 0x000D70, "Member 'UTLMultiLineEditableTextBox::Style' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, Font) == 0x000D78, "Member 'UTLMultiLineEditableTextBox::Font' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, ForegroundColor) == 0x000DD0, "Member 'UTLMultiLineEditableTextBox::ForegroundColor' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, BackgroundColor) == 0x000DE0, "Member 'UTLMultiLineEditableTextBox::BackgroundColor' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, ReadOnlyForegroundColor) == 0x000DF0, "Member 'UTLMultiLineEditableTextBox::ReadOnlyForegroundColor' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, OnTextChanged) == 0x000E00, "Member 'UTLMultiLineEditableTextBox::OnTextChanged' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, OnTextCommitted) == 0x000E10, "Member 'UTLMultiLineEditableTextBox::OnTextCommitted' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, OnTextFocusReceived) == 0x000E20, "Member 'UTLMultiLineEditableTextBox::OnTextFocusReceived' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, OnTextFocusLost) == 0x000E30, "Member 'UTLMultiLineEditableTextBox::OnTextFocusLost' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, OnTextMouseButtonDown) == 0x000E40, "Member 'UTLMultiLineEditableTextBox::OnTextMouseButtonDown' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, DecoratorObjects) == 0x000E50, "Member 'UTLMultiLineEditableTextBox::DecoratorObjects' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, TLVisibility) == 0x001098, "Member 'UTLMultiLineEditableTextBox::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, TooltipPositionData) == 0x00109C, "Member 'UTLMultiLineEditableTextBox::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, TLFocusableData) == 0x0010A8, "Member 'UTLMultiLineEditableTextBox::TLFocusableData' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, VisibleBinding) == 0x0010D0, "Member 'UTLMultiLineEditableTextBox::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, EnabledBinding) == 0x001110, "Member 'UTLMultiLineEditableTextBox::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, MaxChar) == 0x001150, "Member 'UTLMultiLineEditableTextBox::MaxChar' has a wrong offset!");
static_assert(offsetof(UTLMultiLineEditableTextBox, bCustomWidgetStyle) == 0x001154, "Member 'UTLMultiLineEditableTextBox::bCustomWidgetStyle' has a wrong offset!");

// Class TLUI.TLNamedSlot
// 0x00F0 (0x0220 - 0x0130)
class UTLNamedSlot final : public UNamedSlot
{
public:
	uint8                                         Pad_130[0x60];                                     // 0x0130(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x0194(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x01A0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x01E0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLNamedSlot">();
	}
	static class UTLNamedSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLNamedSlot>();
	}
};
static_assert(alignof(UTLNamedSlot) == 0x000008, "Wrong alignment on UTLNamedSlot");
static_assert(sizeof(UTLNamedSlot) == 0x000220, "Wrong size on UTLNamedSlot");
static_assert(offsetof(UTLNamedSlot, TLVisibility) == 0x000190, "Member 'UTLNamedSlot::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLNamedSlot, TooltipPositionData) == 0x000194, "Member 'UTLNamedSlot::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLNamedSlot, VisibleBinding) == 0x0001A0, "Member 'UTLNamedSlot::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLNamedSlot, EnabledBinding) == 0x0001E0, "Member 'UTLNamedSlot::EnabledBinding' has a wrong offset!");

// Class TLUI.TLNativeWidgetHost
// 0x00F0 (0x0208 - 0x0118)
class UTLNativeWidgetHost final : public UNativeWidgetHost
{
public:
	uint8                                         Pad_118[0x60];                                     // 0x0118(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x017C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0188(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x01C8(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLNativeWidgetHost">();
	}
	static class UTLNativeWidgetHost* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLNativeWidgetHost>();
	}
};
static_assert(alignof(UTLNativeWidgetHost) == 0x000008, "Wrong alignment on UTLNativeWidgetHost");
static_assert(sizeof(UTLNativeWidgetHost) == 0x000208, "Wrong size on UTLNativeWidgetHost");
static_assert(offsetof(UTLNativeWidgetHost, TLVisibility) == 0x000178, "Member 'UTLNativeWidgetHost::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLNativeWidgetHost, TooltipPositionData) == 0x00017C, "Member 'UTLNativeWidgetHost::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLNativeWidgetHost, VisibleBinding) == 0x000188, "Member 'UTLNativeWidgetHost::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLNativeWidgetHost, EnabledBinding) == 0x0001C8, "Member 'UTLNativeWidgetHost::EnabledBinding' has a wrong offset!");

// Class TLUI.TLOverlay
// 0x0188 (0x02B8 - 0x0130)
class UTLOverlay final : public UOverlay
{
public:
	uint8                                         Pad_130[0x80];                                     // 0x0130(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x01B4(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetFocusableData                 TLFocusableData;                                   // 0x01C0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x10];                                     // 0x01D8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x01E8(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0228(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ETLAutonAreaType                              MyAutonAreaType;                                   // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaGroupIdValue;                             // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutonAreaOrderTagValue;                            // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFence;                                    // 0x0274(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDome;                                     // 0x0275(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarPrevFirstBeforeLeaveFlag;              // 0x0276(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoRecentAreaWhenLeaveFlag;                // 0x0277(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoBackAreaWhenLeaveFlag;                  // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoAreaByOrderTagHintWhenLeaveFlag;        // 0x0279(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonOrderTagHint                          AutonAreaLeaveOrderTagHintValue;                   // 0x027A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27B[0x1];                                      // 0x027B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaLeaveGivenOrderTagValue;                  // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstThenCardinalEnterFlag;          // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstWhenFarCardinalEnterFlag;       // 0x0281(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaTakeRecentIfExistWhenCardinalEnterFlag;   // 0x0282(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonChildNavigationHint                   AutonAreaChildNavigatingHint;                      // 0x0283(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarNavigationWhenShortCardinalFailedFlag; // 0x0284(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_285[0x3];                                      // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds; // 0x0288(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AutonAreaCardinalNavigationWeightValue;            // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseHitOnRoad;                         // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseNearest;                           // 0x029D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaHaveNosyNeighborsFlag;                    // 0x029E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaCouldBeLookingAreaFlag;                   // 0x029F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                AutonAreaLookingFeedbackWidget;                    // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ITLWidgetVisibilityInterface> AutonAreaFocusPresenter;                           // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLOverlay">();
	}
	static class UTLOverlay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLOverlay>();
	}
};
static_assert(alignof(UTLOverlay) == 0x000008, "Wrong alignment on UTLOverlay");
static_assert(sizeof(UTLOverlay) == 0x0002B8, "Wrong size on UTLOverlay");
static_assert(offsetof(UTLOverlay, TLVisibility) == 0x0001B0, "Member 'UTLOverlay::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLOverlay, TooltipPositionData) == 0x0001B4, "Member 'UTLOverlay::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLOverlay, TLFocusableData) == 0x0001C0, "Member 'UTLOverlay::TLFocusableData' has a wrong offset!");
static_assert(offsetof(UTLOverlay, VisibleBinding) == 0x0001E8, "Member 'UTLOverlay::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLOverlay, EnabledBinding) == 0x000228, "Member 'UTLOverlay::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLOverlay, MyAutonAreaType) == 0x000268, "Member 'UTLOverlay::MyAutonAreaType' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaGroupIdValue) == 0x00026C, "Member 'UTLOverlay::AutonAreaGroupIdValue' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaOrderTagValue) == 0x000270, "Member 'UTLOverlay::AutonAreaOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaFence) == 0x000274, "Member 'UTLOverlay::AutonAreaFence' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaDome) == 0x000275, "Member 'UTLOverlay::AutonAreaDome' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaFarPrevFirstBeforeLeaveFlag) == 0x000276, "Member 'UTLOverlay::AutonAreaFarPrevFirstBeforeLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaGoRecentAreaWhenLeaveFlag) == 0x000277, "Member 'UTLOverlay::AutonAreaGoRecentAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaGoBackAreaWhenLeaveFlag) == 0x000278, "Member 'UTLOverlay::AutonAreaGoBackAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaGoAreaByOrderTagHintWhenLeaveFlag) == 0x000279, "Member 'UTLOverlay::AutonAreaGoAreaByOrderTagHintWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaLeaveOrderTagHintValue) == 0x00027A, "Member 'UTLOverlay::AutonAreaLeaveOrderTagHintValue' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaLeaveGivenOrderTagValue) == 0x00027C, "Member 'UTLOverlay::AutonAreaLeaveGivenOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaOrderFirstThenCardinalEnterFlag) == 0x000280, "Member 'UTLOverlay::AutonAreaOrderFirstThenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaOrderFirstWhenFarCardinalEnterFlag) == 0x000281, "Member 'UTLOverlay::AutonAreaOrderFirstWhenFarCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaTakeRecentIfExistWhenCardinalEnterFlag) == 0x000282, "Member 'UTLOverlay::AutonAreaTakeRecentIfExistWhenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaChildNavigatingHint) == 0x000283, "Member 'UTLOverlay::AutonAreaChildNavigatingHint' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaFarNavigationWhenShortCardinalFailedFlag) == 0x000284, "Member 'UTLOverlay::AutonAreaFarNavigationWhenShortCardinalFailedFlag' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds) == 0x000288, "Member 'UTLOverlay::AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaCardinalNavigationWeightValue) == 0x000298, "Member 'UTLOverlay::AutonAreaCardinalNavigationWeightValue' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaDontUseHitOnRoad) == 0x00029C, "Member 'UTLOverlay::AutonAreaDontUseHitOnRoad' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaDontUseNearest) == 0x00029D, "Member 'UTLOverlay::AutonAreaDontUseNearest' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaHaveNosyNeighborsFlag) == 0x00029E, "Member 'UTLOverlay::AutonAreaHaveNosyNeighborsFlag' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaCouldBeLookingAreaFlag) == 0x00029F, "Member 'UTLOverlay::AutonAreaCouldBeLookingAreaFlag' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaLookingFeedbackWidget) == 0x0002A0, "Member 'UTLOverlay::AutonAreaLookingFeedbackWidget' has a wrong offset!");
static_assert(offsetof(UTLOverlay, AutonAreaFocusPresenter) == 0x0002A8, "Member 'UTLOverlay::AutonAreaFocusPresenter' has a wrong offset!");

// Class TLUI.TLProgressBar
// 0x0340 (0x0658 - 0x0318)
class UTLProgressBar final : public UProgressBar
{
public:
	uint8                                         Pad_318[0x60];                                     // 0x0318(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x037C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0388(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x03C8(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingPercent                PercentBinding;                                    // 0x0408(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             BP_OnChangePercent;                                // 0x0448(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_458[0x48];                                     // 0x0458(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetPercent;                                     // 0x04A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockMaxPercent;                                   // 0x04A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPercentOverAction;                                // 0x04A5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A6[0x2];                                      // 0x04A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            PercentCurve;                                      // 0x04A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DecreaseDurationSec;                               // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         IncreaseDurationSec;                               // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bNeedsCheckResolutionChange;                       // 0x04B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4B9[0x7];                                      // 0x04B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTLProgressSlateBrushInfo>      EdgeImageBrush;                                    // 0x04C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	TArray<class UTLProgressBar*>                 SubProgressBars;                                   // 0x04D0(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bCircleBarFillType;                                // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCW;                                               // 0x04E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4E2[0x2];                                      // 0x04E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartAngle;                                        // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TotalAngle;                                        // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEdgeImagePercentMaterial;                         // 0x04EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4ED[0x3];                                      // 0x04ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CustomMaterial;                                    // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                PercentMaterial;                                   // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           DisabledTint;                                      // 0x0500(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TDelegate<void()>                             DisabledTintDelegate;                              // 0x0510(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FLinearColor                           HslShift;                                          // 0x0520(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Colorize;                                          // 0x0530(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_531[0x3];                                      // 0x0531(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Opacity;                                           // 0x0534(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateBrush                            RenderedCustomMaterialBrush;                       // 0x0538(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_5C0[0x68];                                     // 0x05C0(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	class UTLProgressBar*                         AfterImageBar;                                     // 0x0628(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTLProgressBar*                         TargetBar;                                         // 0x0630(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTLImage*                               HeadImage;                                         // 0x0638(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                EdgeImage;                                         // 0x0640(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_648[0x10];                                     // 0x0648(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddSubProgressBar(class UTLProgressBar* InSubProgressBar);
	class UMaterialInstanceDynamic* GetFillImageDynamicMaterial();
	void HandleUpdateEnabled();
	void HandleUpdatePercent();
	void HandleUpdateVisible();
	void Play();
	void PlayAfterImageWithDuration(float Duration);
	void PlayWithDuration(float Duration);
	void SetAfterImageBar(class UTLProgressBar* InAfterImageBar);
	void SetCurrentPercent(float InPercent);
	void SetCurveGraph(class UCurveFloat* InCurve);
	void SetDecreaseDuration(float InDurationSec);
	void SetEdgeImage(class UWidget* InEdgeImage);
	void SetFillImageBrush(class UObject* ResourceObject);
	void SetHeadImage(class UTLImage* InHeadImage);
	void SetIncreaseDuration(float InDurationSec);
	void SetPercentMaterial(class UMaterial* InPercentMaterial);
	void SetSubPercent(float InPercent);
	void SetTargetPercent(float InPercent);
	void UpdateEdgeImageBrush();

	float GetDurationSec() const;
	float GetRemainSec() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLProgressBar">();
	}
	static class UTLProgressBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLProgressBar>();
	}
};
static_assert(alignof(UTLProgressBar) == 0x000008, "Wrong alignment on UTLProgressBar");
static_assert(sizeof(UTLProgressBar) == 0x000658, "Wrong size on UTLProgressBar");
static_assert(offsetof(UTLProgressBar, TLVisibility) == 0x000378, "Member 'UTLProgressBar::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, TooltipPositionData) == 0x00037C, "Member 'UTLProgressBar::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, VisibleBinding) == 0x000388, "Member 'UTLProgressBar::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, EnabledBinding) == 0x0003C8, "Member 'UTLProgressBar::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, PercentBinding) == 0x000408, "Member 'UTLProgressBar::PercentBinding' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, BP_OnChangePercent) == 0x000448, "Member 'UTLProgressBar::BP_OnChangePercent' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, TargetPercent) == 0x0004A0, "Member 'UTLProgressBar::TargetPercent' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, bLockMaxPercent) == 0x0004A4, "Member 'UTLProgressBar::bLockMaxPercent' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, bPercentOverAction) == 0x0004A5, "Member 'UTLProgressBar::bPercentOverAction' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, PercentCurve) == 0x0004A8, "Member 'UTLProgressBar::PercentCurve' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, DecreaseDurationSec) == 0x0004B0, "Member 'UTLProgressBar::DecreaseDurationSec' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, IncreaseDurationSec) == 0x0004B4, "Member 'UTLProgressBar::IncreaseDurationSec' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, bNeedsCheckResolutionChange) == 0x0004B8, "Member 'UTLProgressBar::bNeedsCheckResolutionChange' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, EdgeImageBrush) == 0x0004C0, "Member 'UTLProgressBar::EdgeImageBrush' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, SubProgressBars) == 0x0004D0, "Member 'UTLProgressBar::SubProgressBars' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, bCircleBarFillType) == 0x0004E0, "Member 'UTLProgressBar::bCircleBarFillType' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, bCW) == 0x0004E1, "Member 'UTLProgressBar::bCW' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, StartAngle) == 0x0004E4, "Member 'UTLProgressBar::StartAngle' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, TotalAngle) == 0x0004E8, "Member 'UTLProgressBar::TotalAngle' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, bEdgeImagePercentMaterial) == 0x0004EC, "Member 'UTLProgressBar::bEdgeImagePercentMaterial' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, CustomMaterial) == 0x0004F0, "Member 'UTLProgressBar::CustomMaterial' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, PercentMaterial) == 0x0004F8, "Member 'UTLProgressBar::PercentMaterial' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, DisabledTint) == 0x000500, "Member 'UTLProgressBar::DisabledTint' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, DisabledTintDelegate) == 0x000510, "Member 'UTLProgressBar::DisabledTintDelegate' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, HslShift) == 0x000520, "Member 'UTLProgressBar::HslShift' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, Colorize) == 0x000530, "Member 'UTLProgressBar::Colorize' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, Opacity) == 0x000534, "Member 'UTLProgressBar::Opacity' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, RenderedCustomMaterialBrush) == 0x000538, "Member 'UTLProgressBar::RenderedCustomMaterialBrush' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, AfterImageBar) == 0x000628, "Member 'UTLProgressBar::AfterImageBar' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, TargetBar) == 0x000630, "Member 'UTLProgressBar::TargetBar' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, HeadImage) == 0x000638, "Member 'UTLProgressBar::HeadImage' has a wrong offset!");
static_assert(offsetof(UTLProgressBar, EdgeImage) == 0x000640, "Member 'UTLProgressBar::EdgeImage' has a wrong offset!");

// Class TLUI.TLRadarChart
// 0x00F0 (0x0538 - 0x0448)
class UTLRadarChart final : public URadarChart
{
public:
	uint8                                         Pad_448[0x60];                                     // 0x0448(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x04AC(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x04B8(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x04F8(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();
	void SetValueLayerOutLineColor(const int32 InIndex, const struct FLinearColor& InColor);
	void SetValueLayerOutLineThinckness(const int32 InIndex, float InValue);
	void SetValueLayerShapeColor(const int32 InIndex, const struct FLinearColor& InColor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLRadarChart">();
	}
	static class UTLRadarChart* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLRadarChart>();
	}
};
static_assert(alignof(UTLRadarChart) == 0x000008, "Wrong alignment on UTLRadarChart");
static_assert(sizeof(UTLRadarChart) == 0x000538, "Wrong size on UTLRadarChart");
static_assert(offsetof(UTLRadarChart, TLVisibility) == 0x0004A8, "Member 'UTLRadarChart::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLRadarChart, TooltipPositionData) == 0x0004AC, "Member 'UTLRadarChart::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLRadarChart, VisibleBinding) == 0x0004B8, "Member 'UTLRadarChart::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLRadarChart, EnabledBinding) == 0x0004F8, "Member 'UTLRadarChart::EnabledBinding' has a wrong offset!");

// Class TLUI.TLRadioButton
// 0x0000 (0x0898 - 0x0898)
class UTLRadioButton final : public UTLCheckBox
{
public:
	void SetButton(bool IsChecked_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLRadioButton">();
	}
	static class UTLRadioButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLRadioButton>();
	}
};
static_assert(alignof(UTLRadioButton) == 0x000008, "Wrong alignment on UTLRadioButton");
static_assert(sizeof(UTLRadioButton) == 0x000898, "Wrong size on UTLRadioButton");

// Class TLUI.TLRetainerBox
// 0x00F0 (0x0240 - 0x0150)
class UTLRetainerBox final : public URetainerBox
{
public:
	uint8                                         Pad_150[0x60];                                     // 0x0150(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x01B4(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x01C0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0200(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLRetainerBox">();
	}
	static class UTLRetainerBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLRetainerBox>();
	}
};
static_assert(alignof(UTLRetainerBox) == 0x000008, "Wrong alignment on UTLRetainerBox");
static_assert(sizeof(UTLRetainerBox) == 0x000240, "Wrong size on UTLRetainerBox");
static_assert(offsetof(UTLRetainerBox, TLVisibility) == 0x0001B0, "Member 'UTLRetainerBox::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLRetainerBox, TooltipPositionData) == 0x0001B4, "Member 'UTLRetainerBox::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLRetainerBox, VisibleBinding) == 0x0001C0, "Member 'UTLRetainerBox::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLRetainerBox, EnabledBinding) == 0x000200, "Member 'UTLRetainerBox::EnabledBinding' has a wrong offset!");

// Class TLUI.TLSafeZone
// 0x0070 (0x01A8 - 0x0138)
class UTLSafeZone final : public USafeZone
{
public:
	uint8                                         Pad_138[0x60];                                     // 0x0138(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x019C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLSafeZone">();
	}
	static class UTLSafeZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLSafeZone>();
	}
};
static_assert(alignof(UTLSafeZone) == 0x000008, "Wrong alignment on UTLSafeZone");
static_assert(sizeof(UTLSafeZone) == 0x0001A8, "Wrong size on UTLSafeZone");
static_assert(offsetof(UTLSafeZone, TLVisibility) == 0x000198, "Member 'UTLSafeZone::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLSafeZone, TooltipPositionData) == 0x00019C, "Member 'UTLSafeZone::TooltipPositionData' has a wrong offset!");

// Class TLUI.TLScaleBox
// 0x00F0 (0x0230 - 0x0140)
class UTLScaleBox final : public UScaleBox
{
public:
	uint8                                         Pad_140[0x60];                                     // 0x0140(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x01A4(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x01B0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x01F0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLScaleBox">();
	}
	static class UTLScaleBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLScaleBox>();
	}
};
static_assert(alignof(UTLScaleBox) == 0x000008, "Wrong alignment on UTLScaleBox");
static_assert(sizeof(UTLScaleBox) == 0x000230, "Wrong size on UTLScaleBox");
static_assert(offsetof(UTLScaleBox, TLVisibility) == 0x0001A0, "Member 'UTLScaleBox::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLScaleBox, TooltipPositionData) == 0x0001A4, "Member 'UTLScaleBox::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLScaleBox, VisibleBinding) == 0x0001B0, "Member 'UTLScaleBox::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLScaleBox, EnabledBinding) == 0x0001F0, "Member 'UTLScaleBox::EnabledBinding' has a wrong offset!");

// Class TLUI.TLScrollBox
// 0x09E0 (0x1370 - 0x0990)
class UTLScrollBox final : public UScrollBox
{
public:
	uint8                                         Pad_990[0x88];                                     // 0x0990(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0A18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x0A1C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetFocusableData                 TLFocusableData;                                   // 0x0A28(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_A40[0x10];                                     // 0x0A40(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0A50(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0A90(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bCustomScrollBarStyle;                             // 0x0AD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD1[0x7];                                      // 0x0AD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScrollBarStyle                        ScrollBarStyleConsole;                             // 0x0AD8(0x05E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            PanelHoveredVerticalBackgroundImage;               // 0x10B8(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            PanelHoveredHorizontalBackgroundImage;             // 0x1140(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            PanelHoveredVerticalBackgroundImageConsole;        // 0x11C8(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            PanelHoveredHorizontalBackgroundImageConsole;      // 0x1250(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bCustomScrollBarStyleConsole;                      // 0x12D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D9[0x3];                                     // 0x12D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                ScrollbarTrackPadding;                             // 0x12DC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                ScrollbarPaddingConsole;                           // 0x12EC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ScrollbarThicknessConsole;                         // 0x12FC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                ScrollbarTrackPaddingConsole;                      // 0x1304(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bScrollbarLeft;                                    // 0x1314(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowClickDragScrolling;                          // 0x1315(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDescendantScrollDestination                  FocusDescendantScrolldestination;                  // 0x1316(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDragScrollingType                            DragScrollingType;                                 // 0x1317(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonAreaType                              MyAutonAreaType;                                   // 0x1318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1319[0x3];                                     // 0x1319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaGroupIdValue;                             // 0x131C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutonAreaOrderTagValue;                            // 0x1320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFence;                                    // 0x1324(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDome;                                     // 0x1325(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarPrevFirstBeforeLeaveFlag;              // 0x1326(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoRecentAreaWhenLeaveFlag;                // 0x1327(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoBackAreaWhenLeaveFlag;                  // 0x1328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoAreaByOrderTagHintWhenLeaveFlag;        // 0x1329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonOrderTagHint                          AutonAreaLeaveOrderTagHintValue;                   // 0x132A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132B[0x1];                                     // 0x132B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaLeaveGivenOrderTagValue;                  // 0x132C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstThenCardinalEnterFlag;          // 0x1330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstWhenFarCardinalEnterFlag;       // 0x1331(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaTakeRecentIfExistWhenCardinalEnterFlag;   // 0x1332(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonChildNavigationHint                   AutonAreaChildNavigatingHint;                      // 0x1333(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarNavigationWhenShortCardinalFailedFlag; // 0x1334(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1335[0x3];                                     // 0x1335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds; // 0x1338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AutonAreaCardinalNavigationWeightValue;            // 0x1348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseHitOnRoad;                         // 0x134C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseNearest;                           // 0x134D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaHaveNosyNeighborsFlag;                    // 0x134E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaCouldBeLookingAreaFlag;                   // 0x134F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                AutonAreaLookingFeedbackWidget;                    // 0x1350(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ITLWidgetVisibilityInterface> AutonAreaFocusPresenter;                           // 0x1358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          AutonScrollSensitiveFlag;                          // 0x1368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonScrollDestination                     AutonScrollDestionationFlag;                       // 0x1369(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonLoopNavigationHint                    AutonScrollLoopNavigatingHint;                     // 0x136A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonScrollUseFastScrolling;                       // 0x136B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonScrollNavigationClearWhenStartFastScrollingFlag; // 0x136C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136D[0x3];                                     // 0x136D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLScrollBox">();
	}
	static class UTLScrollBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLScrollBox>();
	}
};
static_assert(alignof(UTLScrollBox) == 0x000008, "Wrong alignment on UTLScrollBox");
static_assert(sizeof(UTLScrollBox) == 0x001370, "Wrong size on UTLScrollBox");
static_assert(offsetof(UTLScrollBox, TLVisibility) == 0x000A18, "Member 'UTLScrollBox::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, TooltipPositionData) == 0x000A1C, "Member 'UTLScrollBox::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, TLFocusableData) == 0x000A28, "Member 'UTLScrollBox::TLFocusableData' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, VisibleBinding) == 0x000A50, "Member 'UTLScrollBox::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, EnabledBinding) == 0x000A90, "Member 'UTLScrollBox::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, bCustomScrollBarStyle) == 0x000AD0, "Member 'UTLScrollBox::bCustomScrollBarStyle' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, ScrollBarStyleConsole) == 0x000AD8, "Member 'UTLScrollBox::ScrollBarStyleConsole' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, PanelHoveredVerticalBackgroundImage) == 0x0010B8, "Member 'UTLScrollBox::PanelHoveredVerticalBackgroundImage' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, PanelHoveredHorizontalBackgroundImage) == 0x001140, "Member 'UTLScrollBox::PanelHoveredHorizontalBackgroundImage' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, PanelHoveredVerticalBackgroundImageConsole) == 0x0011C8, "Member 'UTLScrollBox::PanelHoveredVerticalBackgroundImageConsole' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, PanelHoveredHorizontalBackgroundImageConsole) == 0x001250, "Member 'UTLScrollBox::PanelHoveredHorizontalBackgroundImageConsole' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, bCustomScrollBarStyleConsole) == 0x0012D8, "Member 'UTLScrollBox::bCustomScrollBarStyleConsole' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, ScrollbarTrackPadding) == 0x0012DC, "Member 'UTLScrollBox::ScrollbarTrackPadding' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, ScrollbarPaddingConsole) == 0x0012EC, "Member 'UTLScrollBox::ScrollbarPaddingConsole' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, ScrollbarThicknessConsole) == 0x0012FC, "Member 'UTLScrollBox::ScrollbarThicknessConsole' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, ScrollbarTrackPaddingConsole) == 0x001304, "Member 'UTLScrollBox::ScrollbarTrackPaddingConsole' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, bScrollbarLeft) == 0x001314, "Member 'UTLScrollBox::bScrollbarLeft' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, bAllowClickDragScrolling) == 0x001315, "Member 'UTLScrollBox::bAllowClickDragScrolling' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, FocusDescendantScrolldestination) == 0x001316, "Member 'UTLScrollBox::FocusDescendantScrolldestination' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, DragScrollingType) == 0x001317, "Member 'UTLScrollBox::DragScrollingType' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, MyAutonAreaType) == 0x001318, "Member 'UTLScrollBox::MyAutonAreaType' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaGroupIdValue) == 0x00131C, "Member 'UTLScrollBox::AutonAreaGroupIdValue' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaOrderTagValue) == 0x001320, "Member 'UTLScrollBox::AutonAreaOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaFence) == 0x001324, "Member 'UTLScrollBox::AutonAreaFence' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaDome) == 0x001325, "Member 'UTLScrollBox::AutonAreaDome' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaFarPrevFirstBeforeLeaveFlag) == 0x001326, "Member 'UTLScrollBox::AutonAreaFarPrevFirstBeforeLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaGoRecentAreaWhenLeaveFlag) == 0x001327, "Member 'UTLScrollBox::AutonAreaGoRecentAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaGoBackAreaWhenLeaveFlag) == 0x001328, "Member 'UTLScrollBox::AutonAreaGoBackAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaGoAreaByOrderTagHintWhenLeaveFlag) == 0x001329, "Member 'UTLScrollBox::AutonAreaGoAreaByOrderTagHintWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaLeaveOrderTagHintValue) == 0x00132A, "Member 'UTLScrollBox::AutonAreaLeaveOrderTagHintValue' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaLeaveGivenOrderTagValue) == 0x00132C, "Member 'UTLScrollBox::AutonAreaLeaveGivenOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaOrderFirstThenCardinalEnterFlag) == 0x001330, "Member 'UTLScrollBox::AutonAreaOrderFirstThenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaOrderFirstWhenFarCardinalEnterFlag) == 0x001331, "Member 'UTLScrollBox::AutonAreaOrderFirstWhenFarCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaTakeRecentIfExistWhenCardinalEnterFlag) == 0x001332, "Member 'UTLScrollBox::AutonAreaTakeRecentIfExistWhenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaChildNavigatingHint) == 0x001333, "Member 'UTLScrollBox::AutonAreaChildNavigatingHint' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaFarNavigationWhenShortCardinalFailedFlag) == 0x001334, "Member 'UTLScrollBox::AutonAreaFarNavigationWhenShortCardinalFailedFlag' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds) == 0x001338, "Member 'UTLScrollBox::AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaCardinalNavigationWeightValue) == 0x001348, "Member 'UTLScrollBox::AutonAreaCardinalNavigationWeightValue' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaDontUseHitOnRoad) == 0x00134C, "Member 'UTLScrollBox::AutonAreaDontUseHitOnRoad' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaDontUseNearest) == 0x00134D, "Member 'UTLScrollBox::AutonAreaDontUseNearest' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaHaveNosyNeighborsFlag) == 0x00134E, "Member 'UTLScrollBox::AutonAreaHaveNosyNeighborsFlag' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaCouldBeLookingAreaFlag) == 0x00134F, "Member 'UTLScrollBox::AutonAreaCouldBeLookingAreaFlag' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaLookingFeedbackWidget) == 0x001350, "Member 'UTLScrollBox::AutonAreaLookingFeedbackWidget' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonAreaFocusPresenter) == 0x001358, "Member 'UTLScrollBox::AutonAreaFocusPresenter' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonScrollSensitiveFlag) == 0x001368, "Member 'UTLScrollBox::AutonScrollSensitiveFlag' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonScrollDestionationFlag) == 0x001369, "Member 'UTLScrollBox::AutonScrollDestionationFlag' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonScrollLoopNavigatingHint) == 0x00136A, "Member 'UTLScrollBox::AutonScrollLoopNavigatingHint' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonScrollUseFastScrolling) == 0x00136B, "Member 'UTLScrollBox::AutonScrollUseFastScrolling' has a wrong offset!");
static_assert(offsetof(UTLScrollBox, AutonScrollNavigationClearWhenStartFastScrollingFlag) == 0x00136C, "Member 'UTLScrollBox::AutonScrollNavigationClearWhenStartFastScrollingFlag' has a wrong offset!");

// Class TLUI.TLSizeBox
// 0x0158 (0x02B0 - 0x0158)
class UTLSizeBox final : public USizeBox
{
public:
	uint8                                         Pad_158[0x78];                                     // 0x0158(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x01D4(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x01E0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0220(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ETLAutonAreaType                              MyAutonAreaType;                                   // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaGroupIdValue;                             // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutonAreaOrderTagValue;                            // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFence;                                    // 0x026C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDome;                                     // 0x026D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarPrevFirstBeforeLeaveFlag;              // 0x026E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoRecentAreaWhenLeaveFlag;                // 0x026F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoBackAreaWhenLeaveFlag;                  // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoAreaByOrderTagHintWhenLeaveFlag;        // 0x0271(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonOrderTagHint                          AutonAreaLeaveOrderTagHintValue;                   // 0x0272(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_273[0x1];                                      // 0x0273(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaLeaveGivenOrderTagValue;                  // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstThenCardinalEnterFlag;          // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstWhenFarCardinalEnterFlag;       // 0x0279(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaTakeRecentIfExistWhenCardinalEnterFlag;   // 0x027A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonChildNavigationHint                   AutonAreaChildNavigatingHint;                      // 0x027B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarNavigationWhenShortCardinalFailedFlag; // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds; // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AutonAreaCardinalNavigationWeightValue;            // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseHitOnRoad;                         // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseNearest;                           // 0x0295(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaHaveNosyNeighborsFlag;                    // 0x0296(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaCouldBeLookingAreaFlag;                   // 0x0297(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                AutonAreaLookingFeedbackWidget;                    // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ITLWidgetVisibilityInterface> AutonAreaFocusPresenter;                           // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLSizeBox">();
	}
	static class UTLSizeBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLSizeBox>();
	}
};
static_assert(alignof(UTLSizeBox) == 0x000008, "Wrong alignment on UTLSizeBox");
static_assert(sizeof(UTLSizeBox) == 0x0002B0, "Wrong size on UTLSizeBox");
static_assert(offsetof(UTLSizeBox, TLVisibility) == 0x0001D0, "Member 'UTLSizeBox::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, TooltipPositionData) == 0x0001D4, "Member 'UTLSizeBox::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, VisibleBinding) == 0x0001E0, "Member 'UTLSizeBox::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, EnabledBinding) == 0x000220, "Member 'UTLSizeBox::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, MyAutonAreaType) == 0x000260, "Member 'UTLSizeBox::MyAutonAreaType' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaGroupIdValue) == 0x000264, "Member 'UTLSizeBox::AutonAreaGroupIdValue' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaOrderTagValue) == 0x000268, "Member 'UTLSizeBox::AutonAreaOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaFence) == 0x00026C, "Member 'UTLSizeBox::AutonAreaFence' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaDome) == 0x00026D, "Member 'UTLSizeBox::AutonAreaDome' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaFarPrevFirstBeforeLeaveFlag) == 0x00026E, "Member 'UTLSizeBox::AutonAreaFarPrevFirstBeforeLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaGoRecentAreaWhenLeaveFlag) == 0x00026F, "Member 'UTLSizeBox::AutonAreaGoRecentAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaGoBackAreaWhenLeaveFlag) == 0x000270, "Member 'UTLSizeBox::AutonAreaGoBackAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaGoAreaByOrderTagHintWhenLeaveFlag) == 0x000271, "Member 'UTLSizeBox::AutonAreaGoAreaByOrderTagHintWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaLeaveOrderTagHintValue) == 0x000272, "Member 'UTLSizeBox::AutonAreaLeaveOrderTagHintValue' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaLeaveGivenOrderTagValue) == 0x000274, "Member 'UTLSizeBox::AutonAreaLeaveGivenOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaOrderFirstThenCardinalEnterFlag) == 0x000278, "Member 'UTLSizeBox::AutonAreaOrderFirstThenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaOrderFirstWhenFarCardinalEnterFlag) == 0x000279, "Member 'UTLSizeBox::AutonAreaOrderFirstWhenFarCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaTakeRecentIfExistWhenCardinalEnterFlag) == 0x00027A, "Member 'UTLSizeBox::AutonAreaTakeRecentIfExistWhenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaChildNavigatingHint) == 0x00027B, "Member 'UTLSizeBox::AutonAreaChildNavigatingHint' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaFarNavigationWhenShortCardinalFailedFlag) == 0x00027C, "Member 'UTLSizeBox::AutonAreaFarNavigationWhenShortCardinalFailedFlag' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds) == 0x000280, "Member 'UTLSizeBox::AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaCardinalNavigationWeightValue) == 0x000290, "Member 'UTLSizeBox::AutonAreaCardinalNavigationWeightValue' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaDontUseHitOnRoad) == 0x000294, "Member 'UTLSizeBox::AutonAreaDontUseHitOnRoad' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaDontUseNearest) == 0x000295, "Member 'UTLSizeBox::AutonAreaDontUseNearest' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaHaveNosyNeighborsFlag) == 0x000296, "Member 'UTLSizeBox::AutonAreaHaveNosyNeighborsFlag' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaCouldBeLookingAreaFlag) == 0x000297, "Member 'UTLSizeBox::AutonAreaCouldBeLookingAreaFlag' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaLookingFeedbackWidget) == 0x000298, "Member 'UTLSizeBox::AutonAreaLookingFeedbackWidget' has a wrong offset!");
static_assert(offsetof(UTLSizeBox, AutonAreaFocusPresenter) == 0x0002A0, "Member 'UTLSizeBox::AutonAreaFocusPresenter' has a wrong offset!");

// Class TLUI.TLSlider
// 0x00F8 (0x05F0 - 0x04F8)
class UTLSlider final : public USlider
{
public:
	uint8                                         Pad_4F8[0x60];                                     // 0x04F8(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x055C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0568(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x05A8(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UTLSoundEvent*                          OnCaptureBeginSound;                               // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();
	void OnCaptureBegin();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLSlider">();
	}
	static class UTLSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLSlider>();
	}
};
static_assert(alignof(UTLSlider) == 0x000008, "Wrong alignment on UTLSlider");
static_assert(sizeof(UTLSlider) == 0x0005F0, "Wrong size on UTLSlider");
static_assert(offsetof(UTLSlider, TLVisibility) == 0x000558, "Member 'UTLSlider::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLSlider, TooltipPositionData) == 0x00055C, "Member 'UTLSlider::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLSlider, VisibleBinding) == 0x000568, "Member 'UTLSlider::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLSlider, EnabledBinding) == 0x0005A8, "Member 'UTLSlider::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLSlider, OnCaptureBeginSound) == 0x0005E8, "Member 'UTLSlider::OnCaptureBeginSound' has a wrong offset!");

// Class TLUI.TLUISettings
// 0x0008 (0x0040 - 0x0038)
class UTLUISettings final : public UDeveloperSettings
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLUISettings">();
	}
	static class UTLUISettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLUISettings>();
	}
};
static_assert(alignof(UTLUISettings) == 0x000008, "Wrong alignment on UTLUISettings");
static_assert(sizeof(UTLUISettings) == 0x000040, "Wrong size on UTLUISettings");

// Class TLUI.TLSlider2D
// 0x0568 (0x0670 - 0x0108)
class UTLSlider2D final : public UWidget
{
public:
	uint8                                         Pad_108[0x60];                                     // 0x0108(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Value;                                             // 0x0168(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ValueDelegate;                                     // 0x0170(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLSlider2DStyle                       WidgetStyle;                                       // 0x0180(0x03C8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderBarColor;                                    // 0x0548(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderHandleColor;                                 // 0x0558(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IndentHandle;                                      // 0x0568(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Locked;                                            // 0x0569(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MouseUsesStep;                                     // 0x056A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequiresControllerLock;                            // 0x056B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyPositive;                                      // 0x056C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56D[0x3];                                      // 0x056D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StepSize;                                          // 0x0570(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x0574(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_575[0x3];                                      // 0x0575(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnMouseCaptureBegin;                               // 0x0578(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMouseCaptureEnd;                                 // 0x0588(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnControllerCaptureBegin;                          // 0x0598(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnControllerCaptureEnd;                            // 0x05A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnValueChanged;                                    // 0x05B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C8[0x10];                                     // 0x05C8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x05D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x05DC(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x05E8(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0628(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UTLSoundEvent*                          OnCaptureBeginSound;                               // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	struct FVector2D GetVector2D__DelegateSignature();
	void HandleUpdateEnabled();
	void HandleUpdateVisible();
	void OnCaptureBegin();
	void SetIndentHandle(bool InValue);
	void SetLocked(bool InValue);
	void SetMouseUsesStep(bool InMouseUsesStep);
	void SetOnlyPositive(bool InValue);
	void SetRequiresControllerLock(bool InRequiresControllerLock);
	void SetSliderBarColor(const struct FLinearColor& InValue);
	void SetSliderHandleColor(const struct FLinearColor& InValue);
	void SetStepSize(float InValue);
	void SetValue(const struct FVector2D& InValue);

	struct FVector2D GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLSlider2D">();
	}
	static class UTLSlider2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLSlider2D>();
	}
};
static_assert(alignof(UTLSlider2D) == 0x000008, "Wrong alignment on UTLSlider2D");
static_assert(sizeof(UTLSlider2D) == 0x000670, "Wrong size on UTLSlider2D");
static_assert(offsetof(UTLSlider2D, Value) == 0x000168, "Member 'UTLSlider2D::Value' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, ValueDelegate) == 0x000170, "Member 'UTLSlider2D::ValueDelegate' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, WidgetStyle) == 0x000180, "Member 'UTLSlider2D::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, SliderBarColor) == 0x000548, "Member 'UTLSlider2D::SliderBarColor' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, SliderHandleColor) == 0x000558, "Member 'UTLSlider2D::SliderHandleColor' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, IndentHandle) == 0x000568, "Member 'UTLSlider2D::IndentHandle' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, Locked) == 0x000569, "Member 'UTLSlider2D::Locked' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, MouseUsesStep) == 0x00056A, "Member 'UTLSlider2D::MouseUsesStep' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, RequiresControllerLock) == 0x00056B, "Member 'UTLSlider2D::RequiresControllerLock' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, OnlyPositive) == 0x00056C, "Member 'UTLSlider2D::OnlyPositive' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, StepSize) == 0x000570, "Member 'UTLSlider2D::StepSize' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, IsFocusable) == 0x000574, "Member 'UTLSlider2D::IsFocusable' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, OnMouseCaptureBegin) == 0x000578, "Member 'UTLSlider2D::OnMouseCaptureBegin' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, OnMouseCaptureEnd) == 0x000588, "Member 'UTLSlider2D::OnMouseCaptureEnd' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, OnControllerCaptureBegin) == 0x000598, "Member 'UTLSlider2D::OnControllerCaptureBegin' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, OnControllerCaptureEnd) == 0x0005A8, "Member 'UTLSlider2D::OnControllerCaptureEnd' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, OnValueChanged) == 0x0005B8, "Member 'UTLSlider2D::OnValueChanged' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, TLVisibility) == 0x0005D8, "Member 'UTLSlider2D::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, TooltipPositionData) == 0x0005DC, "Member 'UTLSlider2D::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, VisibleBinding) == 0x0005E8, "Member 'UTLSlider2D::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, EnabledBinding) == 0x000628, "Member 'UTLSlider2D::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLSlider2D, OnCaptureBeginSound) == 0x000668, "Member 'UTLSlider2D::OnCaptureBeginSound' has a wrong offset!");

// Class TLUI.TLSpacer
// 0x00F0 (0x0210 - 0x0120)
class UTLSpacer final : public USpacer
{
public:
	uint8                                         Pad_120[0x60];                                     // 0x0120(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x0184(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0190(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x01D0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLSpacer">();
	}
	static class UTLSpacer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLSpacer>();
	}
};
static_assert(alignof(UTLSpacer) == 0x000008, "Wrong alignment on UTLSpacer");
static_assert(sizeof(UTLSpacer) == 0x000210, "Wrong size on UTLSpacer");
static_assert(offsetof(UTLSpacer, TLVisibility) == 0x000180, "Member 'UTLSpacer::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLSpacer, TooltipPositionData) == 0x000184, "Member 'UTLSpacer::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLSpacer, VisibleBinding) == 0x000190, "Member 'UTLSpacer::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLSpacer, EnabledBinding) == 0x0001D0, "Member 'UTLSpacer::EnabledBinding' has a wrong offset!");

// Class TLUI.TLSpinBox
// 0x00F0 (0x0610 - 0x0520)
class UTLSpinBox final : public USpinBox
{
public:
	uint8                                         Pad_520[0x60];                                     // 0x0520(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x0584(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0590(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x05D0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLSpinBox">();
	}
	static class UTLSpinBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLSpinBox>();
	}
};
static_assert(alignof(UTLSpinBox) == 0x000008, "Wrong alignment on UTLSpinBox");
static_assert(sizeof(UTLSpinBox) == 0x000610, "Wrong size on UTLSpinBox");
static_assert(offsetof(UTLSpinBox, TLVisibility) == 0x000580, "Member 'UTLSpinBox::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLSpinBox, TooltipPositionData) == 0x000584, "Member 'UTLSpinBox::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLSpinBox, VisibleBinding) == 0x000590, "Member 'UTLSpinBox::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLSpinBox, EnabledBinding) == 0x0005D0, "Member 'UTLSpinBox::EnabledBinding' has a wrong offset!");

// Class TLUI.TLTabButton
// 0x00F0 (0x0860 - 0x0770)
class UTLTabButton final : public UCheckBox
{
public:
	uint8                                         Pad_770[0x60];                                     // 0x0770(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x07D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x07D4(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UTLSoundEvent*                          OnSelectedSound;                                   // 0x07E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLSoundEvent*                          OnUnselectedSound;                                 // 0x07E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelWidget*                           TLTabButtonPanelWidget;                            // 0x07F0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             TLTabButtonPanelWidgetDelegate;                    // 0x07F8(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	class UTLTabContent*                          TLTabContentWidget;                                // 0x0808(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             TLTabContentWidgetDelegate;                        // 0x0810(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetAnimationBind                 OnCheckedAnimationBind;                            // 0x0820(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetAnimationBind                 OnUncheckedAnimationBind;                          // 0x0830(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTabButtonSelected;                               // 0x0840(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTabButtonUnselected;                             // 0x0850(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	class UPanelWidget* GetPanelWidget__DelegateSignature();
	class UTLTabContent* GetTLTabContent__DelegateSignature();
	class UWidgetAnimation* GetWidgetAnimation__DelegateSignature();
	void OnSelected__DelegateSignature(int32 InTabIndex);
	void OnUnselected__DelegateSignature(int32 InTabIndex);
	void This_OnCheckBoxComponentStateChanged(bool IsChecked_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLTabButton">();
	}
	static class UTLTabButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLTabButton>();
	}
};
static_assert(alignof(UTLTabButton) == 0x000008, "Wrong alignment on UTLTabButton");
static_assert(sizeof(UTLTabButton) == 0x000860, "Wrong size on UTLTabButton");
static_assert(offsetof(UTLTabButton, TLVisibility) == 0x0007D0, "Member 'UTLTabButton::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLTabButton, TooltipPositionData) == 0x0007D4, "Member 'UTLTabButton::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLTabButton, OnSelectedSound) == 0x0007E0, "Member 'UTLTabButton::OnSelectedSound' has a wrong offset!");
static_assert(offsetof(UTLTabButton, OnUnselectedSound) == 0x0007E8, "Member 'UTLTabButton::OnUnselectedSound' has a wrong offset!");
static_assert(offsetof(UTLTabButton, TLTabButtonPanelWidget) == 0x0007F0, "Member 'UTLTabButton::TLTabButtonPanelWidget' has a wrong offset!");
static_assert(offsetof(UTLTabButton, TLTabButtonPanelWidgetDelegate) == 0x0007F8, "Member 'UTLTabButton::TLTabButtonPanelWidgetDelegate' has a wrong offset!");
static_assert(offsetof(UTLTabButton, TLTabContentWidget) == 0x000808, "Member 'UTLTabButton::TLTabContentWidget' has a wrong offset!");
static_assert(offsetof(UTLTabButton, TLTabContentWidgetDelegate) == 0x000810, "Member 'UTLTabButton::TLTabContentWidgetDelegate' has a wrong offset!");
static_assert(offsetof(UTLTabButton, OnCheckedAnimationBind) == 0x000820, "Member 'UTLTabButton::OnCheckedAnimationBind' has a wrong offset!");
static_assert(offsetof(UTLTabButton, OnUncheckedAnimationBind) == 0x000830, "Member 'UTLTabButton::OnUncheckedAnimationBind' has a wrong offset!");
static_assert(offsetof(UTLTabButton, OnTabButtonSelected) == 0x000840, "Member 'UTLTabButton::OnTabButtonSelected' has a wrong offset!");
static_assert(offsetof(UTLTabButton, OnTabButtonUnselected) == 0x000850, "Member 'UTLTabButton::OnTabButtonUnselected' has a wrong offset!");

// Class TLUI.TLTabContent
// 0x0080 (0x01B8 - 0x0138)
class UTLTabContent final : public UWidgetSwitcher
{
public:
	uint8                                         Pad_138[0x60];                                     // 0x0138(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x019C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnContentChanged;                                  // 0x01A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLTabContent">();
	}
	static class UTLTabContent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLTabContent>();
	}
};
static_assert(alignof(UTLTabContent) == 0x000008, "Wrong alignment on UTLTabContent");
static_assert(sizeof(UTLTabContent) == 0x0001B8, "Wrong size on UTLTabContent");
static_assert(offsetof(UTLTabContent, TLVisibility) == 0x000198, "Member 'UTLTabContent::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLTabContent, TooltipPositionData) == 0x00019C, "Member 'UTLTabContent::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLTabContent, OnContentChanged) == 0x0001A8, "Member 'UTLTabContent::OnContentChanged' has a wrong offset!");

// Class TLUI.TLTestStyle
// 0x0010 (0x0038 - 0x0028)
class UTLTestStyle final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLTestStyle">();
	}
	static class UTLTestStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLTestStyle>();
	}
};
static_assert(alignof(UTLTestStyle) == 0x000008, "Wrong alignment on UTLTestStyle");
static_assert(sizeof(UTLTestStyle) == 0x000038, "Wrong size on UTLTestStyle");

// Class TLUI.TLTextBlockBase
// 0x0350 (0x0500 - 0x01B0)
class UTLTextBlockBase : public UTextLayoutWidgetTL
{
public:
	class FText                                   Text;                                              // 0x01B0(0x0018)(Edit, NativeAccessSpecifierPublic)
	TDelegate<void()>                             TextDelegate;                                      // 0x01C8(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateColor                            ColorAndOpacity;                                   // 0x01D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ColorAndOpacityDelegate;                           // 0x0200(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x0210(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColorAndOpacity;                             // 0x0270(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ShadowColorAndOpacityDelegate;                     // 0x0280(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinDesiredWidth;                                   // 0x0290(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWrapWithInvalidationPanel;                        // 0x0294(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableHyperlink;                                 // 0x0295(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomDisabledColor;                           // 0x0296(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_297[0x1];                                      // 0x0297(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CustomDisabledColorAndOpacity;                     // 0x0298(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTLTextBlockDecorator*>          DecoratorObjects;                                  // 0x02A8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B8[0x248];                                    // 0x02B8(0x0248)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAutoWrapText(bool bInValue);
	void SetColorAndOpacity(const struct FSlateColor& InColorAndOpacity);
	void SetCustomDisabledColorAndOpacity(const struct FLinearColor& InCustomDisabledColorAndOpacity);
	void SetFont(const struct FSlateFontInfo& InFontInfo);
	void SetLineHeightPercentage(float InLineHeightPercentage);
	void SetMinDesiredWidth(float InMinDesiredWidth);
	void SetOpacity(float InOpacity);
	void SetShadowColorAndOpacity(const struct FLinearColor& InShadowColorAndOpacity);
	void SetShadowOffset(const struct FVector2D& InShadowOffset);
	void SetText(const class FText& InText);
	void SetUseCustomDisabledColor(bool bInUseCustomDisabledColor);
	void SetUseWrapScaling(bool bInValue);
	void SetWrapLimitOverRule(ETLTextWrapLimitOverRule InWrapLimitOverRule);
	void SetWrapTextAt(float InWrapText);

	class FText GetText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLTextBlockBase">();
	}
	static class UTLTextBlockBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLTextBlockBase>();
	}
};
static_assert(alignof(UTLTextBlockBase) == 0x000008, "Wrong alignment on UTLTextBlockBase");
static_assert(sizeof(UTLTextBlockBase) == 0x000500, "Wrong size on UTLTextBlockBase");
static_assert(offsetof(UTLTextBlockBase, Text) == 0x0001B0, "Member 'UTLTextBlockBase::Text' has a wrong offset!");
static_assert(offsetof(UTLTextBlockBase, TextDelegate) == 0x0001C8, "Member 'UTLTextBlockBase::TextDelegate' has a wrong offset!");
static_assert(offsetof(UTLTextBlockBase, ColorAndOpacity) == 0x0001D8, "Member 'UTLTextBlockBase::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UTLTextBlockBase, ColorAndOpacityDelegate) == 0x000200, "Member 'UTLTextBlockBase::ColorAndOpacityDelegate' has a wrong offset!");
static_assert(offsetof(UTLTextBlockBase, Font) == 0x000210, "Member 'UTLTextBlockBase::Font' has a wrong offset!");
static_assert(offsetof(UTLTextBlockBase, ShadowOffset) == 0x000268, "Member 'UTLTextBlockBase::ShadowOffset' has a wrong offset!");
static_assert(offsetof(UTLTextBlockBase, ShadowColorAndOpacity) == 0x000270, "Member 'UTLTextBlockBase::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UTLTextBlockBase, ShadowColorAndOpacityDelegate) == 0x000280, "Member 'UTLTextBlockBase::ShadowColorAndOpacityDelegate' has a wrong offset!");
static_assert(offsetof(UTLTextBlockBase, MinDesiredWidth) == 0x000290, "Member 'UTLTextBlockBase::MinDesiredWidth' has a wrong offset!");
static_assert(offsetof(UTLTextBlockBase, bWrapWithInvalidationPanel) == 0x000294, "Member 'UTLTextBlockBase::bWrapWithInvalidationPanel' has a wrong offset!");
static_assert(offsetof(UTLTextBlockBase, bDisableHyperlink) == 0x000295, "Member 'UTLTextBlockBase::bDisableHyperlink' has a wrong offset!");
static_assert(offsetof(UTLTextBlockBase, bUseCustomDisabledColor) == 0x000296, "Member 'UTLTextBlockBase::bUseCustomDisabledColor' has a wrong offset!");
static_assert(offsetof(UTLTextBlockBase, CustomDisabledColorAndOpacity) == 0x000298, "Member 'UTLTextBlockBase::CustomDisabledColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UTLTextBlockBase, DecoratorObjects) == 0x0002A8, "Member 'UTLTextBlockBase::DecoratorObjects' has a wrong offset!");

// Class TLUI.TLTextBlock
// 0x0308 (0x0808 - 0x0500)
class UTLTextBlock final : public UTLTextBlockBase
{
public:
	uint8                                         Pad_500[0x60];                                     // 0x0500(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x0564(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0570(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x05B0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingText                   TextBinding;                                       // 0x05F0(0x0048)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingTextTime               TextTimeBinding;                                   // 0x0638(0x0048)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingTextBlockStyleFromTable TextBlockStyleBindingFromTable;                    // 0x0680(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingTextBlockStylePath     TextBlockStylePathBinding;                         // 0x06C0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingTextColorAndOpacity    TextColorAndOpacityBinding;                        // 0x0700(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingTextColorWithColorTable TextColorWithColorTableBinding;                    // 0x0740(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_780[0x10];                                     // 0x0780(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        TLTextBlockStyle;                                  // 0x0790(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7A8[0x10];                                     // 0x07A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAdvancedMarkupText;                               // 0x07B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseTextBlockStyleMarginAndLineHeightPercentage;   // 0x07B9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7BA[0x4E];                                     // 0x07BA(0x004E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleUpdateEnabled();
	void HandleUpdateText();
	void HandleUpdateTextBlockStyleFromTable();
	void HandleUpdateTextBlockStylePath();
	void HandleUpdateTextColorAndOpacity();
	void HandleUpdateTextColorWithColorTable();
	void HandleUpdateTextTime();
	void HandleUpdateVisible();
	void ResetTextColor();
	void SetTextBlockStyleFromTable(class FName InTableKey);
	void SetTextBlockStylePath(const struct FSoftObjectPath& InTLTextBlockStylePath);
	void SetTextColorWithColorTable(class FName InTableColorKey);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLTextBlock">();
	}
	static class UTLTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLTextBlock>();
	}
};
static_assert(alignof(UTLTextBlock) == 0x000008, "Wrong alignment on UTLTextBlock");
static_assert(sizeof(UTLTextBlock) == 0x000808, "Wrong size on UTLTextBlock");
static_assert(offsetof(UTLTextBlock, TLVisibility) == 0x000560, "Member 'UTLTextBlock::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLTextBlock, TooltipPositionData) == 0x000564, "Member 'UTLTextBlock::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLTextBlock, VisibleBinding) == 0x000570, "Member 'UTLTextBlock::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLTextBlock, EnabledBinding) == 0x0005B0, "Member 'UTLTextBlock::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLTextBlock, TextBinding) == 0x0005F0, "Member 'UTLTextBlock::TextBinding' has a wrong offset!");
static_assert(offsetof(UTLTextBlock, TextTimeBinding) == 0x000638, "Member 'UTLTextBlock::TextTimeBinding' has a wrong offset!");
static_assert(offsetof(UTLTextBlock, TextBlockStyleBindingFromTable) == 0x000680, "Member 'UTLTextBlock::TextBlockStyleBindingFromTable' has a wrong offset!");
static_assert(offsetof(UTLTextBlock, TextBlockStylePathBinding) == 0x0006C0, "Member 'UTLTextBlock::TextBlockStylePathBinding' has a wrong offset!");
static_assert(offsetof(UTLTextBlock, TextColorAndOpacityBinding) == 0x000700, "Member 'UTLTextBlock::TextColorAndOpacityBinding' has a wrong offset!");
static_assert(offsetof(UTLTextBlock, TextColorWithColorTableBinding) == 0x000740, "Member 'UTLTextBlock::TextColorWithColorTableBinding' has a wrong offset!");
static_assert(offsetof(UTLTextBlock, TLTextBlockStyle) == 0x000790, "Member 'UTLTextBlock::TLTextBlockStyle' has a wrong offset!");
static_assert(offsetof(UTLTextBlock, bAdvancedMarkupText) == 0x0007B8, "Member 'UTLTextBlock::bAdvancedMarkupText' has a wrong offset!");
static_assert(offsetof(UTLTextBlock, bUseTextBlockStyleMarginAndLineHeightPercentage) == 0x0007B9, "Member 'UTLTextBlock::bUseTextBlockStyleMarginAndLineHeightPercentage' has a wrong offset!");

// Class TLUI.TLTextBlockDecorator
// 0x0088 (0x00B0 - 0x0028)
class UTLTextBlockDecorator final : public UObject
{
public:
	bool                                          bReveal;                                           // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RevealedIndex;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             ColorTable;                                        // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             MarkupImageTable;                                  // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             EmojiTable;                                        // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             TextBlockStyleTable;                               // 0x0048(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_50[0x60];                                      // 0x0050(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLTextBlockDecorator">();
	}
	static class UTLTextBlockDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLTextBlockDecorator>();
	}
};
static_assert(alignof(UTLTextBlockDecorator) == 0x000008, "Wrong alignment on UTLTextBlockDecorator");
static_assert(sizeof(UTLTextBlockDecorator) == 0x0000B0, "Wrong size on UTLTextBlockDecorator");
static_assert(offsetof(UTLTextBlockDecorator, bReveal) == 0x000028, "Member 'UTLTextBlockDecorator::bReveal' has a wrong offset!");
static_assert(offsetof(UTLTextBlockDecorator, RevealedIndex) == 0x00002C, "Member 'UTLTextBlockDecorator::RevealedIndex' has a wrong offset!");
static_assert(offsetof(UTLTextBlockDecorator, ColorTable) == 0x000030, "Member 'UTLTextBlockDecorator::ColorTable' has a wrong offset!");
static_assert(offsetof(UTLTextBlockDecorator, MarkupImageTable) == 0x000038, "Member 'UTLTextBlockDecorator::MarkupImageTable' has a wrong offset!");
static_assert(offsetof(UTLTextBlockDecorator, EmojiTable) == 0x000040, "Member 'UTLTextBlockDecorator::EmojiTable' has a wrong offset!");
static_assert(offsetof(UTLTextBlockDecorator, TextBlockStyleTable) == 0x000048, "Member 'UTLTextBlockDecorator::TextBlockStyleTable' has a wrong offset!");

// Class TLUI.TLTextBlockStyle
// 0x00C0 (0x00E8 - 0x0028)
class UTLTextBlockStyle final : public UObject
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0028(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ColorAndOpacity;                                   // 0x0080(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColorAndOpacity;                             // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Margin;                                            // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         LineHeightPercentage;                              // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomDisabledColor;                           // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CustomDisabledColorAndOpacity;                     // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLTextBlockStyle">();
	}
	static class UTLTextBlockStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLTextBlockStyle>();
	}
};
static_assert(alignof(UTLTextBlockStyle) == 0x000008, "Wrong alignment on UTLTextBlockStyle");
static_assert(sizeof(UTLTextBlockStyle) == 0x0000E8, "Wrong size on UTLTextBlockStyle");
static_assert(offsetof(UTLTextBlockStyle, Font) == 0x000028, "Member 'UTLTextBlockStyle::Font' has a wrong offset!");
static_assert(offsetof(UTLTextBlockStyle, ColorAndOpacity) == 0x000080, "Member 'UTLTextBlockStyle::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UTLTextBlockStyle, ShadowOffset) == 0x0000A8, "Member 'UTLTextBlockStyle::ShadowOffset' has a wrong offset!");
static_assert(offsetof(UTLTextBlockStyle, ShadowColorAndOpacity) == 0x0000B0, "Member 'UTLTextBlockStyle::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UTLTextBlockStyle, Margin) == 0x0000C0, "Member 'UTLTextBlockStyle::Margin' has a wrong offset!");
static_assert(offsetof(UTLTextBlockStyle, LineHeightPercentage) == 0x0000D0, "Member 'UTLTextBlockStyle::LineHeightPercentage' has a wrong offset!");
static_assert(offsetof(UTLTextBlockStyle, bUseCustomDisabledColor) == 0x0000D4, "Member 'UTLTextBlockStyle::bUseCustomDisabledColor' has a wrong offset!");
static_assert(offsetof(UTLTextBlockStyle, CustomDisabledColorAndOpacity) == 0x0000D8, "Member 'UTLTextBlockStyle::CustomDisabledColorAndOpacity' has a wrong offset!");

// Class TLUI.TLTextBlockStyleStructManager
// 0x0050 (0x0078 - 0x0028)
class UTLTextBlockStyleStructManager final : public UObject
{
public:
	TMap<class FName, struct FTLTextBlockStyleStruct> TextBlockStyleStructMap;                           // 0x0028(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLTextBlockStyleStructManager">();
	}
	static class UTLTextBlockStyleStructManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLTextBlockStyleStructManager>();
	}
};
static_assert(alignof(UTLTextBlockStyleStructManager) == 0x000008, "Wrong alignment on UTLTextBlockStyleStructManager");
static_assert(sizeof(UTLTextBlockStyleStructManager) == 0x000078, "Wrong size on UTLTextBlockStyleStructManager");
static_assert(offsetof(UTLTextBlockStyleStructManager, TextBlockStyleStructMap) == 0x000028, "Member 'UTLTextBlockStyleStructManager::TextBlockStyleStructMap' has a wrong offset!");

// Class TLUI.TLThrobber
// 0x00F0 (0x02A0 - 0x01B0)
class UTLThrobber final : public UThrobber
{
public:
	uint8                                         Pad_1B0[0x60];                                     // 0x01B0(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x0214(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0220(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0260(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLThrobber">();
	}
	static class UTLThrobber* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLThrobber>();
	}
};
static_assert(alignof(UTLThrobber) == 0x000008, "Wrong alignment on UTLThrobber");
static_assert(sizeof(UTLThrobber) == 0x0002A0, "Wrong size on UTLThrobber");
static_assert(offsetof(UTLThrobber, TLVisibility) == 0x000210, "Member 'UTLThrobber::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLThrobber, TooltipPositionData) == 0x000214, "Member 'UTLThrobber::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLThrobber, VisibleBinding) == 0x000220, "Member 'UTLThrobber::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLThrobber, EnabledBinding) == 0x000260, "Member 'UTLThrobber::EnabledBinding' has a wrong offset!");

// Class TLUI.TLTiledImage
// 0x00D8 (0x0928 - 0x0850)
class UTLTiledImage : public UTLImage
{
public:
	struct FDirectoryPath                         TilesDirectory;                                    // 0x0850(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         TileSize;                                          // 0x0860(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumColumns;                                        // 0x0864(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            CullingScaleRange;                                 // 0x0868(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         Tiles;                                             // 0x0878(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FVector2D                              TileTextureSize;                                   // 0x0888(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_890[0x40];                                     // 0x0890(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UObject*>                          ValidTiles;                                        // 0x08D0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_920[0x8];                                      // 0x0920(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCullingScaleRange(const struct FFloatRange& InCullingScaleRange);
	void SetNumColumns(int32 InNumColumns);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLTiledImage">();
	}
	static class UTLTiledImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLTiledImage>();
	}
};
static_assert(alignof(UTLTiledImage) == 0x000008, "Wrong alignment on UTLTiledImage");
static_assert(sizeof(UTLTiledImage) == 0x000928, "Wrong size on UTLTiledImage");
static_assert(offsetof(UTLTiledImage, TilesDirectory) == 0x000850, "Member 'UTLTiledImage::TilesDirectory' has a wrong offset!");
static_assert(offsetof(UTLTiledImage, TileSize) == 0x000860, "Member 'UTLTiledImage::TileSize' has a wrong offset!");
static_assert(offsetof(UTLTiledImage, NumColumns) == 0x000864, "Member 'UTLTiledImage::NumColumns' has a wrong offset!");
static_assert(offsetof(UTLTiledImage, CullingScaleRange) == 0x000868, "Member 'UTLTiledImage::CullingScaleRange' has a wrong offset!");
static_assert(offsetof(UTLTiledImage, Tiles) == 0x000878, "Member 'UTLTiledImage::Tiles' has a wrong offset!");
static_assert(offsetof(UTLTiledImage, TileTextureSize) == 0x000888, "Member 'UTLTiledImage::TileTextureSize' has a wrong offset!");
static_assert(offsetof(UTLTiledImage, ValidTiles) == 0x0008D0, "Member 'UTLTiledImage::ValidTiles' has a wrong offset!");

// Class TLUI.TLTiledMapImage
// 0x00B8 (0x09E0 - 0x0928)
class UTLTiledMapImage final : public UTLTiledImage
{
public:
	TSet<class UMaterialInstanceDynamic*>         DynamicMaterials;                                  // 0x0928(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, float>                      CustomParameterMap;                                // 0x0978(0x0050)(Edit, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTileValidated;                                   // 0x09C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D8[0x8];                                      // 0x09D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetParameterValue(class FName InParamName, float InValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLTiledMapImage">();
	}
	static class UTLTiledMapImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLTiledMapImage>();
	}
};
static_assert(alignof(UTLTiledMapImage) == 0x000008, "Wrong alignment on UTLTiledMapImage");
static_assert(sizeof(UTLTiledMapImage) == 0x0009E0, "Wrong size on UTLTiledMapImage");
static_assert(offsetof(UTLTiledMapImage, DynamicMaterials) == 0x000928, "Member 'UTLTiledMapImage::DynamicMaterials' has a wrong offset!");
static_assert(offsetof(UTLTiledMapImage, CustomParameterMap) == 0x000978, "Member 'UTLTiledMapImage::CustomParameterMap' has a wrong offset!");
static_assert(offsetof(UTLTiledMapImage, OnTileValidated) == 0x0009C8, "Member 'UTLTiledMapImage::OnTileValidated' has a wrong offset!");

// Class TLUI.TLTileView
// 0x0DF8 (0x1188 - 0x0390)
class UTLTileView final : public UTileView
{
public:
	uint8                                         Pad_390[0x88];                                     // 0x0390(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x041C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetFocusableData                 TLFocusableData;                                   // 0x0428(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_440[0x10];                                     // 0x0440(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0450(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0490(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingListChanged            ListChangedBinding;                                // 0x04D0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EDragScrollingType                            DragScrollingType;                                 // 0x0510(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETLAutonAreaType                              MyAutonAreaType;                                   // 0x0511(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_512[0x2];                                      // 0x0512(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaGroupIdValue;                             // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutonAreaOrderTagValue;                            // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFence;                                    // 0x051C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDome;                                     // 0x051D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarPrevFirstBeforeLeaveFlag;              // 0x051E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoRecentAreaWhenLeaveFlag;                // 0x051F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoBackAreaWhenLeaveFlag;                  // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoAreaByOrderTagHintWhenLeaveFlag;        // 0x0521(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonOrderTagHint                          AutonAreaLeaveOrderTagHintValue;                   // 0x0522(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_523[0x1];                                      // 0x0523(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaLeaveGivenOrderTagValue;                  // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstThenCardinalEnterFlag;          // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstWhenFarCardinalEnterFlag;       // 0x0529(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaTakeRecentIfExistWhenCardinalEnterFlag;   // 0x052A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonChildNavigationHint                   AutonAreaChildNavigatingHint;                      // 0x052B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarNavigationWhenShortCardinalFailedFlag; // 0x052C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52D[0x3];                                      // 0x052D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds; // 0x0530(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AutonAreaCardinalNavigationWeightValue;            // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseHitOnRoad;                         // 0x0544(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseNearest;                           // 0x0545(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaHaveNosyNeighborsFlag;                    // 0x0546(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaCouldBeLookingAreaFlag;                   // 0x0547(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                AutonAreaLookingFeedbackWidget;                    // 0x0548(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ITLWidgetVisibilityInterface> AutonAreaFocusPresenter;                           // 0x0550(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          AutonScrollSensitiveFlag;                          // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonScrollDestination                     AutonScrollDestionationFlag;                       // 0x0561(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonLoopNavigationHint                    AutonScrollLoopNavigatingHint;                     // 0x0562(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonScrollUseFastScrolling;                       // 0x0563(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonScrollNavigationClearWhenStartFastScrollingFlag; // 0x0564(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_565[0x3];                                      // 0x0565(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScrollBarStyle                        ScrollBarStyle;                                    // 0x0568(0x05E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bCustomScrollBarStyle;                             // 0x0B48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B49[0x7];                                      // 0x0B49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScrollBarStyle                        ScrollBarStyleConsole;                             // 0x0B50(0x05E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bCustomScrollBarStyleConsole;                      // 0x1130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysShowScrollbar;                              // 0x1131(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1132[0x2];                                     // 0x1132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ScrollbarThickness;                                // 0x1134(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                ScrollbarPadding;                                  // 0x113C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                ScrollbarTrackPadding;                             // 0x114C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                ScrollbarPaddingConsole;                           // 0x115C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ScrollbarThicknessConsole;                         // 0x116C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                ScrollbarTrackPaddingConsole;                      // 0x1174(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1184[0x4];                                     // 0x1184(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleUpdateEnabled();
	void HandleUpdateListChanged();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLTileView">();
	}
	static class UTLTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLTileView>();
	}
};
static_assert(alignof(UTLTileView) == 0x000008, "Wrong alignment on UTLTileView");
static_assert(sizeof(UTLTileView) == 0x001188, "Wrong size on UTLTileView");
static_assert(offsetof(UTLTileView, TLVisibility) == 0x000418, "Member 'UTLTileView::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLTileView, TooltipPositionData) == 0x00041C, "Member 'UTLTileView::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLTileView, TLFocusableData) == 0x000428, "Member 'UTLTileView::TLFocusableData' has a wrong offset!");
static_assert(offsetof(UTLTileView, VisibleBinding) == 0x000450, "Member 'UTLTileView::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLTileView, EnabledBinding) == 0x000490, "Member 'UTLTileView::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLTileView, ListChangedBinding) == 0x0004D0, "Member 'UTLTileView::ListChangedBinding' has a wrong offset!");
static_assert(offsetof(UTLTileView, DragScrollingType) == 0x000510, "Member 'UTLTileView::DragScrollingType' has a wrong offset!");
static_assert(offsetof(UTLTileView, MyAutonAreaType) == 0x000511, "Member 'UTLTileView::MyAutonAreaType' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaGroupIdValue) == 0x000514, "Member 'UTLTileView::AutonAreaGroupIdValue' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaOrderTagValue) == 0x000518, "Member 'UTLTileView::AutonAreaOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaFence) == 0x00051C, "Member 'UTLTileView::AutonAreaFence' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaDome) == 0x00051D, "Member 'UTLTileView::AutonAreaDome' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaFarPrevFirstBeforeLeaveFlag) == 0x00051E, "Member 'UTLTileView::AutonAreaFarPrevFirstBeforeLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaGoRecentAreaWhenLeaveFlag) == 0x00051F, "Member 'UTLTileView::AutonAreaGoRecentAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaGoBackAreaWhenLeaveFlag) == 0x000520, "Member 'UTLTileView::AutonAreaGoBackAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaGoAreaByOrderTagHintWhenLeaveFlag) == 0x000521, "Member 'UTLTileView::AutonAreaGoAreaByOrderTagHintWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaLeaveOrderTagHintValue) == 0x000522, "Member 'UTLTileView::AutonAreaLeaveOrderTagHintValue' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaLeaveGivenOrderTagValue) == 0x000524, "Member 'UTLTileView::AutonAreaLeaveGivenOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaOrderFirstThenCardinalEnterFlag) == 0x000528, "Member 'UTLTileView::AutonAreaOrderFirstThenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaOrderFirstWhenFarCardinalEnterFlag) == 0x000529, "Member 'UTLTileView::AutonAreaOrderFirstWhenFarCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaTakeRecentIfExistWhenCardinalEnterFlag) == 0x00052A, "Member 'UTLTileView::AutonAreaTakeRecentIfExistWhenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaChildNavigatingHint) == 0x00052B, "Member 'UTLTileView::AutonAreaChildNavigatingHint' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaFarNavigationWhenShortCardinalFailedFlag) == 0x00052C, "Member 'UTLTileView::AutonAreaFarNavigationWhenShortCardinalFailedFlag' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds) == 0x000530, "Member 'UTLTileView::AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaCardinalNavigationWeightValue) == 0x000540, "Member 'UTLTileView::AutonAreaCardinalNavigationWeightValue' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaDontUseHitOnRoad) == 0x000544, "Member 'UTLTileView::AutonAreaDontUseHitOnRoad' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaDontUseNearest) == 0x000545, "Member 'UTLTileView::AutonAreaDontUseNearest' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaHaveNosyNeighborsFlag) == 0x000546, "Member 'UTLTileView::AutonAreaHaveNosyNeighborsFlag' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaCouldBeLookingAreaFlag) == 0x000547, "Member 'UTLTileView::AutonAreaCouldBeLookingAreaFlag' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaLookingFeedbackWidget) == 0x000548, "Member 'UTLTileView::AutonAreaLookingFeedbackWidget' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonAreaFocusPresenter) == 0x000550, "Member 'UTLTileView::AutonAreaFocusPresenter' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonScrollSensitiveFlag) == 0x000560, "Member 'UTLTileView::AutonScrollSensitiveFlag' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonScrollDestionationFlag) == 0x000561, "Member 'UTLTileView::AutonScrollDestionationFlag' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonScrollLoopNavigatingHint) == 0x000562, "Member 'UTLTileView::AutonScrollLoopNavigatingHint' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonScrollUseFastScrolling) == 0x000563, "Member 'UTLTileView::AutonScrollUseFastScrolling' has a wrong offset!");
static_assert(offsetof(UTLTileView, AutonScrollNavigationClearWhenStartFastScrollingFlag) == 0x000564, "Member 'UTLTileView::AutonScrollNavigationClearWhenStartFastScrollingFlag' has a wrong offset!");
static_assert(offsetof(UTLTileView, ScrollBarStyle) == 0x000568, "Member 'UTLTileView::ScrollBarStyle' has a wrong offset!");
static_assert(offsetof(UTLTileView, bCustomScrollBarStyle) == 0x000B48, "Member 'UTLTileView::bCustomScrollBarStyle' has a wrong offset!");
static_assert(offsetof(UTLTileView, ScrollBarStyleConsole) == 0x000B50, "Member 'UTLTileView::ScrollBarStyleConsole' has a wrong offset!");
static_assert(offsetof(UTLTileView, bCustomScrollBarStyleConsole) == 0x001130, "Member 'UTLTileView::bCustomScrollBarStyleConsole' has a wrong offset!");
static_assert(offsetof(UTLTileView, bAlwaysShowScrollbar) == 0x001131, "Member 'UTLTileView::bAlwaysShowScrollbar' has a wrong offset!");
static_assert(offsetof(UTLTileView, ScrollbarThickness) == 0x001134, "Member 'UTLTileView::ScrollbarThickness' has a wrong offset!");
static_assert(offsetof(UTLTileView, ScrollbarPadding) == 0x00113C, "Member 'UTLTileView::ScrollbarPadding' has a wrong offset!");
static_assert(offsetof(UTLTileView, ScrollbarTrackPadding) == 0x00114C, "Member 'UTLTileView::ScrollbarTrackPadding' has a wrong offset!");
static_assert(offsetof(UTLTileView, ScrollbarPaddingConsole) == 0x00115C, "Member 'UTLTileView::ScrollbarPaddingConsole' has a wrong offset!");
static_assert(offsetof(UTLTileView, ScrollbarThicknessConsole) == 0x00116C, "Member 'UTLTileView::ScrollbarThicknessConsole' has a wrong offset!");
static_assert(offsetof(UTLTileView, ScrollbarTrackPaddingConsole) == 0x001174, "Member 'UTLTileView::ScrollbarTrackPaddingConsole' has a wrong offset!");

// Class TLUI.TLTreeView
// 0x0198 (0x0560 - 0x03C8)
class UTLTreeView final : public UTreeView
{
public:
	uint8                                         Pad_3C8[0x88];                                     // 0x03C8(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x0454(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetFocusableData                 TLFocusableData;                                   // 0x0460(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_478[0x10];                                     // 0x0478(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0488(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x04C8(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ETLAutonAreaType                              MyAutonAreaType;                                   // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_509[0x3];                                      // 0x0509(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaGroupIdValue;                             // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutonAreaOrderTagValue;                            // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFence;                                    // 0x0514(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDome;                                     // 0x0515(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarPrevFirstBeforeLeaveFlag;              // 0x0516(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoRecentAreaWhenLeaveFlag;                // 0x0517(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoBackAreaWhenLeaveFlag;                  // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoAreaByOrderTagHintWhenLeaveFlag;        // 0x0519(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonOrderTagHint                          AutonAreaLeaveOrderTagHintValue;                   // 0x051A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51B[0x1];                                      // 0x051B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaLeaveGivenOrderTagValue;                  // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstThenCardinalEnterFlag;          // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstWhenFarCardinalEnterFlag;       // 0x0521(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaTakeRecentIfExistWhenCardinalEnterFlag;   // 0x0522(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonChildNavigationHint                   AutonAreaChildNavigatingHint;                      // 0x0523(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarNavigationWhenShortCardinalFailedFlag; // 0x0524(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_525[0x3];                                      // 0x0525(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds; // 0x0528(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AutonAreaCardinalNavigationWeightValue;            // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseHitOnRoad;                         // 0x053C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseNearest;                           // 0x053D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaHaveNosyNeighborsFlag;                    // 0x053E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaCouldBeLookingAreaFlag;                   // 0x053F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                AutonAreaLookingFeedbackWidget;                    // 0x0540(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ITLWidgetVisibilityInterface> AutonAreaFocusPresenter;                           // 0x0548(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          AutonScrollSensitiveFlag;                          // 0x0558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonScrollDestination                     AutonScrollDestionationFlag;                       // 0x0559(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonLoopNavigationHint                    AutonScrollLoopNavigatingHint;                     // 0x055A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonScrollUseFastScrolling;                       // 0x055B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonScrollNavigationClearWhenStartFastScrollingFlag; // 0x055C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55D[0x3];                                      // 0x055D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLTreeView">();
	}
	static class UTLTreeView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLTreeView>();
	}
};
static_assert(alignof(UTLTreeView) == 0x000008, "Wrong alignment on UTLTreeView");
static_assert(sizeof(UTLTreeView) == 0x000560, "Wrong size on UTLTreeView");
static_assert(offsetof(UTLTreeView, TLVisibility) == 0x000450, "Member 'UTLTreeView::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLTreeView, TooltipPositionData) == 0x000454, "Member 'UTLTreeView::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLTreeView, TLFocusableData) == 0x000460, "Member 'UTLTreeView::TLFocusableData' has a wrong offset!");
static_assert(offsetof(UTLTreeView, VisibleBinding) == 0x000488, "Member 'UTLTreeView::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLTreeView, EnabledBinding) == 0x0004C8, "Member 'UTLTreeView::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLTreeView, MyAutonAreaType) == 0x000508, "Member 'UTLTreeView::MyAutonAreaType' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaGroupIdValue) == 0x00050C, "Member 'UTLTreeView::AutonAreaGroupIdValue' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaOrderTagValue) == 0x000510, "Member 'UTLTreeView::AutonAreaOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaFence) == 0x000514, "Member 'UTLTreeView::AutonAreaFence' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaDome) == 0x000515, "Member 'UTLTreeView::AutonAreaDome' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaFarPrevFirstBeforeLeaveFlag) == 0x000516, "Member 'UTLTreeView::AutonAreaFarPrevFirstBeforeLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaGoRecentAreaWhenLeaveFlag) == 0x000517, "Member 'UTLTreeView::AutonAreaGoRecentAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaGoBackAreaWhenLeaveFlag) == 0x000518, "Member 'UTLTreeView::AutonAreaGoBackAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaGoAreaByOrderTagHintWhenLeaveFlag) == 0x000519, "Member 'UTLTreeView::AutonAreaGoAreaByOrderTagHintWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaLeaveOrderTagHintValue) == 0x00051A, "Member 'UTLTreeView::AutonAreaLeaveOrderTagHintValue' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaLeaveGivenOrderTagValue) == 0x00051C, "Member 'UTLTreeView::AutonAreaLeaveGivenOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaOrderFirstThenCardinalEnterFlag) == 0x000520, "Member 'UTLTreeView::AutonAreaOrderFirstThenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaOrderFirstWhenFarCardinalEnterFlag) == 0x000521, "Member 'UTLTreeView::AutonAreaOrderFirstWhenFarCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaTakeRecentIfExistWhenCardinalEnterFlag) == 0x000522, "Member 'UTLTreeView::AutonAreaTakeRecentIfExistWhenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaChildNavigatingHint) == 0x000523, "Member 'UTLTreeView::AutonAreaChildNavigatingHint' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaFarNavigationWhenShortCardinalFailedFlag) == 0x000524, "Member 'UTLTreeView::AutonAreaFarNavigationWhenShortCardinalFailedFlag' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds) == 0x000528, "Member 'UTLTreeView::AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaCardinalNavigationWeightValue) == 0x000538, "Member 'UTLTreeView::AutonAreaCardinalNavigationWeightValue' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaDontUseHitOnRoad) == 0x00053C, "Member 'UTLTreeView::AutonAreaDontUseHitOnRoad' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaDontUseNearest) == 0x00053D, "Member 'UTLTreeView::AutonAreaDontUseNearest' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaHaveNosyNeighborsFlag) == 0x00053E, "Member 'UTLTreeView::AutonAreaHaveNosyNeighborsFlag' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaCouldBeLookingAreaFlag) == 0x00053F, "Member 'UTLTreeView::AutonAreaCouldBeLookingAreaFlag' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaLookingFeedbackWidget) == 0x000540, "Member 'UTLTreeView::AutonAreaLookingFeedbackWidget' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonAreaFocusPresenter) == 0x000548, "Member 'UTLTreeView::AutonAreaFocusPresenter' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonScrollSensitiveFlag) == 0x000558, "Member 'UTLTreeView::AutonScrollSensitiveFlag' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonScrollDestionationFlag) == 0x000559, "Member 'UTLTreeView::AutonScrollDestionationFlag' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonScrollLoopNavigatingHint) == 0x00055A, "Member 'UTLTreeView::AutonScrollLoopNavigatingHint' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonScrollUseFastScrolling) == 0x00055B, "Member 'UTLTreeView::AutonScrollUseFastScrolling' has a wrong offset!");
static_assert(offsetof(UTLTreeView, AutonScrollNavigationClearWhenStartFastScrollingFlag) == 0x00055C, "Member 'UTLTreeView::AutonScrollNavigationClearWhenStartFastScrollingFlag' has a wrong offset!");

// Class TLUI.TLUIStyleSettings
// 0x22C8 (0x2300 - 0x0038)
class UTLUIStyleSettings final : public UDeveloperSettings
{
public:
	struct FLinearColor                           DisabledTextBlockTint;                             // 0x0038(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DisabledImageTint;                                 // 0x0048(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x20];                                      // 0x0058(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TooltipViewportBorderMargin;                       // 0x0078(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                ConsoleTooltipViewportBorderMargin;                // 0x007C(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConsoleTooltipShowDelayTime;                       // 0x008C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScrollBarStyle                        DefaultScrollBarStyle;                             // 0x0090(0x05E0)(Edit, Config, NativeAccessSpecifierPublic)
	struct FMargin                                DefaultScrollBarPadding;                           // 0x0670(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                DefaultScrollBarTrackPadding;                      // 0x0680(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              DefaultScrollBarThickness;                         // 0x0690(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                DefaultConsoleScrollBarPadding;                    // 0x0698(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                DefaultConsoleScrollBarTrackPadding;               // 0x06A8(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              DefaultConsoleScrollBarThickness;                  // 0x06B8(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScrollBarStyle                        DefaultConsoleScrollBarStyle;                      // 0x06C0(0x05E0)(Edit, Config, NativeAccessSpecifierPublic)
	struct FEditableTextBoxStyle                  DefaultEditableTextBoxStyle;                       // 0x0CA0(0x0908)(Edit, Config, NativeAccessSpecifierPublic)
	struct FEditableTextBoxStyle                  DefaultMultiLineEditableTextBoxStyle;              // 0x15A8(0x0908)(Edit, Config, NativeAccessSpecifierPublic)
	struct FTextBlockStyleTL                      DefaultMultiLineEditableTextBoxTextStyle;          // 0x1EB0(0x0208)(Edit, Config, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          VirtualKeyboardKeyIconHorizontalAlignment;         // 0x20B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VirtualKeyboardKeyIconVerticalAlignment;           // 0x20B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20BA[0x2];                                     // 0x20BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                VirtualKeyboardKeyIconMargin;                      // 0x20BC(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              VirtualKeyboardKeyIconSize;                        // 0x20CC(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                VirtualKeyboardKeyIconMultilineRightTopMargin;     // 0x20D4(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              VirtualKeyboardKeyIconMultilineSize;               // 0x20E4(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20EC[0x4];                                     // 0x20EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            VirtualKeyboardKeyIconDualShock;                   // 0x20F0(0x0088)(Edit, Config, NativeAccessSpecifierPublic)
	struct FSlateBrush                            VirtualKeyboardKeyIconXbox;                        // 0x2178(0x0088)(Edit, Config, NativeAccessSpecifierPublic)
	TMap<ETLUserWidgetAutonFocusImageType, struct FTLAutonFocusEffect> AutonFocusImageBrushMap;                           // 0x2200(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	TMap<ETLItemGroupFilter, struct FLinearColor> ItemGroupFilterColorRefMap;                        // 0x2250(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	TSet<class FName>                             LineBreakUsageLanguageSet;                         // 0x22A0(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	float                                         KeyIconMatchFontRatio;                             // 0x22F0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MarkupImageMatchFontRatio;                         // 0x22F4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadHoldFontRatio;                              // 0x22F8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22FC[0x4];                                     // 0x22FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLUIStyleSettings">();
	}
	static class UTLUIStyleSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLUIStyleSettings>();
	}
};
static_assert(alignof(UTLUIStyleSettings) == 0x000008, "Wrong alignment on UTLUIStyleSettings");
static_assert(sizeof(UTLUIStyleSettings) == 0x002300, "Wrong size on UTLUIStyleSettings");
static_assert(offsetof(UTLUIStyleSettings, DisabledTextBlockTint) == 0x000038, "Member 'UTLUIStyleSettings::DisabledTextBlockTint' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, DisabledImageTint) == 0x000048, "Member 'UTLUIStyleSettings::DisabledImageTint' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, TooltipViewportBorderMargin) == 0x000078, "Member 'UTLUIStyleSettings::TooltipViewportBorderMargin' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, ConsoleTooltipViewportBorderMargin) == 0x00007C, "Member 'UTLUIStyleSettings::ConsoleTooltipViewportBorderMargin' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, ConsoleTooltipShowDelayTime) == 0x00008C, "Member 'UTLUIStyleSettings::ConsoleTooltipShowDelayTime' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, DefaultScrollBarStyle) == 0x000090, "Member 'UTLUIStyleSettings::DefaultScrollBarStyle' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, DefaultScrollBarPadding) == 0x000670, "Member 'UTLUIStyleSettings::DefaultScrollBarPadding' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, DefaultScrollBarTrackPadding) == 0x000680, "Member 'UTLUIStyleSettings::DefaultScrollBarTrackPadding' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, DefaultScrollBarThickness) == 0x000690, "Member 'UTLUIStyleSettings::DefaultScrollBarThickness' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, DefaultConsoleScrollBarPadding) == 0x000698, "Member 'UTLUIStyleSettings::DefaultConsoleScrollBarPadding' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, DefaultConsoleScrollBarTrackPadding) == 0x0006A8, "Member 'UTLUIStyleSettings::DefaultConsoleScrollBarTrackPadding' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, DefaultConsoleScrollBarThickness) == 0x0006B8, "Member 'UTLUIStyleSettings::DefaultConsoleScrollBarThickness' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, DefaultConsoleScrollBarStyle) == 0x0006C0, "Member 'UTLUIStyleSettings::DefaultConsoleScrollBarStyle' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, DefaultEditableTextBoxStyle) == 0x000CA0, "Member 'UTLUIStyleSettings::DefaultEditableTextBoxStyle' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, DefaultMultiLineEditableTextBoxStyle) == 0x0015A8, "Member 'UTLUIStyleSettings::DefaultMultiLineEditableTextBoxStyle' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, DefaultMultiLineEditableTextBoxTextStyle) == 0x001EB0, "Member 'UTLUIStyleSettings::DefaultMultiLineEditableTextBoxTextStyle' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, VirtualKeyboardKeyIconHorizontalAlignment) == 0x0020B8, "Member 'UTLUIStyleSettings::VirtualKeyboardKeyIconHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, VirtualKeyboardKeyIconVerticalAlignment) == 0x0020B9, "Member 'UTLUIStyleSettings::VirtualKeyboardKeyIconVerticalAlignment' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, VirtualKeyboardKeyIconMargin) == 0x0020BC, "Member 'UTLUIStyleSettings::VirtualKeyboardKeyIconMargin' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, VirtualKeyboardKeyIconSize) == 0x0020CC, "Member 'UTLUIStyleSettings::VirtualKeyboardKeyIconSize' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, VirtualKeyboardKeyIconMultilineRightTopMargin) == 0x0020D4, "Member 'UTLUIStyleSettings::VirtualKeyboardKeyIconMultilineRightTopMargin' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, VirtualKeyboardKeyIconMultilineSize) == 0x0020E4, "Member 'UTLUIStyleSettings::VirtualKeyboardKeyIconMultilineSize' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, VirtualKeyboardKeyIconDualShock) == 0x0020F0, "Member 'UTLUIStyleSettings::VirtualKeyboardKeyIconDualShock' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, VirtualKeyboardKeyIconXbox) == 0x002178, "Member 'UTLUIStyleSettings::VirtualKeyboardKeyIconXbox' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, AutonFocusImageBrushMap) == 0x002200, "Member 'UTLUIStyleSettings::AutonFocusImageBrushMap' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, ItemGroupFilterColorRefMap) == 0x002250, "Member 'UTLUIStyleSettings::ItemGroupFilterColorRefMap' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, LineBreakUsageLanguageSet) == 0x0022A0, "Member 'UTLUIStyleSettings::LineBreakUsageLanguageSet' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, KeyIconMatchFontRatio) == 0x0022F0, "Member 'UTLUIStyleSettings::KeyIconMatchFontRatio' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, MarkupImageMatchFontRatio) == 0x0022F4, "Member 'UTLUIStyleSettings::MarkupImageMatchFontRatio' has a wrong offset!");
static_assert(offsetof(UTLUIStyleSettings, GamepadHoldFontRatio) == 0x0022F8, "Member 'UTLUIStyleSettings::GamepadHoldFontRatio' has a wrong offset!");

// Class TLUI.TLUniformGridPanel
// 0x0188 (0x02D0 - 0x0148)
class UTLUniformGridPanel final : public UUniformGridPanel
{
public:
	uint8                                         Pad_148[0x80];                                     // 0x0148(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x01CC(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetFocusableData                 TLFocusableData;                                   // 0x01D8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F0[0x10];                                     // 0x01F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0200(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0240(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ETLAutonAreaType                              MyAutonAreaType;                                   // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_281[0x3];                                      // 0x0281(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaGroupIdValue;                             // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutonAreaOrderTagValue;                            // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFence;                                    // 0x028C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDome;                                     // 0x028D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarPrevFirstBeforeLeaveFlag;              // 0x028E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoRecentAreaWhenLeaveFlag;                // 0x028F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoBackAreaWhenLeaveFlag;                  // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoAreaByOrderTagHintWhenLeaveFlag;        // 0x0291(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonOrderTagHint                          AutonAreaLeaveOrderTagHintValue;                   // 0x0292(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_293[0x1];                                      // 0x0293(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaLeaveGivenOrderTagValue;                  // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstThenCardinalEnterFlag;          // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstWhenFarCardinalEnterFlag;       // 0x0299(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaTakeRecentIfExistWhenCardinalEnterFlag;   // 0x029A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonChildNavigationHint                   AutonAreaChildNavigatingHint;                      // 0x029B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarNavigationWhenShortCardinalFailedFlag; // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29D[0x3];                                      // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds; // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AutonAreaCardinalNavigationWeightValue;            // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseHitOnRoad;                         // 0x02B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseNearest;                           // 0x02B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaHaveNosyNeighborsFlag;                    // 0x02B6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaCouldBeLookingAreaFlag;                   // 0x02B7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                AutonAreaLookingFeedbackWidget;                    // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ITLWidgetVisibilityInterface> AutonAreaFocusPresenter;                           // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLUniformGridPanel">();
	}
	static class UTLUniformGridPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLUniformGridPanel>();
	}
};
static_assert(alignof(UTLUniformGridPanel) == 0x000008, "Wrong alignment on UTLUniformGridPanel");
static_assert(sizeof(UTLUniformGridPanel) == 0x0002D0, "Wrong size on UTLUniformGridPanel");
static_assert(offsetof(UTLUniformGridPanel, TLVisibility) == 0x0001C8, "Member 'UTLUniformGridPanel::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, TooltipPositionData) == 0x0001CC, "Member 'UTLUniformGridPanel::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, TLFocusableData) == 0x0001D8, "Member 'UTLUniformGridPanel::TLFocusableData' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, VisibleBinding) == 0x000200, "Member 'UTLUniformGridPanel::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, EnabledBinding) == 0x000240, "Member 'UTLUniformGridPanel::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, MyAutonAreaType) == 0x000280, "Member 'UTLUniformGridPanel::MyAutonAreaType' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaGroupIdValue) == 0x000284, "Member 'UTLUniformGridPanel::AutonAreaGroupIdValue' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaOrderTagValue) == 0x000288, "Member 'UTLUniformGridPanel::AutonAreaOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaFence) == 0x00028C, "Member 'UTLUniformGridPanel::AutonAreaFence' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaDome) == 0x00028D, "Member 'UTLUniformGridPanel::AutonAreaDome' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaFarPrevFirstBeforeLeaveFlag) == 0x00028E, "Member 'UTLUniformGridPanel::AutonAreaFarPrevFirstBeforeLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaGoRecentAreaWhenLeaveFlag) == 0x00028F, "Member 'UTLUniformGridPanel::AutonAreaGoRecentAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaGoBackAreaWhenLeaveFlag) == 0x000290, "Member 'UTLUniformGridPanel::AutonAreaGoBackAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaGoAreaByOrderTagHintWhenLeaveFlag) == 0x000291, "Member 'UTLUniformGridPanel::AutonAreaGoAreaByOrderTagHintWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaLeaveOrderTagHintValue) == 0x000292, "Member 'UTLUniformGridPanel::AutonAreaLeaveOrderTagHintValue' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaLeaveGivenOrderTagValue) == 0x000294, "Member 'UTLUniformGridPanel::AutonAreaLeaveGivenOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaOrderFirstThenCardinalEnterFlag) == 0x000298, "Member 'UTLUniformGridPanel::AutonAreaOrderFirstThenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaOrderFirstWhenFarCardinalEnterFlag) == 0x000299, "Member 'UTLUniformGridPanel::AutonAreaOrderFirstWhenFarCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaTakeRecentIfExistWhenCardinalEnterFlag) == 0x00029A, "Member 'UTLUniformGridPanel::AutonAreaTakeRecentIfExistWhenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaChildNavigatingHint) == 0x00029B, "Member 'UTLUniformGridPanel::AutonAreaChildNavigatingHint' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaFarNavigationWhenShortCardinalFailedFlag) == 0x00029C, "Member 'UTLUniformGridPanel::AutonAreaFarNavigationWhenShortCardinalFailedFlag' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds) == 0x0002A0, "Member 'UTLUniformGridPanel::AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaCardinalNavigationWeightValue) == 0x0002B0, "Member 'UTLUniformGridPanel::AutonAreaCardinalNavigationWeightValue' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaDontUseHitOnRoad) == 0x0002B4, "Member 'UTLUniformGridPanel::AutonAreaDontUseHitOnRoad' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaDontUseNearest) == 0x0002B5, "Member 'UTLUniformGridPanel::AutonAreaDontUseNearest' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaHaveNosyNeighborsFlag) == 0x0002B6, "Member 'UTLUniformGridPanel::AutonAreaHaveNosyNeighborsFlag' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaCouldBeLookingAreaFlag) == 0x0002B7, "Member 'UTLUniformGridPanel::AutonAreaCouldBeLookingAreaFlag' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaLookingFeedbackWidget) == 0x0002B8, "Member 'UTLUniformGridPanel::AutonAreaLookingFeedbackWidget' has a wrong offset!");
static_assert(offsetof(UTLUniformGridPanel, AutonAreaFocusPresenter) == 0x0002C0, "Member 'UTLUniformGridPanel::AutonAreaFocusPresenter' has a wrong offset!");

// Class TLUI.TLVerticalBox
// 0x0188 (0x02B8 - 0x0130)
class UTLVerticalBox final : public UVerticalBox
{
public:
	uint8                                         Pad_130[0x80];                                     // 0x0130(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x01B4(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetFocusableData                 TLFocusableData;                                   // 0x01C0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x10];                                     // 0x01D8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x01E8(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0228(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ETLAutonAreaType                              MyAutonAreaType;                                   // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaGroupIdValue;                             // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutonAreaOrderTagValue;                            // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFence;                                    // 0x0274(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDome;                                     // 0x0275(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarPrevFirstBeforeLeaveFlag;              // 0x0276(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoRecentAreaWhenLeaveFlag;                // 0x0277(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoBackAreaWhenLeaveFlag;                  // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoAreaByOrderTagHintWhenLeaveFlag;        // 0x0279(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonOrderTagHint                          AutonAreaLeaveOrderTagHintValue;                   // 0x027A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27B[0x1];                                      // 0x027B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaLeaveGivenOrderTagValue;                  // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstThenCardinalEnterFlag;          // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstWhenFarCardinalEnterFlag;       // 0x0281(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaTakeRecentIfExistWhenCardinalEnterFlag;   // 0x0282(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonChildNavigationHint                   AutonAreaChildNavigatingHint;                      // 0x0283(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarNavigationWhenShortCardinalFailedFlag; // 0x0284(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_285[0x3];                                      // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds; // 0x0288(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AutonAreaCardinalNavigationWeightValue;            // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseHitOnRoad;                         // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseNearest;                           // 0x029D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaHaveNosyNeighborsFlag;                    // 0x029E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaCouldBeLookingAreaFlag;                   // 0x029F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                AutonAreaLookingFeedbackWidget;                    // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ITLWidgetVisibilityInterface> AutonAreaFocusPresenter;                           // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLVerticalBox">();
	}
	static class UTLVerticalBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLVerticalBox>();
	}
};
static_assert(alignof(UTLVerticalBox) == 0x000008, "Wrong alignment on UTLVerticalBox");
static_assert(sizeof(UTLVerticalBox) == 0x0002B8, "Wrong size on UTLVerticalBox");
static_assert(offsetof(UTLVerticalBox, TLVisibility) == 0x0001B0, "Member 'UTLVerticalBox::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, TooltipPositionData) == 0x0001B4, "Member 'UTLVerticalBox::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, TLFocusableData) == 0x0001C0, "Member 'UTLVerticalBox::TLFocusableData' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, VisibleBinding) == 0x0001E8, "Member 'UTLVerticalBox::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, EnabledBinding) == 0x000228, "Member 'UTLVerticalBox::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, MyAutonAreaType) == 0x000268, "Member 'UTLVerticalBox::MyAutonAreaType' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaGroupIdValue) == 0x00026C, "Member 'UTLVerticalBox::AutonAreaGroupIdValue' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaOrderTagValue) == 0x000270, "Member 'UTLVerticalBox::AutonAreaOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaFence) == 0x000274, "Member 'UTLVerticalBox::AutonAreaFence' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaDome) == 0x000275, "Member 'UTLVerticalBox::AutonAreaDome' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaFarPrevFirstBeforeLeaveFlag) == 0x000276, "Member 'UTLVerticalBox::AutonAreaFarPrevFirstBeforeLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaGoRecentAreaWhenLeaveFlag) == 0x000277, "Member 'UTLVerticalBox::AutonAreaGoRecentAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaGoBackAreaWhenLeaveFlag) == 0x000278, "Member 'UTLVerticalBox::AutonAreaGoBackAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaGoAreaByOrderTagHintWhenLeaveFlag) == 0x000279, "Member 'UTLVerticalBox::AutonAreaGoAreaByOrderTagHintWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaLeaveOrderTagHintValue) == 0x00027A, "Member 'UTLVerticalBox::AutonAreaLeaveOrderTagHintValue' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaLeaveGivenOrderTagValue) == 0x00027C, "Member 'UTLVerticalBox::AutonAreaLeaveGivenOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaOrderFirstThenCardinalEnterFlag) == 0x000280, "Member 'UTLVerticalBox::AutonAreaOrderFirstThenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaOrderFirstWhenFarCardinalEnterFlag) == 0x000281, "Member 'UTLVerticalBox::AutonAreaOrderFirstWhenFarCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaTakeRecentIfExistWhenCardinalEnterFlag) == 0x000282, "Member 'UTLVerticalBox::AutonAreaTakeRecentIfExistWhenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaChildNavigatingHint) == 0x000283, "Member 'UTLVerticalBox::AutonAreaChildNavigatingHint' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaFarNavigationWhenShortCardinalFailedFlag) == 0x000284, "Member 'UTLVerticalBox::AutonAreaFarNavigationWhenShortCardinalFailedFlag' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds) == 0x000288, "Member 'UTLVerticalBox::AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaCardinalNavigationWeightValue) == 0x000298, "Member 'UTLVerticalBox::AutonAreaCardinalNavigationWeightValue' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaDontUseHitOnRoad) == 0x00029C, "Member 'UTLVerticalBox::AutonAreaDontUseHitOnRoad' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaDontUseNearest) == 0x00029D, "Member 'UTLVerticalBox::AutonAreaDontUseNearest' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaHaveNosyNeighborsFlag) == 0x00029E, "Member 'UTLVerticalBox::AutonAreaHaveNosyNeighborsFlag' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaCouldBeLookingAreaFlag) == 0x00029F, "Member 'UTLVerticalBox::AutonAreaCouldBeLookingAreaFlag' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaLookingFeedbackWidget) == 0x0002A0, "Member 'UTLVerticalBox::AutonAreaLookingFeedbackWidget' has a wrong offset!");
static_assert(offsetof(UTLVerticalBox, AutonAreaFocusPresenter) == 0x0002A8, "Member 'UTLVerticalBox::AutonAreaFocusPresenter' has a wrong offset!");

// Class TLUI.TLWebBrowser
// 0x0120 (0x0270 - 0x0150)
class UTLWebBrowser final : public UWebBrowser
{
public:
	uint8                                         Pad_150[0x68];                                     // 0x0150(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x01BC(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetFocusableData                 TLFocusableData;                                   // 0x01C8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0[0x10];                                     // 0x01E0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x01F0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0230(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLWebBrowser">();
	}
	static class UTLWebBrowser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLWebBrowser>();
	}
};
static_assert(alignof(UTLWebBrowser) == 0x000008, "Wrong alignment on UTLWebBrowser");
static_assert(sizeof(UTLWebBrowser) == 0x000270, "Wrong size on UTLWebBrowser");
static_assert(offsetof(UTLWebBrowser, TLVisibility) == 0x0001B8, "Member 'UTLWebBrowser::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLWebBrowser, TooltipPositionData) == 0x0001BC, "Member 'UTLWebBrowser::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLWebBrowser, TLFocusableData) == 0x0001C8, "Member 'UTLWebBrowser::TLFocusableData' has a wrong offset!");
static_assert(offsetof(UTLWebBrowser, VisibleBinding) == 0x0001F0, "Member 'UTLWebBrowser::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLWebBrowser, EnabledBinding) == 0x000230, "Member 'UTLWebBrowser::EnabledBinding' has a wrong offset!");

// Class TLUI.TLWebImage
// 0x0040 (0x0250 - 0x0210)
class UTLWebImage final : public UImage
{
public:
	class FString                                 UrlString;                                         // 0x0210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnImageDownloadDone;                               // 0x0220(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_230[0x20];                                     // 0x0230(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DownloadImage();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLWebImage">();
	}
	static class UTLWebImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLWebImage>();
	}
};
static_assert(alignof(UTLWebImage) == 0x000008, "Wrong alignment on UTLWebImage");
static_assert(sizeof(UTLWebImage) == 0x000250, "Wrong size on UTLWebImage");
static_assert(offsetof(UTLWebImage, UrlString) == 0x000210, "Member 'UTLWebImage::UrlString' has a wrong offset!");
static_assert(offsetof(UTLWebImage, OnImageDownloadDone) == 0x000220, "Member 'UTLWebImage::OnImageDownloadDone' has a wrong offset!");

// Class TLUI.TLWidgetBindingLibrary
// 0x0000 (0x0028 - 0x0028)
class UTLWidgetBindingLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool AddEnabledBinding(class UWidget* Target, const int32& AnyValue, ETLBindingOperator Operator, int32 SourceValue);
	static bool AddImageBrushBinding(class UTLImage* Target, const int32& AnyValue, bool bMatchSize, bool bSetVisibleWithValue);
	static bool AddImageColorAndOpacityBinding(class UTLImage* Target, const int32& AnyValue);
	static bool AddPercentBinding(class UTLProgressBar* Target, const int32& AnyValue);
	static bool AddTextBinding(class UTLTextBlock* Target, const int32& AnyValue, bool bSetVisibleWithValue);
	static bool AddTextBindingFloat(class UTLTextBlock* Target, const int32& AnyValue, ERoundingMode RoundingMode, int32 FractionalDigits);
	static bool AddTextBlockStyleFromTableBinding(class UTLTextBlock* Target, const int32& AnyValue, bool bOnlyColor);
	static bool AddTextBlockStylePathBinding(class UTLTextBlock* Target, const int32& AnyValue, bool bOnlyColor);
	static bool AddTextColorAndOpacityBinding(class UTLTextBlock* Target, const int32& AnyValue);
	static bool AddTextColorWithColorTableBinding(class UTLTextBlock* Target, const int32& AnyValue);
	static bool AddVisibleBinding(class UWidget* Target, const int32& AnyValue, ETLBindingOperator Operator, int32 SourceValue);
	static bool SetOnUpdateDefault(const int32& AnyValue, const TDelegate<void()>& Event);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLWidgetBindingLibrary">();
	}
	static class UTLWidgetBindingLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLWidgetBindingLibrary>();
	}
};
static_assert(alignof(UTLWidgetBindingLibrary) == 0x000008, "Wrong alignment on UTLWidgetBindingLibrary");
static_assert(sizeof(UTLWidgetBindingLibrary) == 0x000028, "Wrong size on UTLWidgetBindingLibrary");

// Class TLUI.TLWidgetFocusableInterface
// 0x0000 (0x0028 - 0x0028)
class ITLWidgetFocusableInterface final : public IInterface
{
public:
	void ClearTLFocus();
	void SetTLFocus();
	void SetTLFocusableEnable(bool bInEnable);
	void SetTLSaveLastFocusedChild(bool bInEnable);
	void SetTLWidgetToFocusBP(TScriptInterface<class ITLWidgetFocusableInterface> WidgetPtr);

	bool IsTLFocus() const;
	bool IsTLFocusable() const;
	bool IsTLFocusableEnable() const;
	bool UseTLFocusable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLWidgetFocusableInterface">();
	}
	static class ITLWidgetFocusableInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ITLWidgetFocusableInterface>();
	}
};
static_assert(alignof(ITLWidgetFocusableInterface) == 0x000008, "Wrong alignment on ITLWidgetFocusableInterface");
static_assert(sizeof(ITLWidgetFocusableInterface) == 0x000028, "Wrong size on ITLWidgetFocusableInterface");

// Class TLUI.TLWidgetFocusableManager
// 0x0088 (0x00B0 - 0x0028)
class UTLWidgetFocusableManager final : public UObject
{
public:
	uint8                                         Pad_28[0x88];                                      // 0x0028(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLWidgetFocusableManager">();
	}
	static class UTLWidgetFocusableManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLWidgetFocusableManager>();
	}
};
static_assert(alignof(UTLWidgetFocusableManager) == 0x000008, "Wrong alignment on UTLWidgetFocusableManager");
static_assert(sizeof(UTLWidgetFocusableManager) == 0x0000B0, "Wrong size on UTLWidgetFocusableManager");

// Class TLUI.TLWidgetLanguageChangeHandlerInterface
// 0x0000 (0x0028 - 0x0028)
class ITLWidgetLanguageChangeHandlerInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLWidgetLanguageChangeHandlerInterface">();
	}
	static class ITLWidgetLanguageChangeHandlerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ITLWidgetLanguageChangeHandlerInterface>();
	}
};
static_assert(alignof(ITLWidgetLanguageChangeHandlerInterface) == 0x000008, "Wrong alignment on ITLWidgetLanguageChangeHandlerInterface");
static_assert(sizeof(ITLWidgetLanguageChangeHandlerInterface) == 0x000028, "Wrong size on ITLWidgetLanguageChangeHandlerInterface");

// Class TLUI.TLWidgetSwitcher
// 0x0168 (0x02A0 - 0x0138)
class UTLWidgetSwitcher final : public UWidgetSwitcher
{
public:
	uint8                                         Pad_138[0x78];                                     // 0x0138(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x01B4(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x01C0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0200(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnActiveWidgetChanged;                             // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	ETLAutonAreaType                              MyAutonAreaType;                                   // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaGroupIdValue;                             // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutonAreaOrderTagValue;                            // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFence;                                    // 0x025C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDome;                                     // 0x025D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarPrevFirstBeforeLeaveFlag;              // 0x025E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoRecentAreaWhenLeaveFlag;                // 0x025F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoBackAreaWhenLeaveFlag;                  // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoAreaByOrderTagHintWhenLeaveFlag;        // 0x0261(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonOrderTagHint                          AutonAreaLeaveOrderTagHintValue;                   // 0x0262(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_263[0x1];                                      // 0x0263(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaLeaveGivenOrderTagValue;                  // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstThenCardinalEnterFlag;          // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstWhenFarCardinalEnterFlag;       // 0x0269(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaTakeRecentIfExistWhenCardinalEnterFlag;   // 0x026A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonChildNavigationHint                   AutonAreaChildNavigatingHint;                      // 0x026B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarNavigationWhenShortCardinalFailedFlag; // 0x026C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26D[0x3];                                      // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds; // 0x0270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AutonAreaCardinalNavigationWeightValue;            // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseHitOnRoad;                         // 0x0284(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseNearest;                           // 0x0285(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaHaveNosyNeighborsFlag;                    // 0x0286(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaCouldBeLookingAreaFlag;                   // 0x0287(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                AutonAreaLookingFeedbackWidget;                    // 0x0288(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ITLWidgetVisibilityInterface> AutonAreaFocusPresenter;                           // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLWidgetSwitcher">();
	}
	static class UTLWidgetSwitcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLWidgetSwitcher>();
	}
};
static_assert(alignof(UTLWidgetSwitcher) == 0x000008, "Wrong alignment on UTLWidgetSwitcher");
static_assert(sizeof(UTLWidgetSwitcher) == 0x0002A0, "Wrong size on UTLWidgetSwitcher");
static_assert(offsetof(UTLWidgetSwitcher, TLVisibility) == 0x0001B0, "Member 'UTLWidgetSwitcher::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, TooltipPositionData) == 0x0001B4, "Member 'UTLWidgetSwitcher::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, VisibleBinding) == 0x0001C0, "Member 'UTLWidgetSwitcher::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, EnabledBinding) == 0x000200, "Member 'UTLWidgetSwitcher::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, OnActiveWidgetChanged) == 0x000240, "Member 'UTLWidgetSwitcher::OnActiveWidgetChanged' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, MyAutonAreaType) == 0x000250, "Member 'UTLWidgetSwitcher::MyAutonAreaType' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaGroupIdValue) == 0x000254, "Member 'UTLWidgetSwitcher::AutonAreaGroupIdValue' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaOrderTagValue) == 0x000258, "Member 'UTLWidgetSwitcher::AutonAreaOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaFence) == 0x00025C, "Member 'UTLWidgetSwitcher::AutonAreaFence' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaDome) == 0x00025D, "Member 'UTLWidgetSwitcher::AutonAreaDome' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaFarPrevFirstBeforeLeaveFlag) == 0x00025E, "Member 'UTLWidgetSwitcher::AutonAreaFarPrevFirstBeforeLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaGoRecentAreaWhenLeaveFlag) == 0x00025F, "Member 'UTLWidgetSwitcher::AutonAreaGoRecentAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaGoBackAreaWhenLeaveFlag) == 0x000260, "Member 'UTLWidgetSwitcher::AutonAreaGoBackAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaGoAreaByOrderTagHintWhenLeaveFlag) == 0x000261, "Member 'UTLWidgetSwitcher::AutonAreaGoAreaByOrderTagHintWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaLeaveOrderTagHintValue) == 0x000262, "Member 'UTLWidgetSwitcher::AutonAreaLeaveOrderTagHintValue' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaLeaveGivenOrderTagValue) == 0x000264, "Member 'UTLWidgetSwitcher::AutonAreaLeaveGivenOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaOrderFirstThenCardinalEnterFlag) == 0x000268, "Member 'UTLWidgetSwitcher::AutonAreaOrderFirstThenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaOrderFirstWhenFarCardinalEnterFlag) == 0x000269, "Member 'UTLWidgetSwitcher::AutonAreaOrderFirstWhenFarCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaTakeRecentIfExistWhenCardinalEnterFlag) == 0x00026A, "Member 'UTLWidgetSwitcher::AutonAreaTakeRecentIfExistWhenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaChildNavigatingHint) == 0x00026B, "Member 'UTLWidgetSwitcher::AutonAreaChildNavigatingHint' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaFarNavigationWhenShortCardinalFailedFlag) == 0x00026C, "Member 'UTLWidgetSwitcher::AutonAreaFarNavigationWhenShortCardinalFailedFlag' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds) == 0x000270, "Member 'UTLWidgetSwitcher::AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaCardinalNavigationWeightValue) == 0x000280, "Member 'UTLWidgetSwitcher::AutonAreaCardinalNavigationWeightValue' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaDontUseHitOnRoad) == 0x000284, "Member 'UTLWidgetSwitcher::AutonAreaDontUseHitOnRoad' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaDontUseNearest) == 0x000285, "Member 'UTLWidgetSwitcher::AutonAreaDontUseNearest' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaHaveNosyNeighborsFlag) == 0x000286, "Member 'UTLWidgetSwitcher::AutonAreaHaveNosyNeighborsFlag' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaCouldBeLookingAreaFlag) == 0x000287, "Member 'UTLWidgetSwitcher::AutonAreaCouldBeLookingAreaFlag' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaLookingFeedbackWidget) == 0x000288, "Member 'UTLWidgetSwitcher::AutonAreaLookingFeedbackWidget' has a wrong offset!");
static_assert(offsetof(UTLWidgetSwitcher, AutonAreaFocusPresenter) == 0x000290, "Member 'UTLWidgetSwitcher::AutonAreaFocusPresenter' has a wrong offset!");

// Class TLUI.TLWidgetTickableInterface
// 0x0000 (0x0028 - 0x0028)
class ITLWidgetTickableInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLWidgetTickableInterface">();
	}
	static class ITLWidgetTickableInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ITLWidgetTickableInterface>();
	}
};
static_assert(alignof(ITLWidgetTickableInterface) == 0x000008, "Wrong alignment on ITLWidgetTickableInterface");
static_assert(sizeof(ITLWidgetTickableInterface) == 0x000028, "Wrong size on ITLWidgetTickableInterface");

// Class TLUI.TLWidgetTooltipInterface
// 0x0000 (0x0028 - 0x0028)
class ITLWidgetTooltipInterface final : public IInterface
{
public:
	class UTLSizeBox* GetActionGuideAttachPanel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLWidgetTooltipInterface">();
	}
	static class ITLWidgetTooltipInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ITLWidgetTooltipInterface>();
	}
};
static_assert(alignof(ITLWidgetTooltipInterface) == 0x000008, "Wrong alignment on ITLWidgetTooltipInterface");
static_assert(sizeof(ITLWidgetTooltipInterface) == 0x000028, "Wrong size on ITLWidgetTooltipInterface");

// Class TLUI.TLWidgetViewInterface
// 0x0000 (0x0028 - 0x0028)
class ITLWidgetViewInterface final : public IInterface
{
public:
	class UTLViewModelBase* GetDataContext();
	void SetDataContext(class UTLViewModelBase* InDataContext);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLWidgetViewInterface">();
	}
	static class ITLWidgetViewInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ITLWidgetViewInterface>();
	}
};
static_assert(alignof(ITLWidgetViewInterface) == 0x000008, "Wrong alignment on ITLWidgetViewInterface");
static_assert(sizeof(ITLWidgetViewInterface) == 0x000028, "Wrong size on ITLWidgetViewInterface");

// Class TLUI.TLWidgetVisibilityInterface
// 0x0000 (0x0028 - 0x0028)
class ITLWidgetVisibilityInterface final : public IInterface
{
public:
	void DisabledHitTestWithAllChildren();
	void Hide();
	bool IsShow();
	void SetApplyDisabledHitTestToChildren(bool bInApplyDisabledHitTest);
	void SetCollapsedWhenHide(bool bInCollapsedWhenHide);
	void SetEnableHitTest(bool Enable);
	void SetOpacity(float InOpacity);
	void SetVisible(bool Show_0);
	void Show();
	void ShowWithValue(bool InVisible);
	void Toggle();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLWidgetVisibilityInterface">();
	}
	static class ITLWidgetVisibilityInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ITLWidgetVisibilityInterface>();
	}
};
static_assert(alignof(ITLWidgetVisibilityInterface) == 0x000008, "Wrong alignment on ITLWidgetVisibilityInterface");
static_assert(sizeof(ITLWidgetVisibilityInterface) == 0x000028, "Wrong size on ITLWidgetVisibilityInterface");

// Class TLUI.TLWindowTitleBarArea
// 0x00F0 (0x0230 - 0x0140)
class UTLWindowTitleBarArea final : public UWindowTitleBarArea
{
public:
	uint8                                         Pad_140[0x60];                                     // 0x0140(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x01A4(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x01B0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x01F0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLWindowTitleBarArea">();
	}
	static class UTLWindowTitleBarArea* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLWindowTitleBarArea>();
	}
};
static_assert(alignof(UTLWindowTitleBarArea) == 0x000008, "Wrong alignment on UTLWindowTitleBarArea");
static_assert(sizeof(UTLWindowTitleBarArea) == 0x000230, "Wrong size on UTLWindowTitleBarArea");
static_assert(offsetof(UTLWindowTitleBarArea, TLVisibility) == 0x0001A0, "Member 'UTLWindowTitleBarArea::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLWindowTitleBarArea, TooltipPositionData) == 0x0001A4, "Member 'UTLWindowTitleBarArea::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLWindowTitleBarArea, VisibleBinding) == 0x0001B0, "Member 'UTLWindowTitleBarArea::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLWindowTitleBarArea, EnabledBinding) == 0x0001F0, "Member 'UTLWindowTitleBarArea::EnabledBinding' has a wrong offset!");

// Class TLUI.TLWrapBox
// 0x0190 (0x02D8 - 0x0148)
class UTLWrapBox final : public UWrapBox
{
public:
	uint8                                         Pad_148[0x80];                                     // 0x0148(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLVisibility                          TLVisibility;                                      // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLWidgetFocusableData                 TLFocusableData;                                   // 0x01D0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8[0x10];                                     // 0x01E8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTooltipPositionData                   TooltipPositionData;                               // 0x01F8(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLWidgetBindingVisible                VisibleBinding;                                    // 0x0208(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTLWidgetBindingEnabled                EnabledBinding;                                    // 0x0248(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bFlip;                                             // 0x0288(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonAreaType                              MyAutonAreaType;                                   // 0x0289(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28A[0x2];                                      // 0x028A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaGroupIdValue;                             // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutonAreaOrderTagValue;                            // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFence;                                    // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDome;                                     // 0x0295(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarPrevFirstBeforeLeaveFlag;              // 0x0296(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoRecentAreaWhenLeaveFlag;                // 0x0297(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoBackAreaWhenLeaveFlag;                  // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaGoAreaByOrderTagHintWhenLeaveFlag;        // 0x0299(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonOrderTagHint                          AutonAreaLeaveOrderTagHintValue;                   // 0x029A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B[0x1];                                      // 0x029B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutonAreaLeaveGivenOrderTagValue;                  // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstThenCardinalEnterFlag;          // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaOrderFirstWhenFarCardinalEnterFlag;       // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaTakeRecentIfExistWhenCardinalEnterFlag;   // 0x02A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonChildNavigationHint                   AutonAreaChildNavigatingHint;                      // 0x02A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaFarNavigationWhenShortCardinalFailedFlag; // 0x02A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds; // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AutonAreaCardinalNavigationWeightValue;            // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseHitOnRoad;                         // 0x02BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaDontUseNearest;                           // 0x02BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaHaveNosyNeighborsFlag;                    // 0x02BE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutonAreaCouldBeLookingAreaFlag;                   // 0x02BF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                AutonAreaLookingFeedbackWidget;                    // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ITLWidgetVisibilityInterface> AutonAreaFocusPresenter;                           // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void HandleUpdateEnabled();
	void HandleUpdateVisible();
	void SetWrapSize(float InWrapSize);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TLWrapBox">();
	}
	static class UTLWrapBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTLWrapBox>();
	}
};
static_assert(alignof(UTLWrapBox) == 0x000008, "Wrong alignment on UTLWrapBox");
static_assert(sizeof(UTLWrapBox) == 0x0002D8, "Wrong size on UTLWrapBox");
static_assert(offsetof(UTLWrapBox, TLVisibility) == 0x0001C8, "Member 'UTLWrapBox::TLVisibility' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, TLFocusableData) == 0x0001D0, "Member 'UTLWrapBox::TLFocusableData' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, TooltipPositionData) == 0x0001F8, "Member 'UTLWrapBox::TooltipPositionData' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, VisibleBinding) == 0x000208, "Member 'UTLWrapBox::VisibleBinding' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, EnabledBinding) == 0x000248, "Member 'UTLWrapBox::EnabledBinding' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, bFlip) == 0x000288, "Member 'UTLWrapBox::bFlip' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, MyAutonAreaType) == 0x000289, "Member 'UTLWrapBox::MyAutonAreaType' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaGroupIdValue) == 0x00028C, "Member 'UTLWrapBox::AutonAreaGroupIdValue' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaOrderTagValue) == 0x000290, "Member 'UTLWrapBox::AutonAreaOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaFence) == 0x000294, "Member 'UTLWrapBox::AutonAreaFence' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaDome) == 0x000295, "Member 'UTLWrapBox::AutonAreaDome' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaFarPrevFirstBeforeLeaveFlag) == 0x000296, "Member 'UTLWrapBox::AutonAreaFarPrevFirstBeforeLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaGoRecentAreaWhenLeaveFlag) == 0x000297, "Member 'UTLWrapBox::AutonAreaGoRecentAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaGoBackAreaWhenLeaveFlag) == 0x000298, "Member 'UTLWrapBox::AutonAreaGoBackAreaWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaGoAreaByOrderTagHintWhenLeaveFlag) == 0x000299, "Member 'UTLWrapBox::AutonAreaGoAreaByOrderTagHintWhenLeaveFlag' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaLeaveOrderTagHintValue) == 0x00029A, "Member 'UTLWrapBox::AutonAreaLeaveOrderTagHintValue' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaLeaveGivenOrderTagValue) == 0x00029C, "Member 'UTLWrapBox::AutonAreaLeaveGivenOrderTagValue' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaOrderFirstThenCardinalEnterFlag) == 0x0002A0, "Member 'UTLWrapBox::AutonAreaOrderFirstThenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaOrderFirstWhenFarCardinalEnterFlag) == 0x0002A1, "Member 'UTLWrapBox::AutonAreaOrderFirstWhenFarCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaTakeRecentIfExistWhenCardinalEnterFlag) == 0x0002A2, "Member 'UTLWrapBox::AutonAreaTakeRecentIfExistWhenCardinalEnterFlag' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaChildNavigatingHint) == 0x0002A3, "Member 'UTLWrapBox::AutonAreaChildNavigatingHint' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaFarNavigationWhenShortCardinalFailedFlag) == 0x0002A4, "Member 'UTLWrapBox::AutonAreaFarNavigationWhenShortCardinalFailedFlag' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds) == 0x0002A8, "Member 'UTLWrapBox::AutonAreaFarNavigationWhenShortCardinalFailedLimitGroupIds' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaCardinalNavigationWeightValue) == 0x0002B8, "Member 'UTLWrapBox::AutonAreaCardinalNavigationWeightValue' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaDontUseHitOnRoad) == 0x0002BC, "Member 'UTLWrapBox::AutonAreaDontUseHitOnRoad' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaDontUseNearest) == 0x0002BD, "Member 'UTLWrapBox::AutonAreaDontUseNearest' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaHaveNosyNeighborsFlag) == 0x0002BE, "Member 'UTLWrapBox::AutonAreaHaveNosyNeighborsFlag' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaCouldBeLookingAreaFlag) == 0x0002BF, "Member 'UTLWrapBox::AutonAreaCouldBeLookingAreaFlag' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaLookingFeedbackWidget) == 0x0002C0, "Member 'UTLWrapBox::AutonAreaLookingFeedbackWidget' has a wrong offset!");
static_assert(offsetof(UTLWrapBox, AutonAreaFocusPresenter) == 0x0002C8, "Member 'UTLWrapBox::AutonAreaFocusPresenter' has a wrong offset!");

}

