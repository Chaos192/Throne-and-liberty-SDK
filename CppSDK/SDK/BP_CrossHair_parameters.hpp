#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CrossHair

#include "Basic.hpp"

#include "TLClient_structs.hpp"


namespace SDK::Params
{

// Function BP_CrossHair.BP_CrossHair_C.ExecuteUbergraph_BP_CrossHair
// 0x0020 (0x0020 - 0x0000)
struct BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PlayAnimationForwardInUserWidget_ReturnValue; // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInMinimize;                          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ITLWidgetVisibilityInterface> CallFunc_SetVisible_self_CastInput;                // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETLCrosshairType                              K2Node_Event_InCrosshairType;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBrushByName_ReturnValue;               // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBrushByName_ReturnValue_1;             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bCustomed;                            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair) == 0x000008, "Wrong alignment on BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair");
static_assert(sizeof(BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair) == 0x000020, "Wrong size on BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair");
static_assert(offsetof(BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair, EntryPoint) == 0x000000, "Member 'BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair, CallFunc_PlayAnimationForwardInUserWidget_ReturnValue) == 0x000004, "Member 'BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair::CallFunc_PlayAnimationForwardInUserWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair, K2Node_Event_bInMinimize) == 0x000005, "Member 'BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair::K2Node_Event_bInMinimize' has a wrong offset!");
static_assert(offsetof(BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair, CallFunc_Not_PreBool_ReturnValue) == 0x000006, "Member 'BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair, CallFunc_SetVisible_self_CastInput) == 0x000008, "Member 'BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair::CallFunc_SetVisible_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair, K2Node_Event_InCrosshairType) == 0x000018, "Member 'BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair::K2Node_Event_InCrosshairType' has a wrong offset!");
static_assert(offsetof(BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair, K2Node_SwitchEnum_CmpSuccess) == 0x000019, "Member 'BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair, CallFunc_SetBrushByName_ReturnValue) == 0x00001A, "Member 'BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair::CallFunc_SetBrushByName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair, CallFunc_SetBrushByName_ReturnValue_1) == 0x00001B, "Member 'BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair::CallFunc_SetBrushByName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair, K2Node_Event_bCustomed) == 0x00001C, "Member 'BP_CrossHair_C_ExecuteUbergraph_BP_CrossHair::K2Node_Event_bCustomed' has a wrong offset!");

// Function BP_CrossHair.BP_CrossHair_C.OnChangeCrosshairCenterCustom
// 0x0001 (0x0001 - 0x0000)
struct BP_CrossHair_C_OnChangeCrosshairCenterCustom final
{
public:
	bool                                          bCustomed;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CrossHair_C_OnChangeCrosshairCenterCustom) == 0x000001, "Wrong alignment on BP_CrossHair_C_OnChangeCrosshairCenterCustom");
static_assert(sizeof(BP_CrossHair_C_OnChangeCrosshairCenterCustom) == 0x000001, "Wrong size on BP_CrossHair_C_OnChangeCrosshairCenterCustom");
static_assert(offsetof(BP_CrossHair_C_OnChangeCrosshairCenterCustom, bCustomed) == 0x000000, "Member 'BP_CrossHair_C_OnChangeCrosshairCenterCustom::bCustomed' has a wrong offset!");

// Function BP_CrossHair.BP_CrossHair_C.OnChangeCrosshairType
// 0x0001 (0x0001 - 0x0000)
struct BP_CrossHair_C_OnChangeCrosshairType final
{
public:
	ETLCrosshairType                              InCrosshairType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CrossHair_C_OnChangeCrosshairType) == 0x000001, "Wrong alignment on BP_CrossHair_C_OnChangeCrosshairType");
static_assert(sizeof(BP_CrossHair_C_OnChangeCrosshairType) == 0x000001, "Wrong size on BP_CrossHair_C_OnChangeCrosshairType");
static_assert(offsetof(BP_CrossHair_C_OnChangeCrosshairType, InCrosshairType) == 0x000000, "Member 'BP_CrossHair_C_OnChangeCrosshairType::InCrosshairType' has a wrong offset!");

// Function BP_CrossHair.BP_CrossHair_C.OnMinimizeCrosshair
// 0x0001 (0x0001 - 0x0000)
struct BP_CrossHair_C_OnMinimizeCrosshair final
{
public:
	bool                                          bInMinimize;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CrossHair_C_OnMinimizeCrosshair) == 0x000001, "Wrong alignment on BP_CrossHair_C_OnMinimizeCrosshair");
static_assert(sizeof(BP_CrossHair_C_OnMinimizeCrosshair) == 0x000001, "Wrong size on BP_CrossHair_C_OnMinimizeCrosshair");
static_assert(offsetof(BP_CrossHair_C_OnMinimizeCrosshair, bInMinimize) == 0x000000, "Member 'BP_CrossHair_C_OnMinimizeCrosshair::bInMinimize' has a wrong offset!");

}

