#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TrailsManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ST_TrailData_structs.hpp"
#include "ST_TrailDataUV_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TrailsManager.BP_TrailsManager_C
// 0x0178 (0x03A8 - 0x0230)
class ABP_TrailsManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      TrailsLocation;                                    // 0x0240(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<float>                                 TrailsRadius;                                      // 0x0250(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<float>                                 TrailsRadiusWorld;                                 // 0x0260(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<float>                                 TrailsHardness;                                    // 0x0270(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<float>                                 TrailsDepth;                                       // 0x0280(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<bool>                                  TrailsFullyUnderground;                            // 0x0290(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UTextureRenderTarget2D*                 HistoryRenderTarget;                               // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDistance;                                       // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 CurrentRenderTarget;                               // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 TrailsRenderTarget;                                // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              TrailDrawer;                                       // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              HistoryMerge;                                      // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              HistoryCopy;                                       // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               TrailDrawerInstance;                               // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               HistoryMergeInstance;                              // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               HistoryCopyInstance;                               // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PileUpDrawerInstance;                              // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HistoryLocation;                                   // 0x02F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TrailsAttenuation;                                 // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentLocation;                                   // 0x0308(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocationCalcHelper;                                // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLocationCalculated;                              // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319[0x3];                                      // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TrailsAttenuation2;                                // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SideFade;                                          // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxPileUpAtXTimesRadius;                           // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PileHeightXTimesRadius;                            // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugTrailsManager;                               // 0x032C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32D[0x3];                                      // 0x032D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      PilesLocation;                                     // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<float>                                 PilesRadius;                                       // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<float>                                 PilesDepth;                                        // 0x0350(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<float>                                 PilesHardness;                                     // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bDebugTrails;                                      // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrevMaxDistance;                                   // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FST_TrailData>                  TrailDataArray;                                    // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FST_TrailDataUV>                TrailUVDataArray;                                  // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         MaxPileWidthAtXTimesRadius;                        // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PileWidthXTimesRadius;                             // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceDepthXtimesRadius;                            // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_TrailsManager(int32 EntryPoint);
	void ToggleDebugTrails();
	void ToggleDebugTrailsManager();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void RegisterTrail(const struct FST_TrailData& TrailData);
	void RegisterPileTrail(const struct FVector& Location, float Radius, float Hardness, float Depth);
	void RenderTrails();
	void CalculateLocation();
	void Initialize();
	void OnMaxDistanceChanged();
	void RegisterTrailST(const struct FST_TrailData& Trail_Data);
	void CalculatePileHeightAndRadius(float InDepth, float InOriginalRadiusWorld, float* RadiusWorld, float* Height);
	void SortTrails();

	void VisualizeTrailComponents(class AActor* Actor) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TrailsManager_C">();
	}
	static class ABP_TrailsManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TrailsManager_C>();
	}
};
static_assert(alignof(ABP_TrailsManager_C) == 0x000008, "Wrong alignment on ABP_TrailsManager_C");
static_assert(sizeof(ABP_TrailsManager_C) == 0x0003A8, "Wrong size on ABP_TrailsManager_C");
static_assert(offsetof(ABP_TrailsManager_C, UberGraphFrame) == 0x000230, "Member 'ABP_TrailsManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, DefaultSceneRoot) == 0x000238, "Member 'ABP_TrailsManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailsLocation) == 0x000240, "Member 'ABP_TrailsManager_C::TrailsLocation' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailsRadius) == 0x000250, "Member 'ABP_TrailsManager_C::TrailsRadius' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailsRadiusWorld) == 0x000260, "Member 'ABP_TrailsManager_C::TrailsRadiusWorld' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailsHardness) == 0x000270, "Member 'ABP_TrailsManager_C::TrailsHardness' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailsDepth) == 0x000280, "Member 'ABP_TrailsManager_C::TrailsDepth' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailsFullyUnderground) == 0x000290, "Member 'ABP_TrailsManager_C::TrailsFullyUnderground' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, HistoryRenderTarget) == 0x0002A0, "Member 'ABP_TrailsManager_C::HistoryRenderTarget' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, MaxDistance) == 0x0002A8, "Member 'ABP_TrailsManager_C::MaxDistance' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, CurrentRenderTarget) == 0x0002B0, "Member 'ABP_TrailsManager_C::CurrentRenderTarget' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailsRenderTarget) == 0x0002B8, "Member 'ABP_TrailsManager_C::TrailsRenderTarget' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailDrawer) == 0x0002C0, "Member 'ABP_TrailsManager_C::TrailDrawer' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, HistoryMerge) == 0x0002C8, "Member 'ABP_TrailsManager_C::HistoryMerge' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, HistoryCopy) == 0x0002D0, "Member 'ABP_TrailsManager_C::HistoryCopy' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailDrawerInstance) == 0x0002D8, "Member 'ABP_TrailsManager_C::TrailDrawerInstance' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, HistoryMergeInstance) == 0x0002E0, "Member 'ABP_TrailsManager_C::HistoryMergeInstance' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, HistoryCopyInstance) == 0x0002E8, "Member 'ABP_TrailsManager_C::HistoryCopyInstance' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, PileUpDrawerInstance) == 0x0002F0, "Member 'ABP_TrailsManager_C::PileUpDrawerInstance' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, HistoryLocation) == 0x0002F8, "Member 'ABP_TrailsManager_C::HistoryLocation' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailsAttenuation) == 0x000304, "Member 'ABP_TrailsManager_C::TrailsAttenuation' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, CurrentLocation) == 0x000308, "Member 'ABP_TrailsManager_C::CurrentLocation' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, LocationCalcHelper) == 0x000314, "Member 'ABP_TrailsManager_C::LocationCalcHelper' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, IsLocationCalculated) == 0x000318, "Member 'ABP_TrailsManager_C::IsLocationCalculated' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailsAttenuation2) == 0x00031C, "Member 'ABP_TrailsManager_C::TrailsAttenuation2' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, SideFade) == 0x000320, "Member 'ABP_TrailsManager_C::SideFade' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, MaxPileUpAtXTimesRadius) == 0x000324, "Member 'ABP_TrailsManager_C::MaxPileUpAtXTimesRadius' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, PileHeightXTimesRadius) == 0x000328, "Member 'ABP_TrailsManager_C::PileHeightXTimesRadius' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, bDebugTrailsManager) == 0x00032C, "Member 'ABP_TrailsManager_C::bDebugTrailsManager' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, PilesLocation) == 0x000330, "Member 'ABP_TrailsManager_C::PilesLocation' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, PilesRadius) == 0x000340, "Member 'ABP_TrailsManager_C::PilesRadius' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, PilesDepth) == 0x000350, "Member 'ABP_TrailsManager_C::PilesDepth' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, PilesHardness) == 0x000360, "Member 'ABP_TrailsManager_C::PilesHardness' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, bDebugTrails) == 0x000370, "Member 'ABP_TrailsManager_C::bDebugTrails' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, PrevMaxDistance) == 0x000374, "Member 'ABP_TrailsManager_C::PrevMaxDistance' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailDataArray) == 0x000378, "Member 'ABP_TrailsManager_C::TrailDataArray' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailUVDataArray) == 0x000388, "Member 'ABP_TrailsManager_C::TrailUVDataArray' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, MaxPileWidthAtXTimesRadius) == 0x000398, "Member 'ABP_TrailsManager_C::MaxPileWidthAtXTimesRadius' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, PileWidthXTimesRadius) == 0x00039C, "Member 'ABP_TrailsManager_C::PileWidthXTimesRadius' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TraceDepthXtimesRadius) == 0x0003A0, "Member 'ABP_TrailsManager_C::TraceDepthXtimesRadius' has a wrong offset!");

}

