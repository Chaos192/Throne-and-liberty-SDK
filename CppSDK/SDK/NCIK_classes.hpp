#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NCIK

#include "Basic.hpp"

#include "NCIK_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "NPBIK_structs.hpp"


namespace SDK
{

// Class NCIK.MeshSpringComponent
// 0x0100 (0x0310 - 0x0210)
class UMeshSpringComponent final : public USceneComponent
{
public:
	bool                                          bUseLinearSpring;                                  // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LinearSpringRate;                                  // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDampingRatio;                                // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxOffset;                                         // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAngularSpring;                                 // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AngularSpringRate;                                 // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDampingRatio;                               // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebugData;                                    // 0x0224(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_225[0x3];                                      // 0x0225(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                        TargetComp;                                        // 0x0230(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_238[0xD8];                                     // 0x0238(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshSpringComponent">();
	}
	static class UMeshSpringComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshSpringComponent>();
	}
};
static_assert(alignof(UMeshSpringComponent) == 0x000010, "Wrong alignment on UMeshSpringComponent");
static_assert(sizeof(UMeshSpringComponent) == 0x000310, "Wrong size on UMeshSpringComponent");
static_assert(offsetof(UMeshSpringComponent, bUseLinearSpring) == 0x000208, "Member 'UMeshSpringComponent::bUseLinearSpring' has a wrong offset!");
static_assert(offsetof(UMeshSpringComponent, LinearSpringRate) == 0x00020C, "Member 'UMeshSpringComponent::LinearSpringRate' has a wrong offset!");
static_assert(offsetof(UMeshSpringComponent, LinearDampingRatio) == 0x000210, "Member 'UMeshSpringComponent::LinearDampingRatio' has a wrong offset!");
static_assert(offsetof(UMeshSpringComponent, MaxOffset) == 0x000214, "Member 'UMeshSpringComponent::MaxOffset' has a wrong offset!");
static_assert(offsetof(UMeshSpringComponent, bUseAngularSpring) == 0x000218, "Member 'UMeshSpringComponent::bUseAngularSpring' has a wrong offset!");
static_assert(offsetof(UMeshSpringComponent, AngularSpringRate) == 0x00021C, "Member 'UMeshSpringComponent::AngularSpringRate' has a wrong offset!");
static_assert(offsetof(UMeshSpringComponent, AngularDampingRatio) == 0x000220, "Member 'UMeshSpringComponent::AngularDampingRatio' has a wrong offset!");
static_assert(offsetof(UMeshSpringComponent, bDrawDebugData) == 0x000224, "Member 'UMeshSpringComponent::bDrawDebugData' has a wrong offset!");
static_assert(offsetof(UMeshSpringComponent, Owner) == 0x000228, "Member 'UMeshSpringComponent::Owner' has a wrong offset!");
static_assert(offsetof(UMeshSpringComponent, TargetComp) == 0x000230, "Member 'UMeshSpringComponent::TargetComp' has a wrong offset!");

// Class NCIK.PreviewSolverSettings
// 0x0000 (0x0028 - 0x0028)
class UPreviewSolverSettings : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PreviewSolverSettings">();
	}
	static class UPreviewSolverSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPreviewSolverSettings>();
	}
};
static_assert(alignof(UPreviewSolverSettings) == 0x000008, "Wrong alignment on UPreviewSolverSettings");
static_assert(sizeof(UPreviewSolverSettings) == 0x000028, "Wrong size on UPreviewSolverSettings");

// Class NCIK.NCIKBipedFootPlacementSolverSettings
// 0x0000 (0x0028 - 0x0028)
class UNCIKBipedFootPlacementSolverSettings final : public UPreviewSolverSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NCIKBipedFootPlacementSolverSettings">();
	}
	static class UNCIKBipedFootPlacementSolverSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNCIKBipedFootPlacementSolverSettings>();
	}
};
static_assert(alignof(UNCIKBipedFootPlacementSolverSettings) == 0x000008, "Wrong alignment on UNCIKBipedFootPlacementSolverSettings");
static_assert(sizeof(UNCIKBipedFootPlacementSolverSettings) == 0x000028, "Wrong size on UNCIKBipedFootPlacementSolverSettings");

// Class NCIK.NCIKSolverBase
// 0x0000 (0x0028 - 0x0028)
class UNCIKSolverBase : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NCIKSolverBase">();
	}
	static class UNCIKSolverBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNCIKSolverBase>();
	}
};
static_assert(alignof(UNCIKSolverBase) == 0x000008, "Wrong alignment on UNCIKSolverBase");
static_assert(sizeof(UNCIKSolverBase) == 0x000028, "Wrong size on UNCIKSolverBase");

// Class NCIK.NCIK_PBIKSolver
// 0x0108 (0x0130 - 0x0028)
class UNCIK_PBIKSolver final : public UNCIKSolverBase
{
public:
	struct FNPBIKSolverSettings                   CoreSettings;                                      // 0x0028(0x003C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0xCC];                                      // 0x0064(0x00CC)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NCIK_PBIKSolver">();
	}
	static class UNCIK_PBIKSolver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNCIK_PBIKSolver>();
	}
};
static_assert(alignof(UNCIK_PBIKSolver) == 0x000008, "Wrong alignment on UNCIK_PBIKSolver");
static_assert(sizeof(UNCIK_PBIKSolver) == 0x000130, "Wrong size on UNCIK_PBIKSolver");
static_assert(offsetof(UNCIK_PBIKSolver, CoreSettings) == 0x000028, "Member 'UNCIK_PBIKSolver::CoreSettings' has a wrong offset!");

// Class NCIK.NCIKRig
// 0x0078 (0x00A0 - 0x0028)
class UNCIKRig final : public UObject
{
public:
	class USkeleton*                              Skeleton;                                          // 0x0028(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FNCIKBoneReference                     RootBone;                                          // 0x0030(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               OrientationAlignment;                              // 0x0040(0x000C)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNCIKFootPlacementProcessor> FootPlacementType;                                 // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLimbDefinition>                Limbs;                                             // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UNCIKBoneSettings_Base*>         BoneSettings;                                      // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FJointConstraint>               JointConstraints;                                  // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNCIKBoneReference>             IgnoredJoints;                                     // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UNCIKFootPlacementProcessor*            FootPlacementInstance;                             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NCIKRig">();
	}
	static class UNCIKRig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNCIKRig>();
	}
};
static_assert(alignof(UNCIKRig) == 0x000008, "Wrong alignment on UNCIKRig");
static_assert(sizeof(UNCIKRig) == 0x0000A0, "Wrong size on UNCIKRig");
static_assert(offsetof(UNCIKRig, Skeleton) == 0x000028, "Member 'UNCIKRig::Skeleton' has a wrong offset!");
static_assert(offsetof(UNCIKRig, RootBone) == 0x000030, "Member 'UNCIKRig::RootBone' has a wrong offset!");
static_assert(offsetof(UNCIKRig, OrientationAlignment) == 0x000040, "Member 'UNCIKRig::OrientationAlignment' has a wrong offset!");
static_assert(offsetof(UNCIKRig, FootPlacementType) == 0x000050, "Member 'UNCIKRig::FootPlacementType' has a wrong offset!");
static_assert(offsetof(UNCIKRig, Limbs) == 0x000058, "Member 'UNCIKRig::Limbs' has a wrong offset!");
static_assert(offsetof(UNCIKRig, BoneSettings) == 0x000068, "Member 'UNCIKRig::BoneSettings' has a wrong offset!");
static_assert(offsetof(UNCIKRig, JointConstraints) == 0x000078, "Member 'UNCIKRig::JointConstraints' has a wrong offset!");
static_assert(offsetof(UNCIKRig, IgnoredJoints) == 0x000088, "Member 'UNCIKRig::IgnoredJoints' has a wrong offset!");
static_assert(offsetof(UNCIKRig, FootPlacementInstance) == 0x000098, "Member 'UNCIKRig::FootPlacementInstance' has a wrong offset!");

// Class NCIK.NCIKFootPlacementProcessor
// 0x0160 (0x0188 - 0x0028)
class UNCIKFootPlacementProcessor : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumEvaluatesWithoutSmoothingSincePhysicsReset;     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreAttachedActors;                             // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNCIKFootPlacementLODSettings>  LODSettingsArray;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x140];                                     // 0x0048(0x0140)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NCIKFootPlacementProcessor">();
	}
	static class UNCIKFootPlacementProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNCIKFootPlacementProcessor>();
	}
};
static_assert(alignof(UNCIKFootPlacementProcessor) == 0x000008, "Wrong alignment on UNCIKFootPlacementProcessor");
static_assert(sizeof(UNCIKFootPlacementProcessor) == 0x000188, "Wrong size on UNCIKFootPlacementProcessor");
static_assert(offsetof(UNCIKFootPlacementProcessor, NumEvaluatesWithoutSmoothingSincePhysicsReset) == 0x000030, "Member 'UNCIKFootPlacementProcessor::NumEvaluatesWithoutSmoothingSincePhysicsReset' has a wrong offset!");
static_assert(offsetof(UNCIKFootPlacementProcessor, bIgnoreAttachedActors) == 0x000034, "Member 'UNCIKFootPlacementProcessor::bIgnoreAttachedActors' has a wrong offset!");
static_assert(offsetof(UNCIKFootPlacementProcessor, LODSettingsArray) == 0x000038, "Member 'UNCIKFootPlacementProcessor::LODSettingsArray' has a wrong offset!");

// Class NCIK.NCIKBipedFootPlacementProcessor
// 0x0358 (0x04E0 - 0x0188)
class alignas(0x10) UNCIKBipedFootPlacementProcessor final : public UNCIKFootPlacementProcessor
{
public:
	float                                         InPoseSlopeAngle;                                  // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceFootOnGround;                                // 0x018C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18D[0x3];                                      // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GroundResponsiveness;                              // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnkleCorrectionInterpSpeed;                        // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisCorrectionInterpSpeed;                       // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     BodyRotationFactorCurveUphill;                     // 0x01A0(0x0088)(Edit, Config, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     BodyRotationFactorCurveDownhill;                   // 0x0228(0x0088)(Edit, Config, NativeAccessSpecifierPublic)
	float                                         AnklePitchRotationUpperLimit;                      // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnkleRollRotationMultiplier;                       // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumThighAnkleDistanceRatio;                    // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPelvisHeightCorrection;                         // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             Channel;                                           // 0x02C0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSphereShape;                                   // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideSphereRadius;                             // 0x02C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C3[0x1];                                      // 0x02C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereRadius;                                      // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCenterDirectionForComplexCollisionDetection;   // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GroundSlopeOffsetAbove;                            // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundSlopeOffsetBelow;                            // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoleTraceDistanceOffset;                           // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D8[0x208];                                    // 0x02D8(0x0208)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NCIKBipedFootPlacementProcessor">();
	}
	static class UNCIKBipedFootPlacementProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNCIKBipedFootPlacementProcessor>();
	}
};
static_assert(alignof(UNCIKBipedFootPlacementProcessor) == 0x000010, "Wrong alignment on UNCIKBipedFootPlacementProcessor");
static_assert(sizeof(UNCIKBipedFootPlacementProcessor) == 0x0004E0, "Wrong size on UNCIKBipedFootPlacementProcessor");
static_assert(offsetof(UNCIKBipedFootPlacementProcessor, InPoseSlopeAngle) == 0x000188, "Member 'UNCIKBipedFootPlacementProcessor::InPoseSlopeAngle' has a wrong offset!");
static_assert(offsetof(UNCIKBipedFootPlacementProcessor, bForceFootOnGround) == 0x00018C, "Member 'UNCIKBipedFootPlacementProcessor::bForceFootOnGround' has a wrong offset!");
static_assert(offsetof(UNCIKBipedFootPlacementProcessor, GroundResponsiveness) == 0x000190, "Member 'UNCIKBipedFootPlacementProcessor::GroundResponsiveness' has a wrong offset!");
static_assert(offsetof(UNCIKBipedFootPlacementProcessor, AnkleCorrectionInterpSpeed) == 0x000194, "Member 'UNCIKBipedFootPlacementProcessor::AnkleCorrectionInterpSpeed' has a wrong offset!");
static_assert(offsetof(UNCIKBipedFootPlacementProcessor, PelvisCorrectionInterpSpeed) == 0x000198, "Member 'UNCIKBipedFootPlacementProcessor::PelvisCorrectionInterpSpeed' has a wrong offset!");
static_assert(offsetof(UNCIKBipedFootPlacementProcessor, BodyRotationFactorCurveUphill) == 0x0001A0, "Member 'UNCIKBipedFootPlacementProcessor::BodyRotationFactorCurveUphill' has a wrong offset!");
static_assert(offsetof(UNCIKBipedFootPlacementProcessor, BodyRotationFactorCurveDownhill) == 0x000228, "Member 'UNCIKBipedFootPlacementProcessor::BodyRotationFactorCurveDownhill' has a wrong offset!");
static_assert(offsetof(UNCIKBipedFootPlacementProcessor, AnklePitchRotationUpperLimit) == 0x0002B0, "Member 'UNCIKBipedFootPlacementProcessor::AnklePitchRotationUpperLimit' has a wrong offset!");
static_assert(offsetof(UNCIKBipedFootPlacementProcessor, AnkleRollRotationMultiplier) == 0x0002B4, "Member 'UNCIKBipedFootPlacementProcessor::AnkleRollRotationMultiplier' has a wrong offset!");
static_assert(offsetof(UNCIKBipedFootPlacementProcessor, MinimumThighAnkleDistanceRatio) == 0x0002B8, "Member 'UNCIKBipedFootPlacementProcessor::MinimumThighAnkleDistanceRatio' has a wrong offset!");
static_assert(offsetof(UNCIKBipedFootPlacementProcessor, MaxPelvisHeightCorrection) == 0x0002BC, "Member 'UNCIKBipedFootPlacementProcessor::MaxPelvisHeightCorrection' has a wrong offset!");
static_assert(offsetof(UNCIKBipedFootPlacementProcessor, Channel) == 0x0002C0, "Member 'UNCIKBipedFootPlacementProcessor::Channel' has a wrong offset!");
static_assert(offsetof(UNCIKBipedFootPlacementProcessor, bUseSphereShape) == 0x0002C1, "Member 'UNCIKBipedFootPlacementProcessor::bUseSphereShape' has a wrong offset!");
static_assert(offsetof(UNCIKBipedFootPlacementProcessor, bOverrideSphereRadius) == 0x0002C2, "Member 'UNCIKBipedFootPlacementProcessor::bOverrideSphereRadius' has a wrong offset!");
static_assert(offsetof(UNCIKBipedFootPlacementProcessor, SphereRadius) == 0x0002C4, "Member 'UNCIKBipedFootPlacementProcessor::SphereRadius' has a wrong offset!");
static_assert(offsetof(UNCIKBipedFootPlacementProcessor, bUseCenterDirectionForComplexCollisionDetection) == 0x0002C8, "Member 'UNCIKBipedFootPlacementProcessor::bUseCenterDirectionForComplexCollisionDetection' has a wrong offset!");
static_assert(offsetof(UNCIKBipedFootPlacementProcessor, GroundSlopeOffsetAbove) == 0x0002CC, "Member 'UNCIKBipedFootPlacementProcessor::GroundSlopeOffsetAbove' has a wrong offset!");
static_assert(offsetof(UNCIKBipedFootPlacementProcessor, GroundSlopeOffsetBelow) == 0x0002D0, "Member 'UNCIKBipedFootPlacementProcessor::GroundSlopeOffsetBelow' has a wrong offset!");
static_assert(offsetof(UNCIKBipedFootPlacementProcessor, SoleTraceDistanceOffset) == 0x0002D4, "Member 'UNCIKBipedFootPlacementProcessor::SoleTraceDistanceOffset' has a wrong offset!");

// Class NCIK.NCIKBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UNCIKBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void SetAnimRootMotionTranslationScale(class ACharacter* Character, float InAnimRootMotionTranslationScale);
	static void SetDrawDebugColor(class USkinnedMeshComponent* MeshComp, const struct FLinearColor& Color);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NCIKBlueprintFunctionLibrary">();
	}
	static class UNCIKBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNCIKBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(UNCIKBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on UNCIKBlueprintFunctionLibrary");
static_assert(sizeof(UNCIKBlueprintFunctionLibrary) == 0x000028, "Wrong size on UNCIKBlueprintFunctionLibrary");

// Class NCIK.NCIKBoneSettings_Base
// 0x0010 (0x0038 - 0x0028)
class UNCIKBoneSettings_Base : public UObject
{
public:
	class FName                                   Bone;                                              // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoGenerated;                                    // 0x0030(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NCIKBoneSettings_Base">();
	}
	static class UNCIKBoneSettings_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNCIKBoneSettings_Base>();
	}
};
static_assert(alignof(UNCIKBoneSettings_Base) == 0x000008, "Wrong alignment on UNCIKBoneSettings_Base");
static_assert(sizeof(UNCIKBoneSettings_Base) == 0x000038, "Wrong size on UNCIKBoneSettings_Base");
static_assert(offsetof(UNCIKBoneSettings_Base, Bone) == 0x000028, "Member 'UNCIKBoneSettings_Base::Bone' has a wrong offset!");
static_assert(offsetof(UNCIKBoneSettings_Base, bAutoGenerated) == 0x000030, "Member 'UNCIKBoneSettings_Base::bAutoGenerated' has a wrong offset!");

// Class NCIK.NCIKBoneSettings_BallAndSocket
// 0x0040 (0x0078 - 0x0038)
class UNCIKBoneSettings_BallAndSocket final : public UNCIKBoneSettings_Base
{
public:
	float                                         RotationStiffness;                                 // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionStiffness;                                 // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENCIKLimitType                                X;                                                 // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinX;                                              // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxX;                                              // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENCIKLimitType                                Y;                                                 // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinY;                                              // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxY;                                              // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENCIKLimitType                                Z;                                                 // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinZ;                                              // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxZ;                                              // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePreferredAngles;                               // 0x0064(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreferredAngles;                                   // 0x0068(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NCIKBoneSettings_BallAndSocket">();
	}
	static class UNCIKBoneSettings_BallAndSocket* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNCIKBoneSettings_BallAndSocket>();
	}
};
static_assert(alignof(UNCIKBoneSettings_BallAndSocket) == 0x000008, "Wrong alignment on UNCIKBoneSettings_BallAndSocket");
static_assert(sizeof(UNCIKBoneSettings_BallAndSocket) == 0x000078, "Wrong size on UNCIKBoneSettings_BallAndSocket");
static_assert(offsetof(UNCIKBoneSettings_BallAndSocket, RotationStiffness) == 0x000038, "Member 'UNCIKBoneSettings_BallAndSocket::RotationStiffness' has a wrong offset!");
static_assert(offsetof(UNCIKBoneSettings_BallAndSocket, PositionStiffness) == 0x00003C, "Member 'UNCIKBoneSettings_BallAndSocket::PositionStiffness' has a wrong offset!");
static_assert(offsetof(UNCIKBoneSettings_BallAndSocket, X) == 0x000040, "Member 'UNCIKBoneSettings_BallAndSocket::X' has a wrong offset!");
static_assert(offsetof(UNCIKBoneSettings_BallAndSocket, MinX) == 0x000044, "Member 'UNCIKBoneSettings_BallAndSocket::MinX' has a wrong offset!");
static_assert(offsetof(UNCIKBoneSettings_BallAndSocket, MaxX) == 0x000048, "Member 'UNCIKBoneSettings_BallAndSocket::MaxX' has a wrong offset!");
static_assert(offsetof(UNCIKBoneSettings_BallAndSocket, Y) == 0x00004C, "Member 'UNCIKBoneSettings_BallAndSocket::Y' has a wrong offset!");
static_assert(offsetof(UNCIKBoneSettings_BallAndSocket, MinY) == 0x000050, "Member 'UNCIKBoneSettings_BallAndSocket::MinY' has a wrong offset!");
static_assert(offsetof(UNCIKBoneSettings_BallAndSocket, MaxY) == 0x000054, "Member 'UNCIKBoneSettings_BallAndSocket::MaxY' has a wrong offset!");
static_assert(offsetof(UNCIKBoneSettings_BallAndSocket, Z) == 0x000058, "Member 'UNCIKBoneSettings_BallAndSocket::Z' has a wrong offset!");
static_assert(offsetof(UNCIKBoneSettings_BallAndSocket, MinZ) == 0x00005C, "Member 'UNCIKBoneSettings_BallAndSocket::MinZ' has a wrong offset!");
static_assert(offsetof(UNCIKBoneSettings_BallAndSocket, MaxZ) == 0x000060, "Member 'UNCIKBoneSettings_BallAndSocket::MaxZ' has a wrong offset!");
static_assert(offsetof(UNCIKBoneSettings_BallAndSocket, bUsePreferredAngles) == 0x000064, "Member 'UNCIKBoneSettings_BallAndSocket::bUsePreferredAngles' has a wrong offset!");
static_assert(offsetof(UNCIKBoneSettings_BallAndSocket, PreferredAngles) == 0x000068, "Member 'UNCIKBoneSettings_BallAndSocket::PreferredAngles' has a wrong offset!");

// Class NCIK.NCIKBoneSettings_Hinge
// 0x0020 (0x0058 - 0x0038)
class UNCIKBoneSettings_Hinge final : public UNCIKBoneSettings_Base
{
public:
	float                                         RotationStiffness;                                 // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionStiffness;                                 // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         LocalAxis;                                         // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENCIKLimitType                                Limit;                                             // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinAngle;                                          // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngle;                                          // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreferredAngle;                                    // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NCIKBoneSettings_Hinge">();
	}
	static class UNCIKBoneSettings_Hinge* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNCIKBoneSettings_Hinge>();
	}
};
static_assert(alignof(UNCIKBoneSettings_Hinge) == 0x000008, "Wrong alignment on UNCIKBoneSettings_Hinge");
static_assert(sizeof(UNCIKBoneSettings_Hinge) == 0x000058, "Wrong size on UNCIKBoneSettings_Hinge");
static_assert(offsetof(UNCIKBoneSettings_Hinge, RotationStiffness) == 0x000038, "Member 'UNCIKBoneSettings_Hinge::RotationStiffness' has a wrong offset!");
static_assert(offsetof(UNCIKBoneSettings_Hinge, PositionStiffness) == 0x00003C, "Member 'UNCIKBoneSettings_Hinge::PositionStiffness' has a wrong offset!");
static_assert(offsetof(UNCIKBoneSettings_Hinge, LocalAxis) == 0x000040, "Member 'UNCIKBoneSettings_Hinge::LocalAxis' has a wrong offset!");
static_assert(offsetof(UNCIKBoneSettings_Hinge, Limit) == 0x000041, "Member 'UNCIKBoneSettings_Hinge::Limit' has a wrong offset!");
static_assert(offsetof(UNCIKBoneSettings_Hinge, MinAngle) == 0x000044, "Member 'UNCIKBoneSettings_Hinge::MinAngle' has a wrong offset!");
static_assert(offsetof(UNCIKBoneSettings_Hinge, MaxAngle) == 0x000048, "Member 'UNCIKBoneSettings_Hinge::MaxAngle' has a wrong offset!");
static_assert(offsetof(UNCIKBoneSettings_Hinge, PreferredAngle) == 0x00004C, "Member 'UNCIKBoneSettings_Hinge::PreferredAngle' has a wrong offset!");

// Class NCIK.NCIKQuadrupedFootPlacementProcessor
// 0x03C8 (0x0550 - 0x0188)
class alignas(0x10) UNCIKQuadrupedFootPlacementProcessor final : public UNCIKFootPlacementProcessor
{
public:
	float                                         GroundResponsiveness;                              // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToeCorrectionInterpSpeed;                          // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisCorrectionInterpSpeed;                       // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdaptiveSlopeAngleUpperLimit;                      // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdaptiveSlopeAngleLowerLimit;                      // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnkleRotationRatio;                                // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     ToeToSlopeRotationRatio;                           // 0x01A0(0x0088)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	float                                         MinThighToeDistanceRatio;                          // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPelvisHeightCorrection;                         // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             Channel;                                           // 0x0230(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSphereShape;                                   // 0x0231(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideSphereRadius;                             // 0x0232(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233[0x1];                                      // 0x0233(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereRadius;                                      // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCenterDirectionForComplexCollisionDetection;   // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GroundSlopeOffsetAbove;                            // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundSlopeOffsetBelow;                            // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoleTraceDistanceOffset;                           // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_248[0x308];                                    // 0x0248(0x0308)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NCIKQuadrupedFootPlacementProcessor">();
	}
	static class UNCIKQuadrupedFootPlacementProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNCIKQuadrupedFootPlacementProcessor>();
	}
};
static_assert(alignof(UNCIKQuadrupedFootPlacementProcessor) == 0x000010, "Wrong alignment on UNCIKQuadrupedFootPlacementProcessor");
static_assert(sizeof(UNCIKQuadrupedFootPlacementProcessor) == 0x000550, "Wrong size on UNCIKQuadrupedFootPlacementProcessor");
static_assert(offsetof(UNCIKQuadrupedFootPlacementProcessor, GroundResponsiveness) == 0x000188, "Member 'UNCIKQuadrupedFootPlacementProcessor::GroundResponsiveness' has a wrong offset!");
static_assert(offsetof(UNCIKQuadrupedFootPlacementProcessor, ToeCorrectionInterpSpeed) == 0x00018C, "Member 'UNCIKQuadrupedFootPlacementProcessor::ToeCorrectionInterpSpeed' has a wrong offset!");
static_assert(offsetof(UNCIKQuadrupedFootPlacementProcessor, PelvisCorrectionInterpSpeed) == 0x000190, "Member 'UNCIKQuadrupedFootPlacementProcessor::PelvisCorrectionInterpSpeed' has a wrong offset!");
static_assert(offsetof(UNCIKQuadrupedFootPlacementProcessor, AdaptiveSlopeAngleUpperLimit) == 0x000194, "Member 'UNCIKQuadrupedFootPlacementProcessor::AdaptiveSlopeAngleUpperLimit' has a wrong offset!");
static_assert(offsetof(UNCIKQuadrupedFootPlacementProcessor, AdaptiveSlopeAngleLowerLimit) == 0x000198, "Member 'UNCIKQuadrupedFootPlacementProcessor::AdaptiveSlopeAngleLowerLimit' has a wrong offset!");
static_assert(offsetof(UNCIKQuadrupedFootPlacementProcessor, AnkleRotationRatio) == 0x00019C, "Member 'UNCIKQuadrupedFootPlacementProcessor::AnkleRotationRatio' has a wrong offset!");
static_assert(offsetof(UNCIKQuadrupedFootPlacementProcessor, ToeToSlopeRotationRatio) == 0x0001A0, "Member 'UNCIKQuadrupedFootPlacementProcessor::ToeToSlopeRotationRatio' has a wrong offset!");
static_assert(offsetof(UNCIKQuadrupedFootPlacementProcessor, MinThighToeDistanceRatio) == 0x000228, "Member 'UNCIKQuadrupedFootPlacementProcessor::MinThighToeDistanceRatio' has a wrong offset!");
static_assert(offsetof(UNCIKQuadrupedFootPlacementProcessor, MaxPelvisHeightCorrection) == 0x00022C, "Member 'UNCIKQuadrupedFootPlacementProcessor::MaxPelvisHeightCorrection' has a wrong offset!");
static_assert(offsetof(UNCIKQuadrupedFootPlacementProcessor, Channel) == 0x000230, "Member 'UNCIKQuadrupedFootPlacementProcessor::Channel' has a wrong offset!");
static_assert(offsetof(UNCIKQuadrupedFootPlacementProcessor, bUseSphereShape) == 0x000231, "Member 'UNCIKQuadrupedFootPlacementProcessor::bUseSphereShape' has a wrong offset!");
static_assert(offsetof(UNCIKQuadrupedFootPlacementProcessor, bOverrideSphereRadius) == 0x000232, "Member 'UNCIKQuadrupedFootPlacementProcessor::bOverrideSphereRadius' has a wrong offset!");
static_assert(offsetof(UNCIKQuadrupedFootPlacementProcessor, SphereRadius) == 0x000234, "Member 'UNCIKQuadrupedFootPlacementProcessor::SphereRadius' has a wrong offset!");
static_assert(offsetof(UNCIKQuadrupedFootPlacementProcessor, bUseCenterDirectionForComplexCollisionDetection) == 0x000238, "Member 'UNCIKQuadrupedFootPlacementProcessor::bUseCenterDirectionForComplexCollisionDetection' has a wrong offset!");
static_assert(offsetof(UNCIKQuadrupedFootPlacementProcessor, GroundSlopeOffsetAbove) == 0x00023C, "Member 'UNCIKQuadrupedFootPlacementProcessor::GroundSlopeOffsetAbove' has a wrong offset!");
static_assert(offsetof(UNCIKQuadrupedFootPlacementProcessor, GroundSlopeOffsetBelow) == 0x000240, "Member 'UNCIKQuadrupedFootPlacementProcessor::GroundSlopeOffsetBelow' has a wrong offset!");
static_assert(offsetof(UNCIKQuadrupedFootPlacementProcessor, SoleTraceDistanceOffset) == 0x000244, "Member 'UNCIKQuadrupedFootPlacementProcessor::SoleTraceDistanceOffset' has a wrong offset!");

// Class NCIK.NCIKSnakeFootPlacementProcessor
// 0x0208 (0x0390 - 0x0188)
class alignas(0x10) UNCIKSnakeFootPlacementProcessor final : public UNCIKFootPlacementProcessor
{
public:
	float                                         GroundResponsiveness;                              // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisHeightCorrectionInterpSpeed;                 // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowLastBoneCSRotationChange;                    // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     BoneRotationAlpha;                                 // 0x0198(0x0088)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	ECollisionChannel                             Channel;                                           // 0x0220(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSphereShape;                                   // 0x0221(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222[0x2];                                      // 0x0222(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereRadius;                                      // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputRange                            GroundDetectionVerticalRange;                      // 0x0228(0x0008)(Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	float                                         GroundDetectionHorizontalRangeDecreaseSpeed;       // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumGroundDetectionHorizontalSlices;                // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumRaycastsPerGroundDetection;                     // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C[0x154];                                    // 0x023C(0x0154)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NCIKSnakeFootPlacementProcessor">();
	}
	static class UNCIKSnakeFootPlacementProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNCIKSnakeFootPlacementProcessor>();
	}
};
static_assert(alignof(UNCIKSnakeFootPlacementProcessor) == 0x000010, "Wrong alignment on UNCIKSnakeFootPlacementProcessor");
static_assert(sizeof(UNCIKSnakeFootPlacementProcessor) == 0x000390, "Wrong size on UNCIKSnakeFootPlacementProcessor");
static_assert(offsetof(UNCIKSnakeFootPlacementProcessor, GroundResponsiveness) == 0x000188, "Member 'UNCIKSnakeFootPlacementProcessor::GroundResponsiveness' has a wrong offset!");
static_assert(offsetof(UNCIKSnakeFootPlacementProcessor, PelvisHeightCorrectionInterpSpeed) == 0x00018C, "Member 'UNCIKSnakeFootPlacementProcessor::PelvisHeightCorrectionInterpSpeed' has a wrong offset!");
static_assert(offsetof(UNCIKSnakeFootPlacementProcessor, bAllowLastBoneCSRotationChange) == 0x000190, "Member 'UNCIKSnakeFootPlacementProcessor::bAllowLastBoneCSRotationChange' has a wrong offset!");
static_assert(offsetof(UNCIKSnakeFootPlacementProcessor, BoneRotationAlpha) == 0x000198, "Member 'UNCIKSnakeFootPlacementProcessor::BoneRotationAlpha' has a wrong offset!");
static_assert(offsetof(UNCIKSnakeFootPlacementProcessor, Channel) == 0x000220, "Member 'UNCIKSnakeFootPlacementProcessor::Channel' has a wrong offset!");
static_assert(offsetof(UNCIKSnakeFootPlacementProcessor, bUseSphereShape) == 0x000221, "Member 'UNCIKSnakeFootPlacementProcessor::bUseSphereShape' has a wrong offset!");
static_assert(offsetof(UNCIKSnakeFootPlacementProcessor, SphereRadius) == 0x000224, "Member 'UNCIKSnakeFootPlacementProcessor::SphereRadius' has a wrong offset!");
static_assert(offsetof(UNCIKSnakeFootPlacementProcessor, GroundDetectionVerticalRange) == 0x000228, "Member 'UNCIKSnakeFootPlacementProcessor::GroundDetectionVerticalRange' has a wrong offset!");
static_assert(offsetof(UNCIKSnakeFootPlacementProcessor, GroundDetectionHorizontalRangeDecreaseSpeed) == 0x000230, "Member 'UNCIKSnakeFootPlacementProcessor::GroundDetectionHorizontalRangeDecreaseSpeed' has a wrong offset!");
static_assert(offsetof(UNCIKSnakeFootPlacementProcessor, NumGroundDetectionHorizontalSlices) == 0x000234, "Member 'UNCIKSnakeFootPlacementProcessor::NumGroundDetectionHorizontalSlices' has a wrong offset!");
static_assert(offsetof(UNCIKSnakeFootPlacementProcessor, NumRaycastsPerGroundDetection) == 0x000238, "Member 'UNCIKSnakeFootPlacementProcessor::NumRaycastsPerGroundDetection' has a wrong offset!");

// Class NCIK.NCIKSolidFootPlacementProcessor
// 0x0238 (0x03C0 - 0x0188)
class alignas(0x10) UNCIKSolidFootPlacementProcessor final : public UNCIKFootPlacementProcessor
{
public:
	float                                         GroundResponsiveness;                              // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisCorrectionInterpSpeed;                       // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     BodyPitchRotationMultiplier;                       // 0x0190(0x0088)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     BodyRollRotationMultiplier;                        // 0x0218(0x0088)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	ECollisionChannel                             Channel;                                           // 0x02A0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSphereShape;                                   // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideSphereRadius;                             // 0x02A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A3[0x1];                                      // 0x02A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereRadius;                                      // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCenterDirectionForComplexCollisionDetection;   // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SoleTraceDistanceOffset;                           // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B0[0x110];                                    // 0x02B0(0x0110)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NCIKSolidFootPlacementProcessor">();
	}
	static class UNCIKSolidFootPlacementProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNCIKSolidFootPlacementProcessor>();
	}
};
static_assert(alignof(UNCIKSolidFootPlacementProcessor) == 0x000010, "Wrong alignment on UNCIKSolidFootPlacementProcessor");
static_assert(sizeof(UNCIKSolidFootPlacementProcessor) == 0x0003C0, "Wrong size on UNCIKSolidFootPlacementProcessor");
static_assert(offsetof(UNCIKSolidFootPlacementProcessor, GroundResponsiveness) == 0x000188, "Member 'UNCIKSolidFootPlacementProcessor::GroundResponsiveness' has a wrong offset!");
static_assert(offsetof(UNCIKSolidFootPlacementProcessor, PelvisCorrectionInterpSpeed) == 0x00018C, "Member 'UNCIKSolidFootPlacementProcessor::PelvisCorrectionInterpSpeed' has a wrong offset!");
static_assert(offsetof(UNCIKSolidFootPlacementProcessor, BodyPitchRotationMultiplier) == 0x000190, "Member 'UNCIKSolidFootPlacementProcessor::BodyPitchRotationMultiplier' has a wrong offset!");
static_assert(offsetof(UNCIKSolidFootPlacementProcessor, BodyRollRotationMultiplier) == 0x000218, "Member 'UNCIKSolidFootPlacementProcessor::BodyRollRotationMultiplier' has a wrong offset!");
static_assert(offsetof(UNCIKSolidFootPlacementProcessor, Channel) == 0x0002A0, "Member 'UNCIKSolidFootPlacementProcessor::Channel' has a wrong offset!");
static_assert(offsetof(UNCIKSolidFootPlacementProcessor, bUseSphereShape) == 0x0002A1, "Member 'UNCIKSolidFootPlacementProcessor::bUseSphereShape' has a wrong offset!");
static_assert(offsetof(UNCIKSolidFootPlacementProcessor, bOverrideSphereRadius) == 0x0002A2, "Member 'UNCIKSolidFootPlacementProcessor::bOverrideSphereRadius' has a wrong offset!");
static_assert(offsetof(UNCIKSolidFootPlacementProcessor, SphereRadius) == 0x0002A4, "Member 'UNCIKSolidFootPlacementProcessor::SphereRadius' has a wrong offset!");
static_assert(offsetof(UNCIKSolidFootPlacementProcessor, bUseCenterDirectionForComplexCollisionDetection) == 0x0002A8, "Member 'UNCIKSolidFootPlacementProcessor::bUseCenterDirectionForComplexCollisionDetection' has a wrong offset!");
static_assert(offsetof(UNCIKSolidFootPlacementProcessor, SoleTraceDistanceOffset) == 0x0002AC, "Member 'UNCIKSolidFootPlacementProcessor::SoleTraceDistanceOffset' has a wrong offset!");

// Class NCIK.PreviewJointTask
// 0x0088 (0x00B0 - 0x0028)
class UPreviewJointTask final : public UObject
{
public:
	struct FNCIKBoneSocketReference               EndEffector;                                       // 0x0028(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJointTaskTarget                       Target;                                            // 0x0040(0x0070)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PreviewJointTask">();
	}
	static class UPreviewJointTask* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPreviewJointTask>();
	}
};
static_assert(alignof(UPreviewJointTask) == 0x000010, "Wrong alignment on UPreviewJointTask");
static_assert(sizeof(UPreviewJointTask) == 0x0000B0, "Wrong size on UPreviewJointTask");
static_assert(offsetof(UPreviewJointTask, EndEffector) == 0x000028, "Member 'UPreviewJointTask::EndEffector' has a wrong offset!");
static_assert(offsetof(UPreviewJointTask, Target) == 0x000040, "Member 'UPreviewJointTask::Target' has a wrong offset!");

// Class NCIK.NCIKFullBodySolverSettings
// 0x0000 (0x0028 - 0x0028)
class UNCIKFullBodySolverSettings final : public UPreviewSolverSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NCIKFullBodySolverSettings">();
	}
	static class UNCIKFullBodySolverSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNCIKFullBodySolverSettings>();
	}
};
static_assert(alignof(UNCIKFullBodySolverSettings) == 0x000008, "Wrong alignment on UNCIKFullBodySolverSettings");
static_assert(sizeof(UNCIKFullBodySolverSettings) == 0x000028, "Wrong size on UNCIKFullBodySolverSettings");

// Class NCIK.NCIKQuadrupedFootPlacementSolverSettings
// 0x0000 (0x0028 - 0x0028)
class UNCIKQuadrupedFootPlacementSolverSettings final : public UPreviewSolverSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NCIKQuadrupedFootPlacementSolverSettings">();
	}
	static class UNCIKQuadrupedFootPlacementSolverSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNCIKQuadrupedFootPlacementSolverSettings>();
	}
};
static_assert(alignof(UNCIKQuadrupedFootPlacementSolverSettings) == 0x000008, "Wrong alignment on UNCIKQuadrupedFootPlacementSolverSettings");
static_assert(sizeof(UNCIKQuadrupedFootPlacementSolverSettings) == 0x000028, "Wrong size on UNCIKQuadrupedFootPlacementSolverSettings");

// Class NCIK.ProbeComponent
// 0x0010 (0x0220 - 0x0210)
class UProbeComponent final : public USceneComponent
{
public:
	float                                         ProbeOffset;                                       // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReversed;                                         // 0x020C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20D[0x3];                                      // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ProbePosition;                                     // 0x0210(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebugData;                                    // 0x021C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D[0x3];                                      // 0x021D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProbeComponent">();
	}
	static class UProbeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProbeComponent>();
	}
};
static_assert(alignof(UProbeComponent) == 0x000010, "Wrong alignment on UProbeComponent");
static_assert(sizeof(UProbeComponent) == 0x000220, "Wrong size on UProbeComponent");
static_assert(offsetof(UProbeComponent, ProbeOffset) == 0x000208, "Member 'UProbeComponent::ProbeOffset' has a wrong offset!");
static_assert(offsetof(UProbeComponent, bReversed) == 0x00020C, "Member 'UProbeComponent::bReversed' has a wrong offset!");
static_assert(offsetof(UProbeComponent, ProbePosition) == 0x000210, "Member 'UProbeComponent::ProbePosition' has a wrong offset!");
static_assert(offsetof(UProbeComponent, bDrawDebugData) == 0x00021C, "Member 'UProbeComponent::bDrawDebugData' has a wrong offset!");

}

