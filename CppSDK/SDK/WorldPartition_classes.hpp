#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WorldPartition

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "WorldPartition_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class WorldPartition.ActorDescContainer
// 0x0008 (0x0030 - 0x0028)
class UActorDescContainer : public UAssetUserData
{
public:
	class UWorld*                                 World;                                             // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActorDescContainer">();
	}
	static class UActorDescContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorDescContainer>();
	}
};
static_assert(alignof(UActorDescContainer) == 0x000008, "Wrong alignment on UActorDescContainer");
static_assert(sizeof(UActorDescContainer) == 0x000030, "Wrong size on UActorDescContainer");
static_assert(offsetof(UActorDescContainer, World) == 0x000028, "Member 'UActorDescContainer::World' has a wrong offset!");

// Class WorldPartition.WorldPartitionHLOD
// 0x0038 (0x0268 - 0x0230)
class AWorldPartitionHLOD final : public AActor
{
public:
	uint32                                        LODLevel;                                          // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UWorldPartitionRuntimeCell> SourceCell;                                        // 0x0238(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_260[0x8];                                      // 0x0260(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorldPartitionHLOD">();
	}
	static class AWorldPartitionHLOD* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWorldPartitionHLOD>();
	}
};
static_assert(alignof(AWorldPartitionHLOD) == 0x000008, "Wrong alignment on AWorldPartitionHLOD");
static_assert(sizeof(AWorldPartitionHLOD) == 0x000268, "Wrong size on AWorldPartitionHLOD");
static_assert(offsetof(AWorldPartitionHLOD, LODLevel) == 0x000230, "Member 'AWorldPartitionHLOD::LODLevel' has a wrong offset!");
static_assert(offsetof(AWorldPartitionHLOD, SourceCell) == 0x000238, "Member 'AWorldPartitionHLOD::SourceCell' has a wrong offset!");

// Class WorldPartition.WorldPartitionRuntimeCellData
// 0x0000 (0x0028 - 0x0028)
class UWorldPartitionRuntimeCellData : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorldPartitionRuntimeCellData">();
	}
	static class UWorldPartitionRuntimeCellData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionRuntimeCellData>();
	}
};
static_assert(alignof(UWorldPartitionRuntimeCellData) == 0x000008, "Wrong alignment on UWorldPartitionRuntimeCellData");
static_assert(sizeof(UWorldPartitionRuntimeCellData) == 0x000028, "Wrong size on UWorldPartitionRuntimeCellData");

// Class WorldPartition.WorldPartitionRuntimeHLODCellData
// 0x0000 (0x0028 - 0x0028)
class UWorldPartitionRuntimeHLODCellData final : public UWorldPartitionRuntimeCellData
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorldPartitionRuntimeHLODCellData">();
	}
	static class UWorldPartitionRuntimeHLODCellData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionRuntimeHLODCellData>();
	}
};
static_assert(alignof(UWorldPartitionRuntimeHLODCellData) == 0x000008, "Wrong alignment on UWorldPartitionRuntimeHLODCellData");
static_assert(sizeof(UWorldPartitionRuntimeHLODCellData) == 0x000028, "Wrong size on UWorldPartitionRuntimeHLODCellData");

// Class WorldPartition.HLODImposterData
// 0x0018 (0x0040 - 0x0028)
class UHLODImposterData final : public UAssetUserData
{
public:
	class FString                                 MeshId;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SquareSize;                                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HLODImposterData">();
	}
	static class UHLODImposterData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHLODImposterData>();
	}
};
static_assert(alignof(UHLODImposterData) == 0x000008, "Wrong alignment on UHLODImposterData");
static_assert(sizeof(UHLODImposterData) == 0x000040, "Wrong size on UHLODImposterData");
static_assert(offsetof(UHLODImposterData, MeshId) == 0x000028, "Member 'UHLODImposterData::MeshId' has a wrong offset!");
static_assert(offsetof(UHLODImposterData, SquareSize) == 0x000038, "Member 'UHLODImposterData::SquareSize' has a wrong offset!");

// Class WorldPartition.HLODLayer
// 0x0000 (0x0028 - 0x0028)
class UHLODLayer final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HLODLayer">();
	}
	static class UHLODLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHLODLayer>();
	}
};
static_assert(alignof(UHLODLayer) == 0x000008, "Wrong alignment on UHLODLayer");
static_assert(sizeof(UHLODLayer) == 0x000028, "Wrong size on UHLODLayer");

// Class WorldPartition.HLODSubsystem
// 0x0050 (0x0080 - 0x0030)
class UHLODSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x50];                                      // 0x0030(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HLODSubsystem">();
	}
	static class UHLODSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHLODSubsystem>();
	}
};
static_assert(alignof(UHLODSubsystem) == 0x000008, "Wrong alignment on UHLODSubsystem");
static_assert(sizeof(UHLODSubsystem) == 0x000080, "Wrong size on UHLODSubsystem");

// Class WorldPartition.ImposterSpritesGenerator
// 0x0098 (0x02C8 - 0x0230)
class AImposterSpritesGenerator final : public AActor
{
public:
	int32                                         CopyImposterLOD;                                   // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HasBranch;                                         // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewAssetPath;                                      // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_248[0x80];                                     // 0x0248(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool PrepareMaterialToCapture(class AStaticMeshActor* StaticMeshActor);
	void TearDown(class UStaticMesh* ProcMesh);
	void WaitForCompileComplete();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ImposterSpritesGenerator">();
	}
	static class AImposterSpritesGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<AImposterSpritesGenerator>();
	}
};
static_assert(alignof(AImposterSpritesGenerator) == 0x000008, "Wrong alignment on AImposterSpritesGenerator");
static_assert(sizeof(AImposterSpritesGenerator) == 0x0002C8, "Wrong size on AImposterSpritesGenerator");
static_assert(offsetof(AImposterSpritesGenerator, CopyImposterLOD) == 0x000230, "Member 'AImposterSpritesGenerator::CopyImposterLOD' has a wrong offset!");
static_assert(offsetof(AImposterSpritesGenerator, HasBranch) == 0x000234, "Member 'AImposterSpritesGenerator::HasBranch' has a wrong offset!");
static_assert(offsetof(AImposterSpritesGenerator, NewAssetPath) == 0x000238, "Member 'AImposterSpritesGenerator::NewAssetPath' has a wrong offset!");

// Class WorldPartition.WorldPartition
// 0x0150 (0x0180 - 0x0030)
class alignas(0x10) UWorldPartition final : public UActorDescContainer
{
public:
	class UWorldPartitionRuntimeHash*             RuntimeHash;                                       // 0x0030(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorldPartition>         ActualWorldPartition;                              // 0x0038(0x0028)(ExportObject, InstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x40];                                      // 0x0060(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorldPartitionStreamingPolicy*         StreamingPolicy;                                   // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A8[0x10];                                      // 0x00A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWorldPartitionCustomStreaming         CustomStreamings;                                  // 0x00B8(0x0070)(NativeAccessSpecifierPublic)
	bool                                          bRebaseOriginIn3DSpace;                            // 0x0128(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RebaseOriginDistance;                              // 0x012C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            LevelSequenceBindingsPathRemap;                    // 0x0130(0x0050)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorldPartition">();
	}
	static class UWorldPartition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartition>();
	}
};
static_assert(alignof(UWorldPartition) == 0x000010, "Wrong alignment on UWorldPartition");
static_assert(sizeof(UWorldPartition) == 0x000180, "Wrong size on UWorldPartition");
static_assert(offsetof(UWorldPartition, RuntimeHash) == 0x000030, "Member 'UWorldPartition::RuntimeHash' has a wrong offset!");
static_assert(offsetof(UWorldPartition, ActualWorldPartition) == 0x000038, "Member 'UWorldPartition::ActualWorldPartition' has a wrong offset!");
static_assert(offsetof(UWorldPartition, StreamingPolicy) == 0x0000A0, "Member 'UWorldPartition::StreamingPolicy' has a wrong offset!");
static_assert(offsetof(UWorldPartition, CustomStreamings) == 0x0000B8, "Member 'UWorldPartition::CustomStreamings' has a wrong offset!");
static_assert(offsetof(UWorldPartition, bRebaseOriginIn3DSpace) == 0x000128, "Member 'UWorldPartition::bRebaseOriginIn3DSpace' has a wrong offset!");
static_assert(offsetof(UWorldPartition, RebaseOriginDistance) == 0x00012C, "Member 'UWorldPartition::RebaseOriginDistance' has a wrong offset!");
static_assert(offsetof(UWorldPartition, LevelSequenceBindingsPathRemap) == 0x000130, "Member 'UWorldPartition::LevelSequenceBindingsPathRemap' has a wrong offset!");

// Class WorldPartition.WorldPartitionExporter
// 0x0000 (0x0078 - 0x0078)
class UWorldPartitionExporter final : public UExporter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorldPartitionExporter">();
	}
	static class UWorldPartitionExporter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionExporter>();
	}
};
static_assert(alignof(UWorldPartitionExporter) == 0x000008, "Wrong alignment on UWorldPartitionExporter");
static_assert(sizeof(UWorldPartitionExporter) == 0x000078, "Wrong size on UWorldPartitionExporter");

// Class WorldPartition.WorldPartitionLevelStreamingDynamic
// 0x0020 (0x0170 - 0x0150)
class UWorldPartitionLevelStreamingDynamic final : public ULevelStreamingDynamic
{
public:
	bool                                          bShouldBeAlwaysLoaded;                             // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UWorldPartition>         OuterWorldPartition;                               // 0x0154(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15C[0x14];                                     // 0x015C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorldPartitionLevelStreamingDynamic">();
	}
	static class UWorldPartitionLevelStreamingDynamic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionLevelStreamingDynamic>();
	}
};
static_assert(alignof(UWorldPartitionLevelStreamingDynamic) == 0x000010, "Wrong alignment on UWorldPartitionLevelStreamingDynamic");
static_assert(sizeof(UWorldPartitionLevelStreamingDynamic) == 0x000170, "Wrong size on UWorldPartitionLevelStreamingDynamic");
static_assert(offsetof(UWorldPartitionLevelStreamingDynamic, bShouldBeAlwaysLoaded) == 0x000150, "Member 'UWorldPartitionLevelStreamingDynamic::bShouldBeAlwaysLoaded' has a wrong offset!");
static_assert(offsetof(UWorldPartitionLevelStreamingDynamic, OuterWorldPartition) == 0x000154, "Member 'UWorldPartitionLevelStreamingDynamic::OuterWorldPartition' has a wrong offset!");

// Class WorldPartition.WorldPartitionStreamingPolicy
// 0x0170 (0x0198 - 0x0028)
class UWorldPartitionStreamingPolicy : public UObject
{
public:
	uint8                                         Pad_28[0x170];                                     // 0x0028(0x0170)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorldPartitionStreamingPolicy">();
	}
	static class UWorldPartitionStreamingPolicy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionStreamingPolicy>();
	}
};
static_assert(alignof(UWorldPartitionStreamingPolicy) == 0x000008, "Wrong alignment on UWorldPartitionStreamingPolicy");
static_assert(sizeof(UWorldPartitionStreamingPolicy) == 0x000198, "Wrong size on UWorldPartitionStreamingPolicy");

// Class WorldPartition.WorldPartitionLevelStreamingPolicy
// 0x0050 (0x01E8 - 0x0198)
class UWorldPartitionLevelStreamingPolicy final : public UWorldPartitionStreamingPolicy
{
public:
	TMap<class FName, class FName>                SubObjectsToCellRemapping;                         // 0x0198(0x0050)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorldPartitionLevelStreamingPolicy">();
	}
	static class UWorldPartitionLevelStreamingPolicy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionLevelStreamingPolicy>();
	}
};
static_assert(alignof(UWorldPartitionLevelStreamingPolicy) == 0x000008, "Wrong alignment on UWorldPartitionLevelStreamingPolicy");
static_assert(sizeof(UWorldPartitionLevelStreamingPolicy) == 0x0001E8, "Wrong size on UWorldPartitionLevelStreamingPolicy");
static_assert(offsetof(UWorldPartitionLevelStreamingPolicy, SubObjectsToCellRemapping) == 0x000198, "Member 'UWorldPartitionLevelStreamingPolicy::SubObjectsToCellRemapping' has a wrong offset!");

// Class WorldPartition.WorldPartitionRuntimeCell
// 0x0070 (0x0098 - 0x0028)
class UWorldPartitionRuntimeCell : public UObject
{
public:
	bool                                          bIsAlwaysLoaded;                                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TSubclassOf<class UWorldPartitionRuntimeCellData>, class UWorldPartitionRuntimeCellData*> CellDataMap;                                       // 0x0030(0x0050)(NativeAccessSpecifierPrivate)
	TArray<class FName>                           DataLayers;                                        // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bSavedPackageExist;                                // 0x0090(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorldPartitionRuntimeCell">();
	}
	static class UWorldPartitionRuntimeCell* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionRuntimeCell>();
	}
};
static_assert(alignof(UWorldPartitionRuntimeCell) == 0x000008, "Wrong alignment on UWorldPartitionRuntimeCell");
static_assert(sizeof(UWorldPartitionRuntimeCell) == 0x000098, "Wrong size on UWorldPartitionRuntimeCell");
static_assert(offsetof(UWorldPartitionRuntimeCell, bIsAlwaysLoaded) == 0x000028, "Member 'UWorldPartitionRuntimeCell::bIsAlwaysLoaded' has a wrong offset!");
static_assert(offsetof(UWorldPartitionRuntimeCell, CellDataMap) == 0x000030, "Member 'UWorldPartitionRuntimeCell::CellDataMap' has a wrong offset!");
static_assert(offsetof(UWorldPartitionRuntimeCell, DataLayers) == 0x000080, "Member 'UWorldPartitionRuntimeCell::DataLayers' has a wrong offset!");
static_assert(offsetof(UWorldPartitionRuntimeCell, bSavedPackageExist) == 0x000090, "Member 'UWorldPartitionRuntimeCell::bSavedPackageExist' has a wrong offset!");

// Class WorldPartition.WorldPartitionRuntimeHash
// 0x0000 (0x0028 - 0x0028)
class UWorldPartitionRuntimeHash : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorldPartitionRuntimeHash">();
	}
	static class UWorldPartitionRuntimeHash* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionRuntimeHash>();
	}
};
static_assert(alignof(UWorldPartitionRuntimeHash) == 0x000008, "Wrong alignment on UWorldPartitionRuntimeHash");
static_assert(sizeof(UWorldPartitionRuntimeHash) == 0x000028, "Wrong size on UWorldPartitionRuntimeHash");

// Class WorldPartition.WorldPartitionRuntimeSpatialHashCell
// 0x0020 (0x00B8 - 0x0098)
class UWorldPartitionRuntimeSpatialHashCell : public UWorldPartitionRuntimeCell
{
public:
	struct FVector                                Position;                                          // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GridName;                                          // 0x00AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorldPartitionRuntimeSpatialHashCell">();
	}
	static class UWorldPartitionRuntimeSpatialHashCell* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionRuntimeSpatialHashCell>();
	}
};
static_assert(alignof(UWorldPartitionRuntimeSpatialHashCell) == 0x000008, "Wrong alignment on UWorldPartitionRuntimeSpatialHashCell");
static_assert(sizeof(UWorldPartitionRuntimeSpatialHashCell) == 0x0000B8, "Wrong size on UWorldPartitionRuntimeSpatialHashCell");
static_assert(offsetof(UWorldPartitionRuntimeSpatialHashCell, Position) == 0x000098, "Member 'UWorldPartitionRuntimeSpatialHashCell::Position' has a wrong offset!");
static_assert(offsetof(UWorldPartitionRuntimeSpatialHashCell, Level) == 0x0000A4, "Member 'UWorldPartitionRuntimeSpatialHashCell::Level' has a wrong offset!");
static_assert(offsetof(UWorldPartitionRuntimeSpatialHashCell, Priority) == 0x0000A8, "Member 'UWorldPartitionRuntimeSpatialHashCell::Priority' has a wrong offset!");
static_assert(offsetof(UWorldPartitionRuntimeSpatialHashCell, GridName) == 0x0000AC, "Member 'UWorldPartitionRuntimeSpatialHashCell::GridName' has a wrong offset!");

// Class WorldPartition.WorldPartitionRuntimeLevelStreamingCell
// 0x0028 (0x00E0 - 0x00B8)
class UWorldPartitionRuntimeLevelStreamingCell final : public UWorldPartitionRuntimeSpatialHashCell
{
public:
	class UWorldPartitionLevelStreamingDynamic*   LevelStreaming;                                    // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FBox                                   LevelBounds;                                       // 0x00C0(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          bIncludeLandscape;                                 // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLevelHidden();
	void OnLevelShown();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorldPartitionRuntimeLevelStreamingCell">();
	}
	static class UWorldPartitionRuntimeLevelStreamingCell* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionRuntimeLevelStreamingCell>();
	}
};
static_assert(alignof(UWorldPartitionRuntimeLevelStreamingCell) == 0x000008, "Wrong alignment on UWorldPartitionRuntimeLevelStreamingCell");
static_assert(sizeof(UWorldPartitionRuntimeLevelStreamingCell) == 0x0000E0, "Wrong size on UWorldPartitionRuntimeLevelStreamingCell");
static_assert(offsetof(UWorldPartitionRuntimeLevelStreamingCell, LevelStreaming) == 0x0000B8, "Member 'UWorldPartitionRuntimeLevelStreamingCell::LevelStreaming' has a wrong offset!");
static_assert(offsetof(UWorldPartitionRuntimeLevelStreamingCell, LevelBounds) == 0x0000C0, "Member 'UWorldPartitionRuntimeLevelStreamingCell::LevelBounds' has a wrong offset!");
static_assert(offsetof(UWorldPartitionRuntimeLevelStreamingCell, bIncludeLandscape) == 0x0000DC, "Member 'UWorldPartitionRuntimeLevelStreamingCell::bIncludeLandscape' has a wrong offset!");

// Class WorldPartition.SpatialHashRuntimeGridInfo
// 0x0008 (0x0238 - 0x0230)
class ASpatialHashRuntimeGridInfo final : public AInfo
{
public:
	struct FSpatialHashRuntimeGrid                GridSettings;                                      // 0x0230(0x0001)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpatialHashRuntimeGridInfo">();
	}
	static class ASpatialHashRuntimeGridInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpatialHashRuntimeGridInfo>();
	}
};
static_assert(alignof(ASpatialHashRuntimeGridInfo) == 0x000008, "Wrong alignment on ASpatialHashRuntimeGridInfo");
static_assert(sizeof(ASpatialHashRuntimeGridInfo) == 0x000238, "Wrong size on ASpatialHashRuntimeGridInfo");
static_assert(offsetof(ASpatialHashRuntimeGridInfo, GridSettings) == 0x000230, "Member 'ASpatialHashRuntimeGridInfo::GridSettings' has a wrong offset!");

// Class WorldPartition.WorldPartitionRuntimeSpatialHash
// 0x0060 (0x0088 - 0x0028)
class UWorldPartitionRuntimeSpatialHash final : public UWorldPartitionRuntimeHash
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpatialHashStreamingGrid>      StreamingGrids;                                    // 0x0078(0x0010)(ZeroConstructor, NonPIEDuplicateTransient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorldPartitionRuntimeSpatialHash">();
	}
	static class UWorldPartitionRuntimeSpatialHash* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionRuntimeSpatialHash>();
	}
};
static_assert(alignof(UWorldPartitionRuntimeSpatialHash) == 0x000008, "Wrong alignment on UWorldPartitionRuntimeSpatialHash");
static_assert(sizeof(UWorldPartitionRuntimeSpatialHash) == 0x000088, "Wrong size on UWorldPartitionRuntimeSpatialHash");
static_assert(offsetof(UWorldPartitionRuntimeSpatialHash, StreamingGrids) == 0x000078, "Member 'UWorldPartitionRuntimeSpatialHash::StreamingGrids' has a wrong offset!");

// Class WorldPartition.WorldPartitionSettings
// 0x0010 (0x0048 - 0x0038)
class UWorldPartitionSettings final : public UDeveloperSettings
{
public:
	TArray<struct FSoftObjectPath>                InitialCustomStreamingLevels;                      // 0x0038(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorldPartitionSettings">();
	}
	static class UWorldPartitionSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionSettings>();
	}
};
static_assert(alignof(UWorldPartitionSettings) == 0x000008, "Wrong alignment on UWorldPartitionSettings");
static_assert(sizeof(UWorldPartitionSettings) == 0x000048, "Wrong size on UWorldPartitionSettings");
static_assert(offsetof(UWorldPartitionSettings, InitialCustomStreamingLevels) == 0x000038, "Member 'UWorldPartitionSettings::InitialCustomStreamingLevels' has a wrong offset!");

// Class WorldPartition.WorldPartitionSubsystem
// 0x0050 (0x0080 - 0x0030)
class UWorldPartitionSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x38];                                      // 0x0030(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWorldPartition*>                RegisteredWorldPartitions;                         // 0x0068(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsStreamingCompleted(EWorldPartitionRuntimeCellState QueryState, const TArray<struct FWorldPartitionStreamingQuerySource>& QuerySources, bool bExactState) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorldPartitionSubsystem">();
	}
	static class UWorldPartitionSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionSubsystem>();
	}
};
static_assert(alignof(UWorldPartitionSubsystem) == 0x000008, "Wrong alignment on UWorldPartitionSubsystem");
static_assert(sizeof(UWorldPartitionSubsystem) == 0x000080, "Wrong size on UWorldPartitionSubsystem");
static_assert(offsetof(UWorldPartitionSubsystem, RegisteredWorldPartitions) == 0x000068, "Member 'UWorldPartitionSubsystem::RegisteredWorldPartitions' has a wrong offset!");

// Class WorldPartition.ActorContainer
// 0x0050 (0x0078 - 0x0028)
class UActorContainer final : public UObject
{
public:
	TMap<class FName, class AActor*>              Actors;                                            // 0x0028(0x0050)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActorContainer">();
	}
	static class UActorContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorContainer>();
	}
};
static_assert(alignof(UActorContainer) == 0x000008, "Wrong alignment on UActorContainer");
static_assert(sizeof(UActorContainer) == 0x000078, "Wrong size on UActorContainer");
static_assert(offsetof(UActorContainer, Actors) == 0x000028, "Member 'UActorContainer::Actors' has a wrong offset!");

}

