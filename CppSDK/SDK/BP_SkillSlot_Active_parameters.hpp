#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkillSlot_Active

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_SkillSlot_Active.BP_SkillSlot_Active_C.ExecuteUbergraph_BP_SkillSlot_Active
// 0x0008 (0x0008 - 0x0000)
struct BP_SkillSlot_Active_C_ExecuteUbergraph_BP_SkillSlot_Active final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SkillSlot_Active_C_ExecuteUbergraph_BP_SkillSlot_Active) == 0x000004, "Wrong alignment on BP_SkillSlot_Active_C_ExecuteUbergraph_BP_SkillSlot_Active");
static_assert(sizeof(BP_SkillSlot_Active_C_ExecuteUbergraph_BP_SkillSlot_Active) == 0x000008, "Wrong size on BP_SkillSlot_Active_C_ExecuteUbergraph_BP_SkillSlot_Active");
static_assert(offsetof(BP_SkillSlot_Active_C_ExecuteUbergraph_BP_SkillSlot_Active, EntryPoint) == 0x000000, "Member 'BP_SkillSlot_Active_C_ExecuteUbergraph_BP_SkillSlot_Active::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SkillSlot_Active_C_ExecuteUbergraph_BP_SkillSlot_Active, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BP_SkillSlot_Active_C_ExecuteUbergraph_BP_SkillSlot_Active::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function BP_SkillSlot_Active.BP_SkillSlot_Active_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_SkillSlot_Active_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SkillSlot_Active_C_PreConstruct) == 0x000001, "Wrong alignment on BP_SkillSlot_Active_C_PreConstruct");
static_assert(sizeof(BP_SkillSlot_Active_C_PreConstruct) == 0x000001, "Wrong size on BP_SkillSlot_Active_C_PreConstruct");
static_assert(offsetof(BP_SkillSlot_Active_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_SkillSlot_Active_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_SkillSlot_Active.BP_SkillSlot_Active_C.ApplySkillTypeImpl
// 0x0080 (0x0080 - 0x0000)
struct BP_SkillSlot_Active_C_ApplySkillTypeImpl final
{
public:
	class UTexture2D*                             MaskTexture_0;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        BasicBorderSprite;                                 // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        EquipSprite;                                       // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UTexture2D*                             EquipMaskTexture;                                  // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                EquipCustomMaterial;                               // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        DimmedSprite;                                      // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        HoverSprite;                                       // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UTexture2D*                             GradeMask;                                         // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillSlot_Active_C_ApplySkillTypeImpl) == 0x000008, "Wrong alignment on BP_SkillSlot_Active_C_ApplySkillTypeImpl");
static_assert(sizeof(BP_SkillSlot_Active_C_ApplySkillTypeImpl) == 0x000080, "Wrong size on BP_SkillSlot_Active_C_ApplySkillTypeImpl");
static_assert(offsetof(BP_SkillSlot_Active_C_ApplySkillTypeImpl, MaskTexture_0) == 0x000000, "Member 'BP_SkillSlot_Active_C_ApplySkillTypeImpl::MaskTexture_0' has a wrong offset!");
static_assert(offsetof(BP_SkillSlot_Active_C_ApplySkillTypeImpl, BasicBorderSprite) == 0x000008, "Member 'BP_SkillSlot_Active_C_ApplySkillTypeImpl::BasicBorderSprite' has a wrong offset!");
static_assert(offsetof(BP_SkillSlot_Active_C_ApplySkillTypeImpl, EquipSprite) == 0x000020, "Member 'BP_SkillSlot_Active_C_ApplySkillTypeImpl::EquipSprite' has a wrong offset!");
static_assert(offsetof(BP_SkillSlot_Active_C_ApplySkillTypeImpl, EquipMaskTexture) == 0x000038, "Member 'BP_SkillSlot_Active_C_ApplySkillTypeImpl::EquipMaskTexture' has a wrong offset!");
static_assert(offsetof(BP_SkillSlot_Active_C_ApplySkillTypeImpl, EquipCustomMaterial) == 0x000040, "Member 'BP_SkillSlot_Active_C_ApplySkillTypeImpl::EquipCustomMaterial' has a wrong offset!");
static_assert(offsetof(BP_SkillSlot_Active_C_ApplySkillTypeImpl, DimmedSprite) == 0x000048, "Member 'BP_SkillSlot_Active_C_ApplySkillTypeImpl::DimmedSprite' has a wrong offset!");
static_assert(offsetof(BP_SkillSlot_Active_C_ApplySkillTypeImpl, HoverSprite) == 0x000060, "Member 'BP_SkillSlot_Active_C_ApplySkillTypeImpl::HoverSprite' has a wrong offset!");
static_assert(offsetof(BP_SkillSlot_Active_C_ApplySkillTypeImpl, GradeMask) == 0x000078, "Member 'BP_SkillSlot_Active_C_ApplySkillTypeImpl::GradeMask' has a wrong offset!");

// Function BP_SkillSlot_Active.BP_SkillSlot_Active_C.ApplySkillType
// 0x0001 (0x0001 - 0x0000)
struct BP_SkillSlot_Active_C_ApplySkillType final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SkillSlot_Active_C_ApplySkillType) == 0x000001, "Wrong alignment on BP_SkillSlot_Active_C_ApplySkillType");
static_assert(sizeof(BP_SkillSlot_Active_C_ApplySkillType) == 0x000001, "Wrong size on BP_SkillSlot_Active_C_ApplySkillType");
static_assert(offsetof(BP_SkillSlot_Active_C_ApplySkillType, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'BP_SkillSlot_Active_C_ApplySkillType::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

}

