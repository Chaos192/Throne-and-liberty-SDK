#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NCAcoustics

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct NCAcoustics.NCAcousticsLiveModeSettings
// 0x001C (0x001C - 0x0000)
struct FNCAcousticsLiveModeSettings final
{
public:
	float                                         MaxDistPerRayTrace;                                // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAccumDistPerHitTest;                            // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitTestResultLifetimeSec;                          // 0x0008(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountOfHitTestPerFrame;                            // 0x000C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCollisionsPerHitTest;                           // 0x0010(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResultTransitionSec;                               // 0x0014(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0018(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0019(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNCAcousticsLiveModeSettings) == 0x000004, "Wrong alignment on FNCAcousticsLiveModeSettings");
static_assert(sizeof(FNCAcousticsLiveModeSettings) == 0x00001C, "Wrong size on FNCAcousticsLiveModeSettings");
static_assert(offsetof(FNCAcousticsLiveModeSettings, MaxDistPerRayTrace) == 0x000000, "Member 'FNCAcousticsLiveModeSettings::MaxDistPerRayTrace' has a wrong offset!");
static_assert(offsetof(FNCAcousticsLiveModeSettings, MaxAccumDistPerHitTest) == 0x000004, "Member 'FNCAcousticsLiveModeSettings::MaxAccumDistPerHitTest' has a wrong offset!");
static_assert(offsetof(FNCAcousticsLiveModeSettings, HitTestResultLifetimeSec) == 0x000008, "Member 'FNCAcousticsLiveModeSettings::HitTestResultLifetimeSec' has a wrong offset!");
static_assert(offsetof(FNCAcousticsLiveModeSettings, CountOfHitTestPerFrame) == 0x00000C, "Member 'FNCAcousticsLiveModeSettings::CountOfHitTestPerFrame' has a wrong offset!");
static_assert(offsetof(FNCAcousticsLiveModeSettings, MaxCollisionsPerHitTest) == 0x000010, "Member 'FNCAcousticsLiveModeSettings::MaxCollisionsPerHitTest' has a wrong offset!");
static_assert(offsetof(FNCAcousticsLiveModeSettings, ResultTransitionSec) == 0x000014, "Member 'FNCAcousticsLiveModeSettings::ResultTransitionSec' has a wrong offset!");
static_assert(offsetof(FNCAcousticsLiveModeSettings, TraceChannel) == 0x000018, "Member 'FNCAcousticsLiveModeSettings::TraceChannel' has a wrong offset!");
static_assert(offsetof(FNCAcousticsLiveModeSettings, bTraceComplex) == 0x000019, "Member 'FNCAcousticsLiveModeSettings::bTraceComplex' has a wrong offset!");

// ScriptStruct NCAcoustics.NCAcousticsSurfaceGroupSetting
// 0x0028 (0x0028 - 0x0000)
struct FNCAcousticsSurfaceGroupSetting final
{
public:
	class FString                                 GroupName;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Surfaces;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ReflectionRatio;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNCAcousticsSurfaceGroupSetting) == 0x000008, "Wrong alignment on FNCAcousticsSurfaceGroupSetting");
static_assert(sizeof(FNCAcousticsSurfaceGroupSetting) == 0x000028, "Wrong size on FNCAcousticsSurfaceGroupSetting");
static_assert(offsetof(FNCAcousticsSurfaceGroupSetting, GroupName) == 0x000000, "Member 'FNCAcousticsSurfaceGroupSetting::GroupName' has a wrong offset!");
static_assert(offsetof(FNCAcousticsSurfaceGroupSetting, Surfaces) == 0x000010, "Member 'FNCAcousticsSurfaceGroupSetting::Surfaces' has a wrong offset!");
static_assert(offsetof(FNCAcousticsSurfaceGroupSetting, ReflectionRatio) == 0x000020, "Member 'FNCAcousticsSurfaceGroupSetting::ReflectionRatio' has a wrong offset!");

}

