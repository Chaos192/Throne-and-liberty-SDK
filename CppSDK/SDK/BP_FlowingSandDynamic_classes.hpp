#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FlowingSandDynamic

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "NinjaLive_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FlowingSandDynamic.BP_FlowingSandDynamic_C
// 0x00A0 (0x0548 - 0x04A8)
class ABP_FlowingSandDynamic_C final : public ANinjaLive_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_FlowingSandDynamic_C;            // 0x04A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTLLandscapeSamplerComponent*           LandscapeSampler;                                  // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal;                                             // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Extent2;                                           // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         VelocityMapResolutionX;                            // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SimulationMapResolutionX;                          // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             VelocityTexture;                                   // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OutputMaterialInvisible_;                          // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D9[0x7];                                      // 0x04D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BoneNames;                                         // 0x04E0(0x0010)(Edit, BlueprintVisible)
	class UMaterialInterface*                     Material;                                          // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 FluidVelocityDensityMap;                           // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             LandscapeNormalTexture;                            // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DecalDynamicMaterialInstance;                      // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation;                                          // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Tiling;                                            // 0x0514(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightScale;                                       // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DebugVelocityMapReoslutionY;                       // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DebugSimulationMapResolutionY;                     // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VelocityScale;                                     // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DissolveTime;                                      // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Tint;                                              // 0x0530(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LifeTime;                                          // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          PendingDelete;                                     // 0x0544(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_FlowingSandDynamic(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds_0);
	void Refresh();
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void CalcY(float X, const struct FVector2D& Extent, float* Y);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FlowingSandDynamic_C">();
	}
	static class ABP_FlowingSandDynamic_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FlowingSandDynamic_C>();
	}
};
static_assert(alignof(ABP_FlowingSandDynamic_C) == 0x000008, "Wrong alignment on ABP_FlowingSandDynamic_C");
static_assert(sizeof(ABP_FlowingSandDynamic_C) == 0x000548, "Wrong size on ABP_FlowingSandDynamic_C");
static_assert(offsetof(ABP_FlowingSandDynamic_C, UberGraphFrame_BP_FlowingSandDynamic_C) == 0x0004A8, "Member 'ABP_FlowingSandDynamic_C::UberGraphFrame_BP_FlowingSandDynamic_C' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, LandscapeSampler) == 0x0004B0, "Member 'ABP_FlowingSandDynamic_C::LandscapeSampler' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, Decal) == 0x0004B8, "Member 'ABP_FlowingSandDynamic_C::Decal' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, Extent2) == 0x0004C0, "Member 'ABP_FlowingSandDynamic_C::Extent2' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, VelocityMapResolutionX) == 0x0004C8, "Member 'ABP_FlowingSandDynamic_C::VelocityMapResolutionX' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, SimulationMapResolutionX) == 0x0004CC, "Member 'ABP_FlowingSandDynamic_C::SimulationMapResolutionX' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, VelocityTexture) == 0x0004D0, "Member 'ABP_FlowingSandDynamic_C::VelocityTexture' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, OutputMaterialInvisible_) == 0x0004D8, "Member 'ABP_FlowingSandDynamic_C::OutputMaterialInvisible_' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, BoneNames) == 0x0004E0, "Member 'ABP_FlowingSandDynamic_C::BoneNames' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, Material) == 0x0004F0, "Member 'ABP_FlowingSandDynamic_C::Material' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, FluidVelocityDensityMap) == 0x0004F8, "Member 'ABP_FlowingSandDynamic_C::FluidVelocityDensityMap' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, LandscapeNormalTexture) == 0x000500, "Member 'ABP_FlowingSandDynamic_C::LandscapeNormalTexture' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, DecalDynamicMaterialInstance) == 0x000508, "Member 'ABP_FlowingSandDynamic_C::DecalDynamicMaterialInstance' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, Rotation) == 0x000510, "Member 'ABP_FlowingSandDynamic_C::Rotation' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, Tiling) == 0x000514, "Member 'ABP_FlowingSandDynamic_C::Tiling' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, HeightScale) == 0x00051C, "Member 'ABP_FlowingSandDynamic_C::HeightScale' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, DebugVelocityMapReoslutionY) == 0x000520, "Member 'ABP_FlowingSandDynamic_C::DebugVelocityMapReoslutionY' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, DebugSimulationMapResolutionY) == 0x000524, "Member 'ABP_FlowingSandDynamic_C::DebugSimulationMapResolutionY' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, VelocityScale) == 0x000528, "Member 'ABP_FlowingSandDynamic_C::VelocityScale' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, DissolveTime) == 0x00052C, "Member 'ABP_FlowingSandDynamic_C::DissolveTime' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, Tint) == 0x000530, "Member 'ABP_FlowingSandDynamic_C::Tint' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, LifeTime) == 0x000540, "Member 'ABP_FlowingSandDynamic_C::LifeTime' has a wrong offset!");
static_assert(offsetof(ABP_FlowingSandDynamic_C, PendingDelete) == 0x000544, "Member 'ABP_FlowingSandDynamic_C::PendingDelete' has a wrong offset!");

}

