#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NCAcoustics

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "NCAcoustics_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class NCAcoustics.NCAcousticsBakeVolume
// 0x0000 (0x02A8 - 0x02A8)
class ANCAcousticsBakeVolume final : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NCAcousticsBakeVolume">();
	}
	static class ANCAcousticsBakeVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANCAcousticsBakeVolume>();
	}
};
static_assert(alignof(ANCAcousticsBakeVolume) == 0x000008, "Wrong alignment on ANCAcousticsBakeVolume");
static_assert(sizeof(ANCAcousticsBakeVolume) == 0x0002A8, "Wrong size on ANCAcousticsBakeVolume");

// Class NCAcoustics.NCAcousticsData
// 0x0010 (0x0038 - 0x0028)
class UNCAcousticsData final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NCAcousticsData">();
	}
	static class UNCAcousticsData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNCAcousticsData>();
	}
};
static_assert(alignof(UNCAcousticsData) == 0x000008, "Wrong alignment on UNCAcousticsData");
static_assert(sizeof(UNCAcousticsData) == 0x000038, "Wrong size on UNCAcousticsData");

// Class NCAcoustics.NCAcousticsLiveVolume
// 0x0000 (0x02A8 - 0x02A8)
class ANCAcousticsLiveVolume final : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NCAcousticsLiveVolume">();
	}
	static class ANCAcousticsLiveVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANCAcousticsLiveVolume>();
	}
};
static_assert(alignof(ANCAcousticsLiveVolume) == 0x000008, "Wrong alignment on ANCAcousticsLiveVolume");
static_assert(sizeof(ANCAcousticsLiveVolume) == 0x0002A8, "Wrong size on ANCAcousticsLiveVolume");

// Class NCAcoustics.NCAcousticsSettings
// 0x0048 (0x0080 - 0x0038)
class UNCAcousticsSettings final : public UDeveloperSettings
{
public:
	ETraceTypeQuery                               PlaceProbeCollisionTraceType;                      // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0039(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceByObjectTypes;                               // 0x003A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      PlaceProbeCollisionObjectTypes;                    // 0x0040(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FNCAcousticsSurfaceGroupSetting> SurfaceGroupSettings;                              // 0x0050(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FNCAcousticsLiveModeSettings           LiveModeSettings;                                  // 0x0060(0x001C)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NCAcousticsSettings">();
	}
	static class UNCAcousticsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNCAcousticsSettings>();
	}
};
static_assert(alignof(UNCAcousticsSettings) == 0x000008, "Wrong alignment on UNCAcousticsSettings");
static_assert(sizeof(UNCAcousticsSettings) == 0x000080, "Wrong size on UNCAcousticsSettings");
static_assert(offsetof(UNCAcousticsSettings, PlaceProbeCollisionTraceType) == 0x000038, "Member 'UNCAcousticsSettings::PlaceProbeCollisionTraceType' has a wrong offset!");
static_assert(offsetof(UNCAcousticsSettings, bTraceComplex) == 0x000039, "Member 'UNCAcousticsSettings::bTraceComplex' has a wrong offset!");
static_assert(offsetof(UNCAcousticsSettings, bTraceByObjectTypes) == 0x00003A, "Member 'UNCAcousticsSettings::bTraceByObjectTypes' has a wrong offset!");
static_assert(offsetof(UNCAcousticsSettings, PlaceProbeCollisionObjectTypes) == 0x000040, "Member 'UNCAcousticsSettings::PlaceProbeCollisionObjectTypes' has a wrong offset!");
static_assert(offsetof(UNCAcousticsSettings, SurfaceGroupSettings) == 0x000050, "Member 'UNCAcousticsSettings::SurfaceGroupSettings' has a wrong offset!");
static_assert(offsetof(UNCAcousticsSettings, LiveModeSettings) == 0x000060, "Member 'UNCAcousticsSettings::LiveModeSettings' has a wrong offset!");

}

