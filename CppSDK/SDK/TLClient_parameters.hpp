#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TLClient

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "TLScene_structs.hpp"
#include "TLUI_structs.hpp"
#include "TLScheme_structs.hpp"
#include "TLClient_structs.hpp"
#include "UMG_structs.hpp"
#include "Auton_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Slate_structs.hpp"
#include "Azulejo_structs.hpp"
#include "InputCore_structs.hpp"
#include "TLTable_structs.hpp"


namespace SDK::Params
{

// Function TLClient.TLUserWidget.AutonAreaDidNavigation
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidget_AutonAreaDidNavigation final
{
public:
	class UWidget*                                AreaWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisit;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLAutonNavigation                            ByNavigation;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWindowStackChanged;                               // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidget_AutonAreaDidNavigation) == 0x000008, "Wrong alignment on TLUserWidget_AutonAreaDidNavigation");
static_assert(sizeof(TLUserWidget_AutonAreaDidNavigation) == 0x000010, "Wrong size on TLUserWidget_AutonAreaDidNavigation");
static_assert(offsetof(TLUserWidget_AutonAreaDidNavigation, AreaWidget) == 0x000000, "Member 'TLUserWidget_AutonAreaDidNavigation::AreaWidget' has a wrong offset!");
static_assert(offsetof(TLUserWidget_AutonAreaDidNavigation, bVisit) == 0x000008, "Member 'TLUserWidget_AutonAreaDidNavigation::bVisit' has a wrong offset!");
static_assert(offsetof(TLUserWidget_AutonAreaDidNavigation, ByNavigation) == 0x000009, "Member 'TLUserWidget_AutonAreaDidNavigation::ByNavigation' has a wrong offset!");
static_assert(offsetof(TLUserWidget_AutonAreaDidNavigation, bWindowStackChanged) == 0x00000A, "Member 'TLUserWidget_AutonAreaDidNavigation::bWindowStackChanged' has a wrong offset!");

// Function TLClient.TLUserWidget.ChangeHideAnimation
// 0x000C (0x000C - 0x0000)
struct TLUserWidget_ChangeHideAnimation final
{
public:
	class FName                                   InAnimName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInClearWithNameNone;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidget_ChangeHideAnimation) == 0x000004, "Wrong alignment on TLUserWidget_ChangeHideAnimation");
static_assert(sizeof(TLUserWidget_ChangeHideAnimation) == 0x00000C, "Wrong size on TLUserWidget_ChangeHideAnimation");
static_assert(offsetof(TLUserWidget_ChangeHideAnimation, InAnimName) == 0x000000, "Member 'TLUserWidget_ChangeHideAnimation::InAnimName' has a wrong offset!");
static_assert(offsetof(TLUserWidget_ChangeHideAnimation, bInClearWithNameNone) == 0x000008, "Member 'TLUserWidget_ChangeHideAnimation::bInClearWithNameNone' has a wrong offset!");
static_assert(offsetof(TLUserWidget_ChangeHideAnimation, ReturnValue) == 0x000009, "Member 'TLUserWidget_ChangeHideAnimation::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidget.ChangeShowAnimation
// 0x000C (0x000C - 0x0000)
struct TLUserWidget_ChangeShowAnimation final
{
public:
	class FName                                   InAnimName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInClearWithNameNone;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidget_ChangeShowAnimation) == 0x000004, "Wrong alignment on TLUserWidget_ChangeShowAnimation");
static_assert(sizeof(TLUserWidget_ChangeShowAnimation) == 0x00000C, "Wrong size on TLUserWidget_ChangeShowAnimation");
static_assert(offsetof(TLUserWidget_ChangeShowAnimation, InAnimName) == 0x000000, "Member 'TLUserWidget_ChangeShowAnimation::InAnimName' has a wrong offset!");
static_assert(offsetof(TLUserWidget_ChangeShowAnimation, bInClearWithNameNone) == 0x000008, "Member 'TLUserWidget_ChangeShowAnimation::bInClearWithNameNone' has a wrong offset!");
static_assert(offsetof(TLUserWidget_ChangeShowAnimation, ReturnValue) == 0x000009, "Member 'TLUserWidget_ChangeShowAnimation::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidget.HandlePressed
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidget_HandlePressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidget_HandlePressed) == 0x000001, "Wrong alignment on TLUserWidget_HandlePressed");
static_assert(sizeof(TLUserWidget_HandlePressed) == 0x000001, "Wrong size on TLUserWidget_HandlePressed");
static_assert(offsetof(TLUserWidget_HandlePressed, ReturnValue) == 0x000000, "Member 'TLUserWidget_HandlePressed::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidget.HandleReleased
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidget_HandleReleased final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidget_HandleReleased) == 0x000001, "Wrong alignment on TLUserWidget_HandleReleased");
static_assert(sizeof(TLUserWidget_HandleReleased) == 0x000001, "Wrong size on TLUserWidget_HandleReleased");
static_assert(offsetof(TLUserWidget_HandleReleased, ReturnValue) == 0x000000, "Member 'TLUserWidget_HandleReleased::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidget.HideByHiddenState
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidget_HideByHiddenState final
{
public:
	bool                                          bInPlayHideAnim;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPlayHideAnimManually;                           // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidget_HideByHiddenState) == 0x000001, "Wrong alignment on TLUserWidget_HideByHiddenState");
static_assert(sizeof(TLUserWidget_HideByHiddenState) == 0x000002, "Wrong size on TLUserWidget_HideByHiddenState");
static_assert(offsetof(TLUserWidget_HideByHiddenState, bInPlayHideAnim) == 0x000000, "Member 'TLUserWidget_HideByHiddenState::bInPlayHideAnim' has a wrong offset!");
static_assert(offsetof(TLUserWidget_HideByHiddenState, bInPlayHideAnimManually) == 0x000001, "Member 'TLUserWidget_HideByHiddenState::bInPlayHideAnimManually' has a wrong offset!");

// Function TLClient.TLUserWidget.InitVisibility
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidget_InitVisibility final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidget_InitVisibility) == 0x000001, "Wrong alignment on TLUserWidget_InitVisibility");
static_assert(sizeof(TLUserWidget_InitVisibility) == 0x000001, "Wrong size on TLUserWidget_InitVisibility");
static_assert(offsetof(TLUserWidget_InitVisibility, bInVisible) == 0x000000, "Member 'TLUserWidget_InitVisibility::bInVisible' has a wrong offset!");

// Function TLClient.TLUserWidget.IsShow
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidget_IsShow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidget_IsShow) == 0x000001, "Wrong alignment on TLUserWidget_IsShow");
static_assert(sizeof(TLUserWidget_IsShow) == 0x000001, "Wrong size on TLUserWidget_IsShow");
static_assert(offsetof(TLUserWidget_IsShow, ReturnValue) == 0x000000, "Member 'TLUserWidget_IsShow::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidget.OnChangeVisibility
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidget_OnChangeVisibility final
{
public:
	bool                                          bInVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidget_OnChangeVisibility) == 0x000001, "Wrong alignment on TLUserWidget_OnChangeVisibility");
static_assert(sizeof(TLUserWidget_OnChangeVisibility) == 0x000001, "Wrong size on TLUserWidget_OnChangeVisibility");
static_assert(offsetof(TLUserWidget_OnChangeVisibility, bInVisibility) == 0x000000, "Member 'TLUserWidget_OnChangeVisibility::bInVisibility' has a wrong offset!");

// Function TLClient.TLUserWidget.OnHide
// 0x00B8 (0x00B8 - 0x0000)
struct TLUserWidget_OnHide final
{
public:
	struct FEventReply                            ReturnValue;                                       // 0x0000(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidget_OnHide) == 0x000008, "Wrong alignment on TLUserWidget_OnHide");
static_assert(sizeof(TLUserWidget_OnHide) == 0x0000B8, "Wrong size on TLUserWidget_OnHide");
static_assert(offsetof(TLUserWidget_OnHide, ReturnValue) == 0x000000, "Member 'TLUserWidget_OnHide::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidget.OnShow
// 0x00B8 (0x00B8 - 0x0000)
struct TLUserWidget_OnShow final
{
public:
	struct FEventReply                            ReturnValue;                                       // 0x0000(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidget_OnShow) == 0x000008, "Wrong alignment on TLUserWidget_OnShow");
static_assert(sizeof(TLUserWidget_OnShow) == 0x0000B8, "Wrong size on TLUserWidget_OnShow");
static_assert(offsetof(TLUserWidget_OnShow, ReturnValue) == 0x000000, "Member 'TLUserWidget_OnShow::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidget.OnUpdateNotification
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidget_OnUpdateNotification final
{
public:
	bool                                          InIsOn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidget_OnUpdateNotification) == 0x000001, "Wrong alignment on TLUserWidget_OnUpdateNotification");
static_assert(sizeof(TLUserWidget_OnUpdateNotification) == 0x000001, "Wrong size on TLUserWidget_OnUpdateNotification");
static_assert(offsetof(TLUserWidget_OnUpdateNotification, InIsOn) == 0x000000, "Member 'TLUserWidget_OnUpdateNotification::InIsOn' has a wrong offset!");

// Function TLClient.TLUserWidget.PlayAndStopAnimationAtEnd
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidget_PlayAndStopAnimationAtEnd final
{
public:
	class UWidgetAnimation*                       Animation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidget_PlayAndStopAnimationAtEnd) == 0x000008, "Wrong alignment on TLUserWidget_PlayAndStopAnimationAtEnd");
static_assert(sizeof(TLUserWidget_PlayAndStopAnimationAtEnd) == 0x000008, "Wrong size on TLUserWidget_PlayAndStopAnimationAtEnd");
static_assert(offsetof(TLUserWidget_PlayAndStopAnimationAtEnd, Animation) == 0x000000, "Member 'TLUserWidget_PlayAndStopAnimationAtEnd::Animation' has a wrong offset!");

// Function TLClient.TLUserWidget.PlayAnimationByName
// 0x000C (0x000C - 0x0000)
struct TLUserWidget_PlayAnimationByName final
{
public:
	class FName                                   AnimationName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidget_PlayAnimationByName) == 0x000004, "Wrong alignment on TLUserWidget_PlayAnimationByName");
static_assert(sizeof(TLUserWidget_PlayAnimationByName) == 0x00000C, "Wrong size on TLUserWidget_PlayAnimationByName");
static_assert(offsetof(TLUserWidget_PlayAnimationByName, AnimationName) == 0x000000, "Member 'TLUserWidget_PlayAnimationByName::AnimationName' has a wrong offset!");
static_assert(offsetof(TLUserWidget_PlayAnimationByName, ReturnValue) == 0x000008, "Member 'TLUserWidget_PlayAnimationByName::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidget.PlayAnimationForwardInUserWidget
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidget_PlayAnimationForwardInUserWidget final
{
public:
	class UWidgetAnimation*                       InAnim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidget_PlayAnimationForwardInUserWidget) == 0x000008, "Wrong alignment on TLUserWidget_PlayAnimationForwardInUserWidget");
static_assert(sizeof(TLUserWidget_PlayAnimationForwardInUserWidget) == 0x000010, "Wrong size on TLUserWidget_PlayAnimationForwardInUserWidget");
static_assert(offsetof(TLUserWidget_PlayAnimationForwardInUserWidget, InAnim) == 0x000000, "Member 'TLUserWidget_PlayAnimationForwardInUserWidget::InAnim' has a wrong offset!");
static_assert(offsetof(TLUserWidget_PlayAnimationForwardInUserWidget, ReturnValue) == 0x000008, "Member 'TLUserWidget_PlayAnimationForwardInUserWidget::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidget.PlayAnimationInUserWidget
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidget_PlayAnimationInUserWidget final
{
public:
	class UWidgetAnimation*                       InAnim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidget_PlayAnimationInUserWidget) == 0x000008, "Wrong alignment on TLUserWidget_PlayAnimationInUserWidget");
static_assert(sizeof(TLUserWidget_PlayAnimationInUserWidget) == 0x000010, "Wrong size on TLUserWidget_PlayAnimationInUserWidget");
static_assert(offsetof(TLUserWidget_PlayAnimationInUserWidget, InAnim) == 0x000000, "Member 'TLUserWidget_PlayAnimationInUserWidget::InAnim' has a wrong offset!");
static_assert(offsetof(TLUserWidget_PlayAnimationInUserWidget, ReturnValue) == 0x000008, "Member 'TLUserWidget_PlayAnimationInUserWidget::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidget.PlayAnimationInUserWidget1
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidget_PlayAnimationInUserWidget1 final
{
public:
	class UWidgetAnimation*                       InAnim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAtTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidget_PlayAnimationInUserWidget1) == 0x000008, "Wrong alignment on TLUserWidget_PlayAnimationInUserWidget1");
static_assert(sizeof(TLUserWidget_PlayAnimationInUserWidget1) == 0x000018, "Wrong size on TLUserWidget_PlayAnimationInUserWidget1");
static_assert(offsetof(TLUserWidget_PlayAnimationInUserWidget1, InAnim) == 0x000000, "Member 'TLUserWidget_PlayAnimationInUserWidget1::InAnim' has a wrong offset!");
static_assert(offsetof(TLUserWidget_PlayAnimationInUserWidget1, StartAtTime) == 0x000008, "Member 'TLUserWidget_PlayAnimationInUserWidget1::StartAtTime' has a wrong offset!");
static_assert(offsetof(TLUserWidget_PlayAnimationInUserWidget1, NumLoopsToPlay) == 0x00000C, "Member 'TLUserWidget_PlayAnimationInUserWidget1::NumLoopsToPlay' has a wrong offset!");
static_assert(offsetof(TLUserWidget_PlayAnimationInUserWidget1, PlayMode) == 0x000010, "Member 'TLUserWidget_PlayAnimationInUserWidget1::PlayMode' has a wrong offset!");
static_assert(offsetof(TLUserWidget_PlayAnimationInUserWidget1, ReturnValue) == 0x000011, "Member 'TLUserWidget_PlayAnimationInUserWidget1::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidget.PlayAnimationLoopInUserWidget
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidget_PlayAnimationLoopInUserWidget final
{
public:
	class UWidgetAnimation*                       InAnim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidget_PlayAnimationLoopInUserWidget) == 0x000008, "Wrong alignment on TLUserWidget_PlayAnimationLoopInUserWidget");
static_assert(sizeof(TLUserWidget_PlayAnimationLoopInUserWidget) == 0x000010, "Wrong size on TLUserWidget_PlayAnimationLoopInUserWidget");
static_assert(offsetof(TLUserWidget_PlayAnimationLoopInUserWidget, InAnim) == 0x000000, "Member 'TLUserWidget_PlayAnimationLoopInUserWidget::InAnim' has a wrong offset!");
static_assert(offsetof(TLUserWidget_PlayAnimationLoopInUserWidget, ReturnValue) == 0x000008, "Member 'TLUserWidget_PlayAnimationLoopInUserWidget::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidget.PlayAnimationReverseInUserWidget
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidget_PlayAnimationReverseInUserWidget final
{
public:
	class UWidgetAnimation*                       InAnim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidget_PlayAnimationReverseInUserWidget) == 0x000008, "Wrong alignment on TLUserWidget_PlayAnimationReverseInUserWidget");
static_assert(sizeof(TLUserWidget_PlayAnimationReverseInUserWidget) == 0x000010, "Wrong size on TLUserWidget_PlayAnimationReverseInUserWidget");
static_assert(offsetof(TLUserWidget_PlayAnimationReverseInUserWidget, InAnim) == 0x000000, "Member 'TLUserWidget_PlayAnimationReverseInUserWidget::InAnim' has a wrong offset!");
static_assert(offsetof(TLUserWidget_PlayAnimationReverseInUserWidget, ReturnValue) == 0x000008, "Member 'TLUserWidget_PlayAnimationReverseInUserWidget::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidget.PlayAnimationWithOptions
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidget_PlayAnimationWithOptions final
{
public:
	class UWidgetAnimation*                       Animation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseReverse;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidget_PlayAnimationWithOptions) == 0x000008, "Wrong alignment on TLUserWidget_PlayAnimationWithOptions");
static_assert(sizeof(TLUserWidget_PlayAnimationWithOptions) == 0x000010, "Wrong size on TLUserWidget_PlayAnimationWithOptions");
static_assert(offsetof(TLUserWidget_PlayAnimationWithOptions, Animation) == 0x000000, "Member 'TLUserWidget_PlayAnimationWithOptions::Animation' has a wrong offset!");
static_assert(offsetof(TLUserWidget_PlayAnimationWithOptions, bUseReverse) == 0x000008, "Member 'TLUserWidget_PlayAnimationWithOptions::bUseReverse' has a wrong offset!");

// Function TLClient.TLUserWidget.PlayReverseAndStopAnimationAtEnd
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidget_PlayReverseAndStopAnimationAtEnd final
{
public:
	class UWidgetAnimation*                       Animation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidget_PlayReverseAndStopAnimationAtEnd) == 0x000008, "Wrong alignment on TLUserWidget_PlayReverseAndStopAnimationAtEnd");
static_assert(sizeof(TLUserWidget_PlayReverseAndStopAnimationAtEnd) == 0x000008, "Wrong size on TLUserWidget_PlayReverseAndStopAnimationAtEnd");
static_assert(offsetof(TLUserWidget_PlayReverseAndStopAnimationAtEnd, Animation) == 0x000000, "Member 'TLUserWidget_PlayReverseAndStopAnimationAtEnd::Animation' has a wrong offset!");

// Function TLClient.TLUserWidget.PlayUISound
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidget_PlayUISound final
{
public:
	class UTLSoundEvent*                          InSoundEvent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidget_PlayUISound) == 0x000008, "Wrong alignment on TLUserWidget_PlayUISound");
static_assert(sizeof(TLUserWidget_PlayUISound) == 0x000008, "Wrong size on TLUserWidget_PlayUISound");
static_assert(offsetof(TLUserWidget_PlayUISound, InSoundEvent) == 0x000000, "Member 'TLUserWidget_PlayUISound::InSoundEvent' has a wrong offset!");

// Function TLClient.TLUserWidget.SetAdvancedUIModeByModel
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidget_SetAdvancedUIModeByModel final
{
public:
	bool                                          bInAdvancedUIModeByModel;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInForce;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidget_SetAdvancedUIModeByModel) == 0x000001, "Wrong alignment on TLUserWidget_SetAdvancedUIModeByModel");
static_assert(sizeof(TLUserWidget_SetAdvancedUIModeByModel) == 0x000002, "Wrong size on TLUserWidget_SetAdvancedUIModeByModel");
static_assert(offsetof(TLUserWidget_SetAdvancedUIModeByModel, bInAdvancedUIModeByModel) == 0x000000, "Member 'TLUserWidget_SetAdvancedUIModeByModel::bInAdvancedUIModeByModel' has a wrong offset!");
static_assert(offsetof(TLUserWidget_SetAdvancedUIModeByModel, bInForce) == 0x000001, "Member 'TLUserWidget_SetAdvancedUIModeByModel::bInForce' has a wrong offset!");

// Function TLClient.TLUserWidget.SetHiddenState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidget_SetHiddenState final
{
public:
	bool                                          bInHiddenState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidget_SetHiddenState) == 0x000001, "Wrong alignment on TLUserWidget_SetHiddenState");
static_assert(sizeof(TLUserWidget_SetHiddenState) == 0x000001, "Wrong size on TLUserWidget_SetHiddenState");
static_assert(offsetof(TLUserWidget_SetHiddenState, bInHiddenState) == 0x000000, "Member 'TLUserWidget_SetHiddenState::bInHiddenState' has a wrong offset!");

// Function TLClient.TLUserWidget.SetNotification
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidget_SetNotification final
{
public:
	bool                                          bInNotification;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidget_SetNotification) == 0x000001, "Wrong alignment on TLUserWidget_SetNotification");
static_assert(sizeof(TLUserWidget_SetNotification) == 0x000001, "Wrong size on TLUserWidget_SetNotification");
static_assert(offsetof(TLUserWidget_SetNotification, bInNotification) == 0x000000, "Member 'TLUserWidget_SetNotification::bInNotification' has a wrong offset!");

// Function TLClient.TLUserWidget.SetTextTooltipId
// 0x000C (0x000C - 0x0000)
struct TLUserWidget_SetTextTooltipId final
{
public:
	class FName                                   InTextTooltipId;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsImmediately;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidget_SetTextTooltipId) == 0x000004, "Wrong alignment on TLUserWidget_SetTextTooltipId");
static_assert(sizeof(TLUserWidget_SetTextTooltipId) == 0x00000C, "Wrong size on TLUserWidget_SetTextTooltipId");
static_assert(offsetof(TLUserWidget_SetTextTooltipId, InTextTooltipId) == 0x000000, "Member 'TLUserWidget_SetTextTooltipId::InTextTooltipId' has a wrong offset!");
static_assert(offsetof(TLUserWidget_SetTextTooltipId, IsImmediately) == 0x000008, "Member 'TLUserWidget_SetTextTooltipId::IsImmediately' has a wrong offset!");

// Function TLClient.TLUserWidget.SetTooltipAnchorTarget
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidget_SetTooltipAnchorTarget final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidget_SetTooltipAnchorTarget) == 0x000008, "Wrong alignment on TLUserWidget_SetTooltipAnchorTarget");
static_assert(sizeof(TLUserWidget_SetTooltipAnchorTarget) == 0x000008, "Wrong size on TLUserWidget_SetTooltipAnchorTarget");
static_assert(offsetof(TLUserWidget_SetTooltipAnchorTarget, InWidget) == 0x000000, "Member 'TLUserWidget_SetTooltipAnchorTarget::InWidget' has a wrong offset!");

// Function TLClient.TLUserWidget.SetTooltipBoundary
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidget_SetTooltipBoundary final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFlags;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidget_SetTooltipBoundary) == 0x000008, "Wrong alignment on TLUserWidget_SetTooltipBoundary");
static_assert(sizeof(TLUserWidget_SetTooltipBoundary) == 0x000010, "Wrong size on TLUserWidget_SetTooltipBoundary");
static_assert(offsetof(TLUserWidget_SetTooltipBoundary, InWidget) == 0x000000, "Member 'TLUserWidget_SetTooltipBoundary::InWidget' has a wrong offset!");
static_assert(offsetof(TLUserWidget_SetTooltipBoundary, InFlags) == 0x000008, "Member 'TLUserWidget_SetTooltipBoundary::InFlags' has a wrong offset!");

// Function TLClient.TLUserWidget.ShowWithValue
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidget_ShowWithValue final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidget_ShowWithValue) == 0x000001, "Wrong alignment on TLUserWidget_ShowWithValue");
static_assert(sizeof(TLUserWidget_ShowWithValue) == 0x000001, "Wrong size on TLUserWidget_ShowWithValue");
static_assert(offsetof(TLUserWidget_ShowWithValue, InVisible) == 0x000000, "Member 'TLUserWidget_ShowWithValue::InVisible' has a wrong offset!");

// Function TLClient.TLUserWidget.StopAnimationAtEnd
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidget_StopAnimationAtEnd final
{
public:
	class UWidgetAnimation*                       Animation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidget_StopAnimationAtEnd) == 0x000008, "Wrong alignment on TLUserWidget_StopAnimationAtEnd");
static_assert(sizeof(TLUserWidget_StopAnimationAtEnd) == 0x000008, "Wrong size on TLUserWidget_StopAnimationAtEnd");
static_assert(offsetof(TLUserWidget_StopAnimationAtEnd, Animation) == 0x000000, "Member 'TLUserWidget_StopAnimationAtEnd::Animation' has a wrong offset!");

// Function TLClient.TLUserWidget.StopAnimationByName
// 0x000C (0x000C - 0x0000)
struct TLUserWidget_StopAnimationByName final
{
public:
	class FName                                   AnimationName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidget_StopAnimationByName) == 0x000004, "Wrong alignment on TLUserWidget_StopAnimationByName");
static_assert(sizeof(TLUserWidget_StopAnimationByName) == 0x00000C, "Wrong size on TLUserWidget_StopAnimationByName");
static_assert(offsetof(TLUserWidget_StopAnimationByName, AnimationName) == 0x000000, "Member 'TLUserWidget_StopAnimationByName::AnimationName' has a wrong offset!");
static_assert(offsetof(TLUserWidget_StopAnimationByName, ReturnValue) == 0x000008, "Member 'TLUserWidget_StopAnimationByName::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidget.StopAnimationInUserWidget
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidget_StopAnimationInUserWidget final
{
public:
	const class UWidgetAnimation*                 InAnim;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidget_StopAnimationInUserWidget) == 0x000008, "Wrong alignment on TLUserWidget_StopAnimationInUserWidget");
static_assert(sizeof(TLUserWidget_StopAnimationInUserWidget) == 0x000010, "Wrong size on TLUserWidget_StopAnimationInUserWidget");
static_assert(offsetof(TLUserWidget_StopAnimationInUserWidget, InAnim) == 0x000000, "Member 'TLUserWidget_StopAnimationInUserWidget::InAnim' has a wrong offset!");
static_assert(offsetof(TLUserWidget_StopAnimationInUserWidget, ReturnValue) == 0x000008, "Member 'TLUserWidget_StopAnimationInUserWidget::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidget.GetNotification
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidget_GetNotification final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidget_GetNotification) == 0x000001, "Wrong alignment on TLUserWidget_GetNotification");
static_assert(sizeof(TLUserWidget_GetNotification) == 0x000001, "Wrong size on TLUserWidget_GetNotification");
static_assert(offsetof(TLUserWidget_GetNotification, ReturnValue) == 0x000000, "Member 'TLUserWidget_GetNotification::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidget.IsHiddenState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidget_IsHiddenState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidget_IsHiddenState) == 0x000001, "Wrong alignment on TLUserWidget_IsHiddenState");
static_assert(sizeof(TLUserWidget_IsHiddenState) == 0x000001, "Wrong size on TLUserWidget_IsHiddenState");
static_assert(offsetof(TLUserWidget_IsHiddenState, ReturnValue) == 0x000000, "Member 'TLUserWidget_IsHiddenState::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetView.GetDataContext
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetView_GetDataContext final
{
public:
	class UTLViewModelBase*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetView_GetDataContext) == 0x000008, "Wrong alignment on TLUserWidgetView_GetDataContext");
static_assert(sizeof(TLUserWidgetView_GetDataContext) == 0x000008, "Wrong size on TLUserWidgetView_GetDataContext");
static_assert(offsetof(TLUserWidgetView_GetDataContext, ReturnValue) == 0x000000, "Member 'TLUserWidgetView_GetDataContext::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetView.GetViewModelClass
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetView_GetViewModelClass final
{
public:
	TSubclassOf<class UTLViewModelImpl>           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetView_GetViewModelClass) == 0x000008, "Wrong alignment on TLUserWidgetView_GetViewModelClass");
static_assert(sizeof(TLUserWidgetView_GetViewModelClass) == 0x000008, "Wrong size on TLUserWidgetView_GetViewModelClass");
static_assert(offsetof(TLUserWidgetView_GetViewModelClass, ReturnValue) == 0x000000, "Member 'TLUserWidgetView_GetViewModelClass::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetButton.SetButtonStyleByTableKey
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetButton_SetButtonStyleByTableKey final
{
public:
	class FName                                   InKey;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetButton_SetButtonStyleByTableKey) == 0x000004, "Wrong alignment on TLUserWidgetButton_SetButtonStyleByTableKey");
static_assert(sizeof(TLUserWidgetButton_SetButtonStyleByTableKey) == 0x000008, "Wrong size on TLUserWidgetButton_SetButtonStyleByTableKey");
static_assert(offsetof(TLUserWidgetButton_SetButtonStyleByTableKey, InKey) == 0x000000, "Member 'TLUserWidgetButton_SetButtonStyleByTableKey::InKey' has a wrong offset!");

// Function TLClient.TLUserWidgetButton.SetHoverIconFromSoftObjectPath
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetButton_SetHoverIconFromSoftObjectPath final
{
public:
	struct FSoftObjectPath                        Path;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAsyncLoad;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetButton_SetHoverIconFromSoftObjectPath) == 0x000008, "Wrong alignment on TLUserWidgetButton_SetHoverIconFromSoftObjectPath");
static_assert(sizeof(TLUserWidgetButton_SetHoverIconFromSoftObjectPath) == 0x000020, "Wrong size on TLUserWidgetButton_SetHoverIconFromSoftObjectPath");
static_assert(offsetof(TLUserWidgetButton_SetHoverIconFromSoftObjectPath, Path) == 0x000000, "Member 'TLUserWidgetButton_SetHoverIconFromSoftObjectPath::Path' has a wrong offset!");
static_assert(offsetof(TLUserWidgetButton_SetHoverIconFromSoftObjectPath, bInAsyncLoad) == 0x000018, "Member 'TLUserWidgetButton_SetHoverIconFromSoftObjectPath::bInAsyncLoad' has a wrong offset!");
static_assert(offsetof(TLUserWidgetButton_SetHoverIconFromSoftObjectPath, bMatchSize) == 0x000019, "Member 'TLUserWidgetButton_SetHoverIconFromSoftObjectPath::bMatchSize' has a wrong offset!");

// Function TLClient.TLUserWidgetButton.SetIconFromSoftObjectPath
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetButton_SetIconFromSoftObjectPath final
{
public:
	struct FSoftObjectPath                        Path;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAsyncLoad;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetButton_SetIconFromSoftObjectPath) == 0x000008, "Wrong alignment on TLUserWidgetButton_SetIconFromSoftObjectPath");
static_assert(sizeof(TLUserWidgetButton_SetIconFromSoftObjectPath) == 0x000020, "Wrong size on TLUserWidgetButton_SetIconFromSoftObjectPath");
static_assert(offsetof(TLUserWidgetButton_SetIconFromSoftObjectPath, Path) == 0x000000, "Member 'TLUserWidgetButton_SetIconFromSoftObjectPath::Path' has a wrong offset!");
static_assert(offsetof(TLUserWidgetButton_SetIconFromSoftObjectPath, bInAsyncLoad) == 0x000018, "Member 'TLUserWidgetButton_SetIconFromSoftObjectPath::bInAsyncLoad' has a wrong offset!");
static_assert(offsetof(TLUserWidgetButton_SetIconFromSoftObjectPath, bMatchSize) == 0x000019, "Member 'TLUserWidgetButton_SetIconFromSoftObjectPath::bMatchSize' has a wrong offset!");

// DelegateFunction TLClient.TLUserWidgetButton.SetSizeDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetButton_SetSizeDelegate__DelegateSignature final
{
public:
	float                                         InWidgth;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHeight;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetButton_SetSizeDelegate__DelegateSignature) == 0x000004, "Wrong alignment on TLUserWidgetButton_SetSizeDelegate__DelegateSignature");
static_assert(sizeof(TLUserWidgetButton_SetSizeDelegate__DelegateSignature) == 0x000008, "Wrong size on TLUserWidgetButton_SetSizeDelegate__DelegateSignature");
static_assert(offsetof(TLUserWidgetButton_SetSizeDelegate__DelegateSignature, InWidgth) == 0x000000, "Member 'TLUserWidgetButton_SetSizeDelegate__DelegateSignature::InWidgth' has a wrong offset!");
static_assert(offsetof(TLUserWidgetButton_SetSizeDelegate__DelegateSignature, InHeight) == 0x000004, "Member 'TLUserWidgetButton_SetSizeDelegate__DelegateSignature::InHeight' has a wrong offset!");

// Function TLClient.TLUserWidgetButton.SetText
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetButton_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetButton_SetText) == 0x000008, "Wrong alignment on TLUserWidgetButton_SetText");
static_assert(sizeof(TLUserWidgetButton_SetText) == 0x000018, "Wrong size on TLUserWidgetButton_SetText");
static_assert(offsetof(TLUserWidgetButton_SetText, InText) == 0x000000, "Member 'TLUserWidgetButton_SetText::InText' has a wrong offset!");

// DelegateFunction TLClient.TLUserWidgetButton.TLButtonChangeEnableEvent__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetButton_TLButtonChangeEnableEvent__DelegateSignature final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetButton_TLButtonChangeEnableEvent__DelegateSignature) == 0x000001, "Wrong alignment on TLUserWidgetButton_TLButtonChangeEnableEvent__DelegateSignature");
static_assert(sizeof(TLUserWidgetButton_TLButtonChangeEnableEvent__DelegateSignature) == 0x000001, "Wrong size on TLUserWidgetButton_TLButtonChangeEnableEvent__DelegateSignature");
static_assert(offsetof(TLUserWidgetButton_TLButtonChangeEnableEvent__DelegateSignature, bEnabled) == 0x000000, "Member 'TLUserWidgetButton_TLButtonChangeEnableEvent__DelegateSignature::bEnabled' has a wrong offset!");

// Function TLClient.TLUserWidgetCheckButton.BindGameValue
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetCheckButton_BindGameValue final
{
public:
	class FName                                   GameValueName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCheckButton_BindGameValue) == 0x000004, "Wrong alignment on TLUserWidgetCheckButton_BindGameValue");
static_assert(sizeof(TLUserWidgetCheckButton_BindGameValue) == 0x000008, "Wrong size on TLUserWidgetCheckButton_BindGameValue");
static_assert(offsetof(TLUserWidgetCheckButton_BindGameValue, GameValueName) == 0x000000, "Member 'TLUserWidgetCheckButton_BindGameValue::GameValueName' has a wrong offset!");

// Function TLClient.TLUserWidgetCheckButton.HandleIndeterminate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCheckButton_HandleIndeterminate final
{
public:
	bool                                          bIndeterminate;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCheckButton_HandleIndeterminate) == 0x000001, "Wrong alignment on TLUserWidgetCheckButton_HandleIndeterminate");
static_assert(sizeof(TLUserWidgetCheckButton_HandleIndeterminate) == 0x000001, "Wrong size on TLUserWidgetCheckButton_HandleIndeterminate");
static_assert(offsetof(TLUserWidgetCheckButton_HandleIndeterminate, bIndeterminate) == 0x000000, "Member 'TLUserWidgetCheckButton_HandleIndeterminate::bIndeterminate' has a wrong offset!");

// Function TLClient.TLUserWidgetCheckButton.HandleSelected
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetCheckButton_HandleSelected final
{
public:
	bool                                          Selected;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCheckButton_HandleSelected) == 0x000004, "Wrong alignment on TLUserWidgetCheckButton_HandleSelected");
static_assert(sizeof(TLUserWidgetCheckButton_HandleSelected) == 0x000008, "Wrong size on TLUserWidgetCheckButton_HandleSelected");
static_assert(offsetof(TLUserWidgetCheckButton_HandleSelected, Selected) == 0x000000, "Member 'TLUserWidgetCheckButton_HandleSelected::Selected' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCheckButton_HandleSelected, Index_0) == 0x000004, "Member 'TLUserWidgetCheckButton_HandleSelected::Index_0' has a wrong offset!");

// Function TLClient.TLUserWidgetCheckButton.HandleVisibleBindUserWidget
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCheckButton_HandleVisibleBindUserWidget final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCheckButton_HandleVisibleBindUserWidget) == 0x000001, "Wrong alignment on TLUserWidgetCheckButton_HandleVisibleBindUserWidget");
static_assert(sizeof(TLUserWidgetCheckButton_HandleVisibleBindUserWidget) == 0x000001, "Wrong size on TLUserWidgetCheckButton_HandleVisibleBindUserWidget");
static_assert(offsetof(TLUserWidgetCheckButton_HandleVisibleBindUserWidget, bInVisible) == 0x000000, "Member 'TLUserWidgetCheckButton_HandleVisibleBindUserWidget::bInVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetCheckButton.SetCheck
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCheckButton_SetCheck final
{
public:
	bool                                          Check;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCheckButton_SetCheck) == 0x000001, "Wrong alignment on TLUserWidgetCheckButton_SetCheck");
static_assert(sizeof(TLUserWidgetCheckButton_SetCheck) == 0x000001, "Wrong size on TLUserWidgetCheckButton_SetCheck");
static_assert(offsetof(TLUserWidgetCheckButton_SetCheck, Check) == 0x000000, "Member 'TLUserWidgetCheckButton_SetCheck::Check' has a wrong offset!");

// Function TLClient.TLUserWidgetCheckButton.SetCheckHoverIconFromSoftObjectPath
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetCheckButton_SetCheckHoverIconFromSoftObjectPath final
{
public:
	struct FSoftObjectPath                        Path;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAsyncLoad;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetCheckButton_SetCheckHoverIconFromSoftObjectPath) == 0x000008, "Wrong alignment on TLUserWidgetCheckButton_SetCheckHoverIconFromSoftObjectPath");
static_assert(sizeof(TLUserWidgetCheckButton_SetCheckHoverIconFromSoftObjectPath) == 0x000020, "Wrong size on TLUserWidgetCheckButton_SetCheckHoverIconFromSoftObjectPath");
static_assert(offsetof(TLUserWidgetCheckButton_SetCheckHoverIconFromSoftObjectPath, Path) == 0x000000, "Member 'TLUserWidgetCheckButton_SetCheckHoverIconFromSoftObjectPath::Path' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCheckButton_SetCheckHoverIconFromSoftObjectPath, bInAsyncLoad) == 0x000018, "Member 'TLUserWidgetCheckButton_SetCheckHoverIconFromSoftObjectPath::bInAsyncLoad' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCheckButton_SetCheckHoverIconFromSoftObjectPath, bMatchSize) == 0x000019, "Member 'TLUserWidgetCheckButton_SetCheckHoverIconFromSoftObjectPath::bMatchSize' has a wrong offset!");

// Function TLClient.TLUserWidgetCheckButton.SetCheckIconFromSoftObjectPath
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetCheckButton_SetCheckIconFromSoftObjectPath final
{
public:
	struct FSoftObjectPath                        Path;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAsyncLoad;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetCheckButton_SetCheckIconFromSoftObjectPath) == 0x000008, "Wrong alignment on TLUserWidgetCheckButton_SetCheckIconFromSoftObjectPath");
static_assert(sizeof(TLUserWidgetCheckButton_SetCheckIconFromSoftObjectPath) == 0x000020, "Wrong size on TLUserWidgetCheckButton_SetCheckIconFromSoftObjectPath");
static_assert(offsetof(TLUserWidgetCheckButton_SetCheckIconFromSoftObjectPath, Path) == 0x000000, "Member 'TLUserWidgetCheckButton_SetCheckIconFromSoftObjectPath::Path' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCheckButton_SetCheckIconFromSoftObjectPath, bInAsyncLoad) == 0x000018, "Member 'TLUserWidgetCheckButton_SetCheckIconFromSoftObjectPath::bInAsyncLoad' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCheckButton_SetCheckIconFromSoftObjectPath, bMatchSize) == 0x000019, "Member 'TLUserWidgetCheckButton_SetCheckIconFromSoftObjectPath::bMatchSize' has a wrong offset!");

// Function TLClient.TLUserWidgetCheckButton.SetCheckIgnoreDisable
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCheckButton_SetCheckIgnoreDisable final
{
public:
	bool                                          Check;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCheckButton_SetCheckIgnoreDisable) == 0x000001, "Wrong alignment on TLUserWidgetCheckButton_SetCheckIgnoreDisable");
static_assert(sizeof(TLUserWidgetCheckButton_SetCheckIgnoreDisable) == 0x000001, "Wrong size on TLUserWidgetCheckButton_SetCheckIgnoreDisable");
static_assert(offsetof(TLUserWidgetCheckButton_SetCheckIgnoreDisable, Check) == 0x000000, "Member 'TLUserWidgetCheckButton_SetCheckIgnoreDisable::Check' has a wrong offset!");

// Function TLClient.TLUserWidgetCheckButton.SetIndeterminate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCheckButton_SetIndeterminate final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCheckButton_SetIndeterminate) == 0x000001, "Wrong alignment on TLUserWidgetCheckButton_SetIndeterminate");
static_assert(sizeof(TLUserWidgetCheckButton_SetIndeterminate) == 0x000001, "Wrong size on TLUserWidgetCheckButton_SetIndeterminate");
static_assert(offsetof(TLUserWidgetCheckButton_SetIndeterminate, bInValue) == 0x000000, "Member 'TLUserWidgetCheckButton_SetIndeterminate::bInValue' has a wrong offset!");

// Function TLClient.TLUserWidgetCheckButton.IsBindedGameValue
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCheckButton_IsBindedGameValue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCheckButton_IsBindedGameValue) == 0x000001, "Wrong alignment on TLUserWidgetCheckButton_IsBindedGameValue");
static_assert(sizeof(TLUserWidgetCheckButton_IsBindedGameValue) == 0x000001, "Wrong size on TLUserWidgetCheckButton_IsBindedGameValue");
static_assert(offsetof(TLUserWidgetCheckButton_IsBindedGameValue, ReturnValue) == 0x000000, "Member 'TLUserWidgetCheckButton_IsBindedGameValue::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetCheckButton.IsChecked
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCheckButton_IsChecked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCheckButton_IsChecked) == 0x000001, "Wrong alignment on TLUserWidgetCheckButton_IsChecked");
static_assert(sizeof(TLUserWidgetCheckButton_IsChecked) == 0x000001, "Wrong size on TLUserWidgetCheckButton_IsChecked");
static_assert(offsetof(TLUserWidgetCheckButton_IsChecked, ReturnValue) == 0x000000, "Member 'TLUserWidgetCheckButton_IsChecked::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetCheckButton.IsIndeterminate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCheckButton_IsIndeterminate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCheckButton_IsIndeterminate) == 0x000001, "Wrong alignment on TLUserWidgetCheckButton_IsIndeterminate");
static_assert(sizeof(TLUserWidgetCheckButton_IsIndeterminate) == 0x000001, "Wrong size on TLUserWidgetCheckButton_IsIndeterminate");
static_assert(offsetof(TLUserWidgetCheckButton_IsIndeterminate, ReturnValue) == 0x000000, "Member 'TLUserWidgetCheckButton_IsIndeterminate::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetTopLevel.AddActionGuideButton
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetTopLevel_AddActionGuideButton final
{
public:
	class UTLUserWidgetActionGuideButton*         ActionGuideButton;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTopLevel_AddActionGuideButton) == 0x000008, "Wrong alignment on TLUserWidgetTopLevel_AddActionGuideButton");
static_assert(sizeof(TLUserWidgetTopLevel_AddActionGuideButton) == 0x000008, "Wrong size on TLUserWidgetTopLevel_AddActionGuideButton");
static_assert(offsetof(TLUserWidgetTopLevel_AddActionGuideButton, ActionGuideButton) == 0x000000, "Member 'TLUserWidgetTopLevel_AddActionGuideButton::ActionGuideButton' has a wrong offset!");

// Function TLClient.TLUserWidgetTopLevel.RemoveActionGuideButton
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetTopLevel_RemoveActionGuideButton final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTopLevel_RemoveActionGuideButton) == 0x000004, "Wrong alignment on TLUserWidgetTopLevel_RemoveActionGuideButton");
static_assert(sizeof(TLUserWidgetTopLevel_RemoveActionGuideButton) == 0x000008, "Wrong size on TLUserWidgetTopLevel_RemoveActionGuideButton");
static_assert(offsetof(TLUserWidgetTopLevel_RemoveActionGuideButton, ActionName) == 0x000000, "Member 'TLUserWidgetTopLevel_RemoveActionGuideButton::ActionName' has a wrong offset!");

// Function TLClient.TLUserWidgetTopLevel.SetWrapParentFrame
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetTopLevel_SetWrapParentFrame final
{
public:
	class UTLUserWidgetFrame*                     InFrame;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTopLevel_SetWrapParentFrame) == 0x000008, "Wrong alignment on TLUserWidgetTopLevel_SetWrapParentFrame");
static_assert(sizeof(TLUserWidgetTopLevel_SetWrapParentFrame) == 0x000008, "Wrong size on TLUserWidgetTopLevel_SetWrapParentFrame");
static_assert(offsetof(TLUserWidgetTopLevel_SetWrapParentFrame, InFrame) == 0x000000, "Member 'TLUserWidgetTopLevel_SetWrapParentFrame::InFrame' has a wrong offset!");

// Function TLClient.TLUserWidgetFrame.HandleUISystemEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetFrame_HandleUISystemEvent final
{
public:
	ETLUISystemEvent                              InEvent;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetFrame_HandleUISystemEvent) == 0x000001, "Wrong alignment on TLUserWidgetFrame_HandleUISystemEvent");
static_assert(sizeof(TLUserWidgetFrame_HandleUISystemEvent) == 0x000001, "Wrong size on TLUserWidgetFrame_HandleUISystemEvent");
static_assert(offsetof(TLUserWidgetFrame_HandleUISystemEvent, InEvent) == 0x000000, "Member 'TLUserWidgetFrame_HandleUISystemEvent::InEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetFrame.OnTutorialActivateEvent
// 0x00C8 (0x00C8 - 0x0000)
struct TLUserWidgetFrame_OnTutorialActivateEvent final
{
public:
	struct FTLInfoTutorial                        InfoTutorial;                                      // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetFrame_OnTutorialActivateEvent) == 0x000008, "Wrong alignment on TLUserWidgetFrame_OnTutorialActivateEvent");
static_assert(sizeof(TLUserWidgetFrame_OnTutorialActivateEvent) == 0x0000C8, "Wrong size on TLUserWidgetFrame_OnTutorialActivateEvent");
static_assert(offsetof(TLUserWidgetFrame_OnTutorialActivateEvent, InfoTutorial) == 0x000000, "Member 'TLUserWidgetFrame_OnTutorialActivateEvent::InfoTutorial' has a wrong offset!");

// Function TLClient.TLUserWidgetFrame.OnTutorialDeactivateEvent
// 0x00C8 (0x00C8 - 0x0000)
struct TLUserWidgetFrame_OnTutorialDeactivateEvent final
{
public:
	struct FTLInfoTutorial                        InfoTutorial;                                      // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetFrame_OnTutorialDeactivateEvent) == 0x000008, "Wrong alignment on TLUserWidgetFrame_OnTutorialDeactivateEvent");
static_assert(sizeof(TLUserWidgetFrame_OnTutorialDeactivateEvent) == 0x0000C8, "Wrong size on TLUserWidgetFrame_OnTutorialDeactivateEvent");
static_assert(offsetof(TLUserWidgetFrame_OnTutorialDeactivateEvent, InfoTutorial) == 0x000000, "Member 'TLUserWidgetFrame_OnTutorialDeactivateEvent::InfoTutorial' has a wrong offset!");

// Function TLClient.TLUserWidgetFrame.OnWidgetFloatingEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetFrame_OnWidgetFloatingEvent final
{
public:
	ETLUIWidgetFloatingEvent                      InWidgetFloatingEvent;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetFrame_OnWidgetFloatingEvent) == 0x000001, "Wrong alignment on TLUserWidgetFrame_OnWidgetFloatingEvent");
static_assert(sizeof(TLUserWidgetFrame_OnWidgetFloatingEvent) == 0x000001, "Wrong size on TLUserWidgetFrame_OnWidgetFloatingEvent");
static_assert(offsetof(TLUserWidgetFrame_OnWidgetFloatingEvent, InWidgetFloatingEvent) == 0x000000, "Member 'TLUserWidgetFrame_OnWidgetFloatingEvent::InWidgetFloatingEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetFrame.SetSize
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetFrame_SetSize final
{
public:
	struct FVector2D                              InSize;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetFrame_SetSize) == 0x000004, "Wrong alignment on TLUserWidgetFrame_SetSize");
static_assert(sizeof(TLUserWidgetFrame_SetSize) == 0x000008, "Wrong size on TLUserWidgetFrame_SetSize");
static_assert(offsetof(TLUserWidgetFrame_SetSize, InSize) == 0x000000, "Member 'TLUserWidgetFrame_SetSize::InSize' has a wrong offset!");

// Function TLClient.TLUserWidgetQuickSlotGroup.OnChangeMainHandWeapon
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetQuickSlotGroup_OnChangeMainHandWeapon final
{
public:
	EItemCategory                                 InItemCategory;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetQuickSlotGroup_OnChangeMainHandWeapon) == 0x000001, "Wrong alignment on TLUserWidgetQuickSlotGroup_OnChangeMainHandWeapon");
static_assert(sizeof(TLUserWidgetQuickSlotGroup_OnChangeMainHandWeapon) == 0x000001, "Wrong size on TLUserWidgetQuickSlotGroup_OnChangeMainHandWeapon");
static_assert(offsetof(TLUserWidgetQuickSlotGroup_OnChangeMainHandWeapon, InItemCategory) == 0x000000, "Member 'TLUserWidgetQuickSlotGroup_OnChangeMainHandWeapon::InItemCategory' has a wrong offset!");

// Function TLClient.TLUserWidgetQuickSlotGroup.OnChangeSlotPage
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetQuickSlotGroup_OnChangeSlotPage final
{
public:
	int32                                         InPageIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetQuickSlotGroup_OnChangeSlotPage) == 0x000004, "Wrong alignment on TLUserWidgetQuickSlotGroup_OnChangeSlotPage");
static_assert(sizeof(TLUserWidgetQuickSlotGroup_OnChangeSlotPage) == 0x000004, "Wrong size on TLUserWidgetQuickSlotGroup_OnChangeSlotPage");
static_assert(offsetof(TLUserWidgetQuickSlotGroup_OnChangeSlotPage, InPageIndex) == 0x000000, "Member 'TLUserWidgetQuickSlotGroup_OnChangeSlotPage::InPageIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetQuickSlotGroup.OnCheckButtonQuickSlotCollapseExpandCheck
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetQuickSlotGroup_OnCheckButtonQuickSlotCollapseExpandCheck final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetQuickSlotGroup_OnCheckButtonQuickSlotCollapseExpandCheck) == 0x000001, "Wrong alignment on TLUserWidgetQuickSlotGroup_OnCheckButtonQuickSlotCollapseExpandCheck");
static_assert(sizeof(TLUserWidgetQuickSlotGroup_OnCheckButtonQuickSlotCollapseExpandCheck) == 0x000001, "Wrong size on TLUserWidgetQuickSlotGroup_OnCheckButtonQuickSlotCollapseExpandCheck");
static_assert(offsetof(TLUserWidgetQuickSlotGroup_OnCheckButtonQuickSlotCollapseExpandCheck, bIsChecked) == 0x000000, "Member 'TLUserWidgetQuickSlotGroup_OnCheckButtonQuickSlotCollapseExpandCheck::bIsChecked' has a wrong offset!");

// Function TLClient.TLUserWidgetQuickSlotGroup.OnUpdateEditableNonQuickSlotSelected
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetQuickSlotGroup_OnUpdateEditableNonQuickSlotSelected final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetQuickSlotGroup_OnUpdateEditableNonQuickSlotSelected) == 0x000001, "Wrong alignment on TLUserWidgetQuickSlotGroup_OnUpdateEditableNonQuickSlotSelected");
static_assert(sizeof(TLUserWidgetQuickSlotGroup_OnUpdateEditableNonQuickSlotSelected) == 0x000001, "Wrong size on TLUserWidgetQuickSlotGroup_OnUpdateEditableNonQuickSlotSelected");
static_assert(offsetof(TLUserWidgetQuickSlotGroup_OnUpdateEditableNonQuickSlotSelected, bInValue) == 0x000000, "Member 'TLUserWidgetQuickSlotGroup_OnUpdateEditableNonQuickSlotSelected::bInValue' has a wrong offset!");

// Function TLClient.TLUserWidgetModeBase.GetSceneActor
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetModeBase_GetSceneActor final
{
public:
	class ATLCustomSceneControlActor*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetModeBase_GetSceneActor) == 0x000008, "Wrong alignment on TLUserWidgetModeBase_GetSceneActor");
static_assert(sizeof(TLUserWidgetModeBase_GetSceneActor) == 0x000008, "Wrong size on TLUserWidgetModeBase_GetSceneActor");
static_assert(offsetof(TLUserWidgetModeBase_GetSceneActor, ReturnValue) == 0x000000, "Member 'TLUserWidgetModeBase_GetSceneActor::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetModeBase.OnNotificationTab
// 0x000C (0x000C - 0x0000)
struct TLUserWidgetModeBase_OnNotificationTab final
{
public:
	class FName                                   TabName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInNotification;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetModeBase_OnNotificationTab) == 0x000004, "Wrong alignment on TLUserWidgetModeBase_OnNotificationTab");
static_assert(sizeof(TLUserWidgetModeBase_OnNotificationTab) == 0x00000C, "Wrong size on TLUserWidgetModeBase_OnNotificationTab");
static_assert(offsetof(TLUserWidgetModeBase_OnNotificationTab, TabName) == 0x000000, "Member 'TLUserWidgetModeBase_OnNotificationTab::TabName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetModeBase_OnNotificationTab, bInNotification) == 0x000008, "Member 'TLUserWidgetModeBase_OnNotificationTab::bInNotification' has a wrong offset!");

// Function TLClient.TLUserWidgetModeBase.OnSelectTab
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetModeBase_OnSelectTab final
{
public:
	class FName                                   TabName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetModeBase_OnSelectTab) == 0x000004, "Wrong alignment on TLUserWidgetModeBase_OnSelectTab");
static_assert(sizeof(TLUserWidgetModeBase_OnSelectTab) == 0x000008, "Wrong size on TLUserWidgetModeBase_OnSelectTab");
static_assert(offsetof(TLUserWidgetModeBase_OnSelectTab, TabName) == 0x000000, "Member 'TLUserWidgetModeBase_OnSelectTab::TabName' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCollection.HandleSearchTextBoxCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetItemCollection_HandleSearchTextBoxCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetItemCollection_HandleSearchTextBoxCommitted) == 0x000008, "Wrong alignment on TLUserWidgetItemCollection_HandleSearchTextBoxCommitted");
static_assert(sizeof(TLUserWidgetItemCollection_HandleSearchTextBoxCommitted) == 0x000020, "Wrong size on TLUserWidgetItemCollection_HandleSearchTextBoxCommitted");
static_assert(offsetof(TLUserWidgetItemCollection_HandleSearchTextBoxCommitted, InText) == 0x000000, "Member 'TLUserWidgetItemCollection_HandleSearchTextBoxCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemCollection_HandleSearchTextBoxCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetItemCollection_HandleSearchTextBoxCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCollection.OnItemViewVisibleUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemCollection_OnItemViewVisibleUpdate final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemCollection_OnItemViewVisibleUpdate) == 0x000001, "Wrong alignment on TLUserWidgetItemCollection_OnItemViewVisibleUpdate");
static_assert(sizeof(TLUserWidgetItemCollection_OnItemViewVisibleUpdate) == 0x000001, "Wrong size on TLUserWidgetItemCollection_OnItemViewVisibleUpdate");
static_assert(offsetof(TLUserWidgetItemCollection_OnItemViewVisibleUpdate, InVisible) == 0x000000, "Member 'TLUserWidgetItemCollection_OnItemViewVisibleUpdate::InVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCollection.OnResultSearchText
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetItemCollection_OnResultSearchText final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InSearchNum;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemCollection_OnResultSearchText) == 0x000004, "Wrong alignment on TLUserWidgetItemCollection_OnResultSearchText");
static_assert(sizeof(TLUserWidgetItemCollection_OnResultSearchText) == 0x000008, "Wrong size on TLUserWidgetItemCollection_OnResultSearchText");
static_assert(offsetof(TLUserWidgetItemCollection_OnResultSearchText, InVisible) == 0x000000, "Member 'TLUserWidgetItemCollection_OnResultSearchText::InVisible' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemCollection_OnResultSearchText, InSearchNum) == 0x000004, "Member 'TLUserWidgetItemCollection_OnResultSearchText::InSearchNum' has a wrong offset!");

// Function TLClient.TLUserWidgetIcon.HandleDragDropOperationDropped
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetIcon_HandleDragDropOperationDropped final
{
public:
	class UDragDropOperation*                     Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetIcon_HandleDragDropOperationDropped) == 0x000008, "Wrong alignment on TLUserWidgetIcon_HandleDragDropOperationDropped");
static_assert(sizeof(TLUserWidgetIcon_HandleDragDropOperationDropped) == 0x000008, "Wrong size on TLUserWidgetIcon_HandleDragDropOperationDropped");
static_assert(offsetof(TLUserWidgetIcon_HandleDragDropOperationDropped, Operation) == 0x000000, "Member 'TLUserWidgetIcon_HandleDragDropOperationDropped::Operation' has a wrong offset!");

// Function TLClient.TLUserWidgetIcon.HandleSelected
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetIcon_HandleSelected final
{
public:
	bool                                          Selected;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetIcon_HandleSelected) == 0x000004, "Wrong alignment on TLUserWidgetIcon_HandleSelected");
static_assert(sizeof(TLUserWidgetIcon_HandleSelected) == 0x000008, "Wrong size on TLUserWidgetIcon_HandleSelected");
static_assert(offsetof(TLUserWidgetIcon_HandleSelected, Selected) == 0x000000, "Member 'TLUserWidgetIcon_HandleSelected::Selected' has a wrong offset!");
static_assert(offsetof(TLUserWidgetIcon_HandleSelected, Index_0) == 0x000004, "Member 'TLUserWidgetIcon_HandleSelected::Index_0' has a wrong offset!");

// Function TLClient.TLUserWidgetIcon.IsWidgetSelected
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetIcon_IsWidgetSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetIcon_IsWidgetSelected) == 0x000001, "Wrong alignment on TLUserWidgetIcon_IsWidgetSelected");
static_assert(sizeof(TLUserWidgetIcon_IsWidgetSelected) == 0x000001, "Wrong size on TLUserWidgetIcon_IsWidgetSelected");
static_assert(offsetof(TLUserWidgetIcon_IsWidgetSelected, ReturnValue) == 0x000000, "Member 'TLUserWidgetIcon_IsWidgetSelected::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCompositionOpenResultSlot.OnOpenStart
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetItemCompositionOpenResultSlot_OnOpenStart final
{
public:
	int32                                         InGrade;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInReturnToMaterial;                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetItemCompositionOpenResultSlot_OnOpenStart) == 0x000004, "Wrong alignment on TLUserWidgetItemCompositionOpenResultSlot_OnOpenStart");
static_assert(sizeof(TLUserWidgetItemCompositionOpenResultSlot_OnOpenStart) == 0x000008, "Wrong size on TLUserWidgetItemCompositionOpenResultSlot_OnOpenStart");
static_assert(offsetof(TLUserWidgetItemCompositionOpenResultSlot_OnOpenStart, InGrade) == 0x000000, "Member 'TLUserWidgetItemCompositionOpenResultSlot_OnOpenStart::InGrade' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemCompositionOpenResultSlot_OnOpenStart, bInReturnToMaterial) == 0x000004, "Member 'TLUserWidgetItemCompositionOpenResultSlot_OnOpenStart::bInReturnToMaterial' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCompositionOpenResultSlot.OnReview
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetItemCompositionOpenResultSlot_OnReview final
{
public:
	int32                                         InGrade;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInReturnToMaterial;                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetItemCompositionOpenResultSlot_OnReview) == 0x000004, "Wrong alignment on TLUserWidgetItemCompositionOpenResultSlot_OnReview");
static_assert(sizeof(TLUserWidgetItemCompositionOpenResultSlot_OnReview) == 0x000008, "Wrong size on TLUserWidgetItemCompositionOpenResultSlot_OnReview");
static_assert(offsetof(TLUserWidgetItemCompositionOpenResultSlot_OnReview, InGrade) == 0x000000, "Member 'TLUserWidgetItemCompositionOpenResultSlot_OnReview::InGrade' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemCompositionOpenResultSlot_OnReview, bInReturnToMaterial) == 0x000004, "Member 'TLUserWidgetItemCompositionOpenResultSlot_OnReview::bInReturnToMaterial' has a wrong offset!");

// Function TLClient.TLUserWidgetHudCustomizeSetting.OnFinishMinimizeEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetHudCustomizeSetting_OnFinishMinimizeEvent final
{
public:
	bool                                          bMinimize;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetHudCustomizeSetting_OnFinishMinimizeEvent) == 0x000001, "Wrong alignment on TLUserWidgetHudCustomizeSetting_OnFinishMinimizeEvent");
static_assert(sizeof(TLUserWidgetHudCustomizeSetting_OnFinishMinimizeEvent) == 0x000001, "Wrong size on TLUserWidgetHudCustomizeSetting_OnFinishMinimizeEvent");
static_assert(offsetof(TLUserWidgetHudCustomizeSetting_OnFinishMinimizeEvent, bMinimize) == 0x000000, "Member 'TLUserWidgetHudCustomizeSetting_OnFinishMinimizeEvent::bMinimize' has a wrong offset!");

// Function TLClient.TLUserWidgetHudCustomizeSetting.OnMinimizeEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetHudCustomizeSetting_OnMinimizeEvent final
{
public:
	bool                                          bMinimize;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetHudCustomizeSetting_OnMinimizeEvent) == 0x000001, "Wrong alignment on TLUserWidgetHudCustomizeSetting_OnMinimizeEvent");
static_assert(sizeof(TLUserWidgetHudCustomizeSetting_OnMinimizeEvent) == 0x000001, "Wrong size on TLUserWidgetHudCustomizeSetting_OnMinimizeEvent");
static_assert(offsetof(TLUserWidgetHudCustomizeSetting_OnMinimizeEvent, bMinimize) == 0x000000, "Member 'TLUserWidgetHudCustomizeSetting_OnMinimizeEvent::bMinimize' has a wrong offset!");

// Function TLClient.TLUserWidgetContentsAlarmBase.OnOnlyFavoriteListShow
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContentsAlarmBase_OnOnlyFavoriteListShow final
{
public:
	bool                                          IsShow_0;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContentsAlarmBase_OnOnlyFavoriteListShow) == 0x000001, "Wrong alignment on TLUserWidgetContentsAlarmBase_OnOnlyFavoriteListShow");
static_assert(sizeof(TLUserWidgetContentsAlarmBase_OnOnlyFavoriteListShow) == 0x000001, "Wrong size on TLUserWidgetContentsAlarmBase_OnOnlyFavoriteListShow");
static_assert(offsetof(TLUserWidgetContentsAlarmBase_OnOnlyFavoriteListShow, IsShow_0) == 0x000000, "Member 'TLUserWidgetContentsAlarmBase_OnOnlyFavoriteListShow::IsShow_0' has a wrong offset!");

// Function TLClient.TLUserWidgetContentsAlarmBase.OnUpdateViewType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContentsAlarmBase_OnUpdateViewType final
{
public:
	EContentsAlarmViewType                        InViewType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContentsAlarmBase_OnUpdateViewType) == 0x000001, "Wrong alignment on TLUserWidgetContentsAlarmBase_OnUpdateViewType");
static_assert(sizeof(TLUserWidgetContentsAlarmBase_OnUpdateViewType) == 0x000001, "Wrong size on TLUserWidgetContentsAlarmBase_OnUpdateViewType");
static_assert(offsetof(TLUserWidgetContentsAlarmBase_OnUpdateViewType, InViewType) == 0x000000, "Member 'TLUserWidgetContentsAlarmBase_OnUpdateViewType::InViewType' has a wrong offset!");

// Function TLClient.TLUserWidgetMapBase.OnUpdateFogState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapBase_OnUpdateFogState final
{
public:
	bool                                          IsOpenFog;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapBase_OnUpdateFogState) == 0x000001, "Wrong alignment on TLUserWidgetMapBase_OnUpdateFogState");
static_assert(sizeof(TLUserWidgetMapBase_OnUpdateFogState) == 0x000001, "Wrong size on TLUserWidgetMapBase_OnUpdateFogState");
static_assert(offsetof(TLUserWidgetMapBase_OnUpdateFogState, IsOpenFog) == 0x000000, "Member 'TLUserWidgetMapBase_OnUpdateFogState::IsOpenFog' has a wrong offset!");

// Function TLClient.TLUserWidgetMapBase.OnUpdateMapScale
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetMapBase_OnUpdateMapScale final
{
public:
	float                                         InMapScale;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapBase_OnUpdateMapScale) == 0x000004, "Wrong alignment on TLUserWidgetMapBase_OnUpdateMapScale");
static_assert(sizeof(TLUserWidgetMapBase_OnUpdateMapScale) == 0x000004, "Wrong size on TLUserWidgetMapBase_OnUpdateMapScale");
static_assert(offsetof(TLUserWidgetMapBase_OnUpdateMapScale, InMapScale) == 0x000000, "Member 'TLUserWidgetMapBase_OnUpdateMapScale::InMapScale' has a wrong offset!");

// Function TLClient.TLUserWidgetMapBase.OnUpdateRegionTileTexture
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetMapBase_OnUpdateRegionTileTexture final
{
public:
	bool                                          InShowRegionTileTexture;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLRegionMapDisplayType                       InDisplayType;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapBase_OnUpdateRegionTileTexture) == 0x000001, "Wrong alignment on TLUserWidgetMapBase_OnUpdateRegionTileTexture");
static_assert(sizeof(TLUserWidgetMapBase_OnUpdateRegionTileTexture) == 0x000002, "Wrong size on TLUserWidgetMapBase_OnUpdateRegionTileTexture");
static_assert(offsetof(TLUserWidgetMapBase_OnUpdateRegionTileTexture, InShowRegionTileTexture) == 0x000000, "Member 'TLUserWidgetMapBase_OnUpdateRegionTileTexture::InShowRegionTileTexture' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMapBase_OnUpdateRegionTileTexture, InDisplayType) == 0x000001, "Member 'TLUserWidgetMapBase_OnUpdateRegionTileTexture::InDisplayType' has a wrong offset!");

// Function TLClient.TLUserWidgetMapBase.SetMapFrameSize
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetMapBase_SetMapFrameSize final
{
public:
	struct FVector2D                              InMapFrameSize;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapBase_SetMapFrameSize) == 0x000004, "Wrong alignment on TLUserWidgetMapBase_SetMapFrameSize");
static_assert(sizeof(TLUserWidgetMapBase_SetMapFrameSize) == 0x000008, "Wrong size on TLUserWidgetMapBase_SetMapFrameSize");
static_assert(offsetof(TLUserWidgetMapBase_SetMapFrameSize, InMapFrameSize) == 0x000000, "Member 'TLUserWidgetMapBase_SetMapFrameSize::InMapFrameSize' has a wrong offset!");

// Function TLClient.TLUserWidgetMapBase.SetMapIconFrame
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetMapBase_SetMapIconFrame final
{
public:
	EMapIconType                                  InMapIconType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InZOrder;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnchors                               InAnchor;                                          // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              InSize;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapBase_SetMapIconFrame) == 0x000004, "Wrong alignment on TLUserWidgetMapBase_SetMapIconFrame");
static_assert(sizeof(TLUserWidgetMapBase_SetMapIconFrame) == 0x000020, "Wrong size on TLUserWidgetMapBase_SetMapIconFrame");
static_assert(offsetof(TLUserWidgetMapBase_SetMapIconFrame, InMapIconType) == 0x000000, "Member 'TLUserWidgetMapBase_SetMapIconFrame::InMapIconType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMapBase_SetMapIconFrame, InZOrder) == 0x000004, "Member 'TLUserWidgetMapBase_SetMapIconFrame::InZOrder' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMapBase_SetMapIconFrame, InAnchor) == 0x000008, "Member 'TLUserWidgetMapBase_SetMapIconFrame::InAnchor' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMapBase_SetMapIconFrame, InSize) == 0x000018, "Member 'TLUserWidgetMapBase_SetMapIconFrame::InSize' has a wrong offset!");

// Function TLClient.TLUserWidgetOverlayMap.HandlePanningState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetOverlayMap_HandlePanningState final
{
public:
	ETLMinimapPanningState                        InPanningState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOverlayMap_HandlePanningState) == 0x000001, "Wrong alignment on TLUserWidgetOverlayMap_HandlePanningState");
static_assert(sizeof(TLUserWidgetOverlayMap_HandlePanningState) == 0x000001, "Wrong size on TLUserWidgetOverlayMap_HandlePanningState");
static_assert(offsetof(TLUserWidgetOverlayMap_HandlePanningState, InPanningState) == 0x000000, "Member 'TLUserWidgetOverlayMap_HandlePanningState::InPanningState' has a wrong offset!");

// Function TLClient.TLUserWidgetOverlayMap.OnUpdateOverlayMapOpacity
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetOverlayMap_OnUpdateOverlayMapOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOverlayMap_OnUpdateOverlayMapOpacity) == 0x000004, "Wrong alignment on TLUserWidgetOverlayMap_OnUpdateOverlayMapOpacity");
static_assert(sizeof(TLUserWidgetOverlayMap_OnUpdateOverlayMapOpacity) == 0x000004, "Wrong size on TLUserWidgetOverlayMap_OnUpdateOverlayMapOpacity");
static_assert(offsetof(TLUserWidgetOverlayMap_OnUpdateOverlayMapOpacity, InOpacity) == 0x000000, "Member 'TLUserWidgetOverlayMap_OnUpdateOverlayMapOpacity::InOpacity' has a wrong offset!");

// Function TLClient.TLUserWidgetOverlayMap.OnUpdateRoadAdditive
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetOverlayMap_OnUpdateRoadAdditive final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOverlayMap_OnUpdateRoadAdditive) == 0x000004, "Wrong alignment on TLUserWidgetOverlayMap_OnUpdateRoadAdditive");
static_assert(sizeof(TLUserWidgetOverlayMap_OnUpdateRoadAdditive) == 0x000004, "Wrong size on TLUserWidgetOverlayMap_OnUpdateRoadAdditive");
static_assert(offsetof(TLUserWidgetOverlayMap_OnUpdateRoadAdditive, InValue) == 0x000000, "Member 'TLUserWidgetOverlayMap_OnUpdateRoadAdditive::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetOverlayMap.OnUpdateRoadAlphaWhite
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetOverlayMap_OnUpdateRoadAlphaWhite final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOverlayMap_OnUpdateRoadAlphaWhite) == 0x000004, "Wrong alignment on TLUserWidgetOverlayMap_OnUpdateRoadAlphaWhite");
static_assert(sizeof(TLUserWidgetOverlayMap_OnUpdateRoadAlphaWhite) == 0x000004, "Wrong size on TLUserWidgetOverlayMap_OnUpdateRoadAlphaWhite");
static_assert(offsetof(TLUserWidgetOverlayMap_OnUpdateRoadAlphaWhite, InValue) == 0x000000, "Member 'TLUserWidgetOverlayMap_OnUpdateRoadAlphaWhite::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetOverlayMap.OnUpdateRoadBrightness
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetOverlayMap_OnUpdateRoadBrightness final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOverlayMap_OnUpdateRoadBrightness) == 0x000004, "Wrong alignment on TLUserWidgetOverlayMap_OnUpdateRoadBrightness");
static_assert(sizeof(TLUserWidgetOverlayMap_OnUpdateRoadBrightness) == 0x000004, "Wrong size on TLUserWidgetOverlayMap_OnUpdateRoadBrightness");
static_assert(offsetof(TLUserWidgetOverlayMap_OnUpdateRoadBrightness, InValue) == 0x000000, "Member 'TLUserWidgetOverlayMap_OnUpdateRoadBrightness::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetMainMenu.GetMenuButton
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetMainMenu_GetMenuButton final
{
public:
	class FString                                 InMenuTypeName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLUserWidgetMainMenuButton*            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMainMenu_GetMenuButton) == 0x000008, "Wrong alignment on TLUserWidgetMainMenu_GetMenuButton");
static_assert(sizeof(TLUserWidgetMainMenu_GetMenuButton) == 0x000018, "Wrong size on TLUserWidgetMainMenu_GetMenuButton");
static_assert(offsetof(TLUserWidgetMainMenu_GetMenuButton, InMenuTypeName) == 0x000000, "Member 'TLUserWidgetMainMenu_GetMenuButton::InMenuTypeName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMainMenu_GetMenuButton, ReturnValue) == 0x000010, "Member 'TLUserWidgetMainMenu_GetMenuButton::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetMainMenu.OnRedDotCountUpdated
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetMainMenu_OnRedDotCountUpdated final
{
public:
	int32                                         InRedDotCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMainMenu_OnRedDotCountUpdated) == 0x000004, "Wrong alignment on TLUserWidgetMainMenu_OnRedDotCountUpdated");
static_assert(sizeof(TLUserWidgetMainMenu_OnRedDotCountUpdated) == 0x000004, "Wrong size on TLUserWidgetMainMenu_OnRedDotCountUpdated");
static_assert(offsetof(TLUserWidgetMainMenu_OnRedDotCountUpdated, InRedDotCount) == 0x000000, "Member 'TLUserWidgetMainMenu_OnRedDotCountUpdated::InRedDotCount' has a wrong offset!");

// Function TLClient.TLUserWidgetMainMenu.OnUpdateVisibleCategory
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetMainMenu_OnUpdateVisibleCategory final
{
public:
	EMainMenuCategory                             InCategory;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShow;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMainMenu_OnUpdateVisibleCategory) == 0x000001, "Wrong alignment on TLUserWidgetMainMenu_OnUpdateVisibleCategory");
static_assert(sizeof(TLUserWidgetMainMenu_OnUpdateVisibleCategory) == 0x000002, "Wrong size on TLUserWidgetMainMenu_OnUpdateVisibleCategory");
static_assert(offsetof(TLUserWidgetMainMenu_OnUpdateVisibleCategory, InCategory) == 0x000000, "Member 'TLUserWidgetMainMenu_OnUpdateVisibleCategory::InCategory' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMainMenu_OnUpdateVisibleCategory, bShow) == 0x000001, "Member 'TLUserWidgetMainMenu_OnUpdateVisibleCategory::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetPVPMessageUnit.SetInfo
// 0x0038 (0x0038 - 0x0000)
struct TLUserWidgetPVPMessageUnit_SetInfo final
{
public:
	bool                                          bWin;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AttackerName;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   DieCharacter;                                      // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPVPMessageUnit_SetInfo) == 0x000008, "Wrong alignment on TLUserWidgetPVPMessageUnit_SetInfo");
static_assert(sizeof(TLUserWidgetPVPMessageUnit_SetInfo) == 0x000038, "Wrong size on TLUserWidgetPVPMessageUnit_SetInfo");
static_assert(offsetof(TLUserWidgetPVPMessageUnit_SetInfo, bWin) == 0x000000, "Member 'TLUserWidgetPVPMessageUnit_SetInfo::bWin' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPVPMessageUnit_SetInfo, AttackerName) == 0x000008, "Member 'TLUserWidgetPVPMessageUnit_SetInfo::AttackerName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPVPMessageUnit_SetInfo, DieCharacter) == 0x000020, "Member 'TLUserWidgetPVPMessageUnit_SetInfo::DieCharacter' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.EmphasizeNameplate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlate_EmphasizeNameplate final
{
public:
	bool                                          bInEmphasize;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_EmphasizeNameplate) == 0x000001, "Wrong alignment on TLUserWidgetNamePlate_EmphasizeNameplate");
static_assert(sizeof(TLUserWidgetNamePlate_EmphasizeNameplate) == 0x000001, "Wrong size on TLUserWidgetNamePlate_EmphasizeNameplate");
static_assert(offsetof(TLUserWidgetNamePlate_EmphasizeNameplate, bInEmphasize) == 0x000000, "Member 'TLUserWidgetNamePlate_EmphasizeNameplate::bInEmphasize' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.GetRelationColorToMyPc
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlate_GetRelationColorToMyPc final
{
public:
	ETLRelationColorToMyPc                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_GetRelationColorToMyPc) == 0x000001, "Wrong alignment on TLUserWidgetNamePlate_GetRelationColorToMyPc");
static_assert(sizeof(TLUserWidgetNamePlate_GetRelationColorToMyPc) == 0x000001, "Wrong size on TLUserWidgetNamePlate_GetRelationColorToMyPc");
static_assert(offsetof(TLUserWidgetNamePlate_GetRelationColorToMyPc, ReturnValue) == 0x000000, "Member 'TLUserWidgetNamePlate_GetRelationColorToMyPc::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.IsHostileToMyPc
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlate_IsHostileToMyPc final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_IsHostileToMyPc) == 0x000001, "Wrong alignment on TLUserWidgetNamePlate_IsHostileToMyPc");
static_assert(sizeof(TLUserWidgetNamePlate_IsHostileToMyPc) == 0x000001, "Wrong size on TLUserWidgetNamePlate_IsHostileToMyPc");
static_assert(offsetof(TLUserWidgetNamePlate_IsHostileToMyPc, ReturnValue) == 0x000000, "Member 'TLUserWidgetNamePlate_IsHostileToMyPc::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.IsShowHPBar
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlate_IsShowHPBar final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_IsShowHPBar) == 0x000001, "Wrong alignment on TLUserWidgetNamePlate_IsShowHPBar");
static_assert(sizeof(TLUserWidgetNamePlate_IsShowHPBar) == 0x000001, "Wrong size on TLUserWidgetNamePlate_IsShowHPBar");
static_assert(offsetof(TLUserWidgetNamePlate_IsShowHPBar, ReturnValue) == 0x000000, "Member 'TLUserWidgetNamePlate_IsShowHPBar::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.OnChangedHpAbnormalStatus
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetNamePlate_OnChangedHpAbnormalStatus final
{
public:
	EHpAbnormalStatus                             InStatus;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbIsMyPc;                                         // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_OnChangedHpAbnormalStatus) == 0x000001, "Wrong alignment on TLUserWidgetNamePlate_OnChangedHpAbnormalStatus");
static_assert(sizeof(TLUserWidgetNamePlate_OnChangedHpAbnormalStatus) == 0x000002, "Wrong size on TLUserWidgetNamePlate_OnChangedHpAbnormalStatus");
static_assert(offsetof(TLUserWidgetNamePlate_OnChangedHpAbnormalStatus, InStatus) == 0x000000, "Member 'TLUserWidgetNamePlate_OnChangedHpAbnormalStatus::InStatus' has a wrong offset!");
static_assert(offsetof(TLUserWidgetNamePlate_OnChangedHpAbnormalStatus, InbIsMyPc) == 0x000001, "Member 'TLUserWidgetNamePlate_OnChangedHpAbnormalStatus::InbIsMyPc' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.OnChangeNameplateLayout
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetNamePlate_OnChangeNameplateLayout final
{
public:
	ETLNameplateLayout                            InTLNameplateLayout;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbMyPc;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_OnChangeNameplateLayout) == 0x000001, "Wrong alignment on TLUserWidgetNamePlate_OnChangeNameplateLayout");
static_assert(sizeof(TLUserWidgetNamePlate_OnChangeNameplateLayout) == 0x000002, "Wrong size on TLUserWidgetNamePlate_OnChangeNameplateLayout");
static_assert(offsetof(TLUserWidgetNamePlate_OnChangeNameplateLayout, InTLNameplateLayout) == 0x000000, "Member 'TLUserWidgetNamePlate_OnChangeNameplateLayout::InTLNameplateLayout' has a wrong offset!");
static_assert(offsetof(TLUserWidgetNamePlate_OnChangeNameplateLayout, InbMyPc) == 0x000001, "Member 'TLUserWidgetNamePlate_OnChangeNameplateLayout::InbMyPc' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.OnChangeOtherPCAlive
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlate_OnChangeOtherPCAlive final
{
public:
	bool                                          bIsAlive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_OnChangeOtherPCAlive) == 0x000001, "Wrong alignment on TLUserWidgetNamePlate_OnChangeOtherPCAlive");
static_assert(sizeof(TLUserWidgetNamePlate_OnChangeOtherPCAlive) == 0x000001, "Wrong size on TLUserWidgetNamePlate_OnChangeOtherPCAlive");
static_assert(offsetof(TLUserWidgetNamePlate_OnChangeOtherPCAlive, bIsAlive) == 0x000000, "Member 'TLUserWidgetNamePlate_OnChangeOtherPCAlive::bIsAlive' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.OnChangeStealthDetectionState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlate_OnChangeStealthDetectionState final
{
public:
	ETLStealthDectectionState                     State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_OnChangeStealthDetectionState) == 0x000001, "Wrong alignment on TLUserWidgetNamePlate_OnChangeStealthDetectionState");
static_assert(sizeof(TLUserWidgetNamePlate_OnChangeStealthDetectionState) == 0x000001, "Wrong size on TLUserWidgetNamePlate_OnChangeStealthDetectionState");
static_assert(offsetof(TLUserWidgetNamePlate_OnChangeStealthDetectionState, State) == 0x000000, "Member 'TLUserWidgetNamePlate_OnChangeStealthDetectionState::State' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.OnLoadDefaultFontSizeComplete
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetNamePlate_OnLoadDefaultFontSizeComplete final
{
public:
	int32                                         InDefaultFontSize;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_OnLoadDefaultFontSizeComplete) == 0x000004, "Wrong alignment on TLUserWidgetNamePlate_OnLoadDefaultFontSizeComplete");
static_assert(sizeof(TLUserWidgetNamePlate_OnLoadDefaultFontSizeComplete) == 0x000004, "Wrong size on TLUserWidgetNamePlate_OnLoadDefaultFontSizeComplete");
static_assert(offsetof(TLUserWidgetNamePlate_OnLoadDefaultFontSizeComplete, InDefaultFontSize) == 0x000000, "Member 'TLUserWidgetNamePlate_OnLoadDefaultFontSizeComplete::InDefaultFontSize' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.OnSetFixTargetNext
// 0x0014 (0x0014 - 0x0000)
struct TLUserWidgetNamePlate_OnSetFixTargetNext final
{
public:
	bool                                          InTarget;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           InColor;                                           // 0x0004(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_OnSetFixTargetNext) == 0x000004, "Wrong alignment on TLUserWidgetNamePlate_OnSetFixTargetNext");
static_assert(sizeof(TLUserWidgetNamePlate_OnSetFixTargetNext) == 0x000014, "Wrong size on TLUserWidgetNamePlate_OnSetFixTargetNext");
static_assert(offsetof(TLUserWidgetNamePlate_OnSetFixTargetNext, InTarget) == 0x000000, "Member 'TLUserWidgetNamePlate_OnSetFixTargetNext::InTarget' has a wrong offset!");
static_assert(offsetof(TLUserWidgetNamePlate_OnSetFixTargetNext, InColor) == 0x000004, "Member 'TLUserWidgetNamePlate_OnSetFixTargetNext::InColor' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.OnSetScanTarget
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlate_OnSetScanTarget final
{
public:
	bool                                          InTarget;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_OnSetScanTarget) == 0x000001, "Wrong alignment on TLUserWidgetNamePlate_OnSetScanTarget");
static_assert(sizeof(TLUserWidgetNamePlate_OnSetScanTarget) == 0x000001, "Wrong size on TLUserWidgetNamePlate_OnSetScanTarget");
static_assert(offsetof(TLUserWidgetNamePlate_OnSetScanTarget, InTarget) == 0x000000, "Member 'TLUserWidgetNamePlate_OnSetScanTarget::InTarget' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.OnUpdateAttackedMyPc
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlate_OnUpdateAttackedMyPc final
{
public:
	bool                                          bInAttackedMyPc;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_OnUpdateAttackedMyPc) == 0x000001, "Wrong alignment on TLUserWidgetNamePlate_OnUpdateAttackedMyPc");
static_assert(sizeof(TLUserWidgetNamePlate_OnUpdateAttackedMyPc) == 0x000001, "Wrong size on TLUserWidgetNamePlate_OnUpdateAttackedMyPc");
static_assert(offsetof(TLUserWidgetNamePlate_OnUpdateAttackedMyPc, bInAttackedMyPc) == 0x000000, "Member 'TLUserWidgetNamePlate_OnUpdateAttackedMyPc::bInAttackedMyPc' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.OnUpdateBossFocusOnMe
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlate_OnUpdateBossFocusOnMe final
{
public:
	bool                                          bFocus;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_OnUpdateBossFocusOnMe) == 0x000001, "Wrong alignment on TLUserWidgetNamePlate_OnUpdateBossFocusOnMe");
static_assert(sizeof(TLUserWidgetNamePlate_OnUpdateBossFocusOnMe) == 0x000001, "Wrong size on TLUserWidgetNamePlate_OnUpdateBossFocusOnMe");
static_assert(offsetof(TLUserWidgetNamePlate_OnUpdateBossFocusOnMe, bFocus) == 0x000000, "Member 'TLUserWidgetNamePlate_OnUpdateBossFocusOnMe::bFocus' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.OnUpdateBossGate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlate_OnUpdateBossGate final
{
public:
	ETLBossGateCrowdingStatus                     InBossGateStatus;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_OnUpdateBossGate) == 0x000001, "Wrong alignment on TLUserWidgetNamePlate_OnUpdateBossGate");
static_assert(sizeof(TLUserWidgetNamePlate_OnUpdateBossGate) == 0x000001, "Wrong size on TLUserWidgetNamePlate_OnUpdateBossGate");
static_assert(offsetof(TLUserWidgetNamePlate_OnUpdateBossGate, InBossGateStatus) == 0x000000, "Member 'TLUserWidgetNamePlate_OnUpdateBossGate::InBossGateStatus' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.OnUpdatedMassCombatMode
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlate_OnUpdatedMassCombatMode final
{
public:
	bool                                          bInMassCombatMode;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_OnUpdatedMassCombatMode) == 0x000001, "Wrong alignment on TLUserWidgetNamePlate_OnUpdatedMassCombatMode");
static_assert(sizeof(TLUserWidgetNamePlate_OnUpdatedMassCombatMode) == 0x000001, "Wrong size on TLUserWidgetNamePlate_OnUpdatedMassCombatMode");
static_assert(offsetof(TLUserWidgetNamePlate_OnUpdatedMassCombatMode, bInMassCombatMode) == 0x000000, "Member 'TLUserWidgetNamePlate_OnUpdatedMassCombatMode::bInMassCombatMode' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.OnUpdateEEAlert
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlate_OnUpdateEEAlert final
{
public:
	bool                                          bInEEAlert;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_OnUpdateEEAlert) == 0x000001, "Wrong alignment on TLUserWidgetNamePlate_OnUpdateEEAlert");
static_assert(sizeof(TLUserWidgetNamePlate_OnUpdateEEAlert) == 0x000001, "Wrong size on TLUserWidgetNamePlate_OnUpdateEEAlert");
static_assert(offsetof(TLUserWidgetNamePlate_OnUpdateEEAlert, bInEEAlert) == 0x000000, "Member 'TLUserWidgetNamePlate_OnUpdateEEAlert::bInEEAlert' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.OnUpdateGuildEmblemShow
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlate_OnUpdateGuildEmblemShow final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_OnUpdateGuildEmblemShow) == 0x000001, "Wrong alignment on TLUserWidgetNamePlate_OnUpdateGuildEmblemShow");
static_assert(sizeof(TLUserWidgetNamePlate_OnUpdateGuildEmblemShow) == 0x000001, "Wrong size on TLUserWidgetNamePlate_OnUpdateGuildEmblemShow");
static_assert(offsetof(TLUserWidgetNamePlate_OnUpdateGuildEmblemShow, bShow) == 0x000000, "Member 'TLUserWidgetNamePlate_OnUpdateGuildEmblemShow::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.OnUpdateHpBarType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlate_OnUpdateHpBarType final
{
public:
	EHpBarType                                    InHpBarType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_OnUpdateHpBarType) == 0x000001, "Wrong alignment on TLUserWidgetNamePlate_OnUpdateHpBarType");
static_assert(sizeof(TLUserWidgetNamePlate_OnUpdateHpBarType) == 0x000001, "Wrong size on TLUserWidgetNamePlate_OnUpdateHpBarType");
static_assert(offsetof(TLUserWidgetNamePlate_OnUpdateHpBarType, InHpBarType) == 0x000000, "Member 'TLUserWidgetNamePlate_OnUpdateHpBarType::InHpBarType' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.OnUpdateMassCombatMode
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlate_OnUpdateMassCombatMode final
{
public:
	ETLNameplateMassCombatModeState               InMassCombatModeState;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_OnUpdateMassCombatMode) == 0x000001, "Wrong alignment on TLUserWidgetNamePlate_OnUpdateMassCombatMode");
static_assert(sizeof(TLUserWidgetNamePlate_OnUpdateMassCombatMode) == 0x000001, "Wrong size on TLUserWidgetNamePlate_OnUpdateMassCombatMode");
static_assert(offsetof(TLUserWidgetNamePlate_OnUpdateMassCombatMode, InMassCombatModeState) == 0x000000, "Member 'TLUserWidgetNamePlate_OnUpdateMassCombatMode::InMassCombatModeState' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.OnUpdateSimpleLayout
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlate_OnUpdateSimpleLayout final
{
public:
	ETLNameplateSimpleLayout                      InLayout;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_OnUpdateSimpleLayout) == 0x000001, "Wrong alignment on TLUserWidgetNamePlate_OnUpdateSimpleLayout");
static_assert(sizeof(TLUserWidgetNamePlate_OnUpdateSimpleLayout) == 0x000001, "Wrong size on TLUserWidgetNamePlate_OnUpdateSimpleLayout");
static_assert(offsetof(TLUserWidgetNamePlate_OnUpdateSimpleLayout, InLayout) == 0x000000, "Member 'TLUserWidgetNamePlate_OnUpdateSimpleLayout::InLayout' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.OnUpdateTargetState
// 0x0014 (0x0014 - 0x0000)
struct TLUserWidgetNamePlate_OnUpdateTargetState final
{
public:
	ETLNameplateTaregetState                      State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShow;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           InOutlineColor;                                    // 0x0004(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_OnUpdateTargetState) == 0x000004, "Wrong alignment on TLUserWidgetNamePlate_OnUpdateTargetState");
static_assert(sizeof(TLUserWidgetNamePlate_OnUpdateTargetState) == 0x000014, "Wrong size on TLUserWidgetNamePlate_OnUpdateTargetState");
static_assert(offsetof(TLUserWidgetNamePlate_OnUpdateTargetState, State) == 0x000000, "Member 'TLUserWidgetNamePlate_OnUpdateTargetState::State' has a wrong offset!");
static_assert(offsetof(TLUserWidgetNamePlate_OnUpdateTargetState, bShow) == 0x000001, "Member 'TLUserWidgetNamePlate_OnUpdateTargetState::bShow' has a wrong offset!");
static_assert(offsetof(TLUserWidgetNamePlate_OnUpdateTargetState, InOutlineColor) == 0x000004, "Member 'TLUserWidgetNamePlate_OnUpdateTargetState::InOutlineColor' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.SetNameplateEnableHitTest
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlate_SetNameplateEnableHitTest final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_SetNameplateEnableHitTest) == 0x000001, "Wrong alignment on TLUserWidgetNamePlate_SetNameplateEnableHitTest");
static_assert(sizeof(TLUserWidgetNamePlate_SetNameplateEnableHitTest) == 0x000001, "Wrong size on TLUserWidgetNamePlate_SetNameplateEnableHitTest");
static_assert(offsetof(TLUserWidgetNamePlate_SetNameplateEnableHitTest, bInEnable) == 0x000000, "Member 'TLUserWidgetNamePlate_SetNameplateEnableHitTest::bInEnable' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlate.ShowPartyNum
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlate_ShowPartyNum final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlate_ShowPartyNum) == 0x000001, "Wrong alignment on TLUserWidgetNamePlate_ShowPartyNum");
static_assert(sizeof(TLUserWidgetNamePlate_ShowPartyNum) == 0x000001, "Wrong size on TLUserWidgetNamePlate_ShowPartyNum");
static_assert(offsetof(TLUserWidgetNamePlate_ShowPartyNum, bShow) == 0x000000, "Member 'TLUserWidgetNamePlate_ShowPartyNum::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlatePC.IsPvpState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlatePC_IsPvpState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlatePC_IsPvpState) == 0x000001, "Wrong alignment on TLUserWidgetNamePlatePC_IsPvpState");
static_assert(sizeof(TLUserWidgetNamePlatePC_IsPvpState) == 0x000001, "Wrong size on TLUserWidgetNamePlatePC_IsPvpState");
static_assert(offsetof(TLUserWidgetNamePlatePC_IsPvpState, ReturnValue) == 0x000000, "Member 'TLUserWidgetNamePlatePC_IsPvpState::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlatePC.OnSimpleModeOffsetForConsole
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetNamePlatePC_OnSimpleModeOffsetForConsole final
{
public:
	struct FVector2D                              InRenderTransformOffset;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlatePC_OnSimpleModeOffsetForConsole) == 0x000004, "Wrong alignment on TLUserWidgetNamePlatePC_OnSimpleModeOffsetForConsole");
static_assert(sizeof(TLUserWidgetNamePlatePC_OnSimpleModeOffsetForConsole) == 0x000008, "Wrong size on TLUserWidgetNamePlatePC_OnSimpleModeOffsetForConsole");
static_assert(offsetof(TLUserWidgetNamePlatePC_OnSimpleModeOffsetForConsole, InRenderTransformOffset) == 0x000000, "Member 'TLUserWidgetNamePlatePC_OnSimpleModeOffsetForConsole::InRenderTransformOffset' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxBase.HandleMsgBoxClickedBtnEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMsgBoxBase_HandleMsgBoxClickedBtnEvent final
{
public:
	ETLMsgBoxBtnType                              InClickedBtnType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxBase_HandleMsgBoxClickedBtnEvent) == 0x000001, "Wrong alignment on TLUserWidgetMsgBoxBase_HandleMsgBoxClickedBtnEvent");
static_assert(sizeof(TLUserWidgetMsgBoxBase_HandleMsgBoxClickedBtnEvent) == 0x000001, "Wrong size on TLUserWidgetMsgBoxBase_HandleMsgBoxClickedBtnEvent");
static_assert(offsetof(TLUserWidgetMsgBoxBase_HandleMsgBoxClickedBtnEvent, InClickedBtnType) == 0x000000, "Member 'TLUserWidgetMsgBoxBase_HandleMsgBoxClickedBtnEvent::InClickedBtnType' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxBase.HandleSetBtnStyle
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMsgBoxBase_HandleSetBtnStyle final
{
public:
	ETLMsgBoxBtnStyle                             InBtnStyle;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxBase_HandleSetBtnStyle) == 0x000001, "Wrong alignment on TLUserWidgetMsgBoxBase_HandleSetBtnStyle");
static_assert(sizeof(TLUserWidgetMsgBoxBase_HandleSetBtnStyle) == 0x000001, "Wrong size on TLUserWidgetMsgBoxBase_HandleSetBtnStyle");
static_assert(offsetof(TLUserWidgetMsgBoxBase_HandleSetBtnStyle, InBtnStyle) == 0x000000, "Member 'TLUserWidgetMsgBoxBase_HandleSetBtnStyle::InBtnStyle' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleWindow.SetContentWidget
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetConsoleWindow_SetContentWidget final
{
public:
	class UTLUserWidgetTopLevel*                  InContentWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleWindow_SetContentWidget) == 0x000008, "Wrong alignment on TLUserWidgetConsoleWindow_SetContentWidget");
static_assert(sizeof(TLUserWidgetConsoleWindow_SetContentWidget) == 0x000008, "Wrong size on TLUserWidgetConsoleWindow_SetContentWidget");
static_assert(offsetof(TLUserWidgetConsoleWindow_SetContentWidget, InContentWidget) == 0x000000, "Member 'TLUserWidgetConsoleWindow_SetContentWidget::InContentWidget' has a wrong offset!");

// Function TLClient.TLUserWidgetChatItem.OnShowPortrait
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetChatItem_OnShowPortrait final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInHidePortraitArea;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatItem_OnShowPortrait) == 0x000001, "Wrong alignment on TLUserWidgetChatItem_OnShowPortrait");
static_assert(sizeof(TLUserWidgetChatItem_OnShowPortrait) == 0x000002, "Wrong size on TLUserWidgetChatItem_OnShowPortrait");
static_assert(offsetof(TLUserWidgetChatItem_OnShowPortrait, IsVisible_0) == 0x000000, "Member 'TLUserWidgetChatItem_OnShowPortrait::IsVisible_0' has a wrong offset!");
static_assert(offsetof(TLUserWidgetChatItem_OnShowPortrait, bInHidePortraitArea) == 0x000001, "Member 'TLUserWidgetChatItem_OnShowPortrait::bInHidePortraitArea' has a wrong offset!");

// Function TLClient.TLUserWidgetChatItem.OnStartVisibleAnimation
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetChatItem_OnStartVisibleAnimation final
{
public:
	bool                                          bReverse;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatItem_OnStartVisibleAnimation) == 0x000001, "Wrong alignment on TLUserWidgetChatItem_OnStartVisibleAnimation");
static_assert(sizeof(TLUserWidgetChatItem_OnStartVisibleAnimation) == 0x000001, "Wrong size on TLUserWidgetChatItem_OnStartVisibleAnimation");
static_assert(offsetof(TLUserWidgetChatItem_OnStartVisibleAnimation, bReverse) == 0x000000, "Member 'TLUserWidgetChatItem_OnStartVisibleAnimation::bReverse' has a wrong offset!");

// Function TLClient.TLUserWidgetChatItem.OnUpdateChatCategoryOption
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetChatItem_OnUpdateChatCategoryOption final
{
public:
	bool                                          bVisibleChatCategory;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatItem_OnUpdateChatCategoryOption) == 0x000001, "Wrong alignment on TLUserWidgetChatItem_OnUpdateChatCategoryOption");
static_assert(sizeof(TLUserWidgetChatItem_OnUpdateChatCategoryOption) == 0x000001, "Wrong size on TLUserWidgetChatItem_OnUpdateChatCategoryOption");
static_assert(offsetof(TLUserWidgetChatItem_OnUpdateChatCategoryOption, bVisibleChatCategory) == 0x000000, "Member 'TLUserWidgetChatItem_OnUpdateChatCategoryOption::bVisibleChatCategory' has a wrong offset!");

// Function TLClient.TLUserWidgetChatItem.OnUpdateUserPortrait
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetChatItem_OnUpdateUserPortrait final
{
public:
	bool                                          bInUserPortrait;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatItem_OnUpdateUserPortrait) == 0x000001, "Wrong alignment on TLUserWidgetChatItem_OnUpdateUserPortrait");
static_assert(sizeof(TLUserWidgetChatItem_OnUpdateUserPortrait) == 0x000001, "Wrong size on TLUserWidgetChatItem_OnUpdateUserPortrait");
static_assert(offsetof(TLUserWidgetChatItem_OnUpdateUserPortrait, bInUserPortrait) == 0x000000, "Member 'TLUserWidgetChatItem_OnUpdateUserPortrait::bInUserPortrait' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxTradeSale.OnPriceInputTextChanged
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetMsgBoxTradeSale_OnPriceInputTextChanged final
{
public:
	int32                                         InChangedValue;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLSpinnerValueCompareResult                  InCompareResult;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetMsgBoxTradeSale_OnPriceInputTextChanged) == 0x000004, "Wrong alignment on TLUserWidgetMsgBoxTradeSale_OnPriceInputTextChanged");
static_assert(sizeof(TLUserWidgetMsgBoxTradeSale_OnPriceInputTextChanged) == 0x000008, "Wrong size on TLUserWidgetMsgBoxTradeSale_OnPriceInputTextChanged");
static_assert(offsetof(TLUserWidgetMsgBoxTradeSale_OnPriceInputTextChanged, InChangedValue) == 0x000000, "Member 'TLUserWidgetMsgBoxTradeSale_OnPriceInputTextChanged::InChangedValue' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxTradeSale_OnPriceInputTextChanged, InCompareResult) == 0x000004, "Member 'TLUserWidgetMsgBoxTradeSale_OnPriceInputTextChanged::InCompareResult' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxTradeSale.OnPriceInputTextCommitted
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetMsgBoxTradeSale_OnPriceInputTextCommitted final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitType;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetMsgBoxTradeSale_OnPriceInputTextCommitted) == 0x000004, "Wrong alignment on TLUserWidgetMsgBoxTradeSale_OnPriceInputTextCommitted");
static_assert(sizeof(TLUserWidgetMsgBoxTradeSale_OnPriceInputTextCommitted) == 0x000008, "Wrong size on TLUserWidgetMsgBoxTradeSale_OnPriceInputTextCommitted");
static_assert(offsetof(TLUserWidgetMsgBoxTradeSale_OnPriceInputTextCommitted, InValue) == 0x000000, "Member 'TLUserWidgetMsgBoxTradeSale_OnPriceInputTextCommitted::InValue' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxTradeSale_OnPriceInputTextCommitted, InCommitType) == 0x000004, "Member 'TLUserWidgetMsgBoxTradeSale_OnPriceInputTextCommitted::InCommitType' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxTradeSale.OnPriceSpinnerFocused
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMsgBoxTradeSale_OnPriceSpinnerFocused final
{
public:
	bool                                          InIsFocused;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxTradeSale_OnPriceSpinnerFocused) == 0x000001, "Wrong alignment on TLUserWidgetMsgBoxTradeSale_OnPriceSpinnerFocused");
static_assert(sizeof(TLUserWidgetMsgBoxTradeSale_OnPriceSpinnerFocused) == 0x000001, "Wrong size on TLUserWidgetMsgBoxTradeSale_OnPriceSpinnerFocused");
static_assert(offsetof(TLUserWidgetMsgBoxTradeSale_OnPriceSpinnerFocused, InIsFocused) == 0x000000, "Member 'TLUserWidgetMsgBoxTradeSale_OnPriceSpinnerFocused::InIsFocused' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxTradeSale.OnQuantityInputTextChanged
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetMsgBoxTradeSale_OnQuantityInputTextChanged final
{
public:
	int32                                         InChangedValue;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLSpinnerValueCompareResult                  InCompareResult;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetMsgBoxTradeSale_OnQuantityInputTextChanged) == 0x000004, "Wrong alignment on TLUserWidgetMsgBoxTradeSale_OnQuantityInputTextChanged");
static_assert(sizeof(TLUserWidgetMsgBoxTradeSale_OnQuantityInputTextChanged) == 0x000008, "Wrong size on TLUserWidgetMsgBoxTradeSale_OnQuantityInputTextChanged");
static_assert(offsetof(TLUserWidgetMsgBoxTradeSale_OnQuantityInputTextChanged, InChangedValue) == 0x000000, "Member 'TLUserWidgetMsgBoxTradeSale_OnQuantityInputTextChanged::InChangedValue' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxTradeSale_OnQuantityInputTextChanged, InCompareResult) == 0x000004, "Member 'TLUserWidgetMsgBoxTradeSale_OnQuantityInputTextChanged::InCompareResult' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxTradeSale.OnQuantityInputTextCommitted
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetMsgBoxTradeSale_OnQuantityInputTextCommitted final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitType;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetMsgBoxTradeSale_OnQuantityInputTextCommitted) == 0x000004, "Wrong alignment on TLUserWidgetMsgBoxTradeSale_OnQuantityInputTextCommitted");
static_assert(sizeof(TLUserWidgetMsgBoxTradeSale_OnQuantityInputTextCommitted) == 0x000008, "Wrong size on TLUserWidgetMsgBoxTradeSale_OnQuantityInputTextCommitted");
static_assert(offsetof(TLUserWidgetMsgBoxTradeSale_OnQuantityInputTextCommitted, InValue) == 0x000000, "Member 'TLUserWidgetMsgBoxTradeSale_OnQuantityInputTextCommitted::InValue' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxTradeSale_OnQuantityInputTextCommitted, InCommitType) == 0x000004, "Member 'TLUserWidgetMsgBoxTradeSale_OnQuantityInputTextCommitted::InCommitType' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxTradeSale.OnQuantitySpinnerFocused
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMsgBoxTradeSale_OnQuantitySpinnerFocused final
{
public:
	bool                                          InIsFocused;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxTradeSale_OnQuantitySpinnerFocused) == 0x000001, "Wrong alignment on TLUserWidgetMsgBoxTradeSale_OnQuantitySpinnerFocused");
static_assert(sizeof(TLUserWidgetMsgBoxTradeSale_OnQuantitySpinnerFocused) == 0x000001, "Wrong size on TLUserWidgetMsgBoxTradeSale_OnQuantitySpinnerFocused");
static_assert(offsetof(TLUserWidgetMsgBoxTradeSale_OnQuantitySpinnerFocused, InIsFocused) == 0x000000, "Member 'TLUserWidgetMsgBoxTradeSale_OnQuantitySpinnerFocused::InIsFocused' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxTradeSale.OnShowPriceUnitSpinner
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMsgBoxTradeSale_OnShowPriceUnitSpinner final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxTradeSale_OnShowPriceUnitSpinner) == 0x000001, "Wrong alignment on TLUserWidgetMsgBoxTradeSale_OnShowPriceUnitSpinner");
static_assert(sizeof(TLUserWidgetMsgBoxTradeSale_OnShowPriceUnitSpinner) == 0x000001, "Wrong size on TLUserWidgetMsgBoxTradeSale_OnShowPriceUnitSpinner");
static_assert(offsetof(TLUserWidgetMsgBoxTradeSale_OnShowPriceUnitSpinner, InIsShow) == 0x000000, "Member 'TLUserWidgetMsgBoxTradeSale_OnShowPriceUnitSpinner::InIsShow' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxTradeSale.OnShowQuantityUnitSpinner
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMsgBoxTradeSale_OnShowQuantityUnitSpinner final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxTradeSale_OnShowQuantityUnitSpinner) == 0x000001, "Wrong alignment on TLUserWidgetMsgBoxTradeSale_OnShowQuantityUnitSpinner");
static_assert(sizeof(TLUserWidgetMsgBoxTradeSale_OnShowQuantityUnitSpinner) == 0x000001, "Wrong size on TLUserWidgetMsgBoxTradeSale_OnShowQuantityUnitSpinner");
static_assert(offsetof(TLUserWidgetMsgBoxTradeSale_OnShowQuantityUnitSpinner, InIsShow) == 0x000000, "Member 'TLUserWidgetMsgBoxTradeSale_OnShowQuantityUnitSpinner::InIsShow' has a wrong offset!");

// Function TLClient.TLUserWidgetSlot.OnDimmed
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSlot_OnDimmed final
{
public:
	bool                                          InDimmed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSlot_OnDimmed) == 0x000001, "Wrong alignment on TLUserWidgetSlot_OnDimmed");
static_assert(sizeof(TLUserWidgetSlot_OnDimmed) == 0x000001, "Wrong size on TLUserWidgetSlot_OnDimmed");
static_assert(offsetof(TLUserWidgetSlot_OnDimmed, InDimmed) == 0x000000, "Member 'TLUserWidgetSlot_OnDimmed::InDimmed' has a wrong offset!");

// Function TLClient.TLUserWidgetSlot.OnDroppable
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSlot_OnDroppable final
{
public:
	bool                                          InDroppable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSlot_OnDroppable) == 0x000001, "Wrong alignment on TLUserWidgetSlot_OnDroppable");
static_assert(sizeof(TLUserWidgetSlot_OnDroppable) == 0x000001, "Wrong size on TLUserWidgetSlot_OnDroppable");
static_assert(offsetof(TLUserWidgetSlot_OnDroppable, InDroppable) == 0x000000, "Member 'TLUserWidgetSlot_OnDroppable::InDroppable' has a wrong offset!");

// Function TLClient.TLUserWidgetSlot.OnEmpty
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSlot_OnEmpty final
{
public:
	bool                                          InEmpty;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSlot_OnEmpty) == 0x000001, "Wrong alignment on TLUserWidgetSlot_OnEmpty");
static_assert(sizeof(TLUserWidgetSlot_OnEmpty) == 0x000001, "Wrong size on TLUserWidgetSlot_OnEmpty");
static_assert(offsetof(TLUserWidgetSlot_OnEmpty, InEmpty) == 0x000000, "Member 'TLUserWidgetSlot_OnEmpty::InEmpty' has a wrong offset!");

// Function TLClient.TLUserWidgetSlot.OnUpdateSelectedEditableQuickSlot
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSlot_OnUpdateSelectedEditableQuickSlot final
{
public:
	bool                                          bInSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSlot_OnUpdateSelectedEditableQuickSlot) == 0x000001, "Wrong alignment on TLUserWidgetSlot_OnUpdateSelectedEditableQuickSlot");
static_assert(sizeof(TLUserWidgetSlot_OnUpdateSelectedEditableQuickSlot) == 0x000001, "Wrong size on TLUserWidgetSlot_OnUpdateSelectedEditableQuickSlot");
static_assert(offsetof(TLUserWidgetSlot_OnUpdateSelectedEditableQuickSlot, bInSelected) == 0x000000, "Member 'TLUserWidgetSlot_OnUpdateSelectedEditableQuickSlot::bInSelected' has a wrong offset!");

// Function TLClient.TLUserWidgetSlot.IsDimmed
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSlot_IsDimmed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSlot_IsDimmed) == 0x000001, "Wrong alignment on TLUserWidgetSlot_IsDimmed");
static_assert(sizeof(TLUserWidgetSlot_IsDimmed) == 0x000001, "Wrong size on TLUserWidgetSlot_IsDimmed");
static_assert(offsetof(TLUserWidgetSlot_IsDimmed, ReturnValue) == 0x000000, "Member 'TLUserWidgetSlot_IsDimmed::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSlot.IsEmpty
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSlot_IsEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSlot_IsEmpty) == 0x000001, "Wrong alignment on TLUserWidgetSlot_IsEmpty");
static_assert(sizeof(TLUserWidgetSlot_IsEmpty) == 0x000001, "Wrong size on TLUserWidgetSlot_IsEmpty");
static_assert(offsetof(TLUserWidgetSlot_IsEmpty, ReturnValue) == 0x000000, "Member 'TLUserWidgetSlot_IsEmpty::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetItemSlot.OnEquipAnimation
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemSlot_OnEquipAnimation final
{
public:
	bool                                          InEquip;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemSlot_OnEquipAnimation) == 0x000001, "Wrong alignment on TLUserWidgetItemSlot_OnEquipAnimation");
static_assert(sizeof(TLUserWidgetItemSlot_OnEquipAnimation) == 0x000001, "Wrong size on TLUserWidgetItemSlot_OnEquipAnimation");
static_assert(offsetof(TLUserWidgetItemSlot_OnEquipAnimation, InEquip) == 0x000000, "Member 'TLUserWidgetItemSlot_OnEquipAnimation::InEquip' has a wrong offset!");

// Function TLClient.TLUserWidgetItemSlot.OnExpirationTimeSet
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemSlot_OnExpirationTimeSet final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemSlot_OnExpirationTimeSet) == 0x000001, "Wrong alignment on TLUserWidgetItemSlot_OnExpirationTimeSet");
static_assert(sizeof(TLUserWidgetItemSlot_OnExpirationTimeSet) == 0x000001, "Wrong size on TLUserWidgetItemSlot_OnExpirationTimeSet");
static_assert(offsetof(TLUserWidgetItemSlot_OnExpirationTimeSet, bInShow) == 0x000000, "Member 'TLUserWidgetItemSlot_OnExpirationTimeSet::bInShow' has a wrong offset!");

// Function TLClient.TLUserWidgetItemSlot.OnFixed
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemSlot_OnFixed final
{
public:
	bool                                          InFixed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemSlot_OnFixed) == 0x000001, "Wrong alignment on TLUserWidgetItemSlot_OnFixed");
static_assert(sizeof(TLUserWidgetItemSlot_OnFixed) == 0x000001, "Wrong size on TLUserWidgetItemSlot_OnFixed");
static_assert(offsetof(TLUserWidgetItemSlot_OnFixed, InFixed) == 0x000000, "Member 'TLUserWidgetItemSlot_OnFixed::InFixed' has a wrong offset!");

// Function TLClient.TLUserWidgetItemSlot.OnItemDungeonUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemSlot_OnItemDungeonUpdate final
{
public:
	bool                                          bInIsDungeonItem;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemSlot_OnItemDungeonUpdate) == 0x000001, "Wrong alignment on TLUserWidgetItemSlot_OnItemDungeonUpdate");
static_assert(sizeof(TLUserWidgetItemSlot_OnItemDungeonUpdate) == 0x000001, "Wrong size on TLUserWidgetItemSlot_OnItemDungeonUpdate");
static_assert(offsetof(TLUserWidgetItemSlot_OnItemDungeonUpdate, bInIsDungeonItem) == 0x000000, "Member 'TLUserWidgetItemSlot_OnItemDungeonUpdate::bInIsDungeonItem' has a wrong offset!");

// Function TLClient.TLUserWidgetItemSlot.OnItemGradeUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemSlot_OnItemGradeUpdate final
{
public:
	EItemGrade                                    InGrade;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemSlot_OnItemGradeUpdate) == 0x000001, "Wrong alignment on TLUserWidgetItemSlot_OnItemGradeUpdate");
static_assert(sizeof(TLUserWidgetItemSlot_OnItemGradeUpdate) == 0x000001, "Wrong size on TLUserWidgetItemSlot_OnItemGradeUpdate");
static_assert(offsetof(TLUserWidgetItemSlot_OnItemGradeUpdate, InGrade) == 0x000000, "Member 'TLUserWidgetItemSlot_OnItemGradeUpdate::InGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetItemSlot.OnItemTraitExtract
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemSlot_OnItemTraitExtract final
{
public:
	bool                                          InIsExtractItem;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemSlot_OnItemTraitExtract) == 0x000001, "Wrong alignment on TLUserWidgetItemSlot_OnItemTraitExtract");
static_assert(sizeof(TLUserWidgetItemSlot_OnItemTraitExtract) == 0x000001, "Wrong size on TLUserWidgetItemSlot_OnItemTraitExtract");
static_assert(offsetof(TLUserWidgetItemSlot_OnItemTraitExtract, InIsExtractItem) == 0x000000, "Member 'TLUserWidgetItemSlot_OnItemTraitExtract::InIsExtractItem' has a wrong offset!");

// Function TLClient.TLUserWidgetItemSlot.OnReceiveComplete
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemSlot_OnReceiveComplete final
{
public:
	bool                                          bInComplete;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemSlot_OnReceiveComplete) == 0x000001, "Wrong alignment on TLUserWidgetItemSlot_OnReceiveComplete");
static_assert(sizeof(TLUserWidgetItemSlot_OnReceiveComplete) == 0x000001, "Wrong size on TLUserWidgetItemSlot_OnReceiveComplete");
static_assert(offsetof(TLUserWidgetItemSlot_OnReceiveComplete, bInComplete) == 0x000000, "Member 'TLUserWidgetItemSlot_OnReceiveComplete::bInComplete' has a wrong offset!");

// Function TLClient.TLUserWidgetItemSlot.OnUpdateMaxEnchant
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemSlot_OnUpdateMaxEnchant final
{
public:
	bool                                          InbMaxLevel;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemSlot_OnUpdateMaxEnchant) == 0x000001, "Wrong alignment on TLUserWidgetItemSlot_OnUpdateMaxEnchant");
static_assert(sizeof(TLUserWidgetItemSlot_OnUpdateMaxEnchant) == 0x000001, "Wrong size on TLUserWidgetItemSlot_OnUpdateMaxEnchant");
static_assert(offsetof(TLUserWidgetItemSlot_OnUpdateMaxEnchant, InbMaxLevel) == 0x000000, "Member 'TLUserWidgetItemSlot_OnUpdateMaxEnchant::InbMaxLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetItemSlot.OnUpdateRequireLevel
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetItemSlot_OnUpdateRequireLevel final
{
public:
	int32                                         InRequireLevel;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPcLevel;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemSlot_OnUpdateRequireLevel) == 0x000004, "Wrong alignment on TLUserWidgetItemSlot_OnUpdateRequireLevel");
static_assert(sizeof(TLUserWidgetItemSlot_OnUpdateRequireLevel) == 0x000008, "Wrong size on TLUserWidgetItemSlot_OnUpdateRequireLevel");
static_assert(offsetof(TLUserWidgetItemSlot_OnUpdateRequireLevel, InRequireLevel) == 0x000000, "Member 'TLUserWidgetItemSlot_OnUpdateRequireLevel::InRequireLevel' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemSlot_OnUpdateRequireLevel, InPcLevel) == 0x000004, "Member 'TLUserWidgetItemSlot_OnUpdateRequireLevel::InPcLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetItemSlot.OnUpdateTradable
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemSlot_OnUpdateTradable final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemSlot_OnUpdateTradable) == 0x000001, "Wrong alignment on TLUserWidgetItemSlot_OnUpdateTradable");
static_assert(sizeof(TLUserWidgetItemSlot_OnUpdateTradable) == 0x000001, "Wrong size on TLUserWidgetItemSlot_OnUpdateTradable");
static_assert(offsetof(TLUserWidgetItemSlot_OnUpdateTradable, bInValue) == 0x000000, "Member 'TLUserWidgetItemSlot_OnUpdateTradable::bInValue' has a wrong offset!");

// Function TLClient.TLUserWidgetItemSlot.SetSlotSize
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetItemSlot_SetSlotSize final
{
public:
	int32                                         InSize;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemSlot_SetSlotSize) == 0x000004, "Wrong alignment on TLUserWidgetItemSlot_SetSlotSize");
static_assert(sizeof(TLUserWidgetItemSlot_SetSlotSize) == 0x000004, "Wrong size on TLUserWidgetItemSlot_SetSlotSize");
static_assert(offsetof(TLUserWidgetItemSlot_SetSlotSize, InSize) == 0x000000, "Member 'TLUserWidgetItemSlot_SetSlotSize::InSize' has a wrong offset!");

// Function TLClient.TLUserWidgetItemSlot.GetItemCategory
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemSlot_GetItemCategory final
{
public:
	EItemCategory                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemSlot_GetItemCategory) == 0x000001, "Wrong alignment on TLUserWidgetItemSlot_GetItemCategory");
static_assert(sizeof(TLUserWidgetItemSlot_GetItemCategory) == 0x000001, "Wrong size on TLUserWidgetItemSlot_GetItemCategory");
static_assert(offsetof(TLUserWidgetItemSlot_GetItemCategory, ReturnValue) == 0x000000, "Member 'TLUserWidgetItemSlot_GetItemCategory::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetItemSlot.IsEnableCompareEquipWeapon
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemSlot_IsEnableCompareEquipWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemSlot_IsEnableCompareEquipWeapon) == 0x000001, "Wrong alignment on TLUserWidgetItemSlot_IsEnableCompareEquipWeapon");
static_assert(sizeof(TLUserWidgetItemSlot_IsEnableCompareEquipWeapon) == 0x000001, "Wrong size on TLUserWidgetItemSlot_IsEnableCompareEquipWeapon");
static_assert(offsetof(TLUserWidgetItemSlot_IsEnableCompareEquipWeapon, ReturnValue) == 0x000000, "Member 'TLUserWidgetItemSlot_IsEnableCompareEquipWeapon::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetItemSlot.IsEnableCompareOtherSlot
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemSlot_IsEnableCompareOtherSlot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemSlot_IsEnableCompareOtherSlot) == 0x000001, "Wrong alignment on TLUserWidgetItemSlot_IsEnableCompareOtherSlot");
static_assert(sizeof(TLUserWidgetItemSlot_IsEnableCompareOtherSlot) == 0x000001, "Wrong size on TLUserWidgetItemSlot_IsEnableCompareOtherSlot");
static_assert(offsetof(TLUserWidgetItemSlot_IsEnableCompareOtherSlot, ReturnValue) == 0x000000, "Member 'TLUserWidgetItemSlot_IsEnableCompareOtherSlot::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetItemSlot.IsWeaponItem
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemSlot_IsWeaponItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemSlot_IsWeaponItem) == 0x000001, "Wrong alignment on TLUserWidgetItemSlot_IsWeaponItem");
static_assert(sizeof(TLUserWidgetItemSlot_IsWeaponItem) == 0x000001, "Wrong size on TLUserWidgetItemSlot_IsWeaponItem");
static_assert(offsetof(TLUserWidgetItemSlot_IsWeaponItem, ReturnValue) == 0x000000, "Member 'TLUserWidgetItemSlot_IsWeaponItem::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetEquipSlot.OnEquipStateUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEquipSlot_OnEquipStateUpdate final
{
public:
	EEquipSlotEvent                               InEvent;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEquipSlot_OnEquipStateUpdate) == 0x000001, "Wrong alignment on TLUserWidgetEquipSlot_OnEquipStateUpdate");
static_assert(sizeof(TLUserWidgetEquipSlot_OnEquipStateUpdate) == 0x000001, "Wrong size on TLUserWidgetEquipSlot_OnEquipStateUpdate");
static_assert(offsetof(TLUserWidgetEquipSlot_OnEquipStateUpdate, InEvent) == 0x000000, "Member 'TLUserWidgetEquipSlot_OnEquipStateUpdate::InEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetEquipSlot.OnFakeItemUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEquipSlot_OnFakeItemUpdate final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEquipSlot_OnFakeItemUpdate) == 0x000001, "Wrong alignment on TLUserWidgetEquipSlot_OnFakeItemUpdate");
static_assert(sizeof(TLUserWidgetEquipSlot_OnFakeItemUpdate) == 0x000001, "Wrong size on TLUserWidgetEquipSlot_OnFakeItemUpdate");
static_assert(offsetof(TLUserWidgetEquipSlot_OnFakeItemUpdate, InValue) == 0x000000, "Member 'TLUserWidgetEquipSlot_OnFakeItemUpdate::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetEquipSlot.OnUpdateEquippable
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEquipSlot_OnUpdateEquippable final
{
public:
	bool                                          InEquippable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEquipSlot_OnUpdateEquippable) == 0x000001, "Wrong alignment on TLUserWidgetEquipSlot_OnUpdateEquippable");
static_assert(sizeof(TLUserWidgetEquipSlot_OnUpdateEquippable) == 0x000001, "Wrong size on TLUserWidgetEquipSlot_OnUpdateEquippable");
static_assert(offsetof(TLUserWidgetEquipSlot_OnUpdateEquippable, InEquippable) == 0x000000, "Member 'TLUserWidgetEquipSlot_OnUpdateEquippable::InEquippable' has a wrong offset!");

// Function TLClient.TLUserWidgetEquipSlot.SetEquipCategory
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEquipSlot_SetEquipCategory final
{
public:
	EEquipCategory                                InCategory;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEquipSlot_SetEquipCategory) == 0x000001, "Wrong alignment on TLUserWidgetEquipSlot_SetEquipCategory");
static_assert(sizeof(TLUserWidgetEquipSlot_SetEquipCategory) == 0x000001, "Wrong size on TLUserWidgetEquipSlot_SetEquipCategory");
static_assert(offsetof(TLUserWidgetEquipSlot_SetEquipCategory, InCategory) == 0x000000, "Member 'TLUserWidgetEquipSlot_SetEquipCategory::InCategory' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.ActivateCustomSceneCameraWithFixedTarget
// 0x0020 (0x0020 - 0x0000)
struct TLCustomSceneControlActor_ActivateCustomSceneCameraWithFixedTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CameraRotation;                                    // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              CameraCenterOffset;                                // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraDistOffset;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_ActivateCustomSceneCameraWithFixedTarget) == 0x000008, "Wrong alignment on TLCustomSceneControlActor_ActivateCustomSceneCameraWithFixedTarget");
static_assert(sizeof(TLCustomSceneControlActor_ActivateCustomSceneCameraWithFixedTarget) == 0x000020, "Wrong size on TLCustomSceneControlActor_ActivateCustomSceneCameraWithFixedTarget");
static_assert(offsetof(TLCustomSceneControlActor_ActivateCustomSceneCameraWithFixedTarget, Target) == 0x000000, "Member 'TLCustomSceneControlActor_ActivateCustomSceneCameraWithFixedTarget::Target' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_ActivateCustomSceneCameraWithFixedTarget, CameraRotation) == 0x000008, "Member 'TLCustomSceneControlActor_ActivateCustomSceneCameraWithFixedTarget::CameraRotation' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_ActivateCustomSceneCameraWithFixedTarget, CameraCenterOffset) == 0x000014, "Member 'TLCustomSceneControlActor_ActivateCustomSceneCameraWithFixedTarget::CameraCenterOffset' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_ActivateCustomSceneCameraWithFixedTarget, CameraDistOffset) == 0x00001C, "Member 'TLCustomSceneControlActor_ActivateCustomSceneCameraWithFixedTarget::CameraDistOffset' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.ActivateCustomSceneCameraWithTargetTag
// 0x0018 (0x0018 - 0x0000)
struct TLCustomSceneControlActor_ActivateCustomSceneCameraWithTargetTag final
{
public:
	class FName                                   TargetObjectTag;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAdvance;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableZoom;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CameraCenterOffset;                                // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraDistOffset;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_ActivateCustomSceneCameraWithTargetTag) == 0x000004, "Wrong alignment on TLCustomSceneControlActor_ActivateCustomSceneCameraWithTargetTag");
static_assert(sizeof(TLCustomSceneControlActor_ActivateCustomSceneCameraWithTargetTag) == 0x000018, "Wrong size on TLCustomSceneControlActor_ActivateCustomSceneCameraWithTargetTag");
static_assert(offsetof(TLCustomSceneControlActor_ActivateCustomSceneCameraWithTargetTag, TargetObjectTag) == 0x000000, "Member 'TLCustomSceneControlActor_ActivateCustomSceneCameraWithTargetTag::TargetObjectTag' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_ActivateCustomSceneCameraWithTargetTag, bEnableAdvance) == 0x000008, "Member 'TLCustomSceneControlActor_ActivateCustomSceneCameraWithTargetTag::bEnableAdvance' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_ActivateCustomSceneCameraWithTargetTag, bEnableZoom) == 0x000009, "Member 'TLCustomSceneControlActor_ActivateCustomSceneCameraWithTargetTag::bEnableZoom' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_ActivateCustomSceneCameraWithTargetTag, CameraCenterOffset) == 0x00000C, "Member 'TLCustomSceneControlActor_ActivateCustomSceneCameraWithTargetTag::CameraCenterOffset' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_ActivateCustomSceneCameraWithTargetTag, CameraDistOffset) == 0x000014, "Member 'TLCustomSceneControlActor_ActivateCustomSceneCameraWithTargetTag::CameraDistOffset' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.ActivateMapEnvironmentAffector
// 0x0014 (0x0014 - 0x0000)
struct TLCustomSceneControlActor_ActivateMapEnvironmentAffector final
{
public:
	class FName                                   InActivationTag;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideBlendDuration;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendDuration;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWind;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLCustomSceneControlActor_ActivateMapEnvironmentAffector) == 0x000004, "Wrong alignment on TLCustomSceneControlActor_ActivateMapEnvironmentAffector");
static_assert(sizeof(TLCustomSceneControlActor_ActivateMapEnvironmentAffector) == 0x000014, "Wrong size on TLCustomSceneControlActor_ActivateMapEnvironmentAffector");
static_assert(offsetof(TLCustomSceneControlActor_ActivateMapEnvironmentAffector, InActivationTag) == 0x000000, "Member 'TLCustomSceneControlActor_ActivateMapEnvironmentAffector::InActivationTag' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_ActivateMapEnvironmentAffector, bOverrideBlendDuration) == 0x000008, "Member 'TLCustomSceneControlActor_ActivateMapEnvironmentAffector::bOverrideBlendDuration' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_ActivateMapEnvironmentAffector, BlendDuration) == 0x00000C, "Member 'TLCustomSceneControlActor_ActivateMapEnvironmentAffector::BlendDuration' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_ActivateMapEnvironmentAffector, bEnableWind) == 0x000010, "Member 'TLCustomSceneControlActor_ActivateMapEnvironmentAffector::bEnableWind' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.ChangeCameraTarget
// 0x000C (0x000C - 0x0000)
struct TLCustomSceneControlActor_ChangeCameraTarget final
{
public:
	class FName                                   CameraTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarp;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceChange;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLCustomSceneControlActor_ChangeCameraTarget) == 0x000004, "Wrong alignment on TLCustomSceneControlActor_ChangeCameraTarget");
static_assert(sizeof(TLCustomSceneControlActor_ChangeCameraTarget) == 0x00000C, "Wrong size on TLCustomSceneControlActor_ChangeCameraTarget");
static_assert(offsetof(TLCustomSceneControlActor_ChangeCameraTarget, CameraTarget) == 0x000000, "Member 'TLCustomSceneControlActor_ChangeCameraTarget::CameraTarget' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_ChangeCameraTarget, bWarp) == 0x000008, "Member 'TLCustomSceneControlActor_ChangeCameraTarget::bWarp' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_ChangeCameraTarget, bForceChange) == 0x000009, "Member 'TLCustomSceneControlActor_ChangeCameraTarget::bForceChange' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_ChangeCameraTarget, ReturnValue) == 0x00000A, "Member 'TLCustomSceneControlActor_ChangeCameraTarget::ReturnValue' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.ChangeEnvironmentSequence
// 0x0010 (0x0010 - 0x0000)
struct TLCustomSceneControlActor_ChangeEnvironmentSequence final
{
public:
	class FName                                   InActivationTag;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         Sequence;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_ChangeEnvironmentSequence) == 0x000008, "Wrong alignment on TLCustomSceneControlActor_ChangeEnvironmentSequence");
static_assert(sizeof(TLCustomSceneControlActor_ChangeEnvironmentSequence) == 0x000010, "Wrong size on TLCustomSceneControlActor_ChangeEnvironmentSequence");
static_assert(offsetof(TLCustomSceneControlActor_ChangeEnvironmentSequence, InActivationTag) == 0x000000, "Member 'TLCustomSceneControlActor_ChangeEnvironmentSequence::InActivationTag' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_ChangeEnvironmentSequence, Sequence) == 0x000008, "Member 'TLCustomSceneControlActor_ChangeEnvironmentSequence::Sequence' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.ChangeHive
// 0x0008 (0x0008 - 0x0000)
struct TLCustomSceneControlActor_ChangeHive final
{
public:
	class UHiveEntityData*                        HiveEntity;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_ChangeHive) == 0x000008, "Wrong alignment on TLCustomSceneControlActor_ChangeHive");
static_assert(sizeof(TLCustomSceneControlActor_ChangeHive) == 0x000008, "Wrong size on TLCustomSceneControlActor_ChangeHive");
static_assert(offsetof(TLCustomSceneControlActor_ChangeHive, HiveEntity) == 0x000000, "Member 'TLCustomSceneControlActor_ChangeHive::HiveEntity' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.ChangeHiveByModelIndex
// 0x0010 (0x0010 - 0x0000)
struct TLCustomSceneControlActor_ChangeHiveByModelIndex final
{
public:
	int32                                         TargetModelIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHiveEntityData*                        HiveEntity;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_ChangeHiveByModelIndex) == 0x000008, "Wrong alignment on TLCustomSceneControlActor_ChangeHiveByModelIndex");
static_assert(sizeof(TLCustomSceneControlActor_ChangeHiveByModelIndex) == 0x000010, "Wrong size on TLCustomSceneControlActor_ChangeHiveByModelIndex");
static_assert(offsetof(TLCustomSceneControlActor_ChangeHiveByModelIndex, TargetModelIndex) == 0x000000, "Member 'TLCustomSceneControlActor_ChangeHiveByModelIndex::TargetModelIndex' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_ChangeHiveByModelIndex, HiveEntity) == 0x000008, "Member 'TLCustomSceneControlActor_ChangeHiveByModelIndex::HiveEntity' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.ChangeHiveByModelTag
// 0x0010 (0x0010 - 0x0000)
struct TLCustomSceneControlActor_ChangeHiveByModelTag final
{
public:
	class FName                                   TargetModelTag;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHiveEntityData*                        HiveEntity;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_ChangeHiveByModelTag) == 0x000008, "Wrong alignment on TLCustomSceneControlActor_ChangeHiveByModelTag");
static_assert(sizeof(TLCustomSceneControlActor_ChangeHiveByModelTag) == 0x000010, "Wrong size on TLCustomSceneControlActor_ChangeHiveByModelTag");
static_assert(offsetof(TLCustomSceneControlActor_ChangeHiveByModelTag, TargetModelTag) == 0x000000, "Member 'TLCustomSceneControlActor_ChangeHiveByModelTag::TargetModelTag' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_ChangeHiveByModelTag, HiveEntity) == 0x000008, "Member 'TLCustomSceneControlActor_ChangeHiveByModelTag::HiveEntity' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.CustomSceneEvent
// 0x0008 (0x0008 - 0x0000)
struct TLCustomSceneControlActor_CustomSceneEvent final
{
public:
	class FName                                   InID;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_CustomSceneEvent) == 0x000004, "Wrong alignment on TLCustomSceneControlActor_CustomSceneEvent");
static_assert(sizeof(TLCustomSceneControlActor_CustomSceneEvent) == 0x000008, "Wrong size on TLCustomSceneControlActor_CustomSceneEvent");
static_assert(offsetof(TLCustomSceneControlActor_CustomSceneEvent, InID) == 0x000000, "Member 'TLCustomSceneControlActor_CustomSceneEvent::InID' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.DestroySceneActor
// 0x0008 (0x0008 - 0x0000)
struct TLCustomSceneControlActor_DestroySceneActor final
{
public:
	class FName                                   TagID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_DestroySceneActor) == 0x000004, "Wrong alignment on TLCustomSceneControlActor_DestroySceneActor");
static_assert(sizeof(TLCustomSceneControlActor_DestroySceneActor) == 0x000008, "Wrong size on TLCustomSceneControlActor_DestroySceneActor");
static_assert(offsetof(TLCustomSceneControlActor_DestroySceneActor, TagID) == 0x000000, "Member 'TLCustomSceneControlActor_DestroySceneActor::TagID' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.GetModelActorByIndex
// 0x0010 (0x0010 - 0x0000)
struct TLCustomSceneControlActor_GetModelActorByIndex final
{
public:
	int32                                         TargetModelIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_GetModelActorByIndex) == 0x000008, "Wrong alignment on TLCustomSceneControlActor_GetModelActorByIndex");
static_assert(sizeof(TLCustomSceneControlActor_GetModelActorByIndex) == 0x000010, "Wrong size on TLCustomSceneControlActor_GetModelActorByIndex");
static_assert(offsetof(TLCustomSceneControlActor_GetModelActorByIndex, TargetModelIndex) == 0x000000, "Member 'TLCustomSceneControlActor_GetModelActorByIndex::TargetModelIndex' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_GetModelActorByIndex, ReturnValue) == 0x000008, "Member 'TLCustomSceneControlActor_GetModelActorByIndex::ReturnValue' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.GetModelActorByTag
// 0x0010 (0x0010 - 0x0000)
struct TLCustomSceneControlActor_GetModelActorByTag final
{
public:
	class FName                                   TargetModelTag;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_GetModelActorByTag) == 0x000008, "Wrong alignment on TLCustomSceneControlActor_GetModelActorByTag");
static_assert(sizeof(TLCustomSceneControlActor_GetModelActorByTag) == 0x000010, "Wrong size on TLCustomSceneControlActor_GetModelActorByTag");
static_assert(offsetof(TLCustomSceneControlActor_GetModelActorByTag, TargetModelTag) == 0x000000, "Member 'TLCustomSceneControlActor_GetModelActorByTag::TargetModelTag' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_GetModelActorByTag, ReturnValue) == 0x000008, "Member 'TLCustomSceneControlActor_GetModelActorByTag::ReturnValue' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.IsBlendingCameraTarget
// 0x0001 (0x0001 - 0x0000)
struct TLCustomSceneControlActor_IsBlendingCameraTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_IsBlendingCameraTarget) == 0x000001, "Wrong alignment on TLCustomSceneControlActor_IsBlendingCameraTarget");
static_assert(sizeof(TLCustomSceneControlActor_IsBlendingCameraTarget) == 0x000001, "Wrong size on TLCustomSceneControlActor_IsBlendingCameraTarget");
static_assert(offsetof(TLCustomSceneControlActor_IsBlendingCameraTarget, ReturnValue) == 0x000000, "Member 'TLCustomSceneControlActor_IsBlendingCameraTarget::ReturnValue' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.IsPlayingLevelSequence
// 0x000C (0x000C - 0x0000)
struct TLCustomSceneControlActor_IsPlayingLevelSequence final
{
public:
	class FName                                   InKey;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLCustomSceneControlActor_IsPlayingLevelSequence) == 0x000004, "Wrong alignment on TLCustomSceneControlActor_IsPlayingLevelSequence");
static_assert(sizeof(TLCustomSceneControlActor_IsPlayingLevelSequence) == 0x00000C, "Wrong size on TLCustomSceneControlActor_IsPlayingLevelSequence");
static_assert(offsetof(TLCustomSceneControlActor_IsPlayingLevelSequence, InKey) == 0x000000, "Member 'TLCustomSceneControlActor_IsPlayingLevelSequence::InKey' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_IsPlayingLevelSequence, ReturnValue) == 0x000008, "Member 'TLCustomSceneControlActor_IsPlayingLevelSequence::ReturnValue' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.PlayLevelSequence
// 0x0020 (0x0020 - 0x0000)
struct TLCustomSceneControlActor_PlayLevelSequence final
{
public:
	class FName                                   InKey;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         InSequence;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSkippable;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtCurrentPOV;                                     // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseAtEnd;                                       // 0x0013(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_PlayLevelSequence) == 0x000008, "Wrong alignment on TLCustomSceneControlActor_PlayLevelSequence");
static_assert(sizeof(TLCustomSceneControlActor_PlayLevelSequence) == 0x000020, "Wrong size on TLCustomSceneControlActor_PlayLevelSequence");
static_assert(offsetof(TLCustomSceneControlActor_PlayLevelSequence, InKey) == 0x000000, "Member 'TLCustomSceneControlActor_PlayLevelSequence::InKey' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlayLevelSequence, InSequence) == 0x000008, "Member 'TLCustomSceneControlActor_PlayLevelSequence::InSequence' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlayLevelSequence, bLoop) == 0x000010, "Member 'TLCustomSceneControlActor_PlayLevelSequence::bLoop' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlayLevelSequence, bIsSkippable) == 0x000011, "Member 'TLCustomSceneControlActor_PlayLevelSequence::bIsSkippable' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlayLevelSequence, bAtCurrentPOV) == 0x000012, "Member 'TLCustomSceneControlActor_PlayLevelSequence::bAtCurrentPOV' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlayLevelSequence, bPauseAtEnd) == 0x000013, "Member 'TLCustomSceneControlActor_PlayLevelSequence::bPauseAtEnd' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlayLevelSequence, ReturnValue) == 0x000018, "Member 'TLCustomSceneControlActor_PlayLevelSequence::ReturnValue' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.PlayLevelSequenceWithDynamicStopCallback
// 0x0030 (0x0030 - 0x0000)
struct TLCustomSceneControlActor_PlayLevelSequenceWithDynamicStopCallback final
{
public:
	class FName                                   InGroupKey;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         InSequence;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnStop;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsSkippable;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtCurrentPOV;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_PlayLevelSequenceWithDynamicStopCallback) == 0x000008, "Wrong alignment on TLCustomSceneControlActor_PlayLevelSequenceWithDynamicStopCallback");
static_assert(sizeof(TLCustomSceneControlActor_PlayLevelSequenceWithDynamicStopCallback) == 0x000030, "Wrong size on TLCustomSceneControlActor_PlayLevelSequenceWithDynamicStopCallback");
static_assert(offsetof(TLCustomSceneControlActor_PlayLevelSequenceWithDynamicStopCallback, InGroupKey) == 0x000000, "Member 'TLCustomSceneControlActor_PlayLevelSequenceWithDynamicStopCallback::InGroupKey' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlayLevelSequenceWithDynamicStopCallback, InSequence) == 0x000008, "Member 'TLCustomSceneControlActor_PlayLevelSequenceWithDynamicStopCallback::InSequence' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlayLevelSequenceWithDynamicStopCallback, OnStop) == 0x000010, "Member 'TLCustomSceneControlActor_PlayLevelSequenceWithDynamicStopCallback::OnStop' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlayLevelSequenceWithDynamicStopCallback, bIsSkippable) == 0x000020, "Member 'TLCustomSceneControlActor_PlayLevelSequenceWithDynamicStopCallback::bIsSkippable' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlayLevelSequenceWithDynamicStopCallback, bAtCurrentPOV) == 0x000021, "Member 'TLCustomSceneControlActor_PlayLevelSequenceWithDynamicStopCallback::bAtCurrentPOV' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlayLevelSequenceWithDynamicStopCallback, ReturnValue) == 0x000028, "Member 'TLCustomSceneControlActor_PlayLevelSequenceWithDynamicStopCallback::ReturnValue' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.PlayLevelSequenceWithStopCallback
// 0x0028 (0x0028 - 0x0000)
struct TLCustomSceneControlActor_PlayLevelSequenceWithStopCallback final
{
public:
	class FName                                   InGroupKey;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         InSequence;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InFunctionName;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSkippable;                                      // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtCurrentPOV;                                     // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_PlayLevelSequenceWithStopCallback) == 0x000008, "Wrong alignment on TLCustomSceneControlActor_PlayLevelSequenceWithStopCallback");
static_assert(sizeof(TLCustomSceneControlActor_PlayLevelSequenceWithStopCallback) == 0x000028, "Wrong size on TLCustomSceneControlActor_PlayLevelSequenceWithStopCallback");
static_assert(offsetof(TLCustomSceneControlActor_PlayLevelSequenceWithStopCallback, InGroupKey) == 0x000000, "Member 'TLCustomSceneControlActor_PlayLevelSequenceWithStopCallback::InGroupKey' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlayLevelSequenceWithStopCallback, InSequence) == 0x000008, "Member 'TLCustomSceneControlActor_PlayLevelSequenceWithStopCallback::InSequence' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlayLevelSequenceWithStopCallback, InFunctionName) == 0x000010, "Member 'TLCustomSceneControlActor_PlayLevelSequenceWithStopCallback::InFunctionName' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlayLevelSequenceWithStopCallback, bLoop) == 0x000018, "Member 'TLCustomSceneControlActor_PlayLevelSequenceWithStopCallback::bLoop' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlayLevelSequenceWithStopCallback, bIsSkippable) == 0x000019, "Member 'TLCustomSceneControlActor_PlayLevelSequenceWithStopCallback::bIsSkippable' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlayLevelSequenceWithStopCallback, bAtCurrentPOV) == 0x00001A, "Member 'TLCustomSceneControlActor_PlayLevelSequenceWithStopCallback::bAtCurrentPOV' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlayLevelSequenceWithStopCallback, ReturnValue) == 0x000020, "Member 'TLCustomSceneControlActor_PlayLevelSequenceWithStopCallback::ReturnValue' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.PlaySceneContiByModelIndex
// 0x0028 (0x0028 - 0x0000)
struct TLCustomSceneControlActor_PlaySceneContiByModelIndex final
{
public:
	int32                                         TargetModelIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        InSceneContiPath;                                  // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainCurrentSCT;                               // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForcePlay;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLCustomSceneControlActor_PlaySceneContiByModelIndex) == 0x000008, "Wrong alignment on TLCustomSceneControlActor_PlaySceneContiByModelIndex");
static_assert(sizeof(TLCustomSceneControlActor_PlaySceneContiByModelIndex) == 0x000028, "Wrong size on TLCustomSceneControlActor_PlaySceneContiByModelIndex");
static_assert(offsetof(TLCustomSceneControlActor_PlaySceneContiByModelIndex, TargetModelIndex) == 0x000000, "Member 'TLCustomSceneControlActor_PlaySceneContiByModelIndex::TargetModelIndex' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlaySceneContiByModelIndex, InSceneContiPath) == 0x000008, "Member 'TLCustomSceneControlActor_PlaySceneContiByModelIndex::InSceneContiPath' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlaySceneContiByModelIndex, bMaintainCurrentSCT) == 0x000020, "Member 'TLCustomSceneControlActor_PlaySceneContiByModelIndex::bMaintainCurrentSCT' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlaySceneContiByModelIndex, bForcePlay) == 0x000021, "Member 'TLCustomSceneControlActor_PlaySceneContiByModelIndex::bForcePlay' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.PlaySceneContiByModelTag
// 0x0028 (0x0028 - 0x0000)
struct TLCustomSceneControlActor_PlaySceneContiByModelTag final
{
public:
	class FName                                   TargetModelTag;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        InSceneContiPath;                                  // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainCurrentSCT;                               // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForcePlay;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLCustomSceneControlActor_PlaySceneContiByModelTag) == 0x000008, "Wrong alignment on TLCustomSceneControlActor_PlaySceneContiByModelTag");
static_assert(sizeof(TLCustomSceneControlActor_PlaySceneContiByModelTag) == 0x000028, "Wrong size on TLCustomSceneControlActor_PlaySceneContiByModelTag");
static_assert(offsetof(TLCustomSceneControlActor_PlaySceneContiByModelTag, TargetModelTag) == 0x000000, "Member 'TLCustomSceneControlActor_PlaySceneContiByModelTag::TargetModelTag' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlaySceneContiByModelTag, InSceneContiPath) == 0x000008, "Member 'TLCustomSceneControlActor_PlaySceneContiByModelTag::InSceneContiPath' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlaySceneContiByModelTag, bMaintainCurrentSCT) == 0x000020, "Member 'TLCustomSceneControlActor_PlaySceneContiByModelTag::bMaintainCurrentSCT' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_PlaySceneContiByModelTag, bForcePlay) == 0x000021, "Member 'TLCustomSceneControlActor_PlaySceneContiByModelTag::bForcePlay' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.SetCameraPreviewMode
// 0x0001 (0x0001 - 0x0000)
struct TLCustomSceneControlActor_SetCameraPreviewMode final
{
public:
	EPreviewCameraMode                            InMode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_SetCameraPreviewMode) == 0x000001, "Wrong alignment on TLCustomSceneControlActor_SetCameraPreviewMode");
static_assert(sizeof(TLCustomSceneControlActor_SetCameraPreviewMode) == 0x000001, "Wrong size on TLCustomSceneControlActor_SetCameraPreviewMode");
static_assert(offsetof(TLCustomSceneControlActor_SetCameraPreviewMode, InMode) == 0x000000, "Member 'TLCustomSceneControlActor_SetCameraPreviewMode::InMode' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.SetCameraRotation
// 0x000C (0x000C - 0x0000)
struct TLCustomSceneControlActor_SetCameraRotation final
{
public:
	struct FRotator                               CameraRotation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_SetCameraRotation) == 0x000004, "Wrong alignment on TLCustomSceneControlActor_SetCameraRotation");
static_assert(sizeof(TLCustomSceneControlActor_SetCameraRotation) == 0x00000C, "Wrong size on TLCustomSceneControlActor_SetCameraRotation");
static_assert(offsetof(TLCustomSceneControlActor_SetCameraRotation, CameraRotation) == 0x000000, "Member 'TLCustomSceneControlActor_SetCameraRotation::CameraRotation' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.SetMapRoom
// 0x0008 (0x0008 - 0x0000)
struct TLCustomSceneControlActor_SetMapRoom final
{
public:
	class FName                                   InID;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_SetMapRoom) == 0x000004, "Wrong alignment on TLCustomSceneControlActor_SetMapRoom");
static_assert(sizeof(TLCustomSceneControlActor_SetMapRoom) == 0x000008, "Wrong size on TLCustomSceneControlActor_SetMapRoom");
static_assert(offsetof(TLCustomSceneControlActor_SetMapRoom, InID) == 0x000000, "Member 'TLCustomSceneControlActor_SetMapRoom::InID' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.SetModelRotationOffset
// 0x000C (0x000C - 0x0000)
struct TLCustomSceneControlActor_SetModelRotationOffset final
{
public:
	struct FRotator                               InOffsetRotation;                                  // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_SetModelRotationOffset) == 0x000004, "Wrong alignment on TLCustomSceneControlActor_SetModelRotationOffset");
static_assert(sizeof(TLCustomSceneControlActor_SetModelRotationOffset) == 0x00000C, "Wrong size on TLCustomSceneControlActor_SetModelRotationOffset");
static_assert(offsetof(TLCustomSceneControlActor_SetModelRotationOffset, InOffsetRotation) == 0x000000, "Member 'TLCustomSceneControlActor_SetModelRotationOffset::InOffsetRotation' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.ShowUIAll
// 0x0001 (0x0001 - 0x0000)
struct TLCustomSceneControlActor_ShowUIAll final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_ShowUIAll) == 0x000001, "Wrong alignment on TLCustomSceneControlActor_ShowUIAll");
static_assert(sizeof(TLCustomSceneControlActor_ShowUIAll) == 0x000001, "Wrong size on TLCustomSceneControlActor_ShowUIAll");
static_assert(offsetof(TLCustomSceneControlActor_ShowUIAll, bInShow) == 0x000000, "Member 'TLCustomSceneControlActor_ShowUIAll::bInShow' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.SpawnDomeActor
// 0x0008 (0x0008 - 0x0000)
struct TLCustomSceneControlActor_SpawnDomeActor final
{
public:
	TSubclassOf<class AActor>                     InDomeActorClass;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_SpawnDomeActor) == 0x000008, "Wrong alignment on TLCustomSceneControlActor_SpawnDomeActor");
static_assert(sizeof(TLCustomSceneControlActor_SpawnDomeActor) == 0x000008, "Wrong size on TLCustomSceneControlActor_SpawnDomeActor");
static_assert(offsetof(TLCustomSceneControlActor_SpawnDomeActor, InDomeActorClass) == 0x000000, "Member 'TLCustomSceneControlActor_SpawnDomeActor::InDomeActorClass' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.SpawnSceneActor
// 0x0018 (0x0018 - 0x0000)
struct TLCustomSceneControlActor_SpawnSceneActor final
{
public:
	class UClass*                                 ActorClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagID;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_SpawnSceneActor) == 0x000008, "Wrong alignment on TLCustomSceneControlActor_SpawnSceneActor");
static_assert(sizeof(TLCustomSceneControlActor_SpawnSceneActor) == 0x000018, "Wrong size on TLCustomSceneControlActor_SpawnSceneActor");
static_assert(offsetof(TLCustomSceneControlActor_SpawnSceneActor, ActorClass) == 0x000000, "Member 'TLCustomSceneControlActor_SpawnSceneActor::ActorClass' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_SpawnSceneActor, TagID) == 0x000008, "Member 'TLCustomSceneControlActor_SpawnSceneActor::TagID' has a wrong offset!");
static_assert(offsetof(TLCustomSceneControlActor_SpawnSceneActor, ReturnValue) == 0x000010, "Member 'TLCustomSceneControlActor_SpawnSceneActor::ReturnValue' has a wrong offset!");

// Function TLClient.TLCustomSceneControlActor.StopLevelSequence
// 0x0008 (0x0008 - 0x0000)
struct TLCustomSceneControlActor_StopLevelSequence final
{
public:
	class FName                                   InKey;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomSceneControlActor_StopLevelSequence) == 0x000004, "Wrong alignment on TLCustomSceneControlActor_StopLevelSequence");
static_assert(sizeof(TLCustomSceneControlActor_StopLevelSequence) == 0x000008, "Wrong size on TLCustomSceneControlActor_StopLevelSequence");
static_assert(offsetof(TLCustomSceneControlActor_StopLevelSequence, InKey) == 0x000000, "Member 'TLCustomSceneControlActor_StopLevelSequence::InKey' has a wrong offset!");

// Function TLClient.TLUserWidgetDynamicEventListText.OnUpdateInfo
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetDynamicEventListText_OnUpdateInfo final
{
public:
	ETLDEEventEffectStorePointState               StorePointState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTopPlayer;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDynamicEventListText_OnUpdateInfo) == 0x000001, "Wrong alignment on TLUserWidgetDynamicEventListText_OnUpdateInfo");
static_assert(sizeof(TLUserWidgetDynamicEventListText_OnUpdateInfo) == 0x000002, "Wrong size on TLUserWidgetDynamicEventListText_OnUpdateInfo");
static_assert(offsetof(TLUserWidgetDynamicEventListText_OnUpdateInfo, StorePointState) == 0x000000, "Member 'TLUserWidgetDynamicEventListText_OnUpdateInfo::StorePointState' has a wrong offset!");
static_assert(offsetof(TLUserWidgetDynamicEventListText_OnUpdateInfo, bTopPlayer) == 0x000001, "Member 'TLUserWidgetDynamicEventListText_OnUpdateInfo::bTopPlayer' has a wrong offset!");

// Function TLClient.TLUserWidgetContractBoard.OnUpdateRefreshContractList
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContractBoard_OnUpdateRefreshContractList final
{
public:
	EContractRefreshListReason                    InContractRefreshListReason;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractBoard_OnUpdateRefreshContractList) == 0x000001, "Wrong alignment on TLUserWidgetContractBoard_OnUpdateRefreshContractList");
static_assert(sizeof(TLUserWidgetContractBoard_OnUpdateRefreshContractList) == 0x000001, "Wrong size on TLUserWidgetContractBoard_OnUpdateRefreshContractList");
static_assert(offsetof(TLUserWidgetContractBoard_OnUpdateRefreshContractList, InContractRefreshListReason) == 0x000000, "Member 'TLUserWidgetContractBoard_OnUpdateRefreshContractList::InContractRefreshListReason' has a wrong offset!");

// Function TLClient.TLUserWidgetShopPrice.GetMoneyType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetShopPrice_GetMoneyType final
{
public:
	EMoneyType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetShopPrice_GetMoneyType) == 0x000001, "Wrong alignment on TLUserWidgetShopPrice_GetMoneyType");
static_assert(sizeof(TLUserWidgetShopPrice_GetMoneyType) == 0x000001, "Wrong size on TLUserWidgetShopPrice_GetMoneyType");
static_assert(offsetof(TLUserWidgetShopPrice_GetMoneyType, ReturnValue) == 0x000000, "Member 'TLUserWidgetShopPrice_GetMoneyType::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetShopPrice.GetPrice
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetShopPrice_GetPrice final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetShopPrice_GetPrice) == 0x000008, "Wrong alignment on TLUserWidgetShopPrice_GetPrice");
static_assert(sizeof(TLUserWidgetShopPrice_GetPrice) == 0x000008, "Wrong size on TLUserWidgetShopPrice_GetPrice");
static_assert(offsetof(TLUserWidgetShopPrice_GetPrice, ReturnValue) == 0x000000, "Member 'TLUserWidgetShopPrice_GetPrice::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetShopPrice.SetEnoughCost
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetShopPrice_SetEnoughCost final
{
public:
	bool                                          bInEnoughCost;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetShopPrice_SetEnoughCost) == 0x000001, "Wrong alignment on TLUserWidgetShopPrice_SetEnoughCost");
static_assert(sizeof(TLUserWidgetShopPrice_SetEnoughCost) == 0x000001, "Wrong size on TLUserWidgetShopPrice_SetEnoughCost");
static_assert(offsetof(TLUserWidgetShopPrice_SetEnoughCost, bInEnoughCost) == 0x000000, "Member 'TLUserWidgetShopPrice_SetEnoughCost::bInEnoughCost' has a wrong offset!");

// Function TLClient.TLUserWidgetDiscountShopPrice.OnDiscount
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDiscountShopPrice_OnDiscount final
{
public:
	bool                                          InIsDiscount;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDiscountShopPrice_OnDiscount) == 0x000001, "Wrong alignment on TLUserWidgetDiscountShopPrice_OnDiscount");
static_assert(sizeof(TLUserWidgetDiscountShopPrice_OnDiscount) == 0x000001, "Wrong size on TLUserWidgetDiscountShopPrice_OnDiscount");
static_assert(offsetof(TLUserWidgetDiscountShopPrice_OnDiscount, InIsDiscount) == 0x000000, "Member 'TLUserWidgetDiscountShopPrice_OnDiscount::InIsDiscount' has a wrong offset!");

// Function TLClient.TLUserWidgetOptionGameValue.LinkGameValue
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetOptionGameValue_LinkGameValue final
{
public:
	class FName                                   InGameValueFullName;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOptionGameValue_LinkGameValue) == 0x000004, "Wrong alignment on TLUserWidgetOptionGameValue_LinkGameValue");
static_assert(sizeof(TLUserWidgetOptionGameValue_LinkGameValue) == 0x000008, "Wrong size on TLUserWidgetOptionGameValue_LinkGameValue");
static_assert(offsetof(TLUserWidgetOptionGameValue_LinkGameValue, InGameValueFullName) == 0x000000, "Member 'TLUserWidgetOptionGameValue_LinkGameValue::InGameValueFullName' has a wrong offset!");

// Function TLClient.TLUserWidgetOptionGameValueBool2Button.HandleButtonOffChecked
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetOptionGameValueBool2Button_HandleButtonOffChecked final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOptionGameValueBool2Button_HandleButtonOffChecked) == 0x000001, "Wrong alignment on TLUserWidgetOptionGameValueBool2Button_HandleButtonOffChecked");
static_assert(sizeof(TLUserWidgetOptionGameValueBool2Button_HandleButtonOffChecked) == 0x000001, "Wrong size on TLUserWidgetOptionGameValueBool2Button_HandleButtonOffChecked");
static_assert(offsetof(TLUserWidgetOptionGameValueBool2Button_HandleButtonOffChecked, bIsChecked) == 0x000000, "Member 'TLUserWidgetOptionGameValueBool2Button_HandleButtonOffChecked::bIsChecked' has a wrong offset!");

// Function TLClient.TLUserWidgetOptionGameValueBool2Button.HandleButtonOnChecked
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetOptionGameValueBool2Button_HandleButtonOnChecked final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOptionGameValueBool2Button_HandleButtonOnChecked) == 0x000001, "Wrong alignment on TLUserWidgetOptionGameValueBool2Button_HandleButtonOnChecked");
static_assert(sizeof(TLUserWidgetOptionGameValueBool2Button_HandleButtonOnChecked) == 0x000001, "Wrong size on TLUserWidgetOptionGameValueBool2Button_HandleButtonOnChecked");
static_assert(offsetof(TLUserWidgetOptionGameValueBool2Button_HandleButtonOnChecked, bIsChecked) == 0x000000, "Member 'TLUserWidgetOptionGameValueBool2Button_HandleButtonOnChecked::bIsChecked' has a wrong offset!");

// Function TLClient.TLUserWidgetContractListItem.OnBinding
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetContractListItem_OnBinding final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractListItem_OnBinding) == 0x000008, "Wrong alignment on TLUserWidgetContractListItem_OnBinding");
static_assert(sizeof(TLUserWidgetContractListItem_OnBinding) == 0x000008, "Wrong size on TLUserWidgetContractListItem_OnBinding");
static_assert(offsetof(TLUserWidgetContractListItem_OnBinding, InObject) == 0x000000, "Member 'TLUserWidgetContractListItem_OnBinding::InObject' has a wrong offset!");

// Function TLClient.TLUserWidgetContractListItem.OnMembershipActivate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContractListItem_OnMembershipActivate final
{
public:
	bool                                          bInIsActivate;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractListItem_OnMembershipActivate) == 0x000001, "Wrong alignment on TLUserWidgetContractListItem_OnMembershipActivate");
static_assert(sizeof(TLUserWidgetContractListItem_OnMembershipActivate) == 0x000001, "Wrong size on TLUserWidgetContractListItem_OnMembershipActivate");
static_assert(offsetof(TLUserWidgetContractListItem_OnMembershipActivate, bInIsActivate) == 0x000000, "Member 'TLUserWidgetContractListItem_OnMembershipActivate::bInIsActivate' has a wrong offset!");

// Function TLClient.TLUserWidgetItemSlotContextMenu.GetContextMenuWidget
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetItemSlotContextMenu_GetContextMenuWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemSlotContextMenu_GetContextMenuWidget) == 0x000008, "Wrong alignment on TLUserWidgetItemSlotContextMenu_GetContextMenuWidget");
static_assert(sizeof(TLUserWidgetItemSlotContextMenu_GetContextMenuWidget) == 0x000008, "Wrong size on TLUserWidgetItemSlotContextMenu_GetContextMenuWidget");
static_assert(offsetof(TLUserWidgetItemSlotContextMenu_GetContextMenuWidget, ReturnValue) == 0x000000, "Member 'TLUserWidgetItemSlotContextMenu_GetContextMenuWidget::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetItemSlotContextMenu.SetMenuAnchor
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetItemSlotContextMenu_SetMenuAnchor final
{
public:
	class UTLMenuAnchor*                          InMenuAnchor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemSlotContextMenu_SetMenuAnchor) == 0x000008, "Wrong alignment on TLUserWidgetItemSlotContextMenu_SetMenuAnchor");
static_assert(sizeof(TLUserWidgetItemSlotContextMenu_SetMenuAnchor) == 0x000008, "Wrong size on TLUserWidgetItemSlotContextMenu_SetMenuAnchor");
static_assert(offsetof(TLUserWidgetItemSlotContextMenu_SetMenuAnchor, InMenuAnchor) == 0x000000, "Member 'TLUserWidgetItemSlotContextMenu_SetMenuAnchor::InMenuAnchor' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferStatInfo.EventChangeFlow
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetEnchantTransferStatInfo_EventChangeFlow final
{
public:
	ETLEnchantTransferFlow                        InNewFlow;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLEnchantTransferFlow                        InPrevFlow;                                        // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferStatInfo_EventChangeFlow) == 0x000001, "Wrong alignment on TLUserWidgetEnchantTransferStatInfo_EventChangeFlow");
static_assert(sizeof(TLUserWidgetEnchantTransferStatInfo_EventChangeFlow) == 0x000002, "Wrong size on TLUserWidgetEnchantTransferStatInfo_EventChangeFlow");
static_assert(offsetof(TLUserWidgetEnchantTransferStatInfo_EventChangeFlow, InNewFlow) == 0x000000, "Member 'TLUserWidgetEnchantTransferStatInfo_EventChangeFlow::InNewFlow' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantTransferStatInfo_EventChangeFlow, InPrevFlow) == 0x000001, "Member 'TLUserWidgetEnchantTransferStatInfo_EventChangeFlow::InPrevFlow' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferStatInfo.EventEnchantTransferResult
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetEnchantTransferStatInfo_EventEnchantTransferResult final
{
public:
	ETLEnchantTransferResult                      InResult;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLevelChange;                                    // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferStatInfo_EventEnchantTransferResult) == 0x000001, "Wrong alignment on TLUserWidgetEnchantTransferStatInfo_EventEnchantTransferResult");
static_assert(sizeof(TLUserWidgetEnchantTransferStatInfo_EventEnchantTransferResult) == 0x000002, "Wrong size on TLUserWidgetEnchantTransferStatInfo_EventEnchantTransferResult");
static_assert(offsetof(TLUserWidgetEnchantTransferStatInfo_EventEnchantTransferResult, InResult) == 0x000000, "Member 'TLUserWidgetEnchantTransferStatInfo_EventEnchantTransferResult::InResult' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantTransferStatInfo_EventEnchantTransferResult, bInLevelChange) == 0x000001, "Member 'TLUserWidgetEnchantTransferStatInfo_EventEnchantTransferResult::bInLevelChange' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferStatInfo.EventMaterialItemChange
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetEnchantTransferStatInfo_EventMaterialItemChange final
{
public:
	uint64                                        InNewItemID;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        InPrevItemID;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferStatInfo_EventMaterialItemChange) == 0x000008, "Wrong alignment on TLUserWidgetEnchantTransferStatInfo_EventMaterialItemChange");
static_assert(sizeof(TLUserWidgetEnchantTransferStatInfo_EventMaterialItemChange) == 0x000010, "Wrong size on TLUserWidgetEnchantTransferStatInfo_EventMaterialItemChange");
static_assert(offsetof(TLUserWidgetEnchantTransferStatInfo_EventMaterialItemChange, InNewItemID) == 0x000000, "Member 'TLUserWidgetEnchantTransferStatInfo_EventMaterialItemChange::InNewItemID' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantTransferStatInfo_EventMaterialItemChange, InPrevItemID) == 0x000008, "Member 'TLUserWidgetEnchantTransferStatInfo_EventMaterialItemChange::InPrevItemID' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferStatInfo.EventProgressActionEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantTransferStatInfo_EventProgressActionEvent final
{
public:
	ETLEnchantTransferProgressActionEvent         InEvent;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferStatInfo_EventProgressActionEvent) == 0x000001, "Wrong alignment on TLUserWidgetEnchantTransferStatInfo_EventProgressActionEvent");
static_assert(sizeof(TLUserWidgetEnchantTransferStatInfo_EventProgressActionEvent) == 0x000001, "Wrong size on TLUserWidgetEnchantTransferStatInfo_EventProgressActionEvent");
static_assert(offsetof(TLUserWidgetEnchantTransferStatInfo_EventProgressActionEvent, InEvent) == 0x000000, "Member 'TLUserWidgetEnchantTransferStatInfo_EventProgressActionEvent::InEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferStatInfo.EventTargetItemChange
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetEnchantTransferStatInfo_EventTargetItemChange final
{
public:
	uint64                                        InNewItemID;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        InPrevItemID;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferStatInfo_EventTargetItemChange) == 0x000008, "Wrong alignment on TLUserWidgetEnchantTransferStatInfo_EventTargetItemChange");
static_assert(sizeof(TLUserWidgetEnchantTransferStatInfo_EventTargetItemChange) == 0x000010, "Wrong size on TLUserWidgetEnchantTransferStatInfo_EventTargetItemChange");
static_assert(offsetof(TLUserWidgetEnchantTransferStatInfo_EventTargetItemChange, InNewItemID) == 0x000000, "Member 'TLUserWidgetEnchantTransferStatInfo_EventTargetItemChange::InNewItemID' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantTransferStatInfo_EventTargetItemChange, InPrevItemID) == 0x000008, "Member 'TLUserWidgetEnchantTransferStatInfo_EventTargetItemChange::InPrevItemID' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferStatInfo.OnShowOnlyDefaultStat
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantTransferStatInfo_OnShowOnlyDefaultStat final
{
public:
	bool                                          bInShowOnlyDefaultStat;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferStatInfo_OnShowOnlyDefaultStat) == 0x000001, "Wrong alignment on TLUserWidgetEnchantTransferStatInfo_OnShowOnlyDefaultStat");
static_assert(sizeof(TLUserWidgetEnchantTransferStatInfo_OnShowOnlyDefaultStat) == 0x000001, "Wrong size on TLUserWidgetEnchantTransferStatInfo_OnShowOnlyDefaultStat");
static_assert(offsetof(TLUserWidgetEnchantTransferStatInfo_OnShowOnlyDefaultStat, bInShowOnlyDefaultStat) == 0x000000, "Member 'TLUserWidgetEnchantTransferStatInfo_OnShowOnlyDefaultStat::bInShowOnlyDefaultStat' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMatchingSelectPopup.OnChangeUIPlatformImpl
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMatchingSelectPopup_OnChangeUIPlatformImpl final
{
public:
	ETLUIPlatform                                 InPlatform;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMatchingSelectPopup_OnChangeUIPlatformImpl) == 0x000001, "Wrong alignment on TLUserWidgetPartyMatchingSelectPopup_OnChangeUIPlatformImpl");
static_assert(sizeof(TLUserWidgetPartyMatchingSelectPopup_OnChangeUIPlatformImpl) == 0x000001, "Wrong size on TLUserWidgetPartyMatchingSelectPopup_OnChangeUIPlatformImpl");
static_assert(offsetof(TLUserWidgetPartyMatchingSelectPopup_OnChangeUIPlatformImpl, InPlatform) == 0x000000, "Member 'TLUserWidgetPartyMatchingSelectPopup_OnChangeUIPlatformImpl::InPlatform' has a wrong offset!");

// Function TLClient.TLUserWidgetRestorationConfirm.OnHintRestorationCount
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetRestorationConfirm_OnHintRestorationCount final
{
public:
	int32                                         FreeCount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostCount;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRestorationConfirm_OnHintRestorationCount) == 0x000004, "Wrong alignment on TLUserWidgetRestorationConfirm_OnHintRestorationCount");
static_assert(sizeof(TLUserWidgetRestorationConfirm_OnHintRestorationCount) == 0x000008, "Wrong size on TLUserWidgetRestorationConfirm_OnHintRestorationCount");
static_assert(offsetof(TLUserWidgetRestorationConfirm_OnHintRestorationCount, FreeCount) == 0x000000, "Member 'TLUserWidgetRestorationConfirm_OnHintRestorationCount::FreeCount' has a wrong offset!");
static_assert(offsetof(TLUserWidgetRestorationConfirm_OnHintRestorationCount, CostCount) == 0x000004, "Member 'TLUserWidgetRestorationConfirm_OnHintRestorationCount::CostCount' has a wrong offset!");

// Function TLClient.TLSkillObject.IsEnchantNoneType
// 0x0001 (0x0001 - 0x0000)
struct TLSkillObject_IsEnchantNoneType final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSkillObject_IsEnchantNoneType) == 0x000001, "Wrong alignment on TLSkillObject_IsEnchantNoneType");
static_assert(sizeof(TLSkillObject_IsEnchantNoneType) == 0x000001, "Wrong size on TLSkillObject_IsEnchantNoneType");
static_assert(offsetof(TLSkillObject_IsEnchantNoneType, ReturnValue) == 0x000000, "Member 'TLSkillObject_IsEnchantNoneType::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetItemPackageResultSlot.OnItemNameUpdate
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetItemPackageResultSlot_OnItemNameUpdate final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemPackageResultSlot_OnItemNameUpdate) == 0x000008, "Wrong alignment on TLUserWidgetItemPackageResultSlot_OnItemNameUpdate");
static_assert(sizeof(TLUserWidgetItemPackageResultSlot_OnItemNameUpdate) == 0x000018, "Wrong size on TLUserWidgetItemPackageResultSlot_OnItemNameUpdate");
static_assert(offsetof(TLUserWidgetItemPackageResultSlot_OnItemNameUpdate, InName) == 0x000000, "Member 'TLUserWidgetItemPackageResultSlot_OnItemNameUpdate::InName' has a wrong offset!");

// Function TLClient.TLWidgetConsole.ChangeActionGuide
// 0x0008 (0x0008 - 0x0000)
struct TLWidgetConsole_ChangeActionGuide final
{
public:
	class UTLUserWidgetActionGuide*               InActionGuide;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWidgetConsole_ChangeActionGuide) == 0x000008, "Wrong alignment on TLWidgetConsole_ChangeActionGuide");
static_assert(sizeof(TLWidgetConsole_ChangeActionGuide) == 0x000008, "Wrong size on TLWidgetConsole_ChangeActionGuide");
static_assert(offsetof(TLWidgetConsole_ChangeActionGuide, InActionGuide) == 0x000000, "Member 'TLWidgetConsole_ChangeActionGuide::InActionGuide' has a wrong offset!");

// Function TLClient.TLWidgetConsole.SetContentsWidget
// 0x0008 (0x0008 - 0x0000)
struct TLWidgetConsole_SetContentsWidget final
{
public:
	class UTLUserWidgetTopLevel*                  InContentsWidget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWidgetConsole_SetContentsWidget) == 0x000008, "Wrong alignment on TLWidgetConsole_SetContentsWidget");
static_assert(sizeof(TLWidgetConsole_SetContentsWidget) == 0x000008, "Wrong size on TLWidgetConsole_SetContentsWidget");
static_assert(offsetof(TLWidgetConsole_SetContentsWidget, InContentsWidget) == 0x000000, "Member 'TLWidgetConsole_SetContentsWidget::InContentsWidget' has a wrong offset!");

// Function TLClient.TLUserWidgetInteractableMark.OnCastingEnd
// 0x0003 (0x0003 - 0x0000)
struct TLUserWidgetInteractableMark_OnCastingEnd final
{
public:
	ECastingEndReason                             CastingEndReason;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInMyPcCasting;                                    // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInShowCooperateNum;                               // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInteractableMark_OnCastingEnd) == 0x000001, "Wrong alignment on TLUserWidgetInteractableMark_OnCastingEnd");
static_assert(sizeof(TLUserWidgetInteractableMark_OnCastingEnd) == 0x000003, "Wrong size on TLUserWidgetInteractableMark_OnCastingEnd");
static_assert(offsetof(TLUserWidgetInteractableMark_OnCastingEnd, CastingEndReason) == 0x000000, "Member 'TLUserWidgetInteractableMark_OnCastingEnd::CastingEndReason' has a wrong offset!");
static_assert(offsetof(TLUserWidgetInteractableMark_OnCastingEnd, bInMyPcCasting) == 0x000001, "Member 'TLUserWidgetInteractableMark_OnCastingEnd::bInMyPcCasting' has a wrong offset!");
static_assert(offsetof(TLUserWidgetInteractableMark_OnCastingEnd, bInShowCooperateNum) == 0x000002, "Member 'TLUserWidgetInteractableMark_OnCastingEnd::bInShowCooperateNum' has a wrong offset!");

// Function TLClient.TLUserWidgetInteractableMark.OnCastingStart
// 0x0003 (0x0003 - 0x0000)
struct TLUserWidgetInteractableMark_OnCastingStart final
{
public:
	bool                                          bInMyPcCasting;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCooperative;                                    // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInShowCooperateNum;                               // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInteractableMark_OnCastingStart) == 0x000001, "Wrong alignment on TLUserWidgetInteractableMark_OnCastingStart");
static_assert(sizeof(TLUserWidgetInteractableMark_OnCastingStart) == 0x000003, "Wrong size on TLUserWidgetInteractableMark_OnCastingStart");
static_assert(offsetof(TLUserWidgetInteractableMark_OnCastingStart, bInMyPcCasting) == 0x000000, "Member 'TLUserWidgetInteractableMark_OnCastingStart::bInMyPcCasting' has a wrong offset!");
static_assert(offsetof(TLUserWidgetInteractableMark_OnCastingStart, bInCooperative) == 0x000001, "Member 'TLUserWidgetInteractableMark_OnCastingStart::bInCooperative' has a wrong offset!");
static_assert(offsetof(TLUserWidgetInteractableMark_OnCastingStart, bInShowCooperateNum) == 0x000002, "Member 'TLUserWidgetInteractableMark_OnCastingStart::bInShowCooperateNum' has a wrong offset!");

// Function TLClient.TLUserWidgetCustomizeFileBrowserSlot.OnSavedFileObjectSelect
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetCustomizeFileBrowserSlot_OnSavedFileObjectSelect final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediately;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCustomizeFileBrowserSlot_OnSavedFileObjectSelect) == 0x000001, "Wrong alignment on TLUserWidgetCustomizeFileBrowserSlot_OnSavedFileObjectSelect");
static_assert(sizeof(TLUserWidgetCustomizeFileBrowserSlot_OnSavedFileObjectSelect) == 0x000002, "Wrong size on TLUserWidgetCustomizeFileBrowserSlot_OnSavedFileObjectSelect");
static_assert(offsetof(TLUserWidgetCustomizeFileBrowserSlot_OnSavedFileObjectSelect, bSelected) == 0x000000, "Member 'TLUserWidgetCustomizeFileBrowserSlot_OnSavedFileObjectSelect::bSelected' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCustomizeFileBrowserSlot_OnSavedFileObjectSelect, bImmediately) == 0x000001, "Member 'TLUserWidgetCustomizeFileBrowserSlot_OnSavedFileObjectSelect::bImmediately' has a wrong offset!");

// Function TLClient.LEWidgetBPLibrary.GetFPS
// 0x0004 (0x0004 - 0x0000)
struct LEWidgetBPLibrary_GetFPS final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LEWidgetBPLibrary_GetFPS) == 0x000004, "Wrong alignment on LEWidgetBPLibrary_GetFPS");
static_assert(sizeof(LEWidgetBPLibrary_GetFPS) == 0x000004, "Wrong size on LEWidgetBPLibrary_GetFPS");
static_assert(offsetof(LEWidgetBPLibrary_GetFPS, ReturnValue) == 0x000000, "Member 'LEWidgetBPLibrary_GetFPS::ReturnValue' has a wrong offset!");

// Function TLClient.TLTimelineSceneManager.HandleChangeMapRegionType
// 0x0001 (0x0001 - 0x0000)
struct TLTimelineSceneManager_HandleChangeMapRegionType final
{
public:
	EMapRegionType                                InMapRegionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTimelineSceneManager_HandleChangeMapRegionType) == 0x000001, "Wrong alignment on TLTimelineSceneManager_HandleChangeMapRegionType");
static_assert(sizeof(TLTimelineSceneManager_HandleChangeMapRegionType) == 0x000001, "Wrong size on TLTimelineSceneManager_HandleChangeMapRegionType");
static_assert(offsetof(TLTimelineSceneManager_HandleChangeMapRegionType, InMapRegionType) == 0x000000, "Member 'TLTimelineSceneManager_HandleChangeMapRegionType::InMapRegionType' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexCollectionBook.OnCompleteBookEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexCollectionBook_OnCompleteBookEvent final
{
public:
	bool                                          bCollectedComplete;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexCollectionBook_OnCompleteBookEvent) == 0x000001, "Wrong alignment on TLUserWidgetCodexCollectionBook_OnCompleteBookEvent");
static_assert(sizeof(TLUserWidgetCodexCollectionBook_OnCompleteBookEvent) == 0x000001, "Wrong size on TLUserWidgetCodexCollectionBook_OnCompleteBookEvent");
static_assert(offsetof(TLUserWidgetCodexCollectionBook_OnCompleteBookEvent, bCollectedComplete) == 0x000000, "Member 'TLUserWidgetCodexCollectionBook_OnCompleteBookEvent::bCollectedComplete' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitMaterialStat.OnMatchingStat
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitMaterialStat_OnMatchingStat final
{
public:
	bool                                          InIsMatching;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitMaterialStat_OnMatchingStat) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitMaterialStat_OnMatchingStat");
static_assert(sizeof(TLUserWidgetItemTraitMaterialStat_OnMatchingStat) == 0x000001, "Wrong size on TLUserWidgetItemTraitMaterialStat_OnMatchingStat");
static_assert(offsetof(TLUserWidgetItemTraitMaterialStat_OnMatchingStat, InIsMatching) == 0x000000, "Member 'TLUserWidgetItemTraitMaterialStat_OnMatchingStat::InIsMatching' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipLevelStatInfo.OnUnlock
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTooltipLevelStatInfo_OnUnlock final
{
public:
	bool                                          InUnlock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipLevelStatInfo_OnUnlock) == 0x000001, "Wrong alignment on TLUserWidgetItemTooltipLevelStatInfo_OnUnlock");
static_assert(sizeof(TLUserWidgetItemTooltipLevelStatInfo_OnUnlock) == 0x000001, "Wrong size on TLUserWidgetItemTooltipLevelStatInfo_OnUnlock");
static_assert(offsetof(TLUserWidgetItemTooltipLevelStatInfo_OnUnlock, InUnlock) == 0x000000, "Member 'TLUserWidgetItemTooltipLevelStatInfo_OnUnlock::InUnlock' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipLevelStatInfo.OnUpdateValueDiff
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetItemTooltipLevelStatInfo_OnUpdateValueDiff final
{
public:
	class FText                                   InValueText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInUpImage;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInUpColor;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetItemTooltipLevelStatInfo_OnUpdateValueDiff) == 0x000008, "Wrong alignment on TLUserWidgetItemTooltipLevelStatInfo_OnUpdateValueDiff");
static_assert(sizeof(TLUserWidgetItemTooltipLevelStatInfo_OnUpdateValueDiff) == 0x000020, "Wrong size on TLUserWidgetItemTooltipLevelStatInfo_OnUpdateValueDiff");
static_assert(offsetof(TLUserWidgetItemTooltipLevelStatInfo_OnUpdateValueDiff, InValueText) == 0x000000, "Member 'TLUserWidgetItemTooltipLevelStatInfo_OnUpdateValueDiff::InValueText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTooltipLevelStatInfo_OnUpdateValueDiff, bInUpImage) == 0x000018, "Member 'TLUserWidgetItemTooltipLevelStatInfo_OnUpdateValueDiff::bInUpImage' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTooltipLevelStatInfo_OnUpdateValueDiff, bInUpColor) == 0x000019, "Member 'TLUserWidgetItemTooltipLevelStatInfo_OnUpdateValueDiff::bInUpColor' has a wrong offset!");

// Function TLClient.TLUserWidgetCoupon.HandleCouponInputTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetCoupon_HandleCouponInputTextChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCoupon_HandleCouponInputTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetCoupon_HandleCouponInputTextChanged");
static_assert(sizeof(TLUserWidgetCoupon_HandleCouponInputTextChanged) == 0x000018, "Wrong size on TLUserWidgetCoupon_HandleCouponInputTextChanged");
static_assert(offsetof(TLUserWidgetCoupon_HandleCouponInputTextChanged, InText) == 0x000000, "Member 'TLUserWidgetCoupon_HandleCouponInputTextChanged::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetCoupon.HandleCouponInputTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetCoupon_HandleCouponInputTextCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetCoupon_HandleCouponInputTextCommitted) == 0x000008, "Wrong alignment on TLUserWidgetCoupon_HandleCouponInputTextCommitted");
static_assert(sizeof(TLUserWidgetCoupon_HandleCouponInputTextCommitted) == 0x000020, "Wrong size on TLUserWidgetCoupon_HandleCouponInputTextCommitted");
static_assert(offsetof(TLUserWidgetCoupon_HandleCouponInputTextCommitted, InText) == 0x000000, "Member 'TLUserWidgetCoupon_HandleCouponInputTextCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCoupon_HandleCouponInputTextCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetCoupon_HandleCouponInputTextCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetSlider.HandleValueChanged
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSlider_HandleValueChanged final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSlider_HandleValueChanged) == 0x000004, "Wrong alignment on TLUserWidgetSlider_HandleValueChanged");
static_assert(sizeof(TLUserWidgetSlider_HandleValueChanged) == 0x000004, "Wrong size on TLUserWidgetSlider_HandleValueChanged");
static_assert(offsetof(TLUserWidgetSlider_HandleValueChanged, InValue) == 0x000000, "Member 'TLUserWidgetSlider_HandleValueChanged::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSlider.SetValue
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSlider_SetValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSlider_SetValue) == 0x000004, "Wrong alignment on TLUserWidgetSlider_SetValue");
static_assert(sizeof(TLUserWidgetSlider_SetValue) == 0x000004, "Wrong size on TLUserWidgetSlider_SetValue");
static_assert(offsetof(TLUserWidgetSlider_SetValue, InValue) == 0x000000, "Member 'TLUserWidgetSlider_SetValue::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSlider.GetValue
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSlider_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSlider_GetValue) == 0x000004, "Wrong alignment on TLUserWidgetSlider_GetValue");
static_assert(sizeof(TLUserWidgetSlider_GetValue) == 0x000004, "Wrong size on TLUserWidgetSlider_GetValue");
static_assert(offsetof(TLUserWidgetSlider_GetValue, ReturnValue) == 0x000000, "Member 'TLUserWidgetSlider_GetValue::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetCraftingDetailPanel.OnResultItemGrade
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCraftingDetailPanel_OnResultItemGrade final
{
public:
	EItemGrade                                    InItemGrade;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCraftingDetailPanel_OnResultItemGrade) == 0x000001, "Wrong alignment on TLUserWidgetCraftingDetailPanel_OnResultItemGrade");
static_assert(sizeof(TLUserWidgetCraftingDetailPanel_OnResultItemGrade) == 0x000001, "Wrong size on TLUserWidgetCraftingDetailPanel_OnResultItemGrade");
static_assert(offsetof(TLUserWidgetCraftingDetailPanel_OnResultItemGrade, InItemGrade) == 0x000000, "Member 'TLUserWidgetCraftingDetailPanel_OnResultItemGrade::InItemGrade' has a wrong offset!");

// Function TLClient.TLAlchemySceneControlActor.OnResult
// 0x0001 (0x0001 - 0x0000)
struct TLAlchemySceneControlActor_OnResult final
{
public:
	ETLAlchemySceneGradeType                      InResultType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLAlchemySceneControlActor_OnResult) == 0x000001, "Wrong alignment on TLAlchemySceneControlActor_OnResult");
static_assert(sizeof(TLAlchemySceneControlActor_OnResult) == 0x000001, "Wrong size on TLAlchemySceneControlActor_OnResult");
static_assert(offsetof(TLAlchemySceneControlActor_OnResult, InResultType) == 0x000000, "Member 'TLAlchemySceneControlActor_OnResult::InResultType' has a wrong offset!");

// Function TLClient.TLUserWidgetRuneStatInfoListSlot.OnNegativeStat
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRuneStatInfoListSlot_OnNegativeStat final
{
public:
	bool                                          InIsNegativeStat;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRuneStatInfoListSlot_OnNegativeStat) == 0x000001, "Wrong alignment on TLUserWidgetRuneStatInfoListSlot_OnNegativeStat");
static_assert(sizeof(TLUserWidgetRuneStatInfoListSlot_OnNegativeStat) == 0x000001, "Wrong size on TLUserWidgetRuneStatInfoListSlot_OnNegativeStat");
static_assert(offsetof(TLUserWidgetRuneStatInfoListSlot_OnNegativeStat, InIsNegativeStat) == 0x000000, "Member 'TLUserWidgetRuneStatInfoListSlot_OnNegativeStat::InIsNegativeStat' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleTargetScan.OnDimmedByTargetMode
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetConsoleTargetScan_OnDimmedByTargetMode final
{
public:
	bool                                          bDimmed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleTargetScan_OnDimmedByTargetMode) == 0x000001, "Wrong alignment on TLUserWidgetConsoleTargetScan_OnDimmedByTargetMode");
static_assert(sizeof(TLUserWidgetConsoleTargetScan_OnDimmedByTargetMode) == 0x000001, "Wrong size on TLUserWidgetConsoleTargetScan_OnDimmedByTargetMode");
static_assert(offsetof(TLUserWidgetConsoleTargetScan_OnDimmedByTargetMode, bDimmed) == 0x000000, "Member 'TLUserWidgetConsoleTargetScan_OnDimmedByTargetMode::bDimmed' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleTargetScan.OnToggleUI
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetConsoleTargetScan_OnToggleUI final
{
public:
	bool                                          InOn;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleTargetScan_OnToggleUI) == 0x000001, "Wrong alignment on TLUserWidgetConsoleTargetScan_OnToggleUI");
static_assert(sizeof(TLUserWidgetConsoleTargetScan_OnToggleUI) == 0x000001, "Wrong size on TLUserWidgetConsoleTargetScan_OnToggleUI");
static_assert(offsetof(TLUserWidgetConsoleTargetScan_OnToggleUI, InOn) == 0x000000, "Member 'TLUserWidgetConsoleTargetScan_OnToggleUI::InOn' has a wrong offset!");

// Function TLClient.TLUserWidgetInfinityDungeonTabButton.OnDungeonState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInfinityDungeonTabButton_OnDungeonState final
{
public:
	EInfinityDungeonState                         InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInfinityDungeonTabButton_OnDungeonState) == 0x000001, "Wrong alignment on TLUserWidgetInfinityDungeonTabButton_OnDungeonState");
static_assert(sizeof(TLUserWidgetInfinityDungeonTabButton_OnDungeonState) == 0x000001, "Wrong size on TLUserWidgetInfinityDungeonTabButton_OnDungeonState");
static_assert(offsetof(TLUserWidgetInfinityDungeonTabButton_OnDungeonState, InState) == 0x000000, "Member 'TLUserWidgetInfinityDungeonTabButton_OnDungeonState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetOptionGroupListItem.CheckBox_OnCheckStateChanged
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetOptionGroupListItem_CheckBox_OnCheckStateChanged final
{
public:
	bool                                          IsChecked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOptionGroupListItem_CheckBox_OnCheckStateChanged) == 0x000001, "Wrong alignment on TLUserWidgetOptionGroupListItem_CheckBox_OnCheckStateChanged");
static_assert(sizeof(TLUserWidgetOptionGroupListItem_CheckBox_OnCheckStateChanged) == 0x000001, "Wrong size on TLUserWidgetOptionGroupListItem_CheckBox_OnCheckStateChanged");
static_assert(offsetof(TLUserWidgetOptionGroupListItem_CheckBox_OnCheckStateChanged, IsChecked) == 0x000000, "Member 'TLUserWidgetOptionGroupListItem_CheckBox_OnCheckStateChanged::IsChecked' has a wrong offset!");

// Function TLClient.TLUserWidgetExploreChart.OnGroupBackgroundEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetExploreChart_OnGroupBackgroundEvent final
{
public:
	bool                                          InbCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetExploreChart_OnGroupBackgroundEvent) == 0x000001, "Wrong alignment on TLUserWidgetExploreChart_OnGroupBackgroundEvent");
static_assert(sizeof(TLUserWidgetExploreChart_OnGroupBackgroundEvent) == 0x000001, "Wrong size on TLUserWidgetExploreChart_OnGroupBackgroundEvent");
static_assert(offsetof(TLUserWidgetExploreChart_OnGroupBackgroundEvent, InbCompleted) == 0x000000, "Member 'TLUserWidgetExploreChart_OnGroupBackgroundEvent::InbCompleted' has a wrong offset!");

// Function TLClient.TLUserWidgetExploreChart.OnUnLockMemorial
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetExploreChart_OnUnLockMemorial final
{
public:
	bool                                          IsUnLock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetExploreChart_OnUnLockMemorial) == 0x000001, "Wrong alignment on TLUserWidgetExploreChart_OnUnLockMemorial");
static_assert(sizeof(TLUserWidgetExploreChart_OnUnLockMemorial) == 0x000001, "Wrong size on TLUserWidgetExploreChart_OnUnLockMemorial");
static_assert(offsetof(TLUserWidgetExploreChart_OnUnLockMemorial, IsUnLock) == 0x000000, "Member 'TLUserWidgetExploreChart_OnUnLockMemorial::IsUnLock' has a wrong offset!");

// Function TLClient.TLUserWidgetContentsAlarmRewardDetail.OnUpdateAlarmType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContentsAlarmRewardDetail_OnUpdateAlarmType final
{
public:
	EContentsAlarmType                            InViewType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContentsAlarmRewardDetail_OnUpdateAlarmType) == 0x000001, "Wrong alignment on TLUserWidgetContentsAlarmRewardDetail_OnUpdateAlarmType");
static_assert(sizeof(TLUserWidgetContentsAlarmRewardDetail_OnUpdateAlarmType) == 0x000001, "Wrong size on TLUserWidgetContentsAlarmRewardDetail_OnUpdateAlarmType");
static_assert(offsetof(TLUserWidgetContentsAlarmRewardDetail_OnUpdateAlarmType, InViewType) == 0x000000, "Member 'TLUserWidgetContentsAlarmRewardDetail_OnUpdateAlarmType::InViewType' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.GetContractBmAcceptableCount
// 0x0004 (0x0004 - 0x0000)
struct TLTutorialConditionObjectHandler_GetContractBmAcceptableCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObjectHandler_GetContractBmAcceptableCount) == 0x000004, "Wrong alignment on TLTutorialConditionObjectHandler_GetContractBmAcceptableCount");
static_assert(sizeof(TLTutorialConditionObjectHandler_GetContractBmAcceptableCount) == 0x000004, "Wrong size on TLTutorialConditionObjectHandler_GetContractBmAcceptableCount");
static_assert(offsetof(TLTutorialConditionObjectHandler_GetContractBmAcceptableCount, ReturnValue) == 0x000000, "Member 'TLTutorialConditionObjectHandler_GetContractBmAcceptableCount::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.GetContractNpcAcceptableCount
// 0x0004 (0x0004 - 0x0000)
struct TLTutorialConditionObjectHandler_GetContractNpcAcceptableCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObjectHandler_GetContractNpcAcceptableCount) == 0x000004, "Wrong alignment on TLTutorialConditionObjectHandler_GetContractNpcAcceptableCount");
static_assert(sizeof(TLTutorialConditionObjectHandler_GetContractNpcAcceptableCount) == 0x000004, "Wrong size on TLTutorialConditionObjectHandler_GetContractNpcAcceptableCount");
static_assert(offsetof(TLTutorialConditionObjectHandler_GetContractNpcAcceptableCount, ReturnValue) == 0x000000, "Member 'TLTutorialConditionObjectHandler_GetContractNpcAcceptableCount::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.GetEnchantTabIndex
// 0x0004 (0x0004 - 0x0000)
struct TLTutorialConditionObjectHandler_GetEnchantTabIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObjectHandler_GetEnchantTabIndex) == 0x000004, "Wrong alignment on TLTutorialConditionObjectHandler_GetEnchantTabIndex");
static_assert(sizeof(TLTutorialConditionObjectHandler_GetEnchantTabIndex) == 0x000004, "Wrong size on TLTutorialConditionObjectHandler_GetEnchantTabIndex");
static_assert(offsetof(TLTutorialConditionObjectHandler_GetEnchantTabIndex, ReturnValue) == 0x000000, "Member 'TLTutorialConditionObjectHandler_GetEnchantTabIndex::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.GetPartyDungeonTabIndex
// 0x0004 (0x0004 - 0x0000)
struct TLTutorialConditionObjectHandler_GetPartyDungeonTabIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObjectHandler_GetPartyDungeonTabIndex) == 0x000004, "Wrong alignment on TLTutorialConditionObjectHandler_GetPartyDungeonTabIndex");
static_assert(sizeof(TLTutorialConditionObjectHandler_GetPartyDungeonTabIndex) == 0x000004, "Wrong size on TLTutorialConditionObjectHandler_GetPartyDungeonTabIndex");
static_assert(offsetof(TLTutorialConditionObjectHandler_GetPartyDungeonTabIndex, ReturnValue) == 0x000000, "Member 'TLTutorialConditionObjectHandler_GetPartyDungeonTabIndex::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.GetPlayerLevel
// 0x0004 (0x0004 - 0x0000)
struct TLTutorialConditionObjectHandler_GetPlayerLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObjectHandler_GetPlayerLevel) == 0x000004, "Wrong alignment on TLTutorialConditionObjectHandler_GetPlayerLevel");
static_assert(sizeof(TLTutorialConditionObjectHandler_GetPlayerLevel) == 0x000004, "Wrong size on TLTutorialConditionObjectHandler_GetPlayerLevel");
static_assert(offsetof(TLTutorialConditionObjectHandler_GetPlayerLevel, ReturnValue) == 0x000000, "Member 'TLTutorialConditionObjectHandler_GetPlayerLevel::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.GetSkillTabIndex
// 0x0004 (0x0004 - 0x0000)
struct TLTutorialConditionObjectHandler_GetSkillTabIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObjectHandler_GetSkillTabIndex) == 0x000004, "Wrong alignment on TLTutorialConditionObjectHandler_GetSkillTabIndex");
static_assert(sizeof(TLTutorialConditionObjectHandler_GetSkillTabIndex) == 0x000004, "Wrong size on TLTutorialConditionObjectHandler_GetSkillTabIndex");
static_assert(offsetof(TLTutorialConditionObjectHandler_GetSkillTabIndex, ReturnValue) == 0x000000, "Member 'TLTutorialConditionObjectHandler_GetSkillTabIndex::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.IsActionCameraMode
// 0x0001 (0x0001 - 0x0000)
struct TLTutorialConditionObjectHandler_IsActionCameraMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObjectHandler_IsActionCameraMode) == 0x000001, "Wrong alignment on TLTutorialConditionObjectHandler_IsActionCameraMode");
static_assert(sizeof(TLTutorialConditionObjectHandler_IsActionCameraMode) == 0x000001, "Wrong size on TLTutorialConditionObjectHandler_IsActionCameraMode");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsActionCameraMode, ReturnValue) == 0x000000, "Member 'TLTutorialConditionObjectHandler_IsActionCameraMode::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.IsActiveSkillProgressable
// 0x0001 (0x0001 - 0x0000)
struct TLTutorialConditionObjectHandler_IsActiveSkillProgressable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObjectHandler_IsActiveSkillProgressable) == 0x000001, "Wrong alignment on TLTutorialConditionObjectHandler_IsActiveSkillProgressable");
static_assert(sizeof(TLTutorialConditionObjectHandler_IsActiveSkillProgressable) == 0x000001, "Wrong size on TLTutorialConditionObjectHandler_IsActiveSkillProgressable");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsActiveSkillProgressable, ReturnValue) == 0x000000, "Member 'TLTutorialConditionObjectHandler_IsActiveSkillProgressable::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.IsCheckCurrentMapId
// 0x0008 (0x0008 - 0x0000)
struct TLTutorialConditionObjectHandler_IsCheckCurrentMapId final
{
public:
	int32                                         InMapId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLTutorialConditionObjectHandler_IsCheckCurrentMapId) == 0x000004, "Wrong alignment on TLTutorialConditionObjectHandler_IsCheckCurrentMapId");
static_assert(sizeof(TLTutorialConditionObjectHandler_IsCheckCurrentMapId) == 0x000008, "Wrong size on TLTutorialConditionObjectHandler_IsCheckCurrentMapId");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsCheckCurrentMapId, InMapId) == 0x000000, "Member 'TLTutorialConditionObjectHandler_IsCheckCurrentMapId::InMapId' has a wrong offset!");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsCheckCurrentMapId, ReturnValue) == 0x000004, "Member 'TLTutorialConditionObjectHandler_IsCheckCurrentMapId::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.IsCompleteAchievement
// 0x000C (0x000C - 0x0000)
struct TLTutorialConditionObjectHandler_IsCompleteAchievement final
{
public:
	class FName                                   InGuid;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLTutorialConditionObjectHandler_IsCompleteAchievement) == 0x000004, "Wrong alignment on TLTutorialConditionObjectHandler_IsCompleteAchievement");
static_assert(sizeof(TLTutorialConditionObjectHandler_IsCompleteAchievement) == 0x00000C, "Wrong size on TLTutorialConditionObjectHandler_IsCompleteAchievement");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsCompleteAchievement, InGuid) == 0x000000, "Member 'TLTutorialConditionObjectHandler_IsCompleteAchievement::InGuid' has a wrong offset!");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsCompleteAchievement, ReturnValue) == 0x000008, "Member 'TLTutorialConditionObjectHandler_IsCompleteAchievement::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.IsEnteredContentsVolume
// 0x000C (0x000C - 0x0000)
struct TLTutorialConditionObjectHandler_IsEnteredContentsVolume final
{
public:
	class FName                                   InEventName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLTutorialConditionObjectHandler_IsEnteredContentsVolume) == 0x000004, "Wrong alignment on TLTutorialConditionObjectHandler_IsEnteredContentsVolume");
static_assert(sizeof(TLTutorialConditionObjectHandler_IsEnteredContentsVolume) == 0x00000C, "Wrong size on TLTutorialConditionObjectHandler_IsEnteredContentsVolume");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsEnteredContentsVolume, InEventName) == 0x000000, "Member 'TLTutorialConditionObjectHandler_IsEnteredContentsVolume::InEventName' has a wrong offset!");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsEnteredContentsVolume, ReturnValue) == 0x000008, "Member 'TLTutorialConditionObjectHandler_IsEnteredContentsVolume::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.IsEqualName
// 0x0014 (0x0014 - 0x0000)
struct TLTutorialConditionObjectHandler_IsEqualName final
{
public:
	class FName                                   InName1;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName2;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLTutorialConditionObjectHandler_IsEqualName) == 0x000004, "Wrong alignment on TLTutorialConditionObjectHandler_IsEqualName");
static_assert(sizeof(TLTutorialConditionObjectHandler_IsEqualName) == 0x000014, "Wrong size on TLTutorialConditionObjectHandler_IsEqualName");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsEqualName, InName1) == 0x000000, "Member 'TLTutorialConditionObjectHandler_IsEqualName::InName1' has a wrong offset!");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsEqualName, InName2) == 0x000008, "Member 'TLTutorialConditionObjectHandler_IsEqualName::InName2' has a wrong offset!");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsEqualName, ReturnValue) == 0x000010, "Member 'TLTutorialConditionObjectHandler_IsEqualName::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.IsExistEnchantMaterialInventory
// 0x0001 (0x0001 - 0x0000)
struct TLTutorialConditionObjectHandler_IsExistEnchantMaterialInventory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObjectHandler_IsExistEnchantMaterialInventory) == 0x000001, "Wrong alignment on TLTutorialConditionObjectHandler_IsExistEnchantMaterialInventory");
static_assert(sizeof(TLTutorialConditionObjectHandler_IsExistEnchantMaterialInventory) == 0x000001, "Wrong size on TLTutorialConditionObjectHandler_IsExistEnchantMaterialInventory");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsExistEnchantMaterialInventory, ReturnValue) == 0x000000, "Member 'TLTutorialConditionObjectHandler_IsExistEnchantMaterialInventory::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.IsExistTraitMaterial
// 0x0001 (0x0001 - 0x0000)
struct TLTutorialConditionObjectHandler_IsExistTraitMaterial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObjectHandler_IsExistTraitMaterial) == 0x000001, "Wrong alignment on TLTutorialConditionObjectHandler_IsExistTraitMaterial");
static_assert(sizeof(TLTutorialConditionObjectHandler_IsExistTraitMaterial) == 0x000001, "Wrong size on TLTutorialConditionObjectHandler_IsExistTraitMaterial");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsExistTraitMaterial, ReturnValue) == 0x000000, "Member 'TLTutorialConditionObjectHandler_IsExistTraitMaterial::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.IsExistTransferMaterial
// 0x0001 (0x0001 - 0x0000)
struct TLTutorialConditionObjectHandler_IsExistTransferMaterial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObjectHandler_IsExistTransferMaterial) == 0x000001, "Wrong alignment on TLTutorialConditionObjectHandler_IsExistTransferMaterial");
static_assert(sizeof(TLTutorialConditionObjectHandler_IsExistTransferMaterial) == 0x000001, "Wrong size on TLTutorialConditionObjectHandler_IsExistTransferMaterial");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsExistTransferMaterial, ReturnValue) == 0x000000, "Member 'TLTutorialConditionObjectHandler_IsExistTransferMaterial::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.IsMagicDollExpeditionRewardable
// 0x0001 (0x0001 - 0x0000)
struct TLTutorialConditionObjectHandler_IsMagicDollExpeditionRewardable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObjectHandler_IsMagicDollExpeditionRewardable) == 0x000001, "Wrong alignment on TLTutorialConditionObjectHandler_IsMagicDollExpeditionRewardable");
static_assert(sizeof(TLTutorialConditionObjectHandler_IsMagicDollExpeditionRewardable) == 0x000001, "Wrong size on TLTutorialConditionObjectHandler_IsMagicDollExpeditionRewardable");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsMagicDollExpeditionRewardable, ReturnValue) == 0x000000, "Member 'TLTutorialConditionObjectHandler_IsMagicDollExpeditionRewardable::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.IsPassiveSkillProgressable
// 0x0001 (0x0001 - 0x0000)
struct TLTutorialConditionObjectHandler_IsPassiveSkillProgressable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObjectHandler_IsPassiveSkillProgressable) == 0x000001, "Wrong alignment on TLTutorialConditionObjectHandler_IsPassiveSkillProgressable");
static_assert(sizeof(TLTutorialConditionObjectHandler_IsPassiveSkillProgressable) == 0x000001, "Wrong size on TLTutorialConditionObjectHandler_IsPassiveSkillProgressable");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsPassiveSkillProgressable, ReturnValue) == 0x000000, "Member 'TLTutorialConditionObjectHandler_IsPassiveSkillProgressable::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.IsSeasonRewardable
// 0x0001 (0x0001 - 0x0000)
struct TLTutorialConditionObjectHandler_IsSeasonRewardable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObjectHandler_IsSeasonRewardable) == 0x000001, "Wrong alignment on TLTutorialConditionObjectHandler_IsSeasonRewardable");
static_assert(sizeof(TLTutorialConditionObjectHandler_IsSeasonRewardable) == 0x000001, "Wrong size on TLTutorialConditionObjectHandler_IsSeasonRewardable");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsSeasonRewardable, ReturnValue) == 0x000000, "Member 'TLTutorialConditionObjectHandler_IsSeasonRewardable::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.IsTimeDay
// 0x0001 (0x0001 - 0x0000)
struct TLTutorialConditionObjectHandler_IsTimeDay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObjectHandler_IsTimeDay) == 0x000001, "Wrong alignment on TLTutorialConditionObjectHandler_IsTimeDay");
static_assert(sizeof(TLTutorialConditionObjectHandler_IsTimeDay) == 0x000001, "Wrong size on TLTutorialConditionObjectHandler_IsTimeDay");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsTimeDay, ReturnValue) == 0x000000, "Member 'TLTutorialConditionObjectHandler_IsTimeDay::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.PlayTutorialInteractionCameraByID
// 0x001C (0x001C - 0x0000)
struct TLTutorialConditionObjectHandler_PlayTutorialInteractionCameraByID final
{
public:
	class FName                                   InTutorialId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InCamPresetID;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTargetID;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDuration;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInHideHUD;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLTutorialConditionObjectHandler_PlayTutorialInteractionCameraByID) == 0x000004, "Wrong alignment on TLTutorialConditionObjectHandler_PlayTutorialInteractionCameraByID");
static_assert(sizeof(TLTutorialConditionObjectHandler_PlayTutorialInteractionCameraByID) == 0x00001C, "Wrong size on TLTutorialConditionObjectHandler_PlayTutorialInteractionCameraByID");
static_assert(offsetof(TLTutorialConditionObjectHandler_PlayTutorialInteractionCameraByID, InTutorialId) == 0x000000, "Member 'TLTutorialConditionObjectHandler_PlayTutorialInteractionCameraByID::InTutorialId' has a wrong offset!");
static_assert(offsetof(TLTutorialConditionObjectHandler_PlayTutorialInteractionCameraByID, InCamPresetID) == 0x000008, "Member 'TLTutorialConditionObjectHandler_PlayTutorialInteractionCameraByID::InCamPresetID' has a wrong offset!");
static_assert(offsetof(TLTutorialConditionObjectHandler_PlayTutorialInteractionCameraByID, InTargetID) == 0x000010, "Member 'TLTutorialConditionObjectHandler_PlayTutorialInteractionCameraByID::InTargetID' has a wrong offset!");
static_assert(offsetof(TLTutorialConditionObjectHandler_PlayTutorialInteractionCameraByID, InDuration) == 0x000014, "Member 'TLTutorialConditionObjectHandler_PlayTutorialInteractionCameraByID::InDuration' has a wrong offset!");
static_assert(offsetof(TLTutorialConditionObjectHandler_PlayTutorialInteractionCameraByID, bInHideHUD) == 0x000018, "Member 'TLTutorialConditionObjectHandler_PlayTutorialInteractionCameraByID::bInHideHUD' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.ShowSystemMessageGuideByID
// 0x0008 (0x0008 - 0x0000)
struct TLTutorialConditionObjectHandler_ShowSystemMessageGuideByID final
{
public:
	class FName                                   InTutorialId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObjectHandler_ShowSystemMessageGuideByID) == 0x000004, "Wrong alignment on TLTutorialConditionObjectHandler_ShowSystemMessageGuideByID");
static_assert(sizeof(TLTutorialConditionObjectHandler_ShowSystemMessageGuideByID) == 0x000008, "Wrong size on TLTutorialConditionObjectHandler_ShowSystemMessageGuideByID");
static_assert(offsetof(TLTutorialConditionObjectHandler_ShowSystemMessageGuideByID, InTutorialId) == 0x000000, "Member 'TLTutorialConditionObjectHandler_ShowSystemMessageGuideByID::InTutorialId' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.GetStorageCountSize
// 0x0008 (0x0008 - 0x0000)
struct TLTutorialConditionObjectHandler_GetStorageCountSize final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObjectHandler_GetStorageCountSize) == 0x000004, "Wrong alignment on TLTutorialConditionObjectHandler_GetStorageCountSize");
static_assert(sizeof(TLTutorialConditionObjectHandler_GetStorageCountSize) == 0x000008, "Wrong size on TLTutorialConditionObjectHandler_GetStorageCountSize");
static_assert(offsetof(TLTutorialConditionObjectHandler_GetStorageCountSize, Count) == 0x000000, "Member 'TLTutorialConditionObjectHandler_GetStorageCountSize::Count' has a wrong offset!");
static_assert(offsetof(TLTutorialConditionObjectHandler_GetStorageCountSize, Size) == 0x000004, "Member 'TLTutorialConditionObjectHandler_GetStorageCountSize::Size' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.IsAttainedCode
// 0x000C (0x000C - 0x0000)
struct TLTutorialConditionObjectHandler_IsAttainedCode final
{
public:
	class FName                                   InGuid;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLTutorialConditionObjectHandler_IsAttainedCode) == 0x000004, "Wrong alignment on TLTutorialConditionObjectHandler_IsAttainedCode");
static_assert(sizeof(TLTutorialConditionObjectHandler_IsAttainedCode) == 0x00000C, "Wrong size on TLTutorialConditionObjectHandler_IsAttainedCode");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsAttainedCode, InGuid) == 0x000000, "Member 'TLTutorialConditionObjectHandler_IsAttainedCode::InGuid' has a wrong offset!");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsAttainedCode, ReturnValue) == 0x000008, "Member 'TLTutorialConditionObjectHandler_IsAttainedCode::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.IsAttainedObjective
// 0x000C (0x000C - 0x0000)
struct TLTutorialConditionObjectHandler_IsAttainedObjective final
{
public:
	class FName                                   InGuid;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLTutorialConditionObjectHandler_IsAttainedObjective) == 0x000004, "Wrong alignment on TLTutorialConditionObjectHandler_IsAttainedObjective");
static_assert(sizeof(TLTutorialConditionObjectHandler_IsAttainedObjective) == 0x00000C, "Wrong size on TLTutorialConditionObjectHandler_IsAttainedObjective");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsAttainedObjective, InGuid) == 0x000000, "Member 'TLTutorialConditionObjectHandler_IsAttainedObjective::InGuid' has a wrong offset!");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsAttainedObjective, ReturnValue) == 0x000008, "Member 'TLTutorialConditionObjectHandler_IsAttainedObjective::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObjectHandler.IsTutorialComplete
// 0x000C (0x000C - 0x0000)
struct TLTutorialConditionObjectHandler_IsTutorialComplete final
{
public:
	class FName                                   InTutorialId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLTutorialConditionObjectHandler_IsTutorialComplete) == 0x000004, "Wrong alignment on TLTutorialConditionObjectHandler_IsTutorialComplete");
static_assert(sizeof(TLTutorialConditionObjectHandler_IsTutorialComplete) == 0x00000C, "Wrong size on TLTutorialConditionObjectHandler_IsTutorialComplete");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsTutorialComplete, InTutorialId) == 0x000000, "Member 'TLTutorialConditionObjectHandler_IsTutorialComplete::InTutorialId' has a wrong offset!");
static_assert(offsetof(TLTutorialConditionObjectHandler_IsTutorialComplete, ReturnValue) == 0x000008, "Member 'TLTutorialConditionObjectHandler_IsTutorialComplete::ReturnValue' has a wrong offset!");

// Function TLClient.TLCustomizeSceneControlActor.PlayCustomizeLightSequence
// 0x0004 (0x0004 - 0x0000)
struct TLCustomizeSceneControlActor_PlayCustomizeLightSequence final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomizeSceneControlActor_PlayCustomizeLightSequence) == 0x000004, "Wrong alignment on TLCustomizeSceneControlActor_PlayCustomizeLightSequence");
static_assert(sizeof(TLCustomizeSceneControlActor_PlayCustomizeLightSequence) == 0x000004, "Wrong size on TLCustomizeSceneControlActor_PlayCustomizeLightSequence");
static_assert(offsetof(TLCustomizeSceneControlActor_PlayCustomizeLightSequence, InIndex) == 0x000000, "Member 'TLCustomizeSceneControlActor_PlayCustomizeLightSequence::InIndex' has a wrong offset!");

// Function TLClient.TLCustomizeSceneControlActor.StopCustomizeCommonActionTree
// 0x0008 (0x0008 - 0x0000)
struct TLCustomizeSceneControlActor_StopCustomizeCommonActionTree final
{
public:
	class FName                                   IgnoreGroupName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomizeSceneControlActor_StopCustomizeCommonActionTree) == 0x000004, "Wrong alignment on TLCustomizeSceneControlActor_StopCustomizeCommonActionTree");
static_assert(sizeof(TLCustomizeSceneControlActor_StopCustomizeCommonActionTree) == 0x000008, "Wrong size on TLCustomizeSceneControlActor_StopCustomizeCommonActionTree");
static_assert(offsetof(TLCustomizeSceneControlActor_StopCustomizeCommonActionTree, IgnoreGroupName) == 0x000000, "Member 'TLCustomizeSceneControlActor_StopCustomizeCommonActionTree::IgnoreGroupName' has a wrong offset!");

// DelegateFunction TLClient.TLCustomizeSceneControlActor.TLOnLightSequencePlay__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct TLCustomizeSceneControlActor_TLOnLightSequencePlay__DelegateSignature final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCustomizeSceneControlActor_TLOnLightSequencePlay__DelegateSignature) == 0x000004, "Wrong alignment on TLCustomizeSceneControlActor_TLOnLightSequencePlay__DelegateSignature");
static_assert(sizeof(TLCustomizeSceneControlActor_TLOnLightSequencePlay__DelegateSignature) == 0x000004, "Wrong size on TLCustomizeSceneControlActor_TLOnLightSequencePlay__DelegateSignature");
static_assert(offsetof(TLCustomizeSceneControlActor_TLOnLightSequencePlay__DelegateSignature, Index_0) == 0x000000, "Member 'TLCustomizeSceneControlActor_TLOnLightSequencePlay__DelegateSignature::Index_0' has a wrong offset!");

// Function TLClient.TLGameLobbyActor.ChangeLobbyState
// 0x0003 (0x0003 - 0x0000)
struct TLGameLobbyActor_ChangeLobbyState final
{
public:
	ELobbySceneState                              NextState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediate;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLLobbyStateChangeReason                     InReason;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameLobbyActor_ChangeLobbyState) == 0x000001, "Wrong alignment on TLGameLobbyActor_ChangeLobbyState");
static_assert(sizeof(TLGameLobbyActor_ChangeLobbyState) == 0x000003, "Wrong size on TLGameLobbyActor_ChangeLobbyState");
static_assert(offsetof(TLGameLobbyActor_ChangeLobbyState, NextState) == 0x000000, "Member 'TLGameLobbyActor_ChangeLobbyState::NextState' has a wrong offset!");
static_assert(offsetof(TLGameLobbyActor_ChangeLobbyState, bImmediate) == 0x000001, "Member 'TLGameLobbyActor_ChangeLobbyState::bImmediate' has a wrong offset!");
static_assert(offsetof(TLGameLobbyActor_ChangeLobbyState, InReason) == 0x000002, "Member 'TLGameLobbyActor_ChangeLobbyState::InReason' has a wrong offset!");

// Function TLClient.TLGameLobbyActor.OnLobbyLevelLoaded
// 0x0008 (0x0008 - 0x0000)
struct TLGameLobbyActor_OnLobbyLevelLoaded final
{
public:
	class FName                                   InLevelName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameLobbyActor_OnLobbyLevelLoaded) == 0x000004, "Wrong alignment on TLGameLobbyActor_OnLobbyLevelLoaded");
static_assert(sizeof(TLGameLobbyActor_OnLobbyLevelLoaded) == 0x000008, "Wrong size on TLGameLobbyActor_OnLobbyLevelLoaded");
static_assert(offsetof(TLGameLobbyActor_OnLobbyLevelLoaded, InLevelName) == 0x000000, "Member 'TLGameLobbyActor_OnLobbyLevelLoaded::InLevelName' has a wrong offset!");

// Function TLClient.TLGameLobbyActor.OnNightmareCutsceneFinished
// 0x0014 (0x0014 - 0x0000)
struct TLGameLobbyActor_OnNightmareCutsceneFinished final
{
public:
	class FName                                   CutSceneID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExclusiveTag;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECutscenePlayResult                           PlayResult;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLGameLobbyActor_OnNightmareCutsceneFinished) == 0x000004, "Wrong alignment on TLGameLobbyActor_OnNightmareCutsceneFinished");
static_assert(sizeof(TLGameLobbyActor_OnNightmareCutsceneFinished) == 0x000014, "Wrong size on TLGameLobbyActor_OnNightmareCutsceneFinished");
static_assert(offsetof(TLGameLobbyActor_OnNightmareCutsceneFinished, CutSceneID) == 0x000000, "Member 'TLGameLobbyActor_OnNightmareCutsceneFinished::CutSceneID' has a wrong offset!");
static_assert(offsetof(TLGameLobbyActor_OnNightmareCutsceneFinished, ExclusiveTag) == 0x000008, "Member 'TLGameLobbyActor_OnNightmareCutsceneFinished::ExclusiveTag' has a wrong offset!");
static_assert(offsetof(TLGameLobbyActor_OnNightmareCutsceneFinished, PlayResult) == 0x000010, "Member 'TLGameLobbyActor_OnNightmareCutsceneFinished::PlayResult' has a wrong offset!");

// Function TLClient.TLGameLobbyActor.PlayRealmSelectAT
// 0x0008 (0x0008 - 0x0000)
struct TLGameLobbyActor_PlayRealmSelectAT final
{
public:
	class FName                                   InConditionKey;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameLobbyActor_PlayRealmSelectAT) == 0x000004, "Wrong alignment on TLGameLobbyActor_PlayRealmSelectAT");
static_assert(sizeof(TLGameLobbyActor_PlayRealmSelectAT) == 0x000008, "Wrong size on TLGameLobbyActor_PlayRealmSelectAT");
static_assert(offsetof(TLGameLobbyActor_PlayRealmSelectAT, InConditionKey) == 0x000000, "Member 'TLGameLobbyActor_PlayRealmSelectAT::InConditionKey' has a wrong offset!");

// Function TLClient.TLGameLobbyActor.IsPendingEnterNewCharacter
// 0x0001 (0x0001 - 0x0000)
struct TLGameLobbyActor_IsPendingEnterNewCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameLobbyActor_IsPendingEnterNewCharacter) == 0x000001, "Wrong alignment on TLGameLobbyActor_IsPendingEnterNewCharacter");
static_assert(sizeof(TLGameLobbyActor_IsPendingEnterNewCharacter) == 0x000001, "Wrong size on TLGameLobbyActor_IsPendingEnterNewCharacter");
static_assert(offsetof(TLGameLobbyActor_IsPendingEnterNewCharacter, ReturnValue) == 0x000000, "Member 'TLGameLobbyActor_IsPendingEnterNewCharacter::ReturnValue' has a wrong offset!");

// Function TLClient.TLBeautyshopControlActor.TestSetPolymorphID
// 0x0008 (0x0008 - 0x0000)
struct TLBeautyshopControlActor_TestSetPolymorphID final
{
public:
	int32                                         InPolymorphID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLCharacterGender                            InGender;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBeautyshopControlActor_TestSetPolymorphID) == 0x000004, "Wrong alignment on TLBeautyshopControlActor_TestSetPolymorphID");
static_assert(sizeof(TLBeautyshopControlActor_TestSetPolymorphID) == 0x000008, "Wrong size on TLBeautyshopControlActor_TestSetPolymorphID");
static_assert(offsetof(TLBeautyshopControlActor_TestSetPolymorphID, InPolymorphID) == 0x000000, "Member 'TLBeautyshopControlActor_TestSetPolymorphID::InPolymorphID' has a wrong offset!");
static_assert(offsetof(TLBeautyshopControlActor_TestSetPolymorphID, InGender) == 0x000004, "Member 'TLBeautyshopControlActor_TestSetPolymorphID::InGender' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.CanPauseBink
// 0x0010 (0x0010 - 0x0000)
struct TLBinkBlueprintLibrary_CanPauseBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_CanPauseBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_CanPauseBink");
static_assert(sizeof(TLBinkBlueprintLibrary_CanPauseBink) == 0x000010, "Wrong size on TLBinkBlueprintLibrary_CanPauseBink");
static_assert(offsetof(TLBinkBlueprintLibrary_CanPauseBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_CanPauseBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_CanPauseBink, ReturnValue) == 0x000008, "Member 'TLBinkBlueprintLibrary_CanPauseBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.CanPlayBink
// 0x0010 (0x0010 - 0x0000)
struct TLBinkBlueprintLibrary_CanPlayBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_CanPlayBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_CanPlayBink");
static_assert(sizeof(TLBinkBlueprintLibrary_CanPlayBink) == 0x000010, "Wrong size on TLBinkBlueprintLibrary_CanPlayBink");
static_assert(offsetof(TLBinkBlueprintLibrary_CanPlayBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_CanPlayBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_CanPlayBink, ReturnValue) == 0x000008, "Member 'TLBinkBlueprintLibrary_CanPlayBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.CloseBink
// 0x0010 (0x0010 - 0x0000)
struct TLBinkBlueprintLibrary_CloseBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_CloseBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_CloseBink");
static_assert(sizeof(TLBinkBlueprintLibrary_CloseBink) == 0x000010, "Wrong size on TLBinkBlueprintLibrary_CloseBink");
static_assert(offsetof(TLBinkBlueprintLibrary_CloseBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_CloseBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_CloseBink, ReturnValue) == 0x000008, "Member 'TLBinkBlueprintLibrary_CloseBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.CloseUrlBink
// 0x0008 (0x0008 - 0x0000)
struct TLBinkBlueprintLibrary_CloseUrlBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBinkBlueprintLibrary_CloseUrlBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_CloseUrlBink");
static_assert(sizeof(TLBinkBlueprintLibrary_CloseUrlBink) == 0x000008, "Wrong size on TLBinkBlueprintLibrary_CloseUrlBink");
static_assert(offsetof(TLBinkBlueprintLibrary_CloseUrlBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_CloseUrlBink::InBinkMediaPlayer' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.CreateAndSetBinkMediaPlayer
// 0x0028 (0x0028 - 0x0000)
struct TLBinkBlueprintLibrary_CreateAndSetBinkMediaPlayer final
{
public:
	class UBinkMediaTexture*                      InTexture;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InUrl;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLooping;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInStartImmediately;                               // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDelayedOpen;                                    // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBinkMediaPlayer*                       ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBinkBlueprintLibrary_CreateAndSetBinkMediaPlayer) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_CreateAndSetBinkMediaPlayer");
static_assert(sizeof(TLBinkBlueprintLibrary_CreateAndSetBinkMediaPlayer) == 0x000028, "Wrong size on TLBinkBlueprintLibrary_CreateAndSetBinkMediaPlayer");
static_assert(offsetof(TLBinkBlueprintLibrary_CreateAndSetBinkMediaPlayer, InTexture) == 0x000000, "Member 'TLBinkBlueprintLibrary_CreateAndSetBinkMediaPlayer::InTexture' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_CreateAndSetBinkMediaPlayer, InUrl) == 0x000008, "Member 'TLBinkBlueprintLibrary_CreateAndSetBinkMediaPlayer::InUrl' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_CreateAndSetBinkMediaPlayer, bInLooping) == 0x000018, "Member 'TLBinkBlueprintLibrary_CreateAndSetBinkMediaPlayer::bInLooping' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_CreateAndSetBinkMediaPlayer, bInStartImmediately) == 0x000019, "Member 'TLBinkBlueprintLibrary_CreateAndSetBinkMediaPlayer::bInStartImmediately' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_CreateAndSetBinkMediaPlayer, bInDelayedOpen) == 0x00001A, "Member 'TLBinkBlueprintLibrary_CreateAndSetBinkMediaPlayer::bInDelayedOpen' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_CreateAndSetBinkMediaPlayer, ReturnValue) == 0x000020, "Member 'TLBinkBlueprintLibrary_CreateAndSetBinkMediaPlayer::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.CreateBinkMediaObject
// 0x0028 (0x0028 - 0x0000)
struct TLBinkBlueprintLibrary_CreateBinkMediaObject final
{
public:
	class UBinkMediaPlayer*                       BinkMediaPlayer;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBinkMediaTexture*                      BinkMediaTexture;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartImmediately;                                 // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDelayedOpen;                                      // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_CreateBinkMediaObject) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_CreateBinkMediaObject");
static_assert(sizeof(TLBinkBlueprintLibrary_CreateBinkMediaObject) == 0x000028, "Wrong size on TLBinkBlueprintLibrary_CreateBinkMediaObject");
static_assert(offsetof(TLBinkBlueprintLibrary_CreateBinkMediaObject, BinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_CreateBinkMediaObject::BinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_CreateBinkMediaObject, BinkMediaTexture) == 0x000008, "Member 'TLBinkBlueprintLibrary_CreateBinkMediaObject::BinkMediaTexture' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_CreateBinkMediaObject, URL) == 0x000010, "Member 'TLBinkBlueprintLibrary_CreateBinkMediaObject::URL' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_CreateBinkMediaObject, bLooping) == 0x000020, "Member 'TLBinkBlueprintLibrary_CreateBinkMediaObject::bLooping' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_CreateBinkMediaObject, bStartImmediately) == 0x000021, "Member 'TLBinkBlueprintLibrary_CreateBinkMediaObject::bStartImmediately' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_CreateBinkMediaObject, bDelayedOpen) == 0x000022, "Member 'TLBinkBlueprintLibrary_CreateBinkMediaObject::bDelayedOpen' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.CreateBinkMediaObjectFromAsset
// 0x0020 (0x0020 - 0x0000)
struct TLBinkBlueprintLibrary_CreateBinkMediaObjectFromAsset final
{
public:
	class UBinkMediaTexture*                      TextureAsset;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Outer_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBinkMediaPlayer*                       BinkMediaPlayer;                                   // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBinkMediaTexture*                      BinkMediaTexture;                                  // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBinkBlueprintLibrary_CreateBinkMediaObjectFromAsset) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_CreateBinkMediaObjectFromAsset");
static_assert(sizeof(TLBinkBlueprintLibrary_CreateBinkMediaObjectFromAsset) == 0x000020, "Wrong size on TLBinkBlueprintLibrary_CreateBinkMediaObjectFromAsset");
static_assert(offsetof(TLBinkBlueprintLibrary_CreateBinkMediaObjectFromAsset, TextureAsset) == 0x000000, "Member 'TLBinkBlueprintLibrary_CreateBinkMediaObjectFromAsset::TextureAsset' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_CreateBinkMediaObjectFromAsset, Outer_0) == 0x000008, "Member 'TLBinkBlueprintLibrary_CreateBinkMediaObjectFromAsset::Outer_0' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_CreateBinkMediaObjectFromAsset, BinkMediaPlayer) == 0x000010, "Member 'TLBinkBlueprintLibrary_CreateBinkMediaObjectFromAsset::BinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_CreateBinkMediaObjectFromAsset, BinkMediaTexture) == 0x000018, "Member 'TLBinkBlueprintLibrary_CreateBinkMediaObjectFromAsset::BinkMediaTexture' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.DrawBink
// 0x0020 (0x0020 - 0x0000)
struct TLBinkBlueprintLibrary_DrawBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Texture;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Tonemap;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Out_nits;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Srgb_decode;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HDR;                                               // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_DrawBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_DrawBink");
static_assert(sizeof(TLBinkBlueprintLibrary_DrawBink) == 0x000020, "Wrong size on TLBinkBlueprintLibrary_DrawBink");
static_assert(offsetof(TLBinkBlueprintLibrary_DrawBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_DrawBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_DrawBink, Texture) == 0x000008, "Member 'TLBinkBlueprintLibrary_DrawBink::Texture' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_DrawBink, Tonemap) == 0x000010, "Member 'TLBinkBlueprintLibrary_DrawBink::Tonemap' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_DrawBink, Out_nits) == 0x000014, "Member 'TLBinkBlueprintLibrary_DrawBink::Out_nits' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_DrawBink, Alpha) == 0x000018, "Member 'TLBinkBlueprintLibrary_DrawBink::Alpha' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_DrawBink, Srgb_decode) == 0x00001C, "Member 'TLBinkBlueprintLibrary_DrawBink::Srgb_decode' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_DrawBink, HDR) == 0x00001D, "Member 'TLBinkBlueprintLibrary_DrawBink::HDR' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.GetDurationBink
// 0x0010 (0x0010 - 0x0000)
struct TLBinkBlueprintLibrary_GetDurationBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBinkBlueprintLibrary_GetDurationBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_GetDurationBink");
static_assert(sizeof(TLBinkBlueprintLibrary_GetDurationBink) == 0x000010, "Wrong size on TLBinkBlueprintLibrary_GetDurationBink");
static_assert(offsetof(TLBinkBlueprintLibrary_GetDurationBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_GetDurationBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_GetDurationBink, ReturnValue) == 0x000008, "Member 'TLBinkBlueprintLibrary_GetDurationBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.GetRateBink
// 0x0010 (0x0010 - 0x0000)
struct TLBinkBlueprintLibrary_GetRateBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_GetRateBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_GetRateBink");
static_assert(sizeof(TLBinkBlueprintLibrary_GetRateBink) == 0x000010, "Wrong size on TLBinkBlueprintLibrary_GetRateBink");
static_assert(offsetof(TLBinkBlueprintLibrary_GetRateBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_GetRateBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_GetRateBink, ReturnValue) == 0x000008, "Member 'TLBinkBlueprintLibrary_GetRateBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.GetTimeBink
// 0x0010 (0x0010 - 0x0000)
struct TLBinkBlueprintLibrary_GetTimeBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBinkBlueprintLibrary_GetTimeBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_GetTimeBink");
static_assert(sizeof(TLBinkBlueprintLibrary_GetTimeBink) == 0x000010, "Wrong size on TLBinkBlueprintLibrary_GetTimeBink");
static_assert(offsetof(TLBinkBlueprintLibrary_GetTimeBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_GetTimeBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_GetTimeBink, ReturnValue) == 0x000008, "Member 'TLBinkBlueprintLibrary_GetTimeBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.GetUrlBink
// 0x0018 (0x0018 - 0x0000)
struct TLBinkBlueprintLibrary_GetUrlBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBinkBlueprintLibrary_GetUrlBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_GetUrlBink");
static_assert(sizeof(TLBinkBlueprintLibrary_GetUrlBink) == 0x000018, "Wrong size on TLBinkBlueprintLibrary_GetUrlBink");
static_assert(offsetof(TLBinkBlueprintLibrary_GetUrlBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_GetUrlBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_GetUrlBink, ReturnValue) == 0x000008, "Member 'TLBinkBlueprintLibrary_GetUrlBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.IsLoopingBink
// 0x0010 (0x0010 - 0x0000)
struct TLBinkBlueprintLibrary_IsLoopingBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_IsLoopingBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_IsLoopingBink");
static_assert(sizeof(TLBinkBlueprintLibrary_IsLoopingBink) == 0x000010, "Wrong size on TLBinkBlueprintLibrary_IsLoopingBink");
static_assert(offsetof(TLBinkBlueprintLibrary_IsLoopingBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_IsLoopingBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_IsLoopingBink, ReturnValue) == 0x000008, "Member 'TLBinkBlueprintLibrary_IsLoopingBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.IsPausedBink
// 0x0010 (0x0010 - 0x0000)
struct TLBinkBlueprintLibrary_IsPausedBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_IsPausedBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_IsPausedBink");
static_assert(sizeof(TLBinkBlueprintLibrary_IsPausedBink) == 0x000010, "Wrong size on TLBinkBlueprintLibrary_IsPausedBink");
static_assert(offsetof(TLBinkBlueprintLibrary_IsPausedBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_IsPausedBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_IsPausedBink, ReturnValue) == 0x000008, "Member 'TLBinkBlueprintLibrary_IsPausedBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.IsPlayingBink
// 0x0010 (0x0010 - 0x0000)
struct TLBinkBlueprintLibrary_IsPlayingBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_IsPlayingBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_IsPlayingBink");
static_assert(sizeof(TLBinkBlueprintLibrary_IsPlayingBink) == 0x000010, "Wrong size on TLBinkBlueprintLibrary_IsPlayingBink");
static_assert(offsetof(TLBinkBlueprintLibrary_IsPlayingBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_IsPlayingBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_IsPlayingBink, ReturnValue) == 0x000008, "Member 'TLBinkBlueprintLibrary_IsPlayingBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.IsStoppedBink
// 0x0010 (0x0010 - 0x0000)
struct TLBinkBlueprintLibrary_IsStoppedBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_IsStoppedBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_IsStoppedBink");
static_assert(sizeof(TLBinkBlueprintLibrary_IsStoppedBink) == 0x000010, "Wrong size on TLBinkBlueprintLibrary_IsStoppedBink");
static_assert(offsetof(TLBinkBlueprintLibrary_IsStoppedBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_IsStoppedBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_IsStoppedBink, ReturnValue) == 0x000008, "Member 'TLBinkBlueprintLibrary_IsStoppedBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.OpenBink
// 0x0020 (0x0020 - 0x0000)
struct TLBinkBlueprintLibrary_OpenBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewUrl;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_OpenBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_OpenBink");
static_assert(sizeof(TLBinkBlueprintLibrary_OpenBink) == 0x000020, "Wrong size on TLBinkBlueprintLibrary_OpenBink");
static_assert(offsetof(TLBinkBlueprintLibrary_OpenBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_OpenBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_OpenBink, NewUrl) == 0x000008, "Member 'TLBinkBlueprintLibrary_OpenBink::NewUrl' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_OpenBink, ReturnValue) == 0x000018, "Member 'TLBinkBlueprintLibrary_OpenBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.OpenUrlBink
// 0x0020 (0x0020 - 0x0000)
struct TLBinkBlueprintLibrary_OpenUrlBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewUrl;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_OpenUrlBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_OpenUrlBink");
static_assert(sizeof(TLBinkBlueprintLibrary_OpenUrlBink) == 0x000020, "Wrong size on TLBinkBlueprintLibrary_OpenUrlBink");
static_assert(offsetof(TLBinkBlueprintLibrary_OpenUrlBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_OpenUrlBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_OpenUrlBink, NewUrl) == 0x000008, "Member 'TLBinkBlueprintLibrary_OpenUrlBink::NewUrl' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_OpenUrlBink, ReturnValue) == 0x000018, "Member 'TLBinkBlueprintLibrary_OpenUrlBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.PauseBink
// 0x0010 (0x0010 - 0x0000)
struct TLBinkBlueprintLibrary_PauseBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_PauseBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_PauseBink");
static_assert(sizeof(TLBinkBlueprintLibrary_PauseBink) == 0x000010, "Wrong size on TLBinkBlueprintLibrary_PauseBink");
static_assert(offsetof(TLBinkBlueprintLibrary_PauseBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_PauseBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_PauseBink, ReturnValue) == 0x000008, "Member 'TLBinkBlueprintLibrary_PauseBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.PlayBink
// 0x0010 (0x0010 - 0x0000)
struct TLBinkBlueprintLibrary_PlayBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_PlayBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_PlayBink");
static_assert(sizeof(TLBinkBlueprintLibrary_PlayBink) == 0x000010, "Wrong size on TLBinkBlueprintLibrary_PlayBink");
static_assert(offsetof(TLBinkBlueprintLibrary_PlayBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_PlayBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_PlayBink, ReturnValue) == 0x000008, "Member 'TLBinkBlueprintLibrary_PlayBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.RewindBink
// 0x0010 (0x0010 - 0x0000)
struct TLBinkBlueprintLibrary_RewindBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_RewindBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_RewindBink");
static_assert(sizeof(TLBinkBlueprintLibrary_RewindBink) == 0x000010, "Wrong size on TLBinkBlueprintLibrary_RewindBink");
static_assert(offsetof(TLBinkBlueprintLibrary_RewindBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_RewindBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_RewindBink, ReturnValue) == 0x000008, "Member 'TLBinkBlueprintLibrary_RewindBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.SeekBink
// 0x0018 (0x0018 - 0x0000)
struct TLBinkBlueprintLibrary_SeekBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              InTime;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_SeekBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_SeekBink");
static_assert(sizeof(TLBinkBlueprintLibrary_SeekBink) == 0x000018, "Wrong size on TLBinkBlueprintLibrary_SeekBink");
static_assert(offsetof(TLBinkBlueprintLibrary_SeekBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_SeekBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_SeekBink, InTime) == 0x000008, "Member 'TLBinkBlueprintLibrary_SeekBink::InTime' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_SeekBink, ReturnValue) == 0x000010, "Member 'TLBinkBlueprintLibrary_SeekBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.SetLoopingBink
// 0x0010 (0x0010 - 0x0000)
struct TLBinkBlueprintLibrary_SetLoopingBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InLooping;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_SetLoopingBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_SetLoopingBink");
static_assert(sizeof(TLBinkBlueprintLibrary_SetLoopingBink) == 0x000010, "Wrong size on TLBinkBlueprintLibrary_SetLoopingBink");
static_assert(offsetof(TLBinkBlueprintLibrary_SetLoopingBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_SetLoopingBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_SetLoopingBink, InLooping) == 0x000008, "Member 'TLBinkBlueprintLibrary_SetLoopingBink::InLooping' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_SetLoopingBink, ReturnValue) == 0x000009, "Member 'TLBinkBlueprintLibrary_SetLoopingBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.SetRateBink
// 0x0010 (0x0010 - 0x0000)
struct TLBinkBlueprintLibrary_SetRateBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_SetRateBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_SetRateBink");
static_assert(sizeof(TLBinkBlueprintLibrary_SetRateBink) == 0x000010, "Wrong size on TLBinkBlueprintLibrary_SetRateBink");
static_assert(offsetof(TLBinkBlueprintLibrary_SetRateBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_SetRateBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_SetRateBink, Rate) == 0x000008, "Member 'TLBinkBlueprintLibrary_SetRateBink::Rate' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_SetRateBink, ReturnValue) == 0x00000C, "Member 'TLBinkBlueprintLibrary_SetRateBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.StopBink
// 0x0010 (0x0010 - 0x0000)
struct TLBinkBlueprintLibrary_StopBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_StopBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_StopBink");
static_assert(sizeof(TLBinkBlueprintLibrary_StopBink) == 0x000010, "Wrong size on TLBinkBlueprintLibrary_StopBink");
static_assert(offsetof(TLBinkBlueprintLibrary_StopBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_StopBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_StopBink, ReturnValue) == 0x000008, "Member 'TLBinkBlueprintLibrary_StopBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.SupportsRateBink
// 0x0010 (0x0010 - 0x0000)
struct TLBinkBlueprintLibrary_SupportsRateBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Unthinned;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_SupportsRateBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_SupportsRateBink");
static_assert(sizeof(TLBinkBlueprintLibrary_SupportsRateBink) == 0x000010, "Wrong size on TLBinkBlueprintLibrary_SupportsRateBink");
static_assert(offsetof(TLBinkBlueprintLibrary_SupportsRateBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_SupportsRateBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_SupportsRateBink, Rate) == 0x000008, "Member 'TLBinkBlueprintLibrary_SupportsRateBink::Rate' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_SupportsRateBink, Unthinned) == 0x00000C, "Member 'TLBinkBlueprintLibrary_SupportsRateBink::Unthinned' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_SupportsRateBink, ReturnValue) == 0x00000D, "Member 'TLBinkBlueprintLibrary_SupportsRateBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.SupportsScrubbingBink
// 0x0010 (0x0010 - 0x0000)
struct TLBinkBlueprintLibrary_SupportsScrubbingBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_SupportsScrubbingBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_SupportsScrubbingBink");
static_assert(sizeof(TLBinkBlueprintLibrary_SupportsScrubbingBink) == 0x000010, "Wrong size on TLBinkBlueprintLibrary_SupportsScrubbingBink");
static_assert(offsetof(TLBinkBlueprintLibrary_SupportsScrubbingBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_SupportsScrubbingBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_SupportsScrubbingBink, ReturnValue) == 0x000008, "Member 'TLBinkBlueprintLibrary_SupportsScrubbingBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBinkBlueprintLibrary.SupportsSeekingBink
// 0x0010 (0x0010 - 0x0000)
struct TLBinkBlueprintLibrary_SupportsSeekingBink final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBinkBlueprintLibrary_SupportsSeekingBink) == 0x000008, "Wrong alignment on TLBinkBlueprintLibrary_SupportsSeekingBink");
static_assert(sizeof(TLBinkBlueprintLibrary_SupportsSeekingBink) == 0x000010, "Wrong size on TLBinkBlueprintLibrary_SupportsSeekingBink");
static_assert(offsetof(TLBinkBlueprintLibrary_SupportsSeekingBink, InBinkMediaPlayer) == 0x000000, "Member 'TLBinkBlueprintLibrary_SupportsSeekingBink::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLBinkBlueprintLibrary_SupportsSeekingBink, ReturnValue) == 0x000008, "Member 'TLBinkBlueprintLibrary_SupportsSeekingBink::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.ActivateCustomSceneCamera
// 0x0028 (0x0028 - 0x0000)
struct TLBlueprintLibrary_ActivateCustomSceneCamera final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAdvance;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableZoom;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SceneOrigin;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CameraCenterOffset;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraDistOffset;                                  // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_ActivateCustomSceneCamera) == 0x000008, "Wrong alignment on TLBlueprintLibrary_ActivateCustomSceneCamera");
static_assert(sizeof(TLBlueprintLibrary_ActivateCustomSceneCamera) == 0x000028, "Wrong size on TLBlueprintLibrary_ActivateCustomSceneCamera");
static_assert(offsetof(TLBlueprintLibrary_ActivateCustomSceneCamera, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_ActivateCustomSceneCamera::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_ActivateCustomSceneCamera, bEnableAdvance) == 0x000008, "Member 'TLBlueprintLibrary_ActivateCustomSceneCamera::bEnableAdvance' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_ActivateCustomSceneCamera, bEnableZoom) == 0x000009, "Member 'TLBlueprintLibrary_ActivateCustomSceneCamera::bEnableZoom' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_ActivateCustomSceneCamera, SceneOrigin) == 0x00000C, "Member 'TLBlueprintLibrary_ActivateCustomSceneCamera::SceneOrigin' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_ActivateCustomSceneCamera, CameraCenterOffset) == 0x000018, "Member 'TLBlueprintLibrary_ActivateCustomSceneCamera::CameraCenterOffset' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_ActivateCustomSceneCamera, CameraDistOffset) == 0x000020, "Member 'TLBlueprintLibrary_ActivateCustomSceneCamera::CameraDistOffset' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.ChangeGameCamera
// 0x0010 (0x0010 - 0x0000)
struct TLBlueprintLibrary_ChangeGameCamera final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarp;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnCameraType                                 InCameraType;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_ChangeGameCamera) == 0x000008, "Wrong alignment on TLBlueprintLibrary_ChangeGameCamera");
static_assert(sizeof(TLBlueprintLibrary_ChangeGameCamera) == 0x000010, "Wrong size on TLBlueprintLibrary_ChangeGameCamera");
static_assert(offsetof(TLBlueprintLibrary_ChangeGameCamera, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_ChangeGameCamera::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_ChangeGameCamera, bWarp) == 0x000008, "Member 'TLBlueprintLibrary_ChangeGameCamera::bWarp' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_ChangeGameCamera, InCameraType) == 0x000009, "Member 'TLBlueprintLibrary_ChangeGameCamera::InCameraType' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.CreateMapEnvironmentAffector
// 0x0028 (0x0028 - 0x0000)
struct TLBlueprintLibrary_CreateMapEnvironmentAffector final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivationTag;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideBlendDuration;                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInDuration;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWind;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMapEnvironmentAffector*                ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_CreateMapEnvironmentAffector) == 0x000008, "Wrong alignment on TLBlueprintLibrary_CreateMapEnvironmentAffector");
static_assert(sizeof(TLBlueprintLibrary_CreateMapEnvironmentAffector) == 0x000028, "Wrong size on TLBlueprintLibrary_CreateMapEnvironmentAffector");
static_assert(offsetof(TLBlueprintLibrary_CreateMapEnvironmentAffector, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_CreateMapEnvironmentAffector::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_CreateMapEnvironmentAffector, ActivationTag) == 0x000008, "Member 'TLBlueprintLibrary_CreateMapEnvironmentAffector::ActivationTag' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_CreateMapEnvironmentAffector, Priority) == 0x000010, "Member 'TLBlueprintLibrary_CreateMapEnvironmentAffector::Priority' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_CreateMapEnvironmentAffector, bOverrideBlendDuration) == 0x000014, "Member 'TLBlueprintLibrary_CreateMapEnvironmentAffector::bOverrideBlendDuration' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_CreateMapEnvironmentAffector, BlendInDuration) == 0x000018, "Member 'TLBlueprintLibrary_CreateMapEnvironmentAffector::BlendInDuration' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_CreateMapEnvironmentAffector, bEnableWind) == 0x00001C, "Member 'TLBlueprintLibrary_CreateMapEnvironmentAffector::bEnableWind' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_CreateMapEnvironmentAffector, ReturnValue) == 0x000020, "Member 'TLBlueprintLibrary_CreateMapEnvironmentAffector::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.CreateWidget
// 0x0048 (0x0048 - 0x0000)
struct TLBlueprintLibrary_CreateWidget final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   InUIWidgetBPClass;                                 // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UTLUserWidgetFrame* Widget)> InCompleteDel;                                     // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ETLUIWidgetAttachTarget                       InAttachTarget;                                    // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDetachWithHide;                                   // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_CreateWidget) == 0x000008, "Wrong alignment on TLBlueprintLibrary_CreateWidget");
static_assert(sizeof(TLBlueprintLibrary_CreateWidget) == 0x000048, "Wrong size on TLBlueprintLibrary_CreateWidget");
static_assert(offsetof(TLBlueprintLibrary_CreateWidget, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_CreateWidget::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_CreateWidget, InUIWidgetBPClass) == 0x000008, "Member 'TLBlueprintLibrary_CreateWidget::InUIWidgetBPClass' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_CreateWidget, InCompleteDel) == 0x000030, "Member 'TLBlueprintLibrary_CreateWidget::InCompleteDel' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_CreateWidget, InAttachTarget) == 0x000040, "Member 'TLBlueprintLibrary_CreateWidget::InAttachTarget' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_CreateWidget, bDetachWithHide) == 0x000041, "Member 'TLBlueprintLibrary_CreateWidget::bDetachWithHide' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.CreateWidgets
// 0x0030 (0x0030 - 0x0000)
struct TLBlueprintLibrary_CreateWidgets final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           InUIWidgetBPClass;                                 // 0x0008(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TDelegate<void(TArray<class UTLUserWidgetFrame*>& Widgets)> InCompleteDel;                                     // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ETLUIWidgetAttachTarget                       InAttachTarget;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDetachWithHide;                                   // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_CreateWidgets) == 0x000008, "Wrong alignment on TLBlueprintLibrary_CreateWidgets");
static_assert(sizeof(TLBlueprintLibrary_CreateWidgets) == 0x000030, "Wrong size on TLBlueprintLibrary_CreateWidgets");
static_assert(offsetof(TLBlueprintLibrary_CreateWidgets, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_CreateWidgets::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_CreateWidgets, InUIWidgetBPClass) == 0x000008, "Member 'TLBlueprintLibrary_CreateWidgets::InUIWidgetBPClass' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_CreateWidgets, InCompleteDel) == 0x000018, "Member 'TLBlueprintLibrary_CreateWidgets::InCompleteDel' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_CreateWidgets, InAttachTarget) == 0x000028, "Member 'TLBlueprintLibrary_CreateWidgets::InAttachTarget' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_CreateWidgets, bDetachWithHide) == 0x000029, "Member 'TLBlueprintLibrary_CreateWidgets::bDetachWithHide' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.ExistsDataAsset
// 0x0020 (0x0020 - 0x0000)
struct TLBlueprintLibrary_ExistsDataAsset final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDataAsset>                 InDataAssetClass;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InKey;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_ExistsDataAsset) == 0x000008, "Wrong alignment on TLBlueprintLibrary_ExistsDataAsset");
static_assert(sizeof(TLBlueprintLibrary_ExistsDataAsset) == 0x000020, "Wrong size on TLBlueprintLibrary_ExistsDataAsset");
static_assert(offsetof(TLBlueprintLibrary_ExistsDataAsset, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_ExistsDataAsset::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_ExistsDataAsset, InDataAssetClass) == 0x000008, "Member 'TLBlueprintLibrary_ExistsDataAsset::InDataAssetClass' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_ExistsDataAsset, InKey) == 0x000010, "Member 'TLBlueprintLibrary_ExistsDataAsset::InKey' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_ExistsDataAsset, ReturnValue) == 0x000018, "Member 'TLBlueprintLibrary_ExistsDataAsset::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetAcquiredPolymorphDataList
// 0x0028 (0x0028 - 0x0000)
struct TLBlueprintLibrary_GetAcquiredPolymorphDataList final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCombatOnly;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GradeFilterBitFlag;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpeciesFilter;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTLSchemePolymorph>             OutDataList;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_GetAcquiredPolymorphDataList) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetAcquiredPolymorphDataList");
static_assert(sizeof(TLBlueprintLibrary_GetAcquiredPolymorphDataList) == 0x000028, "Wrong size on TLBlueprintLibrary_GetAcquiredPolymorphDataList");
static_assert(offsetof(TLBlueprintLibrary_GetAcquiredPolymorphDataList, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetAcquiredPolymorphDataList::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetAcquiredPolymorphDataList, bCombatOnly) == 0x000008, "Member 'TLBlueprintLibrary_GetAcquiredPolymorphDataList::bCombatOnly' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetAcquiredPolymorphDataList, GradeFilterBitFlag) == 0x00000C, "Member 'TLBlueprintLibrary_GetAcquiredPolymorphDataList::GradeFilterBitFlag' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetAcquiredPolymorphDataList, SpeciesFilter) == 0x000010, "Member 'TLBlueprintLibrary_GetAcquiredPolymorphDataList::SpeciesFilter' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetAcquiredPolymorphDataList, OutDataList) == 0x000018, "Member 'TLBlueprintLibrary_GetAcquiredPolymorphDataList::OutDataList' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetAcquiredPolymorphDataUIDs
// 0x0028 (0x0028 - 0x0000)
struct TLBlueprintLibrary_GetAcquiredPolymorphDataUIDs final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCombatOnly;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GradeFilterBitFlag;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpeciesFilter;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_GetAcquiredPolymorphDataUIDs) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetAcquiredPolymorphDataUIDs");
static_assert(sizeof(TLBlueprintLibrary_GetAcquiredPolymorphDataUIDs) == 0x000028, "Wrong size on TLBlueprintLibrary_GetAcquiredPolymorphDataUIDs");
static_assert(offsetof(TLBlueprintLibrary_GetAcquiredPolymorphDataUIDs, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetAcquiredPolymorphDataUIDs::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetAcquiredPolymorphDataUIDs, bCombatOnly) == 0x000008, "Member 'TLBlueprintLibrary_GetAcquiredPolymorphDataUIDs::bCombatOnly' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetAcquiredPolymorphDataUIDs, GradeFilterBitFlag) == 0x00000C, "Member 'TLBlueprintLibrary_GetAcquiredPolymorphDataUIDs::GradeFilterBitFlag' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetAcquiredPolymorphDataUIDs, SpeciesFilter) == 0x000010, "Member 'TLBlueprintLibrary_GetAcquiredPolymorphDataUIDs::SpeciesFilter' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetAcquiredPolymorphDataUIDs, ReturnValue) == 0x000018, "Member 'TLBlueprintLibrary_GetAcquiredPolymorphDataUIDs::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetActionKeyIconMarkup
// 0x0020 (0x0020 - 0x0000)
struct TLBlueprintLibrary_GetActionKeyIconMarkup final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InActionName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_GetActionKeyIconMarkup) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetActionKeyIconMarkup");
static_assert(sizeof(TLBlueprintLibrary_GetActionKeyIconMarkup) == 0x000020, "Wrong size on TLBlueprintLibrary_GetActionKeyIconMarkup");
static_assert(offsetof(TLBlueprintLibrary_GetActionKeyIconMarkup, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetActionKeyIconMarkup::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetActionKeyIconMarkup, InActionName) == 0x000008, "Member 'TLBlueprintLibrary_GetActionKeyIconMarkup::InActionName' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetActionKeyIconMarkup, ReturnValue) == 0x000010, "Member 'TLBlueprintLibrary_GetActionKeyIconMarkup::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetCharacterDeleteRemainTime
// 0x01D0 (0x01D0 - 0x0000)
struct TLBlueprintLibrary_GetCharacterDeleteRemainTime final
{
public:
	struct FTLCharacterData                       InCharacterData;                                   // 0x0000(0x01C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x01C8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_GetCharacterDeleteRemainTime) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetCharacterDeleteRemainTime");
static_assert(sizeof(TLBlueprintLibrary_GetCharacterDeleteRemainTime) == 0x0001D0, "Wrong size on TLBlueprintLibrary_GetCharacterDeleteRemainTime");
static_assert(offsetof(TLBlueprintLibrary_GetCharacterDeleteRemainTime, InCharacterData) == 0x000000, "Member 'TLBlueprintLibrary_GetCharacterDeleteRemainTime::InCharacterData' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetCharacterDeleteRemainTime, ReturnValue) == 0x0001C8, "Member 'TLBlueprintLibrary_GetCharacterDeleteRemainTime::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetCustomizeScene
// 0x0010 (0x0010 - 0x0000)
struct TLBlueprintLibrary_GetCustomizeScene final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATLCustomizeSceneControlActor*          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_GetCustomizeScene) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetCustomizeScene");
static_assert(sizeof(TLBlueprintLibrary_GetCustomizeScene) == 0x000010, "Wrong size on TLBlueprintLibrary_GetCustomizeScene");
static_assert(offsetof(TLBlueprintLibrary_GetCustomizeScene, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetCustomizeScene::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetCustomizeScene, ReturnValue) == 0x000008, "Member 'TLBlueprintLibrary_GetCustomizeScene::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetCustomizeSceneByType
// 0x0018 (0x0018 - 0x0000)
struct TLBlueprintLibrary_GetCustomizeSceneByType final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLCustomizeSceneType                         InCustomizeSceneType;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATLCustomizeSceneControlActor*          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_GetCustomizeSceneByType) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetCustomizeSceneByType");
static_assert(sizeof(TLBlueprintLibrary_GetCustomizeSceneByType) == 0x000018, "Wrong size on TLBlueprintLibrary_GetCustomizeSceneByType");
static_assert(offsetof(TLBlueprintLibrary_GetCustomizeSceneByType, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetCustomizeSceneByType::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetCustomizeSceneByType, InCustomizeSceneType) == 0x000008, "Member 'TLBlueprintLibrary_GetCustomizeSceneByType::InCustomizeSceneType' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetCustomizeSceneByType, ReturnValue) == 0x000010, "Member 'TLBlueprintLibrary_GetCustomizeSceneByType::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetCustomSceneActor
// 0x0018 (0x0018 - 0x0000)
struct TLBlueprintLibrary_GetCustomSceneActor final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSceneName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATLCustomSceneControlActor*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_GetCustomSceneActor) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetCustomSceneActor");
static_assert(sizeof(TLBlueprintLibrary_GetCustomSceneActor) == 0x000018, "Wrong size on TLBlueprintLibrary_GetCustomSceneActor");
static_assert(offsetof(TLBlueprintLibrary_GetCustomSceneActor, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetCustomSceneActor::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetCustomSceneActor, InSceneName) == 0x000008, "Member 'TLBlueprintLibrary_GetCustomSceneActor::InSceneName' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetCustomSceneActor, ReturnValue) == 0x000010, "Member 'TLBlueprintLibrary_GetCustomSceneActor::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetDataAsset
// 0x0028 (0x0028 - 0x0000)
struct TLBlueprintLibrary_GetDataAsset final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDataAsset>                 DataAssetClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTableRowBase                          OutData;                                           // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_GetDataAsset) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetDataAsset");
static_assert(sizeof(TLBlueprintLibrary_GetDataAsset) == 0x000028, "Wrong size on TLBlueprintLibrary_GetDataAsset");
static_assert(offsetof(TLBlueprintLibrary_GetDataAsset, WorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetDataAsset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetDataAsset, DataAssetClass) == 0x000008, "Member 'TLBlueprintLibrary_GetDataAsset::DataAssetClass' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetDataAsset, Key) == 0x000010, "Member 'TLBlueprintLibrary_GetDataAsset::Key' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetDataAsset, OutData) == 0x000018, "Member 'TLBlueprintLibrary_GetDataAsset::OutData' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetDataAsset, ReturnValue) == 0x000020, "Member 'TLBlueprintLibrary_GetDataAsset::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetDataAssetUID
// 0x0020 (0x0020 - 0x0000)
struct TLBlueprintLibrary_GetDataAssetUID final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDataAsset>                 InDataAssetClass;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InKey;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutUID;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_GetDataAssetUID) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetDataAssetUID");
static_assert(sizeof(TLBlueprintLibrary_GetDataAssetUID) == 0x000020, "Wrong size on TLBlueprintLibrary_GetDataAssetUID");
static_assert(offsetof(TLBlueprintLibrary_GetDataAssetUID, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetDataAssetUID::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetDataAssetUID, InDataAssetClass) == 0x000008, "Member 'TLBlueprintLibrary_GetDataAssetUID::InDataAssetClass' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetDataAssetUID, InKey) == 0x000010, "Member 'TLBlueprintLibrary_GetDataAssetUID::InKey' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetDataAssetUID, OutUID) == 0x000018, "Member 'TLBlueprintLibrary_GetDataAssetUID::OutUID' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetDataAssetUID, ReturnValue) == 0x00001C, "Member 'TLBlueprintLibrary_GetDataAssetUID::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetFoData
// 0x01F8 (0x01F8 - 0x0000)
struct TLBlueprintLibrary_GetFoData final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InKey;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTLInfoFo                              OutData;                                           // 0x0010(0x01E0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_GetFoData) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetFoData");
static_assert(sizeof(TLBlueprintLibrary_GetFoData) == 0x0001F8, "Wrong size on TLBlueprintLibrary_GetFoData");
static_assert(offsetof(TLBlueprintLibrary_GetFoData, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetFoData::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetFoData, InKey) == 0x000008, "Member 'TLBlueprintLibrary_GetFoData::InKey' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetFoData, OutData) == 0x000010, "Member 'TLBlueprintLibrary_GetFoData::OutData' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetFoData, ReturnValue) == 0x0001F0, "Member 'TLBlueprintLibrary_GetFoData::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetGameCamera
// 0x0018 (0x0018 - 0x0000)
struct TLBlueprintLibrary_GetGameCamera final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnCameraType                                 InCameraType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AUnrealCameraActor*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_GetGameCamera) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetGameCamera");
static_assert(sizeof(TLBlueprintLibrary_GetGameCamera) == 0x000018, "Wrong size on TLBlueprintLibrary_GetGameCamera");
static_assert(offsetof(TLBlueprintLibrary_GetGameCamera, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetGameCamera::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetGameCamera, InCameraType) == 0x000008, "Member 'TLBlueprintLibrary_GetGameCamera::InCameraType' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetGameCamera, ReturnValue) == 0x000010, "Member 'TLBlueprintLibrary_GetGameCamera::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetGameLobby
// 0x0010 (0x0010 - 0x0000)
struct TLBlueprintLibrary_GetGameLobby final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLGameLobby*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_GetGameLobby) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetGameLobby");
static_assert(sizeof(TLBlueprintLibrary_GetGameLobby) == 0x000010, "Wrong size on TLBlueprintLibrary_GetGameLobby");
static_assert(offsetof(TLBlueprintLibrary_GetGameLobby, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetGameLobby::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetGameLobby, ReturnValue) == 0x000008, "Member 'TLBlueprintLibrary_GetGameLobby::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetGameLobbyActor
// 0x0010 (0x0010 - 0x0000)
struct TLBlueprintLibrary_GetGameLobbyActor final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATLGameLobbyActor*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_GetGameLobbyActor) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetGameLobbyActor");
static_assert(sizeof(TLBlueprintLibrary_GetGameLobbyActor) == 0x000010, "Wrong size on TLBlueprintLibrary_GetGameLobbyActor");
static_assert(offsetof(TLBlueprintLibrary_GetGameLobbyActor, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetGameLobbyActor::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetGameLobbyActor, ReturnValue) == 0x000008, "Member 'TLBlueprintLibrary_GetGameLobbyActor::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetInGameUIStage
// 0x0010 (0x0010 - 0x0000)
struct TLBlueprintLibrary_GetInGameUIStage final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLUIStage                                    ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_GetInGameUIStage) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetInGameUIStage");
static_assert(sizeof(TLBlueprintLibrary_GetInGameUIStage) == 0x000010, "Wrong size on TLBlueprintLibrary_GetInGameUIStage");
static_assert(offsetof(TLBlueprintLibrary_GetInGameUIStage, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetInGameUIStage::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetInGameUIStage, ReturnValue) == 0x000008, "Member 'TLBlueprintLibrary_GetInGameUIStage::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetLevelSequenceOriginTransform
// 0x0040 (0x0040 - 0x0000)
struct TLBlueprintLibrary_GetLevelSequenceOriginTransform final
{
public:
	class ALevelSequenceActor*                    InSequenceActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_GetLevelSequenceOriginTransform) == 0x000010, "Wrong alignment on TLBlueprintLibrary_GetLevelSequenceOriginTransform");
static_assert(sizeof(TLBlueprintLibrary_GetLevelSequenceOriginTransform) == 0x000040, "Wrong size on TLBlueprintLibrary_GetLevelSequenceOriginTransform");
static_assert(offsetof(TLBlueprintLibrary_GetLevelSequenceOriginTransform, InSequenceActor) == 0x000000, "Member 'TLBlueprintLibrary_GetLevelSequenceOriginTransform::InSequenceActor' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetLevelSequenceOriginTransform, ReturnValue) == 0x000010, "Member 'TLBlueprintLibrary_GetLevelSequenceOriginTransform::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetMyPCActor
// 0x0010 (0x0010 - 0x0000)
struct TLBlueprintLibrary_GetMyPCActor final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_GetMyPCActor) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetMyPCActor");
static_assert(sizeof(TLBlueprintLibrary_GetMyPCActor) == 0x000010, "Wrong size on TLBlueprintLibrary_GetMyPCActor");
static_assert(offsetof(TLBlueprintLibrary_GetMyPCActor, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetMyPCActor::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetMyPCActor, ReturnValue) == 0x000008, "Member 'TLBlueprintLibrary_GetMyPCActor::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetMyPlatformType
// 0x0001 (0x0001 - 0x0000)
struct TLBlueprintLibrary_GetMyPlatformType final
{
public:
	EPcPlatformType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_GetMyPlatformType) == 0x000001, "Wrong alignment on TLBlueprintLibrary_GetMyPlatformType");
static_assert(sizeof(TLBlueprintLibrary_GetMyPlatformType) == 0x000001, "Wrong size on TLBlueprintLibrary_GetMyPlatformType");
static_assert(offsetof(TLBlueprintLibrary_GetMyPlatformType, ReturnValue) == 0x000000, "Member 'TLBlueprintLibrary_GetMyPlatformType::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetNPCData
// 0x0260 (0x0260 - 0x0000)
struct TLBlueprintLibrary_GetNPCData final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InKey;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTLInfoNpc                             OutData;                                           // 0x0010(0x0248)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0258(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_GetNPCData) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetNPCData");
static_assert(sizeof(TLBlueprintLibrary_GetNPCData) == 0x000260, "Wrong size on TLBlueprintLibrary_GetNPCData");
static_assert(offsetof(TLBlueprintLibrary_GetNPCData, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetNPCData::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetNPCData, InKey) == 0x000008, "Member 'TLBlueprintLibrary_GetNPCData::InKey' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetNPCData, OutData) == 0x000010, "Member 'TLBlueprintLibrary_GetNPCData::OutData' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetNPCData, ReturnValue) == 0x000258, "Member 'TLBlueprintLibrary_GetNPCData::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetPlayerTransformOrigin
// 0x0018 (0x0018 - 0x0000)
struct TLBlueprintLibrary_GetPlayerTransformOrigin final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_GetPlayerTransformOrigin) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetPlayerTransformOrigin");
static_assert(sizeof(TLBlueprintLibrary_GetPlayerTransformOrigin) == 0x000018, "Wrong size on TLBlueprintLibrary_GetPlayerTransformOrigin");
static_assert(offsetof(TLBlueprintLibrary_GetPlayerTransformOrigin, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetPlayerTransformOrigin::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetPlayerTransformOrigin, ReturnValue) == 0x000008, "Member 'TLBlueprintLibrary_GetPlayerTransformOrigin::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetPlayingLevelSequence
// 0x0018 (0x0018 - 0x0000)
struct TLBlueprintLibrary_GetPlayingLevelSequence final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InCutSceneID;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelSequenceActor*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_GetPlayingLevelSequence) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetPlayingLevelSequence");
static_assert(sizeof(TLBlueprintLibrary_GetPlayingLevelSequence) == 0x000018, "Wrong size on TLBlueprintLibrary_GetPlayingLevelSequence");
static_assert(offsetof(TLBlueprintLibrary_GetPlayingLevelSequence, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetPlayingLevelSequence::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetPlayingLevelSequence, InCutSceneID) == 0x000008, "Member 'TLBlueprintLibrary_GetPlayingLevelSequence::InCutSceneID' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetPlayingLevelSequence, ReturnValue) == 0x000010, "Member 'TLBlueprintLibrary_GetPlayingLevelSequence::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetPolymorphDataWithID
// 0x04A0 (0x04A0 - 0x0000)
struct TLBlueprintLibrary_GetPolymorphDataWithID final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InUID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLSchemePolymorph                     OutData;                                           // 0x0010(0x0490)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_GetPolymorphDataWithID) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetPolymorphDataWithID");
static_assert(sizeof(TLBlueprintLibrary_GetPolymorphDataWithID) == 0x0004A0, "Wrong size on TLBlueprintLibrary_GetPolymorphDataWithID");
static_assert(offsetof(TLBlueprintLibrary_GetPolymorphDataWithID, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetPolymorphDataWithID::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetPolymorphDataWithID, InUID) == 0x000008, "Member 'TLBlueprintLibrary_GetPolymorphDataWithID::InUID' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetPolymorphDataWithID, OutData) == 0x000010, "Member 'TLBlueprintLibrary_GetPolymorphDataWithID::OutData' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetTextFromTLStringUI
// 0x0028 (0x0028 - 0x0000)
struct TLBlueprintLibrary_GetTextFromTLStringUI final
{
public:
	class FString                                 InKey;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_GetTextFromTLStringUI) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetTextFromTLStringUI");
static_assert(sizeof(TLBlueprintLibrary_GetTextFromTLStringUI) == 0x000028, "Wrong size on TLBlueprintLibrary_GetTextFromTLStringUI");
static_assert(offsetof(TLBlueprintLibrary_GetTextFromTLStringUI, InKey) == 0x000000, "Member 'TLBlueprintLibrary_GetTextFromTLStringUI::InKey' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetTextFromTLStringUI, ReturnValue) == 0x000010, "Member 'TLBlueprintLibrary_GetTextFromTLStringUI::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetTLGameInstance
// 0x0010 (0x0010 - 0x0000)
struct TLBlueprintLibrary_GetTLGameInstance final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLGameInstance*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_GetTLGameInstance) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetTLGameInstance");
static_assert(sizeof(TLBlueprintLibrary_GetTLGameInstance) == 0x000010, "Wrong size on TLBlueprintLibrary_GetTLGameInstance");
static_assert(offsetof(TLBlueprintLibrary_GetTLGameInstance, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetTLGameInstance::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetTLGameInstance, ReturnValue) == 0x000008, "Member 'TLBlueprintLibrary_GetTLGameInstance::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetUIPlatform
// 0x0010 (0x0010 - 0x0000)
struct TLBlueprintLibrary_GetUIPlatform final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLUIPlatform                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_GetUIPlatform) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetUIPlatform");
static_assert(sizeof(TLBlueprintLibrary_GetUIPlatform) == 0x000010, "Wrong size on TLBlueprintLibrary_GetUIPlatform");
static_assert(offsetof(TLBlueprintLibrary_GetUIPlatform, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetUIPlatform::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetUIPlatform, ReturnValue) == 0x000008, "Member 'TLBlueprintLibrary_GetUIPlatform::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetWeaponCategoryText
// 0x0028 (0x0028 - 0x0000)
struct TLBlueprintLibrary_GetWeaponCategoryText final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponCategory                               InWeaponCategory;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_GetWeaponCategoryText) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetWeaponCategoryText");
static_assert(sizeof(TLBlueprintLibrary_GetWeaponCategoryText) == 0x000028, "Wrong size on TLBlueprintLibrary_GetWeaponCategoryText");
static_assert(offsetof(TLBlueprintLibrary_GetWeaponCategoryText, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetWeaponCategoryText::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetWeaponCategoryText, InWeaponCategory) == 0x000008, "Member 'TLBlueprintLibrary_GetWeaponCategoryText::InWeaponCategory' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetWeaponCategoryText, ReturnValue) == 0x000010, "Member 'TLBlueprintLibrary_GetWeaponCategoryText::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.GetWidgetFromUIManager
// 0x0018 (0x0018 - 0x0000)
struct TLBlueprintLibrary_GetWidgetFromUIManager final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InNameKey;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLUserWidget*                          ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_GetWidgetFromUIManager) == 0x000008, "Wrong alignment on TLBlueprintLibrary_GetWidgetFromUIManager");
static_assert(sizeof(TLBlueprintLibrary_GetWidgetFromUIManager) == 0x000018, "Wrong size on TLBlueprintLibrary_GetWidgetFromUIManager");
static_assert(offsetof(TLBlueprintLibrary_GetWidgetFromUIManager, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_GetWidgetFromUIManager::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetWidgetFromUIManager, InNameKey) == 0x000008, "Member 'TLBlueprintLibrary_GetWidgetFromUIManager::InNameKey' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_GetWidgetFromUIManager, ReturnValue) == 0x000010, "Member 'TLBlueprintLibrary_GetWidgetFromUIManager::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.IsContentsOpen
// 0x0010 (0x0010 - 0x0000)
struct TLBlueprintLibrary_IsContentsOpen final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLContentsOpenType                           InType;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_IsContentsOpen) == 0x000008, "Wrong alignment on TLBlueprintLibrary_IsContentsOpen");
static_assert(sizeof(TLBlueprintLibrary_IsContentsOpen) == 0x000010, "Wrong size on TLBlueprintLibrary_IsContentsOpen");
static_assert(offsetof(TLBlueprintLibrary_IsContentsOpen, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_IsContentsOpen::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_IsContentsOpen, InType) == 0x000008, "Member 'TLBlueprintLibrary_IsContentsOpen::InType' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_IsContentsOpen, ReturnValue) == 0x000009, "Member 'TLBlueprintLibrary_IsContentsOpen::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.IsCrosshairCameraMode
// 0x0010 (0x0010 - 0x0000)
struct TLBlueprintLibrary_IsCrosshairCameraMode final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_IsCrosshairCameraMode) == 0x000008, "Wrong alignment on TLBlueprintLibrary_IsCrosshairCameraMode");
static_assert(sizeof(TLBlueprintLibrary_IsCrosshairCameraMode) == 0x000010, "Wrong size on TLBlueprintLibrary_IsCrosshairCameraMode");
static_assert(offsetof(TLBlueprintLibrary_IsCrosshairCameraMode, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_IsCrosshairCameraMode::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_IsCrosshairCameraMode, ReturnValue) == 0x000008, "Member 'TLBlueprintLibrary_IsCrosshairCameraMode::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.IsShowUI
// 0x0018 (0x0018 - 0x0000)
struct TLBlueprintLibrary_IsShowUI final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InNameKey;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_IsShowUI) == 0x000008, "Wrong alignment on TLBlueprintLibrary_IsShowUI");
static_assert(sizeof(TLBlueprintLibrary_IsShowUI) == 0x000018, "Wrong size on TLBlueprintLibrary_IsShowUI");
static_assert(offsetof(TLBlueprintLibrary_IsShowUI, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_IsShowUI::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_IsShowUI, InNameKey) == 0x000008, "Member 'TLBlueprintLibrary_IsShowUI::InNameKey' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_IsShowUI, ReturnValue) == 0x000010, "Member 'TLBlueprintLibrary_IsShowUI::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.IsValidAssetPath
// 0x0020 (0x0020 - 0x0000)
struct TLBlueprintLibrary_IsValidAssetPath final
{
public:
	struct FSoftObjectPath                        SoftObjPath;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_IsValidAssetPath) == 0x000008, "Wrong alignment on TLBlueprintLibrary_IsValidAssetPath");
static_assert(sizeof(TLBlueprintLibrary_IsValidAssetPath) == 0x000020, "Wrong size on TLBlueprintLibrary_IsValidAssetPath");
static_assert(offsetof(TLBlueprintLibrary_IsValidAssetPath, SoftObjPath) == 0x000000, "Member 'TLBlueprintLibrary_IsValidAssetPath::SoftObjPath' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_IsValidAssetPath, ReturnValue) == 0x000018, "Member 'TLBlueprintLibrary_IsValidAssetPath::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.MakeAnimationBind
// 0x0018 (0x0018 - 0x0000)
struct TLBlueprintLibrary_MakeAnimationBind final
{
public:
	class UWidgetAnimation*                       InAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTLWidgetAnimationBind                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_MakeAnimationBind) == 0x000008, "Wrong alignment on TLBlueprintLibrary_MakeAnimationBind");
static_assert(sizeof(TLBlueprintLibrary_MakeAnimationBind) == 0x000018, "Wrong size on TLBlueprintLibrary_MakeAnimationBind");
static_assert(offsetof(TLBlueprintLibrary_MakeAnimationBind, InAnimation) == 0x000000, "Member 'TLBlueprintLibrary_MakeAnimationBind::InAnimation' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_MakeAnimationBind, ReturnValue) == 0x000008, "Member 'TLBlueprintLibrary_MakeAnimationBind::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.MakeBrushFromRenderTarget
// 0x0098 (0x0098 - 0x0000)
struct TLBlueprintLibrary_MakeBrushFromRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 InRenderTarget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InWidth;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InHeight;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ReturnValue;                                       // 0x0010(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_MakeBrushFromRenderTarget) == 0x000008, "Wrong alignment on TLBlueprintLibrary_MakeBrushFromRenderTarget");
static_assert(sizeof(TLBlueprintLibrary_MakeBrushFromRenderTarget) == 0x000098, "Wrong size on TLBlueprintLibrary_MakeBrushFromRenderTarget");
static_assert(offsetof(TLBlueprintLibrary_MakeBrushFromRenderTarget, InRenderTarget) == 0x000000, "Member 'TLBlueprintLibrary_MakeBrushFromRenderTarget::InRenderTarget' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_MakeBrushFromRenderTarget, InWidth) == 0x000008, "Member 'TLBlueprintLibrary_MakeBrushFromRenderTarget::InWidth' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_MakeBrushFromRenderTarget, InHeight) == 0x00000C, "Member 'TLBlueprintLibrary_MakeBrushFromRenderTarget::InHeight' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_MakeBrushFromRenderTarget, ReturnValue) == 0x000010, "Member 'TLBlueprintLibrary_MakeBrushFromRenderTarget::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.OnOpenWayPoint
// 0x0010 (0x0010 - 0x0000)
struct TLBlueprintLibrary_OnOpenWayPoint final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFogUid;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_OnOpenWayPoint) == 0x000008, "Wrong alignment on TLBlueprintLibrary_OnOpenWayPoint");
static_assert(sizeof(TLBlueprintLibrary_OnOpenWayPoint) == 0x000010, "Wrong size on TLBlueprintLibrary_OnOpenWayPoint");
static_assert(offsetof(TLBlueprintLibrary_OnOpenWayPoint, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_OnOpenWayPoint::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_OnOpenWayPoint, InFogUid) == 0x000008, "Member 'TLBlueprintLibrary_OnOpenWayPoint::InFogUid' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.PlayCustomScene
// 0x0010 (0x0010 - 0x0000)
struct TLBlueprintLibrary_PlayCustomScene final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSceneName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_PlayCustomScene) == 0x000008, "Wrong alignment on TLBlueprintLibrary_PlayCustomScene");
static_assert(sizeof(TLBlueprintLibrary_PlayCustomScene) == 0x000010, "Wrong size on TLBlueprintLibrary_PlayCustomScene");
static_assert(offsetof(TLBlueprintLibrary_PlayCustomScene, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_PlayCustomScene::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_PlayCustomScene, InSceneName) == 0x000008, "Member 'TLBlueprintLibrary_PlayCustomScene::InSceneName' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.PlayCutscene
// 0x0030 (0x0030 - 0x0000)
struct TLBlueprintLibrary_PlayCutscene final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InCutSceneID;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InExclusiveTag;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InControlUI;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName CutSceneID, class FName ExclusiveTag, ECutscenePlayResult PlayResult)> InFinishDel;                                       // 0x001C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInStopCurrentCutScene;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_PlayCutscene) == 0x000008, "Wrong alignment on TLBlueprintLibrary_PlayCutscene");
static_assert(sizeof(TLBlueprintLibrary_PlayCutscene) == 0x000030, "Wrong size on TLBlueprintLibrary_PlayCutscene");
static_assert(offsetof(TLBlueprintLibrary_PlayCutscene, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_PlayCutscene::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_PlayCutscene, InCutSceneID) == 0x000008, "Member 'TLBlueprintLibrary_PlayCutscene::InCutSceneID' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_PlayCutscene, InExclusiveTag) == 0x000010, "Member 'TLBlueprintLibrary_PlayCutscene::InExclusiveTag' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_PlayCutscene, InControlUI) == 0x000018, "Member 'TLBlueprintLibrary_PlayCutscene::InControlUI' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_PlayCutscene, InFinishDel) == 0x00001C, "Member 'TLBlueprintLibrary_PlayCutscene::InFinishDel' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_PlayCutscene, bInStopCurrentCutScene) == 0x00002C, "Member 'TLBlueprintLibrary_PlayCutscene::bInStopCurrentCutScene' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.PlayScenecontiOnMyPC
// 0x0020 (0x0020 - 0x0000)
struct TLBlueprintLibrary_PlayScenecontiOnMyPC final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        InSceneContiPath;                                  // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_PlayScenecontiOnMyPC) == 0x000008, "Wrong alignment on TLBlueprintLibrary_PlayScenecontiOnMyPC");
static_assert(sizeof(TLBlueprintLibrary_PlayScenecontiOnMyPC) == 0x000020, "Wrong size on TLBlueprintLibrary_PlayScenecontiOnMyPC");
static_assert(offsetof(TLBlueprintLibrary_PlayScenecontiOnMyPC, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_PlayScenecontiOnMyPC::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_PlayScenecontiOnMyPC, InSceneContiPath) == 0x000008, "Member 'TLBlueprintLibrary_PlayScenecontiOnMyPC::InSceneContiPath' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.PlayScenecontiOnMyPCWithScenecontiKey
// 0x0028 (0x0028 - 0x0000)
struct TLBlueprintLibrary_PlayScenecontiOnMyPCWithScenecontiKey final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        InSceneContiPath;                                  // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InScenecontiKey;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_PlayScenecontiOnMyPCWithScenecontiKey) == 0x000008, "Wrong alignment on TLBlueprintLibrary_PlayScenecontiOnMyPCWithScenecontiKey");
static_assert(sizeof(TLBlueprintLibrary_PlayScenecontiOnMyPCWithScenecontiKey) == 0x000028, "Wrong size on TLBlueprintLibrary_PlayScenecontiOnMyPCWithScenecontiKey");
static_assert(offsetof(TLBlueprintLibrary_PlayScenecontiOnMyPCWithScenecontiKey, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_PlayScenecontiOnMyPCWithScenecontiKey::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_PlayScenecontiOnMyPCWithScenecontiKey, InSceneContiPath) == 0x000008, "Member 'TLBlueprintLibrary_PlayScenecontiOnMyPCWithScenecontiKey::InSceneContiPath' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_PlayScenecontiOnMyPCWithScenecontiKey, InScenecontiKey) == 0x000020, "Member 'TLBlueprintLibrary_PlayScenecontiOnMyPCWithScenecontiKey::InScenecontiKey' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.ReadyToCutsceneWarpReq
// 0x0008 (0x0008 - 0x0000)
struct TLBlueprintLibrary_ReadyToCutsceneWarpReq final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_ReadyToCutsceneWarpReq) == 0x000008, "Wrong alignment on TLBlueprintLibrary_ReadyToCutsceneWarpReq");
static_assert(sizeof(TLBlueprintLibrary_ReadyToCutsceneWarpReq) == 0x000008, "Wrong size on TLBlueprintLibrary_ReadyToCutsceneWarpReq");
static_assert(offsetof(TLBlueprintLibrary_ReadyToCutsceneWarpReq, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_ReadyToCutsceneWarpReq::InWorldContextObject' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.ReleasePreLoadingLevelSequence
// 0x0010 (0x0010 - 0x0000)
struct TLBlueprintLibrary_ReleasePreLoadingLevelSequence final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTag;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_ReleasePreLoadingLevelSequence) == 0x000008, "Wrong alignment on TLBlueprintLibrary_ReleasePreLoadingLevelSequence");
static_assert(sizeof(TLBlueprintLibrary_ReleasePreLoadingLevelSequence) == 0x000010, "Wrong size on TLBlueprintLibrary_ReleasePreLoadingLevelSequence");
static_assert(offsetof(TLBlueprintLibrary_ReleasePreLoadingLevelSequence, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_ReleasePreLoadingLevelSequence::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_ReleasePreLoadingLevelSequence, InTag) == 0x000008, "Member 'TLBlueprintLibrary_ReleasePreLoadingLevelSequence::InTag' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.ReplaceAdvancedMarkup
// 0x0038 (0x0038 - 0x0000)
struct TLBlueprintLibrary_ReplaceAdvancedMarkup final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InText;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_ReplaceAdvancedMarkup) == 0x000008, "Wrong alignment on TLBlueprintLibrary_ReplaceAdvancedMarkup");
static_assert(sizeof(TLBlueprintLibrary_ReplaceAdvancedMarkup) == 0x000038, "Wrong size on TLBlueprintLibrary_ReplaceAdvancedMarkup");
static_assert(offsetof(TLBlueprintLibrary_ReplaceAdvancedMarkup, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_ReplaceAdvancedMarkup::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_ReplaceAdvancedMarkup, InText) == 0x000008, "Member 'TLBlueprintLibrary_ReplaceAdvancedMarkup::InText' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_ReplaceAdvancedMarkup, ReturnValue) == 0x000020, "Member 'TLBlueprintLibrary_ReplaceAdvancedMarkup::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.SetContentsEvent
// 0x0010 (0x0010 - 0x0000)
struct TLBlueprintLibrary_SetContentsEvent final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTLContentsEventParameter              InNewParam;                                        // 0x0008(0x0002)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_SetContentsEvent) == 0x000008, "Wrong alignment on TLBlueprintLibrary_SetContentsEvent");
static_assert(sizeof(TLBlueprintLibrary_SetContentsEvent) == 0x000010, "Wrong size on TLBlueprintLibrary_SetContentsEvent");
static_assert(offsetof(TLBlueprintLibrary_SetContentsEvent, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_SetContentsEvent::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_SetContentsEvent, InNewParam) == 0x000008, "Member 'TLBlueprintLibrary_SetContentsEvent::InNewParam' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.SetLevelSequenceOriginTransform
// 0x0040 (0x0040 - 0x0000)
struct TLBlueprintLibrary_SetLevelSequenceOriginTransform final
{
public:
	class ALevelSequenceActor*                    InSequenceActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_SetLevelSequenceOriginTransform) == 0x000010, "Wrong alignment on TLBlueprintLibrary_SetLevelSequenceOriginTransform");
static_assert(sizeof(TLBlueprintLibrary_SetLevelSequenceOriginTransform) == 0x000040, "Wrong size on TLBlueprintLibrary_SetLevelSequenceOriginTransform");
static_assert(offsetof(TLBlueprintLibrary_SetLevelSequenceOriginTransform, InSequenceActor) == 0x000000, "Member 'TLBlueprintLibrary_SetLevelSequenceOriginTransform::InSequenceActor' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_SetLevelSequenceOriginTransform, InTransform) == 0x000010, "Member 'TLBlueprintLibrary_SetLevelSequenceOriginTransform::InTransform' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.SetUIVisibleOnCutScene
// 0x0010 (0x0010 - 0x0000)
struct TLBlueprintLibrary_SetUIVisibleOnCutScene final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InVisible;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_SetUIVisibleOnCutScene) == 0x000008, "Wrong alignment on TLBlueprintLibrary_SetUIVisibleOnCutScene");
static_assert(sizeof(TLBlueprintLibrary_SetUIVisibleOnCutScene) == 0x000010, "Wrong size on TLBlueprintLibrary_SetUIVisibleOnCutScene");
static_assert(offsetof(TLBlueprintLibrary_SetUIVisibleOnCutScene, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_SetUIVisibleOnCutScene::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_SetUIVisibleOnCutScene, InVisible) == 0x000008, "Member 'TLBlueprintLibrary_SetUIVisibleOnCutScene::InVisible' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.ShowUI
// 0x0018 (0x0018 - 0x0000)
struct TLBlueprintLibrary_ShowUI final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InNameKey;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInShow;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_ShowUI) == 0x000008, "Wrong alignment on TLBlueprintLibrary_ShowUI");
static_assert(sizeof(TLBlueprintLibrary_ShowUI) == 0x000018, "Wrong size on TLBlueprintLibrary_ShowUI");
static_assert(offsetof(TLBlueprintLibrary_ShowUI, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_ShowUI::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_ShowUI, InNameKey) == 0x000008, "Member 'TLBlueprintLibrary_ShowUI::InNameKey' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_ShowUI, bInShow) == 0x000010, "Member 'TLBlueprintLibrary_ShowUI::bInShow' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_ShowUI, ReturnValue) == 0x000011, "Member 'TLBlueprintLibrary_ShowUI::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.StopCurrentCutscene
// 0x0008 (0x0008 - 0x0000)
struct TLBlueprintLibrary_StopCurrentCutscene final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_StopCurrentCutscene) == 0x000008, "Wrong alignment on TLBlueprintLibrary_StopCurrentCutscene");
static_assert(sizeof(TLBlueprintLibrary_StopCurrentCutscene) == 0x000008, "Wrong size on TLBlueprintLibrary_StopCurrentCutscene");
static_assert(offsetof(TLBlueprintLibrary_StopCurrentCutscene, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_StopCurrentCutscene::InWorldContextObject' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.StopScenecontiOnMyPC
// 0x0008 (0x0008 - 0x0000)
struct TLBlueprintLibrary_StopScenecontiOnMyPC final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_StopScenecontiOnMyPC) == 0x000008, "Wrong alignment on TLBlueprintLibrary_StopScenecontiOnMyPC");
static_assert(sizeof(TLBlueprintLibrary_StopScenecontiOnMyPC) == 0x000008, "Wrong size on TLBlueprintLibrary_StopScenecontiOnMyPC");
static_assert(offsetof(TLBlueprintLibrary_StopScenecontiOnMyPC, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_StopScenecontiOnMyPC::InWorldContextObject' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.StopScenecontiOnMyPCWithScenecontiKey
// 0x0010 (0x0010 - 0x0000)
struct TLBlueprintLibrary_StopScenecontiOnMyPCWithScenecontiKey final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InScenecontiKey;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_StopScenecontiOnMyPCWithScenecontiKey) == 0x000008, "Wrong alignment on TLBlueprintLibrary_StopScenecontiOnMyPCWithScenecontiKey");
static_assert(sizeof(TLBlueprintLibrary_StopScenecontiOnMyPCWithScenecontiKey) == 0x000010, "Wrong size on TLBlueprintLibrary_StopScenecontiOnMyPCWithScenecontiKey");
static_assert(offsetof(TLBlueprintLibrary_StopScenecontiOnMyPCWithScenecontiKey, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_StopScenecontiOnMyPCWithScenecontiKey::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_StopScenecontiOnMyPCWithScenecontiKey, InScenecontiKey) == 0x000008, "Member 'TLBlueprintLibrary_StopScenecontiOnMyPCWithScenecontiKey::InScenecontiKey' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.SyncGameCameraToPOV
// 0x0010 (0x0010 - 0x0000)
struct TLBlueprintLibrary_SyncGameCameraToPOV final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnCameraType                                 InCameraType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_SyncGameCameraToPOV) == 0x000008, "Wrong alignment on TLBlueprintLibrary_SyncGameCameraToPOV");
static_assert(sizeof(TLBlueprintLibrary_SyncGameCameraToPOV) == 0x000010, "Wrong size on TLBlueprintLibrary_SyncGameCameraToPOV");
static_assert(offsetof(TLBlueprintLibrary_SyncGameCameraToPOV, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_SyncGameCameraToPOV::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_SyncGameCameraToPOV, InCameraType) == 0x000008, "Member 'TLBlueprintLibrary_SyncGameCameraToPOV::InCameraType' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.TerminateWidget
// 0x0018 (0x0018 - 0x0000)
struct TLBlueprintLibrary_TerminateWidget final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTLUserWidget*>                  InWidgets;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBlueprintLibrary_TerminateWidget) == 0x000008, "Wrong alignment on TLBlueprintLibrary_TerminateWidget");
static_assert(sizeof(TLBlueprintLibrary_TerminateWidget) == 0x000018, "Wrong size on TLBlueprintLibrary_TerminateWidget");
static_assert(offsetof(TLBlueprintLibrary_TerminateWidget, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_TerminateWidget::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_TerminateWidget, InWidgets) == 0x000008, "Member 'TLBlueprintLibrary_TerminateWidget::InWidgets' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.ToggleUI
// 0x0018 (0x0018 - 0x0000)
struct TLBlueprintLibrary_ToggleUI final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InNameKey;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_ToggleUI) == 0x000008, "Wrong alignment on TLBlueprintLibrary_ToggleUI");
static_assert(sizeof(TLBlueprintLibrary_ToggleUI) == 0x000018, "Wrong size on TLBlueprintLibrary_ToggleUI");
static_assert(offsetof(TLBlueprintLibrary_ToggleUI, InWorldContextObject) == 0x000000, "Member 'TLBlueprintLibrary_ToggleUI::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_ToggleUI, InNameKey) == 0x000008, "Member 'TLBlueprintLibrary_ToggleUI::InNameKey' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_ToggleUI, ReturnValue) == 0x000010, "Member 'TLBlueprintLibrary_ToggleUI::ReturnValue' has a wrong offset!");

// Function TLClient.TLBlueprintLibrary.TryLookAt
// 0x0018 (0x0018 - 0x0000)
struct TLBlueprintLibrary_TryLookAt final
{
public:
	class AActor*                                 InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InTargetPosition;                                  // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBlueprintLibrary_TryLookAt) == 0x000008, "Wrong alignment on TLBlueprintLibrary_TryLookAt");
static_assert(sizeof(TLBlueprintLibrary_TryLookAt) == 0x000018, "Wrong size on TLBlueprintLibrary_TryLookAt");
static_assert(offsetof(TLBlueprintLibrary_TryLookAt, InCharacter) == 0x000000, "Member 'TLBlueprintLibrary_TryLookAt::InCharacter' has a wrong offset!");
static_assert(offsetof(TLBlueprintLibrary_TryLookAt, InTargetPosition) == 0x000008, "Member 'TLBlueprintLibrary_TryLookAt::InTargetPosition' has a wrong offset!");

// Function TLClient.TLUserWidgetContentsViewer.HandleMinimizeButtonOnCheck
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContentsViewer_HandleMinimizeButtonOnCheck final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContentsViewer_HandleMinimizeButtonOnCheck) == 0x000001, "Wrong alignment on TLUserWidgetContentsViewer_HandleMinimizeButtonOnCheck");
static_assert(sizeof(TLUserWidgetContentsViewer_HandleMinimizeButtonOnCheck) == 0x000001, "Wrong size on TLUserWidgetContentsViewer_HandleMinimizeButtonOnCheck");
static_assert(offsetof(TLUserWidgetContentsViewer_HandleMinimizeButtonOnCheck, bIsChecked) == 0x000000, "Member 'TLUserWidgetContentsViewer_HandleMinimizeButtonOnCheck::bIsChecked' has a wrong offset!");

// Function TLClient.TLUserWidgetContentsViewer.OnContentsAlarmOpen
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContentsViewer_OnContentsAlarmOpen final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContentsViewer_OnContentsAlarmOpen) == 0x000001, "Wrong alignment on TLUserWidgetContentsViewer_OnContentsAlarmOpen");
static_assert(sizeof(TLUserWidgetContentsViewer_OnContentsAlarmOpen) == 0x000001, "Wrong size on TLUserWidgetContentsViewer_OnContentsAlarmOpen");
static_assert(offsetof(TLUserWidgetContentsViewer_OnContentsAlarmOpen, bIsOpen) == 0x000000, "Member 'TLUserWidgetContentsViewer_OnContentsAlarmOpen::bIsOpen' has a wrong offset!");

// Function TLClient.TLUserWidgetContentsViewer.OnMinimizeEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContentsViewer_OnMinimizeEvent final
{
public:
	bool                                          bMinimize;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContentsViewer_OnMinimizeEvent) == 0x000001, "Wrong alignment on TLUserWidgetContentsViewer_OnMinimizeEvent");
static_assert(sizeof(TLUserWidgetContentsViewer_OnMinimizeEvent) == 0x000001, "Wrong size on TLUserWidgetContentsViewer_OnMinimizeEvent");
static_assert(offsetof(TLUserWidgetContentsViewer_OnMinimizeEvent, bMinimize) == 0x000000, "Member 'TLUserWidgetContentsViewer_OnMinimizeEvent::bMinimize' has a wrong offset!");

// Function TLClient.TLUserWidgetContentsViewer.OnUpdateViewerTabType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContentsViewer_OnUpdateViewerTabType final
{
public:
	EContentsAlarmViewerTab                       InTabType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContentsViewer_OnUpdateViewerTabType) == 0x000001, "Wrong alignment on TLUserWidgetContentsViewer_OnUpdateViewerTabType");
static_assert(sizeof(TLUserWidgetContentsViewer_OnUpdateViewerTabType) == 0x000001, "Wrong size on TLUserWidgetContentsViewer_OnUpdateViewerTabType");
static_assert(offsetof(TLUserWidgetContentsViewer_OnUpdateViewerTabType, InTabType) == 0x000000, "Member 'TLUserWidgetContentsViewer_OnUpdateViewerTabType::InTabType' has a wrong offset!");

// Function TLClient.TLUserWidgetContentsViewer.OnVisibleGuideEvent
// 0x000C (0x000C - 0x0000)
struct TLUserWidgetContentsViewer_OnVisibleGuideEvent final
{
public:
	class FName                                   InParentWidgetNodeName;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowGuideEvent;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetContentsViewer_OnVisibleGuideEvent) == 0x000004, "Wrong alignment on TLUserWidgetContentsViewer_OnVisibleGuideEvent");
static_assert(sizeof(TLUserWidgetContentsViewer_OnVisibleGuideEvent) == 0x00000C, "Wrong size on TLUserWidgetContentsViewer_OnVisibleGuideEvent");
static_assert(offsetof(TLUserWidgetContentsViewer_OnVisibleGuideEvent, InParentWidgetNodeName) == 0x000000, "Member 'TLUserWidgetContentsViewer_OnVisibleGuideEvent::InParentWidgetNodeName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetContentsViewer_OnVisibleGuideEvent, bShowGuideEvent) == 0x000008, "Member 'TLUserWidgetContentsViewer_OnVisibleGuideEvent::bShowGuideEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetExploreUnit.HandleCheckedFoldButtonEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetExploreUnit_HandleCheckedFoldButtonEvent final
{
public:
	bool                                          bCheck;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetExploreUnit_HandleCheckedFoldButtonEvent) == 0x000001, "Wrong alignment on TLUserWidgetExploreUnit_HandleCheckedFoldButtonEvent");
static_assert(sizeof(TLUserWidgetExploreUnit_HandleCheckedFoldButtonEvent) == 0x000001, "Wrong size on TLUserWidgetExploreUnit_HandleCheckedFoldButtonEvent");
static_assert(offsetof(TLUserWidgetExploreUnit_HandleCheckedFoldButtonEvent, bCheck) == 0x000000, "Member 'TLUserWidgetExploreUnit_HandleCheckedFoldButtonEvent::bCheck' has a wrong offset!");

// Function TLClient.TLUserWidgetExploreUnit.OnUnLockMemorial
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetExploreUnit_OnUnLockMemorial final
{
public:
	bool                                          IsUnLock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetExploreUnit_OnUnLockMemorial) == 0x000001, "Wrong alignment on TLUserWidgetExploreUnit_OnUnLockMemorial");
static_assert(sizeof(TLUserWidgetExploreUnit_OnUnLockMemorial) == 0x000001, "Wrong size on TLUserWidgetExploreUnit_OnUnLockMemorial");
static_assert(offsetof(TLUserWidgetExploreUnit_OnUnLockMemorial, IsUnLock) == 0x000000, "Member 'TLUserWidgetExploreUnit_OnUnLockMemorial::IsUnLock' has a wrong offset!");

// Function TLClient.TLBoutiqueSceneControlActor.OnBoutiqueModeChanged
// 0x0001 (0x0001 - 0x0000)
struct TLBoutiqueSceneControlActor_OnBoutiqueModeChanged final
{
public:
	EBoutiqueState                                Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBoutiqueSceneControlActor_OnBoutiqueModeChanged) == 0x000001, "Wrong alignment on TLBoutiqueSceneControlActor_OnBoutiqueModeChanged");
static_assert(sizeof(TLBoutiqueSceneControlActor_OnBoutiqueModeChanged) == 0x000001, "Wrong size on TLBoutiqueSceneControlActor_OnBoutiqueModeChanged");
static_assert(offsetof(TLBoutiqueSceneControlActor_OnBoutiqueModeChanged, Mode) == 0x000000, "Member 'TLBoutiqueSceneControlActor_OnBoutiqueModeChanged::Mode' has a wrong offset!");

// Function TLClient.TLBoutiqueSceneControlActor.OnSelectPolymorph
// 0x0008 (0x0008 - 0x0000)
struct TLBoutiqueSceneControlActor_OnSelectPolymorph final
{
public:
	class FName                                   InCustomSceneId;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBoutiqueSceneControlActor_OnSelectPolymorph) == 0x000004, "Wrong alignment on TLBoutiqueSceneControlActor_OnSelectPolymorph");
static_assert(sizeof(TLBoutiqueSceneControlActor_OnSelectPolymorph) == 0x000008, "Wrong size on TLBoutiqueSceneControlActor_OnSelectPolymorph");
static_assert(offsetof(TLBoutiqueSceneControlActor_OnSelectPolymorph, InCustomSceneId) == 0x000000, "Member 'TLBoutiqueSceneControlActor_OnSelectPolymorph::InCustomSceneId' has a wrong offset!");

// Function TLClient.TLUserMagicDollInfoWidget.OnChangeCountConditionLevel
// 0x0001 (0x0001 - 0x0000)
struct TLUserMagicDollInfoWidget_OnChangeCountConditionLevel final
{
public:
	ESkillUseItemCountConditionLevel              InLevel;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserMagicDollInfoWidget_OnChangeCountConditionLevel) == 0x000001, "Wrong alignment on TLUserMagicDollInfoWidget_OnChangeCountConditionLevel");
static_assert(sizeof(TLUserMagicDollInfoWidget_OnChangeCountConditionLevel) == 0x000001, "Wrong size on TLUserMagicDollInfoWidget_OnChangeCountConditionLevel");
static_assert(offsetof(TLUserMagicDollInfoWidget_OnChangeCountConditionLevel, InLevel) == 0x000000, "Member 'TLUserMagicDollInfoWidget_OnChangeCountConditionLevel::InLevel' has a wrong offset!");

// Function TLClient.TLBuilderCommandMacroDelay.TLMacroDelay
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommandMacroDelay_TLMacroDelay final
{
public:
	float                                         DelaySec;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommandMacroDelay_TLMacroDelay) == 0x000004, "Wrong alignment on TLBuilderCommandMacroDelay_TLMacroDelay");
static_assert(sizeof(TLBuilderCommandMacroDelay_TLMacroDelay) == 0x000008, "Wrong size on TLBuilderCommandMacroDelay_TLMacroDelay");
static_assert(offsetof(TLBuilderCommandMacroDelay_TLMacroDelay, DelaySec) == 0x000000, "Member 'TLBuilderCommandMacroDelay_TLMacroDelay::DelaySec' has a wrong offset!");
static_assert(offsetof(TLBuilderCommandMacroDelay_TLMacroDelay, ReturnValue) == 0x000004, "Member 'TLBuilderCommandMacroDelay_TLMacroDelay::ReturnValue' has a wrong offset!");

// Function TLClient.TLBuilderCommandTP.TLTP
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommandTP_TLTP final
{
public:
	class FName                                   TLTeleportListName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommandTP_TLTP) == 0x000004, "Wrong alignment on TLBuilderCommandTP_TLTP");
static_assert(sizeof(TLBuilderCommandTP_TLTP) == 0x00000C, "Wrong size on TLBuilderCommandTP_TLTP");
static_assert(offsetof(TLBuilderCommandTP_TLTP, TLTeleportListName) == 0x000000, "Member 'TLBuilderCommandTP_TLTP::TLTeleportListName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommandTP_TLTP, ReturnValue) == 0x000008, "Member 'TLBuilderCommandTP_TLTP::ReturnValue' has a wrong offset!");

// Function TLClient.TLBuilderCommandCustomize.TLSaveCustomize
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommandCustomize_TLSaveCustomize final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommandCustomize_TLSaveCustomize) == 0x000008, "Wrong alignment on TLBuilderCommandCustomize_TLSaveCustomize");
static_assert(sizeof(TLBuilderCommandCustomize_TLSaveCustomize) == 0x000018, "Wrong size on TLBuilderCommandCustomize_TLSaveCustomize");
static_assert(offsetof(TLBuilderCommandCustomize_TLSaveCustomize, Filename) == 0x000000, "Member 'TLBuilderCommandCustomize_TLSaveCustomize::Filename' has a wrong offset!");
static_assert(offsetof(TLBuilderCommandCustomize_TLSaveCustomize, ReturnValue) == 0x000010, "Member 'TLBuilderCommandCustomize_TLSaveCustomize::ReturnValue' has a wrong offset!");

// Function TLClient.TLBuilderCommands.DisconnectFromGateServer
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_DisconnectFromGateServer final
{
public:
	bool                                          bUnexpectedly;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_DisconnectFromGateServer) == 0x000001, "Wrong alignment on TLBuilderCommands_DisconnectFromGateServer");
static_assert(sizeof(TLBuilderCommands_DisconnectFromGateServer) == 0x000001, "Wrong size on TLBuilderCommands_DisconnectFromGateServer");
static_assert(offsetof(TLBuilderCommands_DisconnectFromGateServer, bUnexpectedly) == 0x000000, "Member 'TLBuilderCommands_DisconnectFromGateServer::bUnexpectedly' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAccountStatus
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLAccountStatus final
{
public:
	class FName                                   InAccountType;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InAddMin;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAccountStatus) == 0x000004, "Wrong alignment on TLBuilderCommands_TLAccountStatus");
static_assert(sizeof(TLBuilderCommands_TLAccountStatus) == 0x00000C, "Wrong size on TLBuilderCommands_TLAccountStatus");
static_assert(offsetof(TLBuilderCommands_TLAccountStatus, InAccountType) == 0x000000, "Member 'TLBuilderCommands_TLAccountStatus::InAccountType' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAccountStatus, InAddMin) == 0x000008, "Member 'TLBuilderCommands_TLAccountStatus::InAddMin' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLActivateGlobalTag
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLActivateGlobalTag final
{
public:
	class FName                                   InActivationTag;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLActivateGlobalTag) == 0x000004, "Wrong alignment on TLBuilderCommands_TLActivateGlobalTag");
static_assert(sizeof(TLBuilderCommands_TLActivateGlobalTag) == 0x000008, "Wrong size on TLBuilderCommands_TLActivateGlobalTag");
static_assert(offsetof(TLBuilderCommands_TLActivateGlobalTag, InActivationTag) == 0x000000, "Member 'TLBuilderCommands_TLActivateGlobalTag::InActivationTag' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLActiveEscrow
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLActiveEscrow final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLActiveEscrow) == 0x000001, "Wrong alignment on TLBuilderCommands_TLActiveEscrow");
static_assert(sizeof(TLBuilderCommands_TLActiveEscrow) == 0x000001, "Wrong size on TLBuilderCommands_TLActiveEscrow");
static_assert(offsetof(TLBuilderCommands_TLActiveEscrow, InIsActive) == 0x000000, "Member 'TLBuilderCommands_TLActiveEscrow::InIsActive' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLActiveMembership
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLActiveMembership final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InUID;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InAddMin;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLActiveMembership) == 0x000004, "Wrong alignment on TLBuilderCommands_TLActiveMembership");
static_assert(sizeof(TLBuilderCommands_TLActiveMembership) == 0x00000C, "Wrong size on TLBuilderCommands_TLActiveMembership");
static_assert(offsetof(TLBuilderCommands_TLActiveMembership, InIsActive) == 0x000000, "Member 'TLBuilderCommands_TLActiveMembership::InIsActive' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLActiveMembership, InUID) == 0x000004, "Member 'TLBuilderCommands_TLActiveMembership::InUID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLActiveMembership, InAddMin) == 0x000008, "Member 'TLBuilderCommands_TLActiveMembership::InAddMin' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAddCircleForceVolume
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLAddCircleForceVolume final
{
public:
	int64                                         VolumeID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSec;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForceSize;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLAddCircleForceVolume) == 0x000008, "Wrong alignment on TLBuilderCommands_TLAddCircleForceVolume");
static_assert(sizeof(TLBuilderCommands_TLAddCircleForceVolume) == 0x000018, "Wrong size on TLBuilderCommands_TLAddCircleForceVolume");
static_assert(offsetof(TLBuilderCommands_TLAddCircleForceVolume, VolumeID) == 0x000000, "Member 'TLBuilderCommands_TLAddCircleForceVolume::VolumeID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddCircleForceVolume, DurationSec) == 0x000008, "Member 'TLBuilderCommands_TLAddCircleForceVolume::DurationSec' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddCircleForceVolume, ForceSize) == 0x00000C, "Member 'TLBuilderCommands_TLAddCircleForceVolume::ForceSize' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddCircleForceVolume, Radius) == 0x000010, "Member 'TLBuilderCommands_TLAddCircleForceVolume::Radius' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAddDesignerPreset
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLAddDesignerPreset final
{
public:
	class FString                                 InParams;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAddDesignerPreset) == 0x000008, "Wrong alignment on TLBuilderCommands_TLAddDesignerPreset");
static_assert(sizeof(TLBuilderCommands_TLAddDesignerPreset) == 0x000010, "Wrong size on TLBuilderCommands_TLAddDesignerPreset");
static_assert(offsetof(TLBuilderCommands_TLAddDesignerPreset, InParams) == 0x000000, "Member 'TLBuilderCommands_TLAddDesignerPreset::InParams' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAddDirectionalForceVolume
// 0x0040 (0x0040 - 0x0000)
struct TLBuilderCommands_TLAddDirectionalForceVolume final
{
public:
	int64                                         VolumeID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InType;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PushOrPull;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForceSize;                                         // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirX;                                              // 0x002C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirY;                                              // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirZ;                                              // 0x0034(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvalidCenterCircleRadius;                         // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x003C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAddDirectionalForceVolume) == 0x000008, "Wrong alignment on TLBuilderCommands_TLAddDirectionalForceVolume");
static_assert(sizeof(TLBuilderCommands_TLAddDirectionalForceVolume) == 0x000040, "Wrong size on TLBuilderCommands_TLAddDirectionalForceVolume");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolume, VolumeID) == 0x000000, "Member 'TLBuilderCommands_TLAddDirectionalForceVolume::VolumeID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolume, InType) == 0x000008, "Member 'TLBuilderCommands_TLAddDirectionalForceVolume::InType' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolume, PushOrPull) == 0x00000C, "Member 'TLBuilderCommands_TLAddDirectionalForceVolume::PushOrPull' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolume, Duration) == 0x000010, "Member 'TLBuilderCommands_TLAddDirectionalForceVolume::Duration' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolume, ForceSize) == 0x000014, "Member 'TLBuilderCommands_TLAddDirectionalForceVolume::ForceSize' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolume, X) == 0x000018, "Member 'TLBuilderCommands_TLAddDirectionalForceVolume::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolume, Y) == 0x00001C, "Member 'TLBuilderCommands_TLAddDirectionalForceVolume::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolume, Z) == 0x000020, "Member 'TLBuilderCommands_TLAddDirectionalForceVolume::Z' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolume, Width) == 0x000024, "Member 'TLBuilderCommands_TLAddDirectionalForceVolume::Width' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolume, Length) == 0x000028, "Member 'TLBuilderCommands_TLAddDirectionalForceVolume::Length' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolume, DirX) == 0x00002C, "Member 'TLBuilderCommands_TLAddDirectionalForceVolume::DirX' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolume, DirY) == 0x000030, "Member 'TLBuilderCommands_TLAddDirectionalForceVolume::DirY' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolume, DirZ) == 0x000034, "Member 'TLBuilderCommands_TLAddDirectionalForceVolume::DirZ' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolume, InvalidCenterCircleRadius) == 0x000038, "Member 'TLBuilderCommands_TLAddDirectionalForceVolume::InvalidCenterCircleRadius' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolume, Angle) == 0x00003C, "Member 'TLBuilderCommands_TLAddDirectionalForceVolume::Angle' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAddDirectionalForceVolumeTest1
// 0x0020 (0x0020 - 0x0000)
struct TLBuilderCommands_TLAddDirectionalForceVolumeTest1 final
{
public:
	int64                                         VolumeID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InType;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSec;                                       // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvalidCenterCircleRadius;                         // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAddDirectionalForceVolumeTest1) == 0x000008, "Wrong alignment on TLBuilderCommands_TLAddDirectionalForceVolumeTest1");
static_assert(sizeof(TLBuilderCommands_TLAddDirectionalForceVolumeTest1) == 0x000020, "Wrong size on TLBuilderCommands_TLAddDirectionalForceVolumeTest1");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolumeTest1, VolumeID) == 0x000000, "Member 'TLBuilderCommands_TLAddDirectionalForceVolumeTest1::VolumeID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolumeTest1, InType) == 0x000008, "Member 'TLBuilderCommands_TLAddDirectionalForceVolumeTest1::InType' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolumeTest1, Width) == 0x00000C, "Member 'TLBuilderCommands_TLAddDirectionalForceVolumeTest1::Width' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolumeTest1, Length) == 0x000010, "Member 'TLBuilderCommands_TLAddDirectionalForceVolumeTest1::Length' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolumeTest1, DurationSec) == 0x000014, "Member 'TLBuilderCommands_TLAddDirectionalForceVolumeTest1::DurationSec' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolumeTest1, InvalidCenterCircleRadius) == 0x000018, "Member 'TLBuilderCommands_TLAddDirectionalForceVolumeTest1::InvalidCenterCircleRadius' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDirectionalForceVolumeTest1, Angle) == 0x00001C, "Member 'TLBuilderCommands_TLAddDirectionalForceVolumeTest1::Angle' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAddDonutForceVolume
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLAddDonutForceVolume final
{
public:
	int64                                         VolumeID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSec;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForceSize;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IgnoreRadius;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAddDonutForceVolume) == 0x000008, "Wrong alignment on TLBuilderCommands_TLAddDonutForceVolume");
static_assert(sizeof(TLBuilderCommands_TLAddDonutForceVolume) == 0x000018, "Wrong size on TLBuilderCommands_TLAddDonutForceVolume");
static_assert(offsetof(TLBuilderCommands_TLAddDonutForceVolume, VolumeID) == 0x000000, "Member 'TLBuilderCommands_TLAddDonutForceVolume::VolumeID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDonutForceVolume, DurationSec) == 0x000008, "Member 'TLBuilderCommands_TLAddDonutForceVolume::DurationSec' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDonutForceVolume, ForceSize) == 0x00000C, "Member 'TLBuilderCommands_TLAddDonutForceVolume::ForceSize' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDonutForceVolume, Radius) == 0x000010, "Member 'TLBuilderCommands_TLAddDonutForceVolume::Radius' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddDonutForceVolume, IgnoreRadius) == 0x000014, "Member 'TLBuilderCommands_TLAddDonutForceVolume::IgnoreRadius' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAddItem
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLAddItem final
{
public:
	int32                                         ClassId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantLevel;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAddItem) == 0x000004, "Wrong alignment on TLBuilderCommands_TLAddItem");
static_assert(sizeof(TLBuilderCommands_TLAddItem) == 0x00000C, "Wrong size on TLBuilderCommands_TLAddItem");
static_assert(offsetof(TLBuilderCommands_TLAddItem, ClassId) == 0x000000, "Member 'TLBuilderCommands_TLAddItem::ClassId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddItem, Count) == 0x000004, "Member 'TLBuilderCommands_TLAddItem::Count' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddItem, EnchantLevel) == 0x000008, "Member 'TLBuilderCommands_TLAddItem::EnchantLevel' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAddItemByName
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLAddItemByName final
{
public:
	class FName                                   ItemName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantLevel;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAddItemByName) == 0x000004, "Wrong alignment on TLBuilderCommands_TLAddItemByName");
static_assert(sizeof(TLBuilderCommands_TLAddItemByName) == 0x000010, "Wrong size on TLBuilderCommands_TLAddItemByName");
static_assert(offsetof(TLBuilderCommands_TLAddItemByName, ItemName) == 0x000000, "Member 'TLBuilderCommands_TLAddItemByName::ItemName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddItemByName, Count) == 0x000008, "Member 'TLBuilderCommands_TLAddItemByName::Count' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddItemByName, EnchantLevel) == 0x00000C, "Member 'TLBuilderCommands_TLAddItemByName::EnchantLevel' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAddPartyTargetMarkerOnlyClient
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLAddPartyTargetMarkerOnlyClient final
{
public:
	int32                                         InMarkNum;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAddPartyTargetMarkerOnlyClient) == 0x000004, "Wrong alignment on TLBuilderCommands_TLAddPartyTargetMarkerOnlyClient");
static_assert(sizeof(TLBuilderCommands_TLAddPartyTargetMarkerOnlyClient) == 0x000004, "Wrong size on TLBuilderCommands_TLAddPartyTargetMarkerOnlyClient");
static_assert(offsetof(TLBuilderCommands_TLAddPartyTargetMarkerOnlyClient, InMarkNum) == 0x000000, "Member 'TLBuilderCommands_TLAddPartyTargetMarkerOnlyClient::InMarkNum' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAddTestDialogueMessage
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLAddTestDialogueMessage final
{
public:
	class FString                                 TestMessageBody;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InMessageCategory;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InMessageCount;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAddTestDialogueMessage) == 0x000008, "Wrong alignment on TLBuilderCommands_TLAddTestDialogueMessage");
static_assert(sizeof(TLBuilderCommands_TLAddTestDialogueMessage) == 0x000018, "Wrong size on TLBuilderCommands_TLAddTestDialogueMessage");
static_assert(offsetof(TLBuilderCommands_TLAddTestDialogueMessage, TestMessageBody) == 0x000000, "Member 'TLBuilderCommands_TLAddTestDialogueMessage::TestMessageBody' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddTestDialogueMessage, InMessageCategory) == 0x000010, "Member 'TLBuilderCommands_TLAddTestDialogueMessage::InMessageCategory' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddTestDialogueMessage, InMessageCount) == 0x000014, "Member 'TLBuilderCommands_TLAddTestDialogueMessage::InMessageCount' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAddTestSystemMessage
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLAddTestSystemMessage final
{
public:
	class FString                                 TestMessageBody;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAddTestSystemMessage) == 0x000008, "Wrong alignment on TLBuilderCommands_TLAddTestSystemMessage");
static_assert(sizeof(TLBuilderCommands_TLAddTestSystemMessage) == 0x000010, "Wrong size on TLBuilderCommands_TLAddTestSystemMessage");
static_assert(offsetof(TLBuilderCommands_TLAddTestSystemMessage, TestMessageBody) == 0x000000, "Member 'TLBuilderCommands_TLAddTestSystemMessage::TestMessageBody' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAddVirtualCurrencyExpiration
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLAddVirtualCurrencyExpiration final
{
public:
	int64                                         InAmount;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InAddMin;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLAddVirtualCurrencyExpiration) == 0x000008, "Wrong alignment on TLBuilderCommands_TLAddVirtualCurrencyExpiration");
static_assert(sizeof(TLBuilderCommands_TLAddVirtualCurrencyExpiration) == 0x000010, "Wrong size on TLBuilderCommands_TLAddVirtualCurrencyExpiration");
static_assert(offsetof(TLBuilderCommands_TLAddVirtualCurrencyExpiration, InAmount) == 0x000000, "Member 'TLBuilderCommands_TLAddVirtualCurrencyExpiration::InAmount' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAddVirtualCurrencyExpiration, InAddMin) == 0x000008, "Member 'TLBuilderCommands_TLAddVirtualCurrencyExpiration::InAddMin' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAggressive
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLAggressive final
{
public:
	bool                                          bAggressive;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAggressive) == 0x000001, "Wrong alignment on TLBuilderCommands_TLAggressive");
static_assert(sizeof(TLBuilderCommands_TLAggressive) == 0x000001, "Wrong size on TLBuilderCommands_TLAggressive");
static_assert(offsetof(TLBuilderCommands_TLAggressive, bAggressive) == 0x000000, "Member 'TLBuilderCommands_TLAggressive::bAggressive' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAlchemyPlayResultCutScene
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLAlchemyPlayResultCutScene final
{
public:
	int32                                         InGradeIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAlchemyPlayResultCutScene) == 0x000004, "Wrong alignment on TLBuilderCommands_TLAlchemyPlayResultCutScene");
static_assert(sizeof(TLBuilderCommands_TLAlchemyPlayResultCutScene) == 0x000004, "Wrong size on TLBuilderCommands_TLAlchemyPlayResultCutScene");
static_assert(offsetof(TLBuilderCommands_TLAlchemyPlayResultCutScene, InGradeIndex) == 0x000000, "Member 'TLBuilderCommands_TLAlchemyPlayResultCutScene::InGradeIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAnalogCursorDeadZone
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLAnalogCursorDeadZone final
{
public:
	float                                         DeadZone;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAnalogCursorDeadZone) == 0x000004, "Wrong alignment on TLBuilderCommands_TLAnalogCursorDeadZone");
static_assert(sizeof(TLBuilderCommands_TLAnalogCursorDeadZone) == 0x000004, "Wrong size on TLBuilderCommands_TLAnalogCursorDeadZone");
static_assert(offsetof(TLBuilderCommands_TLAnalogCursorDeadZone, DeadZone) == 0x000000, "Member 'TLBuilderCommands_TLAnalogCursorDeadZone::DeadZone' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAnalogCursorEnable
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLAnalogCursorEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAnalogCursorEnable) == 0x000001, "Wrong alignment on TLBuilderCommands_TLAnalogCursorEnable");
static_assert(sizeof(TLBuilderCommands_TLAnalogCursorEnable) == 0x000001, "Wrong size on TLBuilderCommands_TLAnalogCursorEnable");
static_assert(offsetof(TLBuilderCommands_TLAnalogCursorEnable, bEnable) == 0x000000, "Member 'TLBuilderCommands_TLAnalogCursorEnable::bEnable' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAnalogCursorInteractableRadius
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLAnalogCursorInteractableRadius final
{
public:
	float                                         CursorInteractableRadius;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAnalogCursorInteractableRadius) == 0x000004, "Wrong alignment on TLBuilderCommands_TLAnalogCursorInteractableRadius");
static_assert(sizeof(TLBuilderCommands_TLAnalogCursorInteractableRadius) == 0x000004, "Wrong size on TLBuilderCommands_TLAnalogCursorInteractableRadius");
static_assert(offsetof(TLBuilderCommands_TLAnalogCursorInteractableRadius, CursorInteractableRadius) == 0x000000, "Member 'TLBuilderCommands_TLAnalogCursorInteractableRadius::CursorInteractableRadius' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAnalogCursorMaxSpeed
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLAnalogCursorMaxSpeed final
{
public:
	float                                         MaxSpeed;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAnalogCursorMaxSpeed) == 0x000004, "Wrong alignment on TLBuilderCommands_TLAnalogCursorMaxSpeed");
static_assert(sizeof(TLBuilderCommands_TLAnalogCursorMaxSpeed) == 0x000004, "Wrong size on TLBuilderCommands_TLAnalogCursorMaxSpeed");
static_assert(offsetof(TLBuilderCommands_TLAnalogCursorMaxSpeed, MaxSpeed) == 0x000000, "Member 'TLBuilderCommands_TLAnalogCursorMaxSpeed::MaxSpeed' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAnalogCursorMode
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLAnalogCursorMode final
{
public:
	int32                                         Mode;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAnalogCursorMode) == 0x000004, "Wrong alignment on TLBuilderCommands_TLAnalogCursorMode");
static_assert(sizeof(TLBuilderCommands_TLAnalogCursorMode) == 0x000008, "Wrong size on TLBuilderCommands_TLAnalogCursorMode");
static_assert(offsetof(TLBuilderCommands_TLAnalogCursorMode, Mode) == 0x000000, "Member 'TLBuilderCommands_TLAnalogCursorMode::Mode' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAnalogCursorMode, Acceleration) == 0x000004, "Member 'TLBuilderCommands_TLAnalogCursorMode::Acceleration' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAnalogCursorStickySlowdown
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLAnalogCursorStickySlowdown final
{
public:
	float                                         StickySlowdownMin;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StickySlowdownMax;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StickySlowdownSecond;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAnalogCursorStickySlowdown) == 0x000004, "Wrong alignment on TLBuilderCommands_TLAnalogCursorStickySlowdown");
static_assert(sizeof(TLBuilderCommands_TLAnalogCursorStickySlowdown) == 0x00000C, "Wrong size on TLBuilderCommands_TLAnalogCursorStickySlowdown");
static_assert(offsetof(TLBuilderCommands_TLAnalogCursorStickySlowdown, StickySlowdownMin) == 0x000000, "Member 'TLBuilderCommands_TLAnalogCursorStickySlowdown::StickySlowdownMin' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAnalogCursorStickySlowdown, StickySlowdownMax) == 0x000004, "Member 'TLBuilderCommands_TLAnalogCursorStickySlowdown::StickySlowdownMax' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLAnalogCursorStickySlowdown, StickySlowdownSecond) == 0x000008, "Member 'TLBuilderCommands_TLAnalogCursorStickySlowdown::StickySlowdownSecond' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLApplyForce
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLApplyForce final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         F;                                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLApplyForce) == 0x000004, "Wrong alignment on TLBuilderCommands_TLApplyForce");
static_assert(sizeof(TLBuilderCommands_TLApplyForce) == 0x000010, "Wrong size on TLBuilderCommands_TLApplyForce");
static_assert(offsetof(TLBuilderCommands_TLApplyForce, X) == 0x000000, "Member 'TLBuilderCommands_TLApplyForce::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLApplyForce, Y) == 0x000004, "Member 'TLBuilderCommands_TLApplyForce::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLApplyForce, Z) == 0x000008, "Member 'TLBuilderCommands_TLApplyForce::Z' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLApplyForce, F) == 0x00000C, "Member 'TLBuilderCommands_TLApplyForce::F' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLArenaPlayTierChange
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLArenaPlayTierChange final
{
public:
	int32                                         PrevTier;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextTier;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLArenaPlayTierChange) == 0x000004, "Wrong alignment on TLBuilderCommands_TLArenaPlayTierChange");
static_assert(sizeof(TLBuilderCommands_TLArenaPlayTierChange) == 0x000008, "Wrong size on TLBuilderCommands_TLArenaPlayTierChange");
static_assert(offsetof(TLBuilderCommands_TLArenaPlayTierChange, PrevTier) == 0x000000, "Member 'TLBuilderCommands_TLArenaPlayTierChange::PrevTier' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLArenaPlayTierChange, NextTier) == 0x000004, "Member 'TLBuilderCommands_TLArenaPlayTierChange::NextTier' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAttachUI
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLAttachUI final
{
public:
	class FString                                 InAttachUI;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAttachUI) == 0x000008, "Wrong alignment on TLBuilderCommands_TLAttachUI");
static_assert(sizeof(TLBuilderCommands_TLAttachUI) == 0x000010, "Wrong size on TLBuilderCommands_TLAttachUI");
static_assert(offsetof(TLBuilderCommands_TLAttachUI, InAttachUI) == 0x000000, "Member 'TLBuilderCommands_TLAttachUI::InAttachUI' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAutonDebug
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLAutonDebug final
{
public:
	bool                                          bDebug;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAutonDebug) == 0x000001, "Wrong alignment on TLBuilderCommands_TLAutonDebug");
static_assert(sizeof(TLBuilderCommands_TLAutonDebug) == 0x000001, "Wrong size on TLBuilderCommands_TLAutonDebug");
static_assert(offsetof(TLBuilderCommands_TLAutonDebug, bDebug) == 0x000000, "Member 'TLBuilderCommands_TLAutonDebug::bDebug' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLAutonSilencio
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLAutonSilencio final
{
public:
	bool                                          bSilencio;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLAutonSilencio) == 0x000001, "Wrong alignment on TLBuilderCommands_TLAutonSilencio");
static_assert(sizeof(TLBuilderCommands_TLAutonSilencio) == 0x000001, "Wrong size on TLBuilderCommands_TLAutonSilencio");
static_assert(offsetof(TLBuilderCommands_TLAutonSilencio, bSilencio) == 0x000000, "Member 'TLBuilderCommands_TLAutonSilencio::bSilencio' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLBlackScreen
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLBlackScreen final
{
public:
	bool                                          InIsEnable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLBlackScreen) == 0x000001, "Wrong alignment on TLBuilderCommands_TLBlackScreen");
static_assert(sizeof(TLBuilderCommands_TLBlackScreen) == 0x000001, "Wrong size on TLBuilderCommands_TLBlackScreen");
static_assert(offsetof(TLBuilderCommands_TLBlackScreen, InIsEnable) == 0x000000, "Member 'TLBuilderCommands_TLBlackScreen::InIsEnable' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLBMWarehouse
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLBMWarehouse final
{
public:
	int32                                         InPage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSize;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLBMWarehouse) == 0x000004, "Wrong alignment on TLBuilderCommands_TLBMWarehouse");
static_assert(sizeof(TLBuilderCommands_TLBMWarehouse) == 0x000008, "Wrong size on TLBuilderCommands_TLBMWarehouse");
static_assert(offsetof(TLBuilderCommands_TLBMWarehouse, InPage) == 0x000000, "Member 'TLBuilderCommands_TLBMWarehouse::InPage' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLBMWarehouse, InSize) == 0x000004, "Member 'TLBuilderCommands_TLBMWarehouse::InSize' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLBoutique
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLBoutique final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLBoutique) == 0x000001, "Wrong alignment on TLBuilderCommands_TLBoutique");
static_assert(sizeof(TLBuilderCommands_TLBoutique) == 0x000001, "Wrong size on TLBuilderCommands_TLBoutique");
static_assert(offsetof(TLBuilderCommands_TLBoutique, bShow) == 0x000000, "Member 'TLBuilderCommands_TLBoutique::bShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLBreakThrough
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLBreakThrough final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetX;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetY;                                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DurationMs;                                        // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLBreakThrough) == 0x000004, "Wrong alignment on TLBuilderCommands_TLBreakThrough");
static_assert(sizeof(TLBuilderCommands_TLBreakThrough) == 0x000010, "Wrong size on TLBuilderCommands_TLBreakThrough");
static_assert(offsetof(TLBuilderCommands_TLBreakThrough, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLBreakThrough::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLBreakThrough, TargetX) == 0x000004, "Member 'TLBuilderCommands_TLBreakThrough::TargetX' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLBreakThrough, TargetY) == 0x000008, "Member 'TLBuilderCommands_TLBreakThrough::TargetY' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLBreakThrough, DurationMs) == 0x00000C, "Member 'TLBuilderCommands_TLBreakThrough::DurationMs' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLBrightness
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLBrightness final
{
public:
	float                                         InBrightness;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLBrightness) == 0x000004, "Wrong alignment on TLBuilderCommands_TLBrightness");
static_assert(sizeof(TLBuilderCommands_TLBrightness) == 0x000004, "Wrong size on TLBuilderCommands_TLBrightness");
static_assert(offsetof(TLBuilderCommands_TLBrightness, InBrightness) == 0x000000, "Member 'TLBuilderCommands_TLBrightness::InBrightness' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCalendar
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLCalendar final
{
public:
	int32                                         InShow;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCalendar) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCalendar");
static_assert(sizeof(TLBuilderCommands_TLCalendar) == 0x000004, "Wrong size on TLBuilderCommands_TLCalendar");
static_assert(offsetof(TLBuilderCommands_TLCalendar, InShow) == 0x000000, "Member 'TLBuilderCommands_TLCalendar::InShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCameraBackView
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLCameraBackView final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCameraBackView) == 0x000001, "Wrong alignment on TLBuilderCommands_TLCameraBackView");
static_assert(sizeof(TLBuilderCommands_TLCameraBackView) == 0x000001, "Wrong size on TLBuilderCommands_TLCameraBackView");
static_assert(offsetof(TLBuilderCommands_TLCameraBackView, bOn) == 0x000000, "Member 'TLBuilderCommands_TLCameraBackView::bOn' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCameraBlendDist
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLCameraBlendDist final
{
public:
	float                                         InCamDist;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendInSec;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCameraBlendDist) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCameraBlendDist");
static_assert(sizeof(TLBuilderCommands_TLCameraBlendDist) == 0x000008, "Wrong size on TLBuilderCommands_TLCameraBlendDist");
static_assert(offsetof(TLBuilderCommands_TLCameraBlendDist, InCamDist) == 0x000000, "Member 'TLBuilderCommands_TLCameraBlendDist::InCamDist' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCameraBlendDist, InBlendInSec) == 0x000004, "Member 'TLBuilderCommands_TLCameraBlendDist::InBlendInSec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCameraBlendRot
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLCameraBlendRot final
{
public:
	float                                         InPitch;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InYaw;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCamDist;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendInSec;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCameraBlendRot) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCameraBlendRot");
static_assert(sizeof(TLBuilderCommands_TLCameraBlendRot) == 0x000010, "Wrong size on TLBuilderCommands_TLCameraBlendRot");
static_assert(offsetof(TLBuilderCommands_TLCameraBlendRot, InPitch) == 0x000000, "Member 'TLBuilderCommands_TLCameraBlendRot::InPitch' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCameraBlendRot, InYaw) == 0x000004, "Member 'TLBuilderCommands_TLCameraBlendRot::InYaw' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCameraBlendRot, InCamDist) == 0x000008, "Member 'TLBuilderCommands_TLCameraBlendRot::InCamDist' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCameraBlendRot, InBlendInSec) == 0x00000C, "Member 'TLBuilderCommands_TLCameraBlendRot::InBlendInSec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCameraBlendToTarget
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLCameraBlendToTarget final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawOffsetMin;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawOffsetMax;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCameraBlendToTarget) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCameraBlendToTarget");
static_assert(sizeof(TLBuilderCommands_TLCameraBlendToTarget) == 0x00000C, "Wrong size on TLBuilderCommands_TLCameraBlendToTarget");
static_assert(offsetof(TLBuilderCommands_TLCameraBlendToTarget, BlendTime) == 0x000000, "Member 'TLBuilderCommands_TLCameraBlendToTarget::BlendTime' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCameraBlendToTarget, YawOffsetMin) == 0x000004, "Member 'TLBuilderCommands_TLCameraBlendToTarget::YawOffsetMin' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCameraBlendToTarget, YawOffsetMax) == 0x000008, "Member 'TLBuilderCommands_TLCameraBlendToTarget::YawOffsetMax' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCameraEnableLag
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLCameraEnableLag final
{
public:
	bool                                          bEnableLag;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InSpeed;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCameraEnableLag) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCameraEnableLag");
static_assert(sizeof(TLBuilderCommands_TLCameraEnableLag) == 0x000008, "Wrong size on TLBuilderCommands_TLCameraEnableLag");
static_assert(offsetof(TLBuilderCommands_TLCameraEnableLag, bEnableLag) == 0x000000, "Member 'TLBuilderCommands_TLCameraEnableLag::bEnableLag' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCameraEnableLag, InSpeed) == 0x000004, "Member 'TLBuilderCommands_TLCameraEnableLag::InSpeed' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCameraEnableRotationLag
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLCameraEnableRotationLag final
{
public:
	bool                                          bEnableLag;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InSpeed;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCameraEnableRotationLag) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCameraEnableRotationLag");
static_assert(sizeof(TLBuilderCommands_TLCameraEnableRotationLag) == 0x000008, "Wrong size on TLBuilderCommands_TLCameraEnableRotationLag");
static_assert(offsetof(TLBuilderCommands_TLCameraEnableRotationLag, bEnableLag) == 0x000000, "Member 'TLBuilderCommands_TLCameraEnableRotationLag::bEnableLag' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCameraEnableRotationLag, InSpeed) == 0x000004, "Member 'TLBuilderCommands_TLCameraEnableRotationLag::InSpeed' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCameraFreeLag
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLCameraFreeLag final
{
public:
	float                                         RotSpeedMutifly;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCameraFreeLag) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCameraFreeLag");
static_assert(sizeof(TLBuilderCommands_TLCameraFreeLag) == 0x000004, "Wrong size on TLBuilderCommands_TLCameraFreeLag");
static_assert(offsetof(TLBuilderCommands_TLCameraFreeLag, RotSpeedMutifly) == 0x000000, "Member 'TLBuilderCommands_TLCameraFreeLag::RotSpeedMutifly' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCameraMouseRotateSpeedScale
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLCameraMouseRotateSpeedScale final
{
public:
	float                                         InVal;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCameraMouseRotateSpeedScale) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCameraMouseRotateSpeedScale");
static_assert(sizeof(TLBuilderCommands_TLCameraMouseRotateSpeedScale) == 0x000004, "Wrong size on TLBuilderCommands_TLCameraMouseRotateSpeedScale");
static_assert(offsetof(TLBuilderCommands_TLCameraMouseRotateSpeedScale, InVal) == 0x000000, "Member 'TLBuilderCommands_TLCameraMouseRotateSpeedScale::InVal' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCameraSpeedScale
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLCameraSpeedScale final
{
public:
	float                                         InScale;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCameraSpeedScale) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCameraSpeedScale");
static_assert(sizeof(TLBuilderCommands_TLCameraSpeedScale) == 0x000004, "Wrong size on TLBuilderCommands_TLCameraSpeedScale");
static_assert(offsetof(TLBuilderCommands_TLCameraSpeedScale, InScale) == 0x000000, "Member 'TLBuilderCommands_TLCameraSpeedScale::InScale' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCameraSpeedScaleStep
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLCameraSpeedScaleStep final
{
public:
	float                                         InScaleStep;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCameraSpeedScaleStep) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCameraSpeedScaleStep");
static_assert(sizeof(TLBuilderCommands_TLCameraSpeedScaleStep) == 0x000004, "Wrong size on TLBuilderCommands_TLCameraSpeedScaleStep");
static_assert(offsetof(TLBuilderCommands_TLCameraSpeedScaleStep, InScaleStep) == 0x000000, "Member 'TLBuilderCommands_TLCameraSpeedScaleStep::InScaleStep' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCameraTargetArmLength
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLCameraTargetArmLength final
{
public:
	float                                         InTargetArmLength;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCameraTargetArmLength) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCameraTargetArmLength");
static_assert(sizeof(TLBuilderCommands_TLCameraTargetArmLength) == 0x000004, "Wrong size on TLBuilderCommands_TLCameraTargetArmLength");
static_assert(offsetof(TLBuilderCommands_TLCameraTargetArmLength, InTargetArmLength) == 0x000000, "Member 'TLBuilderCommands_TLCameraTargetArmLength::InTargetArmLength' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCarrierChangeState
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLCarrierChangeState final
{
public:
	class FString                                 InCarrierState;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCarrierChangeState) == 0x000008, "Wrong alignment on TLBuilderCommands_TLCarrierChangeState");
static_assert(sizeof(TLBuilderCommands_TLCarrierChangeState) == 0x000010, "Wrong size on TLBuilderCommands_TLCarrierChangeState");
static_assert(offsetof(TLBuilderCommands_TLCarrierChangeState, InCarrierState) == 0x000000, "Member 'TLBuilderCommands_TLCarrierChangeState::InCarrierState' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChangeCollisionSizeInfo
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLChangeCollisionSizeInfo final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CollisionSizeInfoName;                             // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLChangeCollisionSizeInfo) == 0x000004, "Wrong alignment on TLBuilderCommands_TLChangeCollisionSizeInfo");
static_assert(sizeof(TLBuilderCommands_TLChangeCollisionSizeInfo) == 0x000010, "Wrong size on TLBuilderCommands_TLChangeCollisionSizeInfo");
static_assert(offsetof(TLBuilderCommands_TLChangeCollisionSizeInfo, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLChangeCollisionSizeInfo::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChangeCollisionSizeInfo, CollisionSizeInfoName) == 0x000004, "Member 'TLBuilderCommands_TLChangeCollisionSizeInfo::CollisionSizeInfoName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChangeCollisionSizeInfo, bEnable) == 0x00000C, "Member 'TLBuilderCommands_TLChangeCollisionSizeInfo::bEnable' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChangeColSize
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLChangeColSize final
{
public:
	float                                         InRad;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHeight;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLChangeColSize) == 0x000004, "Wrong alignment on TLBuilderCommands_TLChangeColSize");
static_assert(sizeof(TLBuilderCommands_TLChangeColSize) == 0x000008, "Wrong size on TLBuilderCommands_TLChangeColSize");
static_assert(offsetof(TLBuilderCommands_TLChangeColSize, InRad) == 0x000000, "Member 'TLBuilderCommands_TLChangeColSize::InRad' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChangeColSize, InHeight) == 0x000004, "Member 'TLBuilderCommands_TLChangeColSize::InHeight' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChangeCombatStatus
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLChangeCombatStatus final
{
public:
	bool                                          bCombat;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLChangeCombatStatus) == 0x000001, "Wrong alignment on TLBuilderCommands_TLChangeCombatStatus");
static_assert(sizeof(TLBuilderCommands_TLChangeCombatStatus) == 0x000001, "Wrong size on TLBuilderCommands_TLChangeCombatStatus");
static_assert(offsetof(TLBuilderCommands_TLChangeCombatStatus, bCombat) == 0x000000, "Member 'TLBuilderCommands_TLChangeCombatStatus::bCombat' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChangeInteractionType
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLChangeInteractionType final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InteractionTypeIndex;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLChangeInteractionType) == 0x000004, "Wrong alignment on TLBuilderCommands_TLChangeInteractionType");
static_assert(sizeof(TLBuilderCommands_TLChangeInteractionType) == 0x000008, "Wrong size on TLBuilderCommands_TLChangeInteractionType");
static_assert(offsetof(TLBuilderCommands_TLChangeInteractionType, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLChangeInteractionType::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChangeInteractionType, InteractionTypeIndex) == 0x000004, "Member 'TLBuilderCommands_TLChangeInteractionType::InteractionTypeIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChangeMap
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLChangeMap final
{
public:
	int32                                         MapID;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLChangeMap) == 0x000004, "Wrong alignment on TLBuilderCommands_TLChangeMap");
static_assert(sizeof(TLBuilderCommands_TLChangeMap) == 0x000004, "Wrong size on TLBuilderCommands_TLChangeMap");
static_assert(offsetof(TLBuilderCommands_TLChangeMap, MapID) == 0x000000, "Member 'TLBuilderCommands_TLChangeMap::MapID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChangeMapPos
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLChangeMapPos final
{
public:
	int32                                         MapID;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLChangeMapPos) == 0x000004, "Wrong alignment on TLBuilderCommands_TLChangeMapPos");
static_assert(sizeof(TLBuilderCommands_TLChangeMapPos) == 0x000010, "Wrong size on TLBuilderCommands_TLChangeMapPos");
static_assert(offsetof(TLBuilderCommands_TLChangeMapPos, MapID) == 0x000000, "Member 'TLBuilderCommands_TLChangeMapPos::MapID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChangeMapPos, Pos) == 0x000004, "Member 'TLBuilderCommands_TLChangeMapPos::Pos' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChangeMapPos1
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLChangeMapPos1 final
{
public:
	int32                                         MapID;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLChangeMapPos1) == 0x000004, "Wrong alignment on TLBuilderCommands_TLChangeMapPos1");
static_assert(sizeof(TLBuilderCommands_TLChangeMapPos1) == 0x000010, "Wrong size on TLBuilderCommands_TLChangeMapPos1");
static_assert(offsetof(TLBuilderCommands_TLChangeMapPos1, MapID) == 0x000000, "Member 'TLBuilderCommands_TLChangeMapPos1::MapID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChangeMapPos1, X) == 0x000004, "Member 'TLBuilderCommands_TLChangeMapPos1::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChangeMapPos1, Y) == 0x000008, "Member 'TLBuilderCommands_TLChangeMapPos1::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChangeMapPos1, Z) == 0x00000C, "Member 'TLBuilderCommands_TLChangeMapPos1::Z' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChangeMatchingParty
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLChangeMatchingParty final
{
public:
	bool                                          bMatchingParty;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLChangeMatchingParty) == 0x000001, "Wrong alignment on TLBuilderCommands_TLChangeMatchingParty");
static_assert(sizeof(TLBuilderCommands_TLChangeMatchingParty) == 0x000001, "Wrong size on TLBuilderCommands_TLChangeMatchingParty");
static_assert(offsetof(TLBuilderCommands_TLChangeMatchingParty, bMatchingParty) == 0x000000, "Member 'TLBuilderCommands_TLChangeMatchingParty::bMatchingParty' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChangeMyCollisionSize
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLChangeMyCollisionSize final
{
public:
	float                                         Rad;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLChangeMyCollisionSize) == 0x000004, "Wrong alignment on TLBuilderCommands_TLChangeMyCollisionSize");
static_assert(sizeof(TLBuilderCommands_TLChangeMyCollisionSize) == 0x000008, "Wrong size on TLBuilderCommands_TLChangeMyCollisionSize");
static_assert(offsetof(TLBuilderCommands_TLChangeMyCollisionSize, Rad) == 0x000000, "Member 'TLBuilderCommands_TLChangeMyCollisionSize::Rad' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChangeMyCollisionSize, Height) == 0x000004, "Member 'TLBuilderCommands_TLChangeMyCollisionSize::Height' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChangeNavState
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLChangeNavState final
{
public:
	class FString                                 NavPoly;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsOn;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLChangeNavState) == 0x000008, "Wrong alignment on TLBuilderCommands_TLChangeNavState");
static_assert(sizeof(TLBuilderCommands_TLChangeNavState) == 0x000018, "Wrong size on TLBuilderCommands_TLChangeNavState");
static_assert(offsetof(TLBuilderCommands_TLChangeNavState, NavPoly) == 0x000000, "Member 'TLBuilderCommands_TLChangeNavState::NavPoly' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChangeNavState, InIsOn) == 0x000010, "Member 'TLBuilderCommands_TLChangeNavState::InIsOn' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChangePlayTimeNoti
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLChangePlayTimeNoti final
{
public:
	double                                        InNotiMinute;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLChangePlayTimeNoti) == 0x000008, "Wrong alignment on TLBuilderCommands_TLChangePlayTimeNoti");
static_assert(sizeof(TLBuilderCommands_TLChangePlayTimeNoti) == 0x000008, "Wrong size on TLBuilderCommands_TLChangePlayTimeNoti");
static_assert(offsetof(TLBuilderCommands_TLChangePlayTimeNoti, InNotiMinute) == 0x000000, "Member 'TLBuilderCommands_TLChangePlayTimeNoti::InNotiMinute' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChangeTribeRelation
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLChangeTribeRelation final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TribeRelationIndex;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TribeRelationCoverIndex;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TribeRelationBackwardIndex;                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLChangeTribeRelation) == 0x000004, "Wrong alignment on TLBuilderCommands_TLChangeTribeRelation");
static_assert(sizeof(TLBuilderCommands_TLChangeTribeRelation) == 0x000010, "Wrong size on TLBuilderCommands_TLChangeTribeRelation");
static_assert(offsetof(TLBuilderCommands_TLChangeTribeRelation, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLChangeTribeRelation::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChangeTribeRelation, TribeRelationIndex) == 0x000004, "Member 'TLBuilderCommands_TLChangeTribeRelation::TribeRelationIndex' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChangeTribeRelation, TribeRelationCoverIndex) == 0x000008, "Member 'TLBuilderCommands_TLChangeTribeRelation::TribeRelationCoverIndex' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChangeTribeRelation, TribeRelationBackwardIndex) == 0x00000C, "Member 'TLBuilderCommands_TLChangeTribeRelation::TribeRelationBackwardIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChatAcceptGroupInvitation
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLChatAcceptGroupInvitation final
{
public:
	int64                                         InInvitationId;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLChatAcceptGroupInvitation) == 0x000008, "Wrong alignment on TLBuilderCommands_TLChatAcceptGroupInvitation");
static_assert(sizeof(TLBuilderCommands_TLChatAcceptGroupInvitation) == 0x000008, "Wrong size on TLBuilderCommands_TLChatAcceptGroupInvitation");
static_assert(offsetof(TLBuilderCommands_TLChatAcceptGroupInvitation, InInvitationId) == 0x000000, "Member 'TLBuilderCommands_TLChatAcceptGroupInvitation::InInvitationId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChatJoinGroupChat
// 0x0020 (0x0020 - 0x0000)
struct TLBuilderCommands_TLChatJoinGroupChat final
{
public:
	class FString                                 InRoomKey;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InPassword;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLChatJoinGroupChat) == 0x000008, "Wrong alignment on TLBuilderCommands_TLChatJoinGroupChat");
static_assert(sizeof(TLBuilderCommands_TLChatJoinGroupChat) == 0x000020, "Wrong size on TLBuilderCommands_TLChatJoinGroupChat");
static_assert(offsetof(TLBuilderCommands_TLChatJoinGroupChat, InRoomKey) == 0x000000, "Member 'TLBuilderCommands_TLChatJoinGroupChat::InRoomKey' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChatJoinGroupChat, InPassword) == 0x000010, "Member 'TLBuilderCommands_TLChatJoinGroupChat::InPassword' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChatLog
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLChatLog final
{
public:
	bool                                          InStart;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLChatLog) == 0x000001, "Wrong alignment on TLBuilderCommands_TLChatLog");
static_assert(sizeof(TLBuilderCommands_TLChatLog) == 0x000001, "Wrong size on TLBuilderCommands_TLChatLog");
static_assert(offsetof(TLBuilderCommands_TLChatLog, InStart) == 0x000000, "Member 'TLBuilderCommands_TLChatLog::InStart' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChatRefuseGroupInvitation
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLChatRefuseGroupInvitation final
{
public:
	int64                                         InInvitationId;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLChatRefuseGroupInvitation) == 0x000008, "Wrong alignment on TLBuilderCommands_TLChatRefuseGroupInvitation");
static_assert(sizeof(TLBuilderCommands_TLChatRefuseGroupInvitation) == 0x000008, "Wrong size on TLBuilderCommands_TLChatRefuseGroupInvitation");
static_assert(offsetof(TLBuilderCommands_TLChatRefuseGroupInvitation, InInvitationId) == 0x000000, "Member 'TLBuilderCommands_TLChatRefuseGroupInvitation::InInvitationId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChatRoomInvite
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLChatRoomInvite final
{
public:
	int32                                         InGroupNum;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InInviteUserName;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLChatRoomInvite) == 0x000008, "Wrong alignment on TLBuilderCommands_TLChatRoomInvite");
static_assert(sizeof(TLBuilderCommands_TLChatRoomInvite) == 0x000018, "Wrong size on TLBuilderCommands_TLChatRoomInvite");
static_assert(offsetof(TLBuilderCommands_TLChatRoomInvite, InGroupNum) == 0x000000, "Member 'TLBuilderCommands_TLChatRoomInvite::InGroupNum' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChatRoomInvite, InInviteUserName) == 0x000008, "Member 'TLBuilderCommands_TLChatRoomInvite::InInviteUserName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChatSendGroupMessage
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLChatSendGroupMessage final
{
public:
	int32                                         InGroupNum;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InText;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLChatSendGroupMessage) == 0x000008, "Wrong alignment on TLBuilderCommands_TLChatSendGroupMessage");
static_assert(sizeof(TLBuilderCommands_TLChatSendGroupMessage) == 0x000018, "Wrong size on TLBuilderCommands_TLChatSendGroupMessage");
static_assert(offsetof(TLBuilderCommands_TLChatSendGroupMessage, InGroupNum) == 0x000000, "Member 'TLBuilderCommands_TLChatSendGroupMessage::InGroupNum' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChatSendGroupMessage, InText) == 0x000008, "Member 'TLBuilderCommands_TLChatSendGroupMessage::InText' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChatTransferOwner
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLChatTransferOwner final
{
public:
	int32                                         InGroupNum;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InTransferUserName;                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLChatTransferOwner) == 0x000008, "Wrong alignment on TLBuilderCommands_TLChatTransferOwner");
static_assert(sizeof(TLBuilderCommands_TLChatTransferOwner) == 0x000018, "Wrong size on TLBuilderCommands_TLChatTransferOwner");
static_assert(offsetof(TLBuilderCommands_TLChatTransferOwner, InGroupNum) == 0x000000, "Member 'TLBuilderCommands_TLChatTransferOwner::InGroupNum' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChatTransferOwner, InTransferUserName) == 0x000008, "Member 'TLBuilderCommands_TLChatTransferOwner::InTransferUserName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChatUpdateGroupInfo
// 0x0020 (0x0020 - 0x0000)
struct TLBuilderCommands_TLChatUpdateGroupInfo final
{
public:
	int32                                         InGroupNum;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InNewInfo;                                         // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsPassword;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLChatUpdateGroupInfo) == 0x000008, "Wrong alignment on TLBuilderCommands_TLChatUpdateGroupInfo");
static_assert(sizeof(TLBuilderCommands_TLChatUpdateGroupInfo) == 0x000020, "Wrong size on TLBuilderCommands_TLChatUpdateGroupInfo");
static_assert(offsetof(TLBuilderCommands_TLChatUpdateGroupInfo, InGroupNum) == 0x000000, "Member 'TLBuilderCommands_TLChatUpdateGroupInfo::InGroupNum' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChatUpdateGroupInfo, InNewInfo) == 0x000008, "Member 'TLBuilderCommands_TLChatUpdateGroupInfo::InNewInfo' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChatUpdateGroupInfo, InIsPassword) == 0x000018, "Member 'TLBuilderCommands_TLChatUpdateGroupInfo::InIsPassword' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChatUpdateUserRole
// 0x0020 (0x0020 - 0x0000)
struct TLBuilderCommands_TLChatUpdateUserRole final
{
public:
	int32                                         InGroupNum;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InUpdateUserName;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsGradeUp;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLChatUpdateUserRole) == 0x000008, "Wrong alignment on TLBuilderCommands_TLChatUpdateUserRole");
static_assert(sizeof(TLBuilderCommands_TLChatUpdateUserRole) == 0x000020, "Wrong size on TLBuilderCommands_TLChatUpdateUserRole");
static_assert(offsetof(TLBuilderCommands_TLChatUpdateUserRole, InGroupNum) == 0x000000, "Member 'TLBuilderCommands_TLChatUpdateUserRole::InGroupNum' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChatUpdateUserRole, InUpdateUserName) == 0x000008, "Member 'TLBuilderCommands_TLChatUpdateUserRole::InUpdateUserName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChatUpdateUserRole, InIsGradeUp) == 0x000018, "Member 'TLBuilderCommands_TLChatUpdateUserRole::InIsGradeUp' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChatUserBan
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLChatUserBan final
{
public:
	int32                                         InGroupNum;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InBanUserName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLChatUserBan) == 0x000008, "Wrong alignment on TLBuilderCommands_TLChatUserBan");
static_assert(sizeof(TLBuilderCommands_TLChatUserBan) == 0x000018, "Wrong size on TLBuilderCommands_TLChatUserBan");
static_assert(offsetof(TLBuilderCommands_TLChatUserBan, InGroupNum) == 0x000000, "Member 'TLBuilderCommands_TLChatUserBan::InGroupNum' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChatUserBan, InBanUserName) == 0x000008, "Member 'TLBuilderCommands_TLChatUserBan::InBanUserName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChatUserDeport
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLChatUserDeport final
{
public:
	int32                                         InGroupNum;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InDeportUserName;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLChatUserDeport) == 0x000008, "Wrong alignment on TLBuilderCommands_TLChatUserDeport");
static_assert(sizeof(TLBuilderCommands_TLChatUserDeport) == 0x000018, "Wrong size on TLBuilderCommands_TLChatUserDeport");
static_assert(offsetof(TLBuilderCommands_TLChatUserDeport, InGroupNum) == 0x000000, "Member 'TLBuilderCommands_TLChatUserDeport::InGroupNum' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChatUserDeport, InDeportUserName) == 0x000008, "Member 'TLBuilderCommands_TLChatUserDeport::InDeportUserName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLChatUserUnBan
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLChatUserUnBan final
{
public:
	int32                                         InGroupNum;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InUnBanUserName;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLChatUserUnBan) == 0x000008, "Wrong alignment on TLBuilderCommands_TLChatUserUnBan");
static_assert(sizeof(TLBuilderCommands_TLChatUserUnBan) == 0x000018, "Wrong size on TLBuilderCommands_TLChatUserUnBan");
static_assert(offsetof(TLBuilderCommands_TLChatUserUnBan, InGroupNum) == 0x000000, "Member 'TLBuilderCommands_TLChatUserUnBan::InGroupNum' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLChatUserUnBan, InUnBanUserName) == 0x000008, "Member 'TLBuilderCommands_TLChatUserUnBan::InUnBanUserName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCheckMeshLine
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLCheckMeshLine final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCheckMeshLine) == 0x000001, "Wrong alignment on TLBuilderCommands_TLCheckMeshLine");
static_assert(sizeof(TLBuilderCommands_TLCheckMeshLine) == 0x000001, "Wrong size on TLBuilderCommands_TLCheckMeshLine");
static_assert(offsetof(TLBuilderCommands_TLCheckMeshLine, InIsActive) == 0x000000, "Member 'TLBuilderCommands_TLCheckMeshLine::InIsActive' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLClearItemTrait
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLClearItemTrait final
{
public:
	uint64                                        InItemUid;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLClearItemTrait) == 0x000008, "Wrong alignment on TLBuilderCommands_TLClearItemTrait");
static_assert(sizeof(TLBuilderCommands_TLClearItemTrait) == 0x000008, "Wrong size on TLBuilderCommands_TLClearItemTrait");
static_assert(offsetof(TLBuilderCommands_TLClearItemTrait, InItemUid) == 0x000000, "Member 'TLBuilderCommands_TLClearItemTrait::InItemUid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLClearUI
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLClearUI final
{
public:
	class FString                                 InIgnoreClearWidgetKeys;                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLClearUI) == 0x000008, "Wrong alignment on TLBuilderCommands_TLClearUI");
static_assert(sizeof(TLBuilderCommands_TLClearUI) == 0x000010, "Wrong size on TLBuilderCommands_TLClearUI");
static_assert(offsetof(TLBuilderCommands_TLClearUI, InIgnoreClearWidgetKeys) == 0x000000, "Member 'TLBuilderCommands_TLClearUI::InIgnoreClearWidgetKeys' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLClickWidgetLog
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLClickWidgetLog final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLClickWidgetLog) == 0x000001, "Wrong alignment on TLBuilderCommands_TLClickWidgetLog");
static_assert(sizeof(TLBuilderCommands_TLClickWidgetLog) == 0x000001, "Wrong size on TLBuilderCommands_TLClickWidgetLog");
static_assert(offsetof(TLBuilderCommands_TLClickWidgetLog, InIsShow) == 0x000000, "Member 'TLBuilderCommands_TLClickWidgetLog::InIsShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCloseTerritoryFog
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLCloseTerritoryFog final
{
public:
	int32                                         InUID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCloseTerritoryFog) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCloseTerritoryFog");
static_assert(sizeof(TLBuilderCommands_TLCloseTerritoryFog) == 0x000004, "Wrong size on TLBuilderCommands_TLCloseTerritoryFog");
static_assert(offsetof(TLBuilderCommands_TLCloseTerritoryFog, InUID) == 0x000000, "Member 'TLBuilderCommands_TLCloseTerritoryFog::InUID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdActionLockOn
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLCmdActionLockOn final
{
public:
	int32                                         InTargetObjId;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDuration;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdActionLockOn) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdActionLockOn");
static_assert(sizeof(TLBuilderCommands_TLCmdActionLockOn) == 0x000008, "Wrong size on TLBuilderCommands_TLCmdActionLockOn");
static_assert(offsetof(TLBuilderCommands_TLCmdActionLockOn, InTargetObjId) == 0x000000, "Member 'TLBuilderCommands_TLCmdActionLockOn::InTargetObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdActionLockOn, InDuration) == 0x000004, "Member 'TLBuilderCommands_TLCmdActionLockOn::InDuration' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdActionLockOnDir
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLCmdActionLockOnDir final
{
public:
	float                                         InLockAngle;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDuration;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdActionLockOnDir) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdActionLockOnDir");
static_assert(sizeof(TLBuilderCommands_TLCmdActionLockOnDir) == 0x000008, "Wrong size on TLBuilderCommands_TLCmdActionLockOnDir");
static_assert(offsetof(TLBuilderCommands_TLCmdActionLockOnDir, InLockAngle) == 0x000000, "Member 'TLBuilderCommands_TLCmdActionLockOnDir::InLockAngle' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdActionLockOnDir, InDuration) == 0x000004, "Member 'TLBuilderCommands_TLCmdActionLockOnDir::InDuration' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdCameraLagTagsDelete
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLCmdCameraLagTagsDelete final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdCameraLagTagsDelete) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdCameraLagTagsDelete");
static_assert(sizeof(TLBuilderCommands_TLCmdCameraLagTagsDelete) == 0x000008, "Wrong size on TLBuilderCommands_TLCmdCameraLagTagsDelete");
static_assert(offsetof(TLBuilderCommands_TLCmdCameraLagTagsDelete, InName) == 0x000000, "Member 'TLBuilderCommands_TLCmdCameraLagTagsDelete::InName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdCameraLagTagsInsert
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLCmdCameraLagTagsInsert final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdCameraLagTagsInsert) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdCameraLagTagsInsert");
static_assert(sizeof(TLBuilderCommands_TLCmdCameraLagTagsInsert) == 0x000008, "Wrong size on TLBuilderCommands_TLCmdCameraLagTagsInsert");
static_assert(offsetof(TLBuilderCommands_TLCmdCameraLagTagsInsert, InName) == 0x000000, "Member 'TLBuilderCommands_TLCmdCameraLagTagsInsert::InName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdCarrierUseSkill
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLCmdCarrierUseSkill final
{
public:
	int32                                         InSkillId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdCarrierUseSkill) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdCarrierUseSkill");
static_assert(sizeof(TLBuilderCommands_TLCmdCarrierUseSkill) == 0x000004, "Wrong size on TLBuilderCommands_TLCmdCarrierUseSkill");
static_assert(offsetof(TLBuilderCommands_TLCmdCarrierUseSkill, InSkillId) == 0x000000, "Member 'TLBuilderCommands_TLCmdCarrierUseSkill::InSkillId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdCrowdControlImmuneGaugeStart
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLCmdCrowdControlImmuneGaugeStart final
{
public:
	float                                         StartPercentage;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndPercentage;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainDurationSec;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdCrowdControlImmuneGaugeStart) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdCrowdControlImmuneGaugeStart");
static_assert(sizeof(TLBuilderCommands_TLCmdCrowdControlImmuneGaugeStart) == 0x00000C, "Wrong size on TLBuilderCommands_TLCmdCrowdControlImmuneGaugeStart");
static_assert(offsetof(TLBuilderCommands_TLCmdCrowdControlImmuneGaugeStart, StartPercentage) == 0x000000, "Member 'TLBuilderCommands_TLCmdCrowdControlImmuneGaugeStart::StartPercentage' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdCrowdControlImmuneGaugeStart, EndPercentage) == 0x000004, "Member 'TLBuilderCommands_TLCmdCrowdControlImmuneGaugeStart::EndPercentage' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdCrowdControlImmuneGaugeStart, RemainDurationSec) == 0x000008, "Member 'TLBuilderCommands_TLCmdCrowdControlImmuneGaugeStart::RemainDurationSec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdDrawArrow
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLCmdDrawArrow final
{
public:
	float                                         DistCm;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArrowSize;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTimeSec;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdDrawArrow) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdDrawArrow");
static_assert(sizeof(TLBuilderCommands_TLCmdDrawArrow) == 0x00000C, "Wrong size on TLBuilderCommands_TLCmdDrawArrow");
static_assert(offsetof(TLBuilderCommands_TLCmdDrawArrow, DistCm) == 0x000000, "Member 'TLBuilderCommands_TLCmdDrawArrow::DistCm' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdDrawArrow, ArrowSize) == 0x000004, "Member 'TLBuilderCommands_TLCmdDrawArrow::ArrowSize' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdDrawArrow, LifeTimeSec) == 0x000008, "Member 'TLBuilderCommands_TLCmdDrawArrow::LifeTimeSec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdDrawCylinder
// 0x001C (0x001C - 0x0000)
struct TLBuilderCommands_TLCmdDrawCylinder final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTimeSec;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdDrawCylinder) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdDrawCylinder");
static_assert(sizeof(TLBuilderCommands_TLCmdDrawCylinder) == 0x00001C, "Wrong size on TLBuilderCommands_TLCmdDrawCylinder");
static_assert(offsetof(TLBuilderCommands_TLCmdDrawCylinder, X) == 0x000000, "Member 'TLBuilderCommands_TLCmdDrawCylinder::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdDrawCylinder, Y) == 0x000004, "Member 'TLBuilderCommands_TLCmdDrawCylinder::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdDrawCylinder, Z) == 0x000008, "Member 'TLBuilderCommands_TLCmdDrawCylinder::Z' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdDrawCylinder, Height) == 0x00000C, "Member 'TLBuilderCommands_TLCmdDrawCylinder::Height' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdDrawCylinder, Radius) == 0x000010, "Member 'TLBuilderCommands_TLCmdDrawCylinder::Radius' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdDrawCylinder, Thickness) == 0x000014, "Member 'TLBuilderCommands_TLCmdDrawCylinder::Thickness' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdDrawCylinder, LifeTimeSec) == 0x000018, "Member 'TLBuilderCommands_TLCmdDrawCylinder::LifeTimeSec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdEffectFail
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLCmdEffectFail final
{
public:
	int32                                         EffectPropId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectFailReason;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdEffectFail) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdEffectFail");
static_assert(sizeof(TLBuilderCommands_TLCmdEffectFail) == 0x000008, "Wrong size on TLBuilderCommands_TLCmdEffectFail");
static_assert(offsetof(TLBuilderCommands_TLCmdEffectFail, EffectPropId) == 0x000000, "Member 'TLBuilderCommands_TLCmdEffectFail::EffectPropId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdEffectFail, EffectFailReason) == 0x000004, "Member 'TLBuilderCommands_TLCmdEffectFail::EffectFailReason' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdHideHelmetByInteractionDialogue
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLCmdHideHelmetByInteractionDialogue final
{
public:
	bool                                          bInHideHelmet;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdHideHelmetByInteractionDialogue) == 0x000001, "Wrong alignment on TLBuilderCommands_TLCmdHideHelmetByInteractionDialogue");
static_assert(sizeof(TLBuilderCommands_TLCmdHideHelmetByInteractionDialogue) == 0x000001, "Wrong size on TLBuilderCommands_TLCmdHideHelmetByInteractionDialogue");
static_assert(offsetof(TLBuilderCommands_TLCmdHideHelmetByInteractionDialogue, bInHideHelmet) == 0x000000, "Member 'TLBuilderCommands_TLCmdHideHelmetByInteractionDialogue::bInHideHelmet' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdHighlightAbnormalStateCount
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLCmdHighlightAbnormalStateCount final
{
public:
	class FName                                   InEffectName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCount;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InShowCount;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLCmdHighlightAbnormalStateCount) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdHighlightAbnormalStateCount");
static_assert(sizeof(TLBuilderCommands_TLCmdHighlightAbnormalStateCount) == 0x000010, "Wrong size on TLBuilderCommands_TLCmdHighlightAbnormalStateCount");
static_assert(offsetof(TLBuilderCommands_TLCmdHighlightAbnormalStateCount, InEffectName) == 0x000000, "Member 'TLBuilderCommands_TLCmdHighlightAbnormalStateCount::InEffectName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdHighlightAbnormalStateCount, InCount) == 0x000008, "Member 'TLBuilderCommands_TLCmdHighlightAbnormalStateCount::InCount' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdHighlightAbnormalStateCount, InShowCount) == 0x00000C, "Member 'TLBuilderCommands_TLCmdHighlightAbnormalStateCount::InShowCount' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdMiniMapAddObject
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLCmdMiniMapAddObject final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdd;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLCmdMiniMapAddObject) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdMiniMapAddObject");
static_assert(sizeof(TLBuilderCommands_TLCmdMiniMapAddObject) == 0x000008, "Wrong size on TLBuilderCommands_TLCmdMiniMapAddObject");
static_assert(offsetof(TLBuilderCommands_TLCmdMiniMapAddObject, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLCmdMiniMapAddObject::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdMiniMapAddObject, bAdd) == 0x000004, "Member 'TLBuilderCommands_TLCmdMiniMapAddObject::bAdd' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdQuickSlotClear
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLCmdQuickSlotClear final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdQuickSlotClear) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdQuickSlotClear");
static_assert(sizeof(TLBuilderCommands_TLCmdQuickSlotClear) == 0x000004, "Wrong size on TLBuilderCommands_TLCmdQuickSlotClear");
static_assert(offsetof(TLBuilderCommands_TLCmdQuickSlotClear, InIndex) == 0x000000, "Member 'TLBuilderCommands_TLCmdQuickSlotClear::InIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdQuickWeaponQuickSlotClear
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLCmdQuickWeaponQuickSlotClear final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdQuickWeaponQuickSlotClear) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdQuickWeaponQuickSlotClear");
static_assert(sizeof(TLBuilderCommands_TLCmdQuickWeaponQuickSlotClear) == 0x000004, "Wrong size on TLBuilderCommands_TLCmdQuickWeaponQuickSlotClear");
static_assert(offsetof(TLBuilderCommands_TLCmdQuickWeaponQuickSlotClear, InIndex) == 0x000000, "Member 'TLBuilderCommands_TLCmdQuickWeaponQuickSlotClear::InIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdQuickWeaponQuickSlotSet
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLCmdQuickWeaponQuickSlotSet final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InComplexGuid;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdQuickWeaponQuickSlotSet) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdQuickWeaponQuickSlotSet");
static_assert(sizeof(TLBuilderCommands_TLCmdQuickWeaponQuickSlotSet) == 0x000008, "Wrong size on TLBuilderCommands_TLCmdQuickWeaponQuickSlotSet");
static_assert(offsetof(TLBuilderCommands_TLCmdQuickWeaponQuickSlotSet, InIndex) == 0x000000, "Member 'TLBuilderCommands_TLCmdQuickWeaponQuickSlotSet::InIndex' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdQuickWeaponQuickSlotSet, InComplexGuid) == 0x000004, "Member 'TLBuilderCommands_TLCmdQuickWeaponQuickSlotSet::InComplexGuid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdQuickWeaponQuickSlotSwap
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLCmdQuickWeaponQuickSlotSwap final
{
public:
	int32                                         InIndex1;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InIndex2;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdQuickWeaponQuickSlotSwap) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdQuickWeaponQuickSlotSwap");
static_assert(sizeof(TLBuilderCommands_TLCmdQuickWeaponQuickSlotSwap) == 0x000008, "Wrong size on TLBuilderCommands_TLCmdQuickWeaponQuickSlotSwap");
static_assert(offsetof(TLBuilderCommands_TLCmdQuickWeaponQuickSlotSwap, InIndex1) == 0x000000, "Member 'TLBuilderCommands_TLCmdQuickWeaponQuickSlotSwap::InIndex1' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdQuickWeaponQuickSlotSwap, InIndex2) == 0x000004, "Member 'TLBuilderCommands_TLCmdQuickWeaponQuickSlotSwap::InIndex2' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdSetCriminalType
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLCmdSetCriminalType final
{
public:
	int32                                         InSelfDefenseRemainMs;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCriminalTypeIndex;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdSetCriminalType) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdSetCriminalType");
static_assert(sizeof(TLBuilderCommands_TLCmdSetCriminalType) == 0x000008, "Wrong size on TLBuilderCommands_TLCmdSetCriminalType");
static_assert(offsetof(TLBuilderCommands_TLCmdSetCriminalType, InSelfDefenseRemainMs) == 0x000000, "Member 'TLBuilderCommands_TLCmdSetCriminalType::InSelfDefenseRemainMs' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdSetCriminalType, InCriminalTypeIndex) == 0x000004, "Member 'TLBuilderCommands_TLCmdSetCriminalType::InCriminalTypeIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdShootProjectile
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLCmdShootProjectile final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SkillLevel;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLCmdShootProjectile) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdShootProjectile");
static_assert(sizeof(TLBuilderCommands_TLCmdShootProjectile) == 0x000008, "Wrong size on TLBuilderCommands_TLCmdShootProjectile");
static_assert(offsetof(TLBuilderCommands_TLCmdShootProjectile, SkillId) == 0x000000, "Member 'TLBuilderCommands_TLCmdShootProjectile::SkillId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdShootProjectile, SkillLevel) == 0x000004, "Member 'TLBuilderCommands_TLCmdShootProjectile::SkillLevel' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdShowHelmet
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLCmdShowHelmet final
{
public:
	bool                                          bInShowHelmet;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdShowHelmet) == 0x000001, "Wrong alignment on TLBuilderCommands_TLCmdShowHelmet");
static_assert(sizeof(TLBuilderCommands_TLCmdShowHelmet) == 0x000001, "Wrong size on TLBuilderCommands_TLCmdShowHelmet");
static_assert(offsetof(TLBuilderCommands_TLCmdShowHelmet, bInShowHelmet) == 0x000000, "Member 'TLBuilderCommands_TLCmdShowHelmet::bInShowHelmet' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdShowHyperLinkSkill
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLCmdShowHyperLinkSkill final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContextUid;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillLevel;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillTrait;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdShowHyperLinkSkill) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdShowHyperLinkSkill");
static_assert(sizeof(TLBuilderCommands_TLCmdShowHyperLinkSkill) == 0x000010, "Wrong size on TLBuilderCommands_TLCmdShowHyperLinkSkill");
static_assert(offsetof(TLBuilderCommands_TLCmdShowHyperLinkSkill, SkillId) == 0x000000, "Member 'TLBuilderCommands_TLCmdShowHyperLinkSkill::SkillId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdShowHyperLinkSkill, ContextUid) == 0x000004, "Member 'TLBuilderCommands_TLCmdShowHyperLinkSkill::ContextUid' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdShowHyperLinkSkill, SkillLevel) == 0x000008, "Member 'TLBuilderCommands_TLCmdShowHyperLinkSkill::SkillLevel' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdShowHyperLinkSkill, SkillTrait) == 0x00000C, "Member 'TLBuilderCommands_TLCmdShowHyperLinkSkill::SkillTrait' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdSkillContextSwapOff
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLCmdSkillContextSwapOff final
{
public:
	int32                                         ComplexId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdSkillContextSwapOff) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdSkillContextSwapOff");
static_assert(sizeof(TLBuilderCommands_TLCmdSkillContextSwapOff) == 0x000004, "Wrong size on TLBuilderCommands_TLCmdSkillContextSwapOff");
static_assert(offsetof(TLBuilderCommands_TLCmdSkillContextSwapOff, ComplexId) == 0x000000, "Member 'TLBuilderCommands_TLCmdSkillContextSwapOff::ComplexId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdSkillContextSwapOn
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLCmdSkillContextSwapOn final
{
public:
	int32                                         ComplexId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSec;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainSec;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdSkillContextSwapOn) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdSkillContextSwapOn");
static_assert(sizeof(TLBuilderCommands_TLCmdSkillContextSwapOn) == 0x00000C, "Wrong size on TLBuilderCommands_TLCmdSkillContextSwapOn");
static_assert(offsetof(TLBuilderCommands_TLCmdSkillContextSwapOn, ComplexId) == 0x000000, "Member 'TLBuilderCommands_TLCmdSkillContextSwapOn::ComplexId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdSkillContextSwapOn, DurationSec) == 0x000004, "Member 'TLBuilderCommands_TLCmdSkillContextSwapOn::DurationSec' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdSkillContextSwapOn, RemainSec) == 0x000008, "Member 'TLBuilderCommands_TLCmdSkillContextSwapOn::RemainSec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdSkillCooldownUpdate
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLCmdSkillCooldownUpdate final
{
public:
	int32                                         InSkillId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRemainSec;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTotalSec;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInGlobal;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLCmdSkillCooldownUpdate) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdSkillCooldownUpdate");
static_assert(sizeof(TLBuilderCommands_TLCmdSkillCooldownUpdate) == 0x000010, "Wrong size on TLBuilderCommands_TLCmdSkillCooldownUpdate");
static_assert(offsetof(TLBuilderCommands_TLCmdSkillCooldownUpdate, InSkillId) == 0x000000, "Member 'TLBuilderCommands_TLCmdSkillCooldownUpdate::InSkillId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdSkillCooldownUpdate, InRemainSec) == 0x000004, "Member 'TLBuilderCommands_TLCmdSkillCooldownUpdate::InRemainSec' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdSkillCooldownUpdate, InTotalSec) == 0x000008, "Member 'TLBuilderCommands_TLCmdSkillCooldownUpdate::InTotalSec' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdSkillCooldownUpdate, bInGlobal) == 0x00000C, "Member 'TLBuilderCommands_TLCmdSkillCooldownUpdate::bInGlobal' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdSkillQuickWeaponPresetIndex
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLCmdSkillQuickWeaponPresetIndex final
{
public:
	int32                                         InPresetIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdSkillQuickWeaponPresetIndex) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdSkillQuickWeaponPresetIndex");
static_assert(sizeof(TLBuilderCommands_TLCmdSkillQuickWeaponPresetIndex) == 0x000004, "Wrong size on TLBuilderCommands_TLCmdSkillQuickWeaponPresetIndex");
static_assert(offsetof(TLBuilderCommands_TLCmdSkillQuickWeaponPresetIndex, InPresetIndex) == 0x000000, "Member 'TLBuilderCommands_TLCmdSkillQuickWeaponPresetIndex::InPresetIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdSkillQuickWeaponPresetIndexReq
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLCmdSkillQuickWeaponPresetIndexReq final
{
public:
	int32                                         InPresetIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdSkillQuickWeaponPresetIndexReq) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdSkillQuickWeaponPresetIndexReq");
static_assert(sizeof(TLBuilderCommands_TLCmdSkillQuickWeaponPresetIndexReq) == 0x000004, "Wrong size on TLBuilderCommands_TLCmdSkillQuickWeaponPresetIndexReq");
static_assert(offsetof(TLBuilderCommands_TLCmdSkillQuickWeaponPresetIndexReq, InPresetIndex) == 0x000000, "Member 'TLBuilderCommands_TLCmdSkillQuickWeaponPresetIndexReq::InPresetIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdSkillRemainTimeUpdate
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLCmdSkillRemainTimeUpdate final
{
public:
	int32                                         InSkillId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRemainSec;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTotalSec;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdSkillRemainTimeUpdate) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdSkillRemainTimeUpdate");
static_assert(sizeof(TLBuilderCommands_TLCmdSkillRemainTimeUpdate) == 0x00000C, "Wrong size on TLBuilderCommands_TLCmdSkillRemainTimeUpdate");
static_assert(offsetof(TLBuilderCommands_TLCmdSkillRemainTimeUpdate, InSkillId) == 0x000000, "Member 'TLBuilderCommands_TLCmdSkillRemainTimeUpdate::InSkillId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdSkillRemainTimeUpdate, InRemainSec) == 0x000004, "Member 'TLBuilderCommands_TLCmdSkillRemainTimeUpdate::InRemainSec' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdSkillRemainTimeUpdate, InTotalSec) == 0x000008, "Member 'TLBuilderCommands_TLCmdSkillRemainTimeUpdate::InTotalSec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdTargetAttackResultFix
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLCmdTargetAttackResultFix final
{
public:
	int32                                         InType;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdTargetAttackResultFix) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdTargetAttackResultFix");
static_assert(sizeof(TLBuilderCommands_TLCmdTargetAttackResultFix) == 0x000004, "Wrong size on TLBuilderCommands_TLCmdTargetAttackResultFix");
static_assert(offsetof(TLBuilderCommands_TLCmdTargetAttackResultFix, InType) == 0x000000, "Member 'TLBuilderCommands_TLCmdTargetAttackResultFix::InType' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdTLImageTraceBrushImageName
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLCmdTLImageTraceBrushImageName final
{
public:
	class FName                                   InImageName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEmpty;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLCmdTLImageTraceBrushImageName) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdTLImageTraceBrushImageName");
static_assert(sizeof(TLBuilderCommands_TLCmdTLImageTraceBrushImageName) == 0x00000C, "Wrong size on TLBuilderCommands_TLCmdTLImageTraceBrushImageName");
static_assert(offsetof(TLBuilderCommands_TLCmdTLImageTraceBrushImageName, InImageName) == 0x000000, "Member 'TLBuilderCommands_TLCmdTLImageTraceBrushImageName::InImageName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdTLImageTraceBrushImageName, InEmpty) == 0x000008, "Member 'TLBuilderCommands_TLCmdTLImageTraceBrushImageName::InEmpty' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdTLImageTraceBrushParentName
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLCmdTLImageTraceBrushParentName final
{
public:
	class FName                                   InWidgetName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEmpty;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLCmdTLImageTraceBrushParentName) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdTLImageTraceBrushParentName");
static_assert(sizeof(TLBuilderCommands_TLCmdTLImageTraceBrushParentName) == 0x00000C, "Wrong size on TLBuilderCommands_TLCmdTLImageTraceBrushParentName");
static_assert(offsetof(TLBuilderCommands_TLCmdTLImageTraceBrushParentName, InWidgetName) == 0x000000, "Member 'TLBuilderCommands_TLCmdTLImageTraceBrushParentName::InWidgetName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdTLImageTraceBrushParentName, InEmpty) == 0x000008, "Member 'TLBuilderCommands_TLCmdTLImageTraceBrushParentName::InEmpty' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdUpdateCooldownByGroup
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLCmdUpdateCooldownByGroup final
{
public:
	int32                                         InCooldownGroupId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InRemainMs;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InDurationMs;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdUpdateCooldownByGroup) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdUpdateCooldownByGroup");
static_assert(sizeof(TLBuilderCommands_TLCmdUpdateCooldownByGroup) == 0x00000C, "Wrong size on TLBuilderCommands_TLCmdUpdateCooldownByGroup");
static_assert(offsetof(TLBuilderCommands_TLCmdUpdateCooldownByGroup, InCooldownGroupId) == 0x000000, "Member 'TLBuilderCommands_TLCmdUpdateCooldownByGroup::InCooldownGroupId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdUpdateCooldownByGroup, InRemainMs) == 0x000004, "Member 'TLBuilderCommands_TLCmdUpdateCooldownByGroup::InRemainMs' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdUpdateCooldownByGroup, InDurationMs) == 0x000008, "Member 'TLBuilderCommands_TLCmdUpdateCooldownByGroup::InDurationMs' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdUpdateGlobalCooldownByGroup
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLCmdUpdateGlobalCooldownByGroup final
{
public:
	int32                                         InCooldownGroupId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InRemainMs;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InDurationMs;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdUpdateGlobalCooldownByGroup) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdUpdateGlobalCooldownByGroup");
static_assert(sizeof(TLBuilderCommands_TLCmdUpdateGlobalCooldownByGroup) == 0x00000C, "Wrong size on TLBuilderCommands_TLCmdUpdateGlobalCooldownByGroup");
static_assert(offsetof(TLBuilderCommands_TLCmdUpdateGlobalCooldownByGroup, InCooldownGroupId) == 0x000000, "Member 'TLBuilderCommands_TLCmdUpdateGlobalCooldownByGroup::InCooldownGroupId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdUpdateGlobalCooldownByGroup, InRemainMs) == 0x000004, "Member 'TLBuilderCommands_TLCmdUpdateGlobalCooldownByGroup::InRemainMs' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdUpdateGlobalCooldownByGroup, InDurationMs) == 0x000008, "Member 'TLBuilderCommands_TLCmdUpdateGlobalCooldownByGroup::InDurationMs' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdUpdateStackCooldownByGroup
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLCmdUpdateStackCooldownByGroup final
{
public:
	int32                                         InCooldownGroupId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnitStackValue;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentStackValue;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStackValue;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCmdUpdateStackCooldownByGroup) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdUpdateStackCooldownByGroup");
static_assert(sizeof(TLBuilderCommands_TLCmdUpdateStackCooldownByGroup) == 0x000010, "Wrong size on TLBuilderCommands_TLCmdUpdateStackCooldownByGroup");
static_assert(offsetof(TLBuilderCommands_TLCmdUpdateStackCooldownByGroup, InCooldownGroupId) == 0x000000, "Member 'TLBuilderCommands_TLCmdUpdateStackCooldownByGroup::InCooldownGroupId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdUpdateStackCooldownByGroup, UnitStackValue) == 0x000004, "Member 'TLBuilderCommands_TLCmdUpdateStackCooldownByGroup::UnitStackValue' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdUpdateStackCooldownByGroup, CurrentStackValue) == 0x000008, "Member 'TLBuilderCommands_TLCmdUpdateStackCooldownByGroup::CurrentStackValue' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdUpdateStackCooldownByGroup, MaxStackValue) == 0x00000C, "Member 'TLBuilderCommands_TLCmdUpdateStackCooldownByGroup::MaxStackValue' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdUserWidgetTraceAnimationParentWidgetName
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLCmdUserWidgetTraceAnimationParentWidgetName final
{
public:
	class FName                                   InWidgetName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEmpty;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLCmdUserWidgetTraceAnimationParentWidgetName) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdUserWidgetTraceAnimationParentWidgetName");
static_assert(sizeof(TLBuilderCommands_TLCmdUserWidgetTraceAnimationParentWidgetName) == 0x00000C, "Wrong size on TLBuilderCommands_TLCmdUserWidgetTraceAnimationParentWidgetName");
static_assert(offsetof(TLBuilderCommands_TLCmdUserWidgetTraceAnimationParentWidgetName, InWidgetName) == 0x000000, "Member 'TLBuilderCommands_TLCmdUserWidgetTraceAnimationParentWidgetName::InWidgetName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdUserWidgetTraceAnimationParentWidgetName, InEmpty) == 0x000008, "Member 'TLBuilderCommands_TLCmdUserWidgetTraceAnimationParentWidgetName::InEmpty' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdUserWidgetTraceAnimationSkiptName
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLCmdUserWidgetTraceAnimationSkiptName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEmpty;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLCmdUserWidgetTraceAnimationSkiptName) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdUserWidgetTraceAnimationSkiptName");
static_assert(sizeof(TLBuilderCommands_TLCmdUserWidgetTraceAnimationSkiptName) == 0x00000C, "Wrong size on TLBuilderCommands_TLCmdUserWidgetTraceAnimationSkiptName");
static_assert(offsetof(TLBuilderCommands_TLCmdUserWidgetTraceAnimationSkiptName, InAnimationName) == 0x000000, "Member 'TLBuilderCommands_TLCmdUserWidgetTraceAnimationSkiptName::InAnimationName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdUserWidgetTraceAnimationSkiptName, InEmpty) == 0x000008, "Member 'TLBuilderCommands_TLCmdUserWidgetTraceAnimationSkiptName::InEmpty' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCmdUserWidgetTraceAnimationWidgetName
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLCmdUserWidgetTraceAnimationWidgetName final
{
public:
	class FName                                   InWidgetName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEmpty;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLCmdUserWidgetTraceAnimationWidgetName) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCmdUserWidgetTraceAnimationWidgetName");
static_assert(sizeof(TLBuilderCommands_TLCmdUserWidgetTraceAnimationWidgetName) == 0x00000C, "Wrong size on TLBuilderCommands_TLCmdUserWidgetTraceAnimationWidgetName");
static_assert(offsetof(TLBuilderCommands_TLCmdUserWidgetTraceAnimationWidgetName, InWidgetName) == 0x000000, "Member 'TLBuilderCommands_TLCmdUserWidgetTraceAnimationWidgetName::InWidgetName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCmdUserWidgetTraceAnimationWidgetName, InEmpty) == 0x000008, "Member 'TLBuilderCommands_TLCmdUserWidgetTraceAnimationWidgetName::InEmpty' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCollideSlidingCheckMargin
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLCollideSlidingCheckMargin final
{
public:
	float                                         InDist;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCollideSlidingCheckMargin) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCollideSlidingCheckMargin");
static_assert(sizeof(TLBuilderCommands_TLCollideSlidingCheckMargin) == 0x000004, "Wrong size on TLBuilderCommands_TLCollideSlidingCheckMargin");
static_assert(offsetof(TLBuilderCommands_TLCollideSlidingCheckMargin, InDist) == 0x000000, "Member 'TLBuilderCommands_TLCollideSlidingCheckMargin::InDist' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCollideStampede
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLCollideStampede final
{
public:
	float                                         MoveDurationSec;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCollideStampede) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCollideStampede");
static_assert(sizeof(TLBuilderCommands_TLCollideStampede) == 0x000004, "Wrong size on TLBuilderCommands_TLCollideStampede");
static_assert(offsetof(TLBuilderCommands_TLCollideStampede, MoveDurationSec) == 0x000000, "Member 'TLBuilderCommands_TLCollideStampede::MoveDurationSec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCommandObj
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLCommandObj final
{
public:
	class FString                                 InParams;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCommandObj) == 0x000008, "Wrong alignment on TLBuilderCommands_TLCommandObj");
static_assert(sizeof(TLBuilderCommands_TLCommandObj) == 0x000010, "Wrong size on TLBuilderCommands_TLCommandObj");
static_assert(offsetof(TLBuilderCommands_TLCommandObj, InParams) == 0x000000, "Member 'TLBuilderCommands_TLCommandObj::InParams' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCompleteCutsceneFromServer
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLCompleteCutsceneFromServer final
{
public:
	class FName                                   CutSceneID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCompleteCutsceneFromServer) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCompleteCutsceneFromServer");
static_assert(sizeof(TLBuilderCommands_TLCompleteCutsceneFromServer) == 0x000008, "Wrong size on TLBuilderCommands_TLCompleteCutsceneFromServer");
static_assert(offsetof(TLBuilderCommands_TLCompleteCutsceneFromServer, CutSceneID) == 0x000000, "Member 'TLBuilderCommands_TLCompleteCutsceneFromServer::CutSceneID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCompleteInstanceMapGuideEvent
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLCompleteInstanceMapGuideEvent final
{
public:
	int64                                         InUnitGuid;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCompleteInstanceMapGuideEvent) == 0x000008, "Wrong alignment on TLBuilderCommands_TLCompleteInstanceMapGuideEvent");
static_assert(sizeof(TLBuilderCommands_TLCompleteInstanceMapGuideEvent) == 0x000008, "Wrong size on TLBuilderCommands_TLCompleteInstanceMapGuideEvent");
static_assert(offsetof(TLBuilderCommands_TLCompleteInstanceMapGuideEvent, InUnitGuid) == 0x000000, "Member 'TLBuilderCommands_TLCompleteInstanceMapGuideEvent::InUnitGuid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLConsoleHudScaleStep
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLConsoleHudScaleStep final
{
public:
	int32                                         StepValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLConsoleHudScaleStep) == 0x000004, "Wrong alignment on TLBuilderCommands_TLConsoleHudScaleStep");
static_assert(sizeof(TLBuilderCommands_TLConsoleHudScaleStep) == 0x000004, "Wrong size on TLBuilderCommands_TLConsoleHudScaleStep");
static_assert(offsetof(TLBuilderCommands_TLConsoleHudScaleStep, StepValue) == 0x000000, "Member 'TLBuilderCommands_TLConsoleHudScaleStep::StepValue' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLConsoleLaunchURL
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLConsoleLaunchURL final
{
public:
	bool                                          bInExternal;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InUrl;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLConsoleLaunchURL) == 0x000008, "Wrong alignment on TLBuilderCommands_TLConsoleLaunchURL");
static_assert(sizeof(TLBuilderCommands_TLConsoleLaunchURL) == 0x000018, "Wrong size on TLBuilderCommands_TLConsoleLaunchURL");
static_assert(offsetof(TLBuilderCommands_TLConsoleLaunchURL, bInExternal) == 0x000000, "Member 'TLBuilderCommands_TLConsoleLaunchURL::bInExternal' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLConsoleLaunchURL, InUrl) == 0x000008, "Member 'TLBuilderCommands_TLConsoleLaunchURL::InUrl' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLConsoleTargetPriorityR1KeyEnable
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLConsoleTargetPriorityR1KeyEnable final
{
public:
	int32                                         bEnable;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLConsoleTargetPriorityR1KeyEnable) == 0x000004, "Wrong alignment on TLBuilderCommands_TLConsoleTargetPriorityR1KeyEnable");
static_assert(sizeof(TLBuilderCommands_TLConsoleTargetPriorityR1KeyEnable) == 0x000004, "Wrong size on TLBuilderCommands_TLConsoleTargetPriorityR1KeyEnable");
static_assert(offsetof(TLBuilderCommands_TLConsoleTargetPriorityR1KeyEnable, bEnable) == 0x000000, "Member 'TLBuilderCommands_TLConsoleTargetPriorityR1KeyEnable::bEnable' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLConsoleUIIngameMode
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLConsoleUIIngameMode final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLConsoleUIIngameMode) == 0x000001, "Wrong alignment on TLBuilderCommands_TLConsoleUIIngameMode");
static_assert(sizeof(TLBuilderCommands_TLConsoleUIIngameMode) == 0x000001, "Wrong size on TLBuilderCommands_TLConsoleUIIngameMode");
static_assert(offsetof(TLBuilderCommands_TLConsoleUIIngameMode, bValue) == 0x000000, "Member 'TLBuilderCommands_TLConsoleUIIngameMode::bValue' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLContentsMarker
// 0x0002 (0x0002 - 0x0000)
struct TLBuilderCommands_TLContentsMarker final
{
public:
	ETLContentsMarkerType                         InContentsMarkerType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSet;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLContentsMarker) == 0x000001, "Wrong alignment on TLBuilderCommands_TLContentsMarker");
static_assert(sizeof(TLBuilderCommands_TLContentsMarker) == 0x000002, "Wrong size on TLBuilderCommands_TLContentsMarker");
static_assert(offsetof(TLBuilderCommands_TLContentsMarker, InContentsMarkerType) == 0x000000, "Member 'TLBuilderCommands_TLContentsMarker::InContentsMarkerType' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLContentsMarker, bSet) == 0x000001, "Member 'TLBuilderCommands_TLContentsMarker::bSet' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLContentsOpen
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLContentsOpen final
{
public:
	class FName                                   InContentName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInOpen;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLContentsOpen) == 0x000004, "Wrong alignment on TLBuilderCommands_TLContentsOpen");
static_assert(sizeof(TLBuilderCommands_TLContentsOpen) == 0x00000C, "Wrong size on TLBuilderCommands_TLContentsOpen");
static_assert(offsetof(TLBuilderCommands_TLContentsOpen, InContentName) == 0x000000, "Member 'TLBuilderCommands_TLContentsOpen::InContentName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLContentsOpen, bInOpen) == 0x000008, "Member 'TLBuilderCommands_TLContentsOpen::bInOpen' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCooldown
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLCooldown final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCooldown) == 0x000001, "Wrong alignment on TLBuilderCommands_TLCooldown");
static_assert(sizeof(TLBuilderCommands_TLCooldown) == 0x000001, "Wrong size on TLBuilderCommands_TLCooldown");
static_assert(offsetof(TLBuilderCommands_TLCooldown, bOn) == 0x000000, "Member 'TLBuilderCommands_TLCooldown::bOn' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCountClassObj
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLCountClassObj final
{
public:
	class FString                                 ClassName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCountClassObj) == 0x000008, "Wrong alignment on TLBuilderCommands_TLCountClassObj");
static_assert(sizeof(TLBuilderCommands_TLCountClassObj) == 0x000010, "Wrong size on TLBuilderCommands_TLCountClassObj");
static_assert(offsetof(TLBuilderCommands_TLCountClassObj, ClassName) == 0x000000, "Member 'TLBuilderCommands_TLCountClassObj::ClassName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCraftingBook
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLCraftingBook final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCraftingBook) == 0x000001, "Wrong alignment on TLBuilderCommands_TLCraftingBook");
static_assert(sizeof(TLBuilderCommands_TLCraftingBook) == 0x000001, "Wrong size on TLBuilderCommands_TLCraftingBook");
static_assert(offsetof(TLBuilderCommands_TLCraftingBook, bShow) == 0x000000, "Member 'TLBuilderCommands_TLCraftingBook::bShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCreateLevelLoadPin
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLCreateLevelLoadPin final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCreateLevelLoadPin) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCreateLevelLoadPin");
static_assert(sizeof(TLBuilderCommands_TLCreateLevelLoadPin) == 0x00000C, "Wrong size on TLBuilderCommands_TLCreateLevelLoadPin");
static_assert(offsetof(TLBuilderCommands_TLCreateLevelLoadPin, X) == 0x000000, "Member 'TLBuilderCommands_TLCreateLevelLoadPin::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCreateLevelLoadPin, Y) == 0x000004, "Member 'TLBuilderCommands_TLCreateLevelLoadPin::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLCreateLevelLoadPin, Z) == 0x000008, "Member 'TLBuilderCommands_TLCreateLevelLoadPin::Z' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCreateSavedPlace
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLCreateSavedPlace final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCreateSavedPlace) == 0x000008, "Wrong alignment on TLBuilderCommands_TLCreateSavedPlace");
static_assert(sizeof(TLBuilderCommands_TLCreateSavedPlace) == 0x000010, "Wrong size on TLBuilderCommands_TLCreateSavedPlace");
static_assert(offsetof(TLBuilderCommands_TLCreateSavedPlace, Name_0) == 0x000000, "Member 'TLBuilderCommands_TLCreateSavedPlace::Name_0' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCustomSceneChangeCamera
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLCustomSceneChangeCamera final
{
public:
	int32                                         InCameraIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCustomSceneChangeCamera) == 0x000004, "Wrong alignment on TLBuilderCommands_TLCustomSceneChangeCamera");
static_assert(sizeof(TLBuilderCommands_TLCustomSceneChangeCamera) == 0x000004, "Wrong size on TLBuilderCommands_TLCustomSceneChangeCamera");
static_assert(offsetof(TLBuilderCommands_TLCustomSceneChangeCamera, InCameraIndex) == 0x000000, "Member 'TLBuilderCommands_TLCustomSceneChangeCamera::InCameraIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLCutsceneView
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLCutsceneView final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLCutsceneView) == 0x000001, "Wrong alignment on TLBuilderCommands_TLCutsceneView");
static_assert(sizeof(TLBuilderCommands_TLCutsceneView) == 0x000001, "Wrong size on TLBuilderCommands_TLCutsceneView");
static_assert(offsetof(TLBuilderCommands_TLCutsceneView, bDisplay) == 0x000000, "Member 'TLBuilderCommands_TLCutsceneView::bDisplay' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDeactivateGlobalTag
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLDeactivateGlobalTag final
{
public:
	class FName                                   InActivationTag;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDeactivateGlobalTag) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDeactivateGlobalTag");
static_assert(sizeof(TLBuilderCommands_TLDeactivateGlobalTag) == 0x000008, "Wrong size on TLBuilderCommands_TLDeactivateGlobalTag");
static_assert(offsetof(TLBuilderCommands_TLDeactivateGlobalTag, InActivationTag) == 0x000000, "Member 'TLBuilderCommands_TLDeactivateGlobalTag::InActivationTag' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDelObjForce
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLDelObjForce final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDelObjForce) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDelObjForce");
static_assert(sizeof(TLBuilderCommands_TLDelObjForce) == 0x000004, "Wrong size on TLBuilderCommands_TLDelObjForce");
static_assert(offsetof(TLBuilderCommands_TLDelObjForce, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLDelObjForce::ObjId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDieAllExcept
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLDieAllExcept final
{
public:
	int32                                         ClassId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLDieAllExcept) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDieAllExcept");
static_assert(sizeof(TLBuilderCommands_TLDieAllExcept) == 0x000008, "Wrong size on TLBuilderCommands_TLDieAllExcept");
static_assert(offsetof(TLBuilderCommands_TLDieAllExcept, ClassId) == 0x000000, "Member 'TLBuilderCommands_TLDieAllExcept::ClassId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDieAllExcept, bForce) == 0x000004, "Member 'TLBuilderCommands_TLDieAllExcept::bForce' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDieAllOnly
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLDieAllOnly final
{
public:
	int32                                         ClassId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLDieAllOnly) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDieAllOnly");
static_assert(sizeof(TLBuilderCommands_TLDieAllOnly) == 0x000008, "Wrong size on TLBuilderCommands_TLDieAllOnly");
static_assert(offsetof(TLBuilderCommands_TLDieAllOnly, ClassId) == 0x000000, "Member 'TLBuilderCommands_TLDieAllOnly::ClassId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDieAllOnly, bForce) == 0x000004, "Member 'TLBuilderCommands_TLDieAllOnly::bForce' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDieEffect
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLDieEffect final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalSaturation;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalBrightness;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDieEffect) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDieEffect");
static_assert(sizeof(TLBuilderCommands_TLDieEffect) == 0x000010, "Wrong size on TLBuilderCommands_TLDieEffect");
static_assert(offsetof(TLBuilderCommands_TLDieEffect, bShow) == 0x000000, "Member 'TLBuilderCommands_TLDieEffect::bShow' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDieEffect, BlendTime) == 0x000004, "Member 'TLBuilderCommands_TLDieEffect::BlendTime' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDieEffect, FinalSaturation) == 0x000008, "Member 'TLBuilderCommands_TLDieEffect::FinalSaturation' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDieEffect, FinalBrightness) == 0x00000C, "Member 'TLBuilderCommands_TLDieEffect::FinalBrightness' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDieObj
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLDieObj final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDieObj) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDieObj");
static_assert(sizeof(TLBuilderCommands_TLDieObj) == 0x000004, "Wrong size on TLBuilderCommands_TLDieObj");
static_assert(offsetof(TLBuilderCommands_TLDieObj, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLDieObj::ObjId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDieObjForce
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLDieObjForce final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDieObjForce) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDieObjForce");
static_assert(sizeof(TLBuilderCommands_TLDieObjForce) == 0x000004, "Wrong size on TLBuilderCommands_TLDieObjForce");
static_assert(offsetof(TLBuilderCommands_TLDieObjForce, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLDieObjForce::ObjId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDirectDamage
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLDirectDamage final
{
public:
	int32                                         InDamage;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDirectDamage) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDirectDamage");
static_assert(sizeof(TLBuilderCommands_TLDirectDamage) == 0x000004, "Wrong size on TLBuilderCommands_TLDirectDamage");
static_assert(offsetof(TLBuilderCommands_TLDirectDamage, InDamage) == 0x000000, "Member 'TLBuilderCommands_TLDirectDamage::InDamage' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDisabilityRemove
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLDisabilityRemove final
{
public:
	class FName                                   DisabilityName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDisabilityRemove) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDisabilityRemove");
static_assert(sizeof(TLBuilderCommands_TLDisabilityRemove) == 0x000008, "Wrong size on TLBuilderCommands_TLDisabilityRemove");
static_assert(offsetof(TLBuilderCommands_TLDisabilityRemove, DisabilityName) == 0x000000, "Member 'TLBuilderCommands_TLDisabilityRemove::DisabilityName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDisabilitySet
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLDisabilitySet final
{
public:
	int32                                         DisabilityType;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisabilityName;                                    // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DurationMs;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDisabilitySet) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDisabilitySet");
static_assert(sizeof(TLBuilderCommands_TLDisabilitySet) == 0x000010, "Wrong size on TLBuilderCommands_TLDisabilitySet");
static_assert(offsetof(TLBuilderCommands_TLDisabilitySet, DisabilityType) == 0x000000, "Member 'TLBuilderCommands_TLDisabilitySet::DisabilityType' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDisabilitySet, DisabilityName) == 0x000004, "Member 'TLBuilderCommands_TLDisabilitySet::DisabilityName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDisabilitySet, DurationMs) == 0x00000C, "Member 'TLBuilderCommands_TLDisabilitySet::DurationMs' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDispelMySelf
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLDispelMySelf final
{
public:
	int32                                         EffectUid;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDispelMySelf) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDispelMySelf");
static_assert(sizeof(TLBuilderCommands_TLDispelMySelf) == 0x000004, "Wrong size on TLBuilderCommands_TLDispelMySelf");
static_assert(offsetof(TLBuilderCommands_TLDispelMySelf, EffectUid) == 0x000000, "Member 'TLBuilderCommands_TLDispelMySelf::EffectUid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDispelTarget
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLDispelTarget final
{
public:
	int32                                         InObjId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectUid;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDispelTarget) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDispelTarget");
static_assert(sizeof(TLBuilderCommands_TLDispelTarget) == 0x000008, "Wrong size on TLBuilderCommands_TLDispelTarget");
static_assert(offsetof(TLBuilderCommands_TLDispelTarget, InObjId) == 0x000000, "Member 'TLBuilderCommands_TLDispelTarget::InObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDispelTarget, EffectUid) == 0x000004, "Member 'TLBuilderCommands_TLDispelTarget::EffectUid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDM
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLDM final
{
public:
	int32                                         InMode;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDM) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDM");
static_assert(sizeof(TLBuilderCommands_TLDM) == 0x000004, "Wrong size on TLBuilderCommands_TLDM");
static_assert(offsetof(TLBuilderCommands_TLDM, InMode) == 0x000000, "Member 'TLBuilderCommands_TLDM::InMode' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDM1
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLDM1 final
{
public:
	class FName                                   InModeName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDM1) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDM1");
static_assert(sizeof(TLBuilderCommands_TLDM1) == 0x000008, "Wrong size on TLBuilderCommands_TLDM1");
static_assert(offsetof(TLBuilderCommands_TLDM1, InModeName) == 0x000000, "Member 'TLBuilderCommands_TLDM1::InModeName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDM1Set
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLDM1Set final
{
public:
	class FName                                   InModeName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDM1Set) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDM1Set");
static_assert(sizeof(TLBuilderCommands_TLDM1Set) == 0x000008, "Wrong size on TLBuilderCommands_TLDM1Set");
static_assert(offsetof(TLBuilderCommands_TLDM1Set, InModeName) == 0x000000, "Member 'TLBuilderCommands_TLDM1Set::InModeName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDMClearBit
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLDMClearBit final
{
public:
	int32                                         InMode;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDMClearBit) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDMClearBit");
static_assert(sizeof(TLBuilderCommands_TLDMClearBit) == 0x000004, "Wrong size on TLBuilderCommands_TLDMClearBit");
static_assert(offsetof(TLBuilderCommands_TLDMClearBit, InMode) == 0x000000, "Member 'TLBuilderCommands_TLDMClearBit::InMode' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDmDebugFontColorSet
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLDmDebugFontColorSet final
{
public:
	int32                                         InR;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InG;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InB;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDmDebugFontColorSet) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDmDebugFontColorSet");
static_assert(sizeof(TLBuilderCommands_TLDmDebugFontColorSet) == 0x00000C, "Wrong size on TLBuilderCommands_TLDmDebugFontColorSet");
static_assert(offsetof(TLBuilderCommands_TLDmDebugFontColorSet, InR) == 0x000000, "Member 'TLBuilderCommands_TLDmDebugFontColorSet::InR' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDmDebugFontColorSet, InG) == 0x000004, "Member 'TLBuilderCommands_TLDmDebugFontColorSet::InG' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDmDebugFontColorSet, InB) == 0x000008, "Member 'TLBuilderCommands_TLDmDebugFontColorSet::InB' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDmDebugStringOffsetSet
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLDmDebugStringOffsetSet final
{
public:
	float                                         InOffsetX;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetY;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetZ;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDmDebugStringOffsetSet) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDmDebugStringOffsetSet");
static_assert(sizeof(TLBuilderCommands_TLDmDebugStringOffsetSet) == 0x00000C, "Wrong size on TLBuilderCommands_TLDmDebugStringOffsetSet");
static_assert(offsetof(TLBuilderCommands_TLDmDebugStringOffsetSet, InOffsetX) == 0x000000, "Member 'TLBuilderCommands_TLDmDebugStringOffsetSet::InOffsetX' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDmDebugStringOffsetSet, InOffsetY) == 0x000004, "Member 'TLBuilderCommands_TLDmDebugStringOffsetSet::InOffsetY' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDmDebugStringOffsetSet, InOffsetZ) == 0x000008, "Member 'TLBuilderCommands_TLDmDebugStringOffsetSet::InOffsetZ' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDMFixTarget
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLDMFixTarget final
{
public:
	bool                                          InOn;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDMFixTarget) == 0x000001, "Wrong alignment on TLBuilderCommands_TLDMFixTarget");
static_assert(sizeof(TLBuilderCommands_TLDMFixTarget) == 0x000001, "Wrong size on TLBuilderCommands_TLDMFixTarget");
static_assert(offsetof(TLBuilderCommands_TLDMFixTarget, InOn) == 0x000000, "Member 'TLBuilderCommands_TLDMFixTarget::InOn' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDMSet
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLDMSet final
{
public:
	int32                                         InMode;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDMSet) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDMSet");
static_assert(sizeof(TLBuilderCommands_TLDMSet) == 0x000004, "Wrong size on TLBuilderCommands_TLDMSet");
static_assert(offsetof(TLBuilderCommands_TLDMSet, InMode) == 0x000000, "Member 'TLBuilderCommands_TLDMSet::InMode' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDMTarget
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLDMTarget final
{
public:
	int32                                         TargetId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDMTarget) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDMTarget");
static_assert(sizeof(TLBuilderCommands_TLDMTarget) == 0x000004, "Wrong size on TLBuilderCommands_TLDMTarget");
static_assert(offsetof(TLBuilderCommands_TLDMTarget, TargetId) == 0x000000, "Member 'TLBuilderCommands_TLDMTarget::TargetId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDMTargetGuid
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLDMTargetGuid final
{
public:
	uint64                                        TargetGuid;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDMTargetGuid) == 0x000008, "Wrong alignment on TLBuilderCommands_TLDMTargetGuid");
static_assert(sizeof(TLBuilderCommands_TLDMTargetGuid) == 0x000008, "Wrong size on TLBuilderCommands_TLDMTargetGuid");
static_assert(offsetof(TLBuilderCommands_TLDMTargetGuid, TargetGuid) == 0x000000, "Member 'TLBuilderCommands_TLDMTargetGuid::TargetGuid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDMToLogDuration
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLDMToLogDuration final
{
public:
	int64                                         DurationMsec;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDMToLogDuration) == 0x000008, "Wrong alignment on TLBuilderCommands_TLDMToLogDuration");
static_assert(sizeof(TLBuilderCommands_TLDMToLogDuration) == 0x000008, "Wrong size on TLBuilderCommands_TLDMToLogDuration");
static_assert(offsetof(TLBuilderCommands_TLDMToLogDuration, DurationMsec) == 0x000000, "Member 'TLBuilderCommands_TLDMToLogDuration::DurationMsec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDrawDebugBox
// 0x0040 (0x0040 - 0x0000)
struct TLBuilderCommands_TLDrawDebugBox final
{
public:
	class FString                                 X;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Y;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Z;                                                 // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtentSize;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedRebase;                                        // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSolid;                                            // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLDrawDebugBox) == 0x000008, "Wrong alignment on TLBuilderCommands_TLDrawDebugBox");
static_assert(sizeof(TLBuilderCommands_TLDrawDebugBox) == 0x000040, "Wrong size on TLBuilderCommands_TLDrawDebugBox");
static_assert(offsetof(TLBuilderCommands_TLDrawDebugBox, X) == 0x000000, "Member 'TLBuilderCommands_TLDrawDebugBox::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawDebugBox, Y) == 0x000010, "Member 'TLBuilderCommands_TLDrawDebugBox::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawDebugBox, Z) == 0x000020, "Member 'TLBuilderCommands_TLDrawDebugBox::Z' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawDebugBox, ExtentSize) == 0x000030, "Member 'TLBuilderCommands_TLDrawDebugBox::ExtentSize' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawDebugBox, LifeTime) == 0x000034, "Member 'TLBuilderCommands_TLDrawDebugBox::LifeTime' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawDebugBox, NeedRebase) == 0x000038, "Member 'TLBuilderCommands_TLDrawDebugBox::NeedRebase' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawDebugBox, bSolid) == 0x000039, "Member 'TLBuilderCommands_TLDrawDebugBox::bSolid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDrawDebugBox2
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLDrawDebugBox2 final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDrawDebugBox2) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDrawDebugBox2");
static_assert(sizeof(TLBuilderCommands_TLDrawDebugBox2) == 0x00000C, "Wrong size on TLBuilderCommands_TLDrawDebugBox2");
static_assert(offsetof(TLBuilderCommands_TLDrawDebugBox2, X) == 0x000000, "Member 'TLBuilderCommands_TLDrawDebugBox2::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawDebugBox2, Y) == 0x000004, "Member 'TLBuilderCommands_TLDrawDebugBox2::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawDebugBox2, Z) == 0x000008, "Member 'TLBuilderCommands_TLDrawDebugBox2::Z' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDrawDirection
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLDrawDirection final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDrawDirection) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDrawDirection");
static_assert(sizeof(TLBuilderCommands_TLDrawDirection) == 0x000018, "Wrong size on TLBuilderCommands_TLDrawDirection");
static_assert(offsetof(TLBuilderCommands_TLDrawDirection, X) == 0x000000, "Member 'TLBuilderCommands_TLDrawDirection::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawDirection, Y) == 0x000004, "Member 'TLBuilderCommands_TLDrawDirection::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawDirection, Z) == 0x000008, "Member 'TLBuilderCommands_TLDrawDirection::Z' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawDirection, Length) == 0x00000C, "Member 'TLBuilderCommands_TLDrawDirection::Length' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawDirection, Thickness) == 0x000010, "Member 'TLBuilderCommands_TLDrawDirection::Thickness' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawDirection, LifeTime) == 0x000014, "Member 'TLBuilderCommands_TLDrawDirection::LifeTime' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDrawLine
// 0x0068 (0x0068 - 0x0000)
struct TLBuilderCommands_TLDrawLine final
{
public:
	class FString                                 X1;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Y1;                                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Z1;                                                // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 X2;                                                // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Y2;                                                // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Z2;                                                // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDrawLine) == 0x000008, "Wrong alignment on TLBuilderCommands_TLDrawLine");
static_assert(sizeof(TLBuilderCommands_TLDrawLine) == 0x000068, "Wrong size on TLBuilderCommands_TLDrawLine");
static_assert(offsetof(TLBuilderCommands_TLDrawLine, X1) == 0x000000, "Member 'TLBuilderCommands_TLDrawLine::X1' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawLine, Y1) == 0x000010, "Member 'TLBuilderCommands_TLDrawLine::Y1' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawLine, Z1) == 0x000020, "Member 'TLBuilderCommands_TLDrawLine::Z1' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawLine, X2) == 0x000030, "Member 'TLBuilderCommands_TLDrawLine::X2' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawLine, Y2) == 0x000040, "Member 'TLBuilderCommands_TLDrawLine::Y2' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawLine, Z2) == 0x000050, "Member 'TLBuilderCommands_TLDrawLine::Z2' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawLine, Thickness) == 0x000060, "Member 'TLBuilderCommands_TLDrawLine::Thickness' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawLine, LifeTime) == 0x000064, "Member 'TLBuilderCommands_TLDrawLine::LifeTime' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDrawLine1
// 0x0014 (0x0014 - 0x0000)
struct TLBuilderCommands_TLDrawLine1 final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDrawLine1) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDrawLine1");
static_assert(sizeof(TLBuilderCommands_TLDrawLine1) == 0x000014, "Wrong size on TLBuilderCommands_TLDrawLine1");
static_assert(offsetof(TLBuilderCommands_TLDrawLine1, X) == 0x000000, "Member 'TLBuilderCommands_TLDrawLine1::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawLine1, Y) == 0x000004, "Member 'TLBuilderCommands_TLDrawLine1::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawLine1, Z) == 0x000008, "Member 'TLBuilderCommands_TLDrawLine1::Z' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawLine1, Thickness) == 0x00000C, "Member 'TLBuilderCommands_TLDrawLine1::Thickness' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDrawLine1, LifeTime) == 0x000010, "Member 'TLBuilderCommands_TLDrawLine1::LifeTime' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDrawMovePacket
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLDrawMovePacket final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDrawMovePacket) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDrawMovePacket");
static_assert(sizeof(TLBuilderCommands_TLDrawMovePacket) == 0x000004, "Wrong size on TLBuilderCommands_TLDrawMovePacket");
static_assert(offsetof(TLBuilderCommands_TLDrawMovePacket, ID) == 0x000000, "Member 'TLBuilderCommands_TLDrawMovePacket::ID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDropItem
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLDropItem final
{
public:
	int32                                         ClassId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDropItem) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDropItem");
static_assert(sizeof(TLBuilderCommands_TLDropItem) == 0x000008, "Wrong size on TLBuilderCommands_TLDropItem");
static_assert(offsetof(TLBuilderCommands_TLDropItem, ClassId) == 0x000000, "Member 'TLBuilderCommands_TLDropItem::ClassId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDropItem, Count) == 0x000004, "Member 'TLBuilderCommands_TLDropItem::Count' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDropItemByName
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLDropItemByName final
{
public:
	class FName                                   ItemName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDropItemByName) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDropItemByName");
static_assert(sizeof(TLBuilderCommands_TLDropItemByName) == 0x00000C, "Wrong size on TLBuilderCommands_TLDropItemByName");
static_assert(offsetof(TLBuilderCommands_TLDropItemByName, ItemName) == 0x000000, "Member 'TLBuilderCommands_TLDropItemByName::ItemName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDropItemByName, Count) == 0x000008, "Member 'TLBuilderCommands_TLDropItemByName::Count' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDynamicEventEffectObject
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLDynamicEventEffectObject final
{
public:
	bool                                          IsAdd;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ObjectId;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestEffectLooksKey;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDynamicEventEffectObject) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDynamicEventEffectObject");
static_assert(sizeof(TLBuilderCommands_TLDynamicEventEffectObject) == 0x000010, "Wrong size on TLBuilderCommands_TLDynamicEventEffectObject");
static_assert(offsetof(TLBuilderCommands_TLDynamicEventEffectObject, IsAdd) == 0x000000, "Member 'TLBuilderCommands_TLDynamicEventEffectObject::IsAdd' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDynamicEventEffectObject, ObjectId) == 0x000004, "Member 'TLBuilderCommands_TLDynamicEventEffectObject::ObjectId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDynamicEventEffectObject, QuestEffectLooksKey) == 0x000008, "Member 'TLBuilderCommands_TLDynamicEventEffectObject::QuestEffectLooksKey' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDynamicEventResult
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLDynamicEventResult final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDynamicEventResult) == 0x000001, "Wrong alignment on TLBuilderCommands_TLDynamicEventResult");
static_assert(sizeof(TLBuilderCommands_TLDynamicEventResult) == 0x000001, "Wrong size on TLBuilderCommands_TLDynamicEventResult");
static_assert(offsetof(TLBuilderCommands_TLDynamicEventResult, bInShow) == 0x000000, "Member 'TLBuilderCommands_TLDynamicEventResult::bInShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDynamicEventSummary
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLDynamicEventSummary final
{
public:
	class FName                                   LooksTableId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLRewardGroup                                RewardGroup;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLDynamicEventSummary) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDynamicEventSummary");
static_assert(sizeof(TLBuilderCommands_TLDynamicEventSummary) == 0x00000C, "Wrong size on TLBuilderCommands_TLDynamicEventSummary");
static_assert(offsetof(TLBuilderCommands_TLDynamicEventSummary, LooksTableId) == 0x000000, "Member 'TLBuilderCommands_TLDynamicEventSummary::LooksTableId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDynamicEventSummary, RewardGroup) == 0x000008, "Member 'TLBuilderCommands_TLDynamicEventSummary::RewardGroup' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLDynamicEventTarget
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLDynamicEventTarget final
{
public:
	bool                                          IsEnter;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Hp;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHp;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLDynamicEventTarget) == 0x000004, "Wrong alignment on TLBuilderCommands_TLDynamicEventTarget");
static_assert(sizeof(TLBuilderCommands_TLDynamicEventTarget) == 0x00000C, "Wrong size on TLBuilderCommands_TLDynamicEventTarget");
static_assert(offsetof(TLBuilderCommands_TLDynamicEventTarget, IsEnter) == 0x000000, "Member 'TLBuilderCommands_TLDynamicEventTarget::IsEnter' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDynamicEventTarget, Hp) == 0x000004, "Member 'TLBuilderCommands_TLDynamicEventTarget::Hp' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLDynamicEventTarget, MaxHp) == 0x000008, "Member 'TLBuilderCommands_TLDynamicEventTarget::MaxHp' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEEAlert
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLEEAlert final
{
public:
	bool                                          bInAlert;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLEEAlert) == 0x000001, "Wrong alignment on TLBuilderCommands_TLEEAlert");
static_assert(sizeof(TLBuilderCommands_TLEEAlert) == 0x000001, "Wrong size on TLBuilderCommands_TLEEAlert");
static_assert(offsetof(TLBuilderCommands_TLEEAlert, bInAlert) == 0x000000, "Member 'TLBuilderCommands_TLEEAlert::bInAlert' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEECount
// 0x0014 (0x0014 - 0x0000)
struct TLBuilderCommands_TLEECount final
{
public:
	int32                                         InObjId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInStackable;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InCount;                                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEffectId;                                        // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLEECount) == 0x000004, "Wrong alignment on TLBuilderCommands_TLEECount");
static_assert(sizeof(TLBuilderCommands_TLEECount) == 0x000014, "Wrong size on TLBuilderCommands_TLEECount");
static_assert(offsetof(TLBuilderCommands_TLEECount, InObjId) == 0x000000, "Member 'TLBuilderCommands_TLEECount::InObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEECount, bInStackable) == 0x000004, "Member 'TLBuilderCommands_TLEECount::bInStackable' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEECount, InCount) == 0x000008, "Member 'TLBuilderCommands_TLEECount::InCount' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEECount, InEffectId) == 0x00000C, "Member 'TLBuilderCommands_TLEECount::InEffectId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEffect
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLEffect final
{
public:
	int32                                         EffectID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SkillLevel;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLEffect) == 0x000004, "Wrong alignment on TLBuilderCommands_TLEffect");
static_assert(sizeof(TLBuilderCommands_TLEffect) == 0x000008, "Wrong size on TLBuilderCommands_TLEffect");
static_assert(offsetof(TLBuilderCommands_TLEffect, EffectID) == 0x000000, "Member 'TLBuilderCommands_TLEffect::EffectID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffect, SkillLevel) == 0x000004, "Member 'TLBuilderCommands_TLEffect::SkillLevel' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEffectDirectDamageDetail
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLEffectDirectDamageDetail final
{
public:
	int32                                         EffectPropId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CasterId;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InDamage;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RetHp;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitType;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLEffectDirectDamageDetail) == 0x000004, "Wrong alignment on TLBuilderCommands_TLEffectDirectDamageDetail");
static_assert(sizeof(TLBuilderCommands_TLEffectDirectDamageDetail) == 0x000018, "Wrong size on TLBuilderCommands_TLEffectDirectDamageDetail");
static_assert(offsetof(TLBuilderCommands_TLEffectDirectDamageDetail, EffectPropId) == 0x000000, "Member 'TLBuilderCommands_TLEffectDirectDamageDetail::EffectPropId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffectDirectDamageDetail, CasterId) == 0x000004, "Member 'TLBuilderCommands_TLEffectDirectDamageDetail::CasterId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffectDirectDamageDetail, TargetId) == 0x000008, "Member 'TLBuilderCommands_TLEffectDirectDamageDetail::TargetId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffectDirectDamageDetail, InDamage) == 0x00000C, "Member 'TLBuilderCommands_TLEffectDirectDamageDetail::InDamage' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffectDirectDamageDetail, RetHp) == 0x000010, "Member 'TLBuilderCommands_TLEffectDirectDamageDetail::RetHp' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffectDirectDamageDetail, HitType) == 0x000014, "Member 'TLBuilderCommands_TLEffectDirectDamageDetail::HitType' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEffectExpire
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLEffectExpire final
{
public:
	int32                                         AbnormalInstanceId;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLEffectExpire) == 0x000004, "Wrong alignment on TLBuilderCommands_TLEffectExpire");
static_assert(sizeof(TLBuilderCommands_TLEffectExpire) == 0x000004, "Wrong size on TLBuilderCommands_TLEffectExpire");
static_assert(offsetof(TLBuilderCommands_TLEffectExpire, AbnormalInstanceId) == 0x000000, "Member 'TLBuilderCommands_TLEffectExpire::AbnormalInstanceId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEffectStart
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLEffectStart final
{
public:
	int32                                         EffectID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalMs;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbnormalInstanceId;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverlapCount;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLEffectStart) == 0x000004, "Wrong alignment on TLBuilderCommands_TLEffectStart");
static_assert(sizeof(TLBuilderCommands_TLEffectStart) == 0x000010, "Wrong size on TLBuilderCommands_TLEffectStart");
static_assert(offsetof(TLBuilderCommands_TLEffectStart, EffectID) == 0x000000, "Member 'TLBuilderCommands_TLEffectStart::EffectID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffectStart, TotalMs) == 0x000004, "Member 'TLBuilderCommands_TLEffectStart::TotalMs' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffectStart, AbnormalInstanceId) == 0x000008, "Member 'TLBuilderCommands_TLEffectStart::AbnormalInstanceId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffectStart, OverlapCount) == 0x00000C, "Member 'TLBuilderCommands_TLEffectStart::OverlapCount' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEffectToMe
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLEffectToMe final
{
public:
	int32                                         EffectID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SkillLevel;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLEffectToMe) == 0x000004, "Wrong alignment on TLBuilderCommands_TLEffectToMe");
static_assert(sizeof(TLBuilderCommands_TLEffectToMe) == 0x000008, "Wrong size on TLBuilderCommands_TLEffectToMe");
static_assert(offsetof(TLBuilderCommands_TLEffectToMe, EffectID) == 0x000000, "Member 'TLBuilderCommands_TLEffectToMe::EffectID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffectToMe, SkillLevel) == 0x000004, "Member 'TLBuilderCommands_TLEffectToMe::SkillLevel' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEffectToMeByName
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLEffectToMeByName final
{
public:
	class FName                                   EffectName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SkillLevel;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLEffectToMeByName) == 0x000004, "Wrong alignment on TLBuilderCommands_TLEffectToMeByName");
static_assert(sizeof(TLBuilderCommands_TLEffectToMeByName) == 0x00000C, "Wrong size on TLBuilderCommands_TLEffectToMeByName");
static_assert(offsetof(TLBuilderCommands_TLEffectToMeByName, EffectName) == 0x000000, "Member 'TLBuilderCommands_TLEffectToMeByName::EffectName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffectToMeByName, SkillLevel) == 0x000008, "Member 'TLBuilderCommands_TLEffectToMeByName::SkillLevel' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEffectToMyself
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLEffectToMyself final
{
public:
	int32                                         EffectID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SkillLevel;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLEffectToMyself) == 0x000004, "Wrong alignment on TLBuilderCommands_TLEffectToMyself");
static_assert(sizeof(TLBuilderCommands_TLEffectToMyself) == 0x000008, "Wrong size on TLBuilderCommands_TLEffectToMyself");
static_assert(offsetof(TLBuilderCommands_TLEffectToMyself, EffectID) == 0x000000, "Member 'TLBuilderCommands_TLEffectToMyself::EffectID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffectToMyself, SkillLevel) == 0x000004, "Member 'TLBuilderCommands_TLEffectToMyself::SkillLevel' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEffectToMyselfByName
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLEffectToMyselfByName final
{
public:
	class FName                                   EffectName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SkillLevel;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLEffectToMyselfByName) == 0x000004, "Wrong alignment on TLBuilderCommands_TLEffectToMyselfByName");
static_assert(sizeof(TLBuilderCommands_TLEffectToMyselfByName) == 0x00000C, "Wrong size on TLBuilderCommands_TLEffectToMyselfByName");
static_assert(offsetof(TLBuilderCommands_TLEffectToMyselfByName, EffectName) == 0x000000, "Member 'TLBuilderCommands_TLEffectToMyselfByName::EffectName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffectToMyselfByName, SkillLevel) == 0x000008, "Member 'TLBuilderCommands_TLEffectToMyselfByName::SkillLevel' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEffectToTarget
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLEffectToTarget final
{
public:
	int32                                         EffectID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SkillLevel;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLEffectToTarget) == 0x000004, "Wrong alignment on TLBuilderCommands_TLEffectToTarget");
static_assert(sizeof(TLBuilderCommands_TLEffectToTarget) == 0x000008, "Wrong size on TLBuilderCommands_TLEffectToTarget");
static_assert(offsetof(TLBuilderCommands_TLEffectToTarget, EffectID) == 0x000000, "Member 'TLBuilderCommands_TLEffectToTarget::EffectID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffectToTarget, SkillLevel) == 0x000004, "Member 'TLBuilderCommands_TLEffectToTarget::SkillLevel' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEffectToTargetByName
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLEffectToTargetByName final
{
public:
	class FName                                   EffectName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SkillLevel;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLEffectToTargetByName) == 0x000004, "Wrong alignment on TLBuilderCommands_TLEffectToTargetByName");
static_assert(sizeof(TLBuilderCommands_TLEffectToTargetByName) == 0x00000C, "Wrong size on TLBuilderCommands_TLEffectToTargetByName");
static_assert(offsetof(TLBuilderCommands_TLEffectToTargetByName, EffectName) == 0x000000, "Member 'TLBuilderCommands_TLEffectToTargetByName::EffectName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffectToTargetByName, SkillLevel) == 0x000008, "Member 'TLBuilderCommands_TLEffectToTargetByName::SkillLevel' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEffectToTargetSelf
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLEffectToTargetSelf final
{
public:
	int32                                         EffectID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SkillLevel;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLEffectToTargetSelf) == 0x000004, "Wrong alignment on TLBuilderCommands_TLEffectToTargetSelf");
static_assert(sizeof(TLBuilderCommands_TLEffectToTargetSelf) == 0x000008, "Wrong size on TLBuilderCommands_TLEffectToTargetSelf");
static_assert(offsetof(TLBuilderCommands_TLEffectToTargetSelf, EffectID) == 0x000000, "Member 'TLBuilderCommands_TLEffectToTargetSelf::EffectID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffectToTargetSelf, SkillLevel) == 0x000004, "Member 'TLBuilderCommands_TLEffectToTargetSelf::SkillLevel' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEffectToTargetSelfByName
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLEffectToTargetSelfByName final
{
public:
	class FName                                   EffectName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SkillLevel;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLEffectToTargetSelfByName) == 0x000004, "Wrong alignment on TLBuilderCommands_TLEffectToTargetSelfByName");
static_assert(sizeof(TLBuilderCommands_TLEffectToTargetSelfByName) == 0x00000C, "Wrong size on TLBuilderCommands_TLEffectToTargetSelfByName");
static_assert(offsetof(TLBuilderCommands_TLEffectToTargetSelfByName, EffectName) == 0x000000, "Member 'TLBuilderCommands_TLEffectToTargetSelfByName::EffectName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffectToTargetSelfByName, SkillLevel) == 0x000008, "Member 'TLBuilderCommands_TLEffectToTargetSelfByName::SkillLevel' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEffectUpdate
// 0x0014 (0x0014 - 0x0000)
struct TLBuilderCommands_TLEffectUpdate final
{
public:
	int32                                         EffectID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalMs;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldAbnormalInstanceId;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbnormalInstanceId;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverlapCount;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLEffectUpdate) == 0x000004, "Wrong alignment on TLBuilderCommands_TLEffectUpdate");
static_assert(sizeof(TLBuilderCommands_TLEffectUpdate) == 0x000014, "Wrong size on TLBuilderCommands_TLEffectUpdate");
static_assert(offsetof(TLBuilderCommands_TLEffectUpdate, EffectID) == 0x000000, "Member 'TLBuilderCommands_TLEffectUpdate::EffectID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffectUpdate, TotalMs) == 0x000004, "Member 'TLBuilderCommands_TLEffectUpdate::TotalMs' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffectUpdate, OldAbnormalInstanceId) == 0x000008, "Member 'TLBuilderCommands_TLEffectUpdate::OldAbnormalInstanceId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffectUpdate, AbnormalInstanceId) == 0x00000C, "Member 'TLBuilderCommands_TLEffectUpdate::AbnormalInstanceId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEffectUpdate, OverlapCount) == 0x000010, "Member 'TLBuilderCommands_TLEffectUpdate::OverlapCount' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEnablePerfChart
// 0x0020 (0x0020 - 0x0000)
struct TLBuilderCommands_TLEnablePerfChart final
{
public:
	class FString                                 FullPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReplayFileName;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLEnablePerfChart) == 0x000008, "Wrong alignment on TLBuilderCommands_TLEnablePerfChart");
static_assert(sizeof(TLBuilderCommands_TLEnablePerfChart) == 0x000020, "Wrong size on TLBuilderCommands_TLEnablePerfChart");
static_assert(offsetof(TLBuilderCommands_TLEnablePerfChart, FullPath) == 0x000000, "Member 'TLBuilderCommands_TLEnablePerfChart::FullPath' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEnablePerfChart, ReplayFileName) == 0x000010, "Member 'TLBuilderCommands_TLEnablePerfChart::ReplayFileName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEnchantChangeItem
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLEnchantChangeItem final
{
public:
	class FName                                   ItemName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLEnchantChangeItem) == 0x000004, "Wrong alignment on TLBuilderCommands_TLEnchantChangeItem");
static_assert(sizeof(TLBuilderCommands_TLEnchantChangeItem) == 0x000008, "Wrong size on TLBuilderCommands_TLEnchantChangeItem");
static_assert(offsetof(TLBuilderCommands_TLEnchantChangeItem, ItemName) == 0x000000, "Member 'TLBuilderCommands_TLEnchantChangeItem::ItemName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEnterRegion
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLEnterRegion final
{
public:
	class FString                                 Guid;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLEnterRegion) == 0x000008, "Wrong alignment on TLBuilderCommands_TLEnterRegion");
static_assert(sizeof(TLBuilderCommands_TLEnterRegion) == 0x000010, "Wrong size on TLBuilderCommands_TLEnterRegion");
static_assert(offsetof(TLBuilderCommands_TLEnterRegion, Guid) == 0x000000, "Member 'TLBuilderCommands_TLEnterRegion::Guid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEOE
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLEOE final
{
public:
	int32                                         InShow;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLEOE) == 0x000004, "Wrong alignment on TLBuilderCommands_TLEOE");
static_assert(sizeof(TLBuilderCommands_TLEOE) == 0x000004, "Wrong size on TLBuilderCommands_TLEOE");
static_assert(offsetof(TLBuilderCommands_TLEOE, InShow) == 0x000000, "Member 'TLBuilderCommands_TLEOE::InShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEquipArmor
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLEquipArmor final
{
public:
	int32                                         InTargetUniqueID;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemID;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLEquipArmor) == 0x000004, "Wrong alignment on TLBuilderCommands_TLEquipArmor");
static_assert(sizeof(TLBuilderCommands_TLEquipArmor) == 0x000008, "Wrong size on TLBuilderCommands_TLEquipArmor");
static_assert(offsetof(TLBuilderCommands_TLEquipArmor, InTargetUniqueID) == 0x000000, "Member 'TLBuilderCommands_TLEquipArmor::InTargetUniqueID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEquipArmor, InItemID) == 0x000004, "Member 'TLBuilderCommands_TLEquipArmor::InItemID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEquipCostume
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLEquipCostume final
{
public:
	int32                                         InTargetUniqueID;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InCostumeID;                                       // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLEquipCostume) == 0x000004, "Wrong alignment on TLBuilderCommands_TLEquipCostume");
static_assert(sizeof(TLBuilderCommands_TLEquipCostume) == 0x00000C, "Wrong size on TLBuilderCommands_TLEquipCostume");
static_assert(offsetof(TLBuilderCommands_TLEquipCostume, InTargetUniqueID) == 0x000000, "Member 'TLBuilderCommands_TLEquipCostume::InTargetUniqueID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEquipCostume, InCostumeID) == 0x000004, "Member 'TLBuilderCommands_TLEquipCostume::InCostumeID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEquipWeapon
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLEquipWeapon final
{
public:
	int32                                         InTargetUniqueID;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemID;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLEquipWeapon) == 0x000004, "Wrong alignment on TLBuilderCommands_TLEquipWeapon");
static_assert(sizeof(TLBuilderCommands_TLEquipWeapon) == 0x000008, "Wrong size on TLBuilderCommands_TLEquipWeapon");
static_assert(offsetof(TLBuilderCommands_TLEquipWeapon, InTargetUniqueID) == 0x000000, "Member 'TLBuilderCommands_TLEquipWeapon::InTargetUniqueID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLEquipWeapon, InItemID) == 0x000004, "Member 'TLBuilderCommands_TLEquipWeapon::InItemID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLEventScene
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLEventScene final
{
public:
	class FName                                   InRowName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLEventScene) == 0x000004, "Wrong alignment on TLBuilderCommands_TLEventScene");
static_assert(sizeof(TLBuilderCommands_TLEventScene) == 0x000008, "Wrong size on TLBuilderCommands_TLEventScene");
static_assert(offsetof(TLBuilderCommands_TLEventScene, InRowName) == 0x000000, "Member 'TLBuilderCommands_TLEventScene::InRowName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLFindAllIntersctedSceneNode
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLFindAllIntersctedSceneNode final
{
public:
	float                                         X1;                                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y1;                                                // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z1;                                                // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X2;                                                // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y2;                                                // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z2;                                                // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLFindAllIntersctedSceneNode) == 0x000004, "Wrong alignment on TLBuilderCommands_TLFindAllIntersctedSceneNode");
static_assert(sizeof(TLBuilderCommands_TLFindAllIntersctedSceneNode) == 0x000018, "Wrong size on TLBuilderCommands_TLFindAllIntersctedSceneNode");
static_assert(offsetof(TLBuilderCommands_TLFindAllIntersctedSceneNode, X1) == 0x000000, "Member 'TLBuilderCommands_TLFindAllIntersctedSceneNode::X1' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLFindAllIntersctedSceneNode, Y1) == 0x000004, "Member 'TLBuilderCommands_TLFindAllIntersctedSceneNode::Y1' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLFindAllIntersctedSceneNode, Z1) == 0x000008, "Member 'TLBuilderCommands_TLFindAllIntersctedSceneNode::Z1' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLFindAllIntersctedSceneNode, X2) == 0x00000C, "Member 'TLBuilderCommands_TLFindAllIntersctedSceneNode::X2' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLFindAllIntersctedSceneNode, Y2) == 0x000010, "Member 'TLBuilderCommands_TLFindAllIntersctedSceneNode::Y2' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLFindAllIntersctedSceneNode, Z2) == 0x000014, "Member 'TLBuilderCommands_TLFindAllIntersctedSceneNode::Z2' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLFindNaviPathMouseGraphCitizenPos
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLFindNaviPathMouseGraphCitizenPos final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLFindNaviPathMouseGraphCitizenPos) == 0x000004, "Wrong alignment on TLBuilderCommands_TLFindNaviPathMouseGraphCitizenPos");
static_assert(sizeof(TLBuilderCommands_TLFindNaviPathMouseGraphCitizenPos) == 0x00000C, "Wrong size on TLBuilderCommands_TLFindNaviPathMouseGraphCitizenPos");
static_assert(offsetof(TLBuilderCommands_TLFindNaviPathMouseGraphCitizenPos, X) == 0x000000, "Member 'TLBuilderCommands_TLFindNaviPathMouseGraphCitizenPos::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLFindNaviPathMouseGraphCitizenPos, Y) == 0x000004, "Member 'TLBuilderCommands_TLFindNaviPathMouseGraphCitizenPos::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLFindNaviPathMouseGraphCitizenPos, Z) == 0x000008, "Member 'TLBuilderCommands_TLFindNaviPathMouseGraphCitizenPos::Z' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLFindNaviPathMouseGraphMonsterPos
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLFindNaviPathMouseGraphMonsterPos final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLFindNaviPathMouseGraphMonsterPos) == 0x000004, "Wrong alignment on TLBuilderCommands_TLFindNaviPathMouseGraphMonsterPos");
static_assert(sizeof(TLBuilderCommands_TLFindNaviPathMouseGraphMonsterPos) == 0x00000C, "Wrong size on TLBuilderCommands_TLFindNaviPathMouseGraphMonsterPos");
static_assert(offsetof(TLBuilderCommands_TLFindNaviPathMouseGraphMonsterPos, X) == 0x000000, "Member 'TLBuilderCommands_TLFindNaviPathMouseGraphMonsterPos::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLFindNaviPathMouseGraphMonsterPos, Y) == 0x000004, "Member 'TLBuilderCommands_TLFindNaviPathMouseGraphMonsterPos::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLFindNaviPathMouseGraphMonsterPos, Z) == 0x000008, "Member 'TLBuilderCommands_TLFindNaviPathMouseGraphMonsterPos::Z' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLFindNaviPathMouseGraphPlayerPos
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLFindNaviPathMouseGraphPlayerPos final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLFindNaviPathMouseGraphPlayerPos) == 0x000004, "Wrong alignment on TLBuilderCommands_TLFindNaviPathMouseGraphPlayerPos");
static_assert(sizeof(TLBuilderCommands_TLFindNaviPathMouseGraphPlayerPos) == 0x00000C, "Wrong size on TLBuilderCommands_TLFindNaviPathMouseGraphPlayerPos");
static_assert(offsetof(TLBuilderCommands_TLFindNaviPathMouseGraphPlayerPos, X) == 0x000000, "Member 'TLBuilderCommands_TLFindNaviPathMouseGraphPlayerPos::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLFindNaviPathMouseGraphPlayerPos, Y) == 0x000004, "Member 'TLBuilderCommands_TLFindNaviPathMouseGraphPlayerPos::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLFindNaviPathMouseGraphPlayerPos, Z) == 0x000008, "Member 'TLBuilderCommands_TLFindNaviPathMouseGraphPlayerPos::Z' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLFindNaviPathPos
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLFindNaviPathPos final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLFindNaviPathPos) == 0x000004, "Wrong alignment on TLBuilderCommands_TLFindNaviPathPos");
static_assert(sizeof(TLBuilderCommands_TLFindNaviPathPos) == 0x00000C, "Wrong size on TLBuilderCommands_TLFindNaviPathPos");
static_assert(offsetof(TLBuilderCommands_TLFindNaviPathPos, X) == 0x000000, "Member 'TLBuilderCommands_TLFindNaviPathPos::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLFindNaviPathPos, Y) == 0x000004, "Member 'TLBuilderCommands_TLFindNaviPathPos::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLFindNaviPathPos, Z) == 0x000008, "Member 'TLBuilderCommands_TLFindNaviPathPos::Z' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLFOChangeContiState
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLFOChangeContiState final
{
public:
	class FName                                   ContiState;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLFOChangeContiState) == 0x000004, "Wrong alignment on TLBuilderCommands_TLFOChangeContiState");
static_assert(sizeof(TLBuilderCommands_TLFOChangeContiState) == 0x000008, "Wrong size on TLBuilderCommands_TLFOChangeContiState");
static_assert(offsetof(TLBuilderCommands_TLFOChangeContiState, ContiState) == 0x000000, "Member 'TLBuilderCommands_TLFOChangeContiState::ContiState' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLFoPlayCueSheet
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLFoPlayCueSheet final
{
public:
	class FName                                   CueSheetName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLFoPlayCueSheet) == 0x000004, "Wrong alignment on TLBuilderCommands_TLFoPlayCueSheet");
static_assert(sizeof(TLBuilderCommands_TLFoPlayCueSheet) == 0x000008, "Wrong size on TLBuilderCommands_TLFoPlayCueSheet");
static_assert(offsetof(TLBuilderCommands_TLFoPlayCueSheet, CueSheetName) == 0x000000, "Member 'TLBuilderCommands_TLFoPlayCueSheet::CueSheetName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLForcefeedBack
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLForcefeedBack final
{
public:
	class FString                                 ForceFeedback;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLForcefeedBack) == 0x000008, "Wrong alignment on TLBuilderCommands_TLForcefeedBack");
static_assert(sizeof(TLBuilderCommands_TLForcefeedBack) == 0x000010, "Wrong size on TLBuilderCommands_TLForcefeedBack");
static_assert(offsetof(TLBuilderCommands_TLForcefeedBack, ForceFeedback) == 0x000000, "Member 'TLBuilderCommands_TLForcefeedBack::ForceFeedback' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLForceFeedbackIgnore
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLForceFeedbackIgnore final
{
public:
	bool                                          bIgnore;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLForceFeedbackIgnore) == 0x000001, "Wrong alignment on TLBuilderCommands_TLForceFeedbackIgnore");
static_assert(sizeof(TLBuilderCommands_TLForceFeedbackIgnore) == 0x000001, "Wrong size on TLBuilderCommands_TLForceFeedbackIgnore");
static_assert(offsetof(TLBuilderCommands_TLForceFeedbackIgnore, bIgnore) == 0x000000, "Member 'TLBuilderCommands_TLForceFeedbackIgnore::bIgnore' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLFoRevive
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLFoRevive final
{
public:
	int32                                         LifePercentage;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLFoRevive) == 0x000004, "Wrong alignment on TLBuilderCommands_TLFoRevive");
static_assert(sizeof(TLBuilderCommands_TLFoRevive) == 0x000004, "Wrong size on TLBuilderCommands_TLFoRevive");
static_assert(offsetof(TLBuilderCommands_TLFoRevive, LifePercentage) == 0x000000, "Member 'TLBuilderCommands_TLFoRevive::LifePercentage' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLFreeCameraRollStep
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLFreeCameraRollStep final
{
public:
	float                                         InStep;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLFreeCameraRollStep) == 0x000004, "Wrong alignment on TLBuilderCommands_TLFreeCameraRollStep");
static_assert(sizeof(TLBuilderCommands_TLFreeCameraRollStep) == 0x000004, "Wrong size on TLBuilderCommands_TLFreeCameraRollStep");
static_assert(offsetof(TLBuilderCommands_TLFreeCameraRollStep, InStep) == 0x000000, "Member 'TLBuilderCommands_TLFreeCameraRollStep::InStep' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLFRUpdateMemberStatus
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLFRUpdateMemberStatus final
{
public:
	int64                                         InPcId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InOnline;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLFRUpdateMemberStatus) == 0x000008, "Wrong alignment on TLBuilderCommands_TLFRUpdateMemberStatus");
static_assert(sizeof(TLBuilderCommands_TLFRUpdateMemberStatus) == 0x000010, "Wrong size on TLBuilderCommands_TLFRUpdateMemberStatus");
static_assert(offsetof(TLBuilderCommands_TLFRUpdateMemberStatus, InPcId) == 0x000000, "Member 'TLBuilderCommands_TLFRUpdateMemberStatus::InPcId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLFRUpdateMemberStatus, InOnline) == 0x000008, "Member 'TLBuilderCommands_TLFRUpdateMemberStatus::InOnline' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGacha
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLGacha final
{
public:
	bool                                          bInActivate;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GachaItemId;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGacha) == 0x000004, "Wrong alignment on TLBuilderCommands_TLGacha");
static_assert(sizeof(TLBuilderCommands_TLGacha) == 0x000008, "Wrong size on TLBuilderCommands_TLGacha");
static_assert(offsetof(TLBuilderCommands_TLGacha, bInActivate) == 0x000000, "Member 'TLBuilderCommands_TLGacha::bInActivate' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLGacha, GachaItemId) == 0x000004, "Member 'TLBuilderCommands_TLGacha::GachaItemId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGacha2
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLGacha2 final
{
public:
	bool                                          bInActivate;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InItemCount;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGachaItemLevel;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGacha2) == 0x000004, "Wrong alignment on TLBuilderCommands_TLGacha2");
static_assert(sizeof(TLBuilderCommands_TLGacha2) == 0x00000C, "Wrong size on TLBuilderCommands_TLGacha2");
static_assert(offsetof(TLBuilderCommands_TLGacha2, bInActivate) == 0x000000, "Member 'TLBuilderCommands_TLGacha2::bInActivate' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLGacha2, InItemCount) == 0x000004, "Member 'TLBuilderCommands_TLGacha2::InItemCount' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLGacha2, InGachaItemLevel) == 0x000008, "Member 'TLBuilderCommands_TLGacha2::InGachaItemLevel' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGameFlowView
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLGameFlowView final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGameFlowView) == 0x000001, "Wrong alignment on TLBuilderCommands_TLGameFlowView");
static_assert(sizeof(TLBuilderCommands_TLGameFlowView) == 0x000001, "Wrong size on TLBuilderCommands_TLGameFlowView");
static_assert(offsetof(TLBuilderCommands_TLGameFlowView, bDisplay) == 0x000000, "Member 'TLBuilderCommands_TLGameFlowView::bDisplay' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGamepadFreeMouseCursor
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLGamepadFreeMouseCursor final
{
public:
	bool                                          bFree;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGamepadFreeMouseCursor) == 0x000001, "Wrong alignment on TLBuilderCommands_TLGamepadFreeMouseCursor");
static_assert(sizeof(TLBuilderCommands_TLGamepadFreeMouseCursor) == 0x000001, "Wrong size on TLBuilderCommands_TLGamepadFreeMouseCursor");
static_assert(offsetof(TLBuilderCommands_TLGamepadFreeMouseCursor, bFree) == 0x000000, "Member 'TLBuilderCommands_TLGamepadFreeMouseCursor::bFree' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGamepadType
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLGamepadType final
{
public:
	bool                                          InXbox;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGamepadType) == 0x000001, "Wrong alignment on TLBuilderCommands_TLGamepadType");
static_assert(sizeof(TLBuilderCommands_TLGamepadType) == 0x000001, "Wrong size on TLBuilderCommands_TLGamepadType");
static_assert(offsetof(TLBuilderCommands_TLGamepadType, InXbox) == 0x000000, "Member 'TLBuilderCommands_TLGamepadType::InXbox' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGameValueGet
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLGameValueGet final
{
public:
	class FName                                   InGameValueName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGameValueGet) == 0x000004, "Wrong alignment on TLBuilderCommands_TLGameValueGet");
static_assert(sizeof(TLBuilderCommands_TLGameValueGet) == 0x000008, "Wrong size on TLBuilderCommands_TLGameValueGet");
static_assert(offsetof(TLBuilderCommands_TLGameValueGet, InGameValueName) == 0x000000, "Member 'TLBuilderCommands_TLGameValueGet::InGameValueName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGameValueSet
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLGameValueSet final
{
public:
	class FName                                   InGameValueName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InGameValueString;                                 // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGameValueSet) == 0x000008, "Wrong alignment on TLBuilderCommands_TLGameValueSet");
static_assert(sizeof(TLBuilderCommands_TLGameValueSet) == 0x000018, "Wrong size on TLBuilderCommands_TLGameValueSet");
static_assert(offsetof(TLBuilderCommands_TLGameValueSet, InGameValueName) == 0x000000, "Member 'TLBuilderCommands_TLGameValueSet::InGameValueName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLGameValueSet, InGameValueString) == 0x000008, "Member 'TLBuilderCommands_TLGameValueSet::InGameValueString' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGarbageCollectionReferenceCheckAbnormalLooks
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLGarbageCollectionReferenceCheckAbnormalLooks final
{
public:
	class FName                                   InAbnormalLooksName;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGarbageCollectionReferenceCheckAbnormalLooks) == 0x000004, "Wrong alignment on TLBuilderCommands_TLGarbageCollectionReferenceCheckAbnormalLooks");
static_assert(sizeof(TLBuilderCommands_TLGarbageCollectionReferenceCheckAbnormalLooks) == 0x000008, "Wrong size on TLBuilderCommands_TLGarbageCollectionReferenceCheckAbnormalLooks");
static_assert(offsetof(TLBuilderCommands_TLGarbageCollectionReferenceCheckAbnormalLooks, InAbnormalLooksName) == 0x000000, "Member 'TLBuilderCommands_TLGarbageCollectionReferenceCheckAbnormalLooks::InAbnormalLooksName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGlidingSetIgnoreGravitySec
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLGlidingSetIgnoreGravitySec final
{
public:
	float                                         InSec;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGlidingSetIgnoreGravitySec) == 0x000004, "Wrong alignment on TLBuilderCommands_TLGlidingSetIgnoreGravitySec");
static_assert(sizeof(TLBuilderCommands_TLGlidingSetIgnoreGravitySec) == 0x000004, "Wrong size on TLBuilderCommands_TLGlidingSetIgnoreGravitySec");
static_assert(offsetof(TLBuilderCommands_TLGlidingSetIgnoreGravitySec, InSec) == 0x000000, "Member 'TLBuilderCommands_TLGlidingSetIgnoreGravitySec::InSec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGlobalSettingChange
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLGlobalSettingChange final
{
public:
	class FName                                   Param;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGlobalSettingChange) == 0x000004, "Wrong alignment on TLBuilderCommands_TLGlobalSettingChange");
static_assert(sizeof(TLBuilderCommands_TLGlobalSettingChange) == 0x00000C, "Wrong size on TLBuilderCommands_TLGlobalSettingChange");
static_assert(offsetof(TLBuilderCommands_TLGlobalSettingChange, Param) == 0x000000, "Member 'TLBuilderCommands_TLGlobalSettingChange::Param' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLGlobalSettingChange, Value) == 0x000008, "Member 'TLBuilderCommands_TLGlobalSettingChange::Value' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGod
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLGod final
{
public:
	bool                                          bGod;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGod) == 0x000001, "Wrong alignment on TLBuilderCommands_TLGod");
static_assert(sizeof(TLBuilderCommands_TLGod) == 0x000001, "Wrong size on TLBuilderCommands_TLGod");
static_assert(offsetof(TLBuilderCommands_TLGod, bGod) == 0x000000, "Member 'TLBuilderCommands_TLGod::bGod' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGodAll
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLGodAll final
{
public:
	bool                                          bGod;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGodAll) == 0x000001, "Wrong alignment on TLBuilderCommands_TLGodAll");
static_assert(sizeof(TLBuilderCommands_TLGodAll) == 0x000001, "Wrong size on TLBuilderCommands_TLGodAll");
static_assert(offsetof(TLBuilderCommands_TLGodAll, bGod) == 0x000000, "Member 'TLBuilderCommands_TLGodAll::bGod' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGodMe
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLGodMe final
{
public:
	bool                                          bGod;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGodMe) == 0x000001, "Wrong alignment on TLBuilderCommands_TLGodMe");
static_assert(sizeof(TLBuilderCommands_TLGodMe) == 0x000001, "Wrong size on TLBuilderCommands_TLGodMe");
static_assert(offsetof(TLBuilderCommands_TLGodMe, bGod) == 0x000000, "Member 'TLBuilderCommands_TLGodMe::bGod' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGoTo
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLGoTo final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGoTo) == 0x000004, "Wrong alignment on TLBuilderCommands_TLGoTo");
static_assert(sizeof(TLBuilderCommands_TLGoTo) == 0x000004, "Wrong size on TLBuilderCommands_TLGoTo");
static_assert(offsetof(TLBuilderCommands_TLGoTo, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLGoTo::ObjId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGridMouseGround
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLGridMouseGround final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GridCount;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGridMouseGround) == 0x000004, "Wrong alignment on TLBuilderCommands_TLGridMouseGround");
static_assert(sizeof(TLBuilderCommands_TLGridMouseGround) == 0x000008, "Wrong size on TLBuilderCommands_TLGridMouseGround");
static_assert(offsetof(TLBuilderCommands_TLGridMouseGround, bShow) == 0x000000, "Member 'TLBuilderCommands_TLGridMouseGround::bShow' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLGridMouseGround, GridCount) == 0x000004, "Member 'TLBuilderCommands_TLGridMouseGround::GridCount' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGridObject
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLGridObject final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOn;                                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GridCount;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGridObject) == 0x000004, "Wrong alignment on TLBuilderCommands_TLGridObject");
static_assert(sizeof(TLBuilderCommands_TLGridObject) == 0x00000C, "Wrong size on TLBuilderCommands_TLGridObject");
static_assert(offsetof(TLBuilderCommands_TLGridObject, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLGridObject::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLGridObject, bOn) == 0x000004, "Member 'TLBuilderCommands_TLGridObject::bOn' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLGridObject, GridCount) == 0x000008, "Member 'TLBuilderCommands_TLGridObject::GridCount' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGridObjectMouse
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLGridObjectMouse final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GridCount;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGridObjectMouse) == 0x000004, "Wrong alignment on TLBuilderCommands_TLGridObjectMouse");
static_assert(sizeof(TLBuilderCommands_TLGridObjectMouse) == 0x000008, "Wrong size on TLBuilderCommands_TLGridObjectMouse");
static_assert(offsetof(TLBuilderCommands_TLGridObjectMouse, bShow) == 0x000000, "Member 'TLBuilderCommands_TLGridObjectMouse::bShow' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLGridObjectMouse, GridCount) == 0x000004, "Member 'TLBuilderCommands_TLGridObjectMouse::GridCount' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGridObjectTarget
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLGridObjectTarget final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GridCount;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGridObjectTarget) == 0x000004, "Wrong alignment on TLBuilderCommands_TLGridObjectTarget");
static_assert(sizeof(TLBuilderCommands_TLGridObjectTarget) == 0x000008, "Wrong size on TLBuilderCommands_TLGridObjectTarget");
static_assert(offsetof(TLBuilderCommands_TLGridObjectTarget, bShow) == 0x000000, "Member 'TLBuilderCommands_TLGridObjectTarget::bShow' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLGridObjectTarget, GridCount) == 0x000004, "Member 'TLBuilderCommands_TLGridObjectTarget::GridCount' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGuildContractComplete
// 0x0020 (0x0020 - 0x0000)
struct TLBuilderCommands_TLGuildContractComplete final
{
public:
	class FString                                 InContractGuid;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InContractGroupGuid;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGuildContractComplete) == 0x000008, "Wrong alignment on TLBuilderCommands_TLGuildContractComplete");
static_assert(sizeof(TLBuilderCommands_TLGuildContractComplete) == 0x000020, "Wrong size on TLBuilderCommands_TLGuildContractComplete");
static_assert(offsetof(TLBuilderCommands_TLGuildContractComplete, InContractGuid) == 0x000000, "Member 'TLBuilderCommands_TLGuildContractComplete::InContractGuid' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLGuildContractComplete, InContractGroupGuid) == 0x000010, "Member 'TLBuilderCommands_TLGuildContractComplete::InContractGroupGuid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGuildContractStart
// 0x0020 (0x0020 - 0x0000)
struct TLBuilderCommands_TLGuildContractStart final
{
public:
	class FString                                 InContractGuid;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InContractGroupGuid;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGuildContractStart) == 0x000008, "Wrong alignment on TLBuilderCommands_TLGuildContractStart");
static_assert(sizeof(TLBuilderCommands_TLGuildContractStart) == 0x000020, "Wrong size on TLBuilderCommands_TLGuildContractStart");
static_assert(offsetof(TLBuilderCommands_TLGuildContractStart, InContractGuid) == 0x000000, "Member 'TLBuilderCommands_TLGuildContractStart::InContractGuid' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLGuildContractStart, InContractGroupGuid) == 0x000010, "Member 'TLBuilderCommands_TLGuildContractStart::InContractGroupGuid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGuildEmblemUpdate
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLGuildEmblemUpdate final
{
public:
	int32                                         EmblemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EmblemColorIndex;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGuildEmblemUpdate) == 0x000004, "Wrong alignment on TLBuilderCommands_TLGuildEmblemUpdate");
static_assert(sizeof(TLBuilderCommands_TLGuildEmblemUpdate) == 0x000008, "Wrong size on TLBuilderCommands_TLGuildEmblemUpdate");
static_assert(offsetof(TLBuilderCommands_TLGuildEmblemUpdate, EmblemIndex) == 0x000000, "Member 'TLBuilderCommands_TLGuildEmblemUpdate::EmblemIndex' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLGuildEmblemUpdate, EmblemColorIndex) == 0x000004, "Member 'TLBuilderCommands_TLGuildEmblemUpdate::EmblemColorIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGuildMasterDelegate
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLGuildMasterDelegate final
{
public:
	int32                                         InState;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGuildMasterDelegate) == 0x000004, "Wrong alignment on TLBuilderCommands_TLGuildMasterDelegate");
static_assert(sizeof(TLBuilderCommands_TLGuildMasterDelegate) == 0x000004, "Wrong size on TLBuilderCommands_TLGuildMasterDelegate");
static_assert(offsetof(TLBuilderCommands_TLGuildMasterDelegate, InState) == 0x000000, "Member 'TLBuilderCommands_TLGuildMasterDelegate::InState' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGuildRaidChange
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLGuildRaidChange final
{
public:
	int32                                         InUID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGuildRaidChange) == 0x000004, "Wrong alignment on TLBuilderCommands_TLGuildRaidChange");
static_assert(sizeof(TLBuilderCommands_TLGuildRaidChange) == 0x000004, "Wrong size on TLBuilderCommands_TLGuildRaidChange");
static_assert(offsetof(TLBuilderCommands_TLGuildRaidChange, InUID) == 0x000000, "Member 'TLBuilderCommands_TLGuildRaidChange::InUID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGuildRaidResurrection
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLGuildRaidResurrection final
{
public:
	bool                                          InIsExitGuildRaid;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGuildRaidResurrection) == 0x000001, "Wrong alignment on TLBuilderCommands_TLGuildRaidResurrection");
static_assert(sizeof(TLBuilderCommands_TLGuildRaidResurrection) == 0x000001, "Wrong size on TLBuilderCommands_TLGuildRaidResurrection");
static_assert(offsetof(TLBuilderCommands_TLGuildRaidResurrection, InIsExitGuildRaid) == 0x000000, "Member 'TLBuilderCommands_TLGuildRaidResurrection::InIsExitGuildRaid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLGuildSkillResurrection
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLGuildSkillResurrection final
{
public:
	bool                                          InIsAdd;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InID;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLGuildSkillResurrection) == 0x000004, "Wrong alignment on TLBuilderCommands_TLGuildSkillResurrection");
static_assert(sizeof(TLBuilderCommands_TLGuildSkillResurrection) == 0x000008, "Wrong size on TLBuilderCommands_TLGuildSkillResurrection");
static_assert(offsetof(TLBuilderCommands_TLGuildSkillResurrection, InIsAdd) == 0x000000, "Member 'TLBuilderCommands_TLGuildSkillResurrection::InIsAdd' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLGuildSkillResurrection, InID) == 0x000004, "Member 'TLBuilderCommands_TLGuildSkillResurrection::InID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLHideHpUI
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLHideHpUI final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideHp;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLHideHpUI) == 0x000004, "Wrong alignment on TLBuilderCommands_TLHideHpUI");
static_assert(sizeof(TLBuilderCommands_TLHideHpUI) == 0x000008, "Wrong size on TLBuilderCommands_TLHideHpUI");
static_assert(offsetof(TLBuilderCommands_TLHideHpUI, ID) == 0x000000, "Member 'TLBuilderCommands_TLHideHpUI::ID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLHideHpUI, bHideHp) == 0x000004, "Member 'TLBuilderCommands_TLHideHpUI::bHideHp' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLHideInGameRootChild
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLHideInGameRootChild final
{
public:
	int32                                         ChildIdx;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLHideInGameRootChild) == 0x000004, "Wrong alignment on TLBuilderCommands_TLHideInGameRootChild");
static_assert(sizeof(TLBuilderCommands_TLHideInGameRootChild) == 0x000004, "Wrong size on TLBuilderCommands_TLHideInGameRootChild");
static_assert(offsetof(TLBuilderCommands_TLHideInGameRootChild, ChildIdx) == 0x000000, "Member 'TLBuilderCommands_TLHideInGameRootChild::ChildIdx' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLHideInGameRootChildChild
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLHideInGameRootChildChild final
{
public:
	int32                                         ChildIdx;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChildChildIdx;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLHideInGameRootChildChild) == 0x000004, "Wrong alignment on TLBuilderCommands_TLHideInGameRootChildChild");
static_assert(sizeof(TLBuilderCommands_TLHideInGameRootChildChild) == 0x000008, "Wrong size on TLBuilderCommands_TLHideInGameRootChildChild");
static_assert(offsetof(TLBuilderCommands_TLHideInGameRootChildChild, ChildIdx) == 0x000000, "Member 'TLBuilderCommands_TLHideInGameRootChildChild::ChildIdx' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLHideInGameRootChildChild, ChildChildIdx) == 0x000004, "Member 'TLBuilderCommands_TLHideInGameRootChildChild::ChildChildIdx' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLHideLayerAll
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLHideLayerAll final
{
public:
	bool                                          bInHide;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLHideLayerAll) == 0x000001, "Wrong alignment on TLBuilderCommands_TLHideLayerAll");
static_assert(sizeof(TLBuilderCommands_TLHideLayerAll) == 0x000001, "Wrong size on TLBuilderCommands_TLHideLayerAll");
static_assert(offsetof(TLBuilderCommands_TLHideLayerAll, bInHide) == 0x000000, "Member 'TLBuilderCommands_TLHideLayerAll::bInHide' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLHideWidgetChild
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLHideWidgetChild final
{
public:
	class FName                                   InWidgetKey;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChildIdx;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLHideWidgetChild) == 0x000004, "Wrong alignment on TLBuilderCommands_TLHideWidgetChild");
static_assert(sizeof(TLBuilderCommands_TLHideWidgetChild) == 0x00000C, "Wrong size on TLBuilderCommands_TLHideWidgetChild");
static_assert(offsetof(TLBuilderCommands_TLHideWidgetChild, InWidgetKey) == 0x000000, "Member 'TLBuilderCommands_TLHideWidgetChild::InWidgetKey' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLHideWidgetChild, ChildIdx) == 0x000008, "Member 'TLBuilderCommands_TLHideWidgetChild::ChildIdx' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLHitNavPoint
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLHitNavPoint final
{
public:
	int32                                         ScreenX;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScreenY;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLHitNavPoint) == 0x000004, "Wrong alignment on TLBuilderCommands_TLHitNavPoint");
static_assert(sizeof(TLBuilderCommands_TLHitNavPoint) == 0x000008, "Wrong size on TLBuilderCommands_TLHitNavPoint");
static_assert(offsetof(TLBuilderCommands_TLHitNavPoint, ScreenX) == 0x000000, "Member 'TLBuilderCommands_TLHitNavPoint::ScreenX' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLHitNavPoint, ScreenY) == 0x000004, "Member 'TLBuilderCommands_TLHitNavPoint::ScreenY' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLHudCust
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLHudCust final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLHudCust) == 0x000001, "Wrong alignment on TLBuilderCommands_TLHudCust");
static_assert(sizeof(TLBuilderCommands_TLHudCust) == 0x000001, "Wrong size on TLBuilderCommands_TLHudCust");
static_assert(offsetof(TLBuilderCommands_TLHudCust, bShow) == 0x000000, "Member 'TLBuilderCommands_TLHudCust::bShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLHudScale
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLHudScale final
{
public:
	float                                         ScaleValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLHudScale) == 0x000004, "Wrong alignment on TLBuilderCommands_TLHudScale");
static_assert(sizeof(TLBuilderCommands_TLHudScale) == 0x000004, "Wrong size on TLBuilderCommands_TLHudScale");
static_assert(offsetof(TLBuilderCommands_TLHudScale, ScaleValue) == 0x000000, "Member 'TLBuilderCommands_TLHudScale::ScaleValue' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLHudScaleStep
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLHudScaleStep final
{
public:
	int32                                         StepValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLHudScaleStep) == 0x000004, "Wrong alignment on TLBuilderCommands_TLHudScaleStep");
static_assert(sizeof(TLBuilderCommands_TLHudScaleStep) == 0x000004, "Wrong size on TLBuilderCommands_TLHudScaleStep");
static_assert(offsetof(TLBuilderCommands_TLHudScaleStep, StepValue) == 0x000000, "Member 'TLBuilderCommands_TLHudScaleStep::StepValue' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLIgnoreInput
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLIgnoreInput final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLIgnoreInput) == 0x000004, "Wrong alignment on TLBuilderCommands_TLIgnoreInput");
static_assert(sizeof(TLBuilderCommands_TLIgnoreInput) == 0x000004, "Wrong size on TLBuilderCommands_TLIgnoreInput");
static_assert(offsetof(TLBuilderCommands_TLIgnoreInput, Duration) == 0x000000, "Member 'TLBuilderCommands_TLIgnoreInput::Duration' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLInputStack
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLInputStack final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLInputStack) == 0x000001, "Wrong alignment on TLBuilderCommands_TLInputStack");
static_assert(sizeof(TLBuilderCommands_TLInputStack) == 0x000001, "Wrong size on TLBuilderCommands_TLInputStack");
static_assert(offsetof(TLBuilderCommands_TLInputStack, InShow) == 0x000000, "Member 'TLBuilderCommands_TLInputStack::InShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLInputStackAnyKey
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLInputStackAnyKey final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLInputStackAnyKey) == 0x000001, "Wrong alignment on TLBuilderCommands_TLInputStackAnyKey");
static_assert(sizeof(TLBuilderCommands_TLInputStackAnyKey) == 0x000001, "Wrong size on TLBuilderCommands_TLInputStackAnyKey");
static_assert(offsetof(TLBuilderCommands_TLInputStackAnyKey, InShow) == 0x000000, "Member 'TLBuilderCommands_TLInputStackAnyKey::InShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLInputStackAnyKeyAllEvent
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLInputStackAnyKeyAllEvent final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLInputStackAnyKeyAllEvent) == 0x000001, "Wrong alignment on TLBuilderCommands_TLInputStackAnyKeyAllEvent");
static_assert(sizeof(TLBuilderCommands_TLInputStackAnyKeyAllEvent) == 0x000001, "Wrong size on TLBuilderCommands_TLInputStackAnyKeyAllEvent");
static_assert(offsetof(TLBuilderCommands_TLInputStackAnyKeyAllEvent, InShow) == 0x000000, "Member 'TLBuilderCommands_TLInputStackAnyKeyAllEvent::InShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLInputStackAnyKeyExcepBase
// 0x0002 (0x0002 - 0x0000)
struct TLBuilderCommands_TLInputStackAnyKeyExcepBase final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllEvent;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLInputStackAnyKeyExcepBase) == 0x000001, "Wrong alignment on TLBuilderCommands_TLInputStackAnyKeyExcepBase");
static_assert(sizeof(TLBuilderCommands_TLInputStackAnyKeyExcepBase) == 0x000002, "Wrong size on TLBuilderCommands_TLInputStackAnyKeyExcepBase");
static_assert(offsetof(TLBuilderCommands_TLInputStackAnyKeyExcepBase, InShow) == 0x000000, "Member 'TLBuilderCommands_TLInputStackAnyKeyExcepBase::InShow' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLInputStackAnyKeyExcepBase, bAllEvent) == 0x000001, "Member 'TLBuilderCommands_TLInputStackAnyKeyExcepBase::bAllEvent' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLInputStackKey
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLInputStackKey final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KeyName;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLInputStackKey) == 0x000004, "Wrong alignment on TLBuilderCommands_TLInputStackKey");
static_assert(sizeof(TLBuilderCommands_TLInputStackKey) == 0x00000C, "Wrong size on TLBuilderCommands_TLInputStackKey");
static_assert(offsetof(TLBuilderCommands_TLInputStackKey, InShow) == 0x000000, "Member 'TLBuilderCommands_TLInputStackKey::InShow' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLInputStackKey, KeyName) == 0x000004, "Member 'TLBuilderCommands_TLInputStackKey::KeyName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLInputStackKeyAllEvent
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLInputStackKeyAllEvent final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KeyName;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLInputStackKeyAllEvent) == 0x000004, "Wrong alignment on TLBuilderCommands_TLInputStackKeyAllEvent");
static_assert(sizeof(TLBuilderCommands_TLInputStackKeyAllEvent) == 0x00000C, "Wrong size on TLBuilderCommands_TLInputStackKeyAllEvent");
static_assert(offsetof(TLBuilderCommands_TLInputStackKeyAllEvent, InShow) == 0x000000, "Member 'TLBuilderCommands_TLInputStackKeyAllEvent::InShow' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLInputStackKeyAllEvent, KeyName) == 0x000004, "Member 'TLBuilderCommands_TLInputStackKeyAllEvent::KeyName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLInspectionEventScene
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLInspectionEventScene final
{
public:
	class FString                                 ObjectiveHexGuids;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLInspectionEventScene) == 0x000008, "Wrong alignment on TLBuilderCommands_TLInspectionEventScene");
static_assert(sizeof(TLBuilderCommands_TLInspectionEventScene) == 0x000010, "Wrong size on TLBuilderCommands_TLInspectionEventScene");
static_assert(offsetof(TLBuilderCommands_TLInspectionEventScene, ObjectiveHexGuids) == 0x000000, "Member 'TLBuilderCommands_TLInspectionEventScene::ObjectiveHexGuids' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLInteractionCamera
// 0x0028 (0x0028 - 0x0000)
struct TLBuilderCommands_TLInteractionCamera final
{
public:
	class FName                                   Preset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ScreenMessageTitle;                                // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLInteractionCamera) == 0x000008, "Wrong alignment on TLBuilderCommands_TLInteractionCamera");
static_assert(sizeof(TLBuilderCommands_TLInteractionCamera) == 0x000028, "Wrong size on TLBuilderCommands_TLInteractionCamera");
static_assert(offsetof(TLBuilderCommands_TLInteractionCamera, Preset) == 0x000000, "Member 'TLBuilderCommands_TLInteractionCamera::Preset' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLInteractionCamera, Duration) == 0x000008, "Member 'TLBuilderCommands_TLInteractionCamera::Duration' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLInteractionCamera, ScreenMessageTitle) == 0x000010, "Member 'TLBuilderCommands_TLInteractionCamera::ScreenMessageTitle' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLInteractionCameraWithScreenMessage
// 0x0030 (0x0030 - 0x0000)
struct TLBuilderCommands_TLInteractionCameraWithScreenMessage final
{
public:
	class FName                                   Preset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ScreenMessageTitle;                                // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         InDelayTime;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLInteractionCameraWithScreenMessage) == 0x000008, "Wrong alignment on TLBuilderCommands_TLInteractionCameraWithScreenMessage");
static_assert(sizeof(TLBuilderCommands_TLInteractionCameraWithScreenMessage) == 0x000030, "Wrong size on TLBuilderCommands_TLInteractionCameraWithScreenMessage");
static_assert(offsetof(TLBuilderCommands_TLInteractionCameraWithScreenMessage, Preset) == 0x000000, "Member 'TLBuilderCommands_TLInteractionCameraWithScreenMessage::Preset' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLInteractionCameraWithScreenMessage, Duration) == 0x000008, "Member 'TLBuilderCommands_TLInteractionCameraWithScreenMessage::Duration' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLInteractionCameraWithScreenMessage, ScreenMessageTitle) == 0x000010, "Member 'TLBuilderCommands_TLInteractionCameraWithScreenMessage::ScreenMessageTitle' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLInteractionCameraWithScreenMessage, InDelayTime) == 0x000028, "Member 'TLBuilderCommands_TLInteractionCameraWithScreenMessage::InDelayTime' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLInvisibleObject
// 0x0007 (0x0007 - 0x0000)
struct TLBuilderCommands_TLInvisibleObject final
{
public:
	bool                                          bMyPc;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOtherPc;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNpc;                                              // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFo;                                               // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bItem;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCarrier;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExtraObject;                                      // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLInvisibleObject) == 0x000001, "Wrong alignment on TLBuilderCommands_TLInvisibleObject");
static_assert(sizeof(TLBuilderCommands_TLInvisibleObject) == 0x000007, "Wrong size on TLBuilderCommands_TLInvisibleObject");
static_assert(offsetof(TLBuilderCommands_TLInvisibleObject, bMyPc) == 0x000000, "Member 'TLBuilderCommands_TLInvisibleObject::bMyPc' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLInvisibleObject, bOtherPc) == 0x000001, "Member 'TLBuilderCommands_TLInvisibleObject::bOtherPc' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLInvisibleObject, bNpc) == 0x000002, "Member 'TLBuilderCommands_TLInvisibleObject::bNpc' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLInvisibleObject, bFo) == 0x000003, "Member 'TLBuilderCommands_TLInvisibleObject::bFo' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLInvisibleObject, bItem) == 0x000004, "Member 'TLBuilderCommands_TLInvisibleObject::bItem' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLInvisibleObject, bCarrier) == 0x000005, "Member 'TLBuilderCommands_TLInvisibleObject::bCarrier' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLInvisibleObject, bExtraObject) == 0x000006, "Member 'TLBuilderCommands_TLInvisibleObject::bExtraObject' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLIsOpenDungeonWaypoint
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLIsOpenDungeonWaypoint final
{
public:
	int32                                         InUID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLIsOpenDungeonWaypoint) == 0x000004, "Wrong alignment on TLBuilderCommands_TLIsOpenDungeonWaypoint");
static_assert(sizeof(TLBuilderCommands_TLIsOpenDungeonWaypoint) == 0x000004, "Wrong size on TLBuilderCommands_TLIsOpenDungeonWaypoint");
static_assert(offsetof(TLBuilderCommands_TLIsOpenDungeonWaypoint, InUID) == 0x000000, "Member 'TLBuilderCommands_TLIsOpenDungeonWaypoint::InUID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLItemDropAction
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLItemDropAction final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSec;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLItemDropAction) == 0x000004, "Wrong alignment on TLBuilderCommands_TLItemDropAction");
static_assert(sizeof(TLBuilderCommands_TLItemDropAction) == 0x000008, "Wrong size on TLBuilderCommands_TLItemDropAction");
static_assert(offsetof(TLBuilderCommands_TLItemDropAction, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLItemDropAction::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLItemDropAction, DurationSec) == 0x000004, "Member 'TLBuilderCommands_TLItemDropAction::DurationSec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLItemEquip
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLItemEquip final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemClassId;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLItemEquip) == 0x000004, "Wrong alignment on TLBuilderCommands_TLItemEquip");
static_assert(sizeof(TLBuilderCommands_TLItemEquip) == 0x000008, "Wrong size on TLBuilderCommands_TLItemEquip");
static_assert(offsetof(TLBuilderCommands_TLItemEquip, SlotIndex) == 0x000000, "Member 'TLBuilderCommands_TLItemEquip::SlotIndex' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLItemEquip, ItemClassId) == 0x000004, "Member 'TLBuilderCommands_TLItemEquip::ItemClassId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLItemOwnerPcId
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLItemOwnerPcId final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OwnerPcId;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLItemOwnerPcId) == 0x000004, "Wrong alignment on TLBuilderCommands_TLItemOwnerPcId");
static_assert(sizeof(TLBuilderCommands_TLItemOwnerPcId) == 0x000008, "Wrong size on TLBuilderCommands_TLItemOwnerPcId");
static_assert(offsetof(TLBuilderCommands_TLItemOwnerPcId, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLItemOwnerPcId::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLItemOwnerPcId, OwnerPcId) == 0x000004, "Member 'TLBuilderCommands_TLItemOwnerPcId::OwnerPcId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLItemSetAttackSpeedBaseline
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLItemSetAttackSpeedBaseline final
{
public:
	float                                         AttackSpeed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLItemSetAttackSpeedBaseline) == 0x000004, "Wrong alignment on TLBuilderCommands_TLItemSetAttackSpeedBaseline");
static_assert(sizeof(TLBuilderCommands_TLItemSetAttackSpeedBaseline) == 0x000004, "Wrong size on TLBuilderCommands_TLItemSetAttackSpeedBaseline");
static_assert(offsetof(TLBuilderCommands_TLItemSetAttackSpeedBaseline, AttackSpeed) == 0x000000, "Member 'TLBuilderCommands_TLItemSetAttackSpeedBaseline::AttackSpeed' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLItemUnequip
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLItemUnequip final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLItemUnequip) == 0x000004, "Wrong alignment on TLBuilderCommands_TLItemUnequip");
static_assert(sizeof(TLBuilderCommands_TLItemUnequip) == 0x000004, "Wrong size on TLBuilderCommands_TLItemUnequip");
static_assert(offsetof(TLBuilderCommands_TLItemUnequip, SlotIndex) == 0x000000, "Member 'TLBuilderCommands_TLItemUnequip::SlotIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLLeaveEnterAtOnce
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLLeaveEnterAtOnce final
{
public:
	int32                                         ObjectId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLLeaveEnterAtOnce) == 0x000004, "Wrong alignment on TLBuilderCommands_TLLeaveEnterAtOnce");
static_assert(sizeof(TLBuilderCommands_TLLeaveEnterAtOnce) == 0x000004, "Wrong size on TLBuilderCommands_TLLeaveEnterAtOnce");
static_assert(offsetof(TLBuilderCommands_TLLeaveEnterAtOnce, ObjectId) == 0x000000, "Member 'TLBuilderCommands_TLLeaveEnterAtOnce::ObjectId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLLevel
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLLevel final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLLevel) == 0x000004, "Wrong alignment on TLBuilderCommands_TLLevel");
static_assert(sizeof(TLBuilderCommands_TLLevel) == 0x000004, "Wrong size on TLBuilderCommands_TLLevel");
static_assert(offsetof(TLBuilderCommands_TLLevel, InLevel) == 0x000000, "Member 'TLBuilderCommands_TLLevel::InLevel' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLLobbyCharacterRotateAmount
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLLobbyCharacterRotateAmount final
{
public:
	float                                         InAmount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLLobbyCharacterRotateAmount) == 0x000004, "Wrong alignment on TLBuilderCommands_TLLobbyCharacterRotateAmount");
static_assert(sizeof(TLBuilderCommands_TLLobbyCharacterRotateAmount) == 0x000004, "Wrong size on TLBuilderCommands_TLLobbyCharacterRotateAmount");
static_assert(offsetof(TLBuilderCommands_TLLobbyCharacterRotateAmount, InAmount) == 0x000000, "Member 'TLBuilderCommands_TLLobbyCharacterRotateAmount::InAmount' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLLobbyCharacterRotateSpeed
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLLobbyCharacterRotateSpeed final
{
public:
	float                                         InSpeed;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLLobbyCharacterRotateSpeed) == 0x000004, "Wrong alignment on TLBuilderCommands_TLLobbyCharacterRotateSpeed");
static_assert(sizeof(TLBuilderCommands_TLLobbyCharacterRotateSpeed) == 0x000004, "Wrong size on TLBuilderCommands_TLLobbyCharacterRotateSpeed");
static_assert(offsetof(TLBuilderCommands_TLLobbyCharacterRotateSpeed, InSpeed) == 0x000000, "Member 'TLBuilderCommands_TLLobbyCharacterRotateSpeed::InSpeed' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLLockOnTarget
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLLockOnTarget final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLLockOnTarget) == 0x000001, "Wrong alignment on TLBuilderCommands_TLLockOnTarget");
static_assert(sizeof(TLBuilderCommands_TLLockOnTarget) == 0x000001, "Wrong size on TLBuilderCommands_TLLockOnTarget");
static_assert(offsetof(TLBuilderCommands_TLLockOnTarget, bOn) == 0x000000, "Member 'TLBuilderCommands_TLLockOnTarget::bOn' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLLogFlagSet
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLLogFlagSet final
{
public:
	int32                                         ShowFlagIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLLogFlagSet) == 0x000004, "Wrong alignment on TLBuilderCommands_TLLogFlagSet");
static_assert(sizeof(TLBuilderCommands_TLLogFlagSet) == 0x000004, "Wrong size on TLBuilderCommands_TLLogFlagSet");
static_assert(offsetof(TLBuilderCommands_TLLogFlagSet, ShowFlagIndex) == 0x000000, "Member 'TLBuilderCommands_TLLogFlagSet::ShowFlagIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLLogFlagToggle
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLLogFlagToggle final
{
public:
	int32                                         ShowFlagIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLLogFlagToggle) == 0x000004, "Wrong alignment on TLBuilderCommands_TLLogFlagToggle");
static_assert(sizeof(TLBuilderCommands_TLLogFlagToggle) == 0x000004, "Wrong size on TLBuilderCommands_TLLogFlagToggle");
static_assert(offsetof(TLBuilderCommands_TLLogFlagToggle, ShowFlagIndex) == 0x000000, "Member 'TLBuilderCommands_TLLogFlagToggle::ShowFlagIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLLoginQueueUpdateCapacity
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLLoginQueueUpdateCapacity final
{
public:
	int32                                         MaxCapacity;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BatchCapacity;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealmID;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLLoginQueueUpdateCapacity) == 0x000004, "Wrong alignment on TLBuilderCommands_TLLoginQueueUpdateCapacity");
static_assert(sizeof(TLBuilderCommands_TLLoginQueueUpdateCapacity) == 0x00000C, "Wrong size on TLBuilderCommands_TLLoginQueueUpdateCapacity");
static_assert(offsetof(TLBuilderCommands_TLLoginQueueUpdateCapacity, MaxCapacity) == 0x000000, "Member 'TLBuilderCommands_TLLoginQueueUpdateCapacity::MaxCapacity' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLLoginQueueUpdateCapacity, BatchCapacity) == 0x000004, "Member 'TLBuilderCommands_TLLoginQueueUpdateCapacity::BatchCapacity' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLLoginQueueUpdateCapacity, RealmID) == 0x000008, "Member 'TLBuilderCommands_TLLoginQueueUpdateCapacity::RealmID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLLogTarget
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLLogTarget final
{
public:
	int32                                         TargetId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLLogTarget) == 0x000004, "Wrong alignment on TLBuilderCommands_TLLogTarget");
static_assert(sizeof(TLBuilderCommands_TLLogTarget) == 0x000004, "Wrong size on TLBuilderCommands_TLLogTarget");
static_assert(offsetof(TLBuilderCommands_TLLogTarget, TargetId) == 0x000000, "Member 'TLBuilderCommands_TLLogTarget::TargetId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLLookAtTargetCameraZOffset
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLLookAtTargetCameraZOffset final
{
public:
	float                                         ZOffset;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLLookAtTargetCameraZOffset) == 0x000004, "Wrong alignment on TLBuilderCommands_TLLookAtTargetCameraZOffset");
static_assert(sizeof(TLBuilderCommands_TLLookAtTargetCameraZOffset) == 0x000004, "Wrong size on TLBuilderCommands_TLLookAtTargetCameraZOffset");
static_assert(offsetof(TLBuilderCommands_TLLookAtTargetCameraZOffset, ZOffset) == 0x000000, "Member 'TLBuilderCommands_TLLookAtTargetCameraZOffset::ZOffset' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMacro
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLMacro final
{
public:
	class FName                                   MacroId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMacro) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMacro");
static_assert(sizeof(TLBuilderCommands_TLMacro) == 0x000008, "Wrong size on TLBuilderCommands_TLMacro");
static_assert(offsetof(TLBuilderCommands_TLMacro, MacroId) == 0x000000, "Member 'TLBuilderCommands_TLMacro::MacroId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMacroLoop
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLMacroLoop final
{
public:
	class FName                                   MacroId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepDelay;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastStepDelay;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMacroLoop) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMacroLoop");
static_assert(sizeof(TLBuilderCommands_TLMacroLoop) == 0x000010, "Wrong size on TLBuilderCommands_TLMacroLoop");
static_assert(offsetof(TLBuilderCommands_TLMacroLoop, MacroId) == 0x000000, "Member 'TLBuilderCommands_TLMacroLoop::MacroId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLMacroLoop, StepDelay) == 0x000008, "Member 'TLBuilderCommands_TLMacroLoop::StepDelay' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLMacroLoop, LastStepDelay) == 0x00000C, "Member 'TLBuilderCommands_TLMacroLoop::LastStepDelay' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMagicDollDialogEvent
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLMagicDollDialogEvent final
{
public:
	class FName                                   InDialogEvent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMagicDollDialogEvent) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMagicDollDialogEvent");
static_assert(sizeof(TLBuilderCommands_TLMagicDollDialogEvent) == 0x000008, "Wrong size on TLBuilderCommands_TLMagicDollDialogEvent");
static_assert(offsetof(TLBuilderCommands_TLMagicDollDialogEvent, InDialogEvent) == 0x000000, "Member 'TLBuilderCommands_TLMagicDollDialogEvent::InDialogEvent' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMapGraphPathCitizen1
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLMapGraphPathCitizen1 final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMapGraphPathCitizen1) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMapGraphPathCitizen1");
static_assert(sizeof(TLBuilderCommands_TLMapGraphPathCitizen1) == 0x00000C, "Wrong size on TLBuilderCommands_TLMapGraphPathCitizen1");
static_assert(offsetof(TLBuilderCommands_TLMapGraphPathCitizen1, X) == 0x000000, "Member 'TLBuilderCommands_TLMapGraphPathCitizen1::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLMapGraphPathCitizen1, Y) == 0x000004, "Member 'TLBuilderCommands_TLMapGraphPathCitizen1::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLMapGraphPathCitizen1, Z) == 0x000008, "Member 'TLBuilderCommands_TLMapGraphPathCitizen1::Z' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMapGraphPathMonster1
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLMapGraphPathMonster1 final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMapGraphPathMonster1) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMapGraphPathMonster1");
static_assert(sizeof(TLBuilderCommands_TLMapGraphPathMonster1) == 0x00000C, "Wrong size on TLBuilderCommands_TLMapGraphPathMonster1");
static_assert(offsetof(TLBuilderCommands_TLMapGraphPathMonster1, X) == 0x000000, "Member 'TLBuilderCommands_TLMapGraphPathMonster1::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLMapGraphPathMonster1, Y) == 0x000004, "Member 'TLBuilderCommands_TLMapGraphPathMonster1::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLMapGraphPathMonster1, Z) == 0x000008, "Member 'TLBuilderCommands_TLMapGraphPathMonster1::Z' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMapNpcInfo
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLMapNpcInfo final
{
public:
	class FName                                   InNpcRaceKey;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMapNpcInfo) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMapNpcInfo");
static_assert(sizeof(TLBuilderCommands_TLMapNpcInfo) == 0x000008, "Wrong size on TLBuilderCommands_TLMapNpcInfo");
static_assert(offsetof(TLBuilderCommands_TLMapNpcInfo, InNpcRaceKey) == 0x000000, "Member 'TLBuilderCommands_TLMapNpcInfo::InNpcRaceKey' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMapScaleMax
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLMapScaleMax final
{
public:
	float                                         InScale;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMapScaleMax) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMapScaleMax");
static_assert(sizeof(TLBuilderCommands_TLMapScaleMax) == 0x000004, "Wrong size on TLBuilderCommands_TLMapScaleMax");
static_assert(offsetof(TLBuilderCommands_TLMapScaleMax, InScale) == 0x000000, "Member 'TLBuilderCommands_TLMapScaleMax::InScale' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMapScaleMin
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLMapScaleMin final
{
public:
	float                                         InScale;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMapScaleMin) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMapScaleMin");
static_assert(sizeof(TLBuilderCommands_TLMapScaleMin) == 0x000004, "Wrong size on TLBuilderCommands_TLMapScaleMin");
static_assert(offsetof(TLBuilderCommands_TLMapScaleMin, InScale) == 0x000000, "Member 'TLBuilderCommands_TLMapScaleMin::InScale' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMapSceneContiOff
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLMapSceneContiOff final
{
public:
	int32                                         Guid;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMapSceneContiOff) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMapSceneContiOff");
static_assert(sizeof(TLBuilderCommands_TLMapSceneContiOff) == 0x000004, "Wrong size on TLBuilderCommands_TLMapSceneContiOff");
static_assert(offsetof(TLBuilderCommands_TLMapSceneContiOff, Guid) == 0x000000, "Member 'TLBuilderCommands_TLMapSceneContiOff::Guid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMapSceneContiOn
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLMapSceneContiOn final
{
public:
	int32                                         Guid;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InX;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InY;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InZ;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMapSceneContiOn) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMapSceneContiOn");
static_assert(sizeof(TLBuilderCommands_TLMapSceneContiOn) == 0x000010, "Wrong size on TLBuilderCommands_TLMapSceneContiOn");
static_assert(offsetof(TLBuilderCommands_TLMapSceneContiOn, Guid) == 0x000000, "Member 'TLBuilderCommands_TLMapSceneContiOn::Guid' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLMapSceneContiOn, InX) == 0x000004, "Member 'TLBuilderCommands_TLMapSceneContiOn::InX' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLMapSceneContiOn, InY) == 0x000008, "Member 'TLBuilderCommands_TLMapSceneContiOn::InY' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLMapSceneContiOn, InZ) == 0x00000C, "Member 'TLBuilderCommands_TLMapSceneContiOn::InZ' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMasterVolume
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLMasterVolume final
{
public:
	int32                                         InVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMasterVolume) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMasterVolume");
static_assert(sizeof(TLBuilderCommands_TLMasterVolume) == 0x000004, "Wrong size on TLBuilderCommands_TLMasterVolume");
static_assert(offsetof(TLBuilderCommands_TLMasterVolume, InVolume) == 0x000000, "Member 'TLBuilderCommands_TLMasterVolume::InVolume' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMemorialRecordCountChanged
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLMemorialRecordCountChanged final
{
public:
	uint64                                        InGuid;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCount;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLMemorialRecordCountChanged) == 0x000008, "Wrong alignment on TLBuilderCommands_TLMemorialRecordCountChanged");
static_assert(sizeof(TLBuilderCommands_TLMemorialRecordCountChanged) == 0x000010, "Wrong size on TLBuilderCommands_TLMemorialRecordCountChanged");
static_assert(offsetof(TLBuilderCommands_TLMemorialRecordCountChanged, InGuid) == 0x000000, "Member 'TLBuilderCommands_TLMemorialRecordCountChanged::InGuid' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLMemorialRecordCountChanged, InCount) == 0x000008, "Member 'TLBuilderCommands_TLMemorialRecordCountChanged::InCount' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMemoryLeakInt32
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLMemoryLeakInt32 final
{
public:
	int32                                         ArraySize;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMemoryLeakInt32) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMemoryLeakInt32");
static_assert(sizeof(TLBuilderCommands_TLMemoryLeakInt32) == 0x000004, "Wrong size on TLBuilderCommands_TLMemoryLeakInt32");
static_assert(offsetof(TLBuilderCommands_TLMemoryLeakInt32, ArraySize) == 0x000000, "Member 'TLBuilderCommands_TLMemoryLeakInt32::ArraySize' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMemoryLeakMB
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLMemoryLeakMB final
{
public:
	int32                                         NumMB;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMemoryLeakMB) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMemoryLeakMB");
static_assert(sizeof(TLBuilderCommands_TLMemoryLeakMB) == 0x000004, "Wrong size on TLBuilderCommands_TLMemoryLeakMB");
static_assert(offsetof(TLBuilderCommands_TLMemoryLeakMB, NumMB) == 0x000000, "Member 'TLBuilderCommands_TLMemoryLeakMB::NumMB' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMemoryNewMB
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLMemoryNewMB final
{
public:
	int32                                         NumMB;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMemoryNewMB) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMemoryNewMB");
static_assert(sizeof(TLBuilderCommands_TLMemoryNewMB) == 0x000004, "Wrong size on TLBuilderCommands_TLMemoryNewMB");
static_assert(offsetof(TLBuilderCommands_TLMemoryNewMB, NumMB) == 0x000000, "Member 'TLBuilderCommands_TLMemoryNewMB::NumMB' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMessage
// 0x0090 (0x0090 - 0x0000)
struct TLBuilderCommands_TLMessage final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Argument0;                                         // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Argument1;                                         // 0x0030(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Argument2;                                         // 0x0048(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Argument3;                                         // 0x0060(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Argument4;                                         // 0x0078(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMessage) == 0x000008, "Wrong alignment on TLBuilderCommands_TLMessage");
static_assert(sizeof(TLBuilderCommands_TLMessage) == 0x000090, "Wrong size on TLBuilderCommands_TLMessage");
static_assert(offsetof(TLBuilderCommands_TLMessage, Message) == 0x000000, "Member 'TLBuilderCommands_TLMessage::Message' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLMessage, Argument0) == 0x000018, "Member 'TLBuilderCommands_TLMessage::Argument0' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLMessage, Argument1) == 0x000030, "Member 'TLBuilderCommands_TLMessage::Argument1' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLMessage, Argument2) == 0x000048, "Member 'TLBuilderCommands_TLMessage::Argument2' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLMessage, Argument3) == 0x000060, "Member 'TLBuilderCommands_TLMessage::Argument3' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLMessage, Argument4) == 0x000078, "Member 'TLBuilderCommands_TLMessage::Argument4' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMiniMapScaleMax
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLMiniMapScaleMax final
{
public:
	float                                         InScale;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMiniMapScaleMax) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMiniMapScaleMax");
static_assert(sizeof(TLBuilderCommands_TLMiniMapScaleMax) == 0x000004, "Wrong size on TLBuilderCommands_TLMiniMapScaleMax");
static_assert(offsetof(TLBuilderCommands_TLMiniMapScaleMax, InScale) == 0x000000, "Member 'TLBuilderCommands_TLMiniMapScaleMax::InScale' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMiniMapScaleMin
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLMiniMapScaleMin final
{
public:
	float                                         InScale;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMiniMapScaleMin) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMiniMapScaleMin");
static_assert(sizeof(TLBuilderCommands_TLMiniMapScaleMin) == 0x000004, "Wrong size on TLBuilderCommands_TLMiniMapScaleMin");
static_assert(offsetof(TLBuilderCommands_TLMiniMapScaleMin, InScale) == 0x000000, "Member 'TLBuilderCommands_TLMiniMapScaleMin::InScale' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLModelSocketPointName
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLModelSocketPointName final
{
public:
	int32                                         SocketPointIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLModelSocketPointName) == 0x000004, "Wrong alignment on TLBuilderCommands_TLModelSocketPointName");
static_assert(sizeof(TLBuilderCommands_TLModelSocketPointName) == 0x000004, "Wrong size on TLBuilderCommands_TLModelSocketPointName");
static_assert(offsetof(TLBuilderCommands_TLModelSocketPointName, SocketPointIndex) == 0x000000, "Member 'TLBuilderCommands_TLModelSocketPointName::SocketPointIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMouseCaptureMode
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLMouseCaptureMode final
{
public:
	int32                                         InMode;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMouseCaptureMode) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMouseCaptureMode");
static_assert(sizeof(TLBuilderCommands_TLMouseCaptureMode) == 0x000004, "Wrong size on TLBuilderCommands_TLMouseCaptureMode");
static_assert(offsetof(TLBuilderCommands_TLMouseCaptureMode, InMode) == 0x000000, "Member 'TLBuilderCommands_TLMouseCaptureMode::InMode' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMouseDragOn
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLMouseDragOn final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMouseDragOn) == 0x000001, "Wrong alignment on TLBuilderCommands_TLMouseDragOn");
static_assert(sizeof(TLBuilderCommands_TLMouseDragOn) == 0x000001, "Wrong size on TLBuilderCommands_TLMouseDragOn");
static_assert(offsetof(TLBuilderCommands_TLMouseDragOn, bOn) == 0x000000, "Member 'TLBuilderCommands_TLMouseDragOn::bOn' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMouseIgnoreInput
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLMouseIgnoreInput final
{
public:
	bool                                          InIgnore;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMouseIgnoreInput) == 0x000001, "Wrong alignment on TLBuilderCommands_TLMouseIgnoreInput");
static_assert(sizeof(TLBuilderCommands_TLMouseIgnoreInput) == 0x000001, "Wrong size on TLBuilderCommands_TLMouseIgnoreInput");
static_assert(offsetof(TLBuilderCommands_TLMouseIgnoreInput, InIgnore) == 0x000000, "Member 'TLBuilderCommands_TLMouseIgnoreInput::InIgnore' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMouseInputMode
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLMouseInputMode final
{
public:
	bool                                          InOn;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMouseInputMode) == 0x000001, "Wrong alignment on TLBuilderCommands_TLMouseInputMode");
static_assert(sizeof(TLBuilderCommands_TLMouseInputMode) == 0x000001, "Wrong size on TLBuilderCommands_TLMouseInputMode");
static_assert(offsetof(TLBuilderCommands_TLMouseInputMode, InOn) == 0x000000, "Member 'TLBuilderCommands_TLMouseInputMode::InOn' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMouseLockMode
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLMouseLockMode final
{
public:
	int32                                         InMode;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMouseLockMode) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMouseLockMode");
static_assert(sizeof(TLBuilderCommands_TLMouseLockMode) == 0x000004, "Wrong size on TLBuilderCommands_TLMouseLockMode");
static_assert(offsetof(TLBuilderCommands_TLMouseLockMode, InMode) == 0x000000, "Member 'TLBuilderCommands_TLMouseLockMode::InMode' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMouseSetHideCursorDuringCapture
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLMouseSetHideCursorDuringCapture final
{
public:
	bool                                          InHideCursor;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMouseSetHideCursorDuringCapture) == 0x000001, "Wrong alignment on TLBuilderCommands_TLMouseSetHideCursorDuringCapture");
static_assert(sizeof(TLBuilderCommands_TLMouseSetHideCursorDuringCapture) == 0x000001, "Wrong size on TLBuilderCommands_TLMouseSetHideCursorDuringCapture");
static_assert(offsetof(TLBuilderCommands_TLMouseSetHideCursorDuringCapture, InHideCursor) == 0x000000, "Member 'TLBuilderCommands_TLMouseSetHideCursorDuringCapture::InHideCursor' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMouseShowCursor
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLMouseShowCursor final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMouseShowCursor) == 0x000001, "Wrong alignment on TLBuilderCommands_TLMouseShowCursor");
static_assert(sizeof(TLBuilderCommands_TLMouseShowCursor) == 0x000001, "Wrong size on TLBuilderCommands_TLMouseShowCursor");
static_assert(offsetof(TLBuilderCommands_TLMouseShowCursor, InShow) == 0x000000, "Member 'TLBuilderCommands_TLMouseShowCursor::InShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMoveObjectToObject
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLMoveObjectToObject final
{
public:
	int32                                         DurationMs;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DestObjId;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMoveObjectToObject) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMoveObjectToObject");
static_assert(sizeof(TLBuilderCommands_TLMoveObjectToObject) == 0x000008, "Wrong size on TLBuilderCommands_TLMoveObjectToObject");
static_assert(offsetof(TLBuilderCommands_TLMoveObjectToObject, DurationMs) == 0x000000, "Member 'TLBuilderCommands_TLMoveObjectToObject::DurationMs' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLMoveObjectToObject, DestObjId) == 0x000004, "Member 'TLBuilderCommands_TLMoveObjectToObject::DestObjId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMoveSync
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLMoveSync final
{
public:
	bool                                          MoveSyncOn;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMoveSync) == 0x000001, "Wrong alignment on TLBuilderCommands_TLMoveSync");
static_assert(sizeof(TLBuilderCommands_TLMoveSync) == 0x000001, "Wrong size on TLBuilderCommands_TLMoveSync");
static_assert(offsetof(TLBuilderCommands_TLMoveSync, MoveSyncOn) == 0x000000, "Member 'TLBuilderCommands_TLMoveSync::MoveSyncOn' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMoveToObj
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLMoveToObj final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMoveToObj) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMoveToObj");
static_assert(sizeof(TLBuilderCommands_TLMoveToObj) == 0x000004, "Wrong size on TLBuilderCommands_TLMoveToObj");
static_assert(offsetof(TLBuilderCommands_TLMoveToObj, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLMoveToObj::ObjId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMoveToTarget
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLMoveToTarget final
{
public:
	int32                                         DurationMs;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMoveToTarget) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMoveToTarget");
static_assert(sizeof(TLBuilderCommands_TLMoveToTarget) == 0x000004, "Wrong size on TLBuilderCommands_TLMoveToTarget");
static_assert(offsetof(TLBuilderCommands_TLMoveToTarget, DurationMs) == 0x000000, "Member 'TLBuilderCommands_TLMoveToTarget::DurationMs' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMoviePlayerView
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLMoviePlayerView final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMoviePlayerView) == 0x000001, "Wrong alignment on TLBuilderCommands_TLMoviePlayerView");
static_assert(sizeof(TLBuilderCommands_TLMoviePlayerView) == 0x000001, "Wrong size on TLBuilderCommands_TLMoviePlayerView");
static_assert(offsetof(TLBuilderCommands_TLMoviePlayerView, bDisplay) == 0x000000, "Member 'TLBuilderCommands_TLMoviePlayerView::bDisplay' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMsgBox
// 0x0028 (0x0028 - 0x0000)
struct TLBuilderCommands_TLMsgBox final
{
public:
	int32                                         InTypeIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InString01;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InStyleKey;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMsgBox) == 0x000008, "Wrong alignment on TLBuilderCommands_TLMsgBox");
static_assert(sizeof(TLBuilderCommands_TLMsgBox) == 0x000028, "Wrong size on TLBuilderCommands_TLMsgBox");
static_assert(offsetof(TLBuilderCommands_TLMsgBox, InTypeIndex) == 0x000000, "Member 'TLBuilderCommands_TLMsgBox::InTypeIndex' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLMsgBox, InString01) == 0x000008, "Member 'TLBuilderCommands_TLMsgBox::InString01' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLMsgBox, InStyleKey) == 0x000018, "Member 'TLBuilderCommands_TLMsgBox::InStyleKey' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLMyPcDynamicStatChange
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLMyPcDynamicStatChange final
{
public:
	int32                                         Uid;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Adder;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLMyPcDynamicStatChange) == 0x000004, "Wrong alignment on TLBuilderCommands_TLMyPcDynamicStatChange");
static_assert(sizeof(TLBuilderCommands_TLMyPcDynamicStatChange) == 0x00000C, "Wrong size on TLBuilderCommands_TLMyPcDynamicStatChange");
static_assert(offsetof(TLBuilderCommands_TLMyPcDynamicStatChange, Uid) == 0x000000, "Member 'TLBuilderCommands_TLMyPcDynamicStatChange::Uid' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLMyPcDynamicStatChange, Multiplier) == 0x000004, "Member 'TLBuilderCommands_TLMyPcDynamicStatChange::Multiplier' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLMyPcDynamicStatChange, Adder) == 0x000008, "Member 'TLBuilderCommands_TLMyPcDynamicStatChange::Adder' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLNavMeshUsageMode
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLNavMeshUsageMode final
{
public:
	ENavMeshUsageMode                             InMode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLNavMeshUsageMode) == 0x000001, "Wrong alignment on TLBuilderCommands_TLNavMeshUsageMode");
static_assert(sizeof(TLBuilderCommands_TLNavMeshUsageMode) == 0x000001, "Wrong size on TLBuilderCommands_TLNavMeshUsageMode");
static_assert(offsetof(TLBuilderCommands_TLNavMeshUsageMode, InMode) == 0x000000, "Member 'TLBuilderCommands_TLNavMeshUsageMode::InMode' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLNextConquestCountDown
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLNextConquestCountDown final
{
public:
	int32                                         InType;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLNextConquestCountDown) == 0x000004, "Wrong alignment on TLBuilderCommands_TLNextConquestCountDown");
static_assert(sizeof(TLBuilderCommands_TLNextConquestCountDown) == 0x000004, "Wrong size on TLBuilderCommands_TLNextConquestCountDown");
static_assert(offsetof(TLBuilderCommands_TLNextConquestCountDown, InType) == 0x000000, "Member 'TLBuilderCommands_TLNextConquestCountDown::InType' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLNpcUseSkill
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLNpcUseSkill final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseInterval;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLNpcUseSkill) == 0x000004, "Wrong alignment on TLBuilderCommands_TLNpcUseSkill");
static_assert(sizeof(TLBuilderCommands_TLNpcUseSkill) == 0x000008, "Wrong size on TLBuilderCommands_TLNpcUseSkill");
static_assert(offsetof(TLBuilderCommands_TLNpcUseSkill, SkillId) == 0x000000, "Member 'TLBuilderCommands_TLNpcUseSkill::SkillId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLNpcUseSkill, UseInterval) == 0x000004, "Member 'TLBuilderCommands_TLNpcUseSkill::UseInterval' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLNpcUseSkillAll
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLNpcUseSkillAll final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseInterval;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLNpcUseSkillAll) == 0x000004, "Wrong alignment on TLBuilderCommands_TLNpcUseSkillAll");
static_assert(sizeof(TLBuilderCommands_TLNpcUseSkillAll) == 0x000008, "Wrong size on TLBuilderCommands_TLNpcUseSkillAll");
static_assert(offsetof(TLBuilderCommands_TLNpcUseSkillAll, SkillId) == 0x000000, "Member 'TLBuilderCommands_TLNpcUseSkillAll::SkillId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLNpcUseSkillAll, UseInterval) == 0x000004, "Member 'TLBuilderCommands_TLNpcUseSkillAll::UseInterval' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLNpcUseSkillByName
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLNpcUseSkillByName final
{
public:
	class FName                                   InSkillName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseInterval;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLNpcUseSkillByName) == 0x000004, "Wrong alignment on TLBuilderCommands_TLNpcUseSkillByName");
static_assert(sizeof(TLBuilderCommands_TLNpcUseSkillByName) == 0x00000C, "Wrong size on TLBuilderCommands_TLNpcUseSkillByName");
static_assert(offsetof(TLBuilderCommands_TLNpcUseSkillByName, InSkillName) == 0x000000, "Member 'TLBuilderCommands_TLNpcUseSkillByName::InSkillName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLNpcUseSkillByName, UseInterval) == 0x000008, "Member 'TLBuilderCommands_TLNpcUseSkillByName::UseInterval' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLNpcUseSkillObj
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLNpcUseSkillObj final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseInterval;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLNpcUseSkillObj) == 0x000004, "Wrong alignment on TLBuilderCommands_TLNpcUseSkillObj");
static_assert(sizeof(TLBuilderCommands_TLNpcUseSkillObj) == 0x00000C, "Wrong size on TLBuilderCommands_TLNpcUseSkillObj");
static_assert(offsetof(TLBuilderCommands_TLNpcUseSkillObj, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLNpcUseSkillObj::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLNpcUseSkillObj, SkillId) == 0x000004, "Member 'TLBuilderCommands_TLNpcUseSkillObj::SkillId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLNpcUseSkillObj, UseInterval) == 0x000008, "Member 'TLBuilderCommands_TLNpcUseSkillObj::UseInterval' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLNpcUseSkillObjByName
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLNpcUseSkillObjByName final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSkillName;                                       // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseInterval;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLNpcUseSkillObjByName) == 0x000004, "Wrong alignment on TLBuilderCommands_TLNpcUseSkillObjByName");
static_assert(sizeof(TLBuilderCommands_TLNpcUseSkillObjByName) == 0x000010, "Wrong size on TLBuilderCommands_TLNpcUseSkillObjByName");
static_assert(offsetof(TLBuilderCommands_TLNpcUseSkillObjByName, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLNpcUseSkillObjByName::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLNpcUseSkillObjByName, InSkillName) == 0x000004, "Member 'TLBuilderCommands_TLNpcUseSkillObjByName::InSkillName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLNpcUseSkillObjByName, UseInterval) == 0x00000C, "Member 'TLBuilderCommands_TLNpcUseSkillObjByName::UseInterval' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLObjSocketShow
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLObjSocketShow final
{
public:
	int32                                         SocketIndexStart;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SocketIndexEnd;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLObjSocketShow) == 0x000004, "Wrong alignment on TLBuilderCommands_TLObjSocketShow");
static_assert(sizeof(TLBuilderCommands_TLObjSocketShow) == 0x000008, "Wrong size on TLBuilderCommands_TLObjSocketShow");
static_assert(offsetof(TLBuilderCommands_TLObjSocketShow, SocketIndexStart) == 0x000000, "Member 'TLBuilderCommands_TLObjSocketShow::SocketIndexStart' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLObjSocketShow, SocketIndexEnd) == 0x000004, "Member 'TLBuilderCommands_TLObjSocketShow::SocketIndexEnd' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLOpacityStateAdd
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLOpacityStateAdd final
{
public:
	int32                                         OpacityKey;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetOpacity;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLOpacityStateAdd) == 0x000004, "Wrong alignment on TLBuilderCommands_TLOpacityStateAdd");
static_assert(sizeof(TLBuilderCommands_TLOpacityStateAdd) == 0x000008, "Wrong size on TLBuilderCommands_TLOpacityStateAdd");
static_assert(offsetof(TLBuilderCommands_TLOpacityStateAdd, OpacityKey) == 0x000000, "Member 'TLBuilderCommands_TLOpacityStateAdd::OpacityKey' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLOpacityStateAdd, TargetOpacity) == 0x000004, "Member 'TLBuilderCommands_TLOpacityStateAdd::TargetOpacity' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLOpacityStateObjRemove
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLOpacityStateObjRemove final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpacityKey;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLOpacityStateObjRemove) == 0x000004, "Wrong alignment on TLBuilderCommands_TLOpacityStateObjRemove");
static_assert(sizeof(TLBuilderCommands_TLOpacityStateObjRemove) == 0x000008, "Wrong size on TLBuilderCommands_TLOpacityStateObjRemove");
static_assert(offsetof(TLBuilderCommands_TLOpacityStateObjRemove, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLOpacityStateObjRemove::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLOpacityStateObjRemove, OpacityKey) == 0x000004, "Member 'TLBuilderCommands_TLOpacityStateObjRemove::OpacityKey' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLOpacityStateRemove
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLOpacityStateRemove final
{
public:
	int32                                         OpacityKey;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLOpacityStateRemove) == 0x000004, "Wrong alignment on TLBuilderCommands_TLOpacityStateRemove");
static_assert(sizeof(TLBuilderCommands_TLOpacityStateRemove) == 0x000004, "Wrong size on TLBuilderCommands_TLOpacityStateRemove");
static_assert(offsetof(TLBuilderCommands_TLOpacityStateRemove, OpacityKey) == 0x000000, "Member 'TLBuilderCommands_TLOpacityStateRemove::OpacityKey' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLOpenEventBoard
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLOpenEventBoard final
{
public:
	class FName                                   InRowName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLOpenEventBoard) == 0x000004, "Wrong alignment on TLBuilderCommands_TLOpenEventBoard");
static_assert(sizeof(TLBuilderCommands_TLOpenEventBoard) == 0x000008, "Wrong size on TLBuilderCommands_TLOpenEventBoard");
static_assert(offsetof(TLBuilderCommands_TLOpenEventBoard, InRowName) == 0x000000, "Member 'TLBuilderCommands_TLOpenEventBoard::InRowName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLOpenTerritoryFog
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLOpenTerritoryFog final
{
public:
	int32                                         InUID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLOpenTerritoryFog) == 0x000004, "Wrong alignment on TLBuilderCommands_TLOpenTerritoryFog");
static_assert(sizeof(TLBuilderCommands_TLOpenTerritoryFog) == 0x000004, "Wrong size on TLBuilderCommands_TLOpenTerritoryFog");
static_assert(offsetof(TLBuilderCommands_TLOpenTerritoryFog, InUID) == 0x000000, "Member 'TLBuilderCommands_TLOpenTerritoryFog::InUID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLOverlayMapOpacity
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLOverlayMapOpacity final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLOverlayMapOpacity) == 0x000004, "Wrong alignment on TLBuilderCommands_TLOverlayMapOpacity");
static_assert(sizeof(TLBuilderCommands_TLOverlayMapOpacity) == 0x000004, "Wrong size on TLBuilderCommands_TLOverlayMapOpacity");
static_assert(offsetof(TLBuilderCommands_TLOverlayMapOpacity, InValue) == 0x000000, "Member 'TLBuilderCommands_TLOverlayMapOpacity::InValue' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLOverlaymapRoadAlphaWhite
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLOverlaymapRoadAlphaWhite final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLOverlaymapRoadAlphaWhite) == 0x000004, "Wrong alignment on TLBuilderCommands_TLOverlaymapRoadAlphaWhite");
static_assert(sizeof(TLBuilderCommands_TLOverlaymapRoadAlphaWhite) == 0x000004, "Wrong size on TLBuilderCommands_TLOverlaymapRoadAlphaWhite");
static_assert(offsetof(TLBuilderCommands_TLOverlaymapRoadAlphaWhite, InValue) == 0x000000, "Member 'TLBuilderCommands_TLOverlaymapRoadAlphaWhite::InValue' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLOverlayRoadAdditive
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLOverlayRoadAdditive final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLOverlayRoadAdditive) == 0x000004, "Wrong alignment on TLBuilderCommands_TLOverlayRoadAdditive");
static_assert(sizeof(TLBuilderCommands_TLOverlayRoadAdditive) == 0x000004, "Wrong size on TLBuilderCommands_TLOverlayRoadAdditive");
static_assert(offsetof(TLBuilderCommands_TLOverlayRoadAdditive, InValue) == 0x000000, "Member 'TLBuilderCommands_TLOverlayRoadAdditive::InValue' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLOverlayRoadBrightness
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLOverlayRoadBrightness final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLOverlayRoadBrightness) == 0x000004, "Wrong alignment on TLBuilderCommands_TLOverlayRoadBrightness");
static_assert(sizeof(TLBuilderCommands_TLOverlayRoadBrightness) == 0x000004, "Wrong size on TLBuilderCommands_TLOverlayRoadBrightness");
static_assert(offsetof(TLBuilderCommands_TLOverlayRoadBrightness, InValue) == 0x000000, "Member 'TLBuilderCommands_TLOverlayRoadBrightness::InValue' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPacketLog
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLPacketLog final
{
public:
	int32                                         PacketLogMode;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPacketLog) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPacketLog");
static_assert(sizeof(TLBuilderCommands_TLPacketLog) == 0x000004, "Wrong size on TLBuilderCommands_TLPacketLog");
static_assert(offsetof(TLBuilderCommands_TLPacketLog, PacketLogMode) == 0x000000, "Member 'TLBuilderCommands_TLPacketLog::PacketLogMode' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPacketLogTargetId
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLPacketLogTargetId final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPacketLogTargetId) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPacketLogTargetId");
static_assert(sizeof(TLBuilderCommands_TLPacketLogTargetId) == 0x000004, "Wrong size on TLBuilderCommands_TLPacketLogTargetId");
static_assert(offsetof(TLBuilderCommands_TLPacketLogTargetId, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLPacketLogTargetId::ObjId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPacketLogTargetId2
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLPacketLogTargetId2 final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPacketLogTargetId2) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPacketLogTargetId2");
static_assert(sizeof(TLBuilderCommands_TLPacketLogTargetId2) == 0x000004, "Wrong size on TLBuilderCommands_TLPacketLogTargetId2");
static_assert(offsetof(TLBuilderCommands_TLPacketLogTargetId2, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLPacketLogTargetId2::ObjId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPacketLogTargetIdCheck
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLPacketLogTargetIdCheck final
{
public:
	bool                                          bInCheck;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPacketLogTargetIdCheck) == 0x000001, "Wrong alignment on TLBuilderCommands_TLPacketLogTargetIdCheck");
static_assert(sizeof(TLBuilderCommands_TLPacketLogTargetIdCheck) == 0x000001, "Wrong size on TLBuilderCommands_TLPacketLogTargetIdCheck");
static_assert(offsetof(TLBuilderCommands_TLPacketLogTargetIdCheck, bInCheck) == 0x000000, "Member 'TLBuilderCommands_TLPacketLogTargetIdCheck::bInCheck' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPartyCommanderSelect
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLPartyCommanderSelect final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPartyCommanderSelect) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPartyCommanderSelect");
static_assert(sizeof(TLBuilderCommands_TLPartyCommanderSelect) == 0x000004, "Wrong size on TLBuilderCommands_TLPartyCommanderSelect");
static_assert(offsetof(TLBuilderCommands_TLPartyCommanderSelect, PartyIndex) == 0x000000, "Member 'TLBuilderCommands_TLPartyCommanderSelect::PartyIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPartyInviteByName
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLPartyInviteByName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPartyInviteByName) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPartyInviteByName");
static_assert(sizeof(TLBuilderCommands_TLPartyInviteByName) == 0x000010, "Wrong size on TLBuilderCommands_TLPartyInviteByName");
static_assert(offsetof(TLBuilderCommands_TLPartyInviteByName, Name_0) == 0x000000, "Member 'TLBuilderCommands_TLPartyInviteByName::Name_0' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPartyTestAddMemeber
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLPartyTestAddMemeber final
{
public:
	int64                                         PcId;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPartyTestAddMemeber) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPartyTestAddMemeber");
static_assert(sizeof(TLBuilderCommands_TLPartyTestAddMemeber) == 0x000008, "Wrong size on TLBuilderCommands_TLPartyTestAddMemeber");
static_assert(offsetof(TLBuilderCommands_TLPartyTestAddMemeber, PcId) == 0x000000, "Member 'TLBuilderCommands_TLPartyTestAddMemeber::PcId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPartyTestInvite
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLPartyTestInvite final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLPartyTestInvite) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPartyTestInvite");
static_assert(sizeof(TLBuilderCommands_TLPartyTestInvite) == 0x000018, "Wrong size on TLBuilderCommands_TLPartyTestInvite");
static_assert(offsetof(TLBuilderCommands_TLPartyTestInvite, Name_0) == 0x000000, "Member 'TLBuilderCommands_TLPartyTestInvite::Name_0' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPartyTestInvite, InTime) == 0x000010, "Member 'TLBuilderCommands_TLPartyTestInvite::InTime' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPauseCarrierRouteSequence
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLPauseCarrierRouteSequence final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPauseCarrierRouteSequence) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPauseCarrierRouteSequence");
static_assert(sizeof(TLBuilderCommands_TLPauseCarrierRouteSequence) == 0x000004, "Wrong size on TLBuilderCommands_TLPauseCarrierRouteSequence");
static_assert(offsetof(TLBuilderCommands_TLPauseCarrierRouteSequence, InID) == 0x000000, "Member 'TLBuilderCommands_TLPauseCarrierRouteSequence::InID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPauseCarrierTransformSequence
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLPauseCarrierTransformSequence final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPauseCarrierTransformSequence) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPauseCarrierTransformSequence");
static_assert(sizeof(TLBuilderCommands_TLPauseCarrierTransformSequence) == 0x000004, "Wrong size on TLBuilderCommands_TLPauseCarrierTransformSequence");
static_assert(offsetof(TLBuilderCommands_TLPauseCarrierTransformSequence, InID) == 0x000000, "Member 'TLBuilderCommands_TLPauseCarrierTransformSequence::InID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayActionTree
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLPlayActionTree final
{
public:
	class FString                                 ActionTreePath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlayActionTree) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPlayActionTree");
static_assert(sizeof(TLBuilderCommands_TLPlayActionTree) == 0x000010, "Wrong size on TLBuilderCommands_TLPlayActionTree");
static_assert(offsetof(TLBuilderCommands_TLPlayActionTree, ActionTreePath) == 0x000000, "Member 'TLBuilderCommands_TLPlayActionTree::ActionTreePath' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayActionTreeAll
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLPlayActionTreeAll final
{
public:
	class FString                                 ActionTreePath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayInterval;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeMyPc;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLPlayActionTreeAll) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPlayActionTreeAll");
static_assert(sizeof(TLBuilderCommands_TLPlayActionTreeAll) == 0x000018, "Wrong size on TLBuilderCommands_TLPlayActionTreeAll");
static_assert(offsetof(TLBuilderCommands_TLPlayActionTreeAll, ActionTreePath) == 0x000000, "Member 'TLBuilderCommands_TLPlayActionTreeAll::ActionTreePath' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayActionTreeAll, PlayInterval) == 0x000010, "Member 'TLBuilderCommands_TLPlayActionTreeAll::PlayInterval' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayActionTreeAll, bIncludeMyPc) == 0x000014, "Member 'TLBuilderCommands_TLPlayActionTreeAll::bIncludeMyPc' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayActionTreeMagicDoll
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLPlayActionTreeMagicDoll final
{
public:
	class FString                                 ActionTreePath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLPlayActionTreeMagicDoll) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPlayActionTreeMagicDoll");
static_assert(sizeof(TLBuilderCommands_TLPlayActionTreeMagicDoll) == 0x000018, "Wrong size on TLBuilderCommands_TLPlayActionTreeMagicDoll");
static_assert(offsetof(TLBuilderCommands_TLPlayActionTreeMagicDoll, ActionTreePath) == 0x000000, "Member 'TLBuilderCommands_TLPlayActionTreeMagicDoll::ActionTreePath' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayActionTreeMagicDoll, Duration) == 0x000010, "Member 'TLBuilderCommands_TLPlayActionTreeMagicDoll::Duration' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayActionTreeObj
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLPlayActionTreeObj final
{
public:
	class FString                                 ActionTreePath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjId;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSec;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlayActionTreeObj) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPlayActionTreeObj");
static_assert(sizeof(TLBuilderCommands_TLPlayActionTreeObj) == 0x000018, "Wrong size on TLBuilderCommands_TLPlayActionTreeObj");
static_assert(offsetof(TLBuilderCommands_TLPlayActionTreeObj, ActionTreePath) == 0x000000, "Member 'TLBuilderCommands_TLPlayActionTreeObj::ActionTreePath' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayActionTreeObj, ObjId) == 0x000010, "Member 'TLBuilderCommands_TLPlayActionTreeObj::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayActionTreeObj, DurationSec) == 0x000014, "Member 'TLBuilderCommands_TLPlayActionTreeObj::DurationSec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayActionTreeObjWithCondition
// 0x0020 (0x0020 - 0x0000)
struct TLBuilderCommands_TLPlayActionTreeObjWithCondition final
{
public:
	class FString                                 ActionTreePath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjId;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSec;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InConditional;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlayActionTreeObjWithCondition) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPlayActionTreeObjWithCondition");
static_assert(sizeof(TLBuilderCommands_TLPlayActionTreeObjWithCondition) == 0x000020, "Wrong size on TLBuilderCommands_TLPlayActionTreeObjWithCondition");
static_assert(offsetof(TLBuilderCommands_TLPlayActionTreeObjWithCondition, ActionTreePath) == 0x000000, "Member 'TLBuilderCommands_TLPlayActionTreeObjWithCondition::ActionTreePath' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayActionTreeObjWithCondition, ObjId) == 0x000010, "Member 'TLBuilderCommands_TLPlayActionTreeObjWithCondition::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayActionTreeObjWithCondition, DurationSec) == 0x000014, "Member 'TLBuilderCommands_TLPlayActionTreeObjWithCondition::DurationSec' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayActionTreeObjWithCondition, InConditional) == 0x000018, "Member 'TLBuilderCommands_TLPlayActionTreeObjWithCondition::InConditional' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayActionTreeToTaggedObj
// 0x0028 (0x0028 - 0x0000)
struct TLBuilderCommands_TLPlayActionTreeToTaggedObj final
{
public:
	class FString                                 ActionTreePath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CasterObjId;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CasterObjTag;                                      // 0x0014(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetObjId;                                       // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetObjTag;                                      // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlayActionTreeToTaggedObj) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPlayActionTreeToTaggedObj");
static_assert(sizeof(TLBuilderCommands_TLPlayActionTreeToTaggedObj) == 0x000028, "Wrong size on TLBuilderCommands_TLPlayActionTreeToTaggedObj");
static_assert(offsetof(TLBuilderCommands_TLPlayActionTreeToTaggedObj, ActionTreePath) == 0x000000, "Member 'TLBuilderCommands_TLPlayActionTreeToTaggedObj::ActionTreePath' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayActionTreeToTaggedObj, CasterObjId) == 0x000010, "Member 'TLBuilderCommands_TLPlayActionTreeToTaggedObj::CasterObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayActionTreeToTaggedObj, CasterObjTag) == 0x000014, "Member 'TLBuilderCommands_TLPlayActionTreeToTaggedObj::CasterObjTag' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayActionTreeToTaggedObj, TargetObjId) == 0x00001C, "Member 'TLBuilderCommands_TLPlayActionTreeToTaggedObj::TargetObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayActionTreeToTaggedObj, TargetObjTag) == 0x000020, "Member 'TLBuilderCommands_TLPlayActionTreeToTaggedObj::TargetObjTag' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayActionTreeWithCondition
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLPlayActionTreeWithCondition final
{
public:
	class FString                                 ActionTreePath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Condition;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlayActionTreeWithCondition) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPlayActionTreeWithCondition");
static_assert(sizeof(TLBuilderCommands_TLPlayActionTreeWithCondition) == 0x000018, "Wrong size on TLBuilderCommands_TLPlayActionTreeWithCondition");
static_assert(offsetof(TLBuilderCommands_TLPlayActionTreeWithCondition, ActionTreePath) == 0x000000, "Member 'TLBuilderCommands_TLPlayActionTreeWithCondition::ActionTreePath' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayActionTreeWithCondition, Condition) == 0x000010, "Member 'TLBuilderCommands_TLPlayActionTreeWithCondition::Condition' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayCinematicDialog
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLPlayCinematicDialog final
{
public:
	class FName                                   InTableId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlayCinematicDialog) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPlayCinematicDialog");
static_assert(sizeof(TLBuilderCommands_TLPlayCinematicDialog) == 0x000008, "Wrong size on TLBuilderCommands_TLPlayCinematicDialog");
static_assert(offsetof(TLBuilderCommands_TLPlayCinematicDialog, InTableId) == 0x000000, "Member 'TLBuilderCommands_TLPlayCinematicDialog::InTableId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayCueSheet
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLPlayCueSheet final
{
public:
	class FName                                   InCueSheetKey;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDurationSec;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlayCueSheet) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPlayCueSheet");
static_assert(sizeof(TLBuilderCommands_TLPlayCueSheet) == 0x00000C, "Wrong size on TLBuilderCommands_TLPlayCueSheet");
static_assert(offsetof(TLBuilderCommands_TLPlayCueSheet, InCueSheetKey) == 0x000000, "Member 'TLBuilderCommands_TLPlayCueSheet::InCueSheetKey' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayCueSheet, InDurationSec) == 0x000008, "Member 'TLBuilderCommands_TLPlayCueSheet::InDurationSec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayCutscene
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLPlayCutscene final
{
public:
	class FName                                   InCutSceneID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlayCutscene) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPlayCutscene");
static_assert(sizeof(TLBuilderCommands_TLPlayCutscene) == 0x000008, "Wrong size on TLBuilderCommands_TLPlayCutscene");
static_assert(offsetof(TLBuilderCommands_TLPlayCutscene, InCutSceneID) == 0x000000, "Member 'TLBuilderCommands_TLPlayCutscene::InCutSceneID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayCutsceneFromServer
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLPlayCutsceneFromServer final
{
public:
	class FName                                   CutSceneID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExclusiveTag;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlayCutsceneFromServer) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPlayCutsceneFromServer");
static_assert(sizeof(TLBuilderCommands_TLPlayCutsceneFromServer) == 0x000010, "Wrong size on TLBuilderCommands_TLPlayCutsceneFromServer");
static_assert(offsetof(TLBuilderCommands_TLPlayCutsceneFromServer, CutSceneID) == 0x000000, "Member 'TLBuilderCommands_TLPlayCutsceneFromServer::CutSceneID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayCutsceneFromServer, ExclusiveTag) == 0x000008, "Member 'TLBuilderCommands_TLPlayCutsceneFromServer::ExclusiveTag' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayEffectCallArea
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLPlayEffectCallArea final
{
public:
	int32                                         EffectPropId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlayEffectCallArea) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPlayEffectCallArea");
static_assert(sizeof(TLBuilderCommands_TLPlayEffectCallArea) == 0x000004, "Wrong size on TLBuilderCommands_TLPlayEffectCallArea");
static_assert(offsetof(TLBuilderCommands_TLPlayEffectCallArea, EffectPropId) == 0x000000, "Member 'TLBuilderCommands_TLPlayEffectCallArea::EffectPropId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayLoopMotion
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLPlayLoopMotion final
{
public:
	int32                                         NpcObjId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MotionUid;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MotionTypeInt;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetObjId;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlayLoopMotion) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPlayLoopMotion");
static_assert(sizeof(TLBuilderCommands_TLPlayLoopMotion) == 0x000010, "Wrong size on TLBuilderCommands_TLPlayLoopMotion");
static_assert(offsetof(TLBuilderCommands_TLPlayLoopMotion, NpcObjId) == 0x000000, "Member 'TLBuilderCommands_TLPlayLoopMotion::NpcObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayLoopMotion, MotionUid) == 0x000004, "Member 'TLBuilderCommands_TLPlayLoopMotion::MotionUid' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayLoopMotion, MotionTypeInt) == 0x000008, "Member 'TLBuilderCommands_TLPlayLoopMotion::MotionTypeInt' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayLoopMotion, TargetObjId) == 0x00000C, "Member 'TLBuilderCommands_TLPlayLoopMotion::TargetObjId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayMovie
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLPlayMovie final
{
public:
	class FName                                   InMovieTableKey;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAllowEngineTick;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLPlayMovie) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPlayMovie");
static_assert(sizeof(TLBuilderCommands_TLPlayMovie) == 0x00000C, "Wrong size on TLBuilderCommands_TLPlayMovie");
static_assert(offsetof(TLBuilderCommands_TLPlayMovie, InMovieTableKey) == 0x000000, "Member 'TLBuilderCommands_TLPlayMovie::InMovieTableKey' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayMovie, bInAllowEngineTick) == 0x000008, "Member 'TLBuilderCommands_TLPlayMovie::bInAllowEngineTick' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayMusic
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLPlayMusic final
{
public:
	struct FSoftObjectPath                        InMusicPath;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlayMusic) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPlayMusic");
static_assert(sizeof(TLBuilderCommands_TLPlayMusic) == 0x000018, "Wrong size on TLBuilderCommands_TLPlayMusic");
static_assert(offsetof(TLBuilderCommands_TLPlayMusic, InMusicPath) == 0x000000, "Member 'TLBuilderCommands_TLPlayMusic::InMusicPath' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayRawVoice
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLPlayRawVoice final
{
public:
	class FName                                   DialogueId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlayRawVoice) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPlayRawVoice");
static_assert(sizeof(TLBuilderCommands_TLPlayRawVoice) == 0x000008, "Wrong size on TLBuilderCommands_TLPlayRawVoice");
static_assert(offsetof(TLBuilderCommands_TLPlayRawVoice, DialogueId) == 0x000000, "Member 'TLBuilderCommands_TLPlayRawVoice::DialogueId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlaySct
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLPlaySct final
{
public:
	class FString                                 SctPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlaySct) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPlaySct");
static_assert(sizeof(TLBuilderCommands_TLPlaySct) == 0x000010, "Wrong size on TLBuilderCommands_TLPlaySct");
static_assert(offsetof(TLBuilderCommands_TLPlaySct, SctPath) == 0x000000, "Member 'TLBuilderCommands_TLPlaySct::SctPath' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlaySctAll
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLPlaySctAll final
{
public:
	class FString                                 SctPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayInterval;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeMyPc;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLPlaySctAll) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPlaySctAll");
static_assert(sizeof(TLBuilderCommands_TLPlaySctAll) == 0x000018, "Wrong size on TLBuilderCommands_TLPlaySctAll");
static_assert(offsetof(TLBuilderCommands_TLPlaySctAll, SctPath) == 0x000000, "Member 'TLBuilderCommands_TLPlaySctAll::SctPath' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySctAll, PlayInterval) == 0x000010, "Member 'TLBuilderCommands_TLPlaySctAll::PlayInterval' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySctAll, bIncludeMyPc) == 0x000014, "Member 'TLBuilderCommands_TLPlaySctAll::bIncludeMyPc' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlaySctMagicDoll
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLPlaySctMagicDoll final
{
public:
	class FString                                 SctPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLPlaySctMagicDoll) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPlaySctMagicDoll");
static_assert(sizeof(TLBuilderCommands_TLPlaySctMagicDoll) == 0x000018, "Wrong size on TLBuilderCommands_TLPlaySctMagicDoll");
static_assert(offsetof(TLBuilderCommands_TLPlaySctMagicDoll, SctPath) == 0x000000, "Member 'TLBuilderCommands_TLPlaySctMagicDoll::SctPath' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySctMagicDoll, Duration) == 0x000010, "Member 'TLBuilderCommands_TLPlaySctMagicDoll::Duration' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlaySctObj
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLPlaySctObj final
{
public:
	class FString                                 SctPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjId;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSec;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlaySctObj) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPlaySctObj");
static_assert(sizeof(TLBuilderCommands_TLPlaySctObj) == 0x000018, "Wrong size on TLBuilderCommands_TLPlaySctObj");
static_assert(offsetof(TLBuilderCommands_TLPlaySctObj, SctPath) == 0x000000, "Member 'TLBuilderCommands_TLPlaySctObj::SctPath' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySctObj, ObjId) == 0x000010, "Member 'TLBuilderCommands_TLPlaySctObj::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySctObj, DurationSec) == 0x000014, "Member 'TLBuilderCommands_TLPlaySctObj::DurationSec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlaySctObjWithCondition
// 0x0020 (0x0020 - 0x0000)
struct TLBuilderCommands_TLPlaySctObjWithCondition final
{
public:
	class FString                                 SctPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjId;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSec;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InConditional;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlaySctObjWithCondition) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPlaySctObjWithCondition");
static_assert(sizeof(TLBuilderCommands_TLPlaySctObjWithCondition) == 0x000020, "Wrong size on TLBuilderCommands_TLPlaySctObjWithCondition");
static_assert(offsetof(TLBuilderCommands_TLPlaySctObjWithCondition, SctPath) == 0x000000, "Member 'TLBuilderCommands_TLPlaySctObjWithCondition::SctPath' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySctObjWithCondition, ObjId) == 0x000010, "Member 'TLBuilderCommands_TLPlaySctObjWithCondition::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySctObjWithCondition, DurationSec) == 0x000014, "Member 'TLBuilderCommands_TLPlaySctObjWithCondition::DurationSec' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySctObjWithCondition, InConditional) == 0x000018, "Member 'TLBuilderCommands_TLPlaySctObjWithCondition::InConditional' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlaySctToTaggedObj
// 0x0028 (0x0028 - 0x0000)
struct TLBuilderCommands_TLPlaySctToTaggedObj final
{
public:
	class FString                                 ActionTreePath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CasterObjId;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CasterObjTag;                                      // 0x0014(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetObjId;                                       // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetObjTag;                                      // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlaySctToTaggedObj) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPlaySctToTaggedObj");
static_assert(sizeof(TLBuilderCommands_TLPlaySctToTaggedObj) == 0x000028, "Wrong size on TLBuilderCommands_TLPlaySctToTaggedObj");
static_assert(offsetof(TLBuilderCommands_TLPlaySctToTaggedObj, ActionTreePath) == 0x000000, "Member 'TLBuilderCommands_TLPlaySctToTaggedObj::ActionTreePath' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySctToTaggedObj, CasterObjId) == 0x000010, "Member 'TLBuilderCommands_TLPlaySctToTaggedObj::CasterObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySctToTaggedObj, CasterObjTag) == 0x000014, "Member 'TLBuilderCommands_TLPlaySctToTaggedObj::CasterObjTag' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySctToTaggedObj, TargetObjId) == 0x00001C, "Member 'TLBuilderCommands_TLPlaySctToTaggedObj::TargetObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySctToTaggedObj, TargetObjTag) == 0x000020, "Member 'TLBuilderCommands_TLPlaySctToTaggedObj::TargetObjTag' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlaySctWithCondition
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLPlaySctWithCondition final
{
public:
	class FString                                 SctPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Condition;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlaySctWithCondition) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPlaySctWithCondition");
static_assert(sizeof(TLBuilderCommands_TLPlaySctWithCondition) == 0x000018, "Wrong size on TLBuilderCommands_TLPlaySctWithCondition");
static_assert(offsetof(TLBuilderCommands_TLPlaySctWithCondition, SctPath) == 0x000000, "Member 'TLBuilderCommands_TLPlaySctWithCondition::SctPath' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySctWithCondition, Condition) == 0x000010, "Member 'TLBuilderCommands_TLPlaySctWithCondition::Condition' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlaySkill
// 0x0014 (0x0014 - 0x0000)
struct TLBuilderCommands_TLPlaySkill final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillLevel;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillSpeed;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetId;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHeavyAttackToMe;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLPlaySkill) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPlaySkill");
static_assert(sizeof(TLBuilderCommands_TLPlaySkill) == 0x000014, "Wrong size on TLBuilderCommands_TLPlaySkill");
static_assert(offsetof(TLBuilderCommands_TLPlaySkill, SkillId) == 0x000000, "Member 'TLBuilderCommands_TLPlaySkill::SkillId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySkill, SkillLevel) == 0x000004, "Member 'TLBuilderCommands_TLPlaySkill::SkillLevel' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySkill, SkillSpeed) == 0x000008, "Member 'TLBuilderCommands_TLPlaySkill::SkillSpeed' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySkill, TargetId) == 0x00000C, "Member 'TLBuilderCommands_TLPlaySkill::TargetId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySkill, IsHeavyAttackToMe) == 0x000010, "Member 'TLBuilderCommands_TLPlaySkill::IsHeavyAttackToMe' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlaySystemActionTree
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLPlaySystemActionTree final
{
public:
	class FName                                   ActionTreeId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlaySystemActionTree) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPlaySystemActionTree");
static_assert(sizeof(TLBuilderCommands_TLPlaySystemActionTree) == 0x000008, "Wrong size on TLBuilderCommands_TLPlaySystemActionTree");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemActionTree, ActionTreeId) == 0x000000, "Member 'TLBuilderCommands_TLPlaySystemActionTree::ActionTreeId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlaySystemActionTreeAll
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLPlaySystemActionTreeAll final
{
public:
	class FName                                   ActionTreeId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlaySystemActionTreeAll) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPlaySystemActionTreeAll");
static_assert(sizeof(TLBuilderCommands_TLPlaySystemActionTreeAll) == 0x000008, "Wrong size on TLBuilderCommands_TLPlaySystemActionTreeAll");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemActionTreeAll, ActionTreeId) == 0x000000, "Member 'TLBuilderCommands_TLPlaySystemActionTreeAll::ActionTreeId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlaySystemActionTreeObj
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLPlaySystemActionTreeObj final
{
public:
	class FName                                   ActionTreeId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjId;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlaySystemActionTreeObj) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPlaySystemActionTreeObj");
static_assert(sizeof(TLBuilderCommands_TLPlaySystemActionTreeObj) == 0x00000C, "Wrong size on TLBuilderCommands_TLPlaySystemActionTreeObj");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemActionTreeObj, ActionTreeId) == 0x000000, "Member 'TLBuilderCommands_TLPlaySystemActionTreeObj::ActionTreeId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemActionTreeObj, ObjId) == 0x000008, "Member 'TLBuilderCommands_TLPlaySystemActionTreeObj::ObjId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlaySystemActionTreeWithIFFParam
// 0x001C (0x001C - 0x0000)
struct TLBuilderCommands_TLPlaySystemActionTreeWithIFFParam final
{
public:
	class FName                                   ActionTreeId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         R;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         G;                                                 // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         A;                                                 // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Desaturation;                                      // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlaySystemActionTreeWithIFFParam) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPlaySystemActionTreeWithIFFParam");
static_assert(sizeof(TLBuilderCommands_TLPlaySystemActionTreeWithIFFParam) == 0x00001C, "Wrong size on TLBuilderCommands_TLPlaySystemActionTreeWithIFFParam");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemActionTreeWithIFFParam, ActionTreeId) == 0x000000, "Member 'TLBuilderCommands_TLPlaySystemActionTreeWithIFFParam::ActionTreeId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemActionTreeWithIFFParam, R) == 0x000008, "Member 'TLBuilderCommands_TLPlaySystemActionTreeWithIFFParam::R' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemActionTreeWithIFFParam, G) == 0x00000C, "Member 'TLBuilderCommands_TLPlaySystemActionTreeWithIFFParam::G' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemActionTreeWithIFFParam, B) == 0x000010, "Member 'TLBuilderCommands_TLPlaySystemActionTreeWithIFFParam::B' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemActionTreeWithIFFParam, A) == 0x000014, "Member 'TLBuilderCommands_TLPlaySystemActionTreeWithIFFParam::A' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemActionTreeWithIFFParam, Desaturation) == 0x000018, "Member 'TLBuilderCommands_TLPlaySystemActionTreeWithIFFParam::Desaturation' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlaySystemActionTreeWithTargetGroupIndex
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLPlaySystemActionTreeWithTargetGroupIndex final
{
public:
	class FName                                   ActionTreeId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlaySystemActionTreeWithTargetGroupIndex) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPlaySystemActionTreeWithTargetGroupIndex");
static_assert(sizeof(TLBuilderCommands_TLPlaySystemActionTreeWithTargetGroupIndex) == 0x00000C, "Wrong size on TLBuilderCommands_TLPlaySystemActionTreeWithTargetGroupIndex");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemActionTreeWithTargetGroupIndex, ActionTreeId) == 0x000000, "Member 'TLBuilderCommands_TLPlaySystemActionTreeWithTargetGroupIndex::ActionTreeId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemActionTreeWithTargetGroupIndex, GroupIndex) == 0x000008, "Member 'TLBuilderCommands_TLPlaySystemActionTreeWithTargetGroupIndex::GroupIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlaySystemSct
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLPlaySystemSct final
{
public:
	class FName                                   SctId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlaySystemSct) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPlaySystemSct");
static_assert(sizeof(TLBuilderCommands_TLPlaySystemSct) == 0x000008, "Wrong size on TLBuilderCommands_TLPlaySystemSct");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemSct, SctId) == 0x000000, "Member 'TLBuilderCommands_TLPlaySystemSct::SctId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlaySystemSctAll
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLPlaySystemSctAll final
{
public:
	class FName                                   SctId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlaySystemSctAll) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPlaySystemSctAll");
static_assert(sizeof(TLBuilderCommands_TLPlaySystemSctAll) == 0x000008, "Wrong size on TLBuilderCommands_TLPlaySystemSctAll");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemSctAll, SctId) == 0x000000, "Member 'TLBuilderCommands_TLPlaySystemSctAll::SctId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlaySystemSctObj
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLPlaySystemSctObj final
{
public:
	class FName                                   SctId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjId;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlaySystemSctObj) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPlaySystemSctObj");
static_assert(sizeof(TLBuilderCommands_TLPlaySystemSctObj) == 0x00000C, "Wrong size on TLBuilderCommands_TLPlaySystemSctObj");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemSctObj, SctId) == 0x000000, "Member 'TLBuilderCommands_TLPlaySystemSctObj::SctId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemSctObj, ObjId) == 0x000008, "Member 'TLBuilderCommands_TLPlaySystemSctObj::ObjId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlaySystemSctWithIFFParam
// 0x001C (0x001C - 0x0000)
struct TLBuilderCommands_TLPlaySystemSctWithIFFParam final
{
public:
	class FName                                   SctId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         R;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         G;                                                 // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         A;                                                 // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Desaturation;                                      // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlaySystemSctWithIFFParam) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPlaySystemSctWithIFFParam");
static_assert(sizeof(TLBuilderCommands_TLPlaySystemSctWithIFFParam) == 0x00001C, "Wrong size on TLBuilderCommands_TLPlaySystemSctWithIFFParam");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemSctWithIFFParam, SctId) == 0x000000, "Member 'TLBuilderCommands_TLPlaySystemSctWithIFFParam::SctId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemSctWithIFFParam, R) == 0x000008, "Member 'TLBuilderCommands_TLPlaySystemSctWithIFFParam::R' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemSctWithIFFParam, G) == 0x00000C, "Member 'TLBuilderCommands_TLPlaySystemSctWithIFFParam::G' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemSctWithIFFParam, B) == 0x000010, "Member 'TLBuilderCommands_TLPlaySystemSctWithIFFParam::B' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemSctWithIFFParam, A) == 0x000014, "Member 'TLBuilderCommands_TLPlaySystemSctWithIFFParam::A' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemSctWithIFFParam, Desaturation) == 0x000018, "Member 'TLBuilderCommands_TLPlaySystemSctWithIFFParam::Desaturation' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlaySystemSctWithTargetGroupIndex
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLPlaySystemSctWithTargetGroupIndex final
{
public:
	class FName                                   SctId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlaySystemSctWithTargetGroupIndex) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPlaySystemSctWithTargetGroupIndex");
static_assert(sizeof(TLBuilderCommands_TLPlaySystemSctWithTargetGroupIndex) == 0x00000C, "Wrong size on TLBuilderCommands_TLPlaySystemSctWithTargetGroupIndex");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemSctWithTargetGroupIndex, SctId) == 0x000000, "Member 'TLBuilderCommands_TLPlaySystemSctWithTargetGroupIndex::SctId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlaySystemSctWithTargetGroupIndex, GroupIndex) == 0x000008, "Member 'TLBuilderCommands_TLPlaySystemSctWithTargetGroupIndex::GroupIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayVoice
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLPlayVoice final
{
public:
	class FString                                 Event;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLPlayVoice) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPlayVoice");
static_assert(sizeof(TLBuilderCommands_TLPlayVoice) == 0x000018, "Wrong size on TLBuilderCommands_TLPlayVoice");
static_assert(offsetof(TLBuilderCommands_TLPlayVoice, Event) == 0x000000, "Member 'TLBuilderCommands_TLPlayVoice::Event' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayVoice, Priority) == 0x000010, "Member 'TLBuilderCommands_TLPlayVoice::Priority' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayWorldActionTree
// 0x0020 (0x0020 - 0x0000)
struct TLBuilderCommands_TLPlayWorldActionTree final
{
public:
	class FString                                 ActionTreePath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLPlayWorldActionTree) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPlayWorldActionTree");
static_assert(sizeof(TLBuilderCommands_TLPlayWorldActionTree) == 0x000020, "Wrong size on TLBuilderCommands_TLPlayWorldActionTree");
static_assert(offsetof(TLBuilderCommands_TLPlayWorldActionTree, ActionTreePath) == 0x000000, "Member 'TLBuilderCommands_TLPlayWorldActionTree::ActionTreePath' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayWorldActionTree, X) == 0x000010, "Member 'TLBuilderCommands_TLPlayWorldActionTree::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayWorldActionTree, Y) == 0x000014, "Member 'TLBuilderCommands_TLPlayWorldActionTree::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayWorldActionTree, Z) == 0x000018, "Member 'TLBuilderCommands_TLPlayWorldActionTree::Z' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayWorldActionTreeAtMouseWithCondition
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLPlayWorldActionTreeAtMouseWithCondition final
{
public:
	class FString                                 ActionTreePath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Condition;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlayWorldActionTreeAtMouseWithCondition) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPlayWorldActionTreeAtMouseWithCondition");
static_assert(sizeof(TLBuilderCommands_TLPlayWorldActionTreeAtMouseWithCondition) == 0x000018, "Wrong size on TLBuilderCommands_TLPlayWorldActionTreeAtMouseWithCondition");
static_assert(offsetof(TLBuilderCommands_TLPlayWorldActionTreeAtMouseWithCondition, ActionTreePath) == 0x000000, "Member 'TLBuilderCommands_TLPlayWorldActionTreeAtMouseWithCondition::ActionTreePath' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayWorldActionTreeAtMouseWithCondition, Condition) == 0x000010, "Member 'TLBuilderCommands_TLPlayWorldActionTreeAtMouseWithCondition::Condition' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayWorldSct
// 0x0020 (0x0020 - 0x0000)
struct TLBuilderCommands_TLPlayWorldSct final
{
public:
	class FString                                 SctPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLPlayWorldSct) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPlayWorldSct");
static_assert(sizeof(TLBuilderCommands_TLPlayWorldSct) == 0x000020, "Wrong size on TLBuilderCommands_TLPlayWorldSct");
static_assert(offsetof(TLBuilderCommands_TLPlayWorldSct, SctPath) == 0x000000, "Member 'TLBuilderCommands_TLPlayWorldSct::SctPath' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayWorldSct, X) == 0x000010, "Member 'TLBuilderCommands_TLPlayWorldSct::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayWorldSct, Y) == 0x000014, "Member 'TLBuilderCommands_TLPlayWorldSct::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayWorldSct, Z) == 0x000018, "Member 'TLBuilderCommands_TLPlayWorldSct::Z' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPlayWorldSctAtMouseWithCondition
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLPlayWorldSctAtMouseWithCondition final
{
public:
	class FString                                 SctPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Condition;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPlayWorldSctAtMouseWithCondition) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPlayWorldSctAtMouseWithCondition");
static_assert(sizeof(TLBuilderCommands_TLPlayWorldSctAtMouseWithCondition) == 0x000018, "Wrong size on TLBuilderCommands_TLPlayWorldSctAtMouseWithCondition");
static_assert(offsetof(TLBuilderCommands_TLPlayWorldSctAtMouseWithCondition, SctPath) == 0x000000, "Member 'TLBuilderCommands_TLPlayWorldSctAtMouseWithCondition::SctPath' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPlayWorldSctAtMouseWithCondition, Condition) == 0x000010, "Member 'TLBuilderCommands_TLPlayWorldSctAtMouseWithCondition::Condition' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPolymorphClientOnly
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLPolymorphClientOnly final
{
public:
	class FName                                   PolymorphId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowConti;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLPolymorphClientOnly) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPolymorphClientOnly");
static_assert(sizeof(TLBuilderCommands_TLPolymorphClientOnly) == 0x00000C, "Wrong size on TLBuilderCommands_TLPolymorphClientOnly");
static_assert(offsetof(TLBuilderCommands_TLPolymorphClientOnly, PolymorphId) == 0x000000, "Member 'TLBuilderCommands_TLPolymorphClientOnly::PolymorphId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPolymorphClientOnly, bShowConti) == 0x000008, "Member 'TLBuilderCommands_TLPolymorphClientOnly::bShowConti' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPolymorphClientOnly1
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLPolymorphClientOnly1 final
{
public:
	int32                                         PolymorphUid;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowConti;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLPolymorphClientOnly1) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPolymorphClientOnly1");
static_assert(sizeof(TLBuilderCommands_TLPolymorphClientOnly1) == 0x000008, "Wrong size on TLBuilderCommands_TLPolymorphClientOnly1");
static_assert(offsetof(TLBuilderCommands_TLPolymorphClientOnly1, PolymorphUid) == 0x000000, "Member 'TLBuilderCommands_TLPolymorphClientOnly1::PolymorphUid' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPolymorphClientOnly1, bShowConti) == 0x000004, "Member 'TLBuilderCommands_TLPolymorphClientOnly1::bShowConti' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPolymorphGacha
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLPolymorphGacha final
{
public:
	bool                                          bInActivate;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GachaItemId;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPolymorphGacha) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPolymorphGacha");
static_assert(sizeof(TLBuilderCommands_TLPolymorphGacha) == 0x000008, "Wrong size on TLBuilderCommands_TLPolymorphGacha");
static_assert(offsetof(TLBuilderCommands_TLPolymorphGacha, bInActivate) == 0x000000, "Member 'TLBuilderCommands_TLPolymorphGacha::bInActivate' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLPolymorphGacha, GachaItemId) == 0x000004, "Member 'TLBuilderCommands_TLPolymorphGacha::GachaItemId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPolymorphOriginalTemp
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLPolymorphOriginalTemp final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPolymorphOriginalTemp) == 0x000001, "Wrong alignment on TLBuilderCommands_TLPolymorphOriginalTemp");
static_assert(sizeof(TLBuilderCommands_TLPolymorphOriginalTemp) == 0x000001, "Wrong size on TLBuilderCommands_TLPolymorphOriginalTemp");
static_assert(offsetof(TLBuilderCommands_TLPolymorphOriginalTemp, bOn) == 0x000000, "Member 'TLBuilderCommands_TLPolymorphOriginalTemp::bOn' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPostTest
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLPostTest final
{
public:
	int32                                         InPostCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPostTest) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPostTest");
static_assert(sizeof(TLBuilderCommands_TLPostTest) == 0x000004, "Wrong size on TLBuilderCommands_TLPostTest");
static_assert(offsetof(TLBuilderCommands_TLPostTest, InPostCount) == 0x000000, "Member 'TLBuilderCommands_TLPostTest::InPostCount' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPreloadCutscene
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLPreloadCutscene final
{
public:
	class FName                                   CutSceneID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPreloadCutscene) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPreloadCutscene");
static_assert(sizeof(TLBuilderCommands_TLPreloadCutscene) == 0x000008, "Wrong size on TLBuilderCommands_TLPreloadCutscene");
static_assert(offsetof(TLBuilderCommands_TLPreloadCutscene, CutSceneID) == 0x000000, "Member 'TLBuilderCommands_TLPreloadCutscene::CutSceneID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPreventCanSeeFromMyPc
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLPreventCanSeeFromMyPc final
{
public:
	int32                                         ObjectCanSeeType;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPreventCanSeeFromMyPc) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPreventCanSeeFromMyPc");
static_assert(sizeof(TLBuilderCommands_TLPreventCanSeeFromMyPc) == 0x000004, "Wrong size on TLBuilderCommands_TLPreventCanSeeFromMyPc");
static_assert(offsetof(TLBuilderCommands_TLPreventCanSeeFromMyPc, ObjectCanSeeType) == 0x000000, "Member 'TLBuilderCommands_TLPreventCanSeeFromMyPc::ObjectCanSeeType' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPurchaseRetailSteamItem
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLPurchaseRetailSteamItem final
{
public:
	class FString                                 InAppId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPurchaseRetailSteamItem) == 0x000008, "Wrong alignment on TLBuilderCommands_TLPurchaseRetailSteamItem");
static_assert(sizeof(TLBuilderCommands_TLPurchaseRetailSteamItem) == 0x000010, "Wrong size on TLBuilderCommands_TLPurchaseRetailSteamItem");
static_assert(offsetof(TLBuilderCommands_TLPurchaseRetailSteamItem, InAppId) == 0x000000, "Member 'TLBuilderCommands_TLPurchaseRetailSteamItem::InAppId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPurchaseUseTestDisplayKey
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLPurchaseUseTestDisplayKey final
{
public:
	bool                                          bInUseTestDisplayKey;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPurchaseUseTestDisplayKey) == 0x000001, "Wrong alignment on TLBuilderCommands_TLPurchaseUseTestDisplayKey");
static_assert(sizeof(TLBuilderCommands_TLPurchaseUseTestDisplayKey) == 0x000001, "Wrong size on TLBuilderCommands_TLPurchaseUseTestDisplayKey");
static_assert(offsetof(TLBuilderCommands_TLPurchaseUseTestDisplayKey, bInUseTestDisplayKey) == 0x000000, "Member 'TLBuilderCommands_TLPurchaseUseTestDisplayKey::bInUseTestDisplayKey' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPVPHistoryTest
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLPVPHistoryTest final
{
public:
	int32                                         InPageSize;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPVPHistoryTest) == 0x000004, "Wrong alignment on TLBuilderCommands_TLPVPHistoryTest");
static_assert(sizeof(TLBuilderCommands_TLPVPHistoryTest) == 0x000004, "Wrong size on TLBuilderCommands_TLPVPHistoryTest");
static_assert(offsetof(TLBuilderCommands_TLPVPHistoryTest, InPageSize) == 0x000000, "Member 'TLBuilderCommands_TLPVPHistoryTest::InPageSize' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLPvpMode
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLPvpMode final
{
public:
	bool                                          InOnPvpMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLPvpMode) == 0x000001, "Wrong alignment on TLBuilderCommands_TLPvpMode");
static_assert(sizeof(TLBuilderCommands_TLPvpMode) == 0x000001, "Wrong size on TLBuilderCommands_TLPvpMode");
static_assert(offsetof(TLBuilderCommands_TLPvpMode, InOnPvpMode) == 0x000000, "Member 'TLBuilderCommands_TLPvpMode::InOnPvpMode' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLQOSView
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLQOSView final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLQOSView) == 0x000001, "Wrong alignment on TLBuilderCommands_TLQOSView");
static_assert(sizeof(TLBuilderCommands_TLQOSView) == 0x000001, "Wrong size on TLBuilderCommands_TLQOSView");
static_assert(offsetof(TLBuilderCommands_TLQOSView, bDisplay) == 0x000000, "Member 'TLBuilderCommands_TLQOSView::bDisplay' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLQueryCapsule
// 0x0028 (0x0028 - 0x0000)
struct TLBuilderCommands_TLQueryCapsule final
{
public:
	float                                         Sx;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sy;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sz;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ex;                                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ey;                                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ez;                                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rad;                                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hei;                                               // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLQueryCapsule) == 0x000004, "Wrong alignment on TLBuilderCommands_TLQueryCapsule");
static_assert(sizeof(TLBuilderCommands_TLQueryCapsule) == 0x000028, "Wrong size on TLBuilderCommands_TLQueryCapsule");
static_assert(offsetof(TLBuilderCommands_TLQueryCapsule, Sx) == 0x000000, "Member 'TLBuilderCommands_TLQueryCapsule::Sx' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLQueryCapsule, Sy) == 0x000004, "Member 'TLBuilderCommands_TLQueryCapsule::Sy' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLQueryCapsule, Sz) == 0x000008, "Member 'TLBuilderCommands_TLQueryCapsule::Sz' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLQueryCapsule, Ex) == 0x00000C, "Member 'TLBuilderCommands_TLQueryCapsule::Ex' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLQueryCapsule, Ey) == 0x000010, "Member 'TLBuilderCommands_TLQueryCapsule::Ey' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLQueryCapsule, Ez) == 0x000014, "Member 'TLBuilderCommands_TLQueryCapsule::Ez' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLQueryCapsule, Rad) == 0x000018, "Member 'TLBuilderCommands_TLQueryCapsule::Rad' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLQueryCapsule, Hei) == 0x00001C, "Member 'TLBuilderCommands_TLQueryCapsule::Hei' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLQueryCapsule, Thickness) == 0x000020, "Member 'TLBuilderCommands_TLQueryCapsule::Thickness' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLQueryCapsule, Duration) == 0x000024, "Member 'TLBuilderCommands_TLQueryCapsule::Duration' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLQueryValidAltitude
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLQueryValidAltitude final
{
public:
	float                                         InX;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InY;                                               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InZ;                                               // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchHeight;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLQueryValidAltitude) == 0x000004, "Wrong alignment on TLBuilderCommands_TLQueryValidAltitude");
static_assert(sizeof(TLBuilderCommands_TLQueryValidAltitude) == 0x000010, "Wrong size on TLBuilderCommands_TLQueryValidAltitude");
static_assert(offsetof(TLBuilderCommands_TLQueryValidAltitude, InX) == 0x000000, "Member 'TLBuilderCommands_TLQueryValidAltitude::InX' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLQueryValidAltitude, InY) == 0x000004, "Member 'TLBuilderCommands_TLQueryValidAltitude::InY' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLQueryValidAltitude, InZ) == 0x000008, "Member 'TLBuilderCommands_TLQueryValidAltitude::InZ' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLQueryValidAltitude, SearchHeight) == 0x00000C, "Member 'TLBuilderCommands_TLQueryValidAltitude::SearchHeight' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLRankingTest
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLRankingTest final
{
public:
	int32                                         InPageSize;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLRankingTest) == 0x000004, "Wrong alignment on TLBuilderCommands_TLRankingTest");
static_assert(sizeof(TLBuilderCommands_TLRankingTest) == 0x000004, "Wrong size on TLBuilderCommands_TLRankingTest");
static_assert(offsetof(TLBuilderCommands_TLRankingTest, InPageSize) == 0x000000, "Member 'TLBuilderCommands_TLRankingTest::InPageSize' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLRankingTestExpRankingList
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLRankingTestExpRankingList final
{
public:
	int32                                         InPageSize;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLRankingTestExpRankingList) == 0x000004, "Wrong alignment on TLBuilderCommands_TLRankingTestExpRankingList");
static_assert(sizeof(TLBuilderCommands_TLRankingTestExpRankingList) == 0x000004, "Wrong size on TLBuilderCommands_TLRankingTestExpRankingList");
static_assert(offsetof(TLBuilderCommands_TLRankingTestExpRankingList, InPageSize) == 0x000000, "Member 'TLBuilderCommands_TLRankingTestExpRankingList::InPageSize' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLRankingTestExpRankingListScroll
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLRankingTestExpRankingListScroll final
{
public:
	int32                                         InPageSize;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InStartListNum;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLRankingTestExpRankingListScroll) == 0x000004, "Wrong alignment on TLBuilderCommands_TLRankingTestExpRankingListScroll");
static_assert(sizeof(TLBuilderCommands_TLRankingTestExpRankingListScroll) == 0x000008, "Wrong size on TLBuilderCommands_TLRankingTestExpRankingListScroll");
static_assert(offsetof(TLBuilderCommands_TLRankingTestExpRankingListScroll, InPageSize) == 0x000000, "Member 'TLBuilderCommands_TLRankingTestExpRankingListScroll::InPageSize' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLRankingTestExpRankingListScroll, InStartListNum) == 0x000004, "Member 'TLBuilderCommands_TLRankingTestExpRankingListScroll::InStartListNum' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLRankingTestNowExpRankingList
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLRankingTestNowExpRankingList final
{
public:
	int32                                         InPageSize;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLRankingTestNowExpRankingList) == 0x000004, "Wrong alignment on TLBuilderCommands_TLRankingTestNowExpRankingList");
static_assert(sizeof(TLBuilderCommands_TLRankingTestNowExpRankingList) == 0x000004, "Wrong size on TLBuilderCommands_TLRankingTestNowExpRankingList");
static_assert(offsetof(TLBuilderCommands_TLRankingTestNowExpRankingList, InPageSize) == 0x000000, "Member 'TLBuilderCommands_TLRankingTestNowExpRankingList::InPageSize' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLRankingTestNowExpRankingListScroll
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLRankingTestNowExpRankingListScroll final
{
public:
	int32                                         InPageSize;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InStartListNum;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLRankingTestNowExpRankingListScroll) == 0x000004, "Wrong alignment on TLBuilderCommands_TLRankingTestNowExpRankingListScroll");
static_assert(sizeof(TLBuilderCommands_TLRankingTestNowExpRankingListScroll) == 0x000008, "Wrong size on TLBuilderCommands_TLRankingTestNowExpRankingListScroll");
static_assert(offsetof(TLBuilderCommands_TLRankingTestNowExpRankingListScroll, InPageSize) == 0x000000, "Member 'TLBuilderCommands_TLRankingTestNowExpRankingListScroll::InPageSize' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLRankingTestNowExpRankingListScroll, InStartListNum) == 0x000004, "Member 'TLBuilderCommands_TLRankingTestNowExpRankingListScroll::InStartListNum' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLRankingTestNowPvpRankingList
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLRankingTestNowPvpRankingList final
{
public:
	int32                                         InPageSize;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLRankingTestNowPvpRankingList) == 0x000004, "Wrong alignment on TLBuilderCommands_TLRankingTestNowPvpRankingList");
static_assert(sizeof(TLBuilderCommands_TLRankingTestNowPvpRankingList) == 0x000004, "Wrong size on TLBuilderCommands_TLRankingTestNowPvpRankingList");
static_assert(offsetof(TLBuilderCommands_TLRankingTestNowPvpRankingList, InPageSize) == 0x000000, "Member 'TLBuilderCommands_TLRankingTestNowPvpRankingList::InPageSize' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLRankingTestNowPvpRankingListScroll
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLRankingTestNowPvpRankingListScroll final
{
public:
	int32                                         InPageSize;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InStartListNum;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLRankingTestNowPvpRankingListScroll) == 0x000004, "Wrong alignment on TLBuilderCommands_TLRankingTestNowPvpRankingListScroll");
static_assert(sizeof(TLBuilderCommands_TLRankingTestNowPvpRankingListScroll) == 0x000008, "Wrong size on TLBuilderCommands_TLRankingTestNowPvpRankingListScroll");
static_assert(offsetof(TLBuilderCommands_TLRankingTestNowPvpRankingListScroll, InPageSize) == 0x000000, "Member 'TLBuilderCommands_TLRankingTestNowPvpRankingListScroll::InPageSize' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLRankingTestNowPvpRankingListScroll, InStartListNum) == 0x000004, "Member 'TLBuilderCommands_TLRankingTestNowPvpRankingListScroll::InStartListNum' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLRankingTestPvpRankingList
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLRankingTestPvpRankingList final
{
public:
	int32                                         InPageSize;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLRankingTestPvpRankingList) == 0x000004, "Wrong alignment on TLBuilderCommands_TLRankingTestPvpRankingList");
static_assert(sizeof(TLBuilderCommands_TLRankingTestPvpRankingList) == 0x000004, "Wrong size on TLBuilderCommands_TLRankingTestPvpRankingList");
static_assert(offsetof(TLBuilderCommands_TLRankingTestPvpRankingList, InPageSize) == 0x000000, "Member 'TLBuilderCommands_TLRankingTestPvpRankingList::InPageSize' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLRankingTestPvpRankingListScroll
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLRankingTestPvpRankingListScroll final
{
public:
	int32                                         InPageSize;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InStartListNum;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLRankingTestPvpRankingListScroll) == 0x000004, "Wrong alignment on TLBuilderCommands_TLRankingTestPvpRankingListScroll");
static_assert(sizeof(TLBuilderCommands_TLRankingTestPvpRankingListScroll) == 0x000008, "Wrong size on TLBuilderCommands_TLRankingTestPvpRankingListScroll");
static_assert(offsetof(TLBuilderCommands_TLRankingTestPvpRankingListScroll, InPageSize) == 0x000000, "Member 'TLBuilderCommands_TLRankingTestPvpRankingListScroll::InPageSize' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLRankingTestPvpRankingListScroll, InStartListNum) == 0x000004, "Member 'TLBuilderCommands_TLRankingTestPvpRankingListScroll::InStartListNum' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLRayHitTest
// 0x0002 (0x0002 - 0x0000)
struct TLBuilderCommands_TLRayHitTest final
{
public:
	bool                                          bSet;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowMesh;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLRayHitTest) == 0x000001, "Wrong alignment on TLBuilderCommands_TLRayHitTest");
static_assert(sizeof(TLBuilderCommands_TLRayHitTest) == 0x000002, "Wrong size on TLBuilderCommands_TLRayHitTest");
static_assert(offsetof(TLBuilderCommands_TLRayHitTest, bSet) == 0x000000, "Member 'TLBuilderCommands_TLRayHitTest::bSet' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLRayHitTest, bShowMesh) == 0x000001, "Member 'TLBuilderCommands_TLRayHitTest::bShowMesh' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLReadyToPlayView
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLReadyToPlayView final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLReadyToPlayView) == 0x000001, "Wrong alignment on TLBuilderCommands_TLReadyToPlayView");
static_assert(sizeof(TLBuilderCommands_TLReadyToPlayView) == 0x000001, "Wrong size on TLBuilderCommands_TLReadyToPlayView");
static_assert(offsetof(TLBuilderCommands_TLReadyToPlayView, bDisplay) == 0x000000, "Member 'TLBuilderCommands_TLReadyToPlayView::bDisplay' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLReceiveContractShare
// 0x0040 (0x0040 - 0x0000)
struct TLBuilderCommands_TLReceiveContractShare final
{
public:
	class FString                                 InTransactionId;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InCharacterId;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InContractId;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InContractGroupId;                                 // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLReceiveContractShare) == 0x000008, "Wrong alignment on TLBuilderCommands_TLReceiveContractShare");
static_assert(sizeof(TLBuilderCommands_TLReceiveContractShare) == 0x000040, "Wrong size on TLBuilderCommands_TLReceiveContractShare");
static_assert(offsetof(TLBuilderCommands_TLReceiveContractShare, InTransactionId) == 0x000000, "Member 'TLBuilderCommands_TLReceiveContractShare::InTransactionId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLReceiveContractShare, InCharacterId) == 0x000010, "Member 'TLBuilderCommands_TLReceiveContractShare::InCharacterId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLReceiveContractShare, InContractId) == 0x000020, "Member 'TLBuilderCommands_TLReceiveContractShare::InContractId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLReceiveContractShare, InContractGroupId) == 0x000030, "Member 'TLBuilderCommands_TLReceiveContractShare::InContractGroupId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLRefreshPurchaseGoodsList
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLRefreshPurchaseGoodsList final
{
public:
	class FString                                 InDisplayKey;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLRefreshPurchaseGoodsList) == 0x000008, "Wrong alignment on TLBuilderCommands_TLRefreshPurchaseGoodsList");
static_assert(sizeof(TLBuilderCommands_TLRefreshPurchaseGoodsList) == 0x000010, "Wrong size on TLBuilderCommands_TLRefreshPurchaseGoodsList");
static_assert(offsetof(TLBuilderCommands_TLRefreshPurchaseGoodsList, InDisplayKey) == 0x000000, "Member 'TLBuilderCommands_TLRefreshPurchaseGoodsList::InDisplayKey' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLRegionChatRoomJoinUseClient
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLRegionChatRoomJoinUseClient final
{
public:
	bool                                          IsUseClient;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLRegionChatRoomJoinUseClient) == 0x000001, "Wrong alignment on TLBuilderCommands_TLRegionChatRoomJoinUseClient");
static_assert(sizeof(TLBuilderCommands_TLRegionChatRoomJoinUseClient) == 0x000001, "Wrong size on TLBuilderCommands_TLRegionChatRoomJoinUseClient");
static_assert(offsetof(TLBuilderCommands_TLRegionChatRoomJoinUseClient, IsUseClient) == 0x000000, "Member 'TLBuilderCommands_TLRegionChatRoomJoinUseClient::IsUseClient' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLReloadUI
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLReloadUI final
{
public:
	int32                                         InReloadType;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLReloadUI) == 0x000004, "Wrong alignment on TLBuilderCommands_TLReloadUI");
static_assert(sizeof(TLBuilderCommands_TLReloadUI) == 0x000004, "Wrong size on TLBuilderCommands_TLReloadUI");
static_assert(offsetof(TLBuilderCommands_TLReloadUI, InReloadType) == 0x000000, "Member 'TLBuilderCommands_TLReloadUI::InReloadType' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLRemoveDirectionalForceVolume
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLRemoveDirectionalForceVolume final
{
public:
	int64                                         VolumeID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLRemoveDirectionalForceVolume) == 0x000008, "Wrong alignment on TLBuilderCommands_TLRemoveDirectionalForceVolume");
static_assert(sizeof(TLBuilderCommands_TLRemoveDirectionalForceVolume) == 0x000008, "Wrong size on TLBuilderCommands_TLRemoveDirectionalForceVolume");
static_assert(offsetof(TLBuilderCommands_TLRemoveDirectionalForceVolume, VolumeID) == 0x000000, "Member 'TLBuilderCommands_TLRemoveDirectionalForceVolume::VolumeID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLRemovePartyTargetMarkerOnlyClient
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLRemovePartyTargetMarkerOnlyClient final
{
public:
	int32                                         InMarkNum;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLRemovePartyTargetMarkerOnlyClient) == 0x000004, "Wrong alignment on TLBuilderCommands_TLRemovePartyTargetMarkerOnlyClient");
static_assert(sizeof(TLBuilderCommands_TLRemovePartyTargetMarkerOnlyClient) == 0x000004, "Wrong size on TLBuilderCommands_TLRemovePartyTargetMarkerOnlyClient");
static_assert(offsetof(TLBuilderCommands_TLRemovePartyTargetMarkerOnlyClient, InMarkNum) == 0x000000, "Member 'TLBuilderCommands_TLRemovePartyTargetMarkerOnlyClient::InMarkNum' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLReplayPacketDump
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLReplayPacketDump final
{
public:
	class FString                                 ReplayPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLReplayPacketDump) == 0x000008, "Wrong alignment on TLBuilderCommands_TLReplayPacketDump");
static_assert(sizeof(TLBuilderCommands_TLReplayPacketDump) == 0x000010, "Wrong size on TLBuilderCommands_TLReplayPacketDump");
static_assert(offsetof(TLBuilderCommands_TLReplayPacketDump, ReplayPath) == 0x000000, "Member 'TLBuilderCommands_TLReplayPacketDump::ReplayPath' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLReplayPacketStart
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLReplayPacketStart final
{
public:
	class FString                                 ReplayPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecordStatStartTime;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecordStatDuration;                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLReplayPacketStart) == 0x000008, "Wrong alignment on TLBuilderCommands_TLReplayPacketStart");
static_assert(sizeof(TLBuilderCommands_TLReplayPacketStart) == 0x000018, "Wrong size on TLBuilderCommands_TLReplayPacketStart");
static_assert(offsetof(TLBuilderCommands_TLReplayPacketStart, ReplayPath) == 0x000000, "Member 'TLBuilderCommands_TLReplayPacketStart::ReplayPath' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLReplayPacketStart, RecordStatStartTime) == 0x000010, "Member 'TLBuilderCommands_TLReplayPacketStart::RecordStatStartTime' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLReplayPacketStart, RecordStatDuration) == 0x000014, "Member 'TLBuilderCommands_TLReplayPacketStart::RecordStatDuration' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLReplayPacketStartWithUpdateCamera
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLReplayPacketStartWithUpdateCamera final
{
public:
	class FString                                 ReplayPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecordStatStartTime;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecordStatDuration;                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLReplayPacketStartWithUpdateCamera) == 0x000008, "Wrong alignment on TLBuilderCommands_TLReplayPacketStartWithUpdateCamera");
static_assert(sizeof(TLBuilderCommands_TLReplayPacketStartWithUpdateCamera) == 0x000018, "Wrong size on TLBuilderCommands_TLReplayPacketStartWithUpdateCamera");
static_assert(offsetof(TLBuilderCommands_TLReplayPacketStartWithUpdateCamera, ReplayPath) == 0x000000, "Member 'TLBuilderCommands_TLReplayPacketStartWithUpdateCamera::ReplayPath' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLReplayPacketStartWithUpdateCamera, RecordStatStartTime) == 0x000010, "Member 'TLBuilderCommands_TLReplayPacketStartWithUpdateCamera::RecordStatStartTime' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLReplayPacketStartWithUpdateCamera, RecordStatDuration) == 0x000014, "Member 'TLBuilderCommands_TLReplayPacketStartWithUpdateCamera::RecordStatDuration' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLReplayPacketUpdateCamera
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLReplayPacketUpdateCamera final
{
public:
	bool                                          UpdateCamera;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLReplayPacketUpdateCamera) == 0x000001, "Wrong alignment on TLBuilderCommands_TLReplayPacketUpdateCamera");
static_assert(sizeof(TLBuilderCommands_TLReplayPacketUpdateCamera) == 0x000001, "Wrong size on TLBuilderCommands_TLReplayPacketUpdateCamera");
static_assert(offsetof(TLBuilderCommands_TLReplayPacketUpdateCamera, UpdateCamera) == 0x000000, "Member 'TLBuilderCommands_TLReplayPacketUpdateCamera::UpdateCamera' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLReplayPacketUpgrade
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLReplayPacketUpgrade final
{
public:
	class FString                                 ReplayPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLReplayPacketUpgrade) == 0x000008, "Wrong alignment on TLBuilderCommands_TLReplayPacketUpgrade");
static_assert(sizeof(TLBuilderCommands_TLReplayPacketUpgrade) == 0x000010, "Wrong size on TLBuilderCommands_TLReplayPacketUpgrade");
static_assert(offsetof(TLBuilderCommands_TLReplayPacketUpgrade, ReplayPath) == 0x000000, "Member 'TLBuilderCommands_TLReplayPacketUpgrade::ReplayPath' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLReplayPacketUpgradeDirectory
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLReplayPacketUpgradeDirectory final
{
public:
	class FString                                 ReplayDirectory;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLReplayPacketUpgradeDirectory) == 0x000008, "Wrong alignment on TLBuilderCommands_TLReplayPacketUpgradeDirectory");
static_assert(sizeof(TLBuilderCommands_TLReplayPacketUpgradeDirectory) == 0x000010, "Wrong size on TLBuilderCommands_TLReplayPacketUpgradeDirectory");
static_assert(offsetof(TLBuilderCommands_TLReplayPacketUpgradeDirectory, ReplayDirectory) == 0x000000, "Member 'TLBuilderCommands_TLReplayPacketUpgradeDirectory::ReplayDirectory' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLResetPin
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLResetPin final
{
public:
	class FName                                   MapIconId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLResetPin) == 0x000004, "Wrong alignment on TLBuilderCommands_TLResetPin");
static_assert(sizeof(TLBuilderCommands_TLResetPin) == 0x000008, "Wrong size on TLBuilderCommands_TLResetPin");
static_assert(offsetof(TLBuilderCommands_TLResetPin, MapIconId) == 0x000000, "Member 'TLBuilderCommands_TLResetPin::MapIconId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLResonanceSelectChange
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLResonanceSelectChange final
{
public:
	bool                                          bInSuccess;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLResonanceSelectChange) == 0x000001, "Wrong alignment on TLBuilderCommands_TLResonanceSelectChange");
static_assert(sizeof(TLBuilderCommands_TLResonanceSelectChange) == 0x000001, "Wrong size on TLBuilderCommands_TLResonanceSelectChange");
static_assert(offsetof(TLBuilderCommands_TLResonanceSelectChange, bInSuccess) == 0x000000, "Member 'TLBuilderCommands_TLResonanceSelectChange::bInSuccess' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLResumeCarrierRouteSequence
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLResumeCarrierRouteSequence final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLResumeCarrierRouteSequence) == 0x000004, "Wrong alignment on TLBuilderCommands_TLResumeCarrierRouteSequence");
static_assert(sizeof(TLBuilderCommands_TLResumeCarrierRouteSequence) == 0x000004, "Wrong size on TLBuilderCommands_TLResumeCarrierRouteSequence");
static_assert(offsetof(TLBuilderCommands_TLResumeCarrierRouteSequence, InID) == 0x000000, "Member 'TLBuilderCommands_TLResumeCarrierRouteSequence::InID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLResumeCarrierTransformSequence
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLResumeCarrierTransformSequence final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLResumeCarrierTransformSequence) == 0x000004, "Wrong alignment on TLBuilderCommands_TLResumeCarrierTransformSequence");
static_assert(sizeof(TLBuilderCommands_TLResumeCarrierTransformSequence) == 0x000004, "Wrong size on TLBuilderCommands_TLResumeCarrierTransformSequence");
static_assert(offsetof(TLBuilderCommands_TLResumeCarrierTransformSequence, InID) == 0x000000, "Member 'TLBuilderCommands_TLResumeCarrierTransformSequence::InID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLRuneTestOpen
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLRuneTestOpen final
{
public:
	bool                                          InIsOpen;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLRuneTestOpen) == 0x000001, "Wrong alignment on TLBuilderCommands_TLRuneTestOpen");
static_assert(sizeof(TLBuilderCommands_TLRuneTestOpen) == 0x000001, "Wrong size on TLBuilderCommands_TLRuneTestOpen");
static_assert(offsetof(TLBuilderCommands_TLRuneTestOpen, InIsOpen) == 0x000000, "Member 'TLBuilderCommands_TLRuneTestOpen::InIsOpen' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLRunTestUI
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLRunTestUI final
{
public:
	int32                                         InCommand;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLRunTestUI) == 0x000004, "Wrong alignment on TLBuilderCommands_TLRunTestUI");
static_assert(sizeof(TLBuilderCommands_TLRunTestUI) == 0x000004, "Wrong size on TLBuilderCommands_TLRunTestUI");
static_assert(offsetof(TLBuilderCommands_TLRunTestUI, InCommand) == 0x000000, "Member 'TLBuilderCommands_TLRunTestUI::InCommand' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSandbag
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLSandbag final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSandbag) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSandbag");
static_assert(sizeof(TLBuilderCommands_TLSandbag) == 0x000004, "Wrong size on TLBuilderCommands_TLSandbag");
static_assert(offsetof(TLBuilderCommands_TLSandbag, Count) == 0x000000, "Member 'TLBuilderCommands_TLSandbag::Count' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSandbagAroundMe
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSandbagAroundMe final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSandbagAroundMe) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSandbagAroundMe");
static_assert(sizeof(TLBuilderCommands_TLSandbagAroundMe) == 0x000008, "Wrong size on TLBuilderCommands_TLSandbagAroundMe");
static_assert(offsetof(TLBuilderCommands_TLSandbagAroundMe, Radius) == 0x000000, "Member 'TLBuilderCommands_TLSandbagAroundMe::Radius' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSandbagAroundMe, Num) == 0x000004, "Member 'TLBuilderCommands_TLSandbagAroundMe::Num' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSandbagAtMouse
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLSandbagAtMouse final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSandbagAtMouse) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSandbagAtMouse");
static_assert(sizeof(TLBuilderCommands_TLSandbagAtMouse) == 0x000004, "Wrong size on TLBuilderCommands_TLSandbagAtMouse");
static_assert(offsetof(TLBuilderCommands_TLSandbagAtMouse, Count) == 0x000000, "Member 'TLBuilderCommands_TLSandbagAtMouse::Count' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSandbagAttacker
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLSandbagAttacker final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSandbagAttacker) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSandbagAttacker");
static_assert(sizeof(TLBuilderCommands_TLSandbagAttacker) == 0x000004, "Wrong size on TLBuilderCommands_TLSandbagAttacker");
static_assert(offsetof(TLBuilderCommands_TLSandbagAttacker, Count) == 0x000000, "Member 'TLBuilderCommands_TLSandbagAttacker::Count' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSandbagMass
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLSandbagMass final
{
public:
	int32                                         Row;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDist;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSandbagMass) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSandbagMass");
static_assert(sizeof(TLBuilderCommands_TLSandbagMass) == 0x00000C, "Wrong size on TLBuilderCommands_TLSandbagMass");
static_assert(offsetof(TLBuilderCommands_TLSandbagMass, Row) == 0x000000, "Member 'TLBuilderCommands_TLSandbagMass::Row' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSandbagMass, Column) == 0x000004, "Member 'TLBuilderCommands_TLSandbagMass::Column' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSandbagMass, InDist) == 0x000008, "Member 'TLBuilderCommands_TLSandbagMass::InDist' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLScreenMsg
// 0x0020 (0x0020 - 0x0000)
struct TLBuilderCommands_TLScreenMsg final
{
public:
	class FString                                 MsgType;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Args;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLScreenMsg) == 0x000008, "Wrong alignment on TLBuilderCommands_TLScreenMsg");
static_assert(sizeof(TLBuilderCommands_TLScreenMsg) == 0x000020, "Wrong size on TLBuilderCommands_TLScreenMsg");
static_assert(offsetof(TLBuilderCommands_TLScreenMsg, MsgType) == 0x000000, "Member 'TLBuilderCommands_TLScreenMsg::MsgType' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLScreenMsg, Args) == 0x000010, "Member 'TLBuilderCommands_TLScreenMsg::Args' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLScreenMsgSiegeSide
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLScreenMsgSiegeSide final
{
public:
	class FName                                   MsgId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAllySide;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLScreenMsgSiegeSide) == 0x000004, "Wrong alignment on TLBuilderCommands_TLScreenMsgSiegeSide");
static_assert(sizeof(TLBuilderCommands_TLScreenMsgSiegeSide) == 0x00000C, "Wrong size on TLBuilderCommands_TLScreenMsgSiegeSide");
static_assert(offsetof(TLBuilderCommands_TLScreenMsgSiegeSide, MsgId) == 0x000000, "Member 'TLBuilderCommands_TLScreenMsgSiegeSide::MsgId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLScreenMsgSiegeSide, bIsAllySide) == 0x000008, "Member 'TLBuilderCommands_TLScreenMsgSiegeSide::bIsAllySide' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLScreenMsgTeamBattle
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLScreenMsgTeamBattle final
{
public:
	class FName                                   MsgId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLTeamBattleMessageType                      Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLScreenMsgTeamBattle) == 0x000004, "Wrong alignment on TLBuilderCommands_TLScreenMsgTeamBattle");
static_assert(sizeof(TLBuilderCommands_TLScreenMsgTeamBattle) == 0x00000C, "Wrong size on TLBuilderCommands_TLScreenMsgTeamBattle");
static_assert(offsetof(TLBuilderCommands_TLScreenMsgTeamBattle, MsgId) == 0x000000, "Member 'TLBuilderCommands_TLScreenMsgTeamBattle::MsgId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLScreenMsgTeamBattle, Type) == 0x000008, "Member 'TLBuilderCommands_TLScreenMsgTeamBattle::Type' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLScreenMsgWorldEffect
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLScreenMsgWorldEffect final
{
public:
	bool                                          InIsEffectStart;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        NpcUid;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectUid;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLWorldEffectType                            InType;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLScreenMsgWorldEffect) == 0x000004, "Wrong alignment on TLBuilderCommands_TLScreenMsgWorldEffect");
static_assert(sizeof(TLBuilderCommands_TLScreenMsgWorldEffect) == 0x000010, "Wrong size on TLBuilderCommands_TLScreenMsgWorldEffect");
static_assert(offsetof(TLBuilderCommands_TLScreenMsgWorldEffect, InIsEffectStart) == 0x000000, "Member 'TLBuilderCommands_TLScreenMsgWorldEffect::InIsEffectStart' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLScreenMsgWorldEffect, NpcUid) == 0x000004, "Member 'TLBuilderCommands_TLScreenMsgWorldEffect::NpcUid' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLScreenMsgWorldEffect, EffectUid) == 0x000008, "Member 'TLBuilderCommands_TLScreenMsgWorldEffect::EffectUid' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLScreenMsgWorldEffect, InType) == 0x00000C, "Member 'TLBuilderCommands_TLScreenMsgWorldEffect::InType' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSeasonPassSpecialShop
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSeasonPassSpecialShop final
{
public:
	uint64                                        InSeasonPassGuid;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSeasonPassSpecialShop) == 0x000008, "Wrong alignment on TLBuilderCommands_TLSeasonPassSpecialShop");
static_assert(sizeof(TLBuilderCommands_TLSeasonPassSpecialShop) == 0x000008, "Wrong size on TLBuilderCommands_TLSeasonPassSpecialShop");
static_assert(offsetof(TLBuilderCommands_TLSeasonPassSpecialShop, InSeasonPassGuid) == 0x000000, "Member 'TLBuilderCommands_TLSeasonPassSpecialShop::InSeasonPassGuid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSeasonPassTicketFirstAction
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLSeasonPassTicketFirstAction final
{
public:
	uint64                                        InPassGuid;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsActive;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLSeasonPassTicketFirstAction) == 0x000008, "Wrong alignment on TLBuilderCommands_TLSeasonPassTicketFirstAction");
static_assert(sizeof(TLBuilderCommands_TLSeasonPassTicketFirstAction) == 0x000010, "Wrong size on TLBuilderCommands_TLSeasonPassTicketFirstAction");
static_assert(offsetof(TLBuilderCommands_TLSeasonPassTicketFirstAction, InPassGuid) == 0x000000, "Member 'TLBuilderCommands_TLSeasonPassTicketFirstAction::InPassGuid' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSeasonPassTicketFirstAction, InIsActive) == 0x000008, "Member 'TLBuilderCommands_TLSeasonPassTicketFirstAction::InIsActive' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSeasonRewardGetReward
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLSeasonRewardGetReward final
{
public:
	int32                                         InSeasonId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        InObjectiveGuid;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSeasonRewardGetReward) == 0x000008, "Wrong alignment on TLBuilderCommands_TLSeasonRewardGetReward");
static_assert(sizeof(TLBuilderCommands_TLSeasonRewardGetReward) == 0x000010, "Wrong size on TLBuilderCommands_TLSeasonRewardGetReward");
static_assert(offsetof(TLBuilderCommands_TLSeasonRewardGetReward, InSeasonId) == 0x000000, "Member 'TLBuilderCommands_TLSeasonRewardGetReward::InSeasonId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSeasonRewardGetReward, InObjectiveGuid) == 0x000008, "Member 'TLBuilderCommands_TLSeasonRewardGetReward::InObjectiveGuid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSeasonRewardMissionCount
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLSeasonRewardMissionCount final
{
public:
	int32                                         InSeasonId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        InObjectiveGuid;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCount;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLSeasonRewardMissionCount) == 0x000008, "Wrong alignment on TLBuilderCommands_TLSeasonRewardMissionCount");
static_assert(sizeof(TLBuilderCommands_TLSeasonRewardMissionCount) == 0x000018, "Wrong size on TLBuilderCommands_TLSeasonRewardMissionCount");
static_assert(offsetof(TLBuilderCommands_TLSeasonRewardMissionCount, InSeasonId) == 0x000000, "Member 'TLBuilderCommands_TLSeasonRewardMissionCount::InSeasonId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSeasonRewardMissionCount, InObjectiveGuid) == 0x000008, "Member 'TLBuilderCommands_TLSeasonRewardMissionCount::InObjectiveGuid' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSeasonRewardMissionCount, InCount) == 0x000010, "Member 'TLBuilderCommands_TLSeasonRewardMissionCount::InCount' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSeasonRewardShowReward
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLSeasonRewardShowReward final
{
public:
	int32                                         InSeasonId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        InObjectiveGuid;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSeasonRewardShowReward) == 0x000008, "Wrong alignment on TLBuilderCommands_TLSeasonRewardShowReward");
static_assert(sizeof(TLBuilderCommands_TLSeasonRewardShowReward) == 0x000010, "Wrong size on TLBuilderCommands_TLSeasonRewardShowReward");
static_assert(offsetof(TLBuilderCommands_TLSeasonRewardShowReward, InSeasonId) == 0x000000, "Member 'TLBuilderCommands_TLSeasonRewardShowReward::InSeasonId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSeasonRewardShowReward, InObjectiveGuid) == 0x000008, "Member 'TLBuilderCommands_TLSeasonRewardShowReward::InObjectiveGuid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSelectCinematicDialogIndex
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLSelectCinematicDialogIndex final
{
public:
	int32                                         InSelectIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSelectCinematicDialogIndex) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSelectCinematicDialogIndex");
static_assert(sizeof(TLBuilderCommands_TLSelectCinematicDialogIndex) == 0x000004, "Wrong size on TLBuilderCommands_TLSelectCinematicDialogIndex");
static_assert(offsetof(TLBuilderCommands_TLSelectCinematicDialogIndex, InSelectIndex) == 0x000000, "Member 'TLBuilderCommands_TLSelectCinematicDialogIndex::InSelectIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSendMapLogCustom
// 0x0020 (0x0020 - 0x0000)
struct TLBuilderCommands_TLSendMapLogCustom final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InCategory;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSendMapLogCustom) == 0x000008, "Wrong alignment on TLBuilderCommands_TLSendMapLogCustom");
static_assert(sizeof(TLBuilderCommands_TLSendMapLogCustom) == 0x000020, "Wrong size on TLBuilderCommands_TLSendMapLogCustom");
static_assert(offsetof(TLBuilderCommands_TLSendMapLogCustom, InName) == 0x000000, "Member 'TLBuilderCommands_TLSendMapLogCustom::InName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSendMapLogCustom, InCategory) == 0x000010, "Member 'TLBuilderCommands_TLSendMapLogCustom::InCategory' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSendSpellPolymorphReq
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSendSpellPolymorphReq final
{
public:
	class FName                                   PolymorphId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSendSpellPolymorphReq) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSendSpellPolymorphReq");
static_assert(sizeof(TLBuilderCommands_TLSendSpellPolymorphReq) == 0x000008, "Wrong size on TLBuilderCommands_TLSendSpellPolymorphReq");
static_assert(offsetof(TLBuilderCommands_TLSendSpellPolymorphReq, PolymorphId) == 0x000000, "Member 'TLBuilderCommands_TLSendSpellPolymorphReq::PolymorphId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLServerBuilder
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLServerBuilder final
{
public:
	class FString                                 Arg1;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLServerBuilder) == 0x000008, "Wrong alignment on TLBuilderCommands_TLServerBuilder");
static_assert(sizeof(TLBuilderCommands_TLServerBuilder) == 0x000010, "Wrong size on TLBuilderCommands_TLServerBuilder");
static_assert(offsetof(TLBuilderCommands_TLServerBuilder, Arg1) == 0x000000, "Member 'TLBuilderCommands_TLServerBuilder::Arg1' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLServerRuntimeDebugEnable
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLServerRuntimeDebugEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLServerRuntimeDebugEnable) == 0x000001, "Wrong alignment on TLBuilderCommands_TLServerRuntimeDebugEnable");
static_assert(sizeof(TLBuilderCommands_TLServerRuntimeDebugEnable) == 0x000001, "Wrong size on TLBuilderCommands_TLServerRuntimeDebugEnable");
static_assert(offsetof(TLBuilderCommands_TLServerRuntimeDebugEnable, bEnable) == 0x000000, "Member 'TLBuilderCommands_TLServerRuntimeDebugEnable::bEnable' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetAudioLanguage
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLSetAudioLanguage final
{
public:
	class FString                                 InLanguage;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetAudioLanguage) == 0x000008, "Wrong alignment on TLBuilderCommands_TLSetAudioLanguage");
static_assert(sizeof(TLBuilderCommands_TLSetAudioLanguage) == 0x000010, "Wrong size on TLBuilderCommands_TLSetAudioLanguage");
static_assert(offsetof(TLBuilderCommands_TLSetAudioLanguage, InLanguage) == 0x000000, "Member 'TLBuilderCommands_TLSetAudioLanguage::InLanguage' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetBlockAll
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSetBlockAll final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLSetBlockAll) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetBlockAll");
static_assert(sizeof(TLBuilderCommands_TLSetBlockAll) == 0x000008, "Wrong size on TLBuilderCommands_TLSetBlockAll");
static_assert(offsetof(TLBuilderCommands_TLSetBlockAll, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLSetBlockAll::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetBlockAll, bEnable) == 0x000004, "Member 'TLBuilderCommands_TLSetBlockAll::bEnable' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetCastingInteractionCollision
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSetCastingInteractionCollision final
{
public:
	int32                                         InObjId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InVal;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLSetCastingInteractionCollision) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetCastingInteractionCollision");
static_assert(sizeof(TLBuilderCommands_TLSetCastingInteractionCollision) == 0x000008, "Wrong size on TLBuilderCommands_TLSetCastingInteractionCollision");
static_assert(offsetof(TLBuilderCommands_TLSetCastingInteractionCollision, InObjId) == 0x000000, "Member 'TLBuilderCommands_TLSetCastingInteractionCollision::InObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetCastingInteractionCollision, InVal) == 0x000004, "Member 'TLBuilderCommands_TLSetCastingInteractionCollision::InVal' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetCombatPolymorph
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSetCombatPolymorph final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PolymorphUid;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetCombatPolymorph) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetCombatPolymorph");
static_assert(sizeof(TLBuilderCommands_TLSetCombatPolymorph) == 0x000008, "Wrong size on TLBuilderCommands_TLSetCombatPolymorph");
static_assert(offsetof(TLBuilderCommands_TLSetCombatPolymorph, Type) == 0x000000, "Member 'TLBuilderCommands_TLSetCombatPolymorph::Type' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetCombatPolymorph, PolymorphUid) == 0x000004, "Member 'TLBuilderCommands_TLSetCombatPolymorph::PolymorphUid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetCost
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLSetCost final
{
public:
	int32                                         Cost;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetCost) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetCost");
static_assert(sizeof(TLBuilderCommands_TLSetCost) == 0x000004, "Wrong size on TLBuilderCommands_TLSetCost");
static_assert(offsetof(TLBuilderCommands_TLSetCost, Cost) == 0x000000, "Member 'TLBuilderCommands_TLSetCost::Cost' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetCostPercent
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLSetCostPercent final
{
public:
	int32                                         CostPercent;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetCostPercent) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetCostPercent");
static_assert(sizeof(TLBuilderCommands_TLSetCostPercent) == 0x000004, "Wrong size on TLBuilderCommands_TLSetCostPercent");
static_assert(offsetof(TLBuilderCommands_TLSetCostPercent, CostPercent) == 0x000000, "Member 'TLBuilderCommands_TLSetCostPercent::CostPercent' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetDir
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSetDir final
{
public:
	int32                                         Dir;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSec;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetDir) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetDir");
static_assert(sizeof(TLBuilderCommands_TLSetDir) == 0x000008, "Wrong size on TLBuilderCommands_TLSetDir");
static_assert(offsetof(TLBuilderCommands_TLSetDir, Dir) == 0x000000, "Member 'TLBuilderCommands_TLSetDir::Dir' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetDir, DurationSec) == 0x000004, "Member 'TLBuilderCommands_TLSetDir::DurationSec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetEscrowDiamond
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSetEscrowDiamond final
{
public:
	int64                                         InValue;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetEscrowDiamond) == 0x000008, "Wrong alignment on TLBuilderCommands_TLSetEscrowDiamond");
static_assert(sizeof(TLBuilderCommands_TLSetEscrowDiamond) == 0x000008, "Wrong size on TLBuilderCommands_TLSetEscrowDiamond");
static_assert(offsetof(TLBuilderCommands_TLSetEscrowDiamond, InValue) == 0x000000, "Member 'TLBuilderCommands_TLSetEscrowDiamond::InValue' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetFloating
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSetFloating final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLSetFloating) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetFloating");
static_assert(sizeof(TLBuilderCommands_TLSetFloating) == 0x000008, "Wrong size on TLBuilderCommands_TLSetFloating");
static_assert(offsetof(TLBuilderCommands_TLSetFloating, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLSetFloating::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetFloating, bEnable) == 0x000004, "Member 'TLBuilderCommands_TLSetFloating::bEnable' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetFoOptimized
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSetFoOptimized final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOptimized;                                        // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLSetFoOptimized) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetFoOptimized");
static_assert(sizeof(TLBuilderCommands_TLSetFoOptimized) == 0x000008, "Wrong size on TLBuilderCommands_TLSetFoOptimized");
static_assert(offsetof(TLBuilderCommands_TLSetFoOptimized, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLSetFoOptimized::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetFoOptimized, bOptimized) == 0x000004, "Member 'TLBuilderCommands_TLSetFoOptimized::bOptimized' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetFoTickInterval
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLSetFoTickInterval final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InInterval;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOptimizedComponentOnly;                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLSetFoTickInterval) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetFoTickInterval");
static_assert(sizeof(TLBuilderCommands_TLSetFoTickInterval) == 0x00000C, "Wrong size on TLBuilderCommands_TLSetFoTickInterval");
static_assert(offsetof(TLBuilderCommands_TLSetFoTickInterval, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLSetFoTickInterval::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetFoTickInterval, InInterval) == 0x000004, "Member 'TLBuilderCommands_TLSetFoTickInterval::InInterval' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetFoTickInterval, bOptimizedComponentOnly) == 0x000008, "Member 'TLBuilderCommands_TLSetFoTickInterval::bOptimizedComponentOnly' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetHp
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLSetHp final
{
public:
	int32                                         Hp;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetHp) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetHp");
static_assert(sizeof(TLBuilderCommands_TLSetHp) == 0x000004, "Wrong size on TLBuilderCommands_TLSetHp");
static_assert(offsetof(TLBuilderCommands_TLSetHp, Hp) == 0x000000, "Member 'TLBuilderCommands_TLSetHp::Hp' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetHpPercent
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLSetHpPercent final
{
public:
	int32                                         HpPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetHpPercent) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetHpPercent");
static_assert(sizeof(TLBuilderCommands_TLSetHpPercent) == 0x000004, "Wrong size on TLBuilderCommands_TLSetHpPercent");
static_assert(offsetof(TLBuilderCommands_TLSetHpPercent, HpPercent) == 0x000000, "Member 'TLBuilderCommands_TLSetHpPercent::HpPercent' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetLoadObjNextTick
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLSetLoadObjNextTick final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetLoadObjNextTick) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetLoadObjNextTick");
static_assert(sizeof(TLBuilderCommands_TLSetLoadObjNextTick) == 0x000004, "Wrong size on TLBuilderCommands_TLSetLoadObjNextTick");
static_assert(offsetof(TLBuilderCommands_TLSetLoadObjNextTick, Count) == 0x000000, "Member 'TLBuilderCommands_TLSetLoadObjNextTick::Count' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetMapRegionType
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLSetMapRegionType final
{
public:
	EMapRegionType                                MapRegionType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetMapRegionType) == 0x000001, "Wrong alignment on TLBuilderCommands_TLSetMapRegionType");
static_assert(sizeof(TLBuilderCommands_TLSetMapRegionType) == 0x000001, "Wrong size on TLBuilderCommands_TLSetMapRegionType");
static_assert(offsetof(TLBuilderCommands_TLSetMapRegionType, MapRegionType) == 0x000000, "Member 'TLBuilderCommands_TLSetMapRegionType::MapRegionType' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetMaxStepHeightAndWalkableFloorAngle
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLSetMaxStepHeightAndWalkableFloorAngle final
{
public:
	int32                                         InObjId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InStepHeight;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFloorAngle;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetMaxStepHeightAndWalkableFloorAngle) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetMaxStepHeightAndWalkableFloorAngle");
static_assert(sizeof(TLBuilderCommands_TLSetMaxStepHeightAndWalkableFloorAngle) == 0x00000C, "Wrong size on TLBuilderCommands_TLSetMaxStepHeightAndWalkableFloorAngle");
static_assert(offsetof(TLBuilderCommands_TLSetMaxStepHeightAndWalkableFloorAngle, InObjId) == 0x000000, "Member 'TLBuilderCommands_TLSetMaxStepHeightAndWalkableFloorAngle::InObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetMaxStepHeightAndWalkableFloorAngle, InStepHeight) == 0x000004, "Member 'TLBuilderCommands_TLSetMaxStepHeightAndWalkableFloorAngle::InStepHeight' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetMaxStepHeightAndWalkableFloorAngle, InFloorAngle) == 0x000008, "Member 'TLBuilderCommands_TLSetMaxStepHeightAndWalkableFloorAngle::InFloorAngle' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetOpacity
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLSetOpacity final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetOpacity;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetOpacity) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetOpacity");
static_assert(sizeof(TLBuilderCommands_TLSetOpacity) == 0x00000C, "Wrong size on TLBuilderCommands_TLSetOpacity");
static_assert(offsetof(TLBuilderCommands_TLSetOpacity, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLSetOpacity::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetOpacity, TargetOpacity) == 0x000004, "Member 'TLBuilderCommands_TLSetOpacity::TargetOpacity' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetOpacity, TransitionTime) == 0x000008, "Member 'TLBuilderCommands_TLSetOpacity::TransitionTime' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetPcSubtitle
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLSetPcSubtitle final
{
public:
	int32                                         PcSubtitleUid;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetPcSubtitle) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetPcSubtitle");
static_assert(sizeof(TLBuilderCommands_TLSetPcSubtitle) == 0x000004, "Wrong size on TLBuilderCommands_TLSetPcSubtitle");
static_assert(offsetof(TLBuilderCommands_TLSetPcSubtitle, PcSubtitleUid) == 0x000000, "Member 'TLBuilderCommands_TLSetPcSubtitle::PcSubtitleUid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetPhotoSensitize
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLSetPhotoSensitize final
{
public:
	float                                         PhotoSensitize;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetPhotoSensitize) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetPhotoSensitize");
static_assert(sizeof(TLBuilderCommands_TLSetPhotoSensitize) == 0x000004, "Wrong size on TLBuilderCommands_TLSetPhotoSensitize");
static_assert(offsetof(TLBuilderCommands_TLSetPhotoSensitize, PhotoSensitize) == 0x000000, "Member 'TLBuilderCommands_TLSetPhotoSensitize::PhotoSensitize' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetPin
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSetPin final
{
public:
	class FName                                   MapIconId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetPin) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetPin");
static_assert(sizeof(TLBuilderCommands_TLSetPin) == 0x000008, "Wrong size on TLBuilderCommands_TLSetPin");
static_assert(offsetof(TLBuilderCommands_TLSetPin, MapIconId) == 0x000000, "Member 'TLBuilderCommands_TLSetPin::MapIconId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetRotation
// 0x001C (0x001C - 0x0000)
struct TLBuilderCommands_TLSetRotation final
{
public:
	float                                         StartX;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartY;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndX;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndY;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClockwise;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetRotation) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetRotation");
static_assert(sizeof(TLBuilderCommands_TLSetRotation) == 0x00001C, "Wrong size on TLBuilderCommands_TLSetRotation");
static_assert(offsetof(TLBuilderCommands_TLSetRotation, StartX) == 0x000000, "Member 'TLBuilderCommands_TLSetRotation::StartX' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetRotation, StartY) == 0x000004, "Member 'TLBuilderCommands_TLSetRotation::StartY' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetRotation, EndX) == 0x000008, "Member 'TLBuilderCommands_TLSetRotation::EndX' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetRotation, EndY) == 0x00000C, "Member 'TLBuilderCommands_TLSetRotation::EndY' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetRotation, bClockwise) == 0x000010, "Member 'TLBuilderCommands_TLSetRotation::bClockwise' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetRotation, Duration) == 0x000014, "Member 'TLBuilderCommands_TLSetRotation::Duration' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetRotation, Delay) == 0x000018, "Member 'TLBuilderCommands_TLSetRotation::Delay' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetRotation1
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLSetRotation1 final
{
public:
	float                                         EndX;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndY;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClockwise;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetRotation1) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetRotation1");
static_assert(sizeof(TLBuilderCommands_TLSetRotation1) == 0x000010, "Wrong size on TLBuilderCommands_TLSetRotation1");
static_assert(offsetof(TLBuilderCommands_TLSetRotation1, EndX) == 0x000000, "Member 'TLBuilderCommands_TLSetRotation1::EndX' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetRotation1, EndY) == 0x000004, "Member 'TLBuilderCommands_TLSetRotation1::EndY' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetRotation1, bClockwise) == 0x000008, "Member 'TLBuilderCommands_TLSetRotation1::bClockwise' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetRotation1, Duration) == 0x00000C, "Member 'TLBuilderCommands_TLSetRotation1::Duration' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetRotation2
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLSetRotation2 final
{
public:
	float                                         StartRad;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndRad;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClockwise;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetRotation2) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetRotation2");
static_assert(sizeof(TLBuilderCommands_TLSetRotation2) == 0x000010, "Wrong size on TLBuilderCommands_TLSetRotation2");
static_assert(offsetof(TLBuilderCommands_TLSetRotation2, StartRad) == 0x000000, "Member 'TLBuilderCommands_TLSetRotation2::StartRad' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetRotation2, EndRad) == 0x000004, "Member 'TLBuilderCommands_TLSetRotation2::EndRad' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetRotation2, bClockwise) == 0x000008, "Member 'TLBuilderCommands_TLSetRotation2::bClockwise' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetRotation2, Duration) == 0x00000C, "Member 'TLBuilderCommands_TLSetRotation2::Duration' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetSeasonPassPointAnimation
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLSetSeasonPassPointAnimation final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetSeasonPassPointAnimation) == 0x000001, "Wrong alignment on TLBuilderCommands_TLSetSeasonPassPointAnimation");
static_assert(sizeof(TLBuilderCommands_TLSetSeasonPassPointAnimation) == 0x000001, "Wrong size on TLBuilderCommands_TLSetSeasonPassPointAnimation");
static_assert(offsetof(TLBuilderCommands_TLSetSeasonPassPointAnimation, InIsActive) == 0x000000, "Member 'TLBuilderCommands_TLSetSeasonPassPointAnimation::InIsActive' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetSuperSamplingMethod
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLSetSuperSamplingMethod final
{
public:
	int32                                         Method;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetSuperSamplingMethod) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetSuperSamplingMethod");
static_assert(sizeof(TLBuilderCommands_TLSetSuperSamplingMethod) == 0x000004, "Wrong size on TLBuilderCommands_TLSetSuperSamplingMethod");
static_assert(offsetof(TLBuilderCommands_TLSetSuperSamplingMethod, Method) == 0x000000, "Member 'TLBuilderCommands_TLSetSuperSamplingMethod::Method' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetTargetAsTauntTarget
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSetTargetAsTauntTarget final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ObjId;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetTargetAsTauntTarget) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetTargetAsTauntTarget");
static_assert(sizeof(TLBuilderCommands_TLSetTargetAsTauntTarget) == 0x000008, "Wrong size on TLBuilderCommands_TLSetTargetAsTauntTarget");
static_assert(offsetof(TLBuilderCommands_TLSetTargetAsTauntTarget, bOn) == 0x000000, "Member 'TLBuilderCommands_TLSetTargetAsTauntTarget::bOn' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetTargetAsTauntTarget, ObjId) == 0x000004, "Member 'TLBuilderCommands_TLSetTargetAsTauntTarget::ObjId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetTargetOpacity
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSetTargetOpacity final
{
public:
	float                                         TargetOpacity;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetTargetOpacity) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetTargetOpacity");
static_assert(sizeof(TLBuilderCommands_TLSetTargetOpacity) == 0x000008, "Wrong size on TLBuilderCommands_TLSetTargetOpacity");
static_assert(offsetof(TLBuilderCommands_TLSetTargetOpacity, TargetOpacity) == 0x000000, "Member 'TLBuilderCommands_TLSetTargetOpacity::TargetOpacity' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetTargetOpacity, TransitionTime) == 0x000004, "Member 'TLBuilderCommands_TLSetTargetOpacity::TransitionTime' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetTargetOpacity1
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSetTargetOpacity1 final
{
public:
	float                                         TargetOpacity;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetTargetOpacity1) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetTargetOpacity1");
static_assert(sizeof(TLBuilderCommands_TLSetTargetOpacity1) == 0x000008, "Wrong size on TLBuilderCommands_TLSetTargetOpacity1");
static_assert(offsetof(TLBuilderCommands_TLSetTargetOpacity1, TargetOpacity) == 0x000000, "Member 'TLBuilderCommands_TLSetTargetOpacity1::TargetOpacity' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetTargetOpacity1, TransitionTime) == 0x000004, "Member 'TLBuilderCommands_TLSetTargetOpacity1::TransitionTime' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetTargetVisibility
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLSetTargetVisibility final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionTime;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetTargetVisibility) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetTargetVisibility");
static_assert(sizeof(TLBuilderCommands_TLSetTargetVisibility) == 0x00000C, "Wrong size on TLBuilderCommands_TLSetTargetVisibility");
static_assert(offsetof(TLBuilderCommands_TLSetTargetVisibility, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLSetTargetVisibility::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetTargetVisibility, bVisible) == 0x000004, "Member 'TLBuilderCommands_TLSetTargetVisibility::bVisible' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetTargetVisibility, TransitionTime) == 0x000008, "Member 'TLBuilderCommands_TLSetTargetVisibility::TransitionTime' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetText
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLSetText final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetText) == 0x000008, "Wrong alignment on TLBuilderCommands_TLSetText");
static_assert(sizeof(TLBuilderCommands_TLSetText) == 0x000010, "Wrong size on TLBuilderCommands_TLSetText");
static_assert(offsetof(TLBuilderCommands_TLSetText, FilePath) == 0x000000, "Member 'TLBuilderCommands_TLSetText::FilePath' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetTimeline
// 0x0050 (0x0050 - 0x0000)
struct TLBuilderCommands_TLSetTimeline final
{
public:
	class FName                                   TimelineId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Score1;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharName1;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Score2;                                            // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharName2;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Score3;                                            // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharName3;                                         // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetTimeline) == 0x000008, "Wrong alignment on TLBuilderCommands_TLSetTimeline");
static_assert(sizeof(TLBuilderCommands_TLSetTimeline) == 0x000050, "Wrong size on TLBuilderCommands_TLSetTimeline");
static_assert(offsetof(TLBuilderCommands_TLSetTimeline, TimelineId) == 0x000000, "Member 'TLBuilderCommands_TLSetTimeline::TimelineId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetTimeline, Score1) == 0x000008, "Member 'TLBuilderCommands_TLSetTimeline::Score1' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetTimeline, CharName1) == 0x000010, "Member 'TLBuilderCommands_TLSetTimeline::CharName1' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetTimeline, Score2) == 0x000020, "Member 'TLBuilderCommands_TLSetTimeline::Score2' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetTimeline, CharName2) == 0x000028, "Member 'TLBuilderCommands_TLSetTimeline::CharName2' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetTimeline, Score3) == 0x000038, "Member 'TLBuilderCommands_TLSetTimeline::Score3' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetTimeline, CharName3) == 0x000040, "Member 'TLBuilderCommands_TLSetTimeline::CharName3' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetUIHideMode
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLSetUIHideMode final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetUIHideMode) == 0x000001, "Wrong alignment on TLBuilderCommands_TLSetUIHideMode");
static_assert(sizeof(TLBuilderCommands_TLSetUIHideMode) == 0x000001, "Wrong size on TLBuilderCommands_TLSetUIHideMode");
static_assert(offsetof(TLBuilderCommands_TLSetUIHideMode, bInShow) == 0x000000, "Member 'TLBuilderCommands_TLSetUIHideMode::bInShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetupDiamond
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSetupDiamond final
{
public:
	int64                                         InBalance;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetupDiamond) == 0x000008, "Wrong alignment on TLBuilderCommands_TLSetupDiamond");
static_assert(sizeof(TLBuilderCommands_TLSetupDiamond) == 0x000008, "Wrong size on TLBuilderCommands_TLSetupDiamond");
static_assert(offsetof(TLBuilderCommands_TLSetupDiamond, InBalance) == 0x000000, "Member 'TLBuilderCommands_TLSetupDiamond::InBalance' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetUseHoverForPresetView
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLSetUseHoverForPresetView final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetUseHoverForPresetView) == 0x000001, "Wrong alignment on TLBuilderCommands_TLSetUseHoverForPresetView");
static_assert(sizeof(TLBuilderCommands_TLSetUseHoverForPresetView) == 0x000001, "Wrong size on TLBuilderCommands_TLSetUseHoverForPresetView");
static_assert(offsetof(TLBuilderCommands_TLSetUseHoverForPresetView, bInEnable) == 0x000000, "Member 'TLBuilderCommands_TLSetUseHoverForPresetView::bInEnable' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetVisibility
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSetVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionTime;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetVisibility) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSetVisibility");
static_assert(sizeof(TLBuilderCommands_TLSetVisibility) == 0x000008, "Wrong size on TLBuilderCommands_TLSetVisibility");
static_assert(offsetof(TLBuilderCommands_TLSetVisibility, bVisible) == 0x000000, "Member 'TLBuilderCommands_TLSetVisibility::bVisible' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetVisibility, TransitionTime) == 0x000004, "Member 'TLBuilderCommands_TLSetVisibility::TransitionTime' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSetVoiceChatEnableActiveConnectMute
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLSetVoiceChatEnableActiveConnectMute final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConnect;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMute;                                             // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSetVoiceChatEnableActiveConnectMute) == 0x000001, "Wrong alignment on TLBuilderCommands_TLSetVoiceChatEnableActiveConnectMute");
static_assert(sizeof(TLBuilderCommands_TLSetVoiceChatEnableActiveConnectMute) == 0x000004, "Wrong size on TLBuilderCommands_TLSetVoiceChatEnableActiveConnectMute");
static_assert(offsetof(TLBuilderCommands_TLSetVoiceChatEnableActiveConnectMute, bEnable) == 0x000000, "Member 'TLBuilderCommands_TLSetVoiceChatEnableActiveConnectMute::bEnable' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetVoiceChatEnableActiveConnectMute, bActive) == 0x000001, "Member 'TLBuilderCommands_TLSetVoiceChatEnableActiveConnectMute::bActive' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetVoiceChatEnableActiveConnectMute, bConnect) == 0x000002, "Member 'TLBuilderCommands_TLSetVoiceChatEnableActiveConnectMute::bConnect' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSetVoiceChatEnableActiveConnectMute, bMute) == 0x000003, "Member 'TLBuilderCommands_TLSetVoiceChatEnableActiveConnectMute::bMute' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowColMesh
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLShowColMesh final
{
public:
	int32                                         FileId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjId;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowColMesh) == 0x000004, "Wrong alignment on TLBuilderCommands_TLShowColMesh");
static_assert(sizeof(TLBuilderCommands_TLShowColMesh) == 0x000008, "Wrong size on TLBuilderCommands_TLShowColMesh");
static_assert(offsetof(TLBuilderCommands_TLShowColMesh, FileId) == 0x000000, "Member 'TLBuilderCommands_TLShowColMesh::FileId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowColMesh, ObjId) == 0x000004, "Member 'TLBuilderCommands_TLShowColMesh::ObjId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowDebug
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLShowDebug final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowDebug) == 0x000008, "Wrong alignment on TLBuilderCommands_TLShowDebug");
static_assert(sizeof(TLBuilderCommands_TLShowDebug) == 0x000010, "Wrong size on TLBuilderCommands_TLShowDebug");
static_assert(offsetof(TLBuilderCommands_TLShowDebug, Command) == 0x000000, "Member 'TLBuilderCommands_TLShowDebug::Command' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowDefaultMapTex
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLShowDefaultMapTex final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowDefaultMapTex) == 0x000001, "Wrong alignment on TLBuilderCommands_TLShowDefaultMapTex");
static_assert(sizeof(TLBuilderCommands_TLShowDefaultMapTex) == 0x000001, "Wrong size on TLBuilderCommands_TLShowDefaultMapTex");
static_assert(offsetof(TLBuilderCommands_TLShowDefaultMapTex, bInValue) == 0x000000, "Member 'TLBuilderCommands_TLShowDefaultMapTex::bInValue' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowDungeonWaypointUI
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLShowDungeonWaypointUI final
{
public:
	int32                                         InUID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowDungeonWaypointUI) == 0x000004, "Wrong alignment on TLBuilderCommands_TLShowDungeonWaypointUI");
static_assert(sizeof(TLBuilderCommands_TLShowDungeonWaypointUI) == 0x000004, "Wrong size on TLBuilderCommands_TLShowDungeonWaypointUI");
static_assert(offsetof(TLBuilderCommands_TLShowDungeonWaypointUI, InUID) == 0x000000, "Member 'TLBuilderCommands_TLShowDungeonWaypointUI::InUID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowDynamicEventUI
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLShowDynamicEventUI final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowDynamicEventUI) == 0x000001, "Wrong alignment on TLBuilderCommands_TLShowDynamicEventUI");
static_assert(sizeof(TLBuilderCommands_TLShowDynamicEventUI) == 0x000001, "Wrong size on TLBuilderCommands_TLShowDynamicEventUI");
static_assert(offsetof(TLBuilderCommands_TLShowDynamicEventUI, bInShow) == 0x000000, "Member 'TLBuilderCommands_TLShowDynamicEventUI::bInShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowEnterContentRegionEventScreenMessage
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLShowEnterContentRegionEventScreenMessage final
{
public:
	class FName                                   InDynamicTableId;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InCurRegionType;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLShowEnterContentRegionEventScreenMessage) == 0x000004, "Wrong alignment on TLBuilderCommands_TLShowEnterContentRegionEventScreenMessage");
static_assert(sizeof(TLBuilderCommands_TLShowEnterContentRegionEventScreenMessage) == 0x00000C, "Wrong size on TLBuilderCommands_TLShowEnterContentRegionEventScreenMessage");
static_assert(offsetof(TLBuilderCommands_TLShowEnterContentRegionEventScreenMessage, InDynamicTableId) == 0x000000, "Member 'TLBuilderCommands_TLShowEnterContentRegionEventScreenMessage::InDynamicTableId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowEnterContentRegionEventScreenMessage, InCurRegionType) == 0x000008, "Member 'TLBuilderCommands_TLShowEnterContentRegionEventScreenMessage::InCurRegionType' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowFloatingTest
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLShowFloatingTest final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowFloatingTest) == 0x000001, "Wrong alignment on TLBuilderCommands_TLShowFloatingTest");
static_assert(sizeof(TLBuilderCommands_TLShowFloatingTest) == 0x000001, "Wrong size on TLBuilderCommands_TLShowFloatingTest");
static_assert(offsetof(TLBuilderCommands_TLShowFloatingTest, bInShow) == 0x000000, "Member 'TLBuilderCommands_TLShowFloatingTest::bInShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowFoColMesh
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLShowFoColMesh final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowFoColMesh) == 0x000004, "Wrong alignment on TLBuilderCommands_TLShowFoColMesh");
static_assert(sizeof(TLBuilderCommands_TLShowFoColMesh) == 0x000004, "Wrong size on TLBuilderCommands_TLShowFoColMesh");
static_assert(offsetof(TLBuilderCommands_TLShowFoColMesh, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLShowFoColMesh::ObjId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowFocusTooltip
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLShowFocusTooltip final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowFocusTooltip) == 0x000001, "Wrong alignment on TLBuilderCommands_TLShowFocusTooltip");
static_assert(sizeof(TLBuilderCommands_TLShowFocusTooltip) == 0x000001, "Wrong size on TLBuilderCommands_TLShowFocusTooltip");
static_assert(offsetof(TLBuilderCommands_TLShowFocusTooltip, bInShow) == 0x000000, "Member 'TLBuilderCommands_TLShowFocusTooltip::bInShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowHighResTex1024
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLShowHighResTex1024 final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowHighResTex1024) == 0x000001, "Wrong alignment on TLBuilderCommands_TLShowHighResTex1024");
static_assert(sizeof(TLBuilderCommands_TLShowHighResTex1024) == 0x000001, "Wrong size on TLBuilderCommands_TLShowHighResTex1024");
static_assert(offsetof(TLBuilderCommands_TLShowHighResTex1024, bInValue) == 0x000000, "Member 'TLBuilderCommands_TLShowHighResTex1024::bInValue' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowHighResTex256
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLShowHighResTex256 final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowHighResTex256) == 0x000001, "Wrong alignment on TLBuilderCommands_TLShowHighResTex256");
static_assert(sizeof(TLBuilderCommands_TLShowHighResTex256) == 0x000001, "Wrong size on TLBuilderCommands_TLShowHighResTex256");
static_assert(offsetof(TLBuilderCommands_TLShowHighResTex256, bInValue) == 0x000000, "Member 'TLBuilderCommands_TLShowHighResTex256::bInValue' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowHighResTex512
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLShowHighResTex512 final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowHighResTex512) == 0x000001, "Wrong alignment on TLBuilderCommands_TLShowHighResTex512");
static_assert(sizeof(TLBuilderCommands_TLShowHighResTex512) == 0x000001, "Wrong size on TLBuilderCommands_TLShowHighResTex512");
static_assert(offsetof(TLBuilderCommands_TLShowHighResTex512, bInValue) == 0x000000, "Member 'TLBuilderCommands_TLShowHighResTex512::bInValue' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowInfinityDungeon
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLShowInfinityDungeon final
{
public:
	bool                                          IsJoin;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DungeonUid;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFloorIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowInfinityDungeon) == 0x000004, "Wrong alignment on TLBuilderCommands_TLShowInfinityDungeon");
static_assert(sizeof(TLBuilderCommands_TLShowInfinityDungeon) == 0x00000C, "Wrong size on TLBuilderCommands_TLShowInfinityDungeon");
static_assert(offsetof(TLBuilderCommands_TLShowInfinityDungeon, IsJoin) == 0x000000, "Member 'TLBuilderCommands_TLShowInfinityDungeon::IsJoin' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowInfinityDungeon, DungeonUid) == 0x000004, "Member 'TLBuilderCommands_TLShowInfinityDungeon::DungeonUid' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowInfinityDungeon, InFloorIndex) == 0x000008, "Member 'TLBuilderCommands_TLShowInfinityDungeon::InFloorIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowInfinityDungeonComplete
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLShowInfinityDungeonComplete final
{
public:
	bool                                          IsJoin;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DungeonUid;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFloorIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowInfinityDungeonComplete) == 0x000004, "Wrong alignment on TLBuilderCommands_TLShowInfinityDungeonComplete");
static_assert(sizeof(TLBuilderCommands_TLShowInfinityDungeonComplete) == 0x00000C, "Wrong size on TLBuilderCommands_TLShowInfinityDungeonComplete");
static_assert(offsetof(TLBuilderCommands_TLShowInfinityDungeonComplete, IsJoin) == 0x000000, "Member 'TLBuilderCommands_TLShowInfinityDungeonComplete::IsJoin' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowInfinityDungeonComplete, DungeonUid) == 0x000004, "Member 'TLBuilderCommands_TLShowInfinityDungeonComplete::DungeonUid' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowInfinityDungeonComplete, InFloorIndex) == 0x000008, "Member 'TLBuilderCommands_TLShowInfinityDungeonComplete::InFloorIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowItemComposition
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLShowItemComposition final
{
public:
	int32                                         InType;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowItemComposition) == 0x000004, "Wrong alignment on TLBuilderCommands_TLShowItemComposition");
static_assert(sizeof(TLBuilderCommands_TLShowItemComposition) == 0x000004, "Wrong size on TLBuilderCommands_TLShowItemComposition");
static_assert(offsetof(TLBuilderCommands_TLShowItemComposition, InType) == 0x000000, "Member 'TLBuilderCommands_TLShowItemComposition::InType' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowItemDropInfo
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLShowItemDropInfo final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InItemID;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowItemDropInfo) == 0x000004, "Wrong alignment on TLBuilderCommands_TLShowItemDropInfo");
static_assert(sizeof(TLBuilderCommands_TLShowItemDropInfo) == 0x000008, "Wrong size on TLBuilderCommands_TLShowItemDropInfo");
static_assert(offsetof(TLBuilderCommands_TLShowItemDropInfo, bInShow) == 0x000000, "Member 'TLBuilderCommands_TLShowItemDropInfo::bInShow' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowItemDropInfo, InItemID) == 0x000004, "Member 'TLBuilderCommands_TLShowItemDropInfo::InItemID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowItemUid
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLShowItemUid final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowItemUid) == 0x000001, "Wrong alignment on TLBuilderCommands_TLShowItemUid");
static_assert(sizeof(TLBuilderCommands_TLShowItemUid) == 0x000001, "Wrong size on TLBuilderCommands_TLShowItemUid");
static_assert(offsetof(TLBuilderCommands_TLShowItemUid, InIsShow) == 0x000000, "Member 'TLBuilderCommands_TLShowItemUid::InIsShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowJoinDynamicEventScreenMessage
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLShowJoinDynamicEventScreenMessage final
{
public:
	class FName                                   InDynamicTableId;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InCurRegionType;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLShowJoinDynamicEventScreenMessage) == 0x000004, "Wrong alignment on TLBuilderCommands_TLShowJoinDynamicEventScreenMessage");
static_assert(sizeof(TLBuilderCommands_TLShowJoinDynamicEventScreenMessage) == 0x00000C, "Wrong size on TLBuilderCommands_TLShowJoinDynamicEventScreenMessage");
static_assert(offsetof(TLBuilderCommands_TLShowJoinDynamicEventScreenMessage, InDynamicTableId) == 0x000000, "Member 'TLBuilderCommands_TLShowJoinDynamicEventScreenMessage::InDynamicTableId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowJoinDynamicEventScreenMessage, InCurRegionType) == 0x000008, "Member 'TLBuilderCommands_TLShowJoinDynamicEventScreenMessage::InCurRegionType' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowLevelHpCost
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLShowLevelHpCost final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowLevelHpCost) == 0x000001, "Wrong alignment on TLBuilderCommands_TLShowLevelHpCost");
static_assert(sizeof(TLBuilderCommands_TLShowLevelHpCost) == 0x000001, "Wrong size on TLBuilderCommands_TLShowLevelHpCost");
static_assert(offsetof(TLBuilderCommands_TLShowLevelHpCost, bShow) == 0x000000, "Member 'TLBuilderCommands_TLShowLevelHpCost::bShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowLoadingScreen
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLShowLoadingScreen final
{
public:
	int32                                         InType;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowLoadingScreen) == 0x000004, "Wrong alignment on TLBuilderCommands_TLShowLoadingScreen");
static_assert(sizeof(TLBuilderCommands_TLShowLoadingScreen) == 0x000004, "Wrong size on TLBuilderCommands_TLShowLoadingScreen");
static_assert(offsetof(TLBuilderCommands_TLShowLoadingScreen, InType) == 0x000000, "Member 'TLBuilderCommands_TLShowLoadingScreen::InType' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowLoadingScreenMovie
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLShowLoadingScreenMovie final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InMovieTableKey;                                   // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowLoadingScreenMovie) == 0x000004, "Wrong alignment on TLBuilderCommands_TLShowLoadingScreenMovie");
static_assert(sizeof(TLBuilderCommands_TLShowLoadingScreenMovie) == 0x00000C, "Wrong size on TLBuilderCommands_TLShowLoadingScreenMovie");
static_assert(offsetof(TLBuilderCommands_TLShowLoadingScreenMovie, bInShow) == 0x000000, "Member 'TLBuilderCommands_TLShowLoadingScreenMovie::bInShow' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowLoadingScreenMovie, InMovieTableKey) == 0x000004, "Member 'TLBuilderCommands_TLShowLoadingScreenMovie::InMovieTableKey' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowMapDebugShape
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLShowMapDebugShape final
{
public:
	int32                                         InShow;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowMapDebugShape) == 0x000004, "Wrong alignment on TLBuilderCommands_TLShowMapDebugShape");
static_assert(sizeof(TLBuilderCommands_TLShowMapDebugShape) == 0x000004, "Wrong size on TLBuilderCommands_TLShowMapDebugShape");
static_assert(offsetof(TLBuilderCommands_TLShowMapDebugShape, InShow) == 0x000000, "Member 'TLBuilderCommands_TLShowMapDebugShape::InShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowMapDebugShapeByGUID
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLShowMapDebugShapeByGUID final
{
public:
	class FString                                 InStringGUID;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowMapDebugShapeByGUID) == 0x000008, "Wrong alignment on TLBuilderCommands_TLShowMapDebugShapeByGUID");
static_assert(sizeof(TLBuilderCommands_TLShowMapDebugShapeByGUID) == 0x000010, "Wrong size on TLBuilderCommands_TLShowMapDebugShapeByGUID");
static_assert(offsetof(TLBuilderCommands_TLShowMapDebugShapeByGUID, InStringGUID) == 0x000000, "Member 'TLBuilderCommands_TLShowMapDebugShapeByGUID::InStringGUID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowMapDebugShapeDetail
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLShowMapDebugShapeDetail final
{
public:
	int32                                         InShow;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InShapeType;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowMapDebugShapeDetail) == 0x000004, "Wrong alignment on TLBuilderCommands_TLShowMapDebugShapeDetail");
static_assert(sizeof(TLBuilderCommands_TLShowMapDebugShapeDetail) == 0x000008, "Wrong size on TLBuilderCommands_TLShowMapDebugShapeDetail");
static_assert(offsetof(TLBuilderCommands_TLShowMapDebugShapeDetail, InShow) == 0x000000, "Member 'TLBuilderCommands_TLShowMapDebugShapeDetail::InShow' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowMapDebugShapeDetail, InShapeType) == 0x000004, "Member 'TLBuilderCommands_TLShowMapDebugShapeDetail::InShapeType' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowMapIcon
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLShowMapIcon final
{
public:
	int32                                         InShow;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowMapIcon) == 0x000004, "Wrong alignment on TLBuilderCommands_TLShowMapIcon");
static_assert(sizeof(TLBuilderCommands_TLShowMapIcon) == 0x000004, "Wrong size on TLBuilderCommands_TLShowMapIcon");
static_assert(offsetof(TLBuilderCommands_TLShowMapIcon, InShow) == 0x000000, "Member 'TLBuilderCommands_TLShowMapIcon::InShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowMapRegionInfo
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLShowMapRegionInfo final
{
public:
	uint64                                        InWorldHierarchyGUID;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowMapRegionInfo) == 0x000008, "Wrong alignment on TLBuilderCommands_TLShowMapRegionInfo");
static_assert(sizeof(TLBuilderCommands_TLShowMapRegionInfo) == 0x000008, "Wrong size on TLBuilderCommands_TLShowMapRegionInfo");
static_assert(offsetof(TLBuilderCommands_TLShowMapRegionInfo, InWorldHierarchyGUID) == 0x000000, "Member 'TLBuilderCommands_TLShowMapRegionInfo::InWorldHierarchyGUID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowMapScale
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLShowMapScale final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowMapScale) == 0x000001, "Wrong alignment on TLBuilderCommands_TLShowMapScale");
static_assert(sizeof(TLBuilderCommands_TLShowMapScale) == 0x000001, "Wrong size on TLBuilderCommands_TLShowMapScale");
static_assert(offsetof(TLBuilderCommands_TLShowMapScale, bInShow) == 0x000000, "Member 'TLBuilderCommands_TLShowMapScale::bInShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowNCSPenaltyMessage
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLShowNCSPenaltyMessage final
{
public:
	int32                                         InBanReasonCode;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPermanentBan;                                   // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLShowNCSPenaltyMessage) == 0x000004, "Wrong alignment on TLBuilderCommands_TLShowNCSPenaltyMessage");
static_assert(sizeof(TLBuilderCommands_TLShowNCSPenaltyMessage) == 0x000008, "Wrong size on TLBuilderCommands_TLShowNCSPenaltyMessage");
static_assert(offsetof(TLBuilderCommands_TLShowNCSPenaltyMessage, InBanReasonCode) == 0x000000, "Member 'TLBuilderCommands_TLShowNCSPenaltyMessage::InBanReasonCode' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowNCSPenaltyMessage, bInPermanentBan) == 0x000004, "Member 'TLBuilderCommands_TLShowNCSPenaltyMessage::bInPermanentBan' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowPenaltyMessage
// 0x0030 (0x0030 - 0x0000)
struct TLBuilderCommands_TLShowPenaltyMessage final
{
public:
	bool                                          bIsLobby;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InPolicyTypeAlias;                                 // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InAcknowledgeId;                                   // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InExpireMilliseconds;                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLShowPenaltyMessage) == 0x000008, "Wrong alignment on TLBuilderCommands_TLShowPenaltyMessage");
static_assert(sizeof(TLBuilderCommands_TLShowPenaltyMessage) == 0x000030, "Wrong size on TLBuilderCommands_TLShowPenaltyMessage");
static_assert(offsetof(TLBuilderCommands_TLShowPenaltyMessage, bIsLobby) == 0x000000, "Member 'TLBuilderCommands_TLShowPenaltyMessage::bIsLobby' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowPenaltyMessage, InPolicyTypeAlias) == 0x000008, "Member 'TLBuilderCommands_TLShowPenaltyMessage::InPolicyTypeAlias' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowPenaltyMessage, InAcknowledgeId) == 0x000018, "Member 'TLBuilderCommands_TLShowPenaltyMessage::InAcknowledgeId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowPenaltyMessage, InExpireMilliseconds) == 0x000028, "Member 'TLBuilderCommands_TLShowPenaltyMessage::InExpireMilliseconds' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowPlatformStore
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLShowPlatformStore final
{
public:
	class FString                                 ProductId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowPlatformStore) == 0x000008, "Wrong alignment on TLBuilderCommands_TLShowPlatformStore");
static_assert(sizeof(TLBuilderCommands_TLShowPlatformStore) == 0x000010, "Wrong size on TLBuilderCommands_TLShowPlatformStore");
static_assert(offsetof(TLBuilderCommands_TLShowPlatformStore, ProductId) == 0x000000, "Member 'TLBuilderCommands_TLShowPlatformStore::ProductId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowRadialOtherPcMenu
// 0x0002 (0x0002 - 0x0000)
struct TLBuilderCommands_TLShowRadialOtherPcMenu final
{
public:
	bool                                          InParty;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PartyReader;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowRadialOtherPcMenu) == 0x000001, "Wrong alignment on TLBuilderCommands_TLShowRadialOtherPcMenu");
static_assert(sizeof(TLBuilderCommands_TLShowRadialOtherPcMenu) == 0x000002, "Wrong size on TLBuilderCommands_TLShowRadialOtherPcMenu");
static_assert(offsetof(TLBuilderCommands_TLShowRadialOtherPcMenu, InParty) == 0x000000, "Member 'TLBuilderCommands_TLShowRadialOtherPcMenu::InParty' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowRadialOtherPcMenu, PartyReader) == 0x000001, "Member 'TLBuilderCommands_TLShowRadialOtherPcMenu::PartyReader' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowRanking
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLShowRanking final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowRanking) == 0x000001, "Wrong alignment on TLBuilderCommands_TLShowRanking");
static_assert(sizeof(TLBuilderCommands_TLShowRanking) == 0x000001, "Wrong size on TLBuilderCommands_TLShowRanking");
static_assert(offsetof(TLBuilderCommands_TLShowRanking, InShow) == 0x000000, "Member 'TLBuilderCommands_TLShowRanking::InShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowRealmInfo
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLShowRealmInfo final
{
public:
	int32                                         InRealmID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowRealmInfo) == 0x000004, "Wrong alignment on TLBuilderCommands_TLShowRealmInfo");
static_assert(sizeof(TLBuilderCommands_TLShowRealmInfo) == 0x000004, "Wrong size on TLBuilderCommands_TLShowRealmInfo");
static_assert(offsetof(TLBuilderCommands_TLShowRealmInfo, InRealmID) == 0x000000, "Member 'TLBuilderCommands_TLShowRealmInfo::InRealmID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowRegionScreenMessage
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLShowRegionScreenMessage final
{
public:
	uint8                                         InCurRegionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowRegionScreenMessage) == 0x000001, "Wrong alignment on TLBuilderCommands_TLShowRegionScreenMessage");
static_assert(sizeof(TLBuilderCommands_TLShowRegionScreenMessage) == 0x000001, "Wrong size on TLBuilderCommands_TLShowRegionScreenMessage");
static_assert(offsetof(TLBuilderCommands_TLShowRegionScreenMessage, InCurRegionType) == 0x000000, "Member 'TLBuilderCommands_TLShowRegionScreenMessage::InCurRegionType' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowRegionTypeChangeScreenMessage
// 0x0002 (0x0002 - 0x0000)
struct TLBuilderCommands_TLShowRegionTypeChangeScreenMessage final
{
public:
	uint8                                         InPrevRegionType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InCurRegionType;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowRegionTypeChangeScreenMessage) == 0x000001, "Wrong alignment on TLBuilderCommands_TLShowRegionTypeChangeScreenMessage");
static_assert(sizeof(TLBuilderCommands_TLShowRegionTypeChangeScreenMessage) == 0x000002, "Wrong size on TLBuilderCommands_TLShowRegionTypeChangeScreenMessage");
static_assert(offsetof(TLBuilderCommands_TLShowRegionTypeChangeScreenMessage, InPrevRegionType) == 0x000000, "Member 'TLBuilderCommands_TLShowRegionTypeChangeScreenMessage::InPrevRegionType' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowRegionTypeChangeScreenMessage, InCurRegionType) == 0x000001, "Member 'TLBuilderCommands_TLShowRegionTypeChangeScreenMessage::InCurRegionType' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowRuneEnchantLevel
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLShowRuneEnchantLevel final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowRuneEnchantLevel) == 0x000001, "Wrong alignment on TLBuilderCommands_TLShowRuneEnchantLevel");
static_assert(sizeof(TLBuilderCommands_TLShowRuneEnchantLevel) == 0x000001, "Wrong size on TLBuilderCommands_TLShowRuneEnchantLevel");
static_assert(offsetof(TLBuilderCommands_TLShowRuneEnchantLevel, InIsActive) == 0x000000, "Member 'TLBuilderCommands_TLShowRuneEnchantLevel::InIsActive' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowSeasonPassAction
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLShowSeasonPassAction final
{
public:
	uint64                                        InPassGuid;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InAddPoint;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InAddBonusPoint;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowSeasonPassAction) == 0x000008, "Wrong alignment on TLBuilderCommands_TLShowSeasonPassAction");
static_assert(sizeof(TLBuilderCommands_TLShowSeasonPassAction) == 0x000010, "Wrong size on TLBuilderCommands_TLShowSeasonPassAction");
static_assert(offsetof(TLBuilderCommands_TLShowSeasonPassAction, InPassGuid) == 0x000000, "Member 'TLBuilderCommands_TLShowSeasonPassAction::InPassGuid' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowSeasonPassAction, InAddPoint) == 0x000008, "Member 'TLBuilderCommands_TLShowSeasonPassAction::InAddPoint' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowSeasonPassAction, InAddBonusPoint) == 0x00000C, "Member 'TLBuilderCommands_TLShowSeasonPassAction::InAddBonusPoint' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowServerStatus
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLShowServerStatus final
{
public:
	int32                                         PageSize;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageNo;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowServerStatus) == 0x000004, "Wrong alignment on TLBuilderCommands_TLShowServerStatus");
static_assert(sizeof(TLBuilderCommands_TLShowServerStatus) == 0x000008, "Wrong size on TLBuilderCommands_TLShowServerStatus");
static_assert(offsetof(TLBuilderCommands_TLShowServerStatus, PageSize) == 0x000000, "Member 'TLBuilderCommands_TLShowServerStatus::PageSize' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowServerStatus, PageNo) == 0x000004, "Member 'TLBuilderCommands_TLShowServerStatus::PageNo' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowSpecificUI
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLShowSpecificUI final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowSpecificUI) == 0x000001, "Wrong alignment on TLBuilderCommands_TLShowSpecificUI");
static_assert(sizeof(TLBuilderCommands_TLShowSpecificUI) == 0x000001, "Wrong size on TLBuilderCommands_TLShowSpecificUI");
static_assert(offsetof(TLBuilderCommands_TLShowSpecificUI, bInShow) == 0x000000, "Member 'TLBuilderCommands_TLShowSpecificUI::bInShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowSubtitle
// 0x0020 (0x0020 - 0x0000)
struct TLBuilderCommands_TLShowSubtitle final
{
public:
	class FString                                 InMsg;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InSpeakerText;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowSubtitle) == 0x000008, "Wrong alignment on TLBuilderCommands_TLShowSubtitle");
static_assert(sizeof(TLBuilderCommands_TLShowSubtitle) == 0x000020, "Wrong size on TLBuilderCommands_TLShowSubtitle");
static_assert(offsetof(TLBuilderCommands_TLShowSubtitle, InMsg) == 0x000000, "Member 'TLBuilderCommands_TLShowSubtitle::InMsg' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowSubtitle, InSpeakerText) == 0x000010, "Member 'TLBuilderCommands_TLShowSubtitle::InSpeakerText' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowSystemMessage
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLShowSystemMessage final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Args;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowSystemMessage) == 0x000008, "Wrong alignment on TLBuilderCommands_TLShowSystemMessage");
static_assert(sizeof(TLBuilderCommands_TLShowSystemMessage) == 0x000018, "Wrong size on TLBuilderCommands_TLShowSystemMessage");
static_assert(offsetof(TLBuilderCommands_TLShowSystemMessage, Name_0) == 0x000000, "Member 'TLBuilderCommands_TLShowSystemMessage::Name_0' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowSystemMessage, Args) == 0x000008, "Member 'TLBuilderCommands_TLShowSystemMessage::Args' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowSystemMessageEmblem
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLShowSystemMessageEmblem final
{
public:
	bool                                          InIsRelationMark;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowSystemMessageEmblem) == 0x000001, "Wrong alignment on TLBuilderCommands_TLShowSystemMessageEmblem");
static_assert(sizeof(TLBuilderCommands_TLShowSystemMessageEmblem) == 0x000001, "Wrong size on TLBuilderCommands_TLShowSystemMessageEmblem");
static_assert(offsetof(TLBuilderCommands_TLShowSystemMessageEmblem, InIsRelationMark) == 0x000000, "Member 'TLBuilderCommands_TLShowSystemMessageEmblem::InIsRelationMark' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowSystemMessageWithRepeatCheck
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLShowSystemMessageWithRepeatCheck final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowSystemMessageWithRepeatCheck) == 0x000004, "Wrong alignment on TLBuilderCommands_TLShowSystemMessageWithRepeatCheck");
static_assert(sizeof(TLBuilderCommands_TLShowSystemMessageWithRepeatCheck) == 0x000008, "Wrong size on TLBuilderCommands_TLShowSystemMessageWithRepeatCheck");
static_assert(offsetof(TLBuilderCommands_TLShowSystemMessageWithRepeatCheck, Name_0) == 0x000000, "Member 'TLBuilderCommands_TLShowSystemMessageWithRepeatCheck::Name_0' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowUI
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLShowUI final
{
public:
	class FName                                   InTableUIKey;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShow;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLShowUI) == 0x000004, "Wrong alignment on TLBuilderCommands_TLShowUI");
static_assert(sizeof(TLBuilderCommands_TLShowUI) == 0x00000C, "Wrong size on TLBuilderCommands_TLShowUI");
static_assert(offsetof(TLBuilderCommands_TLShowUI, InTableUIKey) == 0x000000, "Member 'TLBuilderCommands_TLShowUI::InTableUIKey' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowUI, bShow) == 0x000008, "Member 'TLBuilderCommands_TLShowUI::bShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLShowWebView
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLShowWebView final
{
public:
	bool                                          bInVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InUrl;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLShowWebView) == 0x000008, "Wrong alignment on TLBuilderCommands_TLShowWebView");
static_assert(sizeof(TLBuilderCommands_TLShowWebView) == 0x000018, "Wrong size on TLBuilderCommands_TLShowWebView");
static_assert(offsetof(TLBuilderCommands_TLShowWebView, bInVisibility) == 0x000000, "Member 'TLBuilderCommands_TLShowWebView::bInVisibility' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLShowWebView, InUrl) == 0x000008, "Member 'TLBuilderCommands_TLShowWebView::InUrl' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSiegetheDayArenaSetting
// 0x0020 (0x0020 - 0x0000)
struct TLBuilderCommands_TLSiegetheDayArenaSetting final
{
public:
	class FString                                 Team1ID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Team2ID;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSiegetheDayArenaSetting) == 0x000008, "Wrong alignment on TLBuilderCommands_TLSiegetheDayArenaSetting");
static_assert(sizeof(TLBuilderCommands_TLSiegetheDayArenaSetting) == 0x000020, "Wrong size on TLBuilderCommands_TLSiegetheDayArenaSetting");
static_assert(offsetof(TLBuilderCommands_TLSiegetheDayArenaSetting, Team1ID) == 0x000000, "Member 'TLBuilderCommands_TLSiegetheDayArenaSetting::Team1ID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSiegetheDayArenaSetting, Team2ID) == 0x000010, "Member 'TLBuilderCommands_TLSiegetheDayArenaSetting::Team2ID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSiegetheDayTeamAdd
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLSiegetheDayTeamAdd final
{
public:
	int64                                         InGuildId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InRowName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSiegetheDayTeamAdd) == 0x000008, "Wrong alignment on TLBuilderCommands_TLSiegetheDayTeamAdd");
static_assert(sizeof(TLBuilderCommands_TLSiegetheDayTeamAdd) == 0x000010, "Wrong size on TLBuilderCommands_TLSiegetheDayTeamAdd");
static_assert(offsetof(TLBuilderCommands_TLSiegetheDayTeamAdd, InGuildId) == 0x000000, "Member 'TLBuilderCommands_TLSiegetheDayTeamAdd::InGuildId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSiegetheDayTeamAdd, InRowName) == 0x000008, "Member 'TLBuilderCommands_TLSiegetheDayTeamAdd::InRowName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSiegetheDayTeamRemove
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSiegetheDayTeamRemove final
{
public:
	int64                                         InGuildId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSiegetheDayTeamRemove) == 0x000008, "Wrong alignment on TLBuilderCommands_TLSiegetheDayTeamRemove");
static_assert(sizeof(TLBuilderCommands_TLSiegetheDayTeamRemove) == 0x000008, "Wrong size on TLBuilderCommands_TLSiegetheDayTeamRemove");
static_assert(offsetof(TLBuilderCommands_TLSiegetheDayTeamRemove, InGuildId) == 0x000000, "Member 'TLBuilderCommands_TLSiegetheDayTeamRemove::InGuildId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSiegeWarfareUsurpingMark
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSiegeWarfareUsurpingMark final
{
public:
	int32                                         InObjectId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InShowCrown;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLSiegeWarfareUsurpingMark) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSiegeWarfareUsurpingMark");
static_assert(sizeof(TLBuilderCommands_TLSiegeWarfareUsurpingMark) == 0x000008, "Wrong size on TLBuilderCommands_TLSiegeWarfareUsurpingMark");
static_assert(offsetof(TLBuilderCommands_TLSiegeWarfareUsurpingMark, InObjectId) == 0x000000, "Member 'TLBuilderCommands_TLSiegeWarfareUsurpingMark::InObjectId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSiegeWarfareUsurpingMark, InShowCrown) == 0x000004, "Member 'TLBuilderCommands_TLSiegeWarfareUsurpingMark::InShowCrown' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSkillContextStatusChange
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLSkillContextStatusChange final
{
public:
	int32                                         SlotId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotStatus;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToggle;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLSkillContextStatusChange) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSkillContextStatusChange");
static_assert(sizeof(TLBuilderCommands_TLSkillContextStatusChange) == 0x00000C, "Wrong size on TLBuilderCommands_TLSkillContextStatusChange");
static_assert(offsetof(TLBuilderCommands_TLSkillContextStatusChange, SlotId) == 0x000000, "Member 'TLBuilderCommands_TLSkillContextStatusChange::SlotId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSkillContextStatusChange, SlotStatus) == 0x000004, "Member 'TLBuilderCommands_TLSkillContextStatusChange::SlotStatus' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSkillContextStatusChange, bToggle) == 0x000008, "Member 'TLBuilderCommands_TLSkillContextStatusChange::bToggle' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSkillGather
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLSkillGather final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSkillGather) == 0x000001, "Wrong alignment on TLBuilderCommands_TLSkillGather");
static_assert(sizeof(TLBuilderCommands_TLSkillGather) == 0x000001, "Wrong size on TLBuilderCommands_TLSkillGather");
static_assert(offsetof(TLBuilderCommands_TLSkillGather, bShow) == 0x000000, "Member 'TLBuilderCommands_TLSkillGather::bShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSkillGatherResult
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLSkillGatherResult final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSkillGatherResult) == 0x000001, "Wrong alignment on TLBuilderCommands_TLSkillGatherResult");
static_assert(sizeof(TLBuilderCommands_TLSkillGatherResult) == 0x000001, "Wrong size on TLBuilderCommands_TLSkillGatherResult");
static_assert(offsetof(TLBuilderCommands_TLSkillGatherResult, bShow) == 0x000000, "Member 'TLBuilderCommands_TLSkillGatherResult::bShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSkillLevelUpSceneResult
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLSkillLevelUpSceneResult final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSkillLevelUpSceneResult) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSkillLevelUpSceneResult");
static_assert(sizeof(TLBuilderCommands_TLSkillLevelUpSceneResult) == 0x000004, "Wrong size on TLBuilderCommands_TLSkillLevelUpSceneResult");
static_assert(offsetof(TLBuilderCommands_TLSkillLevelUpSceneResult, InIndex) == 0x000000, "Member 'TLBuilderCommands_TLSkillLevelUpSceneResult::InIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSkillMoveDebug
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLSkillMoveDebug final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSkillMoveDebug) == 0x000001, "Wrong alignment on TLBuilderCommands_TLSkillMoveDebug");
static_assert(sizeof(TLBuilderCommands_TLSkillMoveDebug) == 0x000001, "Wrong size on TLBuilderCommands_TLSkillMoveDebug");
static_assert(offsetof(TLBuilderCommands_TLSkillMoveDebug, bShow) == 0x000000, "Member 'TLBuilderCommands_TLSkillMoveDebug::bShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSkillUnlockScreenMessage
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLSkillUnlockScreenMessage final
{
public:
	int32                                         EquipWeaponSkillComplexId1;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipWeaponSkillComplexId2;                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewAcquiredSkillNum;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSkillUnlockScreenMessage) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSkillUnlockScreenMessage");
static_assert(sizeof(TLBuilderCommands_TLSkillUnlockScreenMessage) == 0x00000C, "Wrong size on TLBuilderCommands_TLSkillUnlockScreenMessage");
static_assert(offsetof(TLBuilderCommands_TLSkillUnlockScreenMessage, EquipWeaponSkillComplexId1) == 0x000000, "Member 'TLBuilderCommands_TLSkillUnlockScreenMessage::EquipWeaponSkillComplexId1' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSkillUnlockScreenMessage, EquipWeaponSkillComplexId2) == 0x000004, "Member 'TLBuilderCommands_TLSkillUnlockScreenMessage::EquipWeaponSkillComplexId2' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSkillUnlockScreenMessage, NewAcquiredSkillNum) == 0x000008, "Member 'TLBuilderCommands_TLSkillUnlockScreenMessage::NewAcquiredSkillNum' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSpeakDialogue
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLSpeakDialogue final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DialogueId;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSpeakDialogue) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSpeakDialogue");
static_assert(sizeof(TLBuilderCommands_TLSpeakDialogue) == 0x00000C, "Wrong size on TLBuilderCommands_TLSpeakDialogue");
static_assert(offsetof(TLBuilderCommands_TLSpeakDialogue, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLSpeakDialogue::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSpeakDialogue, DialogueId) == 0x000004, "Member 'TLBuilderCommands_TLSpeakDialogue::DialogueId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSpeakDialogueTarget
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSpeakDialogueTarget final
{
public:
	class FName                                   DialogueId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSpeakDialogueTarget) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSpeakDialogueTarget");
static_assert(sizeof(TLBuilderCommands_TLSpeakDialogueTarget) == 0x000008, "Wrong size on TLBuilderCommands_TLSpeakDialogueTarget");
static_assert(offsetof(TLBuilderCommands_TLSpeakDialogueTarget, DialogueId) == 0x000000, "Member 'TLBuilderCommands_TLSpeakDialogueTarget::DialogueId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSpecialShop
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSpecialShop final
{
public:
	class FName                                   InGoodsName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSpecialShop) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSpecialShop");
static_assert(sizeof(TLBuilderCommands_TLSpecialShop) == 0x000008, "Wrong size on TLBuilderCommands_TLSpecialShop");
static_assert(offsetof(TLBuilderCommands_TLSpecialShop, InGoodsName) == 0x000000, "Member 'TLBuilderCommands_TLSpecialShop::InGoodsName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSpecialShopCategoryFromNP
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLSpecialShopCategoryFromNP final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSpecialShopCategoryFromNP) == 0x000001, "Wrong alignment on TLBuilderCommands_TLSpecialShopCategoryFromNP");
static_assert(sizeof(TLBuilderCommands_TLSpecialShopCategoryFromNP) == 0x000001, "Wrong size on TLBuilderCommands_TLSpecialShopCategoryFromNP");
static_assert(offsetof(TLBuilderCommands_TLSpecialShopCategoryFromNP, InIsActive) == 0x000000, "Member 'TLBuilderCommands_TLSpecialShopCategoryFromNP::InIsActive' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLStartCasting
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLStartCasting final
{
public:
	float                                         DurationSec;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartSec;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLStartCasting) == 0x000004, "Wrong alignment on TLBuilderCommands_TLStartCasting");
static_assert(sizeof(TLBuilderCommands_TLStartCasting) == 0x000008, "Wrong size on TLBuilderCommands_TLStartCasting");
static_assert(offsetof(TLBuilderCommands_TLStartCasting, DurationSec) == 0x000000, "Member 'TLBuilderCommands_TLStartCasting::DurationSec' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLStartCasting, StartSec) == 0x000004, "Member 'TLBuilderCommands_TLStartCasting::StartSec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLStartInstanceMapGuideEvent
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLStartInstanceMapGuideEvent final
{
public:
	int64                                         InUnitGuid;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLStartInstanceMapGuideEvent) == 0x000008, "Wrong alignment on TLBuilderCommands_TLStartInstanceMapGuideEvent");
static_assert(sizeof(TLBuilderCommands_TLStartInstanceMapGuideEvent) == 0x000008, "Wrong size on TLBuilderCommands_TLStartInstanceMapGuideEvent");
static_assert(offsetof(TLBuilderCommands_TLStartInstanceMapGuideEvent, InUnitGuid) == 0x000000, "Member 'TLBuilderCommands_TLStartInstanceMapGuideEvent::InUnitGuid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLStartMapId
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLStartMapId final
{
public:
	int32                                         ForceStartMapId;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLStartMapId) == 0x000004, "Wrong alignment on TLBuilderCommands_TLStartMapId");
static_assert(sizeof(TLBuilderCommands_TLStartMapId) == 0x000004, "Wrong size on TLBuilderCommands_TLStartMapId");
static_assert(offsetof(TLBuilderCommands_TLStartMapId, ForceStartMapId) == 0x000000, "Member 'TLBuilderCommands_TLStartMapId::ForceStartMapId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLStartMapIdPosition
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLStartMapIdPosition final
{
public:
	int32                                         ForceStartMapId;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLStartMapIdPosition) == 0x000004, "Wrong alignment on TLBuilderCommands_TLStartMapIdPosition");
static_assert(sizeof(TLBuilderCommands_TLStartMapIdPosition) == 0x000010, "Wrong size on TLBuilderCommands_TLStartMapIdPosition");
static_assert(offsetof(TLBuilderCommands_TLStartMapIdPosition, ForceStartMapId) == 0x000000, "Member 'TLBuilderCommands_TLStartMapIdPosition::ForceStartMapId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLStartMapIdPosition, X) == 0x000004, "Member 'TLBuilderCommands_TLStartMapIdPosition::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLStartMapIdPosition, Y) == 0x000008, "Member 'TLBuilderCommands_TLStartMapIdPosition::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLStartMapIdPosition, Z) == 0x00000C, "Member 'TLBuilderCommands_TLStartMapIdPosition::Z' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLStopCasting
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLStopCasting final
{
public:
	int32                                         Reason;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLStopCasting) == 0x000004, "Wrong alignment on TLBuilderCommands_TLStopCasting");
static_assert(sizeof(TLBuilderCommands_TLStopCasting) == 0x000004, "Wrong size on TLBuilderCommands_TLStopCasting");
static_assert(offsetof(TLBuilderCommands_TLStopCasting, Reason) == 0x000000, "Member 'TLBuilderCommands_TLStopCasting::Reason' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLStopCueSheet
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLStopCueSheet final
{
public:
	class FName                                   InCueSheetKey;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDurationSec;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLStopCueSheet) == 0x000004, "Wrong alignment on TLBuilderCommands_TLStopCueSheet");
static_assert(sizeof(TLBuilderCommands_TLStopCueSheet) == 0x00000C, "Wrong size on TLBuilderCommands_TLStopCueSheet");
static_assert(offsetof(TLBuilderCommands_TLStopCueSheet, InCueSheetKey) == 0x000000, "Member 'TLBuilderCommands_TLStopCueSheet::InCueSheetKey' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLStopCueSheet, InDurationSec) == 0x000008, "Member 'TLBuilderCommands_TLStopCueSheet::InDurationSec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLStopCutsceneFromServer
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLStopCutsceneFromServer final
{
public:
	class FName                                   CutSceneID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLStopCutsceneFromServer) == 0x000004, "Wrong alignment on TLBuilderCommands_TLStopCutsceneFromServer");
static_assert(sizeof(TLBuilderCommands_TLStopCutsceneFromServer) == 0x000008, "Wrong size on TLBuilderCommands_TLStopCutsceneFromServer");
static_assert(offsetof(TLBuilderCommands_TLStopCutsceneFromServer, CutSceneID) == 0x000000, "Member 'TLBuilderCommands_TLStopCutsceneFromServer::CutSceneID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLStopMusic
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLStopMusic final
{
public:
	uint32                                        InMusicPlayingID;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLStopMusic) == 0x000004, "Wrong alignment on TLBuilderCommands_TLStopMusic");
static_assert(sizeof(TLBuilderCommands_TLStopMusic) == 0x000004, "Wrong size on TLBuilderCommands_TLStopMusic");
static_assert(offsetof(TLBuilderCommands_TLStopMusic, InMusicPlayingID) == 0x000000, "Member 'TLBuilderCommands_TLStopMusic::InMusicPlayingID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLStorage
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLStorage final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLStorage) == 0x000001, "Wrong alignment on TLBuilderCommands_TLStorage");
static_assert(sizeof(TLBuilderCommands_TLStorage) == 0x000001, "Wrong size on TLBuilderCommands_TLStorage");
static_assert(offsetof(TLBuilderCommands_TLStorage, bShow) == 0x000000, "Member 'TLBuilderCommands_TLStorage::bShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLStringUtil
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLStringUtil final
{
public:
	class FString                                 InArgs;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLStringUtil) == 0x000008, "Wrong alignment on TLBuilderCommands_TLStringUtil");
static_assert(sizeof(TLBuilderCommands_TLStringUtil) == 0x000010, "Wrong size on TLBuilderCommands_TLStringUtil");
static_assert(offsetof(TLBuilderCommands_TLStringUtil, InArgs) == 0x000000, "Member 'TLBuilderCommands_TLStringUtil::InArgs' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSubStanceChange
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSubStanceChange final
{
public:
	class FName                                   SubStanceName;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSubStanceChange) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSubStanceChange");
static_assert(sizeof(TLBuilderCommands_TLSubStanceChange) == 0x000008, "Wrong size on TLBuilderCommands_TLSubStanceChange");
static_assert(offsetof(TLBuilderCommands_TLSubStanceChange, SubStanceName) == 0x000000, "Member 'TLBuilderCommands_TLSubStanceChange::SubStanceName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSummonCarrier
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLSummonCarrier final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSummonCarrier) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSummonCarrier");
static_assert(sizeof(TLBuilderCommands_TLSummonCarrier) == 0x000004, "Wrong size on TLBuilderCommands_TLSummonCarrier");
static_assert(offsetof(TLBuilderCommands_TLSummonCarrier, InID) == 0x000000, "Member 'TLBuilderCommands_TLSummonCarrier::InID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSummonCarrierPos
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLSummonCarrierPos final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSummonCarrierPos) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSummonCarrierPos");
static_assert(sizeof(TLBuilderCommands_TLSummonCarrierPos) == 0x000010, "Wrong size on TLBuilderCommands_TLSummonCarrierPos");
static_assert(offsetof(TLBuilderCommands_TLSummonCarrierPos, InID) == 0x000000, "Member 'TLBuilderCommands_TLSummonCarrierPos::InID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSummonCarrierPos, X) == 0x000004, "Member 'TLBuilderCommands_TLSummonCarrierPos::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSummonCarrierPos, Y) == 0x000008, "Member 'TLBuilderCommands_TLSummonCarrierPos::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSummonCarrierPos, Z) == 0x00000C, "Member 'TLBuilderCommands_TLSummonCarrierPos::Z' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSummonFo
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSummonFo final
{
public:
	int32                                         ClassId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSummonFo) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSummonFo");
static_assert(sizeof(TLBuilderCommands_TLSummonFo) == 0x000008, "Wrong size on TLBuilderCommands_TLSummonFo");
static_assert(offsetof(TLBuilderCommands_TLSummonFo, ClassId) == 0x000000, "Member 'TLBuilderCommands_TLSummonFo::ClassId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSummonFo, Count) == 0x000004, "Member 'TLBuilderCommands_TLSummonFo::Count' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSummonFoByName
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLSummonFoByName final
{
public:
	class FName                                   FoName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSummonFoByName) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSummonFoByName");
static_assert(sizeof(TLBuilderCommands_TLSummonFoByName) == 0x00000C, "Wrong size on TLBuilderCommands_TLSummonFoByName");
static_assert(offsetof(TLBuilderCommands_TLSummonFoByName, FoName) == 0x000000, "Member 'TLBuilderCommands_TLSummonFoByName::FoName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSummonFoByName, Count) == 0x000008, "Member 'TLBuilderCommands_TLSummonFoByName::Count' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSummonFoWithAngle
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSummonFoWithAngle final
{
public:
	int32                                         ClassId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Degree;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSummonFoWithAngle) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSummonFoWithAngle");
static_assert(sizeof(TLBuilderCommands_TLSummonFoWithAngle) == 0x000008, "Wrong size on TLBuilderCommands_TLSummonFoWithAngle");
static_assert(offsetof(TLBuilderCommands_TLSummonFoWithAngle, ClassId) == 0x000000, "Member 'TLBuilderCommands_TLSummonFoWithAngle::ClassId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSummonFoWithAngle, Degree) == 0x000004, "Member 'TLBuilderCommands_TLSummonFoWithAngle::Degree' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSummonMagicDoll
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLSummonMagicDoll final
{
public:
	int32                                         InTableUid;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSummonMagicDoll) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSummonMagicDoll");
static_assert(sizeof(TLBuilderCommands_TLSummonMagicDoll) == 0x000004, "Wrong size on TLBuilderCommands_TLSummonMagicDoll");
static_assert(offsetof(TLBuilderCommands_TLSummonMagicDoll, InTableUid) == 0x000000, "Member 'TLBuilderCommands_TLSummonMagicDoll::InTableUid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSummonNpc
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSummonNpc final
{
public:
	int32                                         ClassId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSummonNpc) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSummonNpc");
static_assert(sizeof(TLBuilderCommands_TLSummonNpc) == 0x000008, "Wrong size on TLBuilderCommands_TLSummonNpc");
static_assert(offsetof(TLBuilderCommands_TLSummonNpc, ClassId) == 0x000000, "Member 'TLBuilderCommands_TLSummonNpc::ClassId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSummonNpc, Count) == 0x000004, "Member 'TLBuilderCommands_TLSummonNpc::Count' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSummonNPCAroundMe
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLSummonNPCAroundMe final
{
public:
	int32                                         ClassId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSummonNPCAroundMe) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSummonNPCAroundMe");
static_assert(sizeof(TLBuilderCommands_TLSummonNPCAroundMe) == 0x00000C, "Wrong size on TLBuilderCommands_TLSummonNPCAroundMe");
static_assert(offsetof(TLBuilderCommands_TLSummonNPCAroundMe, ClassId) == 0x000000, "Member 'TLBuilderCommands_TLSummonNPCAroundMe::ClassId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSummonNPCAroundMe, Radius) == 0x000004, "Member 'TLBuilderCommands_TLSummonNPCAroundMe::Radius' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSummonNPCAroundMe, Num) == 0x000008, "Member 'TLBuilderCommands_TLSummonNPCAroundMe::Num' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSummonNpcAtMouse
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSummonNpcAtMouse final
{
public:
	int32                                         ClassId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSummonNpcAtMouse) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSummonNpcAtMouse");
static_assert(sizeof(TLBuilderCommands_TLSummonNpcAtMouse) == 0x000008, "Wrong size on TLBuilderCommands_TLSummonNpcAtMouse");
static_assert(offsetof(TLBuilderCommands_TLSummonNpcAtMouse, ClassId) == 0x000000, "Member 'TLBuilderCommands_TLSummonNpcAtMouse::ClassId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSummonNpcAtMouse, Count) == 0x000004, "Member 'TLBuilderCommands_TLSummonNpcAtMouse::Count' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSummonNpcByName
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLSummonNpcByName final
{
public:
	class FName                                   NpcName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSummonNpcByName) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSummonNpcByName");
static_assert(sizeof(TLBuilderCommands_TLSummonNpcByName) == 0x00000C, "Wrong size on TLBuilderCommands_TLSummonNpcByName");
static_assert(offsetof(TLBuilderCommands_TLSummonNpcByName, NpcName) == 0x000000, "Member 'TLBuilderCommands_TLSummonNpcByName::NpcName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSummonNpcByName, Count) == 0x000008, "Member 'TLBuilderCommands_TLSummonNpcByName::Count' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSummonNpcWithMotion
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLSummonNpcWithMotion final
{
public:
	int32                                         ClassId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryMotionId;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopMotionId;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopMotionDurationMs;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSummonNpcWithMotion) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSummonNpcWithMotion");
static_assert(sizeof(TLBuilderCommands_TLSummonNpcWithMotion) == 0x000010, "Wrong size on TLBuilderCommands_TLSummonNpcWithMotion");
static_assert(offsetof(TLBuilderCommands_TLSummonNpcWithMotion, ClassId) == 0x000000, "Member 'TLBuilderCommands_TLSummonNpcWithMotion::ClassId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSummonNpcWithMotion, EntryMotionId) == 0x000004, "Member 'TLBuilderCommands_TLSummonNpcWithMotion::EntryMotionId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSummonNpcWithMotion, LoopMotionId) == 0x000008, "Member 'TLBuilderCommands_TLSummonNpcWithMotion::LoopMotionId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSummonNpcWithMotion, LoopMotionDurationMs) == 0x00000C, "Member 'TLBuilderCommands_TLSummonNpcWithMotion::LoopMotionDurationMs' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSummonNpcWithMotionAngle
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLSummonNpcWithMotionAngle final
{
public:
	int32                                         ClassId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MotionId;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSummonNpcWithMotionAngle) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSummonNpcWithMotionAngle");
static_assert(sizeof(TLBuilderCommands_TLSummonNpcWithMotionAngle) == 0x000008, "Wrong size on TLBuilderCommands_TLSummonNpcWithMotionAngle");
static_assert(offsetof(TLBuilderCommands_TLSummonNpcWithMotionAngle, ClassId) == 0x000000, "Member 'TLBuilderCommands_TLSummonNpcWithMotionAngle::ClassId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSummonNpcWithMotionAngle, MotionId) == 0x000004, "Member 'TLBuilderCommands_TLSummonNpcWithMotionAngle::MotionId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLSummonNpcWithMotionAngle1
// 0x0014 (0x0014 - 0x0000)
struct TLBuilderCommands_TLSummonNpcWithMotionAngle1 final
{
public:
	int32                                         ClassId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryMotionId;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopMotionId;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AngleDegree;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopMotionDurationMs;                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLSummonNpcWithMotionAngle1) == 0x000004, "Wrong alignment on TLBuilderCommands_TLSummonNpcWithMotionAngle1");
static_assert(sizeof(TLBuilderCommands_TLSummonNpcWithMotionAngle1) == 0x000014, "Wrong size on TLBuilderCommands_TLSummonNpcWithMotionAngle1");
static_assert(offsetof(TLBuilderCommands_TLSummonNpcWithMotionAngle1, ClassId) == 0x000000, "Member 'TLBuilderCommands_TLSummonNpcWithMotionAngle1::ClassId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSummonNpcWithMotionAngle1, EntryMotionId) == 0x000004, "Member 'TLBuilderCommands_TLSummonNpcWithMotionAngle1::EntryMotionId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSummonNpcWithMotionAngle1, LoopMotionId) == 0x000008, "Member 'TLBuilderCommands_TLSummonNpcWithMotionAngle1::LoopMotionId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSummonNpcWithMotionAngle1, AngleDegree) == 0x00000C, "Member 'TLBuilderCommands_TLSummonNpcWithMotionAngle1::AngleDegree' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLSummonNpcWithMotionAngle1, LoopMotionDurationMs) == 0x000010, "Member 'TLBuilderCommands_TLSummonNpcWithMotionAngle1::LoopMotionDurationMs' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTableAssetShowDebug
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLTableAssetShowDebug final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTableAssetShowDebug) == 0x000001, "Wrong alignment on TLBuilderCommands_TLTableAssetShowDebug");
static_assert(sizeof(TLBuilderCommands_TLTableAssetShowDebug) == 0x000001, "Wrong size on TLBuilderCommands_TLTableAssetShowDebug");
static_assert(offsetof(TLBuilderCommands_TLTableAssetShowDebug, Show) == 0x000000, "Member 'TLBuilderCommands_TLTableAssetShowDebug::Show' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTargetHp
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLTargetHp final
{
public:
	int32                                         Hp;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTargetHp) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTargetHp");
static_assert(sizeof(TLBuilderCommands_TLTargetHp) == 0x000004, "Wrong size on TLBuilderCommands_TLTargetHp");
static_assert(offsetof(TLBuilderCommands_TLTargetHp, Hp) == 0x000000, "Member 'TLBuilderCommands_TLTargetHp::Hp' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTargetHpAll
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLTargetHpAll final
{
public:
	int32                                         Hp;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTargetHpAll) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTargetHpAll");
static_assert(sizeof(TLBuilderCommands_TLTargetHpAll) == 0x000004, "Wrong size on TLBuilderCommands_TLTargetHpAll");
static_assert(offsetof(TLBuilderCommands_TLTargetHpAll, Hp) == 0x000000, "Member 'TLBuilderCommands_TLTargetHpAll::Hp' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTargetHpPercent
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLTargetHpPercent final
{
public:
	int32                                         HpPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTargetHpPercent) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTargetHpPercent");
static_assert(sizeof(TLBuilderCommands_TLTargetHpPercent) == 0x000004, "Wrong size on TLBuilderCommands_TLTargetHpPercent");
static_assert(offsetof(TLBuilderCommands_TLTargetHpPercent, HpPercent) == 0x000000, "Member 'TLBuilderCommands_TLTargetHpPercent::HpPercent' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTargetHpPercentAll
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLTargetHpPercentAll final
{
public:
	int32                                         HpPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTargetHpPercentAll) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTargetHpPercentAll");
static_assert(sizeof(TLBuilderCommands_TLTargetHpPercentAll) == 0x000004, "Wrong size on TLBuilderCommands_TLTargetHpPercentAll");
static_assert(offsetof(TLBuilderCommands_TLTargetHpPercentAll, HpPercent) == 0x000000, "Member 'TLBuilderCommands_TLTargetHpPercentAll::HpPercent' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTargetMarkerColor
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLTargetMarkerColor final
{
public:
	int32                                         InR;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InG;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InB;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTargetMarkerColor) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTargetMarkerColor");
static_assert(sizeof(TLBuilderCommands_TLTargetMarkerColor) == 0x00000C, "Wrong size on TLBuilderCommands_TLTargetMarkerColor");
static_assert(offsetof(TLBuilderCommands_TLTargetMarkerColor, InR) == 0x000000, "Member 'TLBuilderCommands_TLTargetMarkerColor::InR' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTargetMarkerColor, InG) == 0x000004, "Member 'TLBuilderCommands_TLTargetMarkerColor::InG' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTargetMarkerColor, InB) == 0x000008, "Member 'TLBuilderCommands_TLTargetMarkerColor::InB' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTargetScanAuto
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLTargetScanAuto final
{
public:
	int32                                         IntervalSec;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTargetScanAuto) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTargetScanAuto");
static_assert(sizeof(TLBuilderCommands_TLTargetScanAuto) == 0x000004, "Wrong size on TLBuilderCommands_TLTargetScanAuto");
static_assert(offsetof(TLBuilderCommands_TLTargetScanAuto, IntervalSec) == 0x000000, "Member 'TLBuilderCommands_TLTargetScanAuto::IntervalSec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTaxDeliveryUITestJoin
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLTaxDeliveryUITestJoin final
{
public:
	class FString                                 InGuid;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTaxDeliveryUITestJoin) == 0x000008, "Wrong alignment on TLBuilderCommands_TLTaxDeliveryUITestJoin");
static_assert(sizeof(TLBuilderCommands_TLTaxDeliveryUITestJoin) == 0x000010, "Wrong size on TLBuilderCommands_TLTaxDeliveryUITestJoin");
static_assert(offsetof(TLBuilderCommands_TLTaxDeliveryUITestJoin, InGuid) == 0x000000, "Member 'TLBuilderCommands_TLTaxDeliveryUITestJoin::InGuid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTaxDeliveryUITestLeave
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLTaxDeliveryUITestLeave final
{
public:
	class FString                                 InGuid;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTaxDeliveryUITestLeave) == 0x000008, "Wrong alignment on TLBuilderCommands_TLTaxDeliveryUITestLeave");
static_assert(sizeof(TLBuilderCommands_TLTaxDeliveryUITestLeave) == 0x000010, "Wrong size on TLBuilderCommands_TLTaxDeliveryUITestLeave");
static_assert(offsetof(TLBuilderCommands_TLTaxDeliveryUITestLeave, InGuid) == 0x000000, "Member 'TLBuilderCommands_TLTaxDeliveryUITestLeave::InGuid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTaxResultTest
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLTaxResultTest final
{
public:
	class FName                                   InRowName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTaxResultTest) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTaxResultTest");
static_assert(sizeof(TLBuilderCommands_TLTaxResultTest) == 0x000008, "Wrong size on TLBuilderCommands_TLTaxResultTest");
static_assert(offsetof(TLBuilderCommands_TLTaxResultTest, InRowName) == 0x000000, "Member 'TLBuilderCommands_TLTaxResultTest::InRowName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTechTestBuild1
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLTechTestBuild1 final
{
public:
	int32                                         InParm1;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InParm2;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTechTestBuild1) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTechTestBuild1");
static_assert(sizeof(TLBuilderCommands_TLTechTestBuild1) == 0x000008, "Wrong size on TLBuilderCommands_TLTechTestBuild1");
static_assert(offsetof(TLBuilderCommands_TLTechTestBuild1, InParm1) == 0x000000, "Member 'TLBuilderCommands_TLTechTestBuild1::InParm1' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTechTestBuild1, InParm2) == 0x000004, "Member 'TLBuilderCommands_TLTechTestBuild1::InParm2' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTechTestBuild2
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLTechTestBuild2 final
{
public:
	int32                                         InParm1;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InParm2;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTechTestBuild2) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTechTestBuild2");
static_assert(sizeof(TLBuilderCommands_TLTechTestBuild2) == 0x000008, "Wrong size on TLBuilderCommands_TLTechTestBuild2");
static_assert(offsetof(TLBuilderCommands_TLTechTestBuild2, InParm1) == 0x000000, "Member 'TLBuilderCommands_TLTechTestBuild2::InParm1' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTechTestBuild2, InParm2) == 0x000004, "Member 'TLBuilderCommands_TLTechTestBuild2::InParm2' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTeleport
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLTeleport final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTeleport) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTeleport");
static_assert(sizeof(TLBuilderCommands_TLTeleport) == 0x00000C, "Wrong size on TLBuilderCommands_TLTeleport");
static_assert(offsetof(TLBuilderCommands_TLTeleport, Pos) == 0x000000, "Member 'TLBuilderCommands_TLTeleport::Pos' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTeleportFixedPos
// 0x0014 (0x0014 - 0x0000)
struct TLBuilderCommands_TLTeleportFixedPos final
{
public:
	int32                                         InObjId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InX;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InY;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InZ;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMode;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTeleportFixedPos) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTeleportFixedPos");
static_assert(sizeof(TLBuilderCommands_TLTeleportFixedPos) == 0x000014, "Wrong size on TLBuilderCommands_TLTeleportFixedPos");
static_assert(offsetof(TLBuilderCommands_TLTeleportFixedPos, InObjId) == 0x000000, "Member 'TLBuilderCommands_TLTeleportFixedPos::InObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTeleportFixedPos, InX) == 0x000004, "Member 'TLBuilderCommands_TLTeleportFixedPos::InX' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTeleportFixedPos, InY) == 0x000008, "Member 'TLBuilderCommands_TLTeleportFixedPos::InY' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTeleportFixedPos, InZ) == 0x00000C, "Member 'TLBuilderCommands_TLTeleportFixedPos::InZ' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTeleportFixedPos, InMode) == 0x000010, "Member 'TLBuilderCommands_TLTeleportFixedPos::InMode' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTempInventoryAdd
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLTempInventoryAdd final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTempInventoryAdd) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTempInventoryAdd");
static_assert(sizeof(TLBuilderCommands_TLTempInventoryAdd) == 0x000004, "Wrong size on TLBuilderCommands_TLTempInventoryAdd");
static_assert(offsetof(TLBuilderCommands_TLTempInventoryAdd, InTime) == 0x000000, "Member 'TLBuilderCommands_TLTempInventoryAdd::InTime' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTempInventoryRemove
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLTempInventoryRemove final
{
public:
	int64                                         InUID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTempInventoryRemove) == 0x000008, "Wrong alignment on TLBuilderCommands_TLTempInventoryRemove");
static_assert(sizeof(TLBuilderCommands_TLTempInventoryRemove) == 0x000008, "Wrong size on TLBuilderCommands_TLTempInventoryRemove");
static_assert(offsetof(TLBuilderCommands_TLTempInventoryRemove, InUID) == 0x000000, "Member 'TLBuilderCommands_TLTempInventoryRemove::InUID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTerminateUI
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLTerminateUI final
{
public:
	class FName                                   InTableUIKey;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTerminateUI) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTerminateUI");
static_assert(sizeof(TLBuilderCommands_TLTerminateUI) == 0x000008, "Wrong size on TLBuilderCommands_TLTerminateUI");
static_assert(offsetof(TLBuilderCommands_TLTerminateUI, InTableUIKey) == 0x000000, "Member 'TLBuilderCommands_TLTerminateUI::InTableUIKey' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTestAcquiredMsgExp
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLTestAcquiredMsgExp final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTestAcquiredMsgExp) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTestAcquiredMsgExp");
static_assert(sizeof(TLBuilderCommands_TLTestAcquiredMsgExp) == 0x000004, "Wrong size on TLBuilderCommands_TLTestAcquiredMsgExp");
static_assert(offsetof(TLBuilderCommands_TLTestAcquiredMsgExp, InCount) == 0x000000, "Member 'TLBuilderCommands_TLTestAcquiredMsgExp::InCount' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTestAddGuildRewardBox
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLTestAddGuildRewardBox final
{
public:
	int64                                         InBoxId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InAddMinute;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLTestAddGuildRewardBox) == 0x000008, "Wrong alignment on TLBuilderCommands_TLTestAddGuildRewardBox");
static_assert(sizeof(TLBuilderCommands_TLTestAddGuildRewardBox) == 0x000010, "Wrong size on TLBuilderCommands_TLTestAddGuildRewardBox");
static_assert(offsetof(TLBuilderCommands_TLTestAddGuildRewardBox, InBoxId) == 0x000000, "Member 'TLBuilderCommands_TLTestAddGuildRewardBox::InBoxId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTestAddGuildRewardBox, InAddMinute) == 0x000008, "Member 'TLBuilderCommands_TLTestAddGuildRewardBox::InAddMinute' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTestEmblemColor
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLTestEmblemColor final
{
public:
	int32                                         EmblemId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InColor0;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InColor1;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTestEmblemColor) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTestEmblemColor");
static_assert(sizeof(TLBuilderCommands_TLTestEmblemColor) == 0x00000C, "Wrong size on TLBuilderCommands_TLTestEmblemColor");
static_assert(offsetof(TLBuilderCommands_TLTestEmblemColor, EmblemId) == 0x000000, "Member 'TLBuilderCommands_TLTestEmblemColor::EmblemId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTestEmblemColor, InColor0) == 0x000004, "Member 'TLBuilderCommands_TLTestEmblemColor::InColor0' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTestEmblemColor, InColor1) == 0x000008, "Member 'TLBuilderCommands_TLTestEmblemColor::InColor1' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTestGuildDistribution
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLTestGuildDistribution final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InType;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTestGuildDistribution) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTestGuildDistribution");
static_assert(sizeof(TLBuilderCommands_TLTestGuildDistribution) == 0x000008, "Wrong size on TLBuilderCommands_TLTestGuildDistribution");
static_assert(offsetof(TLBuilderCommands_TLTestGuildDistribution, InCount) == 0x000000, "Member 'TLBuilderCommands_TLTestGuildDistribution::InCount' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTestGuildDistribution, InType) == 0x000004, "Member 'TLBuilderCommands_TLTestGuildDistribution::InType' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTestGuildViewer
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLTestGuildViewer final
{
public:
	int64                                         InGuildId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTestGuildViewer) == 0x000008, "Wrong alignment on TLBuilderCommands_TLTestGuildViewer");
static_assert(sizeof(TLBuilderCommands_TLTestGuildViewer) == 0x000008, "Wrong size on TLBuilderCommands_TLTestGuildViewer");
static_assert(offsetof(TLBuilderCommands_TLTestGuildViewer, InGuildId) == 0x000000, "Member 'TLBuilderCommands_TLTestGuildViewer::InGuildId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTestHotDeal
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLTestHotDeal final
{
public:
	bool                                          InUseTest;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTestHotDeal) == 0x000001, "Wrong alignment on TLBuilderCommands_TLTestHotDeal");
static_assert(sizeof(TLBuilderCommands_TLTestHotDeal) == 0x000001, "Wrong size on TLBuilderCommands_TLTestHotDeal");
static_assert(offsetof(TLBuilderCommands_TLTestHotDeal, InUseTest) == 0x000000, "Member 'TLBuilderCommands_TLTestHotDeal::InUseTest' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTestNotificationLoop
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLTestNotificationLoop final
{
public:
	float                                         InIntervalSec;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTestNotificationLoop) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTestNotificationLoop");
static_assert(sizeof(TLBuilderCommands_TLTestNotificationLoop) == 0x000004, "Wrong size on TLBuilderCommands_TLTestNotificationLoop");
static_assert(offsetof(TLBuilderCommands_TLTestNotificationLoop, InIntervalSec) == 0x000000, "Member 'TLBuilderCommands_TLTestNotificationLoop::InIntervalSec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTestRefPoseAndCurPoseLoc
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLTestRefPoseAndCurPoseLoc final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTestRefPoseAndCurPoseLoc) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTestRefPoseAndCurPoseLoc");
static_assert(sizeof(TLBuilderCommands_TLTestRefPoseAndCurPoseLoc) == 0x00000C, "Wrong size on TLBuilderCommands_TLTestRefPoseAndCurPoseLoc");
static_assert(offsetof(TLBuilderCommands_TLTestRefPoseAndCurPoseLoc, X) == 0x000000, "Member 'TLBuilderCommands_TLTestRefPoseAndCurPoseLoc::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTestRefPoseAndCurPoseLoc, Y) == 0x000004, "Member 'TLBuilderCommands_TLTestRefPoseAndCurPoseLoc::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTestRefPoseAndCurPoseLoc, Z) == 0x000008, "Member 'TLBuilderCommands_TLTestRefPoseAndCurPoseLoc::Z' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTestRotationEvent
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLTestRotationEvent final
{
public:
	int32                                         InRankCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTestRotationEvent) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTestRotationEvent");
static_assert(sizeof(TLBuilderCommands_TLTestRotationEvent) == 0x000004, "Wrong size on TLBuilderCommands_TLTestRotationEvent");
static_assert(offsetof(TLBuilderCommands_TLTestRotationEvent, InRankCount) == 0x000000, "Member 'TLBuilderCommands_TLTestRotationEvent::InRankCount' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTestShowUI
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLTestShowUI final
{
public:
	class FName                                   InTableKey;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInShow;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInStack;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLTestShowUI) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTestShowUI");
static_assert(sizeof(TLBuilderCommands_TLTestShowUI) == 0x00000C, "Wrong size on TLBuilderCommands_TLTestShowUI");
static_assert(offsetof(TLBuilderCommands_TLTestShowUI, InTableKey) == 0x000000, "Member 'TLBuilderCommands_TLTestShowUI::InTableKey' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTestShowUI, bInShow) == 0x000008, "Member 'TLBuilderCommands_TLTestShowUI::bInShow' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTestShowUI, bInStack) == 0x000009, "Member 'TLBuilderCommands_TLTestShowUI::bInStack' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTestSiegeDistributionEx
// 0x0050 (0x0050 - 0x0000)
struct TLBuilderCommands_TLTestSiegeDistributionEx final
{
public:
	int64                                         InGold;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InDiamond;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InGuildMember1;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InGuildMember2;                                    // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InGuildMember3;                                    // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InGuildMember4;                                    // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTestSiegeDistributionEx) == 0x000008, "Wrong alignment on TLBuilderCommands_TLTestSiegeDistributionEx");
static_assert(sizeof(TLBuilderCommands_TLTestSiegeDistributionEx) == 0x000050, "Wrong size on TLBuilderCommands_TLTestSiegeDistributionEx");
static_assert(offsetof(TLBuilderCommands_TLTestSiegeDistributionEx, InGold) == 0x000000, "Member 'TLBuilderCommands_TLTestSiegeDistributionEx::InGold' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTestSiegeDistributionEx, InDiamond) == 0x000008, "Member 'TLBuilderCommands_TLTestSiegeDistributionEx::InDiamond' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTestSiegeDistributionEx, InGuildMember1) == 0x000010, "Member 'TLBuilderCommands_TLTestSiegeDistributionEx::InGuildMember1' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTestSiegeDistributionEx, InGuildMember2) == 0x000020, "Member 'TLBuilderCommands_TLTestSiegeDistributionEx::InGuildMember2' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTestSiegeDistributionEx, InGuildMember3) == 0x000030, "Member 'TLBuilderCommands_TLTestSiegeDistributionEx::InGuildMember3' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTestSiegeDistributionEx, InGuildMember4) == 0x000040, "Member 'TLBuilderCommands_TLTestSiegeDistributionEx::InGuildMember4' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTestSiegeDistributionGuildMemberCounts
// 0x0030 (0x0030 - 0x0000)
struct TLBuilderCommands_TLTestSiegeDistributionGuildMemberCounts final
{
public:
	int64                                         InGold;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InDiamond;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 JoinedGuildMemberCounts;                           // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 TotalGuildMemberCounts;                            // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTestSiegeDistributionGuildMemberCounts) == 0x000008, "Wrong alignment on TLBuilderCommands_TLTestSiegeDistributionGuildMemberCounts");
static_assert(sizeof(TLBuilderCommands_TLTestSiegeDistributionGuildMemberCounts) == 0x000030, "Wrong size on TLBuilderCommands_TLTestSiegeDistributionGuildMemberCounts");
static_assert(offsetof(TLBuilderCommands_TLTestSiegeDistributionGuildMemberCounts, InGold) == 0x000000, "Member 'TLBuilderCommands_TLTestSiegeDistributionGuildMemberCounts::InGold' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTestSiegeDistributionGuildMemberCounts, InDiamond) == 0x000008, "Member 'TLBuilderCommands_TLTestSiegeDistributionGuildMemberCounts::InDiamond' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTestSiegeDistributionGuildMemberCounts, JoinedGuildMemberCounts) == 0x000010, "Member 'TLBuilderCommands_TLTestSiegeDistributionGuildMemberCounts::JoinedGuildMemberCounts' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTestSiegeDistributionGuildMemberCounts, TotalGuildMemberCounts) == 0x000020, "Member 'TLBuilderCommands_TLTestSiegeDistributionGuildMemberCounts::TotalGuildMemberCounts' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTestTimeline
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLTestTimeline final
{
public:
	class FName                                   TimelineId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTestTimeline) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTestTimeline");
static_assert(sizeof(TLBuilderCommands_TLTestTimeline) == 0x000008, "Wrong size on TLBuilderCommands_TLTestTimeline");
static_assert(offsetof(TLBuilderCommands_TLTestTimeline, TimelineId) == 0x000000, "Member 'TLBuilderCommands_TLTestTimeline::TimelineId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTimeLapse
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLTimeLapse final
{
public:
	int32                                         CycleDays;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetGameHour;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFastForward;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTimeLapse) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTimeLapse");
static_assert(sizeof(TLBuilderCommands_TLTimeLapse) == 0x000010, "Wrong size on TLBuilderCommands_TLTimeLapse");
static_assert(offsetof(TLBuilderCommands_TLTimeLapse, CycleDays) == 0x000000, "Member 'TLBuilderCommands_TLTimeLapse::CycleDays' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTimeLapse, TargetGameHour) == 0x000004, "Member 'TLBuilderCommands_TLTimeLapse::TargetGameHour' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTimeLapse, bFastForward) == 0x000008, "Member 'TLBuilderCommands_TLTimeLapse::bFastForward' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTimeLapse, Duration) == 0x00000C, "Member 'TLBuilderCommands_TLTimeLapse::Duration' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTimerJob
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLTimerJob final
{
public:
	bool                                          bInRun;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InIntervalSeconds;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTimerJob) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTimerJob");
static_assert(sizeof(TLBuilderCommands_TLTimerJob) == 0x000008, "Wrong size on TLBuilderCommands_TLTimerJob");
static_assert(offsetof(TLBuilderCommands_TLTimerJob, bInRun) == 0x000000, "Member 'TLBuilderCommands_TLTimerJob::bInRun' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTimerJob, InIntervalSeconds) == 0x000004, "Member 'TLBuilderCommands_TLTimerJob::InIntervalSeconds' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTimerTest
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLTimerTest final
{
public:
	float                                         DelaySec;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTimerTest) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTimerTest");
static_assert(sizeof(TLBuilderCommands_TLTimerTest) == 0x000004, "Wrong size on TLBuilderCommands_TLTimerTest");
static_assert(offsetof(TLBuilderCommands_TLTimerTest, DelaySec) == 0x000000, "Member 'TLBuilderCommands_TLTimerTest::DelaySec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTimerTest1
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLTimerTest1 final
{
public:
	float                                         DelaySec;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayFirstSec;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTimerTest1) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTimerTest1");
static_assert(sizeof(TLBuilderCommands_TLTimerTest1) == 0x000008, "Wrong size on TLBuilderCommands_TLTimerTest1");
static_assert(offsetof(TLBuilderCommands_TLTimerTest1, DelaySec) == 0x000000, "Member 'TLBuilderCommands_TLTimerTest1::DelaySec' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTimerTest1, DelayFirstSec) == 0x000004, "Member 'TLBuilderCommands_TLTimerTest1::DelayFirstSec' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTimeTableEventComplete
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLTimeTableEventComplete final
{
public:
	uint64                                        InEventGuid;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTimeTableEventComplete) == 0x000008, "Wrong alignment on TLBuilderCommands_TLTimeTableEventComplete");
static_assert(sizeof(TLBuilderCommands_TLTimeTableEventComplete) == 0x000008, "Wrong size on TLBuilderCommands_TLTimeTableEventComplete");
static_assert(offsetof(TLBuilderCommands_TLTimeTableEventComplete, InEventGuid) == 0x000000, "Member 'TLBuilderCommands_TLTimeTableEventComplete::InEventGuid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTimeTableEventStart
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLTimeTableEventStart final
{
public:
	uint64                                        InEventGuid;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTimeTableEventStart) == 0x000008, "Wrong alignment on TLBuilderCommands_TLTimeTableEventStart");
static_assert(sizeof(TLBuilderCommands_TLTimeTableEventStart) == 0x000008, "Wrong size on TLBuilderCommands_TLTimeTableEventStart");
static_assert(offsetof(TLBuilderCommands_TLTimeTableEventStart, InEventGuid) == 0x000000, "Member 'TLBuilderCommands_TLTimeTableEventStart::InEventGuid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTimeTableInsert
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLTimeTableInsert final
{
public:
	uint64                                        InEventGuid;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTimeTableInsert) == 0x000008, "Wrong alignment on TLBuilderCommands_TLTimeTableInsert");
static_assert(sizeof(TLBuilderCommands_TLTimeTableInsert) == 0x000008, "Wrong size on TLBuilderCommands_TLTimeTableInsert");
static_assert(offsetof(TLBuilderCommands_TLTimeTableInsert, InEventGuid) == 0x000000, "Member 'TLBuilderCommands_TLTimeTableInsert::InEventGuid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTimeTableInsertInterServerEvent
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLTimeTableInsertInterServerEvent final
{
public:
	uint64                                        InEventGuid;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTimeTableInsertInterServerEvent) == 0x000008, "Wrong alignment on TLBuilderCommands_TLTimeTableInsertInterServerEvent");
static_assert(sizeof(TLBuilderCommands_TLTimeTableInsertInterServerEvent) == 0x000008, "Wrong size on TLBuilderCommands_TLTimeTableInsertInterServerEvent");
static_assert(offsetof(TLBuilderCommands_TLTimeTableInsertInterServerEvent, InEventGuid) == 0x000000, "Member 'TLBuilderCommands_TLTimeTableInsertInterServerEvent::InEventGuid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTimeTableInsertM
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLTimeTableInsertM final
{
public:
	uint64                                        InEventGuid;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMinute;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLTimeTableInsertM) == 0x000008, "Wrong alignment on TLBuilderCommands_TLTimeTableInsertM");
static_assert(sizeof(TLBuilderCommands_TLTimeTableInsertM) == 0x000010, "Wrong size on TLBuilderCommands_TLTimeTableInsertM");
static_assert(offsetof(TLBuilderCommands_TLTimeTableInsertM, InEventGuid) == 0x000000, "Member 'TLBuilderCommands_TLTimeTableInsertM::InEventGuid' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTimeTableInsertM, InMinute) == 0x000008, "Member 'TLBuilderCommands_TLTimeTableInsertM::InMinute' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTimeTableRemove
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLTimeTableRemove final
{
public:
	uint64                                        InEventGuid;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              InTimestamp;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTimeTableRemove) == 0x000008, "Wrong alignment on TLBuilderCommands_TLTimeTableRemove");
static_assert(sizeof(TLBuilderCommands_TLTimeTableRemove) == 0x000010, "Wrong size on TLBuilderCommands_TLTimeTableRemove");
static_assert(offsetof(TLBuilderCommands_TLTimeTableRemove, InEventGuid) == 0x000000, "Member 'TLBuilderCommands_TLTimeTableRemove::InEventGuid' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTimeTableRemove, InTimestamp) == 0x000008, "Member 'TLBuilderCommands_TLTimeTableRemove::InTimestamp' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTimeTableUpdate
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLTimeTableUpdate final
{
public:
	uint64                                        InEventGuid;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              InTimestamp;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTimeTableUpdate) == 0x000008, "Wrong alignment on TLBuilderCommands_TLTimeTableUpdate");
static_assert(sizeof(TLBuilderCommands_TLTimeTableUpdate) == 0x000010, "Wrong size on TLBuilderCommands_TLTimeTableUpdate");
static_assert(offsetof(TLBuilderCommands_TLTimeTableUpdate, InEventGuid) == 0x000000, "Member 'TLBuilderCommands_TLTimeTableUpdate::InEventGuid' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTimeTableUpdate, InTimestamp) == 0x000008, "Member 'TLBuilderCommands_TLTimeTableUpdate::InTimestamp' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLToggleObjectCollision
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLToggleObjectCollision final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InType;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InOn;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLToggleObjectCollision) == 0x000004, "Wrong alignment on TLBuilderCommands_TLToggleObjectCollision");
static_assert(sizeof(TLBuilderCommands_TLToggleObjectCollision) == 0x00000C, "Wrong size on TLBuilderCommands_TLToggleObjectCollision");
static_assert(offsetof(TLBuilderCommands_TLToggleObjectCollision, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLToggleObjectCollision::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLToggleObjectCollision, InType) == 0x000004, "Member 'TLBuilderCommands_TLToggleObjectCollision::InType' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLToggleObjectCollision, InOn) == 0x000008, "Member 'TLBuilderCommands_TLToggleObjectCollision::InOn' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLToggleTutorialMagicDoll
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLToggleTutorialMagicDoll final
{
public:
	class FName                                   InMagicDollName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLToggleTutorialMagicDoll) == 0x000004, "Wrong alignment on TLBuilderCommands_TLToggleTutorialMagicDoll");
static_assert(sizeof(TLBuilderCommands_TLToggleTutorialMagicDoll) == 0x000008, "Wrong size on TLBuilderCommands_TLToggleTutorialMagicDoll");
static_assert(offsetof(TLBuilderCommands_TLToggleTutorialMagicDoll, InMagicDollName) == 0x000000, "Member 'TLBuilderCommands_TLToggleTutorialMagicDoll::InMagicDollName' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTPByWorldmap
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLTPByWorldmap final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTPByWorldmap) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTPByWorldmap");
static_assert(sizeof(TLBuilderCommands_TLTPByWorldmap) == 0x000008, "Wrong size on TLBuilderCommands_TLTPByWorldmap");
static_assert(offsetof(TLBuilderCommands_TLTPByWorldmap, X) == 0x000000, "Member 'TLBuilderCommands_TLTPByWorldmap::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTPByWorldmap, Y) == 0x000004, "Member 'TLBuilderCommands_TLTPByWorldmap::Y' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTpLocal
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLTpLocal final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTpLocal) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTpLocal");
static_assert(sizeof(TLBuilderCommands_TLTpLocal) == 0x000010, "Wrong size on TLBuilderCommands_TLTpLocal");
static_assert(offsetof(TLBuilderCommands_TLTpLocal, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLTpLocal::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTpLocal, X) == 0x000004, "Member 'TLBuilderCommands_TLTpLocal::X' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTpLocal, Y) == 0x000008, "Member 'TLBuilderCommands_TLTpLocal::Y' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTpLocal, Z) == 0x00000C, "Member 'TLBuilderCommands_TLTpLocal::Z' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTraceAllObjectId
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLTraceAllObjectId final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTraceAllObjectId) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTraceAllObjectId");
static_assert(sizeof(TLBuilderCommands_TLTraceAllObjectId) == 0x000004, "Wrong size on TLBuilderCommands_TLTraceAllObjectId");
static_assert(offsetof(TLBuilderCommands_TLTraceAllObjectId, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLTraceAllObjectId::ObjId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTraceEnterClassObject
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLTraceEnterClassObject final
{
public:
	int32                                         ObjClassId;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTraceEnterClassObject) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTraceEnterClassObject");
static_assert(sizeof(TLBuilderCommands_TLTraceEnterClassObject) == 0x000004, "Wrong size on TLBuilderCommands_TLTraceEnterClassObject");
static_assert(offsetof(TLBuilderCommands_TLTraceEnterClassObject, ObjClassId) == 0x000000, "Member 'TLBuilderCommands_TLTraceEnterClassObject::ObjClassId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTraceEnterObjectGuid
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLTraceEnterObjectGuid final
{
public:
	uint64                                        TargetGuid;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTraceEnterObjectGuid) == 0x000008, "Wrong alignment on TLBuilderCommands_TLTraceEnterObjectGuid");
static_assert(sizeof(TLBuilderCommands_TLTraceEnterObjectGuid) == 0x000008, "Wrong size on TLBuilderCommands_TLTraceEnterObjectGuid");
static_assert(offsetof(TLBuilderCommands_TLTraceEnterObjectGuid, TargetGuid) == 0x000000, "Member 'TLBuilderCommands_TLTraceEnterObjectGuid::TargetGuid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTraceLastEnterObject
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLTraceLastEnterObject final
{
public:
	bool                                          bSet;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTraceLastEnterObject) == 0x000001, "Wrong alignment on TLBuilderCommands_TLTraceLastEnterObject");
static_assert(sizeof(TLBuilderCommands_TLTraceLastEnterObject) == 0x000001, "Wrong size on TLBuilderCommands_TLTraceLastEnterObject");
static_assert(offsetof(TLBuilderCommands_TLTraceLastEnterObject, bSet) == 0x000000, "Member 'TLBuilderCommands_TLTraceLastEnterObject::bSet' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTraceProblemLevel
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLTraceProblemLevel final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTraceProblemLevel) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTraceProblemLevel");
static_assert(sizeof(TLBuilderCommands_TLTraceProblemLevel) == 0x000004, "Wrong size on TLBuilderCommands_TLTraceProblemLevel");
static_assert(offsetof(TLBuilderCommands_TLTraceProblemLevel, InValue) == 0x000000, "Member 'TLBuilderCommands_TLTraceProblemLevel::InValue' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTraceSceneWorldObject
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLTraceSceneWorldObject final
{
public:
	int32                                         TargetId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTraceSceneWorldObject) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTraceSceneWorldObject");
static_assert(sizeof(TLBuilderCommands_TLTraceSceneWorldObject) == 0x000004, "Wrong size on TLBuilderCommands_TLTraceSceneWorldObject");
static_assert(offsetof(TLBuilderCommands_TLTraceSceneWorldObject, TargetId) == 0x000000, "Member 'TLBuilderCommands_TLTraceSceneWorldObject::TargetId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTransformNpc
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLTransformNpc final
{
public:
	int32                                         NewNpcId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTransformNpc) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTransformNpc");
static_assert(sizeof(TLBuilderCommands_TLTransformNpc) == 0x000004, "Wrong size on TLBuilderCommands_TLTransformNpc");
static_assert(offsetof(TLBuilderCommands_TLTransformNpc, NewNpcId) == 0x000000, "Member 'TLBuilderCommands_TLTransformNpc::NewNpcId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTryContractShare
// 0x0010 (0x0010 - 0x0000)
struct TLBuilderCommands_TLTryContractShare final
{
public:
	class FString                                 InContractGuid;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTryContractShare) == 0x000008, "Wrong alignment on TLBuilderCommands_TLTryContractShare");
static_assert(sizeof(TLBuilderCommands_TLTryContractShare) == 0x000010, "Wrong size on TLBuilderCommands_TLTryContractShare");
static_assert(offsetof(TLBuilderCommands_TLTryContractShare, InContractGuid) == 0x000000, "Member 'TLBuilderCommands_TLTryContractShare::InContractGuid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTTSEnable
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLTTSEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTTSEnable) == 0x000001, "Wrong alignment on TLBuilderCommands_TLTTSEnable");
static_assert(sizeof(TLBuilderCommands_TLTTSEnable) == 0x000001, "Wrong size on TLBuilderCommands_TLTTSEnable");
static_assert(offsetof(TLBuilderCommands_TLTTSEnable, bEnable) == 0x000000, "Member 'TLBuilderCommands_TLTTSEnable::bEnable' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTutorialComplete
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLTutorialComplete final
{
public:
	class FName                                   TutorialId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkip;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLTutorialComplete) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTutorialComplete");
static_assert(sizeof(TLBuilderCommands_TLTutorialComplete) == 0x00000C, "Wrong size on TLBuilderCommands_TLTutorialComplete");
static_assert(offsetof(TLBuilderCommands_TLTutorialComplete, TutorialId) == 0x000000, "Member 'TLBuilderCommands_TLTutorialComplete::TutorialId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLTutorialComplete, bSkip) == 0x000008, "Member 'TLBuilderCommands_TLTutorialComplete::bSkip' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTutorialShow
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLTutorialShow final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTutorialShow) == 0x000001, "Wrong alignment on TLBuilderCommands_TLTutorialShow");
static_assert(sizeof(TLBuilderCommands_TLTutorialShow) == 0x000001, "Wrong size on TLBuilderCommands_TLTutorialShow");
static_assert(offsetof(TLBuilderCommands_TLTutorialShow, bVisible) == 0x000000, "Member 'TLBuilderCommands_TLTutorialShow::bVisible' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLTutorialStart
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLTutorialStart final
{
public:
	class FName                                   TutorialId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLTutorialStart) == 0x000004, "Wrong alignment on TLBuilderCommands_TLTutorialStart");
static_assert(sizeof(TLBuilderCommands_TLTutorialStart) == 0x000008, "Wrong size on TLBuilderCommands_TLTutorialStart");
static_assert(offsetof(TLBuilderCommands_TLTutorialStart, TutorialId) == 0x000000, "Member 'TLBuilderCommands_TLTutorialStart::TutorialId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUIGamepadType
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLUIGamepadType final
{
public:
	bool                                          Xbox;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLUIGamepadType) == 0x000001, "Wrong alignment on TLBuilderCommands_TLUIGamepadType");
static_assert(sizeof(TLBuilderCommands_TLUIGamepadType) == 0x000001, "Wrong size on TLBuilderCommands_TLUIGamepadType");
static_assert(offsetof(TLBuilderCommands_TLUIGamepadType, Xbox) == 0x000000, "Member 'TLBuilderCommands_TLUIGamepadType::Xbox' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUIHiddenState
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLUIHiddenState final
{
public:
	class FName                                   InNameKey;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInHiddenState;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLUIHiddenState) == 0x000004, "Wrong alignment on TLBuilderCommands_TLUIHiddenState");
static_assert(sizeof(TLBuilderCommands_TLUIHiddenState) == 0x00000C, "Wrong size on TLBuilderCommands_TLUIHiddenState");
static_assert(offsetof(TLBuilderCommands_TLUIHiddenState, InNameKey) == 0x000000, "Member 'TLBuilderCommands_TLUIHiddenState::InNameKey' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLUIHiddenState, bInHiddenState) == 0x000008, "Member 'TLBuilderCommands_TLUIHiddenState::bInHiddenState' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUIHudShow
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLUIHudShow final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLUIHudShow) == 0x000001, "Wrong alignment on TLBuilderCommands_TLUIHudShow");
static_assert(sizeof(TLBuilderCommands_TLUIHudShow) == 0x000001, "Wrong size on TLBuilderCommands_TLUIHudShow");
static_assert(offsetof(TLBuilderCommands_TLUIHudShow, bInShow) == 0x000000, "Member 'TLBuilderCommands_TLUIHudShow::bInShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUILoaderView
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLUILoaderView final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLUILoaderView) == 0x000001, "Wrong alignment on TLBuilderCommands_TLUILoaderView");
static_assert(sizeof(TLBuilderCommands_TLUILoaderView) == 0x000001, "Wrong size on TLBuilderCommands_TLUILoaderView");
static_assert(offsetof(TLBuilderCommands_TLUILoaderView, bDisplay) == 0x000000, "Member 'TLBuilderCommands_TLUILoaderView::bDisplay' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUIManagerView
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLUIManagerView final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLUIManagerView) == 0x000001, "Wrong alignment on TLBuilderCommands_TLUIManagerView");
static_assert(sizeof(TLBuilderCommands_TLUIManagerView) == 0x000001, "Wrong size on TLBuilderCommands_TLUIManagerView");
static_assert(offsetof(TLBuilderCommands_TLUIManagerView, bDisplay) == 0x000000, "Member 'TLBuilderCommands_TLUIManagerView::bDisplay' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUIPlatform
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLUIPlatform final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLUIPlatform) == 0x000004, "Wrong alignment on TLBuilderCommands_TLUIPlatform");
static_assert(sizeof(TLBuilderCommands_TLUIPlatform) == 0x000004, "Wrong size on TLBuilderCommands_TLUIPlatform");
static_assert(offsetof(TLBuilderCommands_TLUIPlatform, Index_0) == 0x000000, "Member 'TLBuilderCommands_TLUIPlatform::Index_0' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUISoundUseUniqueObjectId
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLUISoundUseUniqueObjectId final
{
public:
	bool                                          InUse;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLUISoundUseUniqueObjectId) == 0x000001, "Wrong alignment on TLBuilderCommands_TLUISoundUseUniqueObjectId");
static_assert(sizeof(TLBuilderCommands_TLUISoundUseUniqueObjectId) == 0x000001, "Wrong size on TLBuilderCommands_TLUISoundUseUniqueObjectId");
static_assert(offsetof(TLBuilderCommands_TLUISoundUseUniqueObjectId, InUse) == 0x000000, "Member 'TLBuilderCommands_TLUISoundUseUniqueObjectId::InUse' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUIStackTest
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLUIStackTest final
{
public:
	int32                                         InTestType;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLUIStackTest) == 0x000004, "Wrong alignment on TLBuilderCommands_TLUIStackTest");
static_assert(sizeof(TLBuilderCommands_TLUIStackTest) == 0x000004, "Wrong size on TLBuilderCommands_TLUIStackTest");
static_assert(offsetof(TLBuilderCommands_TLUIStackTest, InTestType) == 0x000000, "Member 'TLBuilderCommands_TLUIStackTest::InTestType' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUIStage
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLUIStage final
{
public:
	int32                                         InStage;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLUIStage) == 0x000004, "Wrong alignment on TLBuilderCommands_TLUIStage");
static_assert(sizeof(TLBuilderCommands_TLUIStage) == 0x000004, "Wrong size on TLBuilderCommands_TLUIStage");
static_assert(offsetof(TLBuilderCommands_TLUIStage, InStage) == 0x000000, "Member 'TLBuilderCommands_TLUIStage::InStage' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUnloadCutscene
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLUnloadCutscene final
{
public:
	class FName                                   CutSceneID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLUnloadCutscene) == 0x000004, "Wrong alignment on TLBuilderCommands_TLUnloadCutscene");
static_assert(sizeof(TLBuilderCommands_TLUnloadCutscene) == 0x000008, "Wrong size on TLBuilderCommands_TLUnloadCutscene");
static_assert(offsetof(TLBuilderCommands_TLUnloadCutscene, CutSceneID) == 0x000000, "Member 'TLBuilderCommands_TLUnloadCutscene::CutSceneID' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUpdateAnimation
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLUpdateAnimation final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToPause;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLUpdateAnimation) == 0x000004, "Wrong alignment on TLBuilderCommands_TLUpdateAnimation");
static_assert(sizeof(TLBuilderCommands_TLUpdateAnimation) == 0x000008, "Wrong size on TLBuilderCommands_TLUpdateAnimation");
static_assert(offsetof(TLBuilderCommands_TLUpdateAnimation, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLUpdateAnimation::ObjId' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLUpdateAnimation, ToPause) == 0x000004, "Member 'TLBuilderCommands_TLUpdateAnimation::ToPause' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUpdateNextSiegeTime
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLUpdateNextSiegeTime final
{
public:
	int32                                         InMinute;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLUpdateNextSiegeTime) == 0x000004, "Wrong alignment on TLBuilderCommands_TLUpdateNextSiegeTime");
static_assert(sizeof(TLBuilderCommands_TLUpdateNextSiegeTime) == 0x000004, "Wrong size on TLBuilderCommands_TLUpdateNextSiegeTime");
static_assert(offsetof(TLBuilderCommands_TLUpdateNextSiegeTime, InMinute) == 0x000000, "Member 'TLBuilderCommands_TLUpdateNextSiegeTime::InMinute' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUpdatePcRelationshipMember
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLUpdatePcRelationshipMember final
{
public:
	int64                                         PcId;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLUpdatePcRelationshipMember) == 0x000008, "Wrong alignment on TLBuilderCommands_TLUpdatePcRelationshipMember");
static_assert(sizeof(TLBuilderCommands_TLUpdatePcRelationshipMember) == 0x000008, "Wrong size on TLBuilderCommands_TLUpdatePcRelationshipMember");
static_assert(offsetof(TLBuilderCommands_TLUpdatePcRelationshipMember, PcId) == 0x000000, "Member 'TLBuilderCommands_TLUpdatePcRelationshipMember::PcId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUpdateWind
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLUpdateWind final
{
public:
	uint8                                         InWindDir;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InWindSpeed;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLUpdateWind) == 0x000004, "Wrong alignment on TLBuilderCommands_TLUpdateWind");
static_assert(sizeof(TLBuilderCommands_TLUpdateWind) == 0x000008, "Wrong size on TLBuilderCommands_TLUpdateWind");
static_assert(offsetof(TLBuilderCommands_TLUpdateWind, InWindDir) == 0x000000, "Member 'TLBuilderCommands_TLUpdateWind::InWindDir' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLUpdateWind, InWindSpeed) == 0x000004, "Member 'TLBuilderCommands_TLUpdateWind::InWindSpeed' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUseGravity
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLUseGravity final
{
public:
	bool                                          InUse;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLUseGravity) == 0x000001, "Wrong alignment on TLBuilderCommands_TLUseGravity");
static_assert(sizeof(TLBuilderCommands_TLUseGravity) == 0x000001, "Wrong size on TLBuilderCommands_TLUseGravity");
static_assert(offsetof(TLBuilderCommands_TLUseGravity, InUse) == 0x000000, "Member 'TLBuilderCommands_TLUseGravity::InUse' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUserCamera
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLUserCamera final
{
public:
	class FName                                   InUserCameraTableKey;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLUserCamera) == 0x000004, "Wrong alignment on TLBuilderCommands_TLUserCamera");
static_assert(sizeof(TLBuilderCommands_TLUserCamera) == 0x000008, "Wrong size on TLBuilderCommands_TLUserCamera");
static_assert(offsetof(TLBuilderCommands_TLUserCamera, InUserCameraTableKey) == 0x000000, "Member 'TLBuilderCommands_TLUserCamera::InUserCameraTableKey' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUserCameraFirstPersonView
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLUserCameraFirstPersonView final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLUserCameraFirstPersonView) == 0x000001, "Wrong alignment on TLBuilderCommands_TLUserCameraFirstPersonView");
static_assert(sizeof(TLBuilderCommands_TLUserCameraFirstPersonView) == 0x000001, "Wrong size on TLBuilderCommands_TLUserCameraFirstPersonView");
static_assert(offsetof(TLBuilderCommands_TLUserCameraFirstPersonView, bOn) == 0x000000, "Member 'TLBuilderCommands_TLUserCameraFirstPersonView::bOn' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUserCameraIndex
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLUserCameraIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLUserCameraIndex) == 0x000004, "Wrong alignment on TLBuilderCommands_TLUserCameraIndex");
static_assert(sizeof(TLBuilderCommands_TLUserCameraIndex) == 0x000004, "Wrong size on TLBuilderCommands_TLUserCameraIndex");
static_assert(offsetof(TLBuilderCommands_TLUserCameraIndex, InIndex) == 0x000000, "Member 'TLBuilderCommands_TLUserCameraIndex::InIndex' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUserCameraMaxDistPlus
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLUserCameraMaxDistPlus final
{
public:
	float                                         CameraMaxDistPlus;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLUserCameraMaxDistPlus) == 0x000004, "Wrong alignment on TLBuilderCommands_TLUserCameraMaxDistPlus");
static_assert(sizeof(TLBuilderCommands_TLUserCameraMaxDistPlus) == 0x000004, "Wrong size on TLBuilderCommands_TLUserCameraMaxDistPlus");
static_assert(offsetof(TLBuilderCommands_TLUserCameraMaxDistPlus, CameraMaxDistPlus) == 0x000000, "Member 'TLBuilderCommands_TLUserCameraMaxDistPlus::CameraMaxDistPlus' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUserCameraTriggerArea
// 0x000C (0x000C - 0x0000)
struct TLBuilderCommands_TLUserCameraTriggerArea final
{
public:
	class FName                                   InEventName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnter;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLBuilderCommands_TLUserCameraTriggerArea) == 0x000004, "Wrong alignment on TLBuilderCommands_TLUserCameraTriggerArea");
static_assert(sizeof(TLBuilderCommands_TLUserCameraTriggerArea) == 0x00000C, "Wrong size on TLBuilderCommands_TLUserCameraTriggerArea");
static_assert(offsetof(TLBuilderCommands_TLUserCameraTriggerArea, InEventName) == 0x000000, "Member 'TLBuilderCommands_TLUserCameraTriggerArea::InEventName' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLUserCameraTriggerArea, bEnter) == 0x000008, "Member 'TLBuilderCommands_TLUserCameraTriggerArea::bEnter' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLUsurpingGuildMasterObjectId
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLUsurpingGuildMasterObjectId final
{
public:
	int32                                         ObjId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLUsurpingGuildMasterObjectId) == 0x000004, "Wrong alignment on TLBuilderCommands_TLUsurpingGuildMasterObjectId");
static_assert(sizeof(TLBuilderCommands_TLUsurpingGuildMasterObjectId) == 0x000004, "Wrong size on TLBuilderCommands_TLUsurpingGuildMasterObjectId");
static_assert(offsetof(TLBuilderCommands_TLUsurpingGuildMasterObjectId, ObjId) == 0x000000, "Member 'TLBuilderCommands_TLUsurpingGuildMasterObjectId::ObjId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLVisibleInvenEquipItem
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLVisibleInvenEquipItem final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLVisibleInvenEquipItem) == 0x000001, "Wrong alignment on TLBuilderCommands_TLVisibleInvenEquipItem");
static_assert(sizeof(TLBuilderCommands_TLVisibleInvenEquipItem) == 0x000001, "Wrong size on TLBuilderCommands_TLVisibleInvenEquipItem");
static_assert(offsetof(TLBuilderCommands_TLVisibleInvenEquipItem, InVisible) == 0x000000, "Member 'TLBuilderCommands_TLVisibleInvenEquipItem::InVisible' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLWarpPartyDungeonEvent
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLWarpPartyDungeonEvent final
{
public:
	class FString                                 InEventGuid;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InDifficulty;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLWarpPartyDungeonEvent) == 0x000008, "Wrong alignment on TLBuilderCommands_TLWarpPartyDungeonEvent");
static_assert(sizeof(TLBuilderCommands_TLWarpPartyDungeonEvent) == 0x000018, "Wrong size on TLBuilderCommands_TLWarpPartyDungeonEvent");
static_assert(offsetof(TLBuilderCommands_TLWarpPartyDungeonEvent, InEventGuid) == 0x000000, "Member 'TLBuilderCommands_TLWarpPartyDungeonEvent::InEventGuid' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLWarpPartyDungeonEvent, InDifficulty) == 0x000010, "Member 'TLBuilderCommands_TLWarpPartyDungeonEvent::InDifficulty' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLWarpTimeAttackDungeonMap
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLWarpTimeAttackDungeonMap final
{
public:
	int32                                         InDungeonRevisionId;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLWarpTimeAttackDungeonMap) == 0x000004, "Wrong alignment on TLBuilderCommands_TLWarpTimeAttackDungeonMap");
static_assert(sizeof(TLBuilderCommands_TLWarpTimeAttackDungeonMap) == 0x000004, "Wrong size on TLBuilderCommands_TLWarpTimeAttackDungeonMap");
static_assert(offsetof(TLBuilderCommands_TLWarpTimeAttackDungeonMap, InDungeonRevisionId) == 0x000000, "Member 'TLBuilderCommands_TLWarpTimeAttackDungeonMap::InDungeonRevisionId' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLWarpToLandmark
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLWarpToLandmark final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLWarpToLandmark) == 0x000008, "Wrong alignment on TLBuilderCommands_TLWarpToLandmark");
static_assert(sizeof(TLBuilderCommands_TLWarpToLandmark) == 0x000008, "Wrong size on TLBuilderCommands_TLWarpToLandmark");
static_assert(offsetof(TLBuilderCommands_TLWarpToLandmark, Guid) == 0x000000, "Member 'TLBuilderCommands_TLWarpToLandmark::Guid' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLWayPointState
// 0x0008 (0x0008 - 0x0000)
struct TLBuilderCommands_TLWayPointState final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InState;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLWayPointState) == 0x000004, "Wrong alignment on TLBuilderCommands_TLWayPointState");
static_assert(sizeof(TLBuilderCommands_TLWayPointState) == 0x000008, "Wrong size on TLBuilderCommands_TLWayPointState");
static_assert(offsetof(TLBuilderCommands_TLWayPointState, InID) == 0x000000, "Member 'TLBuilderCommands_TLWayPointState::InID' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLWayPointState, InState) == 0x000004, "Member 'TLBuilderCommands_TLWayPointState::InState' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLWidgetBankTimer
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLWidgetBankTimer final
{
public:
	float                                         InIntervalSeconds;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLWidgetBankTimer) == 0x000004, "Wrong alignment on TLBuilderCommands_TLWidgetBankTimer");
static_assert(sizeof(TLBuilderCommands_TLWidgetBankTimer) == 0x000004, "Wrong size on TLBuilderCommands_TLWidgetBankTimer");
static_assert(offsetof(TLBuilderCommands_TLWidgetBankTimer, InIntervalSeconds) == 0x000000, "Member 'TLBuilderCommands_TLWidgetBankTimer::InIntervalSeconds' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLWidgetBankView
// 0x0018 (0x0018 - 0x0000)
struct TLBuilderCommands_TLWidgetBankView final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InParam;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLWidgetBankView) == 0x000008, "Wrong alignment on TLBuilderCommands_TLWidgetBankView");
static_assert(sizeof(TLBuilderCommands_TLWidgetBankView) == 0x000018, "Wrong size on TLBuilderCommands_TLWidgetBankView");
static_assert(offsetof(TLBuilderCommands_TLWidgetBankView, bDisplay) == 0x000000, "Member 'TLBuilderCommands_TLWidgetBankView::bDisplay' has a wrong offset!");
static_assert(offsetof(TLBuilderCommands_TLWidgetBankView, InParam) == 0x000008, "Member 'TLBuilderCommands_TLWidgetBankView::InParam' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLWidgetBugTest
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLWidgetBugTest final
{
public:
	int32                                         InCase;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLWidgetBugTest) == 0x000004, "Wrong alignment on TLBuilderCommands_TLWidgetBugTest");
static_assert(sizeof(TLBuilderCommands_TLWidgetBugTest) == 0x000004, "Wrong size on TLBuilderCommands_TLWidgetBugTest");
static_assert(offsetof(TLBuilderCommands_TLWidgetBugTest, InCase) == 0x000000, "Member 'TLBuilderCommands_TLWidgetBugTest::InCase' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLWorldCarnivalNpc
// 0x0001 (0x0001 - 0x0000)
struct TLBuilderCommands_TLWorldCarnivalNpc final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLWorldCarnivalNpc) == 0x000001, "Wrong alignment on TLBuilderCommands_TLWorldCarnivalNpc");
static_assert(sizeof(TLBuilderCommands_TLWorldCarnivalNpc) == 0x000001, "Wrong size on TLBuilderCommands_TLWorldCarnivalNpc");
static_assert(offsetof(TLBuilderCommands_TLWorldCarnivalNpc, InShow) == 0x000000, "Member 'TLBuilderCommands_TLWorldCarnivalNpc::InShow' has a wrong offset!");

// Function TLClient.TLBuilderCommands.TLWorldMapCloud
// 0x0004 (0x0004 - 0x0000)
struct TLBuilderCommands_TLWorldMapCloud final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLBuilderCommands_TLWorldMapCloud) == 0x000004, "Wrong alignment on TLBuilderCommands_TLWorldMapCloud");
static_assert(sizeof(TLBuilderCommands_TLWorldMapCloud) == 0x000004, "Wrong size on TLBuilderCommands_TLWorldMapCloud");
static_assert(offsetof(TLBuilderCommands_TLWorldMapCloud, InOpacity) == 0x000000, "Member 'TLBuilderCommands_TLWorldMapCloud::InOpacity' has a wrong offset!");

// Function TLClient.TLUserWidgetDynamicEventGuideTitle01.OnPvpMode
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDynamicEventGuideTitle01_OnPvpMode final
{
public:
	bool                                          IsInPvpMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDynamicEventGuideTitle01_OnPvpMode) == 0x000001, "Wrong alignment on TLUserWidgetDynamicEventGuideTitle01_OnPvpMode");
static_assert(sizeof(TLUserWidgetDynamicEventGuideTitle01_OnPvpMode) == 0x000001, "Wrong size on TLUserWidgetDynamicEventGuideTitle01_OnPvpMode");
static_assert(offsetof(TLUserWidgetDynamicEventGuideTitle01_OnPvpMode, IsInPvpMode) == 0x000000, "Member 'TLUserWidgetDynamicEventGuideTitle01_OnPvpMode::IsInPvpMode' has a wrong offset!");

// Function TLClient.TLUserWidgetInputCharacterName.EditableTextBoxInputName_OnTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetInputCharacterName_EditableTextBoxInputName_OnTextChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInputCharacterName_EditableTextBoxInputName_OnTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetInputCharacterName_EditableTextBoxInputName_OnTextChanged");
static_assert(sizeof(TLUserWidgetInputCharacterName_EditableTextBoxInputName_OnTextChanged) == 0x000018, "Wrong size on TLUserWidgetInputCharacterName_EditableTextBoxInputName_OnTextChanged");
static_assert(offsetof(TLUserWidgetInputCharacterName_EditableTextBoxInputName_OnTextChanged, InText) == 0x000000, "Member 'TLUserWidgetInputCharacterName_EditableTextBoxInputName_OnTextChanged::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetInputCharacterName.EditableTextBoxInputName_TextDelegate
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetInputCharacterName_EditableTextBoxInputName_TextDelegate final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInputCharacterName_EditableTextBoxInputName_TextDelegate) == 0x000008, "Wrong alignment on TLUserWidgetInputCharacterName_EditableTextBoxInputName_TextDelegate");
static_assert(sizeof(TLUserWidgetInputCharacterName_EditableTextBoxInputName_TextDelegate) == 0x000018, "Wrong size on TLUserWidgetInputCharacterName_EditableTextBoxInputName_TextDelegate");
static_assert(offsetof(TLUserWidgetInputCharacterName_EditableTextBoxInputName_TextDelegate, ReturnValue) == 0x000000, "Member 'TLUserWidgetInputCharacterName_EditableTextBoxInputName_TextDelegate::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetInputCharacterName.IsValidNameLength
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInputCharacterName_IsValidNameLength final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInputCharacterName_IsValidNameLength) == 0x000001, "Wrong alignment on TLUserWidgetInputCharacterName_IsValidNameLength");
static_assert(sizeof(TLUserWidgetInputCharacterName_IsValidNameLength) == 0x000001, "Wrong size on TLUserWidgetInputCharacterName_IsValidNameLength");
static_assert(offsetof(TLUserWidgetInputCharacterName_IsValidNameLength, ReturnValue) == 0x000000, "Member 'TLUserWidgetInputCharacterName_IsValidNameLength::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetDiscountCashPrice.OnDiscount
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDiscountCashPrice_OnDiscount final
{
public:
	bool                                          InIsDiscount;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDiscountCashPrice_OnDiscount) == 0x000001, "Wrong alignment on TLUserWidgetDiscountCashPrice_OnDiscount");
static_assert(sizeof(TLUserWidgetDiscountCashPrice_OnDiscount) == 0x000001, "Wrong size on TLUserWidgetDiscountCashPrice_OnDiscount");
static_assert(offsetof(TLUserWidgetDiscountCashPrice_OnDiscount, InIsDiscount) == 0x000000, "Member 'TLUserWidgetDiscountCashPrice_OnDiscount::InIsDiscount' has a wrong offset!");

// Function TLClient.TLUserWidgetSimpleSkillSlot.OnUpdateSkillObjectInSkillSlot
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSimpleSkillSlot_OnUpdateSkillObjectInSkillSlot final
{
public:
	ESkillGrade                                   SkillGrade;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSimpleSkillSlot_OnUpdateSkillObjectInSkillSlot) == 0x000001, "Wrong alignment on TLUserWidgetSimpleSkillSlot_OnUpdateSkillObjectInSkillSlot");
static_assert(sizeof(TLUserWidgetSimpleSkillSlot_OnUpdateSkillObjectInSkillSlot) == 0x000001, "Wrong size on TLUserWidgetSimpleSkillSlot_OnUpdateSkillObjectInSkillSlot");
static_assert(offsetof(TLUserWidgetSimpleSkillSlot_OnUpdateSkillObjectInSkillSlot, SkillGrade) == 0x000000, "Member 'TLUserWidgetSimpleSkillSlot_OnUpdateSkillObjectInSkillSlot::SkillGrade' has a wrong offset!");

// Function TLClient.TLSingleModelSceneControlActor.IsPlayingModelSceneConti
// 0x0001 (0x0001 - 0x0000)
struct TLSingleModelSceneControlActor_IsPlayingModelSceneConti final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSingleModelSceneControlActor_IsPlayingModelSceneConti) == 0x000001, "Wrong alignment on TLSingleModelSceneControlActor_IsPlayingModelSceneConti");
static_assert(sizeof(TLSingleModelSceneControlActor_IsPlayingModelSceneConti) == 0x000001, "Wrong size on TLSingleModelSceneControlActor_IsPlayingModelSceneConti");
static_assert(offsetof(TLSingleModelSceneControlActor_IsPlayingModelSceneConti, ReturnValue) == 0x000000, "Member 'TLSingleModelSceneControlActor_IsPlayingModelSceneConti::ReturnValue' has a wrong offset!");

// Function TLClient.TLSingleModelSceneControlActor.PlayModelSceneConti
// 0x0020 (0x0020 - 0x0000)
struct TLSingleModelSceneControlActor_PlayModelSceneConti final
{
public:
	struct FSoftObjectPath                        InSceneContiPath;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopCurrentSCT;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForcePlay;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLSingleModelSceneControlActor_PlayModelSceneConti) == 0x000008, "Wrong alignment on TLSingleModelSceneControlActor_PlayModelSceneConti");
static_assert(sizeof(TLSingleModelSceneControlActor_PlayModelSceneConti) == 0x000020, "Wrong size on TLSingleModelSceneControlActor_PlayModelSceneConti");
static_assert(offsetof(TLSingleModelSceneControlActor_PlayModelSceneConti, InSceneContiPath) == 0x000000, "Member 'TLSingleModelSceneControlActor_PlayModelSceneConti::InSceneContiPath' has a wrong offset!");
static_assert(offsetof(TLSingleModelSceneControlActor_PlayModelSceneConti, bStopCurrentSCT) == 0x000018, "Member 'TLSingleModelSceneControlActor_PlayModelSceneConti::bStopCurrentSCT' has a wrong offset!");
static_assert(offsetof(TLSingleModelSceneControlActor_PlayModelSceneConti, bForcePlay) == 0x000019, "Member 'TLSingleModelSceneControlActor_PlayModelSceneConti::bForcePlay' has a wrong offset!");

// Function TLClient.TLSingleModelSceneControlActor.PlayModelSceneConties
// 0x0018 (0x0018 - 0x0000)
struct TLSingleModelSceneControlActor_PlayModelSceneConties final
{
public:
	TArray<struct FSoftObjectPath>                InSctPathArray;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bStopCurrentSCT;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLSingleModelSceneControlActor_PlayModelSceneConties) == 0x000008, "Wrong alignment on TLSingleModelSceneControlActor_PlayModelSceneConties");
static_assert(sizeof(TLSingleModelSceneControlActor_PlayModelSceneConties) == 0x000018, "Wrong size on TLSingleModelSceneControlActor_PlayModelSceneConties");
static_assert(offsetof(TLSingleModelSceneControlActor_PlayModelSceneConties, InSctPathArray) == 0x000000, "Member 'TLSingleModelSceneControlActor_PlayModelSceneConties::InSctPathArray' has a wrong offset!");
static_assert(offsetof(TLSingleModelSceneControlActor_PlayModelSceneConties, bStopCurrentSCT) == 0x000010, "Member 'TLSingleModelSceneControlActor_PlayModelSceneConties::bStopCurrentSCT' has a wrong offset!");

// Function TLClient.TLSingleModelSceneControlActor.SetModelMeshRotation
// 0x000C (0x000C - 0x0000)
struct TLSingleModelSceneControlActor_SetModelMeshRotation final
{
public:
	struct FRotator                               InRotator;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSingleModelSceneControlActor_SetModelMeshRotation) == 0x000004, "Wrong alignment on TLSingleModelSceneControlActor_SetModelMeshRotation");
static_assert(sizeof(TLSingleModelSceneControlActor_SetModelMeshRotation) == 0x00000C, "Wrong size on TLSingleModelSceneControlActor_SetModelMeshRotation");
static_assert(offsetof(TLSingleModelSceneControlActor_SetModelMeshRotation, InRotator) == 0x000000, "Member 'TLSingleModelSceneControlActor_SetModelMeshRotation::InRotator' has a wrong offset!");

// Function TLClient.TLSingleModelSceneControlActor.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct TLSingleModelSceneControlActor_SetVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSingleModelSceneControlActor_SetVisible) == 0x000001, "Wrong alignment on TLSingleModelSceneControlActor_SetVisible");
static_assert(sizeof(TLSingleModelSceneControlActor_SetVisible) == 0x000001, "Wrong size on TLSingleModelSceneControlActor_SetVisible");
static_assert(offsetof(TLSingleModelSceneControlActor_SetVisible, bVisible) == 0x000000, "Member 'TLSingleModelSceneControlActor_SetVisible::bVisible' has a wrong offset!");

// Function TLClient.TLCharacterSubtitleObject.GetSubtitleUid
// 0x0004 (0x0004 - 0x0000)
struct TLCharacterSubtitleObject_GetSubtitleUid final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCharacterSubtitleObject_GetSubtitleUid) == 0x000004, "Wrong alignment on TLCharacterSubtitleObject_GetSubtitleUid");
static_assert(sizeof(TLCharacterSubtitleObject_GetSubtitleUid) == 0x000004, "Wrong size on TLCharacterSubtitleObject_GetSubtitleUid");
static_assert(offsetof(TLCharacterSubtitleObject_GetSubtitleUid, ReturnValue) == 0x000000, "Member 'TLCharacterSubtitleObject_GetSubtitleUid::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetContentsAlarmObjectiveBase.OnUpdateViewType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContentsAlarmObjectiveBase_OnUpdateViewType final
{
public:
	EContentsAlarmViewType                        InViewType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContentsAlarmObjectiveBase_OnUpdateViewType) == 0x000001, "Wrong alignment on TLUserWidgetContentsAlarmObjectiveBase_OnUpdateViewType");
static_assert(sizeof(TLUserWidgetContentsAlarmObjectiveBase_OnUpdateViewType) == 0x000001, "Wrong size on TLUserWidgetContentsAlarmObjectiveBase_OnUpdateViewType");
static_assert(offsetof(TLUserWidgetContentsAlarmObjectiveBase_OnUpdateViewType, InViewType) == 0x000000, "Member 'TLUserWidgetContentsAlarmObjectiveBase_OnUpdateViewType::InViewType' has a wrong offset!");

// Function TLClient.TLCinematicDialog.OnChoiceTakeCutSceneEnd
// 0x0014 (0x0014 - 0x0000)
struct TLCinematicDialog_OnChoiceTakeCutSceneEnd final
{
public:
	class FName                                   CutSceneID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExclusiveTag;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECutscenePlayResult                           Result;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLCinematicDialog_OnChoiceTakeCutSceneEnd) == 0x000004, "Wrong alignment on TLCinematicDialog_OnChoiceTakeCutSceneEnd");
static_assert(sizeof(TLCinematicDialog_OnChoiceTakeCutSceneEnd) == 0x000014, "Wrong size on TLCinematicDialog_OnChoiceTakeCutSceneEnd");
static_assert(offsetof(TLCinematicDialog_OnChoiceTakeCutSceneEnd, CutSceneID) == 0x000000, "Member 'TLCinematicDialog_OnChoiceTakeCutSceneEnd::CutSceneID' has a wrong offset!");
static_assert(offsetof(TLCinematicDialog_OnChoiceTakeCutSceneEnd, ExclusiveTag) == 0x000008, "Member 'TLCinematicDialog_OnChoiceTakeCutSceneEnd::ExclusiveTag' has a wrong offset!");
static_assert(offsetof(TLCinematicDialog_OnChoiceTakeCutSceneEnd, Result) == 0x000010, "Member 'TLCinematicDialog_OnChoiceTakeCutSceneEnd::Result' has a wrong offset!");

// Function TLClient.TLCinematicDialog.OnTakeCutSceneEnd
// 0x0014 (0x0014 - 0x0000)
struct TLCinematicDialog_OnTakeCutSceneEnd final
{
public:
	class FName                                   CutSceneID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExclusiveTag;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECutscenePlayResult                           Result;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLCinematicDialog_OnTakeCutSceneEnd) == 0x000004, "Wrong alignment on TLCinematicDialog_OnTakeCutSceneEnd");
static_assert(sizeof(TLCinematicDialog_OnTakeCutSceneEnd) == 0x000014, "Wrong size on TLCinematicDialog_OnTakeCutSceneEnd");
static_assert(offsetof(TLCinematicDialog_OnTakeCutSceneEnd, CutSceneID) == 0x000000, "Member 'TLCinematicDialog_OnTakeCutSceneEnd::CutSceneID' has a wrong offset!");
static_assert(offsetof(TLCinematicDialog_OnTakeCutSceneEnd, ExclusiveTag) == 0x000008, "Member 'TLCinematicDialog_OnTakeCutSceneEnd::ExclusiveTag' has a wrong offset!");
static_assert(offsetof(TLCinematicDialog_OnTakeCutSceneEnd, Result) == 0x000010, "Member 'TLCinematicDialog_OnTakeCutSceneEnd::Result' has a wrong offset!");

// Function TLClient.TLUserWidgetRegionScreenMessage.OnSetRegionType
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetRegionScreenMessage_OnSetRegionType final
{
public:
	EMapRegionType                                InPrevRegionType;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMapRegionType                                InCurRegionType;                                   // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRegionScreenMessage_OnSetRegionType) == 0x000001, "Wrong alignment on TLUserWidgetRegionScreenMessage_OnSetRegionType");
static_assert(sizeof(TLUserWidgetRegionScreenMessage_OnSetRegionType) == 0x000002, "Wrong size on TLUserWidgetRegionScreenMessage_OnSetRegionType");
static_assert(offsetof(TLUserWidgetRegionScreenMessage_OnSetRegionType, InPrevRegionType) == 0x000000, "Member 'TLUserWidgetRegionScreenMessage_OnSetRegionType::InPrevRegionType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetRegionScreenMessage_OnSetRegionType, InCurRegionType) == 0x000001, "Member 'TLUserWidgetRegionScreenMessage_OnSetRegionType::InCurRegionType' has a wrong offset!");

// Function TLClient.TLUserWidgetExploreAlarmObjective.OnStateObjectiveAnim
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetExploreAlarmObjective_OnStateObjectiveAnim final
{
public:
	bool                                          bCompleted;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetExploreAlarmObjective_OnStateObjectiveAnim) == 0x000001, "Wrong alignment on TLUserWidgetExploreAlarmObjective_OnStateObjectiveAnim");
static_assert(sizeof(TLUserWidgetExploreAlarmObjective_OnStateObjectiveAnim) == 0x000001, "Wrong size on TLUserWidgetExploreAlarmObjective_OnStateObjectiveAnim");
static_assert(offsetof(TLUserWidgetExploreAlarmObjective_OnStateObjectiveAnim, bCompleted) == 0x000000, "Member 'TLUserWidgetExploreAlarmObjective_OnStateObjectiveAnim::bCompleted' has a wrong offset!");

// Function TLClient.TLUserWidgetListViewEntry.HandleSelected
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetListViewEntry_HandleSelected final
{
public:
	bool                                          Selected;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetListViewEntry_HandleSelected) == 0x000004, "Wrong alignment on TLUserWidgetListViewEntry_HandleSelected");
static_assert(sizeof(TLUserWidgetListViewEntry_HandleSelected) == 0x000008, "Wrong size on TLUserWidgetListViewEntry_HandleSelected");
static_assert(offsetof(TLUserWidgetListViewEntry_HandleSelected, Selected) == 0x000000, "Member 'TLUserWidgetListViewEntry_HandleSelected::Selected' has a wrong offset!");
static_assert(offsetof(TLUserWidgetListViewEntry_HandleSelected, Index_0) == 0x000004, "Member 'TLUserWidgetListViewEntry_HandleSelected::Index_0' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexCodeDetailPanel.OnRewardEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexCodeDetailPanel_OnRewardEvent final
{
public:
	bool                                          InbPlaying;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexCodeDetailPanel_OnRewardEvent) == 0x000001, "Wrong alignment on TLUserWidgetCodexCodeDetailPanel_OnRewardEvent");
static_assert(sizeof(TLUserWidgetCodexCodeDetailPanel_OnRewardEvent) == 0x000001, "Wrong size on TLUserWidgetCodexCodeDetailPanel_OnRewardEvent");
static_assert(offsetof(TLUserWidgetCodexCodeDetailPanel_OnRewardEvent, InbPlaying) == 0x000000, "Member 'TLUserWidgetCodexCodeDetailPanel_OnRewardEvent::InbPlaying' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMatchingDungeonListItem.IsLock
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMatchingDungeonListItem_IsLock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMatchingDungeonListItem_IsLock) == 0x000001, "Wrong alignment on TLUserWidgetPartyMatchingDungeonListItem_IsLock");
static_assert(sizeof(TLUserWidgetPartyMatchingDungeonListItem_IsLock) == 0x000001, "Wrong size on TLUserWidgetPartyMatchingDungeonListItem_IsLock");
static_assert(offsetof(TLUserWidgetPartyMatchingDungeonListItem_IsLock, ReturnValue) == 0x000000, "Member 'TLUserWidgetPartyMatchingDungeonListItem_IsLock::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMatchingDungeonListItem.OnCheck
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMatchingDungeonListItem_OnCheck final
{
public:
	bool                                          bCheck;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMatchingDungeonListItem_OnCheck) == 0x000001, "Wrong alignment on TLUserWidgetPartyMatchingDungeonListItem_OnCheck");
static_assert(sizeof(TLUserWidgetPartyMatchingDungeonListItem_OnCheck) == 0x000001, "Wrong size on TLUserWidgetPartyMatchingDungeonListItem_OnCheck");
static_assert(offsetof(TLUserWidgetPartyMatchingDungeonListItem_OnCheck, bCheck) == 0x000000, "Member 'TLUserWidgetPartyMatchingDungeonListItem_OnCheck::bCheck' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMatchingDungeonListItem.OnLock
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMatchingDungeonListItem_OnLock final
{
public:
	bool                                          bLock;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMatchingDungeonListItem_OnLock) == 0x000001, "Wrong alignment on TLUserWidgetPartyMatchingDungeonListItem_OnLock");
static_assert(sizeof(TLUserWidgetPartyMatchingDungeonListItem_OnLock) == 0x000001, "Wrong size on TLUserWidgetPartyMatchingDungeonListItem_OnLock");
static_assert(offsetof(TLUserWidgetPartyMatchingDungeonListItem_OnLock, bLock) == 0x000000, "Member 'TLUserWidgetPartyMatchingDungeonListItem_OnLock::bLock' has a wrong offset!");

// Function TLClient.TLGameInstance.GetCommandLineValue
// 0x0020 (0x0020 - 0x0000)
struct TLGameInstance_GetCommandLineValue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameInstance_GetCommandLineValue) == 0x000008, "Wrong alignment on TLGameInstance_GetCommandLineValue");
static_assert(sizeof(TLGameInstance_GetCommandLineValue) == 0x000020, "Wrong size on TLGameInstance_GetCommandLineValue");
static_assert(offsetof(TLGameInstance_GetCommandLineValue, Key) == 0x000000, "Member 'TLGameInstance_GetCommandLineValue::Key' has a wrong offset!");
static_assert(offsetof(TLGameInstance_GetCommandLineValue, ReturnValue) == 0x000010, "Member 'TLGameInstance_GetCommandLineValue::ReturnValue' has a wrong offset!");

// Function TLClient.TLGameInstance.IsModuleLoaded
// 0x000C (0x000C - 0x0000)
struct TLGameInstance_IsModuleLoaded final
{
public:
	class FName                                   ModuleName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLGameInstance_IsModuleLoaded) == 0x000004, "Wrong alignment on TLGameInstance_IsModuleLoaded");
static_assert(sizeof(TLGameInstance_IsModuleLoaded) == 0x00000C, "Wrong size on TLGameInstance_IsModuleLoaded");
static_assert(offsetof(TLGameInstance_IsModuleLoaded, ModuleName) == 0x000000, "Member 'TLGameInstance_IsModuleLoaded::ModuleName' has a wrong offset!");
static_assert(offsetof(TLGameInstance_IsModuleLoaded, ReturnValue) == 0x000008, "Member 'TLGameInstance_IsModuleLoaded::ReturnValue' has a wrong offset!");

// Function TLClient.TLGameInstance.GetBuilderCommandSetting
// 0x0008 (0x0008 - 0x0000)
struct TLGameInstance_GetBuilderCommandSetting final
{
public:
	class UTLBuilderCommandSettings*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameInstance_GetBuilderCommandSetting) == 0x000008, "Wrong alignment on TLGameInstance_GetBuilderCommandSetting");
static_assert(sizeof(TLGameInstance_GetBuilderCommandSetting) == 0x000008, "Wrong size on TLGameInstance_GetBuilderCommandSetting");
static_assert(offsetof(TLGameInstance_GetBuilderCommandSetting, ReturnValue) == 0x000000, "Member 'TLGameInstance_GetBuilderCommandSetting::ReturnValue' has a wrong offset!");

// Function TLClient.TLGameInstance.GetDebugSetting
// 0x0008 (0x0008 - 0x0000)
struct TLGameInstance_GetDebugSetting final
{
public:
	class UTLDebugSettings*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameInstance_GetDebugSetting) == 0x000008, "Wrong alignment on TLGameInstance_GetDebugSetting");
static_assert(sizeof(TLGameInstance_GetDebugSetting) == 0x000008, "Wrong size on TLGameInstance_GetDebugSetting");
static_assert(offsetof(TLGameInstance_GetDebugSetting, ReturnValue) == 0x000000, "Member 'TLGameInstance_GetDebugSetting::ReturnValue' has a wrong offset!");

// Function TLClient.TLGameInstance.GetGamepadInputSetting
// 0x0008 (0x0008 - 0x0000)
struct TLGameInstance_GetGamepadInputSetting final
{
public:
	class UTLUserKeyCombinationInputSettings*     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameInstance_GetGamepadInputSetting) == 0x000008, "Wrong alignment on TLGameInstance_GetGamepadInputSetting");
static_assert(sizeof(TLGameInstance_GetGamepadInputSetting) == 0x000008, "Wrong size on TLGameInstance_GetGamepadInputSetting");
static_assert(offsetof(TLGameInstance_GetGamepadInputSetting, ReturnValue) == 0x000000, "Member 'TLGameInstance_GetGamepadInputSetting::ReturnValue' has a wrong offset!");

// Function TLClient.TLGameInstance.GetInputSetting
// 0x0008 (0x0008 - 0x0000)
struct TLGameInstance_GetInputSetting final
{
public:
	class UUserInputSettings*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameInstance_GetInputSetting) == 0x000008, "Wrong alignment on TLGameInstance_GetInputSetting");
static_assert(sizeof(TLGameInstance_GetInputSetting) == 0x000008, "Wrong size on TLGameInstance_GetInputSetting");
static_assert(offsetof(TLGameInstance_GetInputSetting, ReturnValue) == 0x000000, "Member 'TLGameInstance_GetInputSetting::ReturnValue' has a wrong offset!");

// Function TLClient.TLGameInstance.GetUserSetting
// 0x0008 (0x0008 - 0x0000)
struct TLGameInstance_GetUserSetting final
{
public:
	class UTLGameUserSettings*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameInstance_GetUserSetting) == 0x000008, "Wrong alignment on TLGameInstance_GetUserSetting");
static_assert(sizeof(TLGameInstance_GetUserSetting) == 0x000008, "Wrong size on TLGameInstance_GetUserSetting");
static_assert(offsetof(TLGameInstance_GetUserSetting, ReturnValue) == 0x000000, "Member 'TLGameInstance_GetUserSetting::ReturnValue' has a wrong offset!");

// Function TLClient.TLGameInstance.GetUIPlatform
// 0x0001 (0x0001 - 0x0000)
struct TLGameInstance_GetUIPlatform final
{
public:
	ETLUIPlatform                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameInstance_GetUIPlatform) == 0x000001, "Wrong alignment on TLGameInstance_GetUIPlatform");
static_assert(sizeof(TLGameInstance_GetUIPlatform) == 0x000001, "Wrong size on TLGameInstance_GetUIPlatform");
static_assert(offsetof(TLGameInstance_GetUIPlatform, ReturnValue) == 0x000000, "Member 'TLGameInstance_GetUIPlatform::ReturnValue' has a wrong offset!");

// Function TLClient.TLCommandObject.OnRunCommand
// 0x0020 (0x0020 - 0x0000)
struct TLCommandObject_OnRunCommand final
{
public:
	class FString                                 InCommand;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Params_0;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLCommandObject_OnRunCommand) == 0x000008, "Wrong alignment on TLCommandObject_OnRunCommand");
static_assert(sizeof(TLCommandObject_OnRunCommand) == 0x000020, "Wrong size on TLCommandObject_OnRunCommand");
static_assert(offsetof(TLCommandObject_OnRunCommand, InCommand) == 0x000000, "Member 'TLCommandObject_OnRunCommand::InCommand' has a wrong offset!");
static_assert(offsetof(TLCommandObject_OnRunCommand, Params_0) == 0x000010, "Member 'TLCommandObject_OnRunCommand::Params_0' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildSkill.OnChangeUIPlatform
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildSkill_OnChangeUIPlatform final
{
public:
	ETLUIPlatform                                 InUIPlatform;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildSkill_OnChangeUIPlatform) == 0x000001, "Wrong alignment on TLUserWidgetGuildSkill_OnChangeUIPlatform");
static_assert(sizeof(TLUserWidgetGuildSkill_OnChangeUIPlatform) == 0x000001, "Wrong size on TLUserWidgetGuildSkill_OnChangeUIPlatform");
static_assert(offsetof(TLUserWidgetGuildSkill_OnChangeUIPlatform, InUIPlatform) == 0x000000, "Member 'TLUserWidgetGuildSkill_OnChangeUIPlatform::InUIPlatform' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetCastleName
// 0x0020 (0x0020 - 0x0000)
struct TLContentsConditionObjectBase_GetCastleName final
{
public:
	uint64                                        InCastleGuid;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetCastleName) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetCastleName");
static_assert(sizeof(TLContentsConditionObjectBase_GetCastleName) == 0x000020, "Wrong size on TLContentsConditionObjectBase_GetCastleName");
static_assert(offsetof(TLContentsConditionObjectBase_GetCastleName, InCastleGuid) == 0x000000, "Member 'TLContentsConditionObjectBase_GetCastleName::InCastleGuid' has a wrong offset!");
static_assert(offsetof(TLContentsConditionObjectBase_GetCastleName, ReturnValue) == 0x000008, "Member 'TLContentsConditionObjectBase_GetCastleName::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetCurrentEnvTimeType
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionObjectBase_GetCurrentEnvTimeType final
{
public:
	ETLEnvTimeType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetCurrentEnvTimeType) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_GetCurrentEnvTimeType");
static_assert(sizeof(TLContentsConditionObjectBase_GetCurrentEnvTimeType) == 0x000001, "Wrong size on TLContentsConditionObjectBase_GetCurrentEnvTimeType");
static_assert(offsetof(TLContentsConditionObjectBase_GetCurrentEnvTimeType, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_GetCurrentEnvTimeType::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetCurrentEquipWeapon
// 0x0002 (0x0002 - 0x0000)
struct TLContentsConditionObjectBase_GetCurrentEquipWeapon final
{
public:
	struct FTLWeaponSet                           ReturnValue;                                       // 0x0000(0x0002)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetCurrentEquipWeapon) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_GetCurrentEquipWeapon");
static_assert(sizeof(TLContentsConditionObjectBase_GetCurrentEquipWeapon) == 0x000002, "Wrong size on TLContentsConditionObjectBase_GetCurrentEquipWeapon");
static_assert(offsetof(TLContentsConditionObjectBase_GetCurrentEquipWeapon, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_GetCurrentEquipWeapon::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetCurrentJoinDynamicEventState
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionObjectBase_GetCurrentJoinDynamicEventState final
{
public:
	ETLDynamicEventHUDType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetCurrentJoinDynamicEventState) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_GetCurrentJoinDynamicEventState");
static_assert(sizeof(TLContentsConditionObjectBase_GetCurrentJoinDynamicEventState) == 0x000001, "Wrong size on TLContentsConditionObjectBase_GetCurrentJoinDynamicEventState");
static_assert(offsetof(TLContentsConditionObjectBase_GetCurrentJoinDynamicEventState, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_GetCurrentJoinDynamicEventState::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetCurrentRegionGuid
// 0x0008 (0x0008 - 0x0000)
struct TLContentsConditionObjectBase_GetCurrentRegionGuid final
{
public:
	uint64                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetCurrentRegionGuid) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetCurrentRegionGuid");
static_assert(sizeof(TLContentsConditionObjectBase_GetCurrentRegionGuid) == 0x000008, "Wrong size on TLContentsConditionObjectBase_GetCurrentRegionGuid");
static_assert(offsetof(TLContentsConditionObjectBase_GetCurrentRegionGuid, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_GetCurrentRegionGuid::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetCurrentStaticRegionType
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionObjectBase_GetCurrentStaticRegionType final
{
public:
	ETLJsonMapRegionType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetCurrentStaticRegionType) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_GetCurrentStaticRegionType");
static_assert(sizeof(TLContentsConditionObjectBase_GetCurrentStaticRegionType) == 0x000001, "Wrong size on TLContentsConditionObjectBase_GetCurrentStaticRegionType");
static_assert(offsetof(TLContentsConditionObjectBase_GetCurrentStaticRegionType, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_GetCurrentStaticRegionType::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetCurrentStaticRegionTypeDay
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionObjectBase_GetCurrentStaticRegionTypeDay final
{
public:
	ETLJsonMapRegionType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetCurrentStaticRegionTypeDay) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_GetCurrentStaticRegionTypeDay");
static_assert(sizeof(TLContentsConditionObjectBase_GetCurrentStaticRegionTypeDay) == 0x000001, "Wrong size on TLContentsConditionObjectBase_GetCurrentStaticRegionTypeDay");
static_assert(offsetof(TLContentsConditionObjectBase_GetCurrentStaticRegionTypeDay, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_GetCurrentStaticRegionTypeDay::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetCurrentStaticRegionTypeNight
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionObjectBase_GetCurrentStaticRegionTypeNight final
{
public:
	ETLJsonMapRegionType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetCurrentStaticRegionTypeNight) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_GetCurrentStaticRegionTypeNight");
static_assert(sizeof(TLContentsConditionObjectBase_GetCurrentStaticRegionTypeNight) == 0x000001, "Wrong size on TLContentsConditionObjectBase_GetCurrentStaticRegionTypeNight");
static_assert(offsetof(TLContentsConditionObjectBase_GetCurrentStaticRegionTypeNight, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_GetCurrentStaticRegionTypeNight::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetDynamicEventEventEffectName
// 0x0018 (0x0018 - 0x0000)
struct TLContentsConditionObjectBase_GetDynamicEventEventEffectName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetDynamicEventEventEffectName) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetDynamicEventEventEffectName");
static_assert(sizeof(TLContentsConditionObjectBase_GetDynamicEventEventEffectName) == 0x000018, "Wrong size on TLContentsConditionObjectBase_GetDynamicEventEventEffectName");
static_assert(offsetof(TLContentsConditionObjectBase_GetDynamicEventEventEffectName, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_GetDynamicEventEventEffectName::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetDynamicEventTitle
// 0x0020 (0x0020 - 0x0000)
struct TLContentsConditionObjectBase_GetDynamicEventTitle final
{
public:
	class FName                                   InDECommonTableId;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetDynamicEventTitle) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetDynamicEventTitle");
static_assert(sizeof(TLContentsConditionObjectBase_GetDynamicEventTitle) == 0x000020, "Wrong size on TLContentsConditionObjectBase_GetDynamicEventTitle");
static_assert(offsetof(TLContentsConditionObjectBase_GetDynamicEventTitle, InDECommonTableId) == 0x000000, "Member 'TLContentsConditionObjectBase_GetDynamicEventTitle::InDECommonTableId' has a wrong offset!");
static_assert(offsetof(TLContentsConditionObjectBase_GetDynamicEventTitle, ReturnValue) == 0x000008, "Member 'TLContentsConditionObjectBase_GetDynamicEventTitle::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetDynamicEventTribeName
// 0x0018 (0x0018 - 0x0000)
struct TLContentsConditionObjectBase_GetDynamicEventTribeName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetDynamicEventTribeName) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetDynamicEventTribeName");
static_assert(sizeof(TLContentsConditionObjectBase_GetDynamicEventTribeName) == 0x000018, "Wrong size on TLContentsConditionObjectBase_GetDynamicEventTribeName");
static_assert(offsetof(TLContentsConditionObjectBase_GetDynamicEventTribeName, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_GetDynamicEventTribeName::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetDynamicEventTribeNameByUid
// 0x0020 (0x0020 - 0x0000)
struct TLContentsConditionObjectBase_GetDynamicEventTribeNameByUid final
{
public:
	int32                                         InUID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetDynamicEventTribeNameByUid) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetDynamicEventTribeNameByUid");
static_assert(sizeof(TLContentsConditionObjectBase_GetDynamicEventTribeNameByUid) == 0x000020, "Wrong size on TLContentsConditionObjectBase_GetDynamicEventTribeNameByUid");
static_assert(offsetof(TLContentsConditionObjectBase_GetDynamicEventTribeNameByUid, InUID) == 0x000000, "Member 'TLContentsConditionObjectBase_GetDynamicEventTribeNameByUid::InUID' has a wrong offset!");
static_assert(offsetof(TLContentsConditionObjectBase_GetDynamicEventTribeNameByUid, ReturnValue) == 0x000008, "Member 'TLContentsConditionObjectBase_GetDynamicEventTribeNameByUid::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetEnteredSiegeWarfareCastleGuid
// 0x0008 (0x0008 - 0x0000)
struct TLContentsConditionObjectBase_GetEnteredSiegeWarfareCastleGuid final
{
public:
	uint64                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetEnteredSiegeWarfareCastleGuid) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetEnteredSiegeWarfareCastleGuid");
static_assert(sizeof(TLContentsConditionObjectBase_GetEnteredSiegeWarfareCastleGuid) == 0x000008, "Wrong size on TLContentsConditionObjectBase_GetEnteredSiegeWarfareCastleGuid");
static_assert(offsetof(TLContentsConditionObjectBase_GetEnteredSiegeWarfareCastleGuid, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_GetEnteredSiegeWarfareCastleGuid::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetEquipAmmoType
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionObjectBase_GetEquipAmmoType final
{
public:
	EItemCategory                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetEquipAmmoType) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_GetEquipAmmoType");
static_assert(sizeof(TLContentsConditionObjectBase_GetEquipAmmoType) == 0x000001, "Wrong size on TLContentsConditionObjectBase_GetEquipAmmoType");
static_assert(offsetof(TLContentsConditionObjectBase_GetEquipAmmoType, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_GetEquipAmmoType::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetFieldBossName
// 0x0020 (0x0020 - 0x0000)
struct TLContentsConditionObjectBase_GetFieldBossName final
{
public:
	uint64                                        InGuid;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetFieldBossName) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetFieldBossName");
static_assert(sizeof(TLContentsConditionObjectBase_GetFieldBossName) == 0x000020, "Wrong size on TLContentsConditionObjectBase_GetFieldBossName");
static_assert(offsetof(TLContentsConditionObjectBase_GetFieldBossName, InGuid) == 0x000000, "Member 'TLContentsConditionObjectBase_GetFieldBossName::InGuid' has a wrong offset!");
static_assert(offsetof(TLContentsConditionObjectBase_GetFieldBossName, ReturnValue) == 0x000008, "Member 'TLContentsConditionObjectBase_GetFieldBossName::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetInventoryItemCountByName
// 0x000C (0x000C - 0x0000)
struct TLContentsConditionObjectBase_GetInventoryItemCountByName final
{
public:
	class FName                                   InItemRowName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetInventoryItemCountByName) == 0x000004, "Wrong alignment on TLContentsConditionObjectBase_GetInventoryItemCountByName");
static_assert(sizeof(TLContentsConditionObjectBase_GetInventoryItemCountByName) == 0x00000C, "Wrong size on TLContentsConditionObjectBase_GetInventoryItemCountByName");
static_assert(offsetof(TLContentsConditionObjectBase_GetInventoryItemCountByName, InItemRowName) == 0x000000, "Member 'TLContentsConditionObjectBase_GetInventoryItemCountByName::InItemRowName' has a wrong offset!");
static_assert(offsetof(TLContentsConditionObjectBase_GetInventoryItemCountByName, ReturnValue) == 0x000008, "Member 'TLContentsConditionObjectBase_GetInventoryItemCountByName::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetJoinDynamicEventCommonTableId
// 0x0008 (0x0008 - 0x0000)
struct TLContentsConditionObjectBase_GetJoinDynamicEventCommonTableId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetJoinDynamicEventCommonTableId) == 0x000004, "Wrong alignment on TLContentsConditionObjectBase_GetJoinDynamicEventCommonTableId");
static_assert(sizeof(TLContentsConditionObjectBase_GetJoinDynamicEventCommonTableId) == 0x000008, "Wrong size on TLContentsConditionObjectBase_GetJoinDynamicEventCommonTableId");
static_assert(offsetof(TLContentsConditionObjectBase_GetJoinDynamicEventCommonTableId, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_GetJoinDynamicEventCommonTableId::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetJoinDynamicEventGuid
// 0x0008 (0x0008 - 0x0000)
struct TLContentsConditionObjectBase_GetJoinDynamicEventGuid final
{
public:
	uint64                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetJoinDynamicEventGuid) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetJoinDynamicEventGuid");
static_assert(sizeof(TLContentsConditionObjectBase_GetJoinDynamicEventGuid) == 0x000008, "Wrong size on TLContentsConditionObjectBase_GetJoinDynamicEventGuid");
static_assert(offsetof(TLContentsConditionObjectBase_GetJoinDynamicEventGuid, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_GetJoinDynamicEventGuid::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetJoinOccupationGuid
// 0x0008 (0x0008 - 0x0000)
struct TLContentsConditionObjectBase_GetJoinOccupationGuid final
{
public:
	uint64                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetJoinOccupationGuid) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetJoinOccupationGuid");
static_assert(sizeof(TLContentsConditionObjectBase_GetJoinOccupationGuid) == 0x000008, "Wrong size on TLContentsConditionObjectBase_GetJoinOccupationGuid");
static_assert(offsetof(TLContentsConditionObjectBase_GetJoinOccupationGuid, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_GetJoinOccupationGuid::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetLevel
// 0x0004 (0x0004 - 0x0000)
struct TLContentsConditionObjectBase_GetLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetLevel) == 0x000004, "Wrong alignment on TLContentsConditionObjectBase_GetLevel");
static_assert(sizeof(TLContentsConditionObjectBase_GetLevel) == 0x000004, "Wrong size on TLContentsConditionObjectBase_GetLevel");
static_assert(offsetof(TLContentsConditionObjectBase_GetLevel, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_GetLevel::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetMapRegionType
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionObjectBase_GetMapRegionType final
{
public:
	EMapRegionType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetMapRegionType) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_GetMapRegionType");
static_assert(sizeof(TLContentsConditionObjectBase_GetMapRegionType) == 0x000001, "Wrong size on TLContentsConditionObjectBase_GetMapRegionType");
static_assert(offsetof(TLContentsConditionObjectBase_GetMapRegionType, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_GetMapRegionType::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetMyPcCriminalType
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionObjectBase_GetMyPcCriminalType final
{
public:
	ECriminalType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetMyPcCriminalType) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_GetMyPcCriminalType");
static_assert(sizeof(TLContentsConditionObjectBase_GetMyPcCriminalType) == 0x000001, "Wrong size on TLContentsConditionObjectBase_GetMyPcCriminalType");
static_assert(offsetof(TLContentsConditionObjectBase_GetMyPcCriminalType, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_GetMyPcCriminalType::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetOccupationName
// 0x0020 (0x0020 - 0x0000)
struct TLContentsConditionObjectBase_GetOccupationName final
{
public:
	uint64                                        InOccupationGuid;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetOccupationName) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetOccupationName");
static_assert(sizeof(TLContentsConditionObjectBase_GetOccupationName) == 0x000020, "Wrong size on TLContentsConditionObjectBase_GetOccupationName");
static_assert(offsetof(TLContentsConditionObjectBase_GetOccupationName, InOccupationGuid) == 0x000000, "Member 'TLContentsConditionObjectBase_GetOccupationName::InOccupationGuid' has a wrong offset!");
static_assert(offsetof(TLContentsConditionObjectBase_GetOccupationName, ReturnValue) == 0x000008, "Member 'TLContentsConditionObjectBase_GetOccupationName::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetOccupationState
// 0x0010 (0x0010 - 0x0000)
struct TLContentsConditionObjectBase_GetOccupationState final
{
public:
	uint64                                        InOccupationGuid;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOccupationState                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLContentsConditionObjectBase_GetOccupationState) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetOccupationState");
static_assert(sizeof(TLContentsConditionObjectBase_GetOccupationState) == 0x000010, "Wrong size on TLContentsConditionObjectBase_GetOccupationState");
static_assert(offsetof(TLContentsConditionObjectBase_GetOccupationState, InOccupationGuid) == 0x000000, "Member 'TLContentsConditionObjectBase_GetOccupationState::InOccupationGuid' has a wrong offset!");
static_assert(offsetof(TLContentsConditionObjectBase_GetOccupationState, ReturnValue) == 0x000008, "Member 'TLContentsConditionObjectBase_GetOccupationState::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetPrevRegionGuid
// 0x0008 (0x0008 - 0x0000)
struct TLContentsConditionObjectBase_GetPrevRegionGuid final
{
public:
	uint64                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetPrevRegionGuid) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetPrevRegionGuid");
static_assert(sizeof(TLContentsConditionObjectBase_GetPrevRegionGuid) == 0x000008, "Wrong size on TLContentsConditionObjectBase_GetPrevRegionGuid");
static_assert(offsetof(TLContentsConditionObjectBase_GetPrevRegionGuid, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_GetPrevRegionGuid::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetSiegePolymorphName
// 0x0018 (0x0018 - 0x0000)
struct TLContentsConditionObjectBase_GetSiegePolymorphName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetSiegePolymorphName) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetSiegePolymorphName");
static_assert(sizeof(TLContentsConditionObjectBase_GetSiegePolymorphName) == 0x000018, "Wrong size on TLContentsConditionObjectBase_GetSiegePolymorphName");
static_assert(offsetof(TLContentsConditionObjectBase_GetSiegePolymorphName, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_GetSiegePolymorphName::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetSiegeWarfareName
// 0x0020 (0x0020 - 0x0000)
struct TLContentsConditionObjectBase_GetSiegeWarfareName final
{
public:
	uint64                                        InCastleGuid;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetSiegeWarfareName) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetSiegeWarfareName");
static_assert(sizeof(TLContentsConditionObjectBase_GetSiegeWarfareName) == 0x000020, "Wrong size on TLContentsConditionObjectBase_GetSiegeWarfareName");
static_assert(offsetof(TLContentsConditionObjectBase_GetSiegeWarfareName, InCastleGuid) == 0x000000, "Member 'TLContentsConditionObjectBase_GetSiegeWarfareName::InCastleGuid' has a wrong offset!");
static_assert(offsetof(TLContentsConditionObjectBase_GetSiegeWarfareName, ReturnValue) == 0x000008, "Member 'TLContentsConditionObjectBase_GetSiegeWarfareName::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetStaticRegionType
// 0x0010 (0x0010 - 0x0000)
struct TLContentsConditionObjectBase_GetStaticRegionType final
{
public:
	uint64                                        InRegionGuid;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLJsonMapRegionType                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLContentsConditionObjectBase_GetStaticRegionType) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetStaticRegionType");
static_assert(sizeof(TLContentsConditionObjectBase_GetStaticRegionType) == 0x000010, "Wrong size on TLContentsConditionObjectBase_GetStaticRegionType");
static_assert(offsetof(TLContentsConditionObjectBase_GetStaticRegionType, InRegionGuid) == 0x000000, "Member 'TLContentsConditionObjectBase_GetStaticRegionType::InRegionGuid' has a wrong offset!");
static_assert(offsetof(TLContentsConditionObjectBase_GetStaticRegionType, ReturnValue) == 0x000008, "Member 'TLContentsConditionObjectBase_GetStaticRegionType::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetStaticRegionTypeDay
// 0x0010 (0x0010 - 0x0000)
struct TLContentsConditionObjectBase_GetStaticRegionTypeDay final
{
public:
	uint64                                        InRegionGuid;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLJsonMapRegionType                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLContentsConditionObjectBase_GetStaticRegionTypeDay) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetStaticRegionTypeDay");
static_assert(sizeof(TLContentsConditionObjectBase_GetStaticRegionTypeDay) == 0x000010, "Wrong size on TLContentsConditionObjectBase_GetStaticRegionTypeDay");
static_assert(offsetof(TLContentsConditionObjectBase_GetStaticRegionTypeDay, InRegionGuid) == 0x000000, "Member 'TLContentsConditionObjectBase_GetStaticRegionTypeDay::InRegionGuid' has a wrong offset!");
static_assert(offsetof(TLContentsConditionObjectBase_GetStaticRegionTypeDay, ReturnValue) == 0x000008, "Member 'TLContentsConditionObjectBase_GetStaticRegionTypeDay::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetStaticRegionTypeNight
// 0x0010 (0x0010 - 0x0000)
struct TLContentsConditionObjectBase_GetStaticRegionTypeNight final
{
public:
	uint64                                        InRegionGuid;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLJsonMapRegionType                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLContentsConditionObjectBase_GetStaticRegionTypeNight) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetStaticRegionTypeNight");
static_assert(sizeof(TLContentsConditionObjectBase_GetStaticRegionTypeNight) == 0x000010, "Wrong size on TLContentsConditionObjectBase_GetStaticRegionTypeNight");
static_assert(offsetof(TLContentsConditionObjectBase_GetStaticRegionTypeNight, InRegionGuid) == 0x000000, "Member 'TLContentsConditionObjectBase_GetStaticRegionTypeNight::InRegionGuid' has a wrong offset!");
static_assert(offsetof(TLContentsConditionObjectBase_GetStaticRegionTypeNight, ReturnValue) == 0x000008, "Member 'TLContentsConditionObjectBase_GetStaticRegionTypeNight::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetSumCountByCategoryFromInventory
// 0x0010 (0x0010 - 0x0000)
struct TLContentsConditionObjectBase_GetSumCountByCategoryFromInventory final
{
public:
	EItemCategory                                 InItemCategory;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetSumCountByCategoryFromInventory) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetSumCountByCategoryFromInventory");
static_assert(sizeof(TLContentsConditionObjectBase_GetSumCountByCategoryFromInventory) == 0x000010, "Wrong size on TLContentsConditionObjectBase_GetSumCountByCategoryFromInventory");
static_assert(offsetof(TLContentsConditionObjectBase_GetSumCountByCategoryFromInventory, InItemCategory) == 0x000000, "Member 'TLContentsConditionObjectBase_GetSumCountByCategoryFromInventory::InItemCategory' has a wrong offset!");
static_assert(offsetof(TLContentsConditionObjectBase_GetSumCountByCategoryFromInventory, ReturnValue) == 0x000008, "Member 'TLContentsConditionObjectBase_GetSumCountByCategoryFromInventory::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetTaxDeliveryName
// 0x0020 (0x0020 - 0x0000)
struct TLContentsConditionObjectBase_GetTaxDeliveryName final
{
public:
	uint64                                        InGuid;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetTaxDeliveryName) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetTaxDeliveryName");
static_assert(sizeof(TLContentsConditionObjectBase_GetTaxDeliveryName) == 0x000020, "Wrong size on TLContentsConditionObjectBase_GetTaxDeliveryName");
static_assert(offsetof(TLContentsConditionObjectBase_GetTaxDeliveryName, InGuid) == 0x000000, "Member 'TLContentsConditionObjectBase_GetTaxDeliveryName::InGuid' has a wrong offset!");
static_assert(offsetof(TLContentsConditionObjectBase_GetTaxDeliveryName, ReturnValue) == 0x000008, "Member 'TLContentsConditionObjectBase_GetTaxDeliveryName::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetWorldBossName
// 0x0020 (0x0020 - 0x0000)
struct TLContentsConditionObjectBase_GetWorldBossName final
{
public:
	uint64                                        InGuid;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetWorldBossName) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetWorldBossName");
static_assert(sizeof(TLContentsConditionObjectBase_GetWorldBossName) == 0x000020, "Wrong size on TLContentsConditionObjectBase_GetWorldBossName");
static_assert(offsetof(TLContentsConditionObjectBase_GetWorldBossName, InGuid) == 0x000000, "Member 'TLContentsConditionObjectBase_GetWorldBossName::InGuid' has a wrong offset!");
static_assert(offsetof(TLContentsConditionObjectBase_GetWorldBossName, ReturnValue) == 0x000008, "Member 'TLContentsConditionObjectBase_GetWorldBossName::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.HasContract
// 0x000C (0x000C - 0x0000)
struct TLContentsConditionObjectBase_HasContract final
{
public:
	class FName                                   InGuid;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLContentsConditionObjectBase_HasContract) == 0x000004, "Wrong alignment on TLContentsConditionObjectBase_HasContract");
static_assert(sizeof(TLContentsConditionObjectBase_HasContract) == 0x00000C, "Wrong size on TLContentsConditionObjectBase_HasContract");
static_assert(offsetof(TLContentsConditionObjectBase_HasContract, InGuid) == 0x000000, "Member 'TLContentsConditionObjectBase_HasContract::InGuid' has a wrong offset!");
static_assert(offsetof(TLContentsConditionObjectBase_HasContract, ReturnValue) == 0x000008, "Member 'TLContentsConditionObjectBase_HasContract::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.IsAlive
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionObjectBase_IsAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_IsAlive) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_IsAlive");
static_assert(sizeof(TLContentsConditionObjectBase_IsAlive) == 0x000001, "Wrong size on TLContentsConditionObjectBase_IsAlive");
static_assert(offsetof(TLContentsConditionObjectBase_IsAlive, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_IsAlive::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.IsEclipseStarted
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionObjectBase_IsEclipseStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_IsEclipseStarted) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_IsEclipseStarted");
static_assert(sizeof(TLContentsConditionObjectBase_IsEclipseStarted) == 0x000001, "Wrong size on TLContentsConditionObjectBase_IsEclipseStarted");
static_assert(offsetof(TLContentsConditionObjectBase_IsEclipseStarted, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_IsEclipseStarted::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.IsEnteredContentsVolume
// 0x000C (0x000C - 0x0000)
struct TLContentsConditionObjectBase_IsEnteredContentsVolume final
{
public:
	class FName                                   InEventName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLContentsConditionObjectBase_IsEnteredContentsVolume) == 0x000004, "Wrong alignment on TLContentsConditionObjectBase_IsEnteredContentsVolume");
static_assert(sizeof(TLContentsConditionObjectBase_IsEnteredContentsVolume) == 0x00000C, "Wrong size on TLContentsConditionObjectBase_IsEnteredContentsVolume");
static_assert(offsetof(TLContentsConditionObjectBase_IsEnteredContentsVolume, InEventName) == 0x000000, "Member 'TLContentsConditionObjectBase_IsEnteredContentsVolume::InEventName' has a wrong offset!");
static_assert(offsetof(TLContentsConditionObjectBase_IsEnteredContentsVolume, ReturnValue) == 0x000008, "Member 'TLContentsConditionObjectBase_IsEnteredContentsVolume::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.IsEquipByName
// 0x000C (0x000C - 0x0000)
struct TLContentsConditionObjectBase_IsEquipByName final
{
public:
	class FName                                   InItemRowName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLContentsConditionObjectBase_IsEquipByName) == 0x000004, "Wrong alignment on TLContentsConditionObjectBase_IsEquipByName");
static_assert(sizeof(TLContentsConditionObjectBase_IsEquipByName) == 0x00000C, "Wrong size on TLContentsConditionObjectBase_IsEquipByName");
static_assert(offsetof(TLContentsConditionObjectBase_IsEquipByName, InItemRowName) == 0x000000, "Member 'TLContentsConditionObjectBase_IsEquipByName::InItemRowName' has a wrong offset!");
static_assert(offsetof(TLContentsConditionObjectBase_IsEquipByName, ReturnValue) == 0x000008, "Member 'TLContentsConditionObjectBase_IsEquipByName::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.IsInventoryItemByCategory
// 0x0002 (0x0002 - 0x0000)
struct TLContentsConditionObjectBase_IsInventoryItemByCategory final
{
public:
	EItemCategory                                 InItemCategory;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_IsInventoryItemByCategory) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_IsInventoryItemByCategory");
static_assert(sizeof(TLContentsConditionObjectBase_IsInventoryItemByCategory) == 0x000002, "Wrong size on TLContentsConditionObjectBase_IsInventoryItemByCategory");
static_assert(offsetof(TLContentsConditionObjectBase_IsInventoryItemByCategory, InItemCategory) == 0x000000, "Member 'TLContentsConditionObjectBase_IsInventoryItemByCategory::InItemCategory' has a wrong offset!");
static_assert(offsetof(TLContentsConditionObjectBase_IsInventoryItemByCategory, ReturnValue) == 0x000001, "Member 'TLContentsConditionObjectBase_IsInventoryItemByCategory::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.IsInventoryItemByName
// 0x000C (0x000C - 0x0000)
struct TLContentsConditionObjectBase_IsInventoryItemByName final
{
public:
	class FName                                   InItemRowName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLContentsConditionObjectBase_IsInventoryItemByName) == 0x000004, "Wrong alignment on TLContentsConditionObjectBase_IsInventoryItemByName");
static_assert(sizeof(TLContentsConditionObjectBase_IsInventoryItemByName) == 0x00000C, "Wrong size on TLContentsConditionObjectBase_IsInventoryItemByName");
static_assert(offsetof(TLContentsConditionObjectBase_IsInventoryItemByName, InItemRowName) == 0x000000, "Member 'TLContentsConditionObjectBase_IsInventoryItemByName::InItemRowName' has a wrong offset!");
static_assert(offsetof(TLContentsConditionObjectBase_IsInventoryItemByName, ReturnValue) == 0x000008, "Member 'TLContentsConditionObjectBase_IsInventoryItemByName::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.IsJoinCombatContents
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionObjectBase_IsJoinCombatContents final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_IsJoinCombatContents) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_IsJoinCombatContents");
static_assert(sizeof(TLContentsConditionObjectBase_IsJoinCombatContents) == 0x000001, "Wrong size on TLContentsConditionObjectBase_IsJoinCombatContents");
static_assert(offsetof(TLContentsConditionObjectBase_IsJoinCombatContents, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_IsJoinCombatContents::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.IsJoinDynamicEvent
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionObjectBase_IsJoinDynamicEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_IsJoinDynamicEvent) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_IsJoinDynamicEvent");
static_assert(sizeof(TLContentsConditionObjectBase_IsJoinDynamicEvent) == 0x000001, "Wrong size on TLContentsConditionObjectBase_IsJoinDynamicEvent");
static_assert(offsetof(TLContentsConditionObjectBase_IsJoinDynamicEvent, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_IsJoinDynamicEvent::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.IsJoinFieldBoss
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionObjectBase_IsJoinFieldBoss final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_IsJoinFieldBoss) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_IsJoinFieldBoss");
static_assert(sizeof(TLContentsConditionObjectBase_IsJoinFieldBoss) == 0x000001, "Wrong size on TLContentsConditionObjectBase_IsJoinFieldBoss");
static_assert(offsetof(TLContentsConditionObjectBase_IsJoinFieldBoss, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_IsJoinFieldBoss::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.IsJoinOccupation
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionObjectBase_IsJoinOccupation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_IsJoinOccupation) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_IsJoinOccupation");
static_assert(sizeof(TLContentsConditionObjectBase_IsJoinOccupation) == 0x000001, "Wrong size on TLContentsConditionObjectBase_IsJoinOccupation");
static_assert(offsetof(TLContentsConditionObjectBase_IsJoinOccupation, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_IsJoinOccupation::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.IsJoinTaxDelivery
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionObjectBase_IsJoinTaxDelivery final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_IsJoinTaxDelivery) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_IsJoinTaxDelivery");
static_assert(sizeof(TLContentsConditionObjectBase_IsJoinTaxDelivery) == 0x000001, "Wrong size on TLContentsConditionObjectBase_IsJoinTaxDelivery");
static_assert(offsetof(TLContentsConditionObjectBase_IsJoinTaxDelivery, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_IsJoinTaxDelivery::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.IsJoinWorldBoss
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionObjectBase_IsJoinWorldBoss final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_IsJoinWorldBoss) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_IsJoinWorldBoss");
static_assert(sizeof(TLContentsConditionObjectBase_IsJoinWorldBoss) == 0x000001, "Wrong size on TLContentsConditionObjectBase_IsJoinWorldBoss");
static_assert(offsetof(TLContentsConditionObjectBase_IsJoinWorldBoss, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_IsJoinWorldBoss::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.IsSiegeEntered
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionObjectBase_IsSiegeEntered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_IsSiegeEntered) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_IsSiegeEntered");
static_assert(sizeof(TLContentsConditionObjectBase_IsSiegeEntered) == 0x000001, "Wrong size on TLContentsConditionObjectBase_IsSiegeEntered");
static_assert(offsetof(TLContentsConditionObjectBase_IsSiegeEntered, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_IsSiegeEntered::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.IsSiegePolymorph
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionObjectBase_IsSiegePolymorph final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_IsSiegePolymorph) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_IsSiegePolymorph");
static_assert(sizeof(TLContentsConditionObjectBase_IsSiegePolymorph) == 0x000001, "Wrong size on TLContentsConditionObjectBase_IsSiegePolymorph");
static_assert(offsetof(TLContentsConditionObjectBase_IsSiegePolymorph, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_IsSiegePolymorph::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.IsSiegeProgress
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionObjectBase_IsSiegeProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_IsSiegeProgress) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_IsSiegeProgress");
static_assert(sizeof(TLContentsConditionObjectBase_IsSiegeProgress) == 0x000001, "Wrong size on TLContentsConditionObjectBase_IsSiegeProgress");
static_assert(offsetof(TLContentsConditionObjectBase_IsSiegeProgress, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_IsSiegeProgress::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.IsSiegeStandby
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionObjectBase_IsSiegeStandby final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_IsSiegeStandby) == 0x000001, "Wrong alignment on TLContentsConditionObjectBase_IsSiegeStandby");
static_assert(sizeof(TLContentsConditionObjectBase_IsSiegeStandby) == 0x000001, "Wrong size on TLContentsConditionObjectBase_IsSiegeStandby");
static_assert(offsetof(TLContentsConditionObjectBase_IsSiegeStandby, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_IsSiegeStandby::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionObjectBase.GetCurrentRegionName
// 0x0018 (0x0018 - 0x0000)
struct TLContentsConditionObjectBase_GetCurrentRegionName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionObjectBase_GetCurrentRegionName) == 0x000008, "Wrong alignment on TLContentsConditionObjectBase_GetCurrentRegionName");
static_assert(sizeof(TLContentsConditionObjectBase_GetCurrentRegionName) == 0x000018, "Wrong size on TLContentsConditionObjectBase_GetCurrentRegionName");
static_assert(offsetof(TLContentsConditionObjectBase_GetCurrentRegionName, ReturnValue) == 0x000000, "Member 'TLContentsConditionObjectBase_GetCurrentRegionName::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetMagicDollExpeditionDepart.OnUpdateExpeditionState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMagicDollExpeditionDepart_OnUpdateExpeditionState final
{
public:
	ETLExpeditionState                            State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMagicDollExpeditionDepart_OnUpdateExpeditionState) == 0x000001, "Wrong alignment on TLUserWidgetMagicDollExpeditionDepart_OnUpdateExpeditionState");
static_assert(sizeof(TLUserWidgetMagicDollExpeditionDepart_OnUpdateExpeditionState) == 0x000001, "Wrong size on TLUserWidgetMagicDollExpeditionDepart_OnUpdateExpeditionState");
static_assert(offsetof(TLUserWidgetMagicDollExpeditionDepart_OnUpdateExpeditionState, State) == 0x000000, "Member 'TLUserWidgetMagicDollExpeditionDepart_OnUpdateExpeditionState::State' has a wrong offset!");

// Function TLClient.TLContentsConditionActionKeyGuide.OnChangePolymorph
// 0x000C (0x000C - 0x0000)
struct TLContentsConditionActionKeyGuide_OnChangePolymorph final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLMobiltyType                                MobilityType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLContentsConditionActionKeyGuide_OnChangePolymorph) == 0x000004, "Wrong alignment on TLContentsConditionActionKeyGuide_OnChangePolymorph");
static_assert(sizeof(TLContentsConditionActionKeyGuide_OnChangePolymorph) == 0x00000C, "Wrong size on TLContentsConditionActionKeyGuide_OnChangePolymorph");
static_assert(offsetof(TLContentsConditionActionKeyGuide_OnChangePolymorph, ID) == 0x000000, "Member 'TLContentsConditionActionKeyGuide_OnChangePolymorph::ID' has a wrong offset!");
static_assert(offsetof(TLContentsConditionActionKeyGuide_OnChangePolymorph, MobilityType) == 0x000008, "Member 'TLContentsConditionActionKeyGuide_OnChangePolymorph::MobilityType' has a wrong offset!");

// Function TLClient.TLContentsConditionActionKeyGuide.ShowGuide
// 0x0018 (0x0018 - 0x0000)
struct TLContentsConditionActionKeyGuide_ShowGuide final
{
public:
	class FName                                   GameValue;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTLActionKeyGuideInfo>          Items;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionActionKeyGuide_ShowGuide) == 0x000008, "Wrong alignment on TLContentsConditionActionKeyGuide_ShowGuide");
static_assert(sizeof(TLContentsConditionActionKeyGuide_ShowGuide) == 0x000018, "Wrong size on TLContentsConditionActionKeyGuide_ShowGuide");
static_assert(offsetof(TLContentsConditionActionKeyGuide_ShowGuide, GameValue) == 0x000000, "Member 'TLContentsConditionActionKeyGuide_ShowGuide::GameValue' has a wrong offset!");
static_assert(offsetof(TLContentsConditionActionKeyGuide_ShowGuide, Items) == 0x000008, "Member 'TLContentsConditionActionKeyGuide_ShowGuide::Items' has a wrong offset!");

// Function TLClient.TLContentsConditionActionKeyGuide.ShowGuideFishing
// 0x0010 (0x0010 - 0x0000)
struct TLContentsConditionActionKeyGuide_ShowGuideFishing final
{
public:
	TArray<struct FTLActionKeyGuideInfo>          Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionActionKeyGuide_ShowGuideFishing) == 0x000008, "Wrong alignment on TLContentsConditionActionKeyGuide_ShowGuideFishing");
static_assert(sizeof(TLContentsConditionActionKeyGuide_ShowGuideFishing) == 0x000010, "Wrong size on TLContentsConditionActionKeyGuide_ShowGuideFishing");
static_assert(offsetof(TLContentsConditionActionKeyGuide_ShowGuideFishing, Items) == 0x000000, "Member 'TLContentsConditionActionKeyGuide_ShowGuideFishing::Items' has a wrong offset!");

// Function TLClient.TLContentsConditionActionKeyGuide.UpdateGuide
// 0x0018 (0x0018 - 0x0000)
struct TLContentsConditionActionKeyGuide_UpdateGuide final
{
public:
	class FName                                   GameValue;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTLActionKeyGuideInfo>          Items;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionActionKeyGuide_UpdateGuide) == 0x000008, "Wrong alignment on TLContentsConditionActionKeyGuide_UpdateGuide");
static_assert(sizeof(TLContentsConditionActionKeyGuide_UpdateGuide) == 0x000018, "Wrong size on TLContentsConditionActionKeyGuide_UpdateGuide");
static_assert(offsetof(TLContentsConditionActionKeyGuide_UpdateGuide, GameValue) == 0x000000, "Member 'TLContentsConditionActionKeyGuide_UpdateGuide::GameValue' has a wrong offset!");
static_assert(offsetof(TLContentsConditionActionKeyGuide_UpdateGuide, Items) == 0x000008, "Member 'TLContentsConditionActionKeyGuide_UpdateGuide::Items' has a wrong offset!");

// Function TLClient.TLContentsConditionActionKeyGuide.UpdateGuideFishing
// 0x0010 (0x0010 - 0x0000)
struct TLContentsConditionActionKeyGuide_UpdateGuideFishing final
{
public:
	TArray<struct FTLActionKeyGuideInfo>          Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionActionKeyGuide_UpdateGuideFishing) == 0x000008, "Wrong alignment on TLContentsConditionActionKeyGuide_UpdateGuideFishing");
static_assert(sizeof(TLContentsConditionActionKeyGuide_UpdateGuideFishing) == 0x000010, "Wrong size on TLContentsConditionActionKeyGuide_UpdateGuideFishing");
static_assert(offsetof(TLContentsConditionActionKeyGuide_UpdateGuideFishing, Items) == 0x000000, "Member 'TLContentsConditionActionKeyGuide_UpdateGuideFishing::Items' has a wrong offset!");

// Function TLClient.TLContentsConditionActionKeyGuide.GetCurrentFishingState
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionActionKeyGuide_GetCurrentFishingState final
{
public:
	ETLFishingState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionActionKeyGuide_GetCurrentFishingState) == 0x000001, "Wrong alignment on TLContentsConditionActionKeyGuide_GetCurrentFishingState");
static_assert(sizeof(TLContentsConditionActionKeyGuide_GetCurrentFishingState) == 0x000001, "Wrong size on TLContentsConditionActionKeyGuide_GetCurrentFishingState");
static_assert(offsetof(TLContentsConditionActionKeyGuide_GetCurrentFishingState, ReturnValue) == 0x000000, "Member 'TLContentsConditionActionKeyGuide_GetCurrentFishingState::ReturnValue' has a wrong offset!");

// Function TLClient.TLContentsConditionActionKeyGuide.GetCurrentPlatform
// 0x0001 (0x0001 - 0x0000)
struct TLContentsConditionActionKeyGuide_GetCurrentPlatform final
{
public:
	ETLUIPlatform                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionActionKeyGuide_GetCurrentPlatform) == 0x000001, "Wrong alignment on TLContentsConditionActionKeyGuide_GetCurrentPlatform");
static_assert(sizeof(TLContentsConditionActionKeyGuide_GetCurrentPlatform) == 0x000001, "Wrong size on TLContentsConditionActionKeyGuide_GetCurrentPlatform");
static_assert(offsetof(TLContentsConditionActionKeyGuide_GetCurrentPlatform, ReturnValue) == 0x000000, "Member 'TLContentsConditionActionKeyGuide_GetCurrentPlatform::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipBaseContent.OnChangeScrollContentAutonFocus
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTooltipBaseContent_OnChangeScrollContentAutonFocus final
{
public:
	bool                                          bFocus;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipBaseContent_OnChangeScrollContentAutonFocus) == 0x000001, "Wrong alignment on TLUserWidgetItemTooltipBaseContent_OnChangeScrollContentAutonFocus");
static_assert(sizeof(TLUserWidgetItemTooltipBaseContent_OnChangeScrollContentAutonFocus) == 0x000001, "Wrong size on TLUserWidgetItemTooltipBaseContent_OnChangeScrollContentAutonFocus");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnChangeScrollContentAutonFocus, bFocus) == 0x000000, "Member 'TLUserWidgetItemTooltipBaseContent_OnChangeScrollContentAutonFocus::bFocus' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipBaseContent.OnItemLockUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTooltipBaseContent_OnItemLockUpdate final
{
public:
	bool                                          InLock;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipBaseContent_OnItemLockUpdate) == 0x000001, "Wrong alignment on TLUserWidgetItemTooltipBaseContent_OnItemLockUpdate");
static_assert(sizeof(TLUserWidgetItemTooltipBaseContent_OnItemLockUpdate) == 0x000001, "Wrong size on TLUserWidgetItemTooltipBaseContent_OnItemLockUpdate");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnItemLockUpdate, InLock) == 0x000000, "Member 'TLUserWidgetItemTooltipBaseContent_OnItemLockUpdate::InLock' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipBaseContent.OnPresetInfoUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTooltipBaseContent_OnPresetInfoUpdate final
{
public:
	bool                                          InIsOtherPreset;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipBaseContent_OnPresetInfoUpdate) == 0x000001, "Wrong alignment on TLUserWidgetItemTooltipBaseContent_OnPresetInfoUpdate");
static_assert(sizeof(TLUserWidgetItemTooltipBaseContent_OnPresetInfoUpdate) == 0x000001, "Wrong size on TLUserWidgetItemTooltipBaseContent_OnPresetInfoUpdate");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnPresetInfoUpdate, InIsOtherPreset) == 0x000000, "Member 'TLUserWidgetItemTooltipBaseContent_OnPresetInfoUpdate::InIsOtherPreset' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipBaseContent.OnUnLockMemorial
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTooltipBaseContent_OnUnLockMemorial final
{
public:
	bool                                          IsUnLock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipBaseContent_OnUnLockMemorial) == 0x000001, "Wrong alignment on TLUserWidgetItemTooltipBaseContent_OnUnLockMemorial");
static_assert(sizeof(TLUserWidgetItemTooltipBaseContent_OnUnLockMemorial) == 0x000001, "Wrong size on TLUserWidgetItemTooltipBaseContent_OnUnLockMemorial");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUnLockMemorial, IsUnLock) == 0x000000, "Member 'TLUserWidgetItemTooltipBaseContent_OnUnLockMemorial::IsUnLock' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipBaseContent.OnUpdateCategoryName
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetItemTooltipBaseContent_OnUpdateCategoryName final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipBaseContent_OnUpdateCategoryName) == 0x000008, "Wrong alignment on TLUserWidgetItemTooltipBaseContent_OnUpdateCategoryName");
static_assert(sizeof(TLUserWidgetItemTooltipBaseContent_OnUpdateCategoryName) == 0x000018, "Wrong size on TLUserWidgetItemTooltipBaseContent_OnUpdateCategoryName");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateCategoryName, InName) == 0x000000, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateCategoryName::InName' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipBaseContent.OnUpdateCollectable
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetItemTooltipBaseContent_OnUpdateCollectable final
{
public:
	ETLItemCollectableState                       InCollectableState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InConditionLevel;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipBaseContent_OnUpdateCollectable) == 0x000004, "Wrong alignment on TLUserWidgetItemTooltipBaseContent_OnUpdateCollectable");
static_assert(sizeof(TLUserWidgetItemTooltipBaseContent_OnUpdateCollectable) == 0x000008, "Wrong size on TLUserWidgetItemTooltipBaseContent_OnUpdateCollectable");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateCollectable, InCollectableState) == 0x000000, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateCollectable::InCollectableState' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateCollectable, InConditionLevel) == 0x000004, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateCollectable::InConditionLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipBaseContent.OnUpdateDecomposable
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTooltipBaseContent_OnUpdateDecomposable final
{
public:
	bool                                          bIsDecomposable;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipBaseContent_OnUpdateDecomposable) == 0x000001, "Wrong alignment on TLUserWidgetItemTooltipBaseContent_OnUpdateDecomposable");
static_assert(sizeof(TLUserWidgetItemTooltipBaseContent_OnUpdateDecomposable) == 0x000001, "Wrong size on TLUserWidgetItemTooltipBaseContent_OnUpdateDecomposable");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateDecomposable, bIsDecomposable) == 0x000000, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateDecomposable::bIsDecomposable' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipBaseContent.OnUpdateDestructible
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTooltipBaseContent_OnUpdateDestructible final
{
public:
	bool                                          bIsDestructible;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipBaseContent_OnUpdateDestructible) == 0x000001, "Wrong alignment on TLUserWidgetItemTooltipBaseContent_OnUpdateDestructible");
static_assert(sizeof(TLUserWidgetItemTooltipBaseContent_OnUpdateDestructible) == 0x000001, "Wrong size on TLUserWidgetItemTooltipBaseContent_OnUpdateDestructible");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateDestructible, bIsDestructible) == 0x000000, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateDestructible::bIsDestructible' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipBaseContent.OnUpdateEnchant
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetItemTooltipBaseContent_OnUpdateEnchant final
{
public:
	bool                                          bInIsVisible;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsEnable;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InMaxLevel;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipBaseContent_OnUpdateEnchant) == 0x000004, "Wrong alignment on TLUserWidgetItemTooltipBaseContent_OnUpdateEnchant");
static_assert(sizeof(TLUserWidgetItemTooltipBaseContent_OnUpdateEnchant) == 0x000008, "Wrong size on TLUserWidgetItemTooltipBaseContent_OnUpdateEnchant");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateEnchant, bInIsVisible) == 0x000000, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateEnchant::bInIsVisible' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateEnchant, bInIsEnable) == 0x000001, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateEnchant::bInIsEnable' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateEnchant, InMaxLevel) == 0x000004, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateEnchant::InMaxLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipBaseContent.OnUpdateEnchantTransfer
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetItemTooltipBaseContent_OnUpdateEnchantTransfer final
{
public:
	bool                                          bInIsVisible;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsEnable;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InCount;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipBaseContent_OnUpdateEnchantTransfer) == 0x000004, "Wrong alignment on TLUserWidgetItemTooltipBaseContent_OnUpdateEnchantTransfer");
static_assert(sizeof(TLUserWidgetItemTooltipBaseContent_OnUpdateEnchantTransfer) == 0x000008, "Wrong size on TLUserWidgetItemTooltipBaseContent_OnUpdateEnchantTransfer");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateEnchantTransfer, bInIsVisible) == 0x000000, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateEnchantTransfer::bInIsVisible' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateEnchantTransfer, bInIsEnable) == 0x000001, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateEnchantTransfer::bInIsEnable' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateEnchantTransfer, InCount) == 0x000004, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateEnchantTransfer::InCount' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipBaseContent.OnUpdateFocusMoveAreaGuide
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTooltipBaseContent_OnUpdateFocusMoveAreaGuide final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipBaseContent_OnUpdateFocusMoveAreaGuide) == 0x000001, "Wrong alignment on TLUserWidgetItemTooltipBaseContent_OnUpdateFocusMoveAreaGuide");
static_assert(sizeof(TLUserWidgetItemTooltipBaseContent_OnUpdateFocusMoveAreaGuide) == 0x000001, "Wrong size on TLUserWidgetItemTooltipBaseContent_OnUpdateFocusMoveAreaGuide");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateFocusMoveAreaGuide, bShow) == 0x000000, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateFocusMoveAreaGuide::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipBaseContent.OnUpdateGradeColor
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetItemTooltipBaseContent_OnUpdateGradeColor final
{
public:
	class FText                                   InGradeName;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   InColorTableKey;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipBaseContent_OnUpdateGradeColor) == 0x000008, "Wrong alignment on TLUserWidgetItemTooltipBaseContent_OnUpdateGradeColor");
static_assert(sizeof(TLUserWidgetItemTooltipBaseContent_OnUpdateGradeColor) == 0x000020, "Wrong size on TLUserWidgetItemTooltipBaseContent_OnUpdateGradeColor");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateGradeColor, InGradeName) == 0x000000, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateGradeColor::InGradeName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateGradeColor, InColorTableKey) == 0x000018, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateGradeColor::InColorTableKey' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipBaseContent.OnUpdateItemName
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetItemTooltipBaseContent_OnUpdateItemName final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipBaseContent_OnUpdateItemName) == 0x000008, "Wrong alignment on TLUserWidgetItemTooltipBaseContent_OnUpdateItemName");
static_assert(sizeof(TLUserWidgetItemTooltipBaseContent_OnUpdateItemName) == 0x000018, "Wrong size on TLUserWidgetItemTooltipBaseContent_OnUpdateItemName");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateItemName, InName) == 0x000000, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateItemName::InName' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipBaseContent.OnUpdateRequireLevel
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetItemTooltipBaseContent_OnUpdateRequireLevel final
{
public:
	int32                                         InRequireLevel;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPcLevel;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipBaseContent_OnUpdateRequireLevel) == 0x000004, "Wrong alignment on TLUserWidgetItemTooltipBaseContent_OnUpdateRequireLevel");
static_assert(sizeof(TLUserWidgetItemTooltipBaseContent_OnUpdateRequireLevel) == 0x000008, "Wrong size on TLUserWidgetItemTooltipBaseContent_OnUpdateRequireLevel");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateRequireLevel, InRequireLevel) == 0x000000, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateRequireLevel::InRequireLevel' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateRequireLevel, InPcLevel) == 0x000004, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateRequireLevel::InPcLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipBaseContent.OnUpdateStorable
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTooltipBaseContent_OnUpdateStorable final
{
public:
	bool                                          bIsStorable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipBaseContent_OnUpdateStorable) == 0x000001, "Wrong alignment on TLUserWidgetItemTooltipBaseContent_OnUpdateStorable");
static_assert(sizeof(TLUserWidgetItemTooltipBaseContent_OnUpdateStorable) == 0x000001, "Wrong size on TLUserWidgetItemTooltipBaseContent_OnUpdateStorable");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateStorable, bIsStorable) == 0x000000, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateStorable::bIsStorable' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipBaseContent.OnUpdateTotalMenu
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetItemTooltipBaseContent_OnUpdateTotalMenu final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInShow;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipBaseContent_OnUpdateTotalMenu) == 0x000001, "Wrong alignment on TLUserWidgetItemTooltipBaseContent_OnUpdateTotalMenu");
static_assert(sizeof(TLUserWidgetItemTooltipBaseContent_OnUpdateTotalMenu) == 0x000002, "Wrong size on TLUserWidgetItemTooltipBaseContent_OnUpdateTotalMenu");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateTotalMenu, bInEnable) == 0x000000, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateTotalMenu::bInEnable' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateTotalMenu, bInShow) == 0x000001, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateTotalMenu::bInShow' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipBaseContent.OnUpdateTradableIcon
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetItemTooltipBaseContent_OnUpdateTradableIcon final
{
public:
	bool                                          bIsTradable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOverwriteExchangeable;                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipBaseContent_OnUpdateTradableIcon) == 0x000001, "Wrong alignment on TLUserWidgetItemTooltipBaseContent_OnUpdateTradableIcon");
static_assert(sizeof(TLUserWidgetItemTooltipBaseContent_OnUpdateTradableIcon) == 0x000002, "Wrong size on TLUserWidgetItemTooltipBaseContent_OnUpdateTradableIcon");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateTradableIcon, bIsTradable) == 0x000000, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateTradableIcon::bIsTradable' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateTradableIcon, bIsOverwriteExchangeable) == 0x000001, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateTradableIcon::bIsOverwriteExchangeable' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipBaseContent.OnUpdateTradePriceInfo
// 0x0038 (0x0038 - 0x0000)
struct TLUserWidgetItemTooltipBaseContent_OnUpdateTradePriceInfo final
{
public:
	bool                                          InShowTradePrice;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   RecentPriceText;                                   // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   SaleCountText;                                     // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipBaseContent_OnUpdateTradePriceInfo) == 0x000008, "Wrong alignment on TLUserWidgetItemTooltipBaseContent_OnUpdateTradePriceInfo");
static_assert(sizeof(TLUserWidgetItemTooltipBaseContent_OnUpdateTradePriceInfo) == 0x000038, "Wrong size on TLUserWidgetItemTooltipBaseContent_OnUpdateTradePriceInfo");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateTradePriceInfo, InShowTradePrice) == 0x000000, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateTradePriceInfo::InShowTradePrice' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateTradePriceInfo, RecentPriceText) == 0x000008, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateTradePriceInfo::RecentPriceText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTooltipBaseContent_OnUpdateTradePriceInfo, SaleCountText) == 0x000020, "Member 'TLUserWidgetItemTooltipBaseContent_OnUpdateTradePriceInfo::SaleCountText' has a wrong offset!");

// Function TLClient.TLUserWidgetMagicDollSlotTooltip.SetGuideTextTextBlockStyle
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMagicDollSlotTooltip_SetGuideTextTextBlockStyle final
{
public:
	EMagicDollGuideType                           InGuideType;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMagicDollSlotTooltip_SetGuideTextTextBlockStyle) == 0x000001, "Wrong alignment on TLUserWidgetMagicDollSlotTooltip_SetGuideTextTextBlockStyle");
static_assert(sizeof(TLUserWidgetMagicDollSlotTooltip_SetGuideTextTextBlockStyle) == 0x000001, "Wrong size on TLUserWidgetMagicDollSlotTooltip_SetGuideTextTextBlockStyle");
static_assert(offsetof(TLUserWidgetMagicDollSlotTooltip_SetGuideTextTextBlockStyle, InGuideType) == 0x000000, "Member 'TLUserWidgetMagicDollSlotTooltip_SetGuideTextTextBlockStyle::InGuideType' has a wrong offset!");

// Function TLClient.TLUserWidgetHUDLayer.OnChangeMapModeType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetHUDLayer_OnChangeMapModeType final
{
public:
	ETLMapModeType                                InMapModeType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetHUDLayer_OnChangeMapModeType) == 0x000001, "Wrong alignment on TLUserWidgetHUDLayer_OnChangeMapModeType");
static_assert(sizeof(TLUserWidgetHUDLayer_OnChangeMapModeType) == 0x000001, "Wrong size on TLUserWidgetHUDLayer_OnChangeMapModeType");
static_assert(offsetof(TLUserWidgetHUDLayer_OnChangeMapModeType, InMapModeType) == 0x000000, "Member 'TLUserWidgetHUDLayer_OnChangeMapModeType::InMapModeType' has a wrong offset!");

// Function TLClient.TLUserWidgetHUDLayer.OnPressedAlarmList
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetHUDLayer_OnPressedAlarmList final
{
public:
	bool                                          bInPressed;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetHUDLayer_OnPressedAlarmList) == 0x000001, "Wrong alignment on TLUserWidgetHUDLayer_OnPressedAlarmList");
static_assert(sizeof(TLUserWidgetHUDLayer_OnPressedAlarmList) == 0x000001, "Wrong size on TLUserWidgetHUDLayer_OnPressedAlarmList");
static_assert(offsetof(TLUserWidgetHUDLayer_OnPressedAlarmList, bInPressed) == 0x000000, "Member 'TLUserWidgetHUDLayer_OnPressedAlarmList::bInPressed' has a wrong offset!");

// Function TLClient.TLUserWidgetHUDLayer.OnTargetMode
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetHUDLayer_OnTargetMode final
{
public:
	bool                                          bInTargetMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetHUDLayer_OnTargetMode) == 0x000001, "Wrong alignment on TLUserWidgetHUDLayer_OnTargetMode");
static_assert(sizeof(TLUserWidgetHUDLayer_OnTargetMode) == 0x000001, "Wrong size on TLUserWidgetHUDLayer_OnTargetMode");
static_assert(offsetof(TLUserWidgetHUDLayer_OnTargetMode, bInTargetMode) == 0x000000, "Member 'TLUserWidgetHUDLayer_OnTargetMode::bInTargetMode' has a wrong offset!");

// Function TLClient.TLUserWidgetHUDLayer.OnVisibleAlarmList
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetHUDLayer_OnVisibleAlarmList final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetHUDLayer_OnVisibleAlarmList) == 0x000001, "Wrong alignment on TLUserWidgetHUDLayer_OnVisibleAlarmList");
static_assert(sizeof(TLUserWidgetHUDLayer_OnVisibleAlarmList) == 0x000001, "Wrong size on TLUserWidgetHUDLayer_OnVisibleAlarmList");
static_assert(offsetof(TLUserWidgetHUDLayer_OnVisibleAlarmList, bInVisible) == 0x000000, "Member 'TLUserWidgetHUDLayer_OnVisibleAlarmList::bInVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetHUDLayer.OnVisibleRingMenu
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetHUDLayer_OnVisibleRingMenu final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetHUDLayer_OnVisibleRingMenu) == 0x000001, "Wrong alignment on TLUserWidgetHUDLayer_OnVisibleRingMenu");
static_assert(sizeof(TLUserWidgetHUDLayer_OnVisibleRingMenu) == 0x000001, "Wrong size on TLUserWidgetHUDLayer_OnVisibleRingMenu");
static_assert(offsetof(TLUserWidgetHUDLayer_OnVisibleRingMenu, bInVisible) == 0x000000, "Member 'TLUserWidgetHUDLayer_OnVisibleRingMenu::bInVisible' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnChangedDyanmicEventSideImpl
// 0x0010 (0x0010 - 0x0000)
struct TLContentsConditionMessageObject_OnChangedDyanmicEventSideImpl final
{
public:
	uint64                                        InSideGuid;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InNewTribeUid;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InOldTribeUid;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnChangedDyanmicEventSideImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnChangedDyanmicEventSideImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnChangedDyanmicEventSideImpl) == 0x000010, "Wrong size on TLContentsConditionMessageObject_OnChangedDyanmicEventSideImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnChangedDyanmicEventSideImpl, InSideGuid) == 0x000000, "Member 'TLContentsConditionMessageObject_OnChangedDyanmicEventSideImpl::InSideGuid' has a wrong offset!");
static_assert(offsetof(TLContentsConditionMessageObject_OnChangedDyanmicEventSideImpl, InNewTribeUid) == 0x000008, "Member 'TLContentsConditionMessageObject_OnChangedDyanmicEventSideImpl::InNewTribeUid' has a wrong offset!");
static_assert(offsetof(TLContentsConditionMessageObject_OnChangedDyanmicEventSideImpl, InOldTribeUid) == 0x00000C, "Member 'TLContentsConditionMessageObject_OnChangedDyanmicEventSideImpl::InOldTribeUid' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnChangeEclipseStatusImpl
// 0x0140 (0x0140 - 0x0000)
struct TLContentsConditionMessageObject_OnChangeEclipseStatusImpl final
{
public:
	struct FTLContentsScreenMsgParams             InMsgParam;                                        // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnChangeEclipseStatusImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnChangeEclipseStatusImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnChangeEclipseStatusImpl) == 0x000140, "Wrong size on TLContentsConditionMessageObject_OnChangeEclipseStatusImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnChangeEclipseStatusImpl, InMsgParam) == 0x000000, "Member 'TLContentsConditionMessageObject_OnChangeEclipseStatusImpl::InMsgParam' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnChangeEnvTimeTypeImpl
// 0x0140 (0x0140 - 0x0000)
struct TLContentsConditionMessageObject_OnChangeEnvTimeTypeImpl final
{
public:
	struct FTLContentsScreenMsgParams             InMsgParam;                                        // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnChangeEnvTimeTypeImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnChangeEnvTimeTypeImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnChangeEnvTimeTypeImpl) == 0x000140, "Wrong size on TLContentsConditionMessageObject_OnChangeEnvTimeTypeImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnChangeEnvTimeTypeImpl, InMsgParam) == 0x000000, "Member 'TLContentsConditionMessageObject_OnChangeEnvTimeTypeImpl::InMsgParam' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnEnterDynamicEventImpl
// 0x0140 (0x0140 - 0x0000)
struct TLContentsConditionMessageObject_OnEnterDynamicEventImpl final
{
public:
	struct FTLContentsScreenMsgParams             InMsgParam;                                        // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnEnterDynamicEventImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnEnterDynamicEventImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnEnterDynamicEventImpl) == 0x000140, "Wrong size on TLContentsConditionMessageObject_OnEnterDynamicEventImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnEnterDynamicEventImpl, InMsgParam) == 0x000000, "Member 'TLContentsConditionMessageObject_OnEnterDynamicEventImpl::InMsgParam' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnEnterOccupationImpl
// 0x0140 (0x0140 - 0x0000)
struct TLContentsConditionMessageObject_OnEnterOccupationImpl final
{
public:
	struct FTLContentsScreenMsgParams             InMsgParam;                                        // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnEnterOccupationImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnEnterOccupationImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnEnterOccupationImpl) == 0x000140, "Wrong size on TLContentsConditionMessageObject_OnEnterOccupationImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnEnterOccupationImpl, InMsgParam) == 0x000000, "Member 'TLContentsConditionMessageObject_OnEnterOccupationImpl::InMsgParam' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnEnterRegionImpl
// 0x0140 (0x0140 - 0x0000)
struct TLContentsConditionMessageObject_OnEnterRegionImpl final
{
public:
	struct FTLContentsScreenMsgParams             InMsgParam;                                        // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnEnterRegionImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnEnterRegionImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnEnterRegionImpl) == 0x000140, "Wrong size on TLContentsConditionMessageObject_OnEnterRegionImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnEnterRegionImpl, InMsgParam) == 0x000000, "Member 'TLContentsConditionMessageObject_OnEnterRegionImpl::InMsgParam' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnEnterSiegeWarfareImpl
// 0x0140 (0x0140 - 0x0000)
struct TLContentsConditionMessageObject_OnEnterSiegeWarfareImpl final
{
public:
	struct FTLContentsScreenMsgParams             InMsgParam;                                        // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnEnterSiegeWarfareImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnEnterSiegeWarfareImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnEnterSiegeWarfareImpl) == 0x000140, "Wrong size on TLContentsConditionMessageObject_OnEnterSiegeWarfareImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnEnterSiegeWarfareImpl, InMsgParam) == 0x000000, "Member 'TLContentsConditionMessageObject_OnEnterSiegeWarfareImpl::InMsgParam' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnJoinFieldBossImpl
// 0x0140 (0x0140 - 0x0000)
struct TLContentsConditionMessageObject_OnJoinFieldBossImpl final
{
public:
	struct FTLContentsScreenMsgParams             InMsgParam;                                        // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnJoinFieldBossImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnJoinFieldBossImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnJoinFieldBossImpl) == 0x000140, "Wrong size on TLContentsConditionMessageObject_OnJoinFieldBossImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnJoinFieldBossImpl, InMsgParam) == 0x000000, "Member 'TLContentsConditionMessageObject_OnJoinFieldBossImpl::InMsgParam' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnJoinTaxDeliveryImpl
// 0x0140 (0x0140 - 0x0000)
struct TLContentsConditionMessageObject_OnJoinTaxDeliveryImpl final
{
public:
	struct FTLContentsScreenMsgParams             InMsgParam;                                        // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnJoinTaxDeliveryImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnJoinTaxDeliveryImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnJoinTaxDeliveryImpl) == 0x000140, "Wrong size on TLContentsConditionMessageObject_OnJoinTaxDeliveryImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnJoinTaxDeliveryImpl, InMsgParam) == 0x000000, "Member 'TLContentsConditionMessageObject_OnJoinTaxDeliveryImpl::InMsgParam' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnJoinWorldBossImpl
// 0x0140 (0x0140 - 0x0000)
struct TLContentsConditionMessageObject_OnJoinWorldBossImpl final
{
public:
	struct FTLContentsScreenMsgParams             InMsgParam;                                        // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnJoinWorldBossImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnJoinWorldBossImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnJoinWorldBossImpl) == 0x000140, "Wrong size on TLContentsConditionMessageObject_OnJoinWorldBossImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnJoinWorldBossImpl, InMsgParam) == 0x000000, "Member 'TLContentsConditionMessageObject_OnJoinWorldBossImpl::InMsgParam' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnLeaveDynamicEventImpl
// 0x0140 (0x0140 - 0x0000)
struct TLContentsConditionMessageObject_OnLeaveDynamicEventImpl final
{
public:
	struct FTLContentsScreenMsgParams             InMsgParam;                                        // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnLeaveDynamicEventImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnLeaveDynamicEventImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnLeaveDynamicEventImpl) == 0x000140, "Wrong size on TLContentsConditionMessageObject_OnLeaveDynamicEventImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnLeaveDynamicEventImpl, InMsgParam) == 0x000000, "Member 'TLContentsConditionMessageObject_OnLeaveDynamicEventImpl::InMsgParam' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnLeaveFieldBossImpl
// 0x0140 (0x0140 - 0x0000)
struct TLContentsConditionMessageObject_OnLeaveFieldBossImpl final
{
public:
	struct FTLContentsScreenMsgParams             InMsgParam;                                        // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnLeaveFieldBossImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnLeaveFieldBossImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnLeaveFieldBossImpl) == 0x000140, "Wrong size on TLContentsConditionMessageObject_OnLeaveFieldBossImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnLeaveFieldBossImpl, InMsgParam) == 0x000000, "Member 'TLContentsConditionMessageObject_OnLeaveFieldBossImpl::InMsgParam' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnLeaveOccupationImpl
// 0x0008 (0x0008 - 0x0000)
struct TLContentsConditionMessageObject_OnLeaveOccupationImpl final
{
public:
	uint64                                        InOccupationGuid;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnLeaveOccupationImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnLeaveOccupationImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnLeaveOccupationImpl) == 0x000008, "Wrong size on TLContentsConditionMessageObject_OnLeaveOccupationImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnLeaveOccupationImpl, InOccupationGuid) == 0x000000, "Member 'TLContentsConditionMessageObject_OnLeaveOccupationImpl::InOccupationGuid' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnLeaveRegionImpl
// 0x0008 (0x0008 - 0x0000)
struct TLContentsConditionMessageObject_OnLeaveRegionImpl final
{
public:
	uint64                                        InRegionGuid;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnLeaveRegionImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnLeaveRegionImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnLeaveRegionImpl) == 0x000008, "Wrong size on TLContentsConditionMessageObject_OnLeaveRegionImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnLeaveRegionImpl, InRegionGuid) == 0x000000, "Member 'TLContentsConditionMessageObject_OnLeaveRegionImpl::InRegionGuid' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnLeaveSiegeWarfareImpl
// 0x0008 (0x0008 - 0x0000)
struct TLContentsConditionMessageObject_OnLeaveSiegeWarfareImpl final
{
public:
	uint64                                        InCastleGuid;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnLeaveSiegeWarfareImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnLeaveSiegeWarfareImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnLeaveSiegeWarfareImpl) == 0x000008, "Wrong size on TLContentsConditionMessageObject_OnLeaveSiegeWarfareImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnLeaveSiegeWarfareImpl, InCastleGuid) == 0x000000, "Member 'TLContentsConditionMessageObject_OnLeaveSiegeWarfareImpl::InCastleGuid' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnLeaveTaxDeliveryImpl
// 0x0140 (0x0140 - 0x0000)
struct TLContentsConditionMessageObject_OnLeaveTaxDeliveryImpl final
{
public:
	struct FTLContentsScreenMsgParams             InMsgParam;                                        // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnLeaveTaxDeliveryImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnLeaveTaxDeliveryImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnLeaveTaxDeliveryImpl) == 0x000140, "Wrong size on TLContentsConditionMessageObject_OnLeaveTaxDeliveryImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnLeaveTaxDeliveryImpl, InMsgParam) == 0x000000, "Member 'TLContentsConditionMessageObject_OnLeaveTaxDeliveryImpl::InMsgParam' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnLeaveWorldBossImpl
// 0x0140 (0x0140 - 0x0000)
struct TLContentsConditionMessageObject_OnLeaveWorldBossImpl final
{
public:
	struct FTLContentsScreenMsgParams             InMsgParam;                                        // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnLeaveWorldBossImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnLeaveWorldBossImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnLeaveWorldBossImpl) == 0x000140, "Wrong size on TLContentsConditionMessageObject_OnLeaveWorldBossImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnLeaveWorldBossImpl, InMsgParam) == 0x000000, "Member 'TLContentsConditionMessageObject_OnLeaveWorldBossImpl::InMsgParam' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnPreLeaveOccupationImpl
// 0x0140 (0x0140 - 0x0000)
struct TLContentsConditionMessageObject_OnPreLeaveOccupationImpl final
{
public:
	struct FTLContentsScreenMsgParams             InMsgParam;                                        // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnPreLeaveOccupationImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnPreLeaveOccupationImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnPreLeaveOccupationImpl) == 0x000140, "Wrong size on TLContentsConditionMessageObject_OnPreLeaveOccupationImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnPreLeaveOccupationImpl, InMsgParam) == 0x000000, "Member 'TLContentsConditionMessageObject_OnPreLeaveOccupationImpl::InMsgParam' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnPreLeaveSiegeWarfareImpl
// 0x0140 (0x0140 - 0x0000)
struct TLContentsConditionMessageObject_OnPreLeaveSiegeWarfareImpl final
{
public:
	struct FTLContentsScreenMsgParams             InMsgParam;                                        // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnPreLeaveSiegeWarfareImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnPreLeaveSiegeWarfareImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnPreLeaveSiegeWarfareImpl) == 0x000140, "Wrong size on TLContentsConditionMessageObject_OnPreLeaveSiegeWarfareImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnPreLeaveSiegeWarfareImpl, InMsgParam) == 0x000000, "Member 'TLContentsConditionMessageObject_OnPreLeaveSiegeWarfareImpl::InMsgParam' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnResultSiegeWarfareImpl
// 0x0140 (0x0140 - 0x0000)
struct TLContentsConditionMessageObject_OnResultSiegeWarfareImpl final
{
public:
	struct FTLContentsScreenMsgParams             InMsgParam;                                        // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnResultSiegeWarfareImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnResultSiegeWarfareImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnResultSiegeWarfareImpl) == 0x000140, "Wrong size on TLContentsConditionMessageObject_OnResultSiegeWarfareImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnResultSiegeWarfareImpl, InMsgParam) == 0x000000, "Member 'TLContentsConditionMessageObject_OnResultSiegeWarfareImpl::InMsgParam' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnShowScreenMsgEnterContentsRegionEvent
// 0x0038 (0x0038 - 0x0000)
struct TLContentsConditionMessageObject_OnShowScreenMsgEnterContentsRegionEvent final
{
public:
	class FText                                   InTitle;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   InSubTitle;                                        // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          InIsPeace;                                         // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLContentsConditionMessageObject_OnShowScreenMsgEnterContentsRegionEvent) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnShowScreenMsgEnterContentsRegionEvent");
static_assert(sizeof(TLContentsConditionMessageObject_OnShowScreenMsgEnterContentsRegionEvent) == 0x000038, "Wrong size on TLContentsConditionMessageObject_OnShowScreenMsgEnterContentsRegionEvent");
static_assert(offsetof(TLContentsConditionMessageObject_OnShowScreenMsgEnterContentsRegionEvent, InTitle) == 0x000000, "Member 'TLContentsConditionMessageObject_OnShowScreenMsgEnterContentsRegionEvent::InTitle' has a wrong offset!");
static_assert(offsetof(TLContentsConditionMessageObject_OnShowScreenMsgEnterContentsRegionEvent, InSubTitle) == 0x000018, "Member 'TLContentsConditionMessageObject_OnShowScreenMsgEnterContentsRegionEvent::InSubTitle' has a wrong offset!");
static_assert(offsetof(TLContentsConditionMessageObject_OnShowScreenMsgEnterContentsRegionEvent, InIsPeace) == 0x000030, "Member 'TLContentsConditionMessageObject_OnShowScreenMsgEnterContentsRegionEvent::InIsPeace' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnShowScreenMsgEnterRegionContentsEvent
// 0x0038 (0x0038 - 0x0000)
struct TLContentsConditionMessageObject_OnShowScreenMsgEnterRegionContentsEvent final
{
public:
	class FText                                   InTitle;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   InSubTitle;                                        // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMapRegionType                                InRegionType;                                      // 0x0030(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLContentsConditionMessageObject_OnShowScreenMsgEnterRegionContentsEvent) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnShowScreenMsgEnterRegionContentsEvent");
static_assert(sizeof(TLContentsConditionMessageObject_OnShowScreenMsgEnterRegionContentsEvent) == 0x000038, "Wrong size on TLContentsConditionMessageObject_OnShowScreenMsgEnterRegionContentsEvent");
static_assert(offsetof(TLContentsConditionMessageObject_OnShowScreenMsgEnterRegionContentsEvent, InTitle) == 0x000000, "Member 'TLContentsConditionMessageObject_OnShowScreenMsgEnterRegionContentsEvent::InTitle' has a wrong offset!");
static_assert(offsetof(TLContentsConditionMessageObject_OnShowScreenMsgEnterRegionContentsEvent, InSubTitle) == 0x000018, "Member 'TLContentsConditionMessageObject_OnShowScreenMsgEnterRegionContentsEvent::InSubTitle' has a wrong offset!");
static_assert(offsetof(TLContentsConditionMessageObject_OnShowScreenMsgEnterRegionContentsEvent, InRegionType) == 0x000030, "Member 'TLContentsConditionMessageObject_OnShowScreenMsgEnterRegionContentsEvent::InRegionType' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnShowScreenMsgJoinDynamicEvent
// 0x0020 (0x0020 - 0x0000)
struct TLContentsConditionMessageObject_OnShowScreenMsgJoinDynamicEvent final
{
public:
	class FText                                   InTitle;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          InIsPeace;                                         // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLContentsConditionMessageObject_OnShowScreenMsgJoinDynamicEvent) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnShowScreenMsgJoinDynamicEvent");
static_assert(sizeof(TLContentsConditionMessageObject_OnShowScreenMsgJoinDynamicEvent) == 0x000020, "Wrong size on TLContentsConditionMessageObject_OnShowScreenMsgJoinDynamicEvent");
static_assert(offsetof(TLContentsConditionMessageObject_OnShowScreenMsgJoinDynamicEvent, InTitle) == 0x000000, "Member 'TLContentsConditionMessageObject_OnShowScreenMsgJoinDynamicEvent::InTitle' has a wrong offset!");
static_assert(offsetof(TLContentsConditionMessageObject_OnShowScreenMsgJoinDynamicEvent, InIsPeace) == 0x000018, "Member 'TLContentsConditionMessageObject_OnShowScreenMsgJoinDynamicEvent::InIsPeace' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnShowScreenMsgJoinRegionDynamicEvent
// 0x0020 (0x0020 - 0x0000)
struct TLContentsConditionMessageObject_OnShowScreenMsgJoinRegionDynamicEvent final
{
public:
	class FText                                   InTitle;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMapRegionType                                InRegionType;                                      // 0x0018(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLContentsConditionMessageObject_OnShowScreenMsgJoinRegionDynamicEvent) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnShowScreenMsgJoinRegionDynamicEvent");
static_assert(sizeof(TLContentsConditionMessageObject_OnShowScreenMsgJoinRegionDynamicEvent) == 0x000020, "Wrong size on TLContentsConditionMessageObject_OnShowScreenMsgJoinRegionDynamicEvent");
static_assert(offsetof(TLContentsConditionMessageObject_OnShowScreenMsgJoinRegionDynamicEvent, InTitle) == 0x000000, "Member 'TLContentsConditionMessageObject_OnShowScreenMsgJoinRegionDynamicEvent::InTitle' has a wrong offset!");
static_assert(offsetof(TLContentsConditionMessageObject_OnShowScreenMsgJoinRegionDynamicEvent, InRegionType) == 0x000018, "Member 'TLContentsConditionMessageObject_OnShowScreenMsgJoinRegionDynamicEvent::InRegionType' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnShowScreenMsgRegion
// 0x0020 (0x0020 - 0x0000)
struct TLContentsConditionMessageObject_OnShowScreenMsgRegion final
{
public:
	class FText                                   InTitle;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMapRegionType                                InRegionType;                                      // 0x0018(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLContentsConditionMessageObject_OnShowScreenMsgRegion) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnShowScreenMsgRegion");
static_assert(sizeof(TLContentsConditionMessageObject_OnShowScreenMsgRegion) == 0x000020, "Wrong size on TLContentsConditionMessageObject_OnShowScreenMsgRegion");
static_assert(offsetof(TLContentsConditionMessageObject_OnShowScreenMsgRegion, InTitle) == 0x000000, "Member 'TLContentsConditionMessageObject_OnShowScreenMsgRegion::InTitle' has a wrong offset!");
static_assert(offsetof(TLContentsConditionMessageObject_OnShowScreenMsgRegion, InRegionType) == 0x000018, "Member 'TLContentsConditionMessageObject_OnShowScreenMsgRegion::InRegionType' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnShowScreenMsgRegionTypeChange
// 0x0020 (0x0020 - 0x0000)
struct TLContentsConditionMessageObject_OnShowScreenMsgRegionTypeChange final
{
public:
	class FText                                   InTitle;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMapRegionType                                InPrevRegionType;                                  // 0x0018(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMapRegionType                                InCurRegionType;                                   // 0x0019(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLContentsConditionMessageObject_OnShowScreenMsgRegionTypeChange) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnShowScreenMsgRegionTypeChange");
static_assert(sizeof(TLContentsConditionMessageObject_OnShowScreenMsgRegionTypeChange) == 0x000020, "Wrong size on TLContentsConditionMessageObject_OnShowScreenMsgRegionTypeChange");
static_assert(offsetof(TLContentsConditionMessageObject_OnShowScreenMsgRegionTypeChange, InTitle) == 0x000000, "Member 'TLContentsConditionMessageObject_OnShowScreenMsgRegionTypeChange::InTitle' has a wrong offset!");
static_assert(offsetof(TLContentsConditionMessageObject_OnShowScreenMsgRegionTypeChange, InPrevRegionType) == 0x000018, "Member 'TLContentsConditionMessageObject_OnShowScreenMsgRegionTypeChange::InPrevRegionType' has a wrong offset!");
static_assert(offsetof(TLContentsConditionMessageObject_OnShowScreenMsgRegionTypeChange, InCurRegionType) == 0x000019, "Member 'TLContentsConditionMessageObject_OnShowScreenMsgRegionTypeChange::InCurRegionType' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.OnUpdateSiegeStatusImpl
// 0x0140 (0x0140 - 0x0000)
struct TLContentsConditionMessageObject_OnUpdateSiegeStatusImpl final
{
public:
	struct FTLContentsScreenMsgParams             InMsgParam;                                        // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContentsConditionMessageObject_OnUpdateSiegeStatusImpl) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_OnUpdateSiegeStatusImpl");
static_assert(sizeof(TLContentsConditionMessageObject_OnUpdateSiegeStatusImpl) == 0x000140, "Wrong size on TLContentsConditionMessageObject_OnUpdateSiegeStatusImpl");
static_assert(offsetof(TLContentsConditionMessageObject_OnUpdateSiegeStatusImpl, InMsgParam) == 0x000000, "Member 'TLContentsConditionMessageObject_OnUpdateSiegeStatusImpl::InMsgParam' has a wrong offset!");

// Function TLClient.TLContentsConditionMessageObject.ShowSystemMessage
// 0x0088 (0x0088 - 0x0000)
struct TLContentsConditionMessageObject_ShowSystemMessage final
{
public:
	class FName                                   SystemMessageId;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   V1;                                                // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   V2;                                                // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   V3;                                                // 0x0038(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   V4;                                                // 0x0050(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   V5;                                                // 0x0068(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          bInShowScreenMsg;                                  // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLContentsConditionMessageObject_ShowSystemMessage) == 0x000008, "Wrong alignment on TLContentsConditionMessageObject_ShowSystemMessage");
static_assert(sizeof(TLContentsConditionMessageObject_ShowSystemMessage) == 0x000088, "Wrong size on TLContentsConditionMessageObject_ShowSystemMessage");
static_assert(offsetof(TLContentsConditionMessageObject_ShowSystemMessage, SystemMessageId) == 0x000000, "Member 'TLContentsConditionMessageObject_ShowSystemMessage::SystemMessageId' has a wrong offset!");
static_assert(offsetof(TLContentsConditionMessageObject_ShowSystemMessage, V1) == 0x000008, "Member 'TLContentsConditionMessageObject_ShowSystemMessage::V1' has a wrong offset!");
static_assert(offsetof(TLContentsConditionMessageObject_ShowSystemMessage, V2) == 0x000020, "Member 'TLContentsConditionMessageObject_ShowSystemMessage::V2' has a wrong offset!");
static_assert(offsetof(TLContentsConditionMessageObject_ShowSystemMessage, V3) == 0x000038, "Member 'TLContentsConditionMessageObject_ShowSystemMessage::V3' has a wrong offset!");
static_assert(offsetof(TLContentsConditionMessageObject_ShowSystemMessage, V4) == 0x000050, "Member 'TLContentsConditionMessageObject_ShowSystemMessage::V4' has a wrong offset!");
static_assert(offsetof(TLContentsConditionMessageObject_ShowSystemMessage, V5) == 0x000068, "Member 'TLContentsConditionMessageObject_ShowSystemMessage::V5' has a wrong offset!");
static_assert(offsetof(TLContentsConditionMessageObject_ShowSystemMessage, bInShowScreenMsg) == 0x000080, "Member 'TLContentsConditionMessageObject_ShowSystemMessage::bInShowScreenMsg' has a wrong offset!");

// Function TLClient.TLContractObject.HandleUpdateContractState
// 0x0001 (0x0001 - 0x0000)
struct TLContractObject_HandleUpdateContractState final
{
public:
	EContractState                                InContractState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContractObject_HandleUpdateContractState) == 0x000001, "Wrong alignment on TLContractObject_HandleUpdateContractState");
static_assert(sizeof(TLContractObject_HandleUpdateContractState) == 0x000001, "Wrong size on TLContractObject_HandleUpdateContractState");
static_assert(offsetof(TLContractObject_HandleUpdateContractState, InContractState) == 0x000000, "Member 'TLContractObject_HandleUpdateContractState::InContractState' has a wrong offset!");

// Function TLClient.TLContractObject.IsValid
// 0x0001 (0x0001 - 0x0000)
struct TLContractObject_IsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLContractObject_IsValid) == 0x000001, "Wrong alignment on TLContractObject_IsValid");
static_assert(sizeof(TLContractObject_IsValid) == 0x000001, "Wrong size on TLContractObject_IsValid");
static_assert(offsetof(TLContractObject_IsValid, ReturnValue) == 0x000000, "Member 'TLContractObject_IsValid::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetCraftingMaterialPanel.ShowOnboarding
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCraftingMaterialPanel_ShowOnboarding final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCraftingMaterialPanel_ShowOnboarding) == 0x000001, "Wrong alignment on TLUserWidgetCraftingMaterialPanel_ShowOnboarding");
static_assert(sizeof(TLUserWidgetCraftingMaterialPanel_ShowOnboarding) == 0x000001, "Wrong size on TLUserWidgetCraftingMaterialPanel_ShowOnboarding");
static_assert(offsetof(TLUserWidgetCraftingMaterialPanel_ShowOnboarding, InShow) == 0x000000, "Member 'TLUserWidgetCraftingMaterialPanel_ShowOnboarding::InShow' has a wrong offset!");

// Function TLClient.TLUserWidgetPcCasting.OnCastingEnd
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPcCasting_OnCastingEnd final
{
public:
	ECastingEndReason                             CastingEndReason;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPcCasting_OnCastingEnd) == 0x000001, "Wrong alignment on TLUserWidgetPcCasting_OnCastingEnd");
static_assert(sizeof(TLUserWidgetPcCasting_OnCastingEnd) == 0x000001, "Wrong size on TLUserWidgetPcCasting_OnCastingEnd");
static_assert(offsetof(TLUserWidgetPcCasting_OnCastingEnd, CastingEndReason) == 0x000000, "Member 'TLUserWidgetPcCasting_OnCastingEnd::CastingEndReason' has a wrong offset!");

// Function TLClient.TLUserWidgetPcCasting.OnCastingStart
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPcCasting_OnCastingStart final
{
public:
	bool                                          bIsMyPc;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPcCasting_OnCastingStart) == 0x000001, "Wrong alignment on TLUserWidgetPcCasting_OnCastingStart");
static_assert(sizeof(TLUserWidgetPcCasting_OnCastingStart) == 0x000001, "Wrong size on TLUserWidgetPcCasting_OnCastingStart");
static_assert(offsetof(TLUserWidgetPcCasting_OnCastingStart, bIsMyPc) == 0x000000, "Member 'TLUserWidgetPcCasting_OnCastingStart::bIsMyPc' has a wrong offset!");

// Function TLClient.TLHudComponentConditionObject.GetFrameWidget
// 0x0010 (0x0010 - 0x0000)
struct TLHudComponentConditionObject_GetFrameWidget final
{
public:
	class FName                                   InNameKey;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLUserWidgetFrame*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLHudComponentConditionObject_GetFrameWidget) == 0x000008, "Wrong alignment on TLHudComponentConditionObject_GetFrameWidget");
static_assert(sizeof(TLHudComponentConditionObject_GetFrameWidget) == 0x000010, "Wrong size on TLHudComponentConditionObject_GetFrameWidget");
static_assert(offsetof(TLHudComponentConditionObject_GetFrameWidget, InNameKey) == 0x000000, "Member 'TLHudComponentConditionObject_GetFrameWidget::InNameKey' has a wrong offset!");
static_assert(offsetof(TLHudComponentConditionObject_GetFrameWidget, ReturnValue) == 0x000008, "Member 'TLHudComponentConditionObject_GetFrameWidget::ReturnValue' has a wrong offset!");

// Function TLClient.TLHudComponentConditionObject.OnUpdateHudComponent
// 0x0009 (0x0009 - 0x0000)
struct TLHudComponentConditionObject_OnUpdateHudComponent final
{
public:
	bool                                          bInCombatStatus;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInHpCostLessThanMax;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInInputSkillSlotGroup;                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInInputQuickSlot;                                 // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInExpLessThanZero;                                // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInExpChange;                                      // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInHubMenu;                                        // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInInputMoveCamera;                                // 0x0007(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInInputExceptMoveCamera;                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLHudComponentConditionObject_OnUpdateHudComponent) == 0x000001, "Wrong alignment on TLHudComponentConditionObject_OnUpdateHudComponent");
static_assert(sizeof(TLHudComponentConditionObject_OnUpdateHudComponent) == 0x000009, "Wrong size on TLHudComponentConditionObject_OnUpdateHudComponent");
static_assert(offsetof(TLHudComponentConditionObject_OnUpdateHudComponent, bInCombatStatus) == 0x000000, "Member 'TLHudComponentConditionObject_OnUpdateHudComponent::bInCombatStatus' has a wrong offset!");
static_assert(offsetof(TLHudComponentConditionObject_OnUpdateHudComponent, bInHpCostLessThanMax) == 0x000001, "Member 'TLHudComponentConditionObject_OnUpdateHudComponent::bInHpCostLessThanMax' has a wrong offset!");
static_assert(offsetof(TLHudComponentConditionObject_OnUpdateHudComponent, bInInputSkillSlotGroup) == 0x000002, "Member 'TLHudComponentConditionObject_OnUpdateHudComponent::bInInputSkillSlotGroup' has a wrong offset!");
static_assert(offsetof(TLHudComponentConditionObject_OnUpdateHudComponent, bInInputQuickSlot) == 0x000003, "Member 'TLHudComponentConditionObject_OnUpdateHudComponent::bInInputQuickSlot' has a wrong offset!");
static_assert(offsetof(TLHudComponentConditionObject_OnUpdateHudComponent, bInExpLessThanZero) == 0x000004, "Member 'TLHudComponentConditionObject_OnUpdateHudComponent::bInExpLessThanZero' has a wrong offset!");
static_assert(offsetof(TLHudComponentConditionObject_OnUpdateHudComponent, bInExpChange) == 0x000005, "Member 'TLHudComponentConditionObject_OnUpdateHudComponent::bInExpChange' has a wrong offset!");
static_assert(offsetof(TLHudComponentConditionObject_OnUpdateHudComponent, bInHubMenu) == 0x000006, "Member 'TLHudComponentConditionObject_OnUpdateHudComponent::bInHubMenu' has a wrong offset!");
static_assert(offsetof(TLHudComponentConditionObject_OnUpdateHudComponent, bInInputMoveCamera) == 0x000007, "Member 'TLHudComponentConditionObject_OnUpdateHudComponent::bInInputMoveCamera' has a wrong offset!");
static_assert(offsetof(TLHudComponentConditionObject_OnUpdateHudComponent, bInInputExceptMoveCamera) == 0x000008, "Member 'TLHudComponentConditionObject_OnUpdateHudComponent::bInInputExceptMoveCamera' has a wrong offset!");

// Function TLClient.TLHudComponentConditionObject.OnUpdateHudComponentUI
// 0x0002 (0x0002 - 0x0000)
struct TLHudComponentConditionObject_OnUpdateHudComponentUI final
{
public:
	ETLHudComponentUIType                         UIType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSatisfied;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLHudComponentConditionObject_OnUpdateHudComponentUI) == 0x000001, "Wrong alignment on TLHudComponentConditionObject_OnUpdateHudComponentUI");
static_assert(sizeof(TLHudComponentConditionObject_OnUpdateHudComponentUI) == 0x000002, "Wrong size on TLHudComponentConditionObject_OnUpdateHudComponentUI");
static_assert(offsetof(TLHudComponentConditionObject_OnUpdateHudComponentUI, UIType) == 0x000000, "Member 'TLHudComponentConditionObject_OnUpdateHudComponentUI::UIType' has a wrong offset!");
static_assert(offsetof(TLHudComponentConditionObject_OnUpdateHudComponentUI, bSatisfied) == 0x000001, "Member 'TLHudComponentConditionObject_OnUpdateHudComponentUI::bSatisfied' has a wrong offset!");

// Function TLClient.TLHudComponentConditionObject.SetVisibleFrameWidget
// 0x000C (0x000C - 0x0000)
struct TLHudComponentConditionObject_SetVisibleFrameWidget final
{
public:
	class FName                                   InNameKey;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInVisible;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLHudComponentConditionObject_SetVisibleFrameWidget) == 0x000004, "Wrong alignment on TLHudComponentConditionObject_SetVisibleFrameWidget");
static_assert(sizeof(TLHudComponentConditionObject_SetVisibleFrameWidget) == 0x00000C, "Wrong size on TLHudComponentConditionObject_SetVisibleFrameWidget");
static_assert(offsetof(TLHudComponentConditionObject_SetVisibleFrameWidget, InNameKey) == 0x000000, "Member 'TLHudComponentConditionObject_SetVisibleFrameWidget::InNameKey' has a wrong offset!");
static_assert(offsetof(TLHudComponentConditionObject_SetVisibleFrameWidget, bInVisible) == 0x000008, "Member 'TLHudComponentConditionObject_SetVisibleFrameWidget::bInVisible' has a wrong offset!");
static_assert(offsetof(TLHudComponentConditionObject_SetVisibleFrameWidget, ReturnValue) == 0x000009, "Member 'TLHudComponentConditionObject_SetVisibleFrameWidget::ReturnValue' has a wrong offset!");

// Function TLClient.TLHudComponentConditionObject.HasAnyConditionFlags
// 0x0008 (0x0008 - 0x0000)
struct TLHudComponentConditionObject_HasAnyConditionFlags final
{
public:
	int32                                         InFlags;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLHudComponentConditionObject_HasAnyConditionFlags) == 0x000004, "Wrong alignment on TLHudComponentConditionObject_HasAnyConditionFlags");
static_assert(sizeof(TLHudComponentConditionObject_HasAnyConditionFlags) == 0x000008, "Wrong size on TLHudComponentConditionObject_HasAnyConditionFlags");
static_assert(offsetof(TLHudComponentConditionObject_HasAnyConditionFlags, InFlags) == 0x000000, "Member 'TLHudComponentConditionObject_HasAnyConditionFlags::InFlags' has a wrong offset!");
static_assert(offsetof(TLHudComponentConditionObject_HasAnyConditionFlags, ReturnValue) == 0x000004, "Member 'TLHudComponentConditionObject_HasAnyConditionFlags::ReturnValue' has a wrong offset!");

// Function TLClient.TLHudComponentConditionObject.HasConditionFlag
// 0x0002 (0x0002 - 0x0000)
struct TLHudComponentConditionObject_HasConditionFlag final
{
public:
	ETLHudComponentCondition                      InCondition;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLHudComponentConditionObject_HasConditionFlag) == 0x000001, "Wrong alignment on TLHudComponentConditionObject_HasConditionFlag");
static_assert(sizeof(TLHudComponentConditionObject_HasConditionFlag) == 0x000002, "Wrong size on TLHudComponentConditionObject_HasConditionFlag");
static_assert(offsetof(TLHudComponentConditionObject_HasConditionFlag, InCondition) == 0x000000, "Member 'TLHudComponentConditionObject_HasConditionFlag::InCondition' has a wrong offset!");
static_assert(offsetof(TLHudComponentConditionObject_HasConditionFlag, ReturnValue) == 0x000001, "Member 'TLHudComponentConditionObject_HasConditionFlag::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetManorKeepingManorInfo.UpdateOnboarding
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetManorKeepingManorInfo_UpdateOnboarding final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetManorKeepingManorInfo_UpdateOnboarding) == 0x000001, "Wrong alignment on TLUserWidgetManorKeepingManorInfo_UpdateOnboarding");
static_assert(sizeof(TLUserWidgetManorKeepingManorInfo_UpdateOnboarding) == 0x000001, "Wrong size on TLUserWidgetManorKeepingManorInfo_UpdateOnboarding");
static_assert(offsetof(TLUserWidgetManorKeepingManorInfo_UpdateOnboarding, InShow) == 0x000000, "Member 'TLUserWidgetManorKeepingManorInfo_UpdateOnboarding::InShow' has a wrong offset!");

// Function TLClient.TLDebugSettings.IsNewMove
// 0x0001 (0x0001 - 0x0000)
struct TLDebugSettings_IsNewMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLDebugSettings_IsNewMove) == 0x000001, "Wrong alignment on TLDebugSettings_IsNewMove");
static_assert(sizeof(TLDebugSettings_IsNewMove) == 0x000001, "Wrong size on TLDebugSettings_IsNewMove");
static_assert(offsetof(TLDebugSettings_IsNewMove, ReturnValue) == 0x000000, "Member 'TLDebugSettings_IsNewMove::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetMenuEditItem.OnActivate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMenuEditItem_OnActivate final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMenuEditItem_OnActivate) == 0x000001, "Wrong alignment on TLUserWidgetMenuEditItem_OnActivate");
static_assert(sizeof(TLUserWidgetMenuEditItem_OnActivate) == 0x000001, "Wrong size on TLUserWidgetMenuEditItem_OnActivate");
static_assert(offsetof(TLUserWidgetMenuEditItem_OnActivate, bInValue) == 0x000000, "Member 'TLUserWidgetMenuEditItem_OnActivate::bInValue' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexAdventureChart.OnGroupBackgroundEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexAdventureChart_OnGroupBackgroundEvent final
{
public:
	bool                                          InbCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexAdventureChart_OnGroupBackgroundEvent) == 0x000001, "Wrong alignment on TLUserWidgetCodexAdventureChart_OnGroupBackgroundEvent");
static_assert(sizeof(TLUserWidgetCodexAdventureChart_OnGroupBackgroundEvent) == 0x000001, "Wrong size on TLUserWidgetCodexAdventureChart_OnGroupBackgroundEvent");
static_assert(offsetof(TLUserWidgetCodexAdventureChart_OnGroupBackgroundEvent, InbCompleted) == 0x000000, "Member 'TLUserWidgetCodexAdventureChart_OnGroupBackgroundEvent::InbCompleted' has a wrong offset!");

// Function TLClient.TLInspectionSceneControlActor.OnSetup
// 0x0020 (0x0020 - 0x0000)
struct TLInspectionSceneControlActor_OnSetup final
{
public:
	class UHiveEntityData*                        HiveEntity;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SctPath;                                           // 0x0008(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInspectionSceneControlActor_OnSetup) == 0x000008, "Wrong alignment on TLInspectionSceneControlActor_OnSetup");
static_assert(sizeof(TLInspectionSceneControlActor_OnSetup) == 0x000020, "Wrong size on TLInspectionSceneControlActor_OnSetup");
static_assert(offsetof(TLInspectionSceneControlActor_OnSetup, HiveEntity) == 0x000000, "Member 'TLInspectionSceneControlActor_OnSetup::HiveEntity' has a wrong offset!");
static_assert(offsetof(TLInspectionSceneControlActor_OnSetup, SctPath) == 0x000008, "Member 'TLInspectionSceneControlActor_OnSetup::SctPath' has a wrong offset!");

// Function TLClient.TLInspectionSceneControlActor.UpdateMouseMove
// 0x0004 (0x0004 - 0x0000)
struct TLInspectionSceneControlActor_UpdateMouseMove final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLInspectionSceneControlActor_UpdateMouseMove) == 0x000004, "Wrong alignment on TLInspectionSceneControlActor_UpdateMouseMove");
static_assert(sizeof(TLInspectionSceneControlActor_UpdateMouseMove) == 0x000004, "Wrong size on TLInspectionSceneControlActor_UpdateMouseMove");
static_assert(offsetof(TLInspectionSceneControlActor_UpdateMouseMove, DeltaSeconds) == 0x000000, "Member 'TLInspectionSceneControlActor_UpdateMouseMove::DeltaSeconds' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildMemberListItem.OnMemoTextFocusLost
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetGuildMemberListItem_OnMemoTextFocusLost final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildMemberListItem_OnMemoTextFocusLost) == 0x000004, "Wrong alignment on TLUserWidgetGuildMemberListItem_OnMemoTextFocusLost");
static_assert(sizeof(TLUserWidgetGuildMemberListItem_OnMemoTextFocusLost) == 0x000008, "Wrong size on TLUserWidgetGuildMemberListItem_OnMemoTextFocusLost");
static_assert(offsetof(TLUserWidgetGuildMemberListItem_OnMemoTextFocusLost, InFocusEvent) == 0x000000, "Member 'TLUserWidgetGuildMemberListItem_OnMemoTextFocusLost::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildMemberListItem.OnMemoTextFocusReceived
// 0x0040 (0x0040 - 0x0000)
struct TLUserWidgetGuildMemberListItem_OnMemoTextFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildMemberListItem_OnMemoTextFocusReceived) == 0x000004, "Wrong alignment on TLUserWidgetGuildMemberListItem_OnMemoTextFocusReceived");
static_assert(sizeof(TLUserWidgetGuildMemberListItem_OnMemoTextFocusReceived) == 0x000040, "Wrong size on TLUserWidgetGuildMemberListItem_OnMemoTextFocusReceived");
static_assert(offsetof(TLUserWidgetGuildMemberListItem_OnMemoTextFocusReceived, MyGeometry) == 0x000000, "Member 'TLUserWidgetGuildMemberListItem_OnMemoTextFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildMemberListItem_OnMemoTextFocusReceived, InFocusEvent) == 0x000038, "Member 'TLUserWidgetGuildMemberListItem_OnMemoTextFocusReceived::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildMemberListItem.OnUpdateOnlineMember
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetGuildMemberListItem_OnUpdateOnlineMember final
{
public:
	bool                                          InIsOnline;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsNonConnectedPlay;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildMemberListItem_OnUpdateOnlineMember) == 0x000001, "Wrong alignment on TLUserWidgetGuildMemberListItem_OnUpdateOnlineMember");
static_assert(sizeof(TLUserWidgetGuildMemberListItem_OnUpdateOnlineMember) == 0x000002, "Wrong size on TLUserWidgetGuildMemberListItem_OnUpdateOnlineMember");
static_assert(offsetof(TLUserWidgetGuildMemberListItem_OnUpdateOnlineMember, InIsOnline) == 0x000000, "Member 'TLUserWidgetGuildMemberListItem_OnUpdateOnlineMember::InIsOnline' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildMemberListItem_OnUpdateOnlineMember, InIsNonConnectedPlay) == 0x000001, "Member 'TLUserWidgetGuildMemberListItem_OnUpdateOnlineMember::InIsNonConnectedPlay' has a wrong offset!");

// Function TLClient.TLUserWidgetMainMenuTop.OnRedDotCountUpdated
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetMainMenuTop_OnRedDotCountUpdated final
{
public:
	int32                                         InRedDotCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMainMenuTop_OnRedDotCountUpdated) == 0x000004, "Wrong alignment on TLUserWidgetMainMenuTop_OnRedDotCountUpdated");
static_assert(sizeof(TLUserWidgetMainMenuTop_OnRedDotCountUpdated) == 0x000004, "Wrong size on TLUserWidgetMainMenuTop_OnRedDotCountUpdated");
static_assert(offsetof(TLUserWidgetMainMenuTop_OnRedDotCountUpdated, InRedDotCount) == 0x000000, "Member 'TLUserWidgetMainMenuTop_OnRedDotCountUpdated::InRedDotCount' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleContentsViewer.OnUpdateGuideText
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetConsoleContentsViewer_OnUpdateGuideText final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InText;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleContentsViewer_OnUpdateGuideText) == 0x000008, "Wrong alignment on TLUserWidgetConsoleContentsViewer_OnUpdateGuideText");
static_assert(sizeof(TLUserWidgetConsoleContentsViewer_OnUpdateGuideText) == 0x000020, "Wrong size on TLUserWidgetConsoleContentsViewer_OnUpdateGuideText");
static_assert(offsetof(TLUserWidgetConsoleContentsViewer_OnUpdateGuideText, bInVisible) == 0x000000, "Member 'TLUserWidgetConsoleContentsViewer_OnUpdateGuideText::bInVisible' has a wrong offset!");
static_assert(offsetof(TLUserWidgetConsoleContentsViewer_OnUpdateGuideText, InText) == 0x000008, "Member 'TLUserWidgetConsoleContentsViewer_OnUpdateGuideText::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleContentsViewer.OnVisibleTargetScan
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetConsoleContentsViewer_OnVisibleTargetScan final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleContentsViewer_OnVisibleTargetScan) == 0x000001, "Wrong alignment on TLUserWidgetConsoleContentsViewer_OnVisibleTargetScan");
static_assert(sizeof(TLUserWidgetConsoleContentsViewer_OnVisibleTargetScan) == 0x000001, "Wrong size on TLUserWidgetConsoleContentsViewer_OnVisibleTargetScan");
static_assert(offsetof(TLUserWidgetConsoleContentsViewer_OnVisibleTargetScan, bVisible) == 0x000000, "Member 'TLUserWidgetConsoleContentsViewer_OnVisibleTargetScan::bVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetSeasonPassRewardItem.OnUpdateIsHaveHiveEntity
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSeasonPassRewardItem_OnUpdateIsHaveHiveEntity final
{
public:
	bool                                          bInIsHaveHiveEntity;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSeasonPassRewardItem_OnUpdateIsHaveHiveEntity) == 0x000001, "Wrong alignment on TLUserWidgetSeasonPassRewardItem_OnUpdateIsHaveHiveEntity");
static_assert(sizeof(TLUserWidgetSeasonPassRewardItem_OnUpdateIsHaveHiveEntity) == 0x000001, "Wrong size on TLUserWidgetSeasonPassRewardItem_OnUpdateIsHaveHiveEntity");
static_assert(offsetof(TLUserWidgetSeasonPassRewardItem_OnUpdateIsHaveHiveEntity, bInIsHaveHiveEntity) == 0x000000, "Member 'TLUserWidgetSeasonPassRewardItem_OnUpdateIsHaveHiveEntity::bInIsHaveHiveEntity' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIcon.IsMapIconStateChanged
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIcon_IsMapIconStateChanged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIcon_IsMapIconStateChanged) == 0x000001, "Wrong alignment on TLUserWidgetMapIcon_IsMapIconStateChanged");
static_assert(sizeof(TLUserWidgetMapIcon_IsMapIconStateChanged) == 0x000001, "Wrong size on TLUserWidgetMapIcon_IsMapIconStateChanged");
static_assert(offsetof(TLUserWidgetMapIcon_IsMapIconStateChanged, ReturnValue) == 0x000000, "Member 'TLUserWidgetMapIcon_IsMapIconStateChanged::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIcon.IsPlayCreateAnimation
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIcon_IsPlayCreateAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIcon_IsPlayCreateAnimation) == 0x000001, "Wrong alignment on TLUserWidgetMapIcon_IsPlayCreateAnimation");
static_assert(sizeof(TLUserWidgetMapIcon_IsPlayCreateAnimation) == 0x000001, "Wrong size on TLUserWidgetMapIcon_IsPlayCreateAnimation");
static_assert(offsetof(TLUserWidgetMapIcon_IsPlayCreateAnimation, ReturnValue) == 0x000000, "Member 'TLUserWidgetMapIcon_IsPlayCreateAnimation::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIcon.OnChildrenHideEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIcon_OnChildrenHideEvent final
{
public:
	bool                                          bInHide;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIcon_OnChildrenHideEvent) == 0x000001, "Wrong alignment on TLUserWidgetMapIcon_OnChildrenHideEvent");
static_assert(sizeof(TLUserWidgetMapIcon_OnChildrenHideEvent) == 0x000001, "Wrong size on TLUserWidgetMapIcon_OnChildrenHideEvent");
static_assert(offsetof(TLUserWidgetMapIcon_OnChildrenHideEvent, bInHide) == 0x000000, "Member 'TLUserWidgetMapIcon_OnChildrenHideEvent::bInHide' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIcon.OnCreated
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIcon_OnCreated final
{
public:
	bool                                          InCreateInMinimap;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIcon_OnCreated) == 0x000001, "Wrong alignment on TLUserWidgetMapIcon_OnCreated");
static_assert(sizeof(TLUserWidgetMapIcon_OnCreated) == 0x000001, "Wrong size on TLUserWidgetMapIcon_OnCreated");
static_assert(offsetof(TLUserWidgetMapIcon_OnCreated, InCreateInMinimap) == 0x000000, "Member 'TLUserWidgetMapIcon_OnCreated::InCreateInMinimap' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIcon.OnNpcFocusEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIcon_OnNpcFocusEvent final
{
public:
	bool                                          bInFocusState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIcon_OnNpcFocusEvent) == 0x000001, "Wrong alignment on TLUserWidgetMapIcon_OnNpcFocusEvent");
static_assert(sizeof(TLUserWidgetMapIcon_OnNpcFocusEvent) == 0x000001, "Wrong size on TLUserWidgetMapIcon_OnNpcFocusEvent");
static_assert(offsetof(TLUserWidgetMapIcon_OnNpcFocusEvent, bInFocusState) == 0x000000, "Member 'TLUserWidgetMapIcon_OnNpcFocusEvent::bInFocusState' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIcon.OnOtherRegion
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIcon_OnOtherRegion final
{
public:
	bool                                          InIsSet;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIcon_OnOtherRegion) == 0x000001, "Wrong alignment on TLUserWidgetMapIcon_OnOtherRegion");
static_assert(sizeof(TLUserWidgetMapIcon_OnOtherRegion) == 0x000001, "Wrong size on TLUserWidgetMapIcon_OnOtherRegion");
static_assert(offsetof(TLUserWidgetMapIcon_OnOtherRegion, InIsSet) == 0x000000, "Member 'TLUserWidgetMapIcon_OnOtherRegion::InIsSet' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIcon.OnStopEmphasis
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIcon_OnStopEmphasis final
{
public:
	bool                                          bInPlayStopAnimation;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIcon_OnStopEmphasis) == 0x000001, "Wrong alignment on TLUserWidgetMapIcon_OnStopEmphasis");
static_assert(sizeof(TLUserWidgetMapIcon_OnStopEmphasis) == 0x000001, "Wrong size on TLUserWidgetMapIcon_OnStopEmphasis");
static_assert(offsetof(TLUserWidgetMapIcon_OnStopEmphasis, bInPlayStopAnimation) == 0x000000, "Member 'TLUserWidgetMapIcon_OnStopEmphasis::bInPlayStopAnimation' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIcon.OnUnderRoof
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIcon_OnUnderRoof final
{
public:
	bool                                          bInSet;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIcon_OnUnderRoof) == 0x000001, "Wrong alignment on TLUserWidgetMapIcon_OnUnderRoof");
static_assert(sizeof(TLUserWidgetMapIcon_OnUnderRoof) == 0x000001, "Wrong size on TLUserWidgetMapIcon_OnUnderRoof");
static_assert(offsetof(TLUserWidgetMapIcon_OnUnderRoof, bInSet) == 0x000000, "Member 'TLUserWidgetMapIcon_OnUnderRoof::bInSet' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIcon.OnUnLockMemorial
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIcon_OnUnLockMemorial final
{
public:
	bool                                          IsUnLock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIcon_OnUnLockMemorial) == 0x000001, "Wrong alignment on TLUserWidgetMapIcon_OnUnLockMemorial");
static_assert(sizeof(TLUserWidgetMapIcon_OnUnLockMemorial) == 0x000001, "Wrong size on TLUserWidgetMapIcon_OnUnLockMemorial");
static_assert(offsetof(TLUserWidgetMapIcon_OnUnLockMemorial, IsUnLock) == 0x000000, "Member 'TLUserWidgetMapIcon_OnUnLockMemorial::IsUnLock' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIcon.OnUpdateVisibleSubWorldTarget
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIcon_OnUpdateVisibleSubWorldTarget final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIcon_OnUpdateVisibleSubWorldTarget) == 0x000001, "Wrong alignment on TLUserWidgetMapIcon_OnUpdateVisibleSubWorldTarget");
static_assert(sizeof(TLUserWidgetMapIcon_OnUpdateVisibleSubWorldTarget) == 0x000001, "Wrong size on TLUserWidgetMapIcon_OnUpdateVisibleSubWorldTarget");
static_assert(offsetof(TLUserWidgetMapIcon_OnUpdateVisibleSubWorldTarget, bVisible) == 0x000000, "Member 'TLUserWidgetMapIcon_OnUpdateVisibleSubWorldTarget::bVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIcon.SetCameraViewAngle
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetMapIcon_SetCameraViewAngle final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIcon_SetCameraViewAngle) == 0x000004, "Wrong alignment on TLUserWidgetMapIcon_SetCameraViewAngle");
static_assert(sizeof(TLUserWidgetMapIcon_SetCameraViewAngle) == 0x000004, "Wrong size on TLUserWidgetMapIcon_SetCameraViewAngle");
static_assert(offsetof(TLUserWidgetMapIcon_SetCameraViewAngle, Angle) == 0x000000, "Member 'TLUserWidgetMapIcon_SetCameraViewAngle::Angle' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIcon.SetHighlight
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIcon_SetHighlight final
{
public:
	bool                                          IsSet;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIcon_SetHighlight) == 0x000001, "Wrong alignment on TLUserWidgetMapIcon_SetHighlight");
static_assert(sizeof(TLUserWidgetMapIcon_SetHighlight) == 0x000001, "Wrong size on TLUserWidgetMapIcon_SetHighlight");
static_assert(offsetof(TLUserWidgetMapIcon_SetHighlight, IsSet) == 0x000000, "Member 'TLUserWidgetMapIcon_SetHighlight::IsSet' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIcon.SetMapIconRotation
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetMapIcon_SetMapIconRotation final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIcon_SetMapIconRotation) == 0x000004, "Wrong alignment on TLUserWidgetMapIcon_SetMapIconRotation");
static_assert(sizeof(TLUserWidgetMapIcon_SetMapIconRotation) == 0x000004, "Wrong size on TLUserWidgetMapIcon_SetMapIconRotation");
static_assert(offsetof(TLUserWidgetMapIcon_SetMapIconRotation, Angle) == 0x000000, "Member 'TLUserWidgetMapIcon_SetMapIconRotation::Angle' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconWorldBoss.OnFocusAnimation
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconWorldBoss_OnFocusAnimation final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconWorldBoss_OnFocusAnimation) == 0x000001, "Wrong alignment on TLUserWidgetMapIconWorldBoss_OnFocusAnimation");
static_assert(sizeof(TLUserWidgetMapIconWorldBoss_OnFocusAnimation) == 0x000001, "Wrong size on TLUserWidgetMapIconWorldBoss_OnFocusAnimation");
static_assert(offsetof(TLUserWidgetMapIconWorldBoss_OnFocusAnimation, IsEnable) == 0x000000, "Member 'TLUserWidgetMapIconWorldBoss_OnFocusAnimation::IsEnable' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconWorldBoss.OnUpdateScheduleType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconWorldBoss_OnUpdateScheduleType final
{
public:
	ETLEventScheduleType                          InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconWorldBoss_OnUpdateScheduleType) == 0x000001, "Wrong alignment on TLUserWidgetMapIconWorldBoss_OnUpdateScheduleType");
static_assert(sizeof(TLUserWidgetMapIconWorldBoss_OnUpdateScheduleType) == 0x000001, "Wrong size on TLUserWidgetMapIconWorldBoss_OnUpdateScheduleType");
static_assert(offsetof(TLUserWidgetMapIconWorldBoss_OnUpdateScheduleType, InType) == 0x000000, "Member 'TLUserWidgetMapIconWorldBoss_OnUpdateScheduleType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetPolymorphListItem.GetEntryType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPolymorphListItem_GetEntryType final
{
public:
	ETLPolymorphEntryType                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPolymorphListItem_GetEntryType) == 0x000001, "Wrong alignment on TLUserWidgetPolymorphListItem_GetEntryType");
static_assert(sizeof(TLUserWidgetPolymorphListItem_GetEntryType) == 0x000001, "Wrong size on TLUserWidgetPolymorphListItem_GetEntryType");
static_assert(offsetof(TLUserWidgetPolymorphListItem_GetEntryType, ReturnValue) == 0x000000, "Member 'TLUserWidgetPolymorphListItem_GetEntryType::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemSlotContextMenuObject.AddMenuItem
// 0x000C (0x000C - 0x0000)
struct TLItemSlotContextMenuObject_AddMenuItem final
{
public:
	class FName                                   InMenuId;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEnable;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLItemSlotContextMenuObject_AddMenuItem) == 0x000004, "Wrong alignment on TLItemSlotContextMenuObject_AddMenuItem");
static_assert(sizeof(TLItemSlotContextMenuObject_AddMenuItem) == 0x00000C, "Wrong size on TLItemSlotContextMenuObject_AddMenuItem");
static_assert(offsetof(TLItemSlotContextMenuObject_AddMenuItem, InMenuId) == 0x000000, "Member 'TLItemSlotContextMenuObject_AddMenuItem::InMenuId' has a wrong offset!");
static_assert(offsetof(TLItemSlotContextMenuObject_AddMenuItem, InEnable) == 0x000008, "Member 'TLItemSlotContextMenuObject_AddMenuItem::InEnable' has a wrong offset!");

// Function TLClient.TLItemSlotContextMenuObject.AddMenuItemWithText
// 0x0028 (0x0028 - 0x0000)
struct TLItemSlotContextMenuObject_AddMenuItemWithText final
{
public:
	class FName                                   InMenuId;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InMenuText;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          InEnable;                                          // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLItemSlotContextMenuObject_AddMenuItemWithText) == 0x000008, "Wrong alignment on TLItemSlotContextMenuObject_AddMenuItemWithText");
static_assert(sizeof(TLItemSlotContextMenuObject_AddMenuItemWithText) == 0x000028, "Wrong size on TLItemSlotContextMenuObject_AddMenuItemWithText");
static_assert(offsetof(TLItemSlotContextMenuObject_AddMenuItemWithText, InMenuId) == 0x000000, "Member 'TLItemSlotContextMenuObject_AddMenuItemWithText::InMenuId' has a wrong offset!");
static_assert(offsetof(TLItemSlotContextMenuObject_AddMenuItemWithText, InMenuText) == 0x000008, "Member 'TLItemSlotContextMenuObject_AddMenuItemWithText::InMenuText' has a wrong offset!");
static_assert(offsetof(TLItemSlotContextMenuObject_AddMenuItemWithText, InEnable) == 0x000020, "Member 'TLItemSlotContextMenuObject_AddMenuItemWithText::InEnable' has a wrong offset!");

// Function TLClient.TLItemSlotContextMenuObject.OnContextMenuShow
// 0x0018 (0x0018 - 0x0000)
struct TLItemSlotContextMenuObject_OnContextMenuShow final
{
public:
	EInvenModeType                                InInvenModeType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTLUserWidgetItemSlot*                  InItemWidget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCurrentPresetNum;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLUIPlatform                                 UIPlatform;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLItemSlotContextMenuObject_OnContextMenuShow) == 0x000008, "Wrong alignment on TLItemSlotContextMenuObject_OnContextMenuShow");
static_assert(sizeof(TLItemSlotContextMenuObject_OnContextMenuShow) == 0x000018, "Wrong size on TLItemSlotContextMenuObject_OnContextMenuShow");
static_assert(offsetof(TLItemSlotContextMenuObject_OnContextMenuShow, InInvenModeType) == 0x000000, "Member 'TLItemSlotContextMenuObject_OnContextMenuShow::InInvenModeType' has a wrong offset!");
static_assert(offsetof(TLItemSlotContextMenuObject_OnContextMenuShow, InItemWidget) == 0x000008, "Member 'TLItemSlotContextMenuObject_OnContextMenuShow::InItemWidget' has a wrong offset!");
static_assert(offsetof(TLItemSlotContextMenuObject_OnContextMenuShow, InCurrentPresetNum) == 0x000010, "Member 'TLItemSlotContextMenuObject_OnContextMenuShow::InCurrentPresetNum' has a wrong offset!");
static_assert(offsetof(TLItemSlotContextMenuObject_OnContextMenuShow, UIPlatform) == 0x000014, "Member 'TLItemSlotContextMenuObject_OnContextMenuShow::UIPlatform' has a wrong offset!");

// Function TLClient.TLUserWidgetAGIDLink.SetForChild
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetAGIDLink_SetForChild final
{
public:
	bool                                          InForChild;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAGIDLink_SetForChild) == 0x000001, "Wrong alignment on TLUserWidgetAGIDLink_SetForChild");
static_assert(sizeof(TLUserWidgetAGIDLink_SetForChild) == 0x000001, "Wrong size on TLUserWidgetAGIDLink_SetForChild");
static_assert(offsetof(TLUserWidgetAGIDLink_SetForChild, InForChild) == 0x000000, "Member 'TLUserWidgetAGIDLink_SetForChild::InForChild' has a wrong offset!");

// Function TLClient.TLUserWidgetContentsAlarmDetailBase.GetIsHoverBP
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContentsAlarmDetailBase_GetIsHoverBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContentsAlarmDetailBase_GetIsHoverBP) == 0x000001, "Wrong alignment on TLUserWidgetContentsAlarmDetailBase_GetIsHoverBP");
static_assert(sizeof(TLUserWidgetContentsAlarmDetailBase_GetIsHoverBP) == 0x000001, "Wrong size on TLUserWidgetContentsAlarmDetailBase_GetIsHoverBP");
static_assert(offsetof(TLUserWidgetContentsAlarmDetailBase_GetIsHoverBP, ReturnValue) == 0x000000, "Member 'TLUserWidgetContentsAlarmDetailBase_GetIsHoverBP::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetContentsAlarmDetailBase.OnAutoPlay
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContentsAlarmDetailBase_OnAutoPlay final
{
public:
	bool                                          IsOnAutoPlay;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContentsAlarmDetailBase_OnAutoPlay) == 0x000001, "Wrong alignment on TLUserWidgetContentsAlarmDetailBase_OnAutoPlay");
static_assert(sizeof(TLUserWidgetContentsAlarmDetailBase_OnAutoPlay) == 0x000001, "Wrong size on TLUserWidgetContentsAlarmDetailBase_OnAutoPlay");
static_assert(offsetof(TLUserWidgetContentsAlarmDetailBase_OnAutoPlay, IsOnAutoPlay) == 0x000000, "Member 'TLUserWidgetContentsAlarmDetailBase_OnAutoPlay::IsOnAutoPlay' has a wrong offset!");

// Function TLClient.TLUserWidgetContentsAlarmDetailBase.OnUpdateViewType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContentsAlarmDetailBase_OnUpdateViewType final
{
public:
	EContentsAlarmViewType                        InViewType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContentsAlarmDetailBase_OnUpdateViewType) == 0x000001, "Wrong alignment on TLUserWidgetContentsAlarmDetailBase_OnUpdateViewType");
static_assert(sizeof(TLUserWidgetContentsAlarmDetailBase_OnUpdateViewType) == 0x000001, "Wrong size on TLUserWidgetContentsAlarmDetailBase_OnUpdateViewType");
static_assert(offsetof(TLUserWidgetContentsAlarmDetailBase_OnUpdateViewType, InViewType) == 0x000000, "Member 'TLUserWidgetContentsAlarmDetailBase_OnUpdateViewType::InViewType' has a wrong offset!");

// Function TLClient.TLUserWidgetContractDetailInfo.ButtonClickContractTarget
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContractDetailInfo_ButtonClickContractTarget final
{
public:
	bool                                          InbChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractDetailInfo_ButtonClickContractTarget) == 0x000001, "Wrong alignment on TLUserWidgetContractDetailInfo_ButtonClickContractTarget");
static_assert(sizeof(TLUserWidgetContractDetailInfo_ButtonClickContractTarget) == 0x000001, "Wrong size on TLUserWidgetContractDetailInfo_ButtonClickContractTarget");
static_assert(offsetof(TLUserWidgetContractDetailInfo_ButtonClickContractTarget, InbChecked) == 0x000000, "Member 'TLUserWidgetContractDetailInfo_ButtonClickContractTarget::InbChecked' has a wrong offset!");

// Function TLClient.TLUserWidgetContractDetailInfo.OnContractTargetAnimation
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContractDetailInfo_OnContractTargetAnimation final
{
public:
	bool                                          InbVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractDetailInfo_OnContractTargetAnimation) == 0x000001, "Wrong alignment on TLUserWidgetContractDetailInfo_OnContractTargetAnimation");
static_assert(sizeof(TLUserWidgetContractDetailInfo_OnContractTargetAnimation) == 0x000001, "Wrong size on TLUserWidgetContractDetailInfo_OnContractTargetAnimation");
static_assert(offsetof(TLUserWidgetContractDetailInfo_OnContractTargetAnimation, InbVisible) == 0x000000, "Member 'TLUserWidgetContractDetailInfo_OnContractTargetAnimation::InbVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetContractDetailInfo.OnTutorialActivateEvent
// 0x00C8 (0x00C8 - 0x0000)
struct TLUserWidgetContractDetailInfo_OnTutorialActivateEvent final
{
public:
	struct FTLInfoTutorial                        InfoTutorial;                                      // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractDetailInfo_OnTutorialActivateEvent) == 0x000008, "Wrong alignment on TLUserWidgetContractDetailInfo_OnTutorialActivateEvent");
static_assert(sizeof(TLUserWidgetContractDetailInfo_OnTutorialActivateEvent) == 0x0000C8, "Wrong size on TLUserWidgetContractDetailInfo_OnTutorialActivateEvent");
static_assert(offsetof(TLUserWidgetContractDetailInfo_OnTutorialActivateEvent, InfoTutorial) == 0x000000, "Member 'TLUserWidgetContractDetailInfo_OnTutorialActivateEvent::InfoTutorial' has a wrong offset!");

// Function TLClient.TLUserWidgetContractDetailInfo.OnUpdateContractInfo
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetContractDetailInfo_OnUpdateContractInfo final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractDetailInfo_OnUpdateContractInfo) == 0x000008, "Wrong alignment on TLUserWidgetContractDetailInfo_OnUpdateContractInfo");
static_assert(sizeof(TLUserWidgetContractDetailInfo_OnUpdateContractInfo) == 0x000008, "Wrong size on TLUserWidgetContractDetailInfo_OnUpdateContractInfo");
static_assert(offsetof(TLUserWidgetContractDetailInfo_OnUpdateContractInfo, InObject) == 0x000000, "Member 'TLUserWidgetContractDetailInfo_OnUpdateContractInfo::InObject' has a wrong offset!");

// Function TLClient.TLUserWidgetContractDetailInfo.OnUpdateContractInfoWithGuid
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetContractDetailInfo_OnUpdateContractInfoWithGuid final
{
public:
	uint64                                        InContractGuid;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractDetailInfo_OnUpdateContractInfoWithGuid) == 0x000008, "Wrong alignment on TLUserWidgetContractDetailInfo_OnUpdateContractInfoWithGuid");
static_assert(sizeof(TLUserWidgetContractDetailInfo_OnUpdateContractInfoWithGuid) == 0x000008, "Wrong size on TLUserWidgetContractDetailInfo_OnUpdateContractInfoWithGuid");
static_assert(offsetof(TLUserWidgetContractDetailInfo_OnUpdateContractInfoWithGuid, InContractGuid) == 0x000000, "Member 'TLUserWidgetContractDetailInfo_OnUpdateContractInfoWithGuid::InContractGuid' has a wrong offset!");

// Function TLClient.TLUserWidgetContractDetailInfo.OnUpdateContractPercent
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetContractDetailInfo_OnUpdateContractPercent final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractDetailInfo_OnUpdateContractPercent) == 0x000004, "Wrong alignment on TLUserWidgetContractDetailInfo_OnUpdateContractPercent");
static_assert(sizeof(TLUserWidgetContractDetailInfo_OnUpdateContractPercent) == 0x000004, "Wrong size on TLUserWidgetContractDetailInfo_OnUpdateContractPercent");
static_assert(offsetof(TLUserWidgetContractDetailInfo_OnUpdateContractPercent, InValue) == 0x000000, "Member 'TLUserWidgetContractDetailInfo_OnUpdateContractPercent::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetContractDetailInfo.OnUpdateContractState
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetContractDetailInfo_OnUpdateContractState final
{
public:
	EContractState                                InContractState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinishTarget;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractDetailInfo_OnUpdateContractState) == 0x000001, "Wrong alignment on TLUserWidgetContractDetailInfo_OnUpdateContractState");
static_assert(sizeof(TLUserWidgetContractDetailInfo_OnUpdateContractState) == 0x000002, "Wrong size on TLUserWidgetContractDetailInfo_OnUpdateContractState");
static_assert(offsetof(TLUserWidgetContractDetailInfo_OnUpdateContractState, InContractState) == 0x000000, "Member 'TLUserWidgetContractDetailInfo_OnUpdateContractState::InContractState' has a wrong offset!");
static_assert(offsetof(TLUserWidgetContractDetailInfo_OnUpdateContractState, bFinishTarget) == 0x000001, "Member 'TLUserWidgetContractDetailInfo_OnUpdateContractState::bFinishTarget' has a wrong offset!");

// Function TLClient.TLUserWidgetContractDetailInfo.OnUpdateRefreshContractList
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContractDetailInfo_OnUpdateRefreshContractList final
{
public:
	EContractRefreshListReason                    InContractRefreshListReason;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractDetailInfo_OnUpdateRefreshContractList) == 0x000001, "Wrong alignment on TLUserWidgetContractDetailInfo_OnUpdateRefreshContractList");
static_assert(sizeof(TLUserWidgetContractDetailInfo_OnUpdateRefreshContractList) == 0x000001, "Wrong size on TLUserWidgetContractDetailInfo_OnUpdateRefreshContractList");
static_assert(offsetof(TLUserWidgetContractDetailInfo_OnUpdateRefreshContractList, InContractRefreshListReason) == 0x000000, "Member 'TLUserWidgetContractDetailInfo_OnUpdateRefreshContractList::InContractRefreshListReason' has a wrong offset!");

// Function TLClient.TLUserWidgetContractDetailInfo.SetContractInfo
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetContractDetailInfo_SetContractInfo final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbFinishTarget;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetContractDetailInfo_SetContractInfo) == 0x000008, "Wrong alignment on TLUserWidgetContractDetailInfo_SetContractInfo");
static_assert(sizeof(TLUserWidgetContractDetailInfo_SetContractInfo) == 0x000010, "Wrong size on TLUserWidgetContractDetailInfo_SetContractInfo");
static_assert(offsetof(TLUserWidgetContractDetailInfo_SetContractInfo, InObject) == 0x000000, "Member 'TLUserWidgetContractDetailInfo_SetContractInfo::InObject' has a wrong offset!");
static_assert(offsetof(TLUserWidgetContractDetailInfo_SetContractInfo, InbFinishTarget) == 0x000008, "Member 'TLUserWidgetContractDetailInfo_SetContractInfo::InbFinishTarget' has a wrong offset!");

// Function TLClient.TLUserWidgetContractDetailInfo.SetContractInfoWithGuid
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetContractDetailInfo_SetContractInfoWithGuid final
{
public:
	uint64                                        InContractGuid;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractDetailInfo_SetContractInfoWithGuid) == 0x000008, "Wrong alignment on TLUserWidgetContractDetailInfo_SetContractInfoWithGuid");
static_assert(sizeof(TLUserWidgetContractDetailInfo_SetContractInfoWithGuid) == 0x000008, "Wrong size on TLUserWidgetContractDetailInfo_SetContractInfoWithGuid");
static_assert(offsetof(TLUserWidgetContractDetailInfo_SetContractInfoWithGuid, InContractGuid) == 0x000000, "Member 'TLUserWidgetContractDetailInfo_SetContractInfoWithGuid::InContractGuid' has a wrong offset!");

// Function TLClient.TLEnchantSceneControlActor.CameraZoomInOut
// 0x0004 (0x0004 - 0x0000)
struct TLEnchantSceneControlActor_CameraZoomInOut final
{
public:
	int32                                         InZoomIn;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEnchantSceneControlActor_CameraZoomInOut) == 0x000004, "Wrong alignment on TLEnchantSceneControlActor_CameraZoomInOut");
static_assert(sizeof(TLEnchantSceneControlActor_CameraZoomInOut) == 0x000004, "Wrong size on TLEnchantSceneControlActor_CameraZoomInOut");
static_assert(offsetof(TLEnchantSceneControlActor_CameraZoomInOut, InZoomIn) == 0x000000, "Member 'TLEnchantSceneControlActor_CameraZoomInOut::InZoomIn' has a wrong offset!");

// Function TLClient.TLEnchantSceneControlActor.GetDefaultPosition
// 0x000C (0x000C - 0x0000)
struct TLEnchantSceneControlActor_GetDefaultPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEnchantSceneControlActor_GetDefaultPosition) == 0x000004, "Wrong alignment on TLEnchantSceneControlActor_GetDefaultPosition");
static_assert(sizeof(TLEnchantSceneControlActor_GetDefaultPosition) == 0x00000C, "Wrong size on TLEnchantSceneControlActor_GetDefaultPosition");
static_assert(offsetof(TLEnchantSceneControlActor_GetDefaultPosition, ReturnValue) == 0x000000, "Member 'TLEnchantSceneControlActor_GetDefaultPosition::ReturnValue' has a wrong offset!");

// Function TLClient.TLEnchantSceneControlActor.GetLocationByTag
// 0x0014 (0x0014 - 0x0000)
struct TLEnchantSceneControlActor_GetLocationByTag final
{
public:
	class FName                                   InTag;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEnchantSceneControlActor_GetLocationByTag) == 0x000004, "Wrong alignment on TLEnchantSceneControlActor_GetLocationByTag");
static_assert(sizeof(TLEnchantSceneControlActor_GetLocationByTag) == 0x000014, "Wrong size on TLEnchantSceneControlActor_GetLocationByTag");
static_assert(offsetof(TLEnchantSceneControlActor_GetLocationByTag, InTag) == 0x000000, "Member 'TLEnchantSceneControlActor_GetLocationByTag::InTag' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_GetLocationByTag, ReturnValue) == 0x000008, "Member 'TLEnchantSceneControlActor_GetLocationByTag::ReturnValue' has a wrong offset!");

// Function TLClient.TLEnchantSceneControlActor.GetRotatorByTag
// 0x0014 (0x0014 - 0x0000)
struct TLEnchantSceneControlActor_GetRotatorByTag final
{
public:
	class FName                                   InTag;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEnchantSceneControlActor_GetRotatorByTag) == 0x000004, "Wrong alignment on TLEnchantSceneControlActor_GetRotatorByTag");
static_assert(sizeof(TLEnchantSceneControlActor_GetRotatorByTag) == 0x000014, "Wrong size on TLEnchantSceneControlActor_GetRotatorByTag");
static_assert(offsetof(TLEnchantSceneControlActor_GetRotatorByTag, InTag) == 0x000000, "Member 'TLEnchantSceneControlActor_GetRotatorByTag::InTag' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_GetRotatorByTag, ReturnValue) == 0x000008, "Member 'TLEnchantSceneControlActor_GetRotatorByTag::ReturnValue' has a wrong offset!");

// Function TLClient.TLEnchantSceneControlActor.OnShowLongPress
// 0x0001 (0x0001 - 0x0000)
struct TLEnchantSceneControlActor_OnShowLongPress final
{
public:
	bool                                          bPress;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEnchantSceneControlActor_OnShowLongPress) == 0x000001, "Wrong alignment on TLEnchantSceneControlActor_OnShowLongPress");
static_assert(sizeof(TLEnchantSceneControlActor_OnShowLongPress) == 0x000001, "Wrong size on TLEnchantSceneControlActor_OnShowLongPress");
static_assert(offsetof(TLEnchantSceneControlActor_OnShowLongPress, bPress) == 0x000000, "Member 'TLEnchantSceneControlActor_OnShowLongPress::bPress' has a wrong offset!");

// Function TLClient.TLEnchantSceneControlActor.PlaySct
// 0x0030 (0x0030 - 0x0000)
struct TLEnchantSceneControlActor_PlaySct final
{
public:
	class FName                                   InTag;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InContiKey;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        InContiPath;                                       // 0x0010(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLEnchantSceneControlActor_PlaySct) == 0x000008, "Wrong alignment on TLEnchantSceneControlActor_PlaySct");
static_assert(sizeof(TLEnchantSceneControlActor_PlaySct) == 0x000030, "Wrong size on TLEnchantSceneControlActor_PlaySct");
static_assert(offsetof(TLEnchantSceneControlActor_PlaySct, InTag) == 0x000000, "Member 'TLEnchantSceneControlActor_PlaySct::InTag' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_PlaySct, InContiKey) == 0x000008, "Member 'TLEnchantSceneControlActor_PlaySct::InContiKey' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_PlaySct, InContiPath) == 0x000010, "Member 'TLEnchantSceneControlActor_PlaySct::InContiPath' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_PlaySct, ReturnValue) == 0x000028, "Member 'TLEnchantSceneControlActor_PlaySct::ReturnValue' has a wrong offset!");

// Function TLClient.TLEnchantSceneControlActor.RotateModelObjectByTag
// 0x0008 (0x0008 - 0x0000)
struct TLEnchantSceneControlActor_RotateModelObjectByTag final
{
public:
	class FName                                   InTag;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEnchantSceneControlActor_RotateModelObjectByTag) == 0x000004, "Wrong alignment on TLEnchantSceneControlActor_RotateModelObjectByTag");
static_assert(sizeof(TLEnchantSceneControlActor_RotateModelObjectByTag) == 0x000008, "Wrong size on TLEnchantSceneControlActor_RotateModelObjectByTag");
static_assert(offsetof(TLEnchantSceneControlActor_RotateModelObjectByTag, InTag) == 0x000000, "Member 'TLEnchantSceneControlActor_RotateModelObjectByTag::InTag' has a wrong offset!");

// Function TLClient.TLEnchantSceneControlActor.SetCombatStatus
// 0x0001 (0x0001 - 0x0000)
struct TLEnchantSceneControlActor_SetCombatStatus final
{
public:
	bool                                          InCombatStatus;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEnchantSceneControlActor_SetCombatStatus) == 0x000001, "Wrong alignment on TLEnchantSceneControlActor_SetCombatStatus");
static_assert(sizeof(TLEnchantSceneControlActor_SetCombatStatus) == 0x000001, "Wrong size on TLEnchantSceneControlActor_SetCombatStatus");
static_assert(offsetof(TLEnchantSceneControlActor_SetCombatStatus, InCombatStatus) == 0x000000, "Member 'TLEnchantSceneControlActor_SetCombatStatus::InCombatStatus' has a wrong offset!");

// Function TLClient.TLEnchantSceneControlActor.SetDrawScaleByTag
// 0x0014 (0x0014 - 0x0000)
struct TLEnchantSceneControlActor_SetDrawScaleByTag final
{
public:
	class FName                                   InTag;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InScale;                                           // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEnchantSceneControlActor_SetDrawScaleByTag) == 0x000004, "Wrong alignment on TLEnchantSceneControlActor_SetDrawScaleByTag");
static_assert(sizeof(TLEnchantSceneControlActor_SetDrawScaleByTag) == 0x000014, "Wrong size on TLEnchantSceneControlActor_SetDrawScaleByTag");
static_assert(offsetof(TLEnchantSceneControlActor_SetDrawScaleByTag, InTag) == 0x000000, "Member 'TLEnchantSceneControlActor_SetDrawScaleByTag::InTag' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_SetDrawScaleByTag, InScale) == 0x000008, "Member 'TLEnchantSceneControlActor_SetDrawScaleByTag::InScale' has a wrong offset!");

// Function TLClient.TLEnchantSceneControlActor.SetEnchantTargetBeEmpty
// 0x0001 (0x0001 - 0x0000)
struct TLEnchantSceneControlActor_SetEnchantTargetBeEmpty final
{
public:
	EEnchantCategory                              InEnchantCategory;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEnchantSceneControlActor_SetEnchantTargetBeEmpty) == 0x000001, "Wrong alignment on TLEnchantSceneControlActor_SetEnchantTargetBeEmpty");
static_assert(sizeof(TLEnchantSceneControlActor_SetEnchantTargetBeEmpty) == 0x000001, "Wrong size on TLEnchantSceneControlActor_SetEnchantTargetBeEmpty");
static_assert(offsetof(TLEnchantSceneControlActor_SetEnchantTargetBeEmpty, InEnchantCategory) == 0x000000, "Member 'TLEnchantSceneControlActor_SetEnchantTargetBeEmpty::InEnchantCategory' has a wrong offset!");

// Function TLClient.TLEnchantSceneControlActor.SetEnchantTargetItem
// 0x0003 (0x0003 - 0x0000)
struct TLEnchantSceneControlActor_SetEnchantTargetItem final
{
public:
	EEnchantCategory                              InEnchantCategory;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 InItemCategory;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InWearing;                                         // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEnchantSceneControlActor_SetEnchantTargetItem) == 0x000001, "Wrong alignment on TLEnchantSceneControlActor_SetEnchantTargetItem");
static_assert(sizeof(TLEnchantSceneControlActor_SetEnchantTargetItem) == 0x000003, "Wrong size on TLEnchantSceneControlActor_SetEnchantTargetItem");
static_assert(offsetof(TLEnchantSceneControlActor_SetEnchantTargetItem, InEnchantCategory) == 0x000000, "Member 'TLEnchantSceneControlActor_SetEnchantTargetItem::InEnchantCategory' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_SetEnchantTargetItem, InItemCategory) == 0x000001, "Member 'TLEnchantSceneControlActor_SetEnchantTargetItem::InItemCategory' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_SetEnchantTargetItem, InWearing) == 0x000002, "Member 'TLEnchantSceneControlActor_SetEnchantTargetItem::InWearing' has a wrong offset!");

// Function TLClient.TLEnchantSceneControlActor.SetHiveTransformInfoByCategory
// 0x000C (0x000C - 0x0000)
struct TLEnchantSceneControlActor_SetHiveTransformInfoByCategory final
{
public:
	class FName                                   InTag;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 InCategory;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLEnchantSceneControlActor_SetHiveTransformInfoByCategory) == 0x000004, "Wrong alignment on TLEnchantSceneControlActor_SetHiveTransformInfoByCategory");
static_assert(sizeof(TLEnchantSceneControlActor_SetHiveTransformInfoByCategory) == 0x00000C, "Wrong size on TLEnchantSceneControlActor_SetHiveTransformInfoByCategory");
static_assert(offsetof(TLEnchantSceneControlActor_SetHiveTransformInfoByCategory, InTag) == 0x000000, "Member 'TLEnchantSceneControlActor_SetHiveTransformInfoByCategory::InTag' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_SetHiveTransformInfoByCategory, InCategory) == 0x000008, "Member 'TLEnchantSceneControlActor_SetHiveTransformInfoByCategory::InCategory' has a wrong offset!");

// Function TLClient.TLEnchantSceneControlActor.SetPositionByTag
// 0x0014 (0x0014 - 0x0000)
struct TLEnchantSceneControlActor_SetPositionByTag final
{
public:
	class FName                                   InTag;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InPositionOffset;                                  // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEnchantSceneControlActor_SetPositionByTag) == 0x000004, "Wrong alignment on TLEnchantSceneControlActor_SetPositionByTag");
static_assert(sizeof(TLEnchantSceneControlActor_SetPositionByTag) == 0x000014, "Wrong size on TLEnchantSceneControlActor_SetPositionByTag");
static_assert(offsetof(TLEnchantSceneControlActor_SetPositionByTag, InTag) == 0x000000, "Member 'TLEnchantSceneControlActor_SetPositionByTag::InTag' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_SetPositionByTag, InPositionOffset) == 0x000008, "Member 'TLEnchantSceneControlActor_SetPositionByTag::InPositionOffset' has a wrong offset!");

// Function TLClient.TLEnchantSceneControlActor.SetRotationByTag
// 0x0014 (0x0014 - 0x0000)
struct TLEnchantSceneControlActor_SetRotationByTag final
{
public:
	class FName                                   InTag;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEnchantSceneControlActor_SetRotationByTag) == 0x000004, "Wrong alignment on TLEnchantSceneControlActor_SetRotationByTag");
static_assert(sizeof(TLEnchantSceneControlActor_SetRotationByTag) == 0x000014, "Wrong size on TLEnchantSceneControlActor_SetRotationByTag");
static_assert(offsetof(TLEnchantSceneControlActor_SetRotationByTag, InTag) == 0x000000, "Member 'TLEnchantSceneControlActor_SetRotationByTag::InTag' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_SetRotationByTag, InRotation) == 0x000008, "Member 'TLEnchantSceneControlActor_SetRotationByTag::InRotation' has a wrong offset!");

// Function TLClient.TLEnchantSceneControlActor.ShowScroll
// 0x0001 (0x0001 - 0x0000)
struct TLEnchantSceneControlActor_ShowScroll final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEnchantSceneControlActor_ShowScroll) == 0x000001, "Wrong alignment on TLEnchantSceneControlActor_ShowScroll");
static_assert(sizeof(TLEnchantSceneControlActor_ShowScroll) == 0x000001, "Wrong size on TLEnchantSceneControlActor_ShowScroll");
static_assert(offsetof(TLEnchantSceneControlActor_ShowScroll, bShow) == 0x000000, "Member 'TLEnchantSceneControlActor_ShowScroll::bShow' has a wrong offset!");

// Function TLClient.TLEnchantSceneControlActor.StartEnchantEffect
// 0x0005 (0x0005 - 0x0000)
struct TLEnchantSceneControlActor_StartEnchantEffect final
{
public:
	EEnchantResultType                            InResultType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEnchantCategory                              InEnchantCategory;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 ItemCategory;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEquipCategory                                EquipCategory;                                     // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTwoSlotsWeapon;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEnchantSceneControlActor_StartEnchantEffect) == 0x000001, "Wrong alignment on TLEnchantSceneControlActor_StartEnchantEffect");
static_assert(sizeof(TLEnchantSceneControlActor_StartEnchantEffect) == 0x000005, "Wrong size on TLEnchantSceneControlActor_StartEnchantEffect");
static_assert(offsetof(TLEnchantSceneControlActor_StartEnchantEffect, InResultType) == 0x000000, "Member 'TLEnchantSceneControlActor_StartEnchantEffect::InResultType' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_StartEnchantEffect, InEnchantCategory) == 0x000001, "Member 'TLEnchantSceneControlActor_StartEnchantEffect::InEnchantCategory' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_StartEnchantEffect, ItemCategory) == 0x000002, "Member 'TLEnchantSceneControlActor_StartEnchantEffect::ItemCategory' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_StartEnchantEffect, EquipCategory) == 0x000003, "Member 'TLEnchantSceneControlActor_StartEnchantEffect::EquipCategory' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_StartEnchantEffect, bTwoSlotsWeapon) == 0x000004, "Member 'TLEnchantSceneControlActor_StartEnchantEffect::bTwoSlotsWeapon' has a wrong offset!");

// Function TLClient.TLEnchantSceneControlActor.StartEquipEnchantEffect
// 0x0005 (0x0005 - 0x0000)
struct TLEnchantSceneControlActor_StartEquipEnchantEffect final
{
public:
	EEnchantResultType                            InResultType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEnchantCategory                              InEnchantCategory;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 ItemCategory;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEquipCategory                                EquipCategory;                                     // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTwoSlotsWeapon;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEnchantSceneControlActor_StartEquipEnchantEffect) == 0x000001, "Wrong alignment on TLEnchantSceneControlActor_StartEquipEnchantEffect");
static_assert(sizeof(TLEnchantSceneControlActor_StartEquipEnchantEffect) == 0x000005, "Wrong size on TLEnchantSceneControlActor_StartEquipEnchantEffect");
static_assert(offsetof(TLEnchantSceneControlActor_StartEquipEnchantEffect, InResultType) == 0x000000, "Member 'TLEnchantSceneControlActor_StartEquipEnchantEffect::InResultType' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_StartEquipEnchantEffect, InEnchantCategory) == 0x000001, "Member 'TLEnchantSceneControlActor_StartEquipEnchantEffect::InEnchantCategory' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_StartEquipEnchantEffect, ItemCategory) == 0x000002, "Member 'TLEnchantSceneControlActor_StartEquipEnchantEffect::ItemCategory' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_StartEquipEnchantEffect, EquipCategory) == 0x000003, "Member 'TLEnchantSceneControlActor_StartEquipEnchantEffect::EquipCategory' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_StartEquipEnchantEffect, bTwoSlotsWeapon) == 0x000004, "Member 'TLEnchantSceneControlActor_StartEquipEnchantEffect::bTwoSlotsWeapon' has a wrong offset!");

// Function TLClient.TLEnchantSceneControlActor.StartNonEquipEnchantEffect
// 0x0003 (0x0003 - 0x0000)
struct TLEnchantSceneControlActor_StartNonEquipEnchantEffect final
{
public:
	EEnchantResultType                            InResultType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEnchantCategory                              InEnchantCategory;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 ItemCategory;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLEnchantSceneControlActor_StartNonEquipEnchantEffect) == 0x000001, "Wrong alignment on TLEnchantSceneControlActor_StartNonEquipEnchantEffect");
static_assert(sizeof(TLEnchantSceneControlActor_StartNonEquipEnchantEffect) == 0x000003, "Wrong size on TLEnchantSceneControlActor_StartNonEquipEnchantEffect");
static_assert(offsetof(TLEnchantSceneControlActor_StartNonEquipEnchantEffect, InResultType) == 0x000000, "Member 'TLEnchantSceneControlActor_StartNonEquipEnchantEffect::InResultType' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_StartNonEquipEnchantEffect, InEnchantCategory) == 0x000001, "Member 'TLEnchantSceneControlActor_StartNonEquipEnchantEffect::InEnchantCategory' has a wrong offset!");
static_assert(offsetof(TLEnchantSceneControlActor_StartNonEquipEnchantEffect, ItemCategory) == 0x000002, "Member 'TLEnchantSceneControlActor_StartNonEquipEnchantEffect::ItemCategory' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconGuildFlag.Button_OnClicked
// 0x0070 (0x0070 - 0x0000)
struct TLUserWidgetMapIconGuildFlag_Button_OnClicked final
{
public:
	struct FPointerEvent                          InMouseEvent;                                      // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconGuildFlag_Button_OnClicked) == 0x000008, "Wrong alignment on TLUserWidgetMapIconGuildFlag_Button_OnClicked");
static_assert(sizeof(TLUserWidgetMapIconGuildFlag_Button_OnClicked) == 0x000070, "Wrong size on TLUserWidgetMapIconGuildFlag_Button_OnClicked");
static_assert(offsetof(TLUserWidgetMapIconGuildFlag_Button_OnClicked, InMouseEvent) == 0x000000, "Member 'TLUserWidgetMapIconGuildFlag_Button_OnClicked::InMouseEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconGuildFlag.OnHoverButton
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconGuildFlag_OnHoverButton final
{
public:
	bool                                          Hover;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconGuildFlag_OnHoverButton) == 0x000001, "Wrong alignment on TLUserWidgetMapIconGuildFlag_OnHoverButton");
static_assert(sizeof(TLUserWidgetMapIconGuildFlag_OnHoverButton) == 0x000001, "Wrong size on TLUserWidgetMapIconGuildFlag_OnHoverButton");
static_assert(offsetof(TLUserWidgetMapIconGuildFlag_OnHoverButton, Hover) == 0x000000, "Member 'TLUserWidgetMapIconGuildFlag_OnHoverButton::Hover' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconGuildFlag.SetPossessGuildFlag
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetMapIconGuildFlag_SetPossessGuildFlag final
{
public:
	uint64                                        InGuildGuid;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconGuildFlag_SetPossessGuildFlag) == 0x000008, "Wrong alignment on TLUserWidgetMapIconGuildFlag_SetPossessGuildFlag");
static_assert(sizeof(TLUserWidgetMapIconGuildFlag_SetPossessGuildFlag) == 0x000008, "Wrong size on TLUserWidgetMapIconGuildFlag_SetPossessGuildFlag");
static_assert(offsetof(TLUserWidgetMapIconGuildFlag_SetPossessGuildFlag, InGuildGuid) == 0x000000, "Member 'TLUserWidgetMapIconGuildFlag_SetPossessGuildFlag::InGuildGuid' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconGuildFlag.UpdateStatus
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetMapIconGuildFlag_UpdateStatus final
{
public:
	bool                                          InPossess;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InMyGuild;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconGuildFlag_UpdateStatus) == 0x000001, "Wrong alignment on TLUserWidgetMapIconGuildFlag_UpdateStatus");
static_assert(sizeof(TLUserWidgetMapIconGuildFlag_UpdateStatus) == 0x000002, "Wrong size on TLUserWidgetMapIconGuildFlag_UpdateStatus");
static_assert(offsetof(TLUserWidgetMapIconGuildFlag_UpdateStatus, InPossess) == 0x000000, "Member 'TLUserWidgetMapIconGuildFlag_UpdateStatus::InPossess' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMapIconGuildFlag_UpdateStatus, InMyGuild) == 0x000001, "Member 'TLUserWidgetMapIconGuildFlag_UpdateStatus::InMyGuild' has a wrong offset!");

// Function TLClient.TLUserWidgetContractNpc.HandleRefreshContractList
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetContractNpc_HandleRefreshContractList final
{
public:
	EContractRefreshListReason                    InContractRefreshListReason;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        InContractGuid;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractNpc_HandleRefreshContractList) == 0x000008, "Wrong alignment on TLUserWidgetContractNpc_HandleRefreshContractList");
static_assert(sizeof(TLUserWidgetContractNpc_HandleRefreshContractList) == 0x000010, "Wrong size on TLUserWidgetContractNpc_HandleRefreshContractList");
static_assert(offsetof(TLUserWidgetContractNpc_HandleRefreshContractList, InContractRefreshListReason) == 0x000000, "Member 'TLUserWidgetContractNpc_HandleRefreshContractList::InContractRefreshListReason' has a wrong offset!");
static_assert(offsetof(TLUserWidgetContractNpc_HandleRefreshContractList, InContractGuid) == 0x000008, "Member 'TLUserWidgetContractNpc_HandleRefreshContractList::InContractGuid' has a wrong offset!");

// Function TLClient.TLUserWidgetContractNpc.HandleUpdateContractState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContractNpc_HandleUpdateContractState final
{
public:
	EContractState                                InContractState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractNpc_HandleUpdateContractState) == 0x000001, "Wrong alignment on TLUserWidgetContractNpc_HandleUpdateContractState");
static_assert(sizeof(TLUserWidgetContractNpc_HandleUpdateContractState) == 0x000001, "Wrong size on TLUserWidgetContractNpc_HandleUpdateContractState");
static_assert(offsetof(TLUserWidgetContractNpc_HandleUpdateContractState, InContractState) == 0x000000, "Member 'TLUserWidgetContractNpc_HandleUpdateContractState::InContractState' has a wrong offset!");

// Function TLClient.TLUserWidgetContractNpc.SetSelectedContractInfo
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetContractNpc_SetSelectedContractInfo final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractNpc_SetSelectedContractInfo) == 0x000008, "Wrong alignment on TLUserWidgetContractNpc_SetSelectedContractInfo");
static_assert(sizeof(TLUserWidgetContractNpc_SetSelectedContractInfo) == 0x000008, "Wrong size on TLUserWidgetContractNpc_SetSelectedContractInfo");
static_assert(offsetof(TLUserWidgetContractNpc_SetSelectedContractInfo, InObject) == 0x000000, "Member 'TLUserWidgetContractNpc_SetSelectedContractInfo::InObject' has a wrong offset!");

// Function TLClient.TLUserWidgetContractNpc.UpdateRefreshContractList
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContractNpc_UpdateRefreshContractList final
{
public:
	EContractRefreshListReason                    InContractRefreshListReason;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractNpc_UpdateRefreshContractList) == 0x000001, "Wrong alignment on TLUserWidgetContractNpc_UpdateRefreshContractList");
static_assert(sizeof(TLUserWidgetContractNpc_UpdateRefreshContractList) == 0x000001, "Wrong size on TLUserWidgetContractNpc_UpdateRefreshContractList");
static_assert(offsetof(TLUserWidgetContractNpc_UpdateRefreshContractList, InContractRefreshListReason) == 0x000000, "Member 'TLUserWidgetContractNpc_UpdateRefreshContractList::InContractRefreshListReason' has a wrong offset!");

// Function TLClient.ItemUtilities.GetItemGradeImage
// 0x0028 (0x0028 - 0x0000)
struct ItemUtilities_GetItemGradeImage final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemGrade                                    InItemGrade;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemUtilities_GetItemGradeImage) == 0x000008, "Wrong alignment on ItemUtilities_GetItemGradeImage");
static_assert(sizeof(ItemUtilities_GetItemGradeImage) == 0x000028, "Wrong size on ItemUtilities_GetItemGradeImage");
static_assert(offsetof(ItemUtilities_GetItemGradeImage, InWorldContextObject) == 0x000000, "Member 'ItemUtilities_GetItemGradeImage::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(ItemUtilities_GetItemGradeImage, InItemGrade) == 0x000008, "Member 'ItemUtilities_GetItemGradeImage::InItemGrade' has a wrong offset!");
static_assert(offsetof(ItemUtilities_GetItemGradeImage, ReturnValue) == 0x000010, "Member 'ItemUtilities_GetItemGradeImage::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetActionKeyGuideItemBase.OnSet
// 0x0060 (0x0060 - 0x0000)
struct TLUserWidgetActionKeyGuideItemBase_OnSet final
{
public:
	struct FTLActionKeyGuideInfo                  InInfo;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetActionKeyGuideItemBase_OnSet) == 0x000008, "Wrong alignment on TLUserWidgetActionKeyGuideItemBase_OnSet");
static_assert(sizeof(TLUserWidgetActionKeyGuideItemBase_OnSet) == 0x000060, "Wrong size on TLUserWidgetActionKeyGuideItemBase_OnSet");
static_assert(offsetof(TLUserWidgetActionKeyGuideItemBase_OnSet, InInfo) == 0x000000, "Member 'TLUserWidgetActionKeyGuideItemBase_OnSet::InInfo' has a wrong offset!");

// Function TLClient.TLUserWidgetActionKeyGuideItemBase.SetInfo
// 0x0060 (0x0060 - 0x0000)
struct TLUserWidgetActionKeyGuideItemBase_SetInfo final
{
public:
	struct FTLActionKeyGuideInfo                  InInfo;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetActionKeyGuideItemBase_SetInfo) == 0x000008, "Wrong alignment on TLUserWidgetActionKeyGuideItemBase_SetInfo");
static_assert(sizeof(TLUserWidgetActionKeyGuideItemBase_SetInfo) == 0x000060, "Wrong size on TLUserWidgetActionKeyGuideItemBase_SetInfo");
static_assert(offsetof(TLUserWidgetActionKeyGuideItemBase_SetInfo, InInfo) == 0x000000, "Member 'TLUserWidgetActionKeyGuideItemBase_SetInfo::InInfo' has a wrong offset!");

// Function TLClient.TLMagicDollGachaSceneControlActor.EnableBoxCollision
// 0x0001 (0x0001 - 0x0000)
struct TLMagicDollGachaSceneControlActor_EnableBoxCollision final
{
public:
	bool                                          bInEnableBoxCollision;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMagicDollGachaSceneControlActor_EnableBoxCollision) == 0x000001, "Wrong alignment on TLMagicDollGachaSceneControlActor_EnableBoxCollision");
static_assert(sizeof(TLMagicDollGachaSceneControlActor_EnableBoxCollision) == 0x000001, "Wrong size on TLMagicDollGachaSceneControlActor_EnableBoxCollision");
static_assert(offsetof(TLMagicDollGachaSceneControlActor_EnableBoxCollision, bInEnableBoxCollision) == 0x000000, "Member 'TLMagicDollGachaSceneControlActor_EnableBoxCollision::bInEnableBoxCollision' has a wrong offset!");

// Function TLClient.TLMagicDollGachaSceneControlActor.OnCreatedGachaUI
// 0x0008 (0x0008 - 0x0000)
struct TLMagicDollGachaSceneControlActor_OnCreatedGachaUI final
{
public:
	class UTLUserWidgetMagicDollGacha*            InGachaWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMagicDollGachaSceneControlActor_OnCreatedGachaUI) == 0x000008, "Wrong alignment on TLMagicDollGachaSceneControlActor_OnCreatedGachaUI");
static_assert(sizeof(TLMagicDollGachaSceneControlActor_OnCreatedGachaUI) == 0x000008, "Wrong size on TLMagicDollGachaSceneControlActor_OnCreatedGachaUI");
static_assert(offsetof(TLMagicDollGachaSceneControlActor_OnCreatedGachaUI, InGachaWidget) == 0x000000, "Member 'TLMagicDollGachaSceneControlActor_OnCreatedGachaUI::InGachaWidget' has a wrong offset!");

// Function TLClient.TLMagicDollGachaSceneControlActor.OnRandomBoxClicked
// 0x0008 (0x0008 - 0x0000)
struct TLMagicDollGachaSceneControlActor_OnRandomBoxClicked final
{
public:
	class FName                                   InTag;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMagicDollGachaSceneControlActor_OnRandomBoxClicked) == 0x000004, "Wrong alignment on TLMagicDollGachaSceneControlActor_OnRandomBoxClicked");
static_assert(sizeof(TLMagicDollGachaSceneControlActor_OnRandomBoxClicked) == 0x000008, "Wrong size on TLMagicDollGachaSceneControlActor_OnRandomBoxClicked");
static_assert(offsetof(TLMagicDollGachaSceneControlActor_OnRandomBoxClicked, InTag) == 0x000000, "Member 'TLMagicDollGachaSceneControlActor_OnRandomBoxClicked::InTag' has a wrong offset!");

// Function TLClient.TLUserWidgetInvenSlot.IsTwoSlotsAccessoryEquipTo01ByDefault
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInvenSlot_IsTwoSlotsAccessoryEquipTo01ByDefault final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInvenSlot_IsTwoSlotsAccessoryEquipTo01ByDefault) == 0x000001, "Wrong alignment on TLUserWidgetInvenSlot_IsTwoSlotsAccessoryEquipTo01ByDefault");
static_assert(sizeof(TLUserWidgetInvenSlot_IsTwoSlotsAccessoryEquipTo01ByDefault) == 0x000001, "Wrong size on TLUserWidgetInvenSlot_IsTwoSlotsAccessoryEquipTo01ByDefault");
static_assert(offsetof(TLUserWidgetInvenSlot_IsTwoSlotsAccessoryEquipTo01ByDefault, ReturnValue) == 0x000000, "Member 'TLUserWidgetInvenSlot_IsTwoSlotsAccessoryEquipTo01ByDefault::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetInvenSlot.IsTwoSlotsWeaponEquipToMainHandByDefault
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInvenSlot_IsTwoSlotsWeaponEquipToMainHandByDefault final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInvenSlot_IsTwoSlotsWeaponEquipToMainHandByDefault) == 0x000001, "Wrong alignment on TLUserWidgetInvenSlot_IsTwoSlotsWeaponEquipToMainHandByDefault");
static_assert(sizeof(TLUserWidgetInvenSlot_IsTwoSlotsWeaponEquipToMainHandByDefault) == 0x000001, "Wrong size on TLUserWidgetInvenSlot_IsTwoSlotsWeaponEquipToMainHandByDefault");
static_assert(offsetof(TLUserWidgetInvenSlot_IsTwoSlotsWeaponEquipToMainHandByDefault, ReturnValue) == 0x000000, "Member 'TLUserWidgetInvenSlot_IsTwoSlotsWeaponEquipToMainHandByDefault::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetInvenSlot.OnFixedTooltip
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInvenSlot_OnFixedTooltip final
{
public:
	bool                                          InIsFixed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInvenSlot_OnFixedTooltip) == 0x000001, "Wrong alignment on TLUserWidgetInvenSlot_OnFixedTooltip");
static_assert(sizeof(TLUserWidgetInvenSlot_OnFixedTooltip) == 0x000001, "Wrong size on TLUserWidgetInvenSlot_OnFixedTooltip");
static_assert(offsetof(TLUserWidgetInvenSlot_OnFixedTooltip, InIsFixed) == 0x000000, "Member 'TLUserWidgetInvenSlot_OnFixedTooltip::InIsFixed' has a wrong offset!");

// Function TLClient.TLUserWidgetInvenSlot.PlayCheckAnim
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInvenSlot_PlayCheckAnim final
{
public:
	bool                                          bCheck;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInvenSlot_PlayCheckAnim) == 0x000001, "Wrong alignment on TLUserWidgetInvenSlot_PlayCheckAnim");
static_assert(sizeof(TLUserWidgetInvenSlot_PlayCheckAnim) == 0x000001, "Wrong size on TLUserWidgetInvenSlot_PlayCheckAnim");
static_assert(offsetof(TLUserWidgetInvenSlot_PlayCheckAnim, bCheck) == 0x000000, "Member 'TLUserWidgetInvenSlot_PlayCheckAnim::bCheck' has a wrong offset!");

// Function TLClient.TLUserWidgetInvenSlot.PlayHighlightAnim
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInvenSlot_PlayHighlightAnim final
{
public:
	bool                                          bHighlight;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInvenSlot_PlayHighlightAnim) == 0x000001, "Wrong alignment on TLUserWidgetInvenSlot_PlayHighlightAnim");
static_assert(sizeof(TLUserWidgetInvenSlot_PlayHighlightAnim) == 0x000001, "Wrong size on TLUserWidgetInvenSlot_PlayHighlightAnim");
static_assert(offsetof(TLUserWidgetInvenSlot_PlayHighlightAnim, bHighlight) == 0x000000, "Member 'TLUserWidgetInvenSlot_PlayHighlightAnim::bHighlight' has a wrong offset!");

// Function TLClient.TLUserWidgetInvenSlot.PlayUseItemAnim
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInvenSlot_PlayUseItemAnim final
{
public:
	EItemCategory                                 InItemCategory;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInvenSlot_PlayUseItemAnim) == 0x000001, "Wrong alignment on TLUserWidgetInvenSlot_PlayUseItemAnim");
static_assert(sizeof(TLUserWidgetInvenSlot_PlayUseItemAnim) == 0x000001, "Wrong size on TLUserWidgetInvenSlot_PlayUseItemAnim");
static_assert(offsetof(TLUserWidgetInvenSlot_PlayUseItemAnim, InItemCategory) == 0x000000, "Member 'TLUserWidgetInvenSlot_PlayUseItemAnim::InItemCategory' has a wrong offset!");

// Function TLClient.TLUserWidgetInvenSlot.UpdateSlotChanged
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInvenSlot_UpdateSlotChanged final
{
public:
	bool                                          bBigSlotMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInvenSlot_UpdateSlotChanged) == 0x000001, "Wrong alignment on TLUserWidgetInvenSlot_UpdateSlotChanged");
static_assert(sizeof(TLUserWidgetInvenSlot_UpdateSlotChanged) == 0x000001, "Wrong size on TLUserWidgetInvenSlot_UpdateSlotChanged");
static_assert(offsetof(TLUserWidgetInvenSlot_UpdateSlotChanged, bBigSlotMode) == 0x000000, "Member 'TLUserWidgetInvenSlot_UpdateSlotChanged::bBigSlotMode' has a wrong offset!");

// Function TLClient.TLUserWidgetInvenSlot.IsAutoUseOn
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInvenSlot_IsAutoUseOn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInvenSlot_IsAutoUseOn) == 0x000001, "Wrong alignment on TLUserWidgetInvenSlot_IsAutoUseOn");
static_assert(sizeof(TLUserWidgetInvenSlot_IsAutoUseOn) == 0x000001, "Wrong size on TLUserWidgetInvenSlot_IsAutoUseOn");
static_assert(offsetof(TLUserWidgetInvenSlot_IsAutoUseOn, ReturnValue) == 0x000000, "Member 'TLUserWidgetInvenSlot_IsAutoUseOn::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetInvenSlot.IsEquippedFirstPrest
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInvenSlot_IsEquippedFirstPrest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInvenSlot_IsEquippedFirstPrest) == 0x000001, "Wrong alignment on TLUserWidgetInvenSlot_IsEquippedFirstPrest");
static_assert(sizeof(TLUserWidgetInvenSlot_IsEquippedFirstPrest) == 0x000001, "Wrong size on TLUserWidgetInvenSlot_IsEquippedFirstPrest");
static_assert(offsetof(TLUserWidgetInvenSlot_IsEquippedFirstPrest, ReturnValue) == 0x000000, "Member 'TLUserWidgetInvenSlot_IsEquippedFirstPrest::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetInvenSlot.IsEquippedSecondPrest
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInvenSlot_IsEquippedSecondPrest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInvenSlot_IsEquippedSecondPrest) == 0x000001, "Wrong alignment on TLUserWidgetInvenSlot_IsEquippedSecondPrest");
static_assert(sizeof(TLUserWidgetInvenSlot_IsEquippedSecondPrest) == 0x000001, "Wrong size on TLUserWidgetInvenSlot_IsEquippedSecondPrest");
static_assert(offsetof(TLUserWidgetInvenSlot_IsEquippedSecondPrest, ReturnValue) == 0x000000, "Member 'TLUserWidgetInvenSlot_IsEquippedSecondPrest::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetInvenSlot.IsMaxLevelSkillBook
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInvenSlot_IsMaxLevelSkillBook final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInvenSlot_IsMaxLevelSkillBook) == 0x000001, "Wrong alignment on TLUserWidgetInvenSlot_IsMaxLevelSkillBook");
static_assert(sizeof(TLUserWidgetInvenSlot_IsMaxLevelSkillBook) == 0x000001, "Wrong size on TLUserWidgetInvenSlot_IsMaxLevelSkillBook");
static_assert(offsetof(TLUserWidgetInvenSlot_IsMaxLevelSkillBook, ReturnValue) == 0x000000, "Member 'TLUserWidgetInvenSlot_IsMaxLevelSkillBook::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetInvenSlot.IsWeaponSwapOpened
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInvenSlot_IsWeaponSwapOpened final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInvenSlot_IsWeaponSwapOpened) == 0x000001, "Wrong alignment on TLUserWidgetInvenSlot_IsWeaponSwapOpened");
static_assert(sizeof(TLUserWidgetInvenSlot_IsWeaponSwapOpened) == 0x000001, "Wrong size on TLUserWidgetInvenSlot_IsWeaponSwapOpened");
static_assert(offsetof(TLUserWidgetInvenSlot_IsWeaponSwapOpened, ReturnValue) == 0x000000, "Member 'TLUserWidgetInvenSlot_IsWeaponSwapOpened::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetFacilityNpcSpeak.OnNpcSpeak
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetFacilityNpcSpeak_OnNpcSpeak final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EChatBalloonType                              InChatBalloonType;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetFacilityNpcSpeak_OnNpcSpeak) == 0x000008, "Wrong alignment on TLUserWidgetFacilityNpcSpeak_OnNpcSpeak");
static_assert(sizeof(TLUserWidgetFacilityNpcSpeak_OnNpcSpeak) == 0x000020, "Wrong size on TLUserWidgetFacilityNpcSpeak_OnNpcSpeak");
static_assert(offsetof(TLUserWidgetFacilityNpcSpeak_OnNpcSpeak, InText) == 0x000000, "Member 'TLUserWidgetFacilityNpcSpeak_OnNpcSpeak::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetFacilityNpcSpeak_OnNpcSpeak, InChatBalloonType) == 0x000018, "Member 'TLUserWidgetFacilityNpcSpeak_OnNpcSpeak::InChatBalloonType' has a wrong offset!");

// Function TLClient.TLUserWidgetFacilityNpcSpeak.OnUpdateNpcName
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetFacilityNpcSpeak_OnUpdateNpcName final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetFacilityNpcSpeak_OnUpdateNpcName) == 0x000008, "Wrong alignment on TLUserWidgetFacilityNpcSpeak_OnUpdateNpcName");
static_assert(sizeof(TLUserWidgetFacilityNpcSpeak_OnUpdateNpcName) == 0x000018, "Wrong size on TLUserWidgetFacilityNpcSpeak_OnUpdateNpcName");
static_assert(offsetof(TLUserWidgetFacilityNpcSpeak_OnUpdateNpcName, InText) == 0x000000, "Member 'TLUserWidgetFacilityNpcSpeak_OnUpdateNpcName::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantInfoStat.OnEnchantMethodChange
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantInfoStat_OnEnchantMethodChange final
{
public:
	EEnchantMethod                                InEnchantMethod;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantInfoStat_OnEnchantMethodChange) == 0x000001, "Wrong alignment on TLUserWidgetEnchantInfoStat_OnEnchantMethodChange");
static_assert(sizeof(TLUserWidgetEnchantInfoStat_OnEnchantMethodChange) == 0x000001, "Wrong size on TLUserWidgetEnchantInfoStat_OnEnchantMethodChange");
static_assert(offsetof(TLUserWidgetEnchantInfoStat_OnEnchantMethodChange, InEnchantMethod) == 0x000000, "Member 'TLUserWidgetEnchantInfoStat_OnEnchantMethodChange::InEnchantMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantInfoStat.OnInfoFormChange
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantInfoStat_OnInfoFormChange final
{
public:
	bool                                          bComparison;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantInfoStat_OnInfoFormChange) == 0x000001, "Wrong alignment on TLUserWidgetEnchantInfoStat_OnInfoFormChange");
static_assert(sizeof(TLUserWidgetEnchantInfoStat_OnInfoFormChange) == 0x000001, "Wrong size on TLUserWidgetEnchantInfoStat_OnInfoFormChange");
static_assert(offsetof(TLUserWidgetEnchantInfoStat_OnInfoFormChange, bComparison) == 0x000000, "Member 'TLUserWidgetEnchantInfoStat_OnInfoFormChange::bComparison' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantInfoStat.OnShowOnlyDefaultStat
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantInfoStat_OnShowOnlyDefaultStat final
{
public:
	bool                                          bInShowOnlyDefaultStat;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantInfoStat_OnShowOnlyDefaultStat) == 0x000001, "Wrong alignment on TLUserWidgetEnchantInfoStat_OnShowOnlyDefaultStat");
static_assert(sizeof(TLUserWidgetEnchantInfoStat_OnShowOnlyDefaultStat) == 0x000001, "Wrong size on TLUserWidgetEnchantInfoStat_OnShowOnlyDefaultStat");
static_assert(offsetof(TLUserWidgetEnchantInfoStat_OnShowOnlyDefaultStat, bInShowOnlyDefaultStat) == 0x000000, "Member 'TLUserWidgetEnchantInfoStat_OnShowOnlyDefaultStat::bInShowOnlyDefaultStat' has a wrong offset!");

// Function TLClient.TLUserWidgetShopBuyListBase.GetSlotByIdx
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetShopBuyListBase_GetSlotByIdx final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTLUserWidgetShopSlot*                  ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetShopBuyListBase_GetSlotByIdx) == 0x000008, "Wrong alignment on TLUserWidgetShopBuyListBase_GetSlotByIdx");
static_assert(sizeof(TLUserWidgetShopBuyListBase_GetSlotByIdx) == 0x000010, "Wrong size on TLUserWidgetShopBuyListBase_GetSlotByIdx");
static_assert(offsetof(TLUserWidgetShopBuyListBase_GetSlotByIdx, Idx) == 0x000000, "Member 'TLUserWidgetShopBuyListBase_GetSlotByIdx::Idx' has a wrong offset!");
static_assert(offsetof(TLUserWidgetShopBuyListBase_GetSlotByIdx, ReturnValue) == 0x000008, "Member 'TLUserWidgetShopBuyListBase_GetSlotByIdx::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyListForWindow.OnUpdatePartyState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyListForWindow_OnUpdatePartyState final
{
public:
	ETLPartyState                                 InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyListForWindow_OnUpdatePartyState) == 0x000001, "Wrong alignment on TLUserWidgetPartyListForWindow_OnUpdatePartyState");
static_assert(sizeof(TLUserWidgetPartyListForWindow_OnUpdatePartyState) == 0x000001, "Wrong size on TLUserWidgetPartyListForWindow_OnUpdatePartyState");
static_assert(offsetof(TLUserWidgetPartyListForWindow_OnUpdatePartyState, InState) == 0x000000, "Member 'TLUserWidgetPartyListForWindow_OnUpdatePartyState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyListForWindow.SetActiveMatchingGuideText
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyListForWindow_SetActiveMatchingGuideText final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyListForWindow_SetActiveMatchingGuideText) == 0x000001, "Wrong alignment on TLUserWidgetPartyListForWindow_SetActiveMatchingGuideText");
static_assert(sizeof(TLUserWidgetPartyListForWindow_SetActiveMatchingGuideText) == 0x000001, "Wrong size on TLUserWidgetPartyListForWindow_SetActiveMatchingGuideText");
static_assert(offsetof(TLUserWidgetPartyListForWindow_SetActiveMatchingGuideText, bActive) == 0x000000, "Member 'TLUserWidgetPartyListForWindow_SetActiveMatchingGuideText::bActive' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyListForWindow.SetActiveMatchingPartyGuide
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyListForWindow_SetActiveMatchingPartyGuide final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyListForWindow_SetActiveMatchingPartyGuide) == 0x000001, "Wrong alignment on TLUserWidgetPartyListForWindow_SetActiveMatchingPartyGuide");
static_assert(sizeof(TLUserWidgetPartyListForWindow_SetActiveMatchingPartyGuide) == 0x000001, "Wrong size on TLUserWidgetPartyListForWindow_SetActiveMatchingPartyGuide");
static_assert(offsetof(TLUserWidgetPartyListForWindow_SetActiveMatchingPartyGuide, bActive) == 0x000000, "Member 'TLUserWidgetPartyListForWindow_SetActiveMatchingPartyGuide::bActive' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyListForWindow.GetPartyMemberCount
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetPartyListForWindow_GetPartyMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyListForWindow_GetPartyMemberCount) == 0x000004, "Wrong alignment on TLUserWidgetPartyListForWindow_GetPartyMemberCount");
static_assert(sizeof(TLUserWidgetPartyListForWindow_GetPartyMemberCount) == 0x000004, "Wrong size on TLUserWidgetPartyListForWindow_GetPartyMemberCount");
static_assert(offsetof(TLUserWidgetPartyListForWindow_GetPartyMemberCount, ReturnValue) == 0x000000, "Member 'TLUserWidgetPartyListForWindow_GetPartyMemberCount::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyListForWindow.IsMatchingParty
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyListForWindow_IsMatchingParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyListForWindow_IsMatchingParty) == 0x000001, "Wrong alignment on TLUserWidgetPartyListForWindow_IsMatchingParty");
static_assert(sizeof(TLUserWidgetPartyListForWindow_IsMatchingParty) == 0x000001, "Wrong size on TLUserWidgetPartyListForWindow_IsMatchingParty");
static_assert(offsetof(TLUserWidgetPartyListForWindow_IsMatchingParty, ReturnValue) == 0x000000, "Member 'TLUserWidgetPartyListForWindow_IsMatchingParty::ReturnValue' has a wrong offset!");

// Function TLClient.TLGachaSceneControlActor.CreateGachaActors
// 0x0008 (0x0008 - 0x0000)
struct TLGachaSceneControlActor_CreateGachaActors final
{
public:
	class FName                                   InGachaActorName;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGachaSceneControlActor_CreateGachaActors) == 0x000004, "Wrong alignment on TLGachaSceneControlActor_CreateGachaActors");
static_assert(sizeof(TLGachaSceneControlActor_CreateGachaActors) == 0x000008, "Wrong size on TLGachaSceneControlActor_CreateGachaActors");
static_assert(offsetof(TLGachaSceneControlActor_CreateGachaActors, InGachaActorName) == 0x000000, "Member 'TLGachaSceneControlActor_CreateGachaActors::InGachaActorName' has a wrong offset!");

// Function TLClient.TLGachaSceneControlActor.EnableBoxCollision
// 0x0001 (0x0001 - 0x0000)
struct TLGachaSceneControlActor_EnableBoxCollision final
{
public:
	bool                                          bInEnableBoxCollision;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGachaSceneControlActor_EnableBoxCollision) == 0x000001, "Wrong alignment on TLGachaSceneControlActor_EnableBoxCollision");
static_assert(sizeof(TLGachaSceneControlActor_EnableBoxCollision) == 0x000001, "Wrong size on TLGachaSceneControlActor_EnableBoxCollision");
static_assert(offsetof(TLGachaSceneControlActor_EnableBoxCollision, bInEnableBoxCollision) == 0x000000, "Member 'TLGachaSceneControlActor_EnableBoxCollision::bInEnableBoxCollision' has a wrong offset!");

// Function TLClient.TLGachaSceneControlActor.OnCreatedGachaUI
// 0x0008 (0x0008 - 0x0000)
struct TLGachaSceneControlActor_OnCreatedGachaUI final
{
public:
	class UTLUserWidgetGacha*                     InGachaWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGachaSceneControlActor_OnCreatedGachaUI) == 0x000008, "Wrong alignment on TLGachaSceneControlActor_OnCreatedGachaUI");
static_assert(sizeof(TLGachaSceneControlActor_OnCreatedGachaUI) == 0x000008, "Wrong size on TLGachaSceneControlActor_OnCreatedGachaUI");
static_assert(offsetof(TLGachaSceneControlActor_OnCreatedGachaUI, InGachaWidget) == 0x000000, "Member 'TLGachaSceneControlActor_OnCreatedGachaUI::InGachaWidget' has a wrong offset!");

// Function TLClient.TLGachaSceneControlActor.OnRandomBoxClicked
// 0x0008 (0x0008 - 0x0000)
struct TLGachaSceneControlActor_OnRandomBoxClicked final
{
public:
	class FName                                   InTag;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGachaSceneControlActor_OnRandomBoxClicked) == 0x000004, "Wrong alignment on TLGachaSceneControlActor_OnRandomBoxClicked");
static_assert(sizeof(TLGachaSceneControlActor_OnRandomBoxClicked) == 0x000008, "Wrong size on TLGachaSceneControlActor_OnRandomBoxClicked");
static_assert(offsetof(TLGachaSceneControlActor_OnRandomBoxClicked, InTag) == 0x000000, "Member 'TLGachaSceneControlActor_OnRandomBoxClicked::InTag' has a wrong offset!");

// Function TLClient.TLGachaSceneControlActor.StartActionTree
// 0x0010 (0x0010 - 0x0000)
struct TLGachaSceneControlActor_StartActionTree final
{
public:
	class FName                                   InActionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTagName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGachaSceneControlActor_StartActionTree) == 0x000004, "Wrong alignment on TLGachaSceneControlActor_StartActionTree");
static_assert(sizeof(TLGachaSceneControlActor_StartActionTree) == 0x000010, "Wrong size on TLGachaSceneControlActor_StartActionTree");
static_assert(offsetof(TLGachaSceneControlActor_StartActionTree, InActionName) == 0x000000, "Member 'TLGachaSceneControlActor_StartActionTree::InActionName' has a wrong offset!");
static_assert(offsetof(TLGachaSceneControlActor_StartActionTree, InTagName) == 0x000008, "Member 'TLGachaSceneControlActor_StartActionTree::InTagName' has a wrong offset!");

// Function TLClient.TLGachaSceneControlActor.StartSequenceStep
// 0x0018 (0x0018 - 0x0000)
struct TLGachaSceneControlActor_StartSequenceStep final
{
public:
	class FName                                   InStepName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLoop;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPauseAtEnd;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGachaSceneControlActor_StartSequenceStep) == 0x000008, "Wrong alignment on TLGachaSceneControlActor_StartSequenceStep");
static_assert(sizeof(TLGachaSceneControlActor_StartSequenceStep) == 0x000018, "Wrong size on TLGachaSceneControlActor_StartSequenceStep");
static_assert(offsetof(TLGachaSceneControlActor_StartSequenceStep, InStepName) == 0x000000, "Member 'TLGachaSceneControlActor_StartSequenceStep::InStepName' has a wrong offset!");
static_assert(offsetof(TLGachaSceneControlActor_StartSequenceStep, bInLoop) == 0x000008, "Member 'TLGachaSceneControlActor_StartSequenceStep::bInLoop' has a wrong offset!");
static_assert(offsetof(TLGachaSceneControlActor_StartSequenceStep, bInPauseAtEnd) == 0x000009, "Member 'TLGachaSceneControlActor_StartSequenceStep::bInPauseAtEnd' has a wrong offset!");
static_assert(offsetof(TLGachaSceneControlActor_StartSequenceStep, ReturnValue) == 0x000010, "Member 'TLGachaSceneControlActor_StartSequenceStep::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillQuickSlot.OnLock
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillQuickSlot_OnLock final
{
public:
	bool                                          ON;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillQuickSlot_OnLock) == 0x000001, "Wrong alignment on TLUserWidgetSkillQuickSlot_OnLock");
static_assert(sizeof(TLUserWidgetSkillQuickSlot_OnLock) == 0x000001, "Wrong size on TLUserWidgetSkillQuickSlot_OnLock");
static_assert(offsetof(TLUserWidgetSkillQuickSlot_OnLock, ON) == 0x000000, "Member 'TLUserWidgetSkillQuickSlot_OnLock::ON' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillQuickSlot.IsKeyPressed
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillQuickSlot_IsKeyPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillQuickSlot_IsKeyPressed) == 0x000001, "Wrong alignment on TLUserWidgetSkillQuickSlot_IsKeyPressed");
static_assert(sizeof(TLUserWidgetSkillQuickSlot_IsKeyPressed) == 0x000001, "Wrong size on TLUserWidgetSkillQuickSlot_IsKeyPressed");
static_assert(offsetof(TLUserWidgetSkillQuickSlot_IsKeyPressed, ReturnValue) == 0x000000, "Member 'TLUserWidgetSkillQuickSlot_IsKeyPressed::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetPrimeSkillSlot.OnMainHandEquipChangeEvent
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetPrimeSkillSlot_OnMainHandEquipChangeEvent final
{
public:
	EItemCategory                                 InItemCategory;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInInit;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPrimeSkillSlot_OnMainHandEquipChangeEvent) == 0x000001, "Wrong alignment on TLUserWidgetPrimeSkillSlot_OnMainHandEquipChangeEvent");
static_assert(sizeof(TLUserWidgetPrimeSkillSlot_OnMainHandEquipChangeEvent) == 0x000002, "Wrong size on TLUserWidgetPrimeSkillSlot_OnMainHandEquipChangeEvent");
static_assert(offsetof(TLUserWidgetPrimeSkillSlot_OnMainHandEquipChangeEvent, InItemCategory) == 0x000000, "Member 'TLUserWidgetPrimeSkillSlot_OnMainHandEquipChangeEvent::InItemCategory' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPrimeSkillSlot_OnMainHandEquipChangeEvent, bIsInInit) == 0x000001, "Member 'TLUserWidgetPrimeSkillSlot_OnMainHandEquipChangeEvent::bIsInInit' has a wrong offset!");

// Function TLClient.TLUserWidgetPolymorphListPanel.HandleSearchTextBoxCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetPolymorphListPanel_HandleSearchTextBoxCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetPolymorphListPanel_HandleSearchTextBoxCommitted) == 0x000008, "Wrong alignment on TLUserWidgetPolymorphListPanel_HandleSearchTextBoxCommitted");
static_assert(sizeof(TLUserWidgetPolymorphListPanel_HandleSearchTextBoxCommitted) == 0x000020, "Wrong size on TLUserWidgetPolymorphListPanel_HandleSearchTextBoxCommitted");
static_assert(offsetof(TLUserWidgetPolymorphListPanel_HandleSearchTextBoxCommitted, InText) == 0x000000, "Member 'TLUserWidgetPolymorphListPanel_HandleSearchTextBoxCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPolymorphListPanel_HandleSearchTextBoxCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetPolymorphListPanel_HandleSearchTextBoxCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetPolymorphListPanel.OnShowGrowth
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPolymorphListPanel_OnShowGrowth final
{
public:
	bool                                          Show_0;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPolymorphListPanel_OnShowGrowth) == 0x000001, "Wrong alignment on TLUserWidgetPolymorphListPanel_OnShowGrowth");
static_assert(sizeof(TLUserWidgetPolymorphListPanel_OnShowGrowth) == 0x000001, "Wrong size on TLUserWidgetPolymorphListPanel_OnShowGrowth");
static_assert(offsetof(TLUserWidgetPolymorphListPanel_OnShowGrowth, Show_0) == 0x000000, "Member 'TLUserWidgetPolymorphListPanel_OnShowGrowth::Show_0' has a wrong offset!");

// Function TLClient.TLUserWidgetPolymorphListPanel.SelectPolymorphCategoryTab
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPolymorphListPanel_SelectPolymorphCategoryTab final
{
public:
	ETLPolymorphEntryType                         InEntryType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPolymorphListPanel_SelectPolymorphCategoryTab) == 0x000001, "Wrong alignment on TLUserWidgetPolymorphListPanel_SelectPolymorphCategoryTab");
static_assert(sizeof(TLUserWidgetPolymorphListPanel_SelectPolymorphCategoryTab) == 0x000001, "Wrong size on TLUserWidgetPolymorphListPanel_SelectPolymorphCategoryTab");
static_assert(offsetof(TLUserWidgetPolymorphListPanel_SelectPolymorphCategoryTab, InEntryType) == 0x000000, "Member 'TLUserWidgetPolymorphListPanel_SelectPolymorphCategoryTab::InEntryType' has a wrong offset!");

// Function TLClient.TLMovieSceneCapture.StartCapture
// 0x0010 (0x0010 - 0x0000)
struct TLMovieSceneCapture_StartCapture final
{
public:
	class FString                                 InFilename;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMovieSceneCapture_StartCapture) == 0x000008, "Wrong alignment on TLMovieSceneCapture_StartCapture");
static_assert(sizeof(TLMovieSceneCapture_StartCapture) == 0x000010, "Wrong size on TLMovieSceneCapture_StartCapture");
static_assert(offsetof(TLMovieSceneCapture_StartCapture, InFilename) == 0x000000, "Member 'TLMovieSceneCapture_StartCapture::InFilename' has a wrong offset!");

// Function TLClient.TLMovieSceneCapture.GetFileName
// 0x0010 (0x0010 - 0x0000)
struct TLMovieSceneCapture_GetFileName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMovieSceneCapture_GetFileName) == 0x000008, "Wrong alignment on TLMovieSceneCapture_GetFileName");
static_assert(sizeof(TLMovieSceneCapture_GetFileName) == 0x000010, "Wrong size on TLMovieSceneCapture_GetFileName");
static_assert(offsetof(TLMovieSceneCapture_GetFileName, ReturnValue) == 0x000000, "Member 'TLMovieSceneCapture_GetFileName::ReturnValue' has a wrong offset!");

// Function TLClient.TLMovieSceneCapture.GetFilePath
// 0x0010 (0x0010 - 0x0000)
struct TLMovieSceneCapture_GetFilePath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMovieSceneCapture_GetFilePath) == 0x000008, "Wrong alignment on TLMovieSceneCapture_GetFilePath");
static_assert(sizeof(TLMovieSceneCapture_GetFilePath) == 0x000010, "Wrong size on TLMovieSceneCapture_GetFilePath");
static_assert(offsetof(TLMovieSceneCapture_GetFilePath, ReturnValue) == 0x000000, "Member 'TLMovieSceneCapture_GetFilePath::ReturnValue' has a wrong offset!");

// Function TLClient.TLMovieSceneCapture.IsFinalize
// 0x0001 (0x0001 - 0x0000)
struct TLMovieSceneCapture_IsFinalize final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMovieSceneCapture_IsFinalize) == 0x000001, "Wrong alignment on TLMovieSceneCapture_IsFinalize");
static_assert(sizeof(TLMovieSceneCapture_IsFinalize) == 0x000001, "Wrong size on TLMovieSceneCapture_IsFinalize");
static_assert(offsetof(TLMovieSceneCapture_IsFinalize, ReturnValue) == 0x000000, "Member 'TLMovieSceneCapture_IsFinalize::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetComboBox.AddOption
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetComboBox_AddOption final
{
public:
	class FString                                 Option;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetComboBox_AddOption) == 0x000008, "Wrong alignment on TLUserWidgetComboBox_AddOption");
static_assert(sizeof(TLUserWidgetComboBox_AddOption) == 0x000010, "Wrong size on TLUserWidgetComboBox_AddOption");
static_assert(offsetof(TLUserWidgetComboBox_AddOption, Option) == 0x000000, "Member 'TLUserWidgetComboBox_AddOption::Option' has a wrong offset!");

// Function TLClient.TLUserWidgetComboBox.AddUnusualOption
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetComboBox_AddUnusualOption final
{
public:
	class FString                                 Option;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetComboBox_AddUnusualOption) == 0x000008, "Wrong alignment on TLUserWidgetComboBox_AddUnusualOption");
static_assert(sizeof(TLUserWidgetComboBox_AddUnusualOption) == 0x000010, "Wrong size on TLUserWidgetComboBox_AddUnusualOption");
static_assert(offsetof(TLUserWidgetComboBox_AddUnusualOption, Option) == 0x000000, "Member 'TLUserWidgetComboBox_AddUnusualOption::Option' has a wrong offset!");

// Function TLClient.TLUserWidgetComboBox.HandleGenerateWidget
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetComboBox_HandleGenerateWidget final
{
public:
	class FString                                 StringItem;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetComboBox_HandleGenerateWidget) == 0x000008, "Wrong alignment on TLUserWidgetComboBox_HandleGenerateWidget");
static_assert(sizeof(TLUserWidgetComboBox_HandleGenerateWidget) == 0x000018, "Wrong size on TLUserWidgetComboBox_HandleGenerateWidget");
static_assert(offsetof(TLUserWidgetComboBox_HandleGenerateWidget, StringItem) == 0x000000, "Member 'TLUserWidgetComboBox_HandleGenerateWidget::StringItem' has a wrong offset!");
static_assert(offsetof(TLUserWidgetComboBox_HandleGenerateWidget, ReturnValue) == 0x000010, "Member 'TLUserWidgetComboBox_HandleGenerateWidget::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetComboBox.HandleSelectionChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetComboBox_HandleSelectionChanged final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetComboBox_HandleSelectionChanged) == 0x000008, "Wrong alignment on TLUserWidgetComboBox_HandleSelectionChanged");
static_assert(sizeof(TLUserWidgetComboBox_HandleSelectionChanged) == 0x000018, "Wrong size on TLUserWidgetComboBox_HandleSelectionChanged");
static_assert(offsetof(TLUserWidgetComboBox_HandleSelectionChanged, SelectedItem) == 0x000000, "Member 'TLUserWidgetComboBox_HandleSelectionChanged::SelectedItem' has a wrong offset!");
static_assert(offsetof(TLUserWidgetComboBox_HandleSelectionChanged, SelectionType) == 0x000010, "Member 'TLUserWidgetComboBox_HandleSelectionChanged::SelectionType' has a wrong offset!");

// Function TLClient.TLUserWidgetComboBox.RemoveOption
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetComboBox_RemoveOption final
{
public:
	class FString                                 Option;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetComboBox_RemoveOption) == 0x000008, "Wrong alignment on TLUserWidgetComboBox_RemoveOption");
static_assert(sizeof(TLUserWidgetComboBox_RemoveOption) == 0x000018, "Wrong size on TLUserWidgetComboBox_RemoveOption");
static_assert(offsetof(TLUserWidgetComboBox_RemoveOption, Option) == 0x000000, "Member 'TLUserWidgetComboBox_RemoveOption::Option' has a wrong offset!");
static_assert(offsetof(TLUserWidgetComboBox_RemoveOption, ReturnValue) == 0x000010, "Member 'TLUserWidgetComboBox_RemoveOption::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetComboBox.SetMenuPlacement
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetComboBox_SetMenuPlacement final
{
public:
	EMenuPlacement                                InMenuPlacement;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetComboBox_SetMenuPlacement) == 0x000001, "Wrong alignment on TLUserWidgetComboBox_SetMenuPlacement");
static_assert(sizeof(TLUserWidgetComboBox_SetMenuPlacement) == 0x000001, "Wrong size on TLUserWidgetComboBox_SetMenuPlacement");
static_assert(offsetof(TLUserWidgetComboBox_SetMenuPlacement, InMenuPlacement) == 0x000000, "Member 'TLUserWidgetComboBox_SetMenuPlacement::InMenuPlacement' has a wrong offset!");

// Function TLClient.TLUserWidgetComboBox.SetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetComboBox_SetSelectedIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetComboBox_SetSelectedIndex) == 0x000004, "Wrong alignment on TLUserWidgetComboBox_SetSelectedIndex");
static_assert(sizeof(TLUserWidgetComboBox_SetSelectedIndex) == 0x000004, "Wrong size on TLUserWidgetComboBox_SetSelectedIndex");
static_assert(offsetof(TLUserWidgetComboBox_SetSelectedIndex, Index_0) == 0x000000, "Member 'TLUserWidgetComboBox_SetSelectedIndex::Index_0' has a wrong offset!");

// Function TLClient.TLUserWidgetComboBox.SetSelectedOption
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetComboBox_SetSelectedOption final
{
public:
	class FString                                 Option;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetComboBox_SetSelectedOption) == 0x000008, "Wrong alignment on TLUserWidgetComboBox_SetSelectedOption");
static_assert(sizeof(TLUserWidgetComboBox_SetSelectedOption) == 0x000010, "Wrong size on TLUserWidgetComboBox_SetSelectedOption");
static_assert(offsetof(TLUserWidgetComboBox_SetSelectedOption, Option) == 0x000000, "Member 'TLUserWidgetComboBox_SetSelectedOption::Option' has a wrong offset!");

// Function TLClient.TLUserWidgetComboBox.FindOptionIndex
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetComboBox_FindOptionIndex final
{
public:
	class FString                                 Option;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetComboBox_FindOptionIndex) == 0x000008, "Wrong alignment on TLUserWidgetComboBox_FindOptionIndex");
static_assert(sizeof(TLUserWidgetComboBox_FindOptionIndex) == 0x000018, "Wrong size on TLUserWidgetComboBox_FindOptionIndex");
static_assert(offsetof(TLUserWidgetComboBox_FindOptionIndex, Option) == 0x000000, "Member 'TLUserWidgetComboBox_FindOptionIndex::Option' has a wrong offset!");
static_assert(offsetof(TLUserWidgetComboBox_FindOptionIndex, ReturnValue) == 0x000010, "Member 'TLUserWidgetComboBox_FindOptionIndex::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetComboBox.GetOptionAtIndex
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetComboBox_GetOptionAtIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetComboBox_GetOptionAtIndex) == 0x000008, "Wrong alignment on TLUserWidgetComboBox_GetOptionAtIndex");
static_assert(sizeof(TLUserWidgetComboBox_GetOptionAtIndex) == 0x000018, "Wrong size on TLUserWidgetComboBox_GetOptionAtIndex");
static_assert(offsetof(TLUserWidgetComboBox_GetOptionAtIndex, Index_0) == 0x000000, "Member 'TLUserWidgetComboBox_GetOptionAtIndex::Index_0' has a wrong offset!");
static_assert(offsetof(TLUserWidgetComboBox_GetOptionAtIndex, ReturnValue) == 0x000008, "Member 'TLUserWidgetComboBox_GetOptionAtIndex::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetComboBox.GetOptionCount
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetComboBox_GetOptionCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetComboBox_GetOptionCount) == 0x000004, "Wrong alignment on TLUserWidgetComboBox_GetOptionCount");
static_assert(sizeof(TLUserWidgetComboBox_GetOptionCount) == 0x000004, "Wrong size on TLUserWidgetComboBox_GetOptionCount");
static_assert(offsetof(TLUserWidgetComboBox_GetOptionCount, ReturnValue) == 0x000000, "Member 'TLUserWidgetComboBox_GetOptionCount::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetComboBox.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetComboBox_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetComboBox_GetSelectedIndex) == 0x000004, "Wrong alignment on TLUserWidgetComboBox_GetSelectedIndex");
static_assert(sizeof(TLUserWidgetComboBox_GetSelectedIndex) == 0x000004, "Wrong size on TLUserWidgetComboBox_GetSelectedIndex");
static_assert(offsetof(TLUserWidgetComboBox_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'TLUserWidgetComboBox_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetComboBox.GetSelectedOption
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetComboBox_GetSelectedOption final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetComboBox_GetSelectedOption) == 0x000008, "Wrong alignment on TLUserWidgetComboBox_GetSelectedOption");
static_assert(sizeof(TLUserWidgetComboBox_GetSelectedOption) == 0x000010, "Wrong size on TLUserWidgetComboBox_GetSelectedOption");
static_assert(offsetof(TLUserWidgetComboBox_GetSelectedOption, ReturnValue) == 0x000000, "Member 'TLUserWidgetComboBox_GetSelectedOption::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetItemAcquireUXMotion.OnUpdateItemGrade
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemAcquireUXMotion_OnUpdateItemGrade final
{
public:
	EItemGrade                                    InItemGrade;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemAcquireUXMotion_OnUpdateItemGrade) == 0x000001, "Wrong alignment on TLUserWidgetItemAcquireUXMotion_OnUpdateItemGrade");
static_assert(sizeof(TLUserWidgetItemAcquireUXMotion_OnUpdateItemGrade) == 0x000001, "Wrong size on TLUserWidgetItemAcquireUXMotion_OnUpdateItemGrade");
static_assert(offsetof(TLUserWidgetItemAcquireUXMotion_OnUpdateItemGrade, InItemGrade) == 0x000000, "Member 'TLUserWidgetItemAcquireUXMotion_OnUpdateItemGrade::InItemGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetItemAcquireUXMotion.OnUpdateItemGradeColor
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetItemAcquireUXMotion_OnUpdateItemGradeColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemAcquireUXMotion_OnUpdateItemGradeColor) == 0x000004, "Wrong alignment on TLUserWidgetItemAcquireUXMotion_OnUpdateItemGradeColor");
static_assert(sizeof(TLUserWidgetItemAcquireUXMotion_OnUpdateItemGradeColor) == 0x000010, "Wrong size on TLUserWidgetItemAcquireUXMotion_OnUpdateItemGradeColor");
static_assert(offsetof(TLUserWidgetItemAcquireUXMotion_OnUpdateItemGradeColor, InColor) == 0x000000, "Member 'TLUserWidgetItemAcquireUXMotion_OnUpdateItemGradeColor::InColor' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconThrone.Button_OnClicked
// 0x0070 (0x0070 - 0x0000)
struct TLUserWidgetMapIconThrone_Button_OnClicked final
{
public:
	struct FPointerEvent                          InMouseEvent;                                      // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconThrone_Button_OnClicked) == 0x000008, "Wrong alignment on TLUserWidgetMapIconThrone_Button_OnClicked");
static_assert(sizeof(TLUserWidgetMapIconThrone_Button_OnClicked) == 0x000070, "Wrong size on TLUserWidgetMapIconThrone_Button_OnClicked");
static_assert(offsetof(TLUserWidgetMapIconThrone_Button_OnClicked, InMouseEvent) == 0x000000, "Member 'TLUserWidgetMapIconThrone_Button_OnClicked::InMouseEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconThrone.OnUpdateIconColor
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetMapIconThrone_OnUpdateIconColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconThrone_OnUpdateIconColor) == 0x000004, "Wrong alignment on TLUserWidgetMapIconThrone_OnUpdateIconColor");
static_assert(sizeof(TLUserWidgetMapIconThrone_OnUpdateIconColor) == 0x000010, "Wrong size on TLUserWidgetMapIconThrone_OnUpdateIconColor");
static_assert(offsetof(TLUserWidgetMapIconThrone_OnUpdateIconColor, InColor) == 0x000000, "Member 'TLUserWidgetMapIconThrone_OnUpdateIconColor::InColor' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconThrone.OnUpdateSiegeState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconThrone_OnUpdateSiegeState final
{
public:
	bool                                          InIsSiegeWarfare;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconThrone_OnUpdateSiegeState) == 0x000001, "Wrong alignment on TLUserWidgetMapIconThrone_OnUpdateSiegeState");
static_assert(sizeof(TLUserWidgetMapIconThrone_OnUpdateSiegeState) == 0x000001, "Wrong size on TLUserWidgetMapIconThrone_OnUpdateSiegeState");
static_assert(offsetof(TLUserWidgetMapIconThrone_OnUpdateSiegeState, InIsSiegeWarfare) == 0x000000, "Member 'TLUserWidgetMapIconThrone_OnUpdateSiegeState::InIsSiegeWarfare' has a wrong offset!");

// Function TLClient.TLGameLobby.GetCharacterDataByUID
// 0x01D0 (0x01D0 - 0x0000)
struct TLGameLobby_GetCharacterDataByUID final
{
public:
	int64                                         InID;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTLCharacterData                       ReturnValue;                                       // 0x0008(0x01C8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameLobby_GetCharacterDataByUID) == 0x000008, "Wrong alignment on TLGameLobby_GetCharacterDataByUID");
static_assert(sizeof(TLGameLobby_GetCharacterDataByUID) == 0x0001D0, "Wrong size on TLGameLobby_GetCharacterDataByUID");
static_assert(offsetof(TLGameLobby_GetCharacterDataByUID, InID) == 0x000000, "Member 'TLGameLobby_GetCharacterDataByUID::InID' has a wrong offset!");
static_assert(offsetof(TLGameLobby_GetCharacterDataByUID, ReturnValue) == 0x000008, "Member 'TLGameLobby_GetCharacterDataByUID::ReturnValue' has a wrong offset!");

// Function TLClient.TLGameLobby.GetCurrentWorldServerName
// 0x0018 (0x0018 - 0x0000)
struct TLGameLobby_GetCurrentWorldServerName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameLobby_GetCurrentWorldServerName) == 0x000008, "Wrong alignment on TLGameLobby_GetCurrentWorldServerName");
static_assert(sizeof(TLGameLobby_GetCurrentWorldServerName) == 0x000018, "Wrong size on TLGameLobby_GetCurrentWorldServerName");
static_assert(offsetof(TLGameLobby_GetCurrentWorldServerName, ReturnValue) == 0x000000, "Member 'TLGameLobby_GetCurrentWorldServerName::ReturnValue' has a wrong offset!");

// Function TLClient.TLGameLobby.IsServerAlive
// 0x0008 (0x0008 - 0x0000)
struct TLGameLobby_IsServerAlive final
{
public:
	int32                                         InServerID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLGameLobby_IsServerAlive) == 0x000004, "Wrong alignment on TLGameLobby_IsServerAlive");
static_assert(sizeof(TLGameLobby_IsServerAlive) == 0x000008, "Wrong size on TLGameLobby_IsServerAlive");
static_assert(offsetof(TLGameLobby_IsServerAlive, InServerID) == 0x000000, "Member 'TLGameLobby_IsServerAlive::InServerID' has a wrong offset!");
static_assert(offsetof(TLGameLobby_IsServerAlive, ReturnValue) == 0x000004, "Member 'TLGameLobby_IsServerAlive::ReturnValue' has a wrong offset!");

// Function TLClient.TLGameLobby.IsServerOpen
// 0x0008 (0x0008 - 0x0000)
struct TLGameLobby_IsServerOpen final
{
public:
	int32                                         InServerID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLGameLobby_IsServerOpen) == 0x000004, "Wrong alignment on TLGameLobby_IsServerOpen");
static_assert(sizeof(TLGameLobby_IsServerOpen) == 0x000008, "Wrong size on TLGameLobby_IsServerOpen");
static_assert(offsetof(TLGameLobby_IsServerOpen, InServerID) == 0x000000, "Member 'TLGameLobby_IsServerOpen::InServerID' has a wrong offset!");
static_assert(offsetof(TLGameLobby_IsServerOpen, ReturnValue) == 0x000004, "Member 'TLGameLobby_IsServerOpen::ReturnValue' has a wrong offset!");

// Function TLClient.TLGameLobby.IsValidServerID
// 0x0008 (0x0008 - 0x0000)
struct TLGameLobby_IsValidServerID final
{
public:
	int32                                         InServerID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLGameLobby_IsValidServerID) == 0x000004, "Wrong alignment on TLGameLobby_IsValidServerID");
static_assert(sizeof(TLGameLobby_IsValidServerID) == 0x000008, "Wrong size on TLGameLobby_IsValidServerID");
static_assert(offsetof(TLGameLobby_IsValidServerID, InServerID) == 0x000000, "Member 'TLGameLobby_IsValidServerID::InServerID' has a wrong offset!");
static_assert(offsetof(TLGameLobby_IsValidServerID, ReturnValue) == 0x000004, "Member 'TLGameLobby_IsValidServerID::ReturnValue' has a wrong offset!");

// Function TLClient.TLGameLobby.SetSelectedCharacterID
// 0x0004 (0x0004 - 0x0000)
struct TLGameLobby_SetSelectedCharacterID final
{
public:
	int32                                         InSelectedCharacterID;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameLobby_SetSelectedCharacterID) == 0x000004, "Wrong alignment on TLGameLobby_SetSelectedCharacterID");
static_assert(sizeof(TLGameLobby_SetSelectedCharacterID) == 0x000004, "Wrong size on TLGameLobby_SetSelectedCharacterID");
static_assert(offsetof(TLGameLobby_SetSelectedCharacterID, InSelectedCharacterID) == 0x000000, "Member 'TLGameLobby_SetSelectedCharacterID::InSelectedCharacterID' has a wrong offset!");

// Function TLClient.TLGameLobby.GetCharacterDatas
// 0x0010 (0x0010 - 0x0000)
struct TLGameLobby_GetCharacterDatas final
{
public:
	TArray<struct FTLCharacterData>               ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameLobby_GetCharacterDatas) == 0x000008, "Wrong alignment on TLGameLobby_GetCharacterDatas");
static_assert(sizeof(TLGameLobby_GetCharacterDatas) == 0x000010, "Wrong size on TLGameLobby_GetCharacterDatas");
static_assert(offsetof(TLGameLobby_GetCharacterDatas, ReturnValue) == 0x000000, "Member 'TLGameLobby_GetCharacterDatas::ReturnValue' has a wrong offset!");

// Function TLClient.TLGameLobby.GetSelectedCharacterID
// 0x0008 (0x0008 - 0x0000)
struct TLGameLobby_GetSelectedCharacterID final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameLobby_GetSelectedCharacterID) == 0x000008, "Wrong alignment on TLGameLobby_GetSelectedCharacterID");
static_assert(sizeof(TLGameLobby_GetSelectedCharacterID) == 0x000008, "Wrong size on TLGameLobby_GetSelectedCharacterID");
static_assert(offsetof(TLGameLobby_GetSelectedCharacterID, ReturnValue) == 0x000000, "Member 'TLGameLobby_GetSelectedCharacterID::ReturnValue' has a wrong offset!");

// Function TLClient.TLGameLobby.GetSelectedRealmId
// 0x0004 (0x0004 - 0x0000)
struct TLGameLobby_GetSelectedRealmId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameLobby_GetSelectedRealmId) == 0x000004, "Wrong alignment on TLGameLobby_GetSelectedRealmId");
static_assert(sizeof(TLGameLobby_GetSelectedRealmId) == 0x000004, "Wrong size on TLGameLobby_GetSelectedRealmId");
static_assert(offsetof(TLGameLobby_GetSelectedRealmId, ReturnValue) == 0x000000, "Member 'TLGameLobby_GetSelectedRealmId::ReturnValue' has a wrong offset!");

// Function TLClient.TLGameLobby.GetSelectedServerData
// 0x0098 (0x0098 - 0x0000)
struct TLGameLobby_GetSelectedServerData final
{
public:
	struct FTLHomeServerData                      ReturnValue;                                       // 0x0000(0x0098)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameLobby_GetSelectedServerData) == 0x000008, "Wrong alignment on TLGameLobby_GetSelectedServerData");
static_assert(sizeof(TLGameLobby_GetSelectedServerData) == 0x000098, "Wrong size on TLGameLobby_GetSelectedServerData");
static_assert(offsetof(TLGameLobby_GetSelectedServerData, ReturnValue) == 0x000000, "Member 'TLGameLobby_GetSelectedServerData::ReturnValue' has a wrong offset!");

// Function TLClient.TLGameLobby.GetSelectedServerID
// 0x0004 (0x0004 - 0x0000)
struct TLGameLobby_GetSelectedServerID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameLobby_GetSelectedServerID) == 0x000004, "Wrong alignment on TLGameLobby_GetSelectedServerID");
static_assert(sizeof(TLGameLobby_GetSelectedServerID) == 0x000004, "Wrong size on TLGameLobby_GetSelectedServerID");
static_assert(offsetof(TLGameLobby_GetSelectedServerID, ReturnValue) == 0x000000, "Member 'TLGameLobby_GetSelectedServerID::ReturnValue' has a wrong offset!");

// Function TLClient.TLGameLobby.GetSelectedWorldID
// 0x0004 (0x0004 - 0x0000)
struct TLGameLobby_GetSelectedWorldID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameLobby_GetSelectedWorldID) == 0x000004, "Wrong alignment on TLGameLobby_GetSelectedWorldID");
static_assert(sizeof(TLGameLobby_GetSelectedWorldID) == 0x000004, "Wrong size on TLGameLobby_GetSelectedWorldID");
static_assert(offsetof(TLGameLobby_GetSelectedWorldID, ReturnValue) == 0x000000, "Member 'TLGameLobby_GetSelectedWorldID::ReturnValue' has a wrong offset!");

// Function TLClient.TLGameLobby.GetWorldServerDatas
// 0x0010 (0x0010 - 0x0000)
struct TLGameLobby_GetWorldServerDatas final
{
public:
	TArray<struct FTLWorldServerData>             ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameLobby_GetWorldServerDatas) == 0x000008, "Wrong alignment on TLGameLobby_GetWorldServerDatas");
static_assert(sizeof(TLGameLobby_GetWorldServerDatas) == 0x000010, "Wrong size on TLGameLobby_GetWorldServerDatas");
static_assert(offsetof(TLGameLobby_GetWorldServerDatas, ReturnValue) == 0x000000, "Member 'TLGameLobby_GetWorldServerDatas::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconWaypoint.OnCreatedWaypoint
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconWaypoint_OnCreatedWaypoint final
{
public:
	EWaypointType                                 InWaypointType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconWaypoint_OnCreatedWaypoint) == 0x000001, "Wrong alignment on TLUserWidgetMapIconWaypoint_OnCreatedWaypoint");
static_assert(sizeof(TLUserWidgetMapIconWaypoint_OnCreatedWaypoint) == 0x000001, "Wrong size on TLUserWidgetMapIconWaypoint_OnCreatedWaypoint");
static_assert(offsetof(TLUserWidgetMapIconWaypoint_OnCreatedWaypoint, InWaypointType) == 0x000000, "Member 'TLUserWidgetMapIconWaypoint_OnCreatedWaypoint::InWaypointType' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconWaypoint.OnTerritoryFogWayPoint
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconWaypoint_OnTerritoryFogWayPoint final
{
public:
	bool                                          InOpend;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconWaypoint_OnTerritoryFogWayPoint) == 0x000001, "Wrong alignment on TLUserWidgetMapIconWaypoint_OnTerritoryFogWayPoint");
static_assert(sizeof(TLUserWidgetMapIconWaypoint_OnTerritoryFogWayPoint) == 0x000001, "Wrong size on TLUserWidgetMapIconWaypoint_OnTerritoryFogWayPoint");
static_assert(offsetof(TLUserWidgetMapIconWaypoint_OnTerritoryFogWayPoint, InOpend) == 0x000000, "Member 'TLUserWidgetMapIconWaypoint_OnTerritoryFogWayPoint::InOpend' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconWaypoint.SetDiscoverWaypoint
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconWaypoint_SetDiscoverWaypoint final
{
public:
	bool                                          InOpened;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconWaypoint_SetDiscoverWaypoint) == 0x000001, "Wrong alignment on TLUserWidgetMapIconWaypoint_SetDiscoverWaypoint");
static_assert(sizeof(TLUserWidgetMapIconWaypoint_SetDiscoverWaypoint) == 0x000001, "Wrong size on TLUserWidgetMapIconWaypoint_SetDiscoverWaypoint");
static_assert(offsetof(TLUserWidgetMapIconWaypoint_SetDiscoverWaypoint, InOpened) == 0x000000, "Member 'TLUserWidgetMapIconWaypoint_SetDiscoverWaypoint::InOpened' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconWaypoint.UpdateStatus
// 0x0003 (0x0003 - 0x0000)
struct TLUserWidgetMapIconWaypoint_UpdateStatus final
{
public:
	bool                                          InDiscovery;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InLock;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InResurrectionPoint;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconWaypoint_UpdateStatus) == 0x000001, "Wrong alignment on TLUserWidgetMapIconWaypoint_UpdateStatus");
static_assert(sizeof(TLUserWidgetMapIconWaypoint_UpdateStatus) == 0x000003, "Wrong size on TLUserWidgetMapIconWaypoint_UpdateStatus");
static_assert(offsetof(TLUserWidgetMapIconWaypoint_UpdateStatus, InDiscovery) == 0x000000, "Member 'TLUserWidgetMapIconWaypoint_UpdateStatus::InDiscovery' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMapIconWaypoint_UpdateStatus, InLock) == 0x000001, "Member 'TLUserWidgetMapIconWaypoint_UpdateStatus::InLock' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMapIconWaypoint_UpdateStatus, InResurrectionPoint) == 0x000002, "Member 'TLUserWidgetMapIconWaypoint_UpdateStatus::InResurrectionPoint' has a wrong offset!");

// Function TLClient.TLGameUserSettings.IsShowHPBar
// 0x0001 (0x0001 - 0x0000)
struct TLGameUserSettings_IsShowHPBar final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameUserSettings_IsShowHPBar) == 0x000001, "Wrong alignment on TLGameUserSettings_IsShowHPBar");
static_assert(sizeof(TLGameUserSettings_IsShowHPBar) == 0x000001, "Wrong size on TLGameUserSettings_IsShowHPBar");
static_assert(offsetof(TLGameUserSettings_IsShowHPBar, ReturnValue) == 0x000000, "Member 'TLGameUserSettings_IsShowHPBar::ReturnValue' has a wrong offset!");

// Function TLClient.TLGameUserSettings.SetUseVSync
// 0x0001 (0x0001 - 0x0000)
struct TLGameUserSettings_SetUseVSync final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLGameUserSettings_SetUseVSync) == 0x000001, "Wrong alignment on TLGameUserSettings_SetUseVSync");
static_assert(sizeof(TLGameUserSettings_SetUseVSync) == 0x000001, "Wrong size on TLGameUserSettings_SetUseVSync");
static_assert(offsetof(TLGameUserSettings_SetUseVSync, bUse) == 0x000000, "Member 'TLGameUserSettings_SetUseVSync::bUse' has a wrong offset!");

// Function TLClient.TLUserWidgetRanking.HandleActiveWidgetChanged
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetRanking_HandleActiveWidgetChanged final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRanking_HandleActiveWidgetChanged) == 0x000008, "Wrong alignment on TLUserWidgetRanking_HandleActiveWidgetChanged");
static_assert(sizeof(TLUserWidgetRanking_HandleActiveWidgetChanged) == 0x000008, "Wrong size on TLUserWidgetRanking_HandleActiveWidgetChanged");
static_assert(offsetof(TLUserWidgetRanking_HandleActiveWidgetChanged, Widget) == 0x000000, "Member 'TLUserWidgetRanking_HandleActiveWidgetChanged::Widget' has a wrong offset!");

// Function TLClient.TLUserWidgetRanking.HandleTabButtonGroupSelected
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetRanking_HandleTabButtonGroupSelected final
{
public:
	ETLRankingMainTabType                         InTabType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InSelectedIndex;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRanking_HandleTabButtonGroupSelected) == 0x000004, "Wrong alignment on TLUserWidgetRanking_HandleTabButtonGroupSelected");
static_assert(sizeof(TLUserWidgetRanking_HandleTabButtonGroupSelected) == 0x000008, "Wrong size on TLUserWidgetRanking_HandleTabButtonGroupSelected");
static_assert(offsetof(TLUserWidgetRanking_HandleTabButtonGroupSelected, InTabType) == 0x000000, "Member 'TLUserWidgetRanking_HandleTabButtonGroupSelected::InTabType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetRanking_HandleTabButtonGroupSelected, InSelectedIndex) == 0x000004, "Member 'TLUserWidgetRanking_HandleTabButtonGroupSelected::InSelectedIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetAttendancePCSlot.OnUpdateRewardType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetAttendancePCSlot_OnUpdateRewardType final
{
public:
	EAttendancePcRewardType                       RewardType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAttendancePCSlot_OnUpdateRewardType) == 0x000001, "Wrong alignment on TLUserWidgetAttendancePCSlot_OnUpdateRewardType");
static_assert(sizeof(TLUserWidgetAttendancePCSlot_OnUpdateRewardType) == 0x000001, "Wrong size on TLUserWidgetAttendancePCSlot_OnUpdateRewardType");
static_assert(offsetof(TLUserWidgetAttendancePCSlot_OnUpdateRewardType, RewardType) == 0x000000, "Member 'TLUserWidgetAttendancePCSlot_OnUpdateRewardType::RewardType' has a wrong offset!");

// Function TLClient.TLUserWidgetBGEffect.PlayHpExhaust
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetBGEffect_PlayHpExhaust final
{
public:
	int32                                         InHpDangerLevel;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetBGEffect_PlayHpExhaust) == 0x000004, "Wrong alignment on TLUserWidgetBGEffect_PlayHpExhaust");
static_assert(sizeof(TLUserWidgetBGEffect_PlayHpExhaust) == 0x000004, "Wrong size on TLUserWidgetBGEffect_PlayHpExhaust");
static_assert(offsetof(TLUserWidgetBGEffect_PlayHpExhaust, InHpDangerLevel) == 0x000000, "Member 'TLUserWidgetBGEffect_PlayHpExhaust::InHpDangerLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetBGEffect.PlayMyPcDamageFromNpcWithValue
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetBGEffect_PlayMyPcDamageFromNpcWithValue final
{
public:
	bool                                          InPlay;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetBGEffect_PlayMyPcDamageFromNpcWithValue) == 0x000001, "Wrong alignment on TLUserWidgetBGEffect_PlayMyPcDamageFromNpcWithValue");
static_assert(sizeof(TLUserWidgetBGEffect_PlayMyPcDamageFromNpcWithValue) == 0x000001, "Wrong size on TLUserWidgetBGEffect_PlayMyPcDamageFromNpcWithValue");
static_assert(offsetof(TLUserWidgetBGEffect_PlayMyPcDamageFromNpcWithValue, InPlay) == 0x000000, "Member 'TLUserWidgetBGEffect_PlayMyPcDamageFromNpcWithValue::InPlay' has a wrong offset!");

// Function TLClient.TLUserWidgetBGEffect.PlayMyPcDamageWithValue
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetBGEffect_PlayMyPcDamageWithValue final
{
public:
	bool                                          InPlay;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetBGEffect_PlayMyPcDamageWithValue) == 0x000001, "Wrong alignment on TLUserWidgetBGEffect_PlayMyPcDamageWithValue");
static_assert(sizeof(TLUserWidgetBGEffect_PlayMyPcDamageWithValue) == 0x000001, "Wrong size on TLUserWidgetBGEffect_PlayMyPcDamageWithValue");
static_assert(offsetof(TLUserWidgetBGEffect_PlayMyPcDamageWithValue, InPlay) == 0x000000, "Member 'TLUserWidgetBGEffect_PlayMyPcDamageWithValue::InPlay' has a wrong offset!");

// Function TLClient.TLUserWidgetCustomizeMain.HandleHideUIImpl
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCustomizeMain_HandleHideUIImpl final
{
public:
	bool                                          bInHideUI;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCustomizeMain_HandleHideUIImpl) == 0x000001, "Wrong alignment on TLUserWidgetCustomizeMain_HandleHideUIImpl");
static_assert(sizeof(TLUserWidgetCustomizeMain_HandleHideUIImpl) == 0x000001, "Wrong size on TLUserWidgetCustomizeMain_HandleHideUIImpl");
static_assert(offsetof(TLUserWidgetCustomizeMain_HandleHideUIImpl, bInHideUI) == 0x000000, "Member 'TLUserWidgetCustomizeMain_HandleHideUIImpl::bInHideUI' has a wrong offset!");

// Function TLClient.TLUserWidgetCustomizeMain.OnChangeUIPlatformBP
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCustomizeMain_OnChangeUIPlatformBP final
{
public:
	ETLUIPlatform                                 InPlatform;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCustomizeMain_OnChangeUIPlatformBP) == 0x000001, "Wrong alignment on TLUserWidgetCustomizeMain_OnChangeUIPlatformBP");
static_assert(sizeof(TLUserWidgetCustomizeMain_OnChangeUIPlatformBP) == 0x000001, "Wrong size on TLUserWidgetCustomizeMain_OnChangeUIPlatformBP");
static_assert(offsetof(TLUserWidgetCustomizeMain_OnChangeUIPlatformBP, InPlatform) == 0x000000, "Member 'TLUserWidgetCustomizeMain_OnChangeUIPlatformBP::InPlatform' has a wrong offset!");

// Function TLClient.TLUserWidgetCustomizeMain.OnToggleDetailFrame
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetCustomizeMain_OnToggleDetailFrame final
{
public:
	bool                                          bInOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediately;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCustomizeMain_OnToggleDetailFrame) == 0x000001, "Wrong alignment on TLUserWidgetCustomizeMain_OnToggleDetailFrame");
static_assert(sizeof(TLUserWidgetCustomizeMain_OnToggleDetailFrame) == 0x000002, "Wrong size on TLUserWidgetCustomizeMain_OnToggleDetailFrame");
static_assert(offsetof(TLUserWidgetCustomizeMain_OnToggleDetailFrame, bInOpen) == 0x000000, "Member 'TLUserWidgetCustomizeMain_OnToggleDetailFrame::bInOpen' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCustomizeMain_OnToggleDetailFrame, bImmediately) == 0x000001, "Member 'TLUserWidgetCustomizeMain_OnToggleDetailFrame::bImmediately' has a wrong offset!");

// Function TLClient.TLUserWidgetCustomizeMain.OnUpdateContentEnable
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCustomizeMain_OnUpdateContentEnable final
{
public:
	bool                                          bInContentEnable;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCustomizeMain_OnUpdateContentEnable) == 0x000001, "Wrong alignment on TLUserWidgetCustomizeMain_OnUpdateContentEnable");
static_assert(sizeof(TLUserWidgetCustomizeMain_OnUpdateContentEnable) == 0x000001, "Wrong size on TLUserWidgetCustomizeMain_OnUpdateContentEnable");
static_assert(offsetof(TLUserWidgetCustomizeMain_OnUpdateContentEnable, bInContentEnable) == 0x000000, "Member 'TLUserWidgetCustomizeMain_OnUpdateContentEnable::bInContentEnable' has a wrong offset!");

// Function TLClient.TLUserWidgetCustomizeMain.IsHideUIState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCustomizeMain_IsHideUIState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCustomizeMain_IsHideUIState) == 0x000001, "Wrong alignment on TLUserWidgetCustomizeMain_IsHideUIState");
static_assert(sizeof(TLUserWidgetCustomizeMain_IsHideUIState) == 0x000001, "Wrong size on TLUserWidgetCustomizeMain_IsHideUIState");
static_assert(offsetof(TLUserWidgetCustomizeMain_IsHideUIState, ReturnValue) == 0x000000, "Member 'TLUserWidgetCustomizeMain_IsHideUIState::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetOptionGameValueScreenResolution.HandleSelectionChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetOptionGameValueScreenResolution_HandleSelectionChanged final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetOptionGameValueScreenResolution_HandleSelectionChanged) == 0x000008, "Wrong alignment on TLUserWidgetOptionGameValueScreenResolution_HandleSelectionChanged");
static_assert(sizeof(TLUserWidgetOptionGameValueScreenResolution_HandleSelectionChanged) == 0x000018, "Wrong size on TLUserWidgetOptionGameValueScreenResolution_HandleSelectionChanged");
static_assert(offsetof(TLUserWidgetOptionGameValueScreenResolution_HandleSelectionChanged, SelectedItem) == 0x000000, "Member 'TLUserWidgetOptionGameValueScreenResolution_HandleSelectionChanged::SelectedItem' has a wrong offset!");
static_assert(offsetof(TLUserWidgetOptionGameValueScreenResolution_HandleSelectionChanged, SelectionType) == 0x000010, "Member 'TLUserWidgetOptionGameValueScreenResolution_HandleSelectionChanged::SelectionType' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxNumericInput.OnSliderValueChanged
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetMsgBoxNumericInput_OnSliderValueChanged final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxNumericInput_OnSliderValueChanged) == 0x000004, "Wrong alignment on TLUserWidgetMsgBoxNumericInput_OnSliderValueChanged");
static_assert(sizeof(TLUserWidgetMsgBoxNumericInput_OnSliderValueChanged) == 0x000004, "Wrong size on TLUserWidgetMsgBoxNumericInput_OnSliderValueChanged");
static_assert(offsetof(TLUserWidgetMsgBoxNumericInput_OnSliderValueChanged, InValue) == 0x000000, "Member 'TLUserWidgetMsgBoxNumericInput_OnSliderValueChanged::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetChatSocial.OnShowEmojiTabButton
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetChatSocial_OnShowEmojiTabButton final
{
public:
	bool                                          bInEmojiMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatSocial_OnShowEmojiTabButton) == 0x000001, "Wrong alignment on TLUserWidgetChatSocial_OnShowEmojiTabButton");
static_assert(sizeof(TLUserWidgetChatSocial_OnShowEmojiTabButton) == 0x000001, "Wrong size on TLUserWidgetChatSocial_OnShowEmojiTabButton");
static_assert(offsetof(TLUserWidgetChatSocial_OnShowEmojiTabButton, bInEmojiMode) == 0x000000, "Member 'TLUserWidgetChatSocial_OnShowEmojiTabButton::bInEmojiMode' has a wrong offset!");

// Function TLClient.TLUserWidgetChatToastMessage.OnCheckShowEllipsis
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetChatToastMessage_OnCheckShowEllipsis final
{
public:
	bool                                          IsSystemMessage;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatToastMessage_OnCheckShowEllipsis) == 0x000001, "Wrong alignment on TLUserWidgetChatToastMessage_OnCheckShowEllipsis");
static_assert(sizeof(TLUserWidgetChatToastMessage_OnCheckShowEllipsis) == 0x000001, "Wrong size on TLUserWidgetChatToastMessage_OnCheckShowEllipsis");
static_assert(offsetof(TLUserWidgetChatToastMessage_OnCheckShowEllipsis, IsSystemMessage) == 0x000000, "Member 'TLUserWidgetChatToastMessage_OnCheckShowEllipsis::IsSystemMessage' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxQuitGame.OnSetPreQuitGameType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMsgBoxQuitGame_OnSetPreQuitGameType final
{
public:
	ETLQuitGameMsgBoxType                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxQuitGame_OnSetPreQuitGameType) == 0x000001, "Wrong alignment on TLUserWidgetMsgBoxQuitGame_OnSetPreQuitGameType");
static_assert(sizeof(TLUserWidgetMsgBoxQuitGame_OnSetPreQuitGameType) == 0x000001, "Wrong size on TLUserWidgetMsgBoxQuitGame_OnSetPreQuitGameType");
static_assert(offsetof(TLUserWidgetMsgBoxQuitGame_OnSetPreQuitGameType, Type) == 0x000000, "Member 'TLUserWidgetMsgBoxQuitGame_OnSetPreQuitGameType::Type' has a wrong offset!");

// Function TLClient.TLUserWidgetChatVivoxVoiceChatButton.OnSetStateImpl
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetChatVivoxVoiceChatButton_OnSetStateImpl final
{
public:
	ETLVivoxVoiceChatState                        InMode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLVivoxVoiceChatChannelType                  InChannelType;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatVivoxVoiceChatButton_OnSetStateImpl) == 0x000001, "Wrong alignment on TLUserWidgetChatVivoxVoiceChatButton_OnSetStateImpl");
static_assert(sizeof(TLUserWidgetChatVivoxVoiceChatButton_OnSetStateImpl) == 0x000002, "Wrong size on TLUserWidgetChatVivoxVoiceChatButton_OnSetStateImpl");
static_assert(offsetof(TLUserWidgetChatVivoxVoiceChatButton_OnSetStateImpl, InMode) == 0x000000, "Member 'TLUserWidgetChatVivoxVoiceChatButton_OnSetStateImpl::InMode' has a wrong offset!");
static_assert(offsetof(TLUserWidgetChatVivoxVoiceChatButton_OnSetStateImpl, InChannelType) == 0x000001, "Member 'TLUserWidgetChatVivoxVoiceChatButton_OnSetStateImpl::InChannelType' has a wrong offset!");

// Function TLClient.TLUserWidgetEventCalenderDetails.OnUpdateCalenderType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEventCalenderDetails_OnUpdateCalenderType final
{
public:
	EEventCalenderType                            InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEventCalenderDetails_OnUpdateCalenderType) == 0x000001, "Wrong alignment on TLUserWidgetEventCalenderDetails_OnUpdateCalenderType");
static_assert(sizeof(TLUserWidgetEventCalenderDetails_OnUpdateCalenderType) == 0x000001, "Wrong size on TLUserWidgetEventCalenderDetails_OnUpdateCalenderType");
static_assert(offsetof(TLUserWidgetEventCalenderDetails_OnUpdateCalenderType, InType) == 0x000000, "Member 'TLUserWidgetEventCalenderDetails_OnUpdateCalenderType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetChatVoiceChatGroup.OnVoiceChatExpand
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetChatVoiceChatGroup_OnVoiceChatExpand final
{
public:
	int32                                         InActiveNum;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatVoiceChatGroup_OnVoiceChatExpand) == 0x000004, "Wrong alignment on TLUserWidgetChatVoiceChatGroup_OnVoiceChatExpand");
static_assert(sizeof(TLUserWidgetChatVoiceChatGroup_OnVoiceChatExpand) == 0x000004, "Wrong size on TLUserWidgetChatVoiceChatGroup_OnVoiceChatExpand");
static_assert(offsetof(TLUserWidgetChatVoiceChatGroup_OnVoiceChatExpand, InActiveNum) == 0x000000, "Member 'TLUserWidgetChatVoiceChatGroup_OnVoiceChatExpand::InActiveNum' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterBriefInfo.OnShowMembership
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCharacterBriefInfo_OnShowMembership final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterBriefInfo_OnShowMembership) == 0x000001, "Wrong alignment on TLUserWidgetCharacterBriefInfo_OnShowMembership");
static_assert(sizeof(TLUserWidgetCharacterBriefInfo_OnShowMembership) == 0x000001, "Wrong size on TLUserWidgetCharacterBriefInfo_OnShowMembership");
static_assert(offsetof(TLUserWidgetCharacterBriefInfo_OnShowMembership, InIsShow) == 0x000000, "Member 'TLUserWidgetCharacterBriefInfo_OnShowMembership::InIsShow' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterBriefInfo.OnUpdateStatusData
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetCharacterBriefInfo_OnUpdateStatusData final
{
public:
	class FName                                   InBrush;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterBriefInfo_OnUpdateStatusData) == 0x000004, "Wrong alignment on TLUserWidgetCharacterBriefInfo_OnUpdateStatusData");
static_assert(sizeof(TLUserWidgetCharacterBriefInfo_OnUpdateStatusData) == 0x000008, "Wrong size on TLUserWidgetCharacterBriefInfo_OnUpdateStatusData");
static_assert(offsetof(TLUserWidgetCharacterBriefInfo_OnUpdateStatusData, InBrush) == 0x000000, "Member 'TLUserWidgetCharacterBriefInfo_OnUpdateStatusData::InBrush' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterBriefInfo.SetCharacterData
// 0x01C8 (0x01C8 - 0x0000)
struct TLUserWidgetCharacterBriefInfo_SetCharacterData final
{
public:
	struct FTLCharacterData                       InData;                                            // 0x0000(0x01C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterBriefInfo_SetCharacterData) == 0x000008, "Wrong alignment on TLUserWidgetCharacterBriefInfo_SetCharacterData");
static_assert(sizeof(TLUserWidgetCharacterBriefInfo_SetCharacterData) == 0x0001C8, "Wrong size on TLUserWidgetCharacterBriefInfo_SetCharacterData");
static_assert(offsetof(TLUserWidgetCharacterBriefInfo_SetCharacterData, InData) == 0x000000, "Member 'TLUserWidgetCharacterBriefInfo_SetCharacterData::InData' has a wrong offset!");

// Function TLClient.TLItemViewInterface.GetCount
// 0x0008 (0x0008 - 0x0000)
struct TLItemViewInterface_GetCount final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_GetCount) == 0x000008, "Wrong alignment on TLItemViewInterface_GetCount");
static_assert(sizeof(TLItemViewInterface_GetCount) == 0x000008, "Wrong size on TLItemViewInterface_GetCount");
static_assert(offsetof(TLItemViewInterface_GetCount, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_GetCount::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.GetLeftItemCollectionCount
// 0x0004 (0x0004 - 0x0000)
struct TLItemViewInterface_GetLeftItemCollectionCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_GetLeftItemCollectionCount) == 0x000004, "Wrong alignment on TLItemViewInterface_GetLeftItemCollectionCount");
static_assert(sizeof(TLItemViewInterface_GetLeftItemCollectionCount) == 0x000004, "Wrong size on TLItemViewInterface_GetLeftItemCollectionCount");
static_assert(offsetof(TLItemViewInterface_GetLeftItemCollectionCount, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_GetLeftItemCollectionCount::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsAcquisitionExist
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsAcquisitionExist final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsAcquisitionExist) == 0x000001, "Wrong alignment on TLItemViewInterface_IsAcquisitionExist");
static_assert(sizeof(TLItemViewInterface_IsAcquisitionExist) == 0x000001, "Wrong size on TLItemViewInterface_IsAcquisitionExist");
static_assert(offsetof(TLItemViewInterface_IsAcquisitionExist, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsAcquisitionExist::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsAmmoItem
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsAmmoItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsAmmoItem) == 0x000001, "Wrong alignment on TLItemViewInterface_IsAmmoItem");
static_assert(sizeof(TLItemViewInterface_IsAmmoItem) == 0x000001, "Wrong size on TLItemViewInterface_IsAmmoItem");
static_assert(offsetof(TLItemViewInterface_IsAmmoItem, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsAmmoItem::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsAvailableItem
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsAvailableItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsAvailableItem) == 0x000001, "Wrong alignment on TLItemViewInterface_IsAvailableItem");
static_assert(sizeof(TLItemViewInterface_IsAvailableItem) == 0x000001, "Wrong size on TLItemViewInterface_IsAvailableItem");
static_assert(offsetof(TLItemViewInterface_IsAvailableItem, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsAvailableItem::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsCanStore
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsCanStore final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsCanStore) == 0x000001, "Wrong alignment on TLItemViewInterface_IsCanStore");
static_assert(sizeof(TLItemViewInterface_IsCanStore) == 0x000001, "Wrong size on TLItemViewInterface_IsCanStore");
static_assert(offsetof(TLItemViewInterface_IsCanStore, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsCanStore::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsChattingShare
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsChattingShare final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsChattingShare) == 0x000001, "Wrong alignment on TLItemViewInterface_IsChattingShare");
static_assert(sizeof(TLItemViewInterface_IsChattingShare) == 0x000001, "Wrong size on TLItemViewInterface_IsChattingShare");
static_assert(offsetof(TLItemViewInterface_IsChattingShare, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsChattingShare::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsCompositionMaterial
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsCompositionMaterial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsCompositionMaterial) == 0x000001, "Wrong alignment on TLItemViewInterface_IsCompositionMaterial");
static_assert(sizeof(TLItemViewInterface_IsCompositionMaterial) == 0x000001, "Wrong size on TLItemViewInterface_IsCompositionMaterial");
static_assert(offsetof(TLItemViewInterface_IsCompositionMaterial, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsCompositionMaterial::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsDecomposable
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsDecomposable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsDecomposable) == 0x000001, "Wrong alignment on TLItemViewInterface_IsDecomposable");
static_assert(sizeof(TLItemViewInterface_IsDecomposable) == 0x000001, "Wrong size on TLItemViewInterface_IsDecomposable");
static_assert(offsetof(TLItemViewInterface_IsDecomposable, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsDecomposable::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsDestructible
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsDestructible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsDestructible) == 0x000001, "Wrong alignment on TLItemViewInterface_IsDestructible");
static_assert(sizeof(TLItemViewInterface_IsDestructible) == 0x000001, "Wrong size on TLItemViewInterface_IsDestructible");
static_assert(offsetof(TLItemViewInterface_IsDestructible, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsDestructible::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsEnchantable
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsEnchantable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsEnchantable) == 0x000001, "Wrong alignment on TLItemViewInterface_IsEnchantable");
static_assert(sizeof(TLItemViewInterface_IsEnchantable) == 0x000001, "Wrong size on TLItemViewInterface_IsEnchantable");
static_assert(offsetof(TLItemViewInterface_IsEnchantable, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsEnchantable::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsEnchantMaxLevel
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsEnchantMaxLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsEnchantMaxLevel) == 0x000001, "Wrong alignment on TLItemViewInterface_IsEnchantMaxLevel");
static_assert(sizeof(TLItemViewInterface_IsEnchantMaxLevel) == 0x000001, "Wrong size on TLItemViewInterface_IsEnchantMaxLevel");
static_assert(offsetof(TLItemViewInterface_IsEnchantMaxLevel, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsEnchantMaxLevel::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsEnchantPolymorphElixine
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsEnchantPolymorphElixine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsEnchantPolymorphElixine) == 0x000001, "Wrong alignment on TLItemViewInterface_IsEnchantPolymorphElixine");
static_assert(sizeof(TLItemViewInterface_IsEnchantPolymorphElixine) == 0x000001, "Wrong size on TLItemViewInterface_IsEnchantPolymorphElixine");
static_assert(offsetof(TLItemViewInterface_IsEnchantPolymorphElixine, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsEnchantPolymorphElixine::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsEnchantScroll
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsEnchantScroll final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsEnchantScroll) == 0x000001, "Wrong alignment on TLItemViewInterface_IsEnchantScroll");
static_assert(sizeof(TLItemViewInterface_IsEnchantScroll) == 0x000001, "Wrong size on TLItemViewInterface_IsEnchantScroll");
static_assert(offsetof(TLItemViewInterface_IsEnchantScroll, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsEnchantScroll::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsEquipItem
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsEquipItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsEquipItem) == 0x000001, "Wrong alignment on TLItemViewInterface_IsEquipItem");
static_assert(sizeof(TLItemViewInterface_IsEquipItem) == 0x000001, "Wrong size on TLItemViewInterface_IsEquipItem");
static_assert(offsetof(TLItemViewInterface_IsEquipItem, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsEquipItem::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsEquipItemOrRubbingScrollForEquipItem
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsEquipItemOrRubbingScrollForEquipItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsEquipItemOrRubbingScrollForEquipItem) == 0x000001, "Wrong alignment on TLItemViewInterface_IsEquipItemOrRubbingScrollForEquipItem");
static_assert(sizeof(TLItemViewInterface_IsEquipItemOrRubbingScrollForEquipItem) == 0x000001, "Wrong size on TLItemViewInterface_IsEquipItemOrRubbingScrollForEquipItem");
static_assert(offsetof(TLItemViewInterface_IsEquipItemOrRubbingScrollForEquipItem, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsEquipItemOrRubbingScrollForEquipItem::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsEquipped
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsEquipped) == 0x000001, "Wrong alignment on TLItemViewInterface_IsEquipped");
static_assert(sizeof(TLItemViewInterface_IsEquipped) == 0x000001, "Wrong size on TLItemViewInterface_IsEquipped");
static_assert(offsetof(TLItemViewInterface_IsEquipped, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsEquipped::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsEquippedAt
// 0x0002 (0x0002 - 0x0000)
struct TLItemViewInterface_IsEquippedAt final
{
public:
	EEquipCategory                                InEquipCategory;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsEquippedAt) == 0x000001, "Wrong alignment on TLItemViewInterface_IsEquippedAt");
static_assert(sizeof(TLItemViewInterface_IsEquippedAt) == 0x000002, "Wrong size on TLItemViewInterface_IsEquippedAt");
static_assert(offsetof(TLItemViewInterface_IsEquippedAt, InEquipCategory) == 0x000000, "Member 'TLItemViewInterface_IsEquippedAt::InEquipCategory' has a wrong offset!");
static_assert(offsetof(TLItemViewInterface_IsEquippedAt, ReturnValue) == 0x000001, "Member 'TLItemViewInterface_IsEquippedAt::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsEquippedRune
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsEquippedRune final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsEquippedRune) == 0x000001, "Wrong alignment on TLItemViewInterface_IsEquippedRune");
static_assert(sizeof(TLItemViewInterface_IsEquippedRune) == 0x000001, "Wrong size on TLItemViewInterface_IsEquippedRune");
static_assert(offsetof(TLItemViewInterface_IsEquippedRune, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsEquippedRune::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsFishingBaitItem
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsFishingBaitItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsFishingBaitItem) == 0x000001, "Wrong alignment on TLItemViewInterface_IsFishingBaitItem");
static_assert(sizeof(TLItemViewInterface_IsFishingBaitItem) == 0x000001, "Wrong size on TLItemViewInterface_IsFishingBaitItem");
static_assert(offsetof(TLItemViewInterface_IsFishingBaitItem, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsFishingBaitItem::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsItemCollectable
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsItemCollectable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsItemCollectable) == 0x000001, "Wrong alignment on TLItemViewInterface_IsItemCollectable");
static_assert(sizeof(TLItemViewInterface_IsItemCollectable) == 0x000001, "Wrong size on TLItemViewInterface_IsItemCollectable");
static_assert(offsetof(TLItemViewInterface_IsItemCollectable, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsItemCollectable::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsItemRubbingTargetItem
// 0x0002 (0x0002 - 0x0000)
struct TLItemViewInterface_IsItemRubbingTargetItem final
{
public:
	bool                                          InIsShowSystemMessage;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsItemRubbingTargetItem) == 0x000001, "Wrong alignment on TLItemViewInterface_IsItemRubbingTargetItem");
static_assert(sizeof(TLItemViewInterface_IsItemRubbingTargetItem) == 0x000002, "Wrong size on TLItemViewInterface_IsItemRubbingTargetItem");
static_assert(offsetof(TLItemViewInterface_IsItemRubbingTargetItem, InIsShowSystemMessage) == 0x000000, "Member 'TLItemViewInterface_IsItemRubbingTargetItem::InIsShowSystemMessage' has a wrong offset!");
static_assert(offsetof(TLItemViewInterface_IsItemRubbingTargetItem, ReturnValue) == 0x000001, "Member 'TLItemViewInterface_IsItemRubbingTargetItem::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsItemTraitExist
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsItemTraitExist final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsItemTraitExist) == 0x000001, "Wrong alignment on TLItemViewInterface_IsItemTraitExist");
static_assert(sizeof(TLItemViewInterface_IsItemTraitExist) == 0x000001, "Wrong size on TLItemViewInterface_IsItemTraitExist");
static_assert(offsetof(TLItemViewInterface_IsItemTraitExist, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsItemTraitExist::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsLockable
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsLockable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsLockable) == 0x000001, "Wrong alignment on TLItemViewInterface_IsLockable");
static_assert(sizeof(TLItemViewInterface_IsLockable) == 0x000001, "Wrong size on TLItemViewInterface_IsLockable");
static_assert(offsetof(TLItemViewInterface_IsLockable, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsLockable::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsLocked
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsLocked) == 0x000001, "Wrong alignment on TLItemViewInterface_IsLocked");
static_assert(sizeof(TLItemViewInterface_IsLocked) == 0x000001, "Wrong size on TLItemViewInterface_IsLocked");
static_assert(offsetof(TLItemViewInterface_IsLocked, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsLocked::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsLotteryItem
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsLotteryItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsLotteryItem) == 0x000001, "Wrong alignment on TLItemViewInterface_IsLotteryItem");
static_assert(sizeof(TLItemViewInterface_IsLotteryItem) == 0x000001, "Wrong size on TLItemViewInterface_IsLotteryItem");
static_assert(offsetof(TLItemViewInterface_IsLotteryItem, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsLotteryItem::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsOhterCombatPresetItem
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsOhterCombatPresetItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsOhterCombatPresetItem) == 0x000001, "Wrong alignment on TLItemViewInterface_IsOhterCombatPresetItem");
static_assert(sizeof(TLItemViewInterface_IsOhterCombatPresetItem) == 0x000001, "Wrong size on TLItemViewInterface_IsOhterCombatPresetItem");
static_assert(offsetof(TLItemViewInterface_IsOhterCombatPresetItem, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsOhterCombatPresetItem::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsOtherPresetItem
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsOtherPresetItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsOtherPresetItem) == 0x000001, "Wrong alignment on TLItemViewInterface_IsOtherPresetItem");
static_assert(sizeof(TLItemViewInterface_IsOtherPresetItem) == 0x000001, "Wrong size on TLItemViewInterface_IsOtherPresetItem");
static_assert(offsetof(TLItemViewInterface_IsOtherPresetItem, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsOtherPresetItem::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsReinforcer
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsReinforcer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsReinforcer) == 0x000001, "Wrong alignment on TLItemViewInterface_IsReinforcer");
static_assert(sizeof(TLItemViewInterface_IsReinforcer) == 0x000001, "Wrong size on TLItemViewInterface_IsReinforcer");
static_assert(offsetof(TLItemViewInterface_IsReinforcer, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsReinforcer::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsRuneItem
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsRuneItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsRuneItem) == 0x000001, "Wrong alignment on TLItemViewInterface_IsRuneItem");
static_assert(sizeof(TLItemViewInterface_IsRuneItem) == 0x000001, "Wrong size on TLItemViewInterface_IsRuneItem");
static_assert(offsetof(TLItemViewInterface_IsRuneItem, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsRuneItem::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsRuneSocketOpen
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsRuneSocketOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsRuneSocketOpen) == 0x000001, "Wrong alignment on TLItemViewInterface_IsRuneSocketOpen");
static_assert(sizeof(TLItemViewInterface_IsRuneSocketOpen) == 0x000001, "Wrong size on TLItemViewInterface_IsRuneSocketOpen");
static_assert(offsetof(TLItemViewInterface_IsRuneSocketOpen, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsRuneSocketOpen::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsRuneTargetItem
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsRuneTargetItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsRuneTargetItem) == 0x000001, "Wrong alignment on TLItemViewInterface_IsRuneTargetItem");
static_assert(sizeof(TLItemViewInterface_IsRuneTargetItem) == 0x000001, "Wrong size on TLItemViewInterface_IsRuneTargetItem");
static_assert(offsetof(TLItemViewInterface_IsRuneTargetItem, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsRuneTargetItem::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsSellable
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsSellable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsSellable) == 0x000001, "Wrong alignment on TLItemViewInterface_IsSellable");
static_assert(sizeof(TLItemViewInterface_IsSellable) == 0x000001, "Wrong size on TLItemViewInterface_IsSellable");
static_assert(offsetof(TLItemViewInterface_IsSellable, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsSellable::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsTradable
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsTradable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsTradable) == 0x000001, "Wrong alignment on TLItemViewInterface_IsTradable");
static_assert(sizeof(TLItemViewInterface_IsTradable) == 0x000001, "Wrong size on TLItemViewInterface_IsTradable");
static_assert(offsetof(TLItemViewInterface_IsTradable, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsTradable::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsTraitExtractItem
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsTraitExtractItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsTraitExtractItem) == 0x000001, "Wrong alignment on TLItemViewInterface_IsTraitExtractItem");
static_assert(sizeof(TLItemViewInterface_IsTraitExtractItem) == 0x000001, "Wrong size on TLItemViewInterface_IsTraitExtractItem");
static_assert(offsetof(TLItemViewInterface_IsTraitExtractItem, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsTraitExtractItem::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsTreasureBoxKeyItem
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsTreasureBoxKeyItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsTreasureBoxKeyItem) == 0x000001, "Wrong alignment on TLItemViewInterface_IsTreasureBoxKeyItem");
static_assert(sizeof(TLItemViewInterface_IsTreasureBoxKeyItem) == 0x000001, "Wrong size on TLItemViewInterface_IsTreasureBoxKeyItem");
static_assert(offsetof(TLItemViewInterface_IsTreasureBoxKeyItem, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsTreasureBoxKeyItem::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsTwoSlotsAccessary
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsTwoSlotsAccessary final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsTwoSlotsAccessary) == 0x000001, "Wrong alignment on TLItemViewInterface_IsTwoSlotsAccessary");
static_assert(sizeof(TLItemViewInterface_IsTwoSlotsAccessary) == 0x000001, "Wrong size on TLItemViewInterface_IsTwoSlotsAccessary");
static_assert(offsetof(TLItemViewInterface_IsTwoSlotsAccessary, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsTwoSlotsAccessary::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsTwoSlotsWeapon
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsTwoSlotsWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsTwoSlotsWeapon) == 0x000001, "Wrong alignment on TLItemViewInterface_IsTwoSlotsWeapon");
static_assert(sizeof(TLItemViewInterface_IsTwoSlotsWeapon) == 0x000001, "Wrong size on TLItemViewInterface_IsTwoSlotsWeapon");
static_assert(offsetof(TLItemViewInterface_IsTwoSlotsWeapon, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsTwoSlotsWeapon::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsUsable
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsUsable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsUsable) == 0x000001, "Wrong alignment on TLItemViewInterface_IsUsable");
static_assert(sizeof(TLItemViewInterface_IsUsable) == 0x000001, "Wrong size on TLItemViewInterface_IsUsable");
static_assert(offsetof(TLItemViewInterface_IsUsable, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsUsable::ReturnValue' has a wrong offset!");

// Function TLClient.TLItemViewInterface.IsUsageExist
// 0x0001 (0x0001 - 0x0000)
struct TLItemViewInterface_IsUsageExist final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLItemViewInterface_IsUsageExist) == 0x000001, "Wrong alignment on TLItemViewInterface_IsUsageExist");
static_assert(sizeof(TLItemViewInterface_IsUsageExist) == 0x000001, "Wrong size on TLItemViewInterface_IsUsageExist");
static_assert(offsetof(TLItemViewInterface_IsUsageExist, ReturnValue) == 0x000000, "Member 'TLItemViewInterface_IsUsageExist::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterInfoStatSettingDefault.OnUpdateChangedStatListVisible
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCharacterInfoStatSettingDefault_OnUpdateChangedStatListVisible final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterInfoStatSettingDefault_OnUpdateChangedStatListVisible) == 0x000001, "Wrong alignment on TLUserWidgetCharacterInfoStatSettingDefault_OnUpdateChangedStatListVisible");
static_assert(sizeof(TLUserWidgetCharacterInfoStatSettingDefault_OnUpdateChangedStatListVisible) == 0x000001, "Wrong size on TLUserWidgetCharacterInfoStatSettingDefault_OnUpdateChangedStatListVisible");
static_assert(offsetof(TLUserWidgetCharacterInfoStatSettingDefault_OnUpdateChangedStatListVisible, bInVisible) == 0x000000, "Member 'TLUserWidgetCharacterInfoStatSettingDefault_OnUpdateChangedStatListVisible::bInVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterInfoStatSettingDefault.OnUpdateExpandStatSetting
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCharacterInfoStatSettingDefault_OnUpdateExpandStatSetting final
{
public:
	bool                                          bInExpand;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterInfoStatSettingDefault_OnUpdateExpandStatSetting) == 0x000001, "Wrong alignment on TLUserWidgetCharacterInfoStatSettingDefault_OnUpdateExpandStatSetting");
static_assert(sizeof(TLUserWidgetCharacterInfoStatSettingDefault_OnUpdateExpandStatSetting) == 0x000001, "Wrong size on TLUserWidgetCharacterInfoStatSettingDefault_OnUpdateExpandStatSetting");
static_assert(offsetof(TLUserWidgetCharacterInfoStatSettingDefault_OnUpdateExpandStatSetting, bInExpand) == 0x000000, "Member 'TLUserWidgetCharacterInfoStatSettingDefault_OnUpdateExpandStatSetting::bInExpand' has a wrong offset!");

// Function TLClient.TLLevelStreamingHelper.OnLoadStreamLevelFinished
// 0x0004 (0x0004 - 0x0000)
struct TLLevelStreamingHelper_OnLoadStreamLevelFinished final
{
public:
	int32                                         Linkage;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLLevelStreamingHelper_OnLoadStreamLevelFinished) == 0x000004, "Wrong alignment on TLLevelStreamingHelper_OnLoadStreamLevelFinished");
static_assert(sizeof(TLLevelStreamingHelper_OnLoadStreamLevelFinished) == 0x000004, "Wrong size on TLLevelStreamingHelper_OnLoadStreamLevelFinished");
static_assert(offsetof(TLLevelStreamingHelper_OnLoadStreamLevelFinished, Linkage) == 0x000000, "Member 'TLLevelStreamingHelper_OnLoadStreamLevelFinished::Linkage' has a wrong offset!");

// Function TLClient.TLLevelStreamingHelper.OnUnloadStreamLevelFinished
// 0x0004 (0x0004 - 0x0000)
struct TLLevelStreamingHelper_OnUnloadStreamLevelFinished final
{
public:
	int32                                         Linkage;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLLevelStreamingHelper_OnUnloadStreamLevelFinished) == 0x000004, "Wrong alignment on TLLevelStreamingHelper_OnUnloadStreamLevelFinished");
static_assert(sizeof(TLLevelStreamingHelper_OnUnloadStreamLevelFinished) == 0x000004, "Wrong size on TLLevelStreamingHelper_OnUnloadStreamLevelFinished");
static_assert(offsetof(TLLevelStreamingHelper_OnUnloadStreamLevelFinished, Linkage) == 0x000000, "Member 'TLLevelStreamingHelper_OnUnloadStreamLevelFinished::Linkage' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionHistoryItem.OnDistributionState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildDistributionHistoryItem_OnDistributionState final
{
public:
	bool                                          InIsShowDistribution;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionHistoryItem_OnDistributionState) == 0x000001, "Wrong alignment on TLUserWidgetGuildDistributionHistoryItem_OnDistributionState");
static_assert(sizeof(TLUserWidgetGuildDistributionHistoryItem_OnDistributionState) == 0x000001, "Wrong size on TLUserWidgetGuildDistributionHistoryItem_OnDistributionState");
static_assert(offsetof(TLUserWidgetGuildDistributionHistoryItem_OnDistributionState, InIsShowDistribution) == 0x000000, "Member 'TLUserWidgetGuildDistributionHistoryItem_OnDistributionState::InIsShowDistribution' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionHistoryItem.OnItemSlotUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildDistributionHistoryItem_OnItemSlotUpdate final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionHistoryItem_OnItemSlotUpdate) == 0x000001, "Wrong alignment on TLUserWidgetGuildDistributionHistoryItem_OnItemSlotUpdate");
static_assert(sizeof(TLUserWidgetGuildDistributionHistoryItem_OnItemSlotUpdate) == 0x000001, "Wrong size on TLUserWidgetGuildDistributionHistoryItem_OnItemSlotUpdate");
static_assert(offsetof(TLUserWidgetGuildDistributionHistoryItem_OnItemSlotUpdate, InIsShow) == 0x000000, "Member 'TLUserWidgetGuildDistributionHistoryItem_OnItemSlotUpdate::InIsShow' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterSubtitleListItem.OnUpdateCurrentSelected
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCharacterSubtitleListItem_OnUpdateCurrentSelected final
{
public:
	bool                                          InSelected;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterSubtitleListItem_OnUpdateCurrentSelected) == 0x000001, "Wrong alignment on TLUserWidgetCharacterSubtitleListItem_OnUpdateCurrentSelected");
static_assert(sizeof(TLUserWidgetCharacterSubtitleListItem_OnUpdateCurrentSelected) == 0x000001, "Wrong size on TLUserWidgetCharacterSubtitleListItem_OnUpdateCurrentSelected");
static_assert(offsetof(TLUserWidgetCharacterSubtitleListItem_OnUpdateCurrentSelected, InSelected) == 0x000000, "Member 'TLUserWidgetCharacterSubtitleListItem_OnUpdateCurrentSelected::InSelected' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterSubtitleListItem.OnUpdateNewAcquire
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCharacterSubtitleListItem_OnUpdateNewAcquire final
{
public:
	bool                                          InNew;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterSubtitleListItem_OnUpdateNewAcquire) == 0x000001, "Wrong alignment on TLUserWidgetCharacterSubtitleListItem_OnUpdateNewAcquire");
static_assert(sizeof(TLUserWidgetCharacterSubtitleListItem_OnUpdateNewAcquire) == 0x000001, "Wrong size on TLUserWidgetCharacterSubtitleListItem_OnUpdateNewAcquire");
static_assert(offsetof(TLUserWidgetCharacterSubtitleListItem_OnUpdateNewAcquire, InNew) == 0x000000, "Member 'TLUserWidgetCharacterSubtitleListItem_OnUpdateNewAcquire::InNew' has a wrong offset!");

// Function TLClient.TLUserWidgetOccupationGuideBossStoneCondition.OnChangedColor
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetOccupationGuideBossStoneCondition_OnChangedColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOccupationGuideBossStoneCondition_OnChangedColor) == 0x000004, "Wrong alignment on TLUserWidgetOccupationGuideBossStoneCondition_OnChangedColor");
static_assert(sizeof(TLUserWidgetOccupationGuideBossStoneCondition_OnChangedColor) == 0x000010, "Wrong size on TLUserWidgetOccupationGuideBossStoneCondition_OnChangedColor");
static_assert(offsetof(TLUserWidgetOccupationGuideBossStoneCondition_OnChangedColor, InColor) == 0x000000, "Member 'TLUserWidgetOccupationGuideBossStoneCondition_OnChangedColor::InColor' has a wrong offset!");

// Function TLClient.TLUserWidgetOccupationGuideBossStoneCondition.OnGuildRelationByMe
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetOccupationGuideBossStoneCondition_OnGuildRelationByMe final
{
public:
	EGuildRelationship                            InRelation;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOccupationGuideBossStoneCondition_OnGuildRelationByMe) == 0x000001, "Wrong alignment on TLUserWidgetOccupationGuideBossStoneCondition_OnGuildRelationByMe");
static_assert(sizeof(TLUserWidgetOccupationGuideBossStoneCondition_OnGuildRelationByMe) == 0x000001, "Wrong size on TLUserWidgetOccupationGuideBossStoneCondition_OnGuildRelationByMe");
static_assert(offsetof(TLUserWidgetOccupationGuideBossStoneCondition_OnGuildRelationByMe, InRelation) == 0x000000, "Member 'TLUserWidgetOccupationGuideBossStoneCondition_OnGuildRelationByMe::InRelation' has a wrong offset!");

// Function TLClient.TLUserWidgetOccupationGuideBossStoneCondition.OnTopRank
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetOccupationGuideBossStoneCondition_OnTopRank final
{
public:
	bool                                          InIsTop;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOccupationGuideBossStoneCondition_OnTopRank) == 0x000001, "Wrong alignment on TLUserWidgetOccupationGuideBossStoneCondition_OnTopRank");
static_assert(sizeof(TLUserWidgetOccupationGuideBossStoneCondition_OnTopRank) == 0x000001, "Wrong size on TLUserWidgetOccupationGuideBossStoneCondition_OnTopRank");
static_assert(offsetof(TLUserWidgetOccupationGuideBossStoneCondition_OnTopRank, InIsTop) == 0x000000, "Member 'TLUserWidgetOccupationGuideBossStoneCondition_OnTopRank::InIsTop' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconIndicator.OnCreated
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconIndicator_OnCreated final
{
public:
	bool                                          InCreateInMinimap;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconIndicator_OnCreated) == 0x000001, "Wrong alignment on TLUserWidgetMapIconIndicator_OnCreated");
static_assert(sizeof(TLUserWidgetMapIconIndicator_OnCreated) == 0x000001, "Wrong size on TLUserWidgetMapIconIndicator_OnCreated");
static_assert(offsetof(TLUserWidgetMapIconIndicator_OnCreated, InCreateInMinimap) == 0x000000, "Member 'TLUserWidgetMapIconIndicator_OnCreated::InCreateInMinimap' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconIndicator.OnStopEmphasis
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconIndicator_OnStopEmphasis final
{
public:
	bool                                          bInPlayStopAnimation;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconIndicator_OnStopEmphasis) == 0x000001, "Wrong alignment on TLUserWidgetMapIconIndicator_OnStopEmphasis");
static_assert(sizeof(TLUserWidgetMapIconIndicator_OnStopEmphasis) == 0x000001, "Wrong size on TLUserWidgetMapIconIndicator_OnStopEmphasis");
static_assert(offsetof(TLUserWidgetMapIconIndicator_OnStopEmphasis, bInPlayStopAnimation) == 0x000000, "Member 'TLUserWidgetMapIconIndicator_OnStopEmphasis::bInPlayStopAnimation' has a wrong offset!");

// Function TLClient.TLMagicDollSceneControlActor.OnGrowUpComplete
// 0x0020 (0x0020 - 0x0000)
struct TLMagicDollSceneControlActor_OnGrowUpComplete final
{
public:
	struct FSoftObjectPath                        Sct;                                               // 0x0000(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         MaxLevelGrowUpLevelSequence;                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMagicDollSceneControlActor_OnGrowUpComplete) == 0x000008, "Wrong alignment on TLMagicDollSceneControlActor_OnGrowUpComplete");
static_assert(sizeof(TLMagicDollSceneControlActor_OnGrowUpComplete) == 0x000020, "Wrong size on TLMagicDollSceneControlActor_OnGrowUpComplete");
static_assert(offsetof(TLMagicDollSceneControlActor_OnGrowUpComplete, Sct) == 0x000000, "Member 'TLMagicDollSceneControlActor_OnGrowUpComplete::Sct' has a wrong offset!");
static_assert(offsetof(TLMagicDollSceneControlActor_OnGrowUpComplete, MaxLevelGrowUpLevelSequence) == 0x000018, "Member 'TLMagicDollSceneControlActor_OnGrowUpComplete::MaxLevelGrowUpLevelSequence' has a wrong offset!");

// Function TLClient.TLMagicDollSceneControlActor.OnSelect
// 0x0030 (0x0030 - 0x0000)
struct TLMagicDollSceneControlActor_OnSelect final
{
public:
	class FName                                   CustomSceneId;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHiveEntityData*                  HiveEntity;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ChangeSct;                                         // 0x0010(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAcquire;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnveiled;                                         // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLMagicDollSceneControlActor_OnSelect) == 0x000008, "Wrong alignment on TLMagicDollSceneControlActor_OnSelect");
static_assert(sizeof(TLMagicDollSceneControlActor_OnSelect) == 0x000030, "Wrong size on TLMagicDollSceneControlActor_OnSelect");
static_assert(offsetof(TLMagicDollSceneControlActor_OnSelect, CustomSceneId) == 0x000000, "Member 'TLMagicDollSceneControlActor_OnSelect::CustomSceneId' has a wrong offset!");
static_assert(offsetof(TLMagicDollSceneControlActor_OnSelect, HiveEntity) == 0x000008, "Member 'TLMagicDollSceneControlActor_OnSelect::HiveEntity' has a wrong offset!");
static_assert(offsetof(TLMagicDollSceneControlActor_OnSelect, ChangeSct) == 0x000010, "Member 'TLMagicDollSceneControlActor_OnSelect::ChangeSct' has a wrong offset!");
static_assert(offsetof(TLMagicDollSceneControlActor_OnSelect, bAcquire) == 0x000028, "Member 'TLMagicDollSceneControlActor_OnSelect::bAcquire' has a wrong offset!");
static_assert(offsetof(TLMagicDollSceneControlActor_OnSelect, bUnveiled) == 0x000029, "Member 'TLMagicDollSceneControlActor_OnSelect::bUnveiled' has a wrong offset!");

// Function TLClient.TLUserWidgetTabControl.HandleActiveWidgetChanged
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetTabControl_HandleActiveWidgetChanged final
{
public:
	int32                                         PrevIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewIndex;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTabControl_HandleActiveWidgetChanged) == 0x000004, "Wrong alignment on TLUserWidgetTabControl_HandleActiveWidgetChanged");
static_assert(sizeof(TLUserWidgetTabControl_HandleActiveWidgetChanged) == 0x000008, "Wrong size on TLUserWidgetTabControl_HandleActiveWidgetChanged");
static_assert(offsetof(TLUserWidgetTabControl_HandleActiveWidgetChanged, PrevIndex) == 0x000000, "Member 'TLUserWidgetTabControl_HandleActiveWidgetChanged::PrevIndex' has a wrong offset!");
static_assert(offsetof(TLUserWidgetTabControl_HandleActiveWidgetChanged, NewIndex) == 0x000004, "Member 'TLUserWidgetTabControl_HandleActiveWidgetChanged::NewIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetTabControl.SelectTabIndex
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetTabControl_SelectTabIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTabControl_SelectTabIndex) == 0x000004, "Wrong alignment on TLUserWidgetTabControl_SelectTabIndex");
static_assert(sizeof(TLUserWidgetTabControl_SelectTabIndex) == 0x000004, "Wrong size on TLUserWidgetTabControl_SelectTabIndex");
static_assert(offsetof(TLUserWidgetTabControl_SelectTabIndex, Index_0) == 0x000000, "Member 'TLUserWidgetTabControl_SelectTabIndex::Index_0' has a wrong offset!");

// Function TLClient.TLUserWidgetTabControl.SelectTabWidget
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetTabControl_SelectTabWidget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTabControl_SelectTabWidget) == 0x000008, "Wrong alignment on TLUserWidgetTabControl_SelectTabWidget");
static_assert(sizeof(TLUserWidgetTabControl_SelectTabWidget) == 0x000008, "Wrong size on TLUserWidgetTabControl_SelectTabWidget");
static_assert(offsetof(TLUserWidgetTabControl_SelectTabWidget, Widget) == 0x000000, "Member 'TLUserWidgetTabControl_SelectTabWidget::Widget' has a wrong offset!");

// Function TLClient.TLUserWidgetTabControl.GetActiveWidget
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetTabControl_GetActiveWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTabControl_GetActiveWidget) == 0x000008, "Wrong alignment on TLUserWidgetTabControl_GetActiveWidget");
static_assert(sizeof(TLUserWidgetTabControl_GetActiveWidget) == 0x000008, "Wrong size on TLUserWidgetTabControl_GetActiveWidget");
static_assert(offsetof(TLUserWidgetTabControl_GetActiveWidget, ReturnValue) == 0x000000, "Member 'TLUserWidgetTabControl_GetActiveWidget::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetTabControl.GetSelectTabIndex
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetTabControl_GetSelectTabIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTabControl_GetSelectTabIndex) == 0x000004, "Wrong alignment on TLUserWidgetTabControl_GetSelectTabIndex");
static_assert(sizeof(TLUserWidgetTabControl_GetSelectTabIndex) == 0x000004, "Wrong size on TLUserWidgetTabControl_GetSelectTabIndex");
static_assert(offsetof(TLUserWidgetTabControl_GetSelectTabIndex, ReturnValue) == 0x000000, "Member 'TLUserWidgetTabControl_GetSelectTabIndex::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetTabControl.GetWidgetSwitcher
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetTabControl_GetWidgetSwitcher final
{
public:
	class UTLWidgetSwitcher*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTabControl_GetWidgetSwitcher) == 0x000008, "Wrong alignment on TLUserWidgetTabControl_GetWidgetSwitcher");
static_assert(sizeof(TLUserWidgetTabControl_GetWidgetSwitcher) == 0x000008, "Wrong size on TLUserWidgetTabControl_GetWidgetSwitcher");
static_assert(offsetof(TLUserWidgetTabControl_GetWidgetSwitcher, ReturnValue) == 0x000000, "Member 'TLUserWidgetTabControl_GetWidgetSwitcher::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetBeautyshopCustomizeBase.OnPresetIconSelected
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetBeautyshopCustomizeBase_OnPresetIconSelected final
{
public:
	class UTLUserWidgetBeautyshopCustomizePresetIcon* SelectedWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetBeautyshopCustomizeBase_OnPresetIconSelected) == 0x000008, "Wrong alignment on TLUserWidgetBeautyshopCustomizeBase_OnPresetIconSelected");
static_assert(sizeof(TLUserWidgetBeautyshopCustomizeBase_OnPresetIconSelected) == 0x000008, "Wrong size on TLUserWidgetBeautyshopCustomizeBase_OnPresetIconSelected");
static_assert(offsetof(TLUserWidgetBeautyshopCustomizeBase_OnPresetIconSelected, SelectedWidget) == 0x000000, "Member 'TLUserWidgetBeautyshopCustomizeBase_OnPresetIconSelected::SelectedWidget' has a wrong offset!");

// Function TLClient.TLUserWidgetBeautyshopCustomizeBase.OnSwitchActivated
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetBeautyshopCustomizeBase_OnSwitchActivated final
{
public:
	bool                                          bSwitchActivated;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetBeautyshopCustomizeBase_OnSwitchActivated) == 0x000001, "Wrong alignment on TLUserWidgetBeautyshopCustomizeBase_OnSwitchActivated");
static_assert(sizeof(TLUserWidgetBeautyshopCustomizeBase_OnSwitchActivated) == 0x000001, "Wrong size on TLUserWidgetBeautyshopCustomizeBase_OnSwitchActivated");
static_assert(offsetof(TLUserWidgetBeautyshopCustomizeBase_OnSwitchActivated, bSwitchActivated) == 0x000000, "Member 'TLUserWidgetBeautyshopCustomizeBase_OnSwitchActivated::bSwitchActivated' has a wrong offset!");

// Function TLClient.TLUserWidgetCustomizeHistory.SelectIndex
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetCustomizeHistory_SelectIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCustomizeHistory_SelectIndex) == 0x000004, "Wrong alignment on TLUserWidgetCustomizeHistory_SelectIndex");
static_assert(sizeof(TLUserWidgetCustomizeHistory_SelectIndex) == 0x000004, "Wrong size on TLUserWidgetCustomizeHistory_SelectIndex");
static_assert(offsetof(TLUserWidgetCustomizeHistory_SelectIndex, InIndex) == 0x000000, "Member 'TLUserWidgetCustomizeHistory_SelectIndex::InIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildEmblemSlot.OnSetupLock
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildEmblemSlot_OnSetupLock final
{
public:
	bool                                          InIsLock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildEmblemSlot_OnSetupLock) == 0x000001, "Wrong alignment on TLUserWidgetGuildEmblemSlot_OnSetupLock");
static_assert(sizeof(TLUserWidgetGuildEmblemSlot_OnSetupLock) == 0x000001, "Wrong size on TLUserWidgetGuildEmblemSlot_OnSetupLock");
static_assert(offsetof(TLUserWidgetGuildEmblemSlot_OnSetupLock, InIsLock) == 0x000000, "Member 'TLUserWidgetGuildEmblemSlot_OnSetupLock::InIsLock' has a wrong offset!");

// Function TLClient.TLMultiModelSceneControlActor.IsPlayingModelSceneConti
// 0x000C (0x000C - 0x0000)
struct TLMultiModelSceneControlActor_IsPlayingModelSceneConti final
{
public:
	class FName                                   InTagName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLMultiModelSceneControlActor_IsPlayingModelSceneConti) == 0x000004, "Wrong alignment on TLMultiModelSceneControlActor_IsPlayingModelSceneConti");
static_assert(sizeof(TLMultiModelSceneControlActor_IsPlayingModelSceneConti) == 0x00000C, "Wrong size on TLMultiModelSceneControlActor_IsPlayingModelSceneConti");
static_assert(offsetof(TLMultiModelSceneControlActor_IsPlayingModelSceneConti, InTagName) == 0x000000, "Member 'TLMultiModelSceneControlActor_IsPlayingModelSceneConti::InTagName' has a wrong offset!");
static_assert(offsetof(TLMultiModelSceneControlActor_IsPlayingModelSceneConti, ReturnValue) == 0x000008, "Member 'TLMultiModelSceneControlActor_IsPlayingModelSceneConti::ReturnValue' has a wrong offset!");

// Function TLClient.TLMultiModelSceneControlActor.PlayModelSceneConti
// 0x0028 (0x0028 - 0x0000)
struct TLMultiModelSceneControlActor_PlayModelSceneConti final
{
public:
	class FName                                   InTagName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        InSceneContiPath;                                  // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopCurrentSCT;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForcePlay;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLMultiModelSceneControlActor_PlayModelSceneConti) == 0x000008, "Wrong alignment on TLMultiModelSceneControlActor_PlayModelSceneConti");
static_assert(sizeof(TLMultiModelSceneControlActor_PlayModelSceneConti) == 0x000028, "Wrong size on TLMultiModelSceneControlActor_PlayModelSceneConti");
static_assert(offsetof(TLMultiModelSceneControlActor_PlayModelSceneConti, InTagName) == 0x000000, "Member 'TLMultiModelSceneControlActor_PlayModelSceneConti::InTagName' has a wrong offset!");
static_assert(offsetof(TLMultiModelSceneControlActor_PlayModelSceneConti, InSceneContiPath) == 0x000008, "Member 'TLMultiModelSceneControlActor_PlayModelSceneConti::InSceneContiPath' has a wrong offset!");
static_assert(offsetof(TLMultiModelSceneControlActor_PlayModelSceneConti, bStopCurrentSCT) == 0x000020, "Member 'TLMultiModelSceneControlActor_PlayModelSceneConti::bStopCurrentSCT' has a wrong offset!");
static_assert(offsetof(TLMultiModelSceneControlActor_PlayModelSceneConti, bForcePlay) == 0x000021, "Member 'TLMultiModelSceneControlActor_PlayModelSceneConti::bForcePlay' has a wrong offset!");

// Function TLClient.TLMultiModelSceneControlActor.SetModelMeshRotation
// 0x0014 (0x0014 - 0x0000)
struct TLMultiModelSceneControlActor_SetModelMeshRotation final
{
public:
	class FName                                   InTagName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotator;                                         // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMultiModelSceneControlActor_SetModelMeshRotation) == 0x000004, "Wrong alignment on TLMultiModelSceneControlActor_SetModelMeshRotation");
static_assert(sizeof(TLMultiModelSceneControlActor_SetModelMeshRotation) == 0x000014, "Wrong size on TLMultiModelSceneControlActor_SetModelMeshRotation");
static_assert(offsetof(TLMultiModelSceneControlActor_SetModelMeshRotation, InTagName) == 0x000000, "Member 'TLMultiModelSceneControlActor_SetModelMeshRotation::InTagName' has a wrong offset!");
static_assert(offsetof(TLMultiModelSceneControlActor_SetModelMeshRotation, InRotator) == 0x000008, "Member 'TLMultiModelSceneControlActor_SetModelMeshRotation::InRotator' has a wrong offset!");

// Function TLClient.TLMultiModelSceneControlActor.SetVisible
// 0x000C (0x000C - 0x0000)
struct TLMultiModelSceneControlActor_SetVisible final
{
public:
	class FName                                   InTagName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLMultiModelSceneControlActor_SetVisible) == 0x000004, "Wrong alignment on TLMultiModelSceneControlActor_SetVisible");
static_assert(sizeof(TLMultiModelSceneControlActor_SetVisible) == 0x00000C, "Wrong size on TLMultiModelSceneControlActor_SetVisible");
static_assert(offsetof(TLMultiModelSceneControlActor_SetVisible, InTagName) == 0x000000, "Member 'TLMultiModelSceneControlActor_SetVisible::InTagName' has a wrong offset!");
static_assert(offsetof(TLMultiModelSceneControlActor_SetVisible, bVisible) == 0x000008, "Member 'TLMultiModelSceneControlActor_SetVisible::bVisible' has a wrong offset!");

// Function TLClient.TLMultiModelSceneControlActor.StopModelSceneConti
// 0x0008 (0x0008 - 0x0000)
struct TLMultiModelSceneControlActor_StopModelSceneConti final
{
public:
	class FName                                   InTagName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLMultiModelSceneControlActor_StopModelSceneConti) == 0x000004, "Wrong alignment on TLMultiModelSceneControlActor_StopModelSceneConti");
static_assert(sizeof(TLMultiModelSceneControlActor_StopModelSceneConti) == 0x000008, "Wrong size on TLMultiModelSceneControlActor_StopModelSceneConti");
static_assert(offsetof(TLMultiModelSceneControlActor_StopModelSceneConti, InTagName) == 0x000000, "Member 'TLMultiModelSceneControlActor_StopModelSceneConti::InTagName' has a wrong offset!");

// Function TLClient.TLUserWidgetChatMini.OnSetUseFloating
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetChatMini_OnSetUseFloating final
{
public:
	bool                                          bInUseFloating;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatMini_OnSetUseFloating) == 0x000001, "Wrong alignment on TLUserWidgetChatMini_OnSetUseFloating");
static_assert(sizeof(TLUserWidgetChatMini_OnSetUseFloating) == 0x000001, "Wrong size on TLUserWidgetChatMini_OnSetUseFloating");
static_assert(offsetof(TLUserWidgetChatMini_OnSetUseFloating, bInUseFloating) == 0x000000, "Member 'TLUserWidgetChatMini_OnSetUseFloating::bInUseFloating' has a wrong offset!");

// Function TLClient.TLUserWidgetTargetScanSettingSlider.HandleSliderValueChanged
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetTargetScanSettingSlider_HandleSliderValueChanged final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTargetScanSettingSlider_HandleSliderValueChanged) == 0x000004, "Wrong alignment on TLUserWidgetTargetScanSettingSlider_HandleSliderValueChanged");
static_assert(sizeof(TLUserWidgetTargetScanSettingSlider_HandleSliderValueChanged) == 0x000004, "Wrong size on TLUserWidgetTargetScanSettingSlider_HandleSliderValueChanged");
static_assert(offsetof(TLUserWidgetTargetScanSettingSlider_HandleSliderValueChanged, InValue) == 0x000000, "Member 'TLUserWidgetTargetScanSettingSlider_HandleSliderValueChanged::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetAccountStatusAlarmQuickButton.OnUpdateAlarmAnimation
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetAccountStatusAlarmQuickButton_OnUpdateAlarmAnimation final
{
public:
	bool                                          InPlay;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAccountStatusAlarmQuickButton_OnUpdateAlarmAnimation) == 0x000001, "Wrong alignment on TLUserWidgetAccountStatusAlarmQuickButton_OnUpdateAlarmAnimation");
static_assert(sizeof(TLUserWidgetAccountStatusAlarmQuickButton_OnUpdateAlarmAnimation) == 0x000001, "Wrong size on TLUserWidgetAccountStatusAlarmQuickButton_OnUpdateAlarmAnimation");
static_assert(offsetof(TLUserWidgetAccountStatusAlarmQuickButton_OnUpdateAlarmAnimation, InPlay) == 0x000000, "Member 'TLUserWidgetAccountStatusAlarmQuickButton_OnUpdateAlarmAnimation::InPlay' has a wrong offset!");

// Function TLClient.TLUserWidgetActionGuideButton.GetActionName
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetActionGuideButton_GetActionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetActionGuideButton_GetActionName) == 0x000004, "Wrong alignment on TLUserWidgetActionGuideButton_GetActionName");
static_assert(sizeof(TLUserWidgetActionGuideButton_GetActionName) == 0x000008, "Wrong size on TLUserWidgetActionGuideButton_GetActionName");
static_assert(offsetof(TLUserWidgetActionGuideButton_GetActionName, ReturnValue) == 0x000000, "Member 'TLUserWidgetActionGuideButton_GetActionName::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostume.BP_HandleChangeUIPlatformImpl
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostume_BP_HandleChangeUIPlatformImpl final
{
public:
	ETLUIPlatform                                 InPlatform;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostume_BP_HandleChangeUIPlatformImpl) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostume_BP_HandleChangeUIPlatformImpl");
static_assert(sizeof(TLUserWidgetArmorCostume_BP_HandleChangeUIPlatformImpl) == 0x000001, "Wrong size on TLUserWidgetArmorCostume_BP_HandleChangeUIPlatformImpl");
static_assert(offsetof(TLUserWidgetArmorCostume_BP_HandleChangeUIPlatformImpl, InPlatform) == 0x000000, "Member 'TLUserWidgetArmorCostume_BP_HandleChangeUIPlatformImpl::InPlatform' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostume.OnUIToggleEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostume_OnUIToggleEvent final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostume_OnUIToggleEvent) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostume_OnUIToggleEvent");
static_assert(sizeof(TLUserWidgetArmorCostume_OnUIToggleEvent) == 0x000001, "Wrong size on TLUserWidgetArmorCostume_OnUIToggleEvent");
static_assert(offsetof(TLUserWidgetArmorCostume_OnUIToggleEvent, bVisible) == 0x000000, "Member 'TLUserWidgetArmorCostume_OnUIToggleEvent::bVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitOpenSlot.OnExistItemTrait
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitOpenSlot_OnExistItemTrait final
{
public:
	bool                                          InExistTrait;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitOpenSlot_OnExistItemTrait) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitOpenSlot_OnExistItemTrait");
static_assert(sizeof(TLUserWidgetItemTraitOpenSlot_OnExistItemTrait) == 0x000001, "Wrong size on TLUserWidgetItemTraitOpenSlot_OnExistItemTrait");
static_assert(offsetof(TLUserWidgetItemTraitOpenSlot_OnExistItemTrait, InExistTrait) == 0x000000, "Member 'TLUserWidgetItemTraitOpenSlot_OnExistItemTrait::InExistTrait' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitOpenSlot.OnVisibleEnchantLevel
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitOpenSlot_OnVisibleEnchantLevel final
{
public:
	bool                                          InIsVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitOpenSlot_OnVisibleEnchantLevel) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitOpenSlot_OnVisibleEnchantLevel");
static_assert(sizeof(TLUserWidgetItemTraitOpenSlot_OnVisibleEnchantLevel) == 0x000001, "Wrong size on TLUserWidgetItemTraitOpenSlot_OnVisibleEnchantLevel");
static_assert(offsetof(TLUserWidgetItemTraitOpenSlot_OnVisibleEnchantLevel, InIsVisible) == 0x000000, "Member 'TLUserWidgetItemTraitOpenSlot_OnVisibleEnchantLevel::InIsVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetDeveloperLetter.OnUpdateLetterTypeEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDeveloperLetter_OnUpdateLetterTypeEvent final
{
public:
	ETLDeveloperLetterType                        LetterType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDeveloperLetter_OnUpdateLetterTypeEvent) == 0x000001, "Wrong alignment on TLUserWidgetDeveloperLetter_OnUpdateLetterTypeEvent");
static_assert(sizeof(TLUserWidgetDeveloperLetter_OnUpdateLetterTypeEvent) == 0x000001, "Wrong size on TLUserWidgetDeveloperLetter_OnUpdateLetterTypeEvent");
static_assert(offsetof(TLUserWidgetDeveloperLetter_OnUpdateLetterTypeEvent, LetterType) == 0x000000, "Member 'TLUserWidgetDeveloperLetter_OnUpdateLetterTypeEvent::LetterType' has a wrong offset!");

// Function TLClient.TLPolymorphSceneControlActor.OnGrowUpComplete
// 0x0020 (0x0020 - 0x0000)
struct TLPolymorphSceneControlActor_OnGrowUpComplete final
{
public:
	struct FSoftObjectPath                        Sct;                                               // 0x0000(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         MaxLevelGrowUpLevelSequence;                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLPolymorphSceneControlActor_OnGrowUpComplete) == 0x000008, "Wrong alignment on TLPolymorphSceneControlActor_OnGrowUpComplete");
static_assert(sizeof(TLPolymorphSceneControlActor_OnGrowUpComplete) == 0x000020, "Wrong size on TLPolymorphSceneControlActor_OnGrowUpComplete");
static_assert(offsetof(TLPolymorphSceneControlActor_OnGrowUpComplete, Sct) == 0x000000, "Member 'TLPolymorphSceneControlActor_OnGrowUpComplete::Sct' has a wrong offset!");
static_assert(offsetof(TLPolymorphSceneControlActor_OnGrowUpComplete, MaxLevelGrowUpLevelSequence) == 0x000018, "Member 'TLPolymorphSceneControlActor_OnGrowUpComplete::MaxLevelGrowUpLevelSequence' has a wrong offset!");

// Function TLClient.TLPolymorphSceneControlActor.OnSelect
// 0x0030 (0x0030 - 0x0000)
struct TLPolymorphSceneControlActor_OnSelect final
{
public:
	class FName                                   CustomSceneId;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHiveEntityData*                  HiveEntity;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ChangeSct;                                         // 0x0010(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAcquire;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnveiled;                                         // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLPolymorphSceneControlActor_OnSelect) == 0x000008, "Wrong alignment on TLPolymorphSceneControlActor_OnSelect");
static_assert(sizeof(TLPolymorphSceneControlActor_OnSelect) == 0x000030, "Wrong size on TLPolymorphSceneControlActor_OnSelect");
static_assert(offsetof(TLPolymorphSceneControlActor_OnSelect, CustomSceneId) == 0x000000, "Member 'TLPolymorphSceneControlActor_OnSelect::CustomSceneId' has a wrong offset!");
static_assert(offsetof(TLPolymorphSceneControlActor_OnSelect, HiveEntity) == 0x000008, "Member 'TLPolymorphSceneControlActor_OnSelect::HiveEntity' has a wrong offset!");
static_assert(offsetof(TLPolymorphSceneControlActor_OnSelect, ChangeSct) == 0x000010, "Member 'TLPolymorphSceneControlActor_OnSelect::ChangeSct' has a wrong offset!");
static_assert(offsetof(TLPolymorphSceneControlActor_OnSelect, bAcquire) == 0x000028, "Member 'TLPolymorphSceneControlActor_OnSelect::bAcquire' has a wrong offset!");
static_assert(offsetof(TLPolymorphSceneControlActor_OnSelect, bUnveiled) == 0x000029, "Member 'TLPolymorphSceneControlActor_OnSelect::bUnveiled' has a wrong offset!");

// Function TLClient.TLUserWidgetOptionMacroPanel.FilterInput_OnTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetOptionMacroPanel_FilterInput_OnTextChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOptionMacroPanel_FilterInput_OnTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetOptionMacroPanel_FilterInput_OnTextChanged");
static_assert(sizeof(TLUserWidgetOptionMacroPanel_FilterInput_OnTextChanged) == 0x000018, "Wrong size on TLUserWidgetOptionMacroPanel_FilterInput_OnTextChanged");
static_assert(offsetof(TLUserWidgetOptionMacroPanel_FilterInput_OnTextChanged, InText) == 0x000000, "Member 'TLUserWidgetOptionMacroPanel_FilterInput_OnTextChanged::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeCustomizePatternSlotPanel.IsSelectedPatternSlot
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeCustomizePatternSlotPanel_IsSelectedPatternSlot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeCustomizePatternSlotPanel_IsSelectedPatternSlot) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeCustomizePatternSlotPanel_IsSelectedPatternSlot");
static_assert(sizeof(TLUserWidgetArmorCostumeCustomizePatternSlotPanel_IsSelectedPatternSlot) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeCustomizePatternSlotPanel_IsSelectedPatternSlot");
static_assert(offsetof(TLUserWidgetArmorCostumeCustomizePatternSlotPanel_IsSelectedPatternSlot, ReturnValue) == 0x000000, "Member 'TLUserWidgetArmorCostumeCustomizePatternSlotPanel_IsSelectedPatternSlot::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeCustomizePatternSlotPanel.OnClickHideAndExpandButtonImpl
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeCustomizePatternSlotPanel_OnClickHideAndExpandButtonImpl final
{
public:
	bool                                          bExpand;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeCustomizePatternSlotPanel_OnClickHideAndExpandButtonImpl) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeCustomizePatternSlotPanel_OnClickHideAndExpandButtonImpl");
static_assert(sizeof(TLUserWidgetArmorCostumeCustomizePatternSlotPanel_OnClickHideAndExpandButtonImpl) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeCustomizePatternSlotPanel_OnClickHideAndExpandButtonImpl");
static_assert(offsetof(TLUserWidgetArmorCostumeCustomizePatternSlotPanel_OnClickHideAndExpandButtonImpl, bExpand) == 0x000000, "Member 'TLUserWidgetArmorCostumeCustomizePatternSlotPanel_OnClickHideAndExpandButtonImpl::bExpand' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeCustomizePatternSlotPanel.OnShowPatternPalette
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeCustomizePatternSlotPanel_OnShowPatternPalette final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeCustomizePatternSlotPanel_OnShowPatternPalette) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeCustomizePatternSlotPanel_OnShowPatternPalette");
static_assert(sizeof(TLUserWidgetArmorCostumeCustomizePatternSlotPanel_OnShowPatternPalette) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeCustomizePatternSlotPanel_OnShowPatternPalette");
static_assert(offsetof(TLUserWidgetArmorCostumeCustomizePatternSlotPanel_OnShowPatternPalette, bShow) == 0x000000, "Member 'TLUserWidgetArmorCostumeCustomizePatternSlotPanel_OnShowPatternPalette::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetChatGroupOptionInvitation.OnInputTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetChatGroupOptionInvitation_OnInputTextChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatGroupOptionInvitation_OnInputTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetChatGroupOptionInvitation_OnInputTextChanged");
static_assert(sizeof(TLUserWidgetChatGroupOptionInvitation_OnInputTextChanged) == 0x000018, "Wrong size on TLUserWidgetChatGroupOptionInvitation_OnInputTextChanged");
static_assert(offsetof(TLUserWidgetChatGroupOptionInvitation_OnInputTextChanged, InInputText) == 0x000000, "Member 'TLUserWidgetChatGroupOptionInvitation_OnInputTextChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetChatGroupOptionInvitation.OnInputTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetChatGroupOptionInvitation_OnInputTextCommitted final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetChatGroupOptionInvitation_OnInputTextCommitted) == 0x000008, "Wrong alignment on TLUserWidgetChatGroupOptionInvitation_OnInputTextCommitted");
static_assert(sizeof(TLUserWidgetChatGroupOptionInvitation_OnInputTextCommitted) == 0x000020, "Wrong size on TLUserWidgetChatGroupOptionInvitation_OnInputTextCommitted");
static_assert(offsetof(TLUserWidgetChatGroupOptionInvitation_OnInputTextCommitted, InInputText) == 0x000000, "Member 'TLUserWidgetChatGroupOptionInvitation_OnInputTextCommitted::InInputText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetChatGroupOptionInvitation_OnInputTextCommitted, InCommitType) == 0x000018, "Member 'TLUserWidgetChatGroupOptionInvitation_OnInputTextCommitted::InCommitType' has a wrong offset!");

// Function TLClient.TLTLUserWidgetMapIconIndoor.EventDungeonEnterBtnShow
// 0x0001 (0x0001 - 0x0000)
struct TLTLUserWidgetMapIconIndoor_EventDungeonEnterBtnShow final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTLUserWidgetMapIconIndoor_EventDungeonEnterBtnShow) == 0x000001, "Wrong alignment on TLTLUserWidgetMapIconIndoor_EventDungeonEnterBtnShow");
static_assert(sizeof(TLTLUserWidgetMapIconIndoor_EventDungeonEnterBtnShow) == 0x000001, "Wrong size on TLTLUserWidgetMapIconIndoor_EventDungeonEnterBtnShow");
static_assert(offsetof(TLTLUserWidgetMapIconIndoor_EventDungeonEnterBtnShow, bInShow) == 0x000000, "Member 'TLTLUserWidgetMapIconIndoor_EventDungeonEnterBtnShow::bInShow' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimapZoom.OnZoomScaleChanged
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetMinimapZoom_OnZoomScaleChanged final
{
public:
	float                                         InScale;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimapZoom_OnZoomScaleChanged) == 0x000004, "Wrong alignment on TLUserWidgetMinimapZoom_OnZoomScaleChanged");
static_assert(sizeof(TLUserWidgetMinimapZoom_OnZoomScaleChanged) == 0x000004, "Wrong size on TLUserWidgetMinimapZoom_OnZoomScaleChanged");
static_assert(offsetof(TLUserWidgetMinimapZoom_OnZoomScaleChanged, InScale) == 0x000000, "Member 'TLUserWidgetMinimapZoom_OnZoomScaleChanged::InScale' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconFieldBoss.OnFocusAnimation
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconFieldBoss_OnFocusAnimation final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconFieldBoss_OnFocusAnimation) == 0x000001, "Wrong alignment on TLUserWidgetMapIconFieldBoss_OnFocusAnimation");
static_assert(sizeof(TLUserWidgetMapIconFieldBoss_OnFocusAnimation) == 0x000001, "Wrong size on TLUserWidgetMapIconFieldBoss_OnFocusAnimation");
static_assert(offsetof(TLUserWidgetMapIconFieldBoss_OnFocusAnimation, IsEnable) == 0x000000, "Member 'TLUserWidgetMapIconFieldBoss_OnFocusAnimation::IsEnable' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconFieldBoss.OnUpdateScheduleType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconFieldBoss_OnUpdateScheduleType final
{
public:
	ETLEventScheduleType                          InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconFieldBoss_OnUpdateScheduleType) == 0x000001, "Wrong alignment on TLUserWidgetMapIconFieldBoss_OnUpdateScheduleType");
static_assert(sizeof(TLUserWidgetMapIconFieldBoss_OnUpdateScheduleType) == 0x000001, "Wrong size on TLUserWidgetMapIconFieldBoss_OnUpdateScheduleType");
static_assert(offsetof(TLUserWidgetMapIconFieldBoss_OnUpdateScheduleType, InType) == 0x000000, "Member 'TLUserWidgetMapIconFieldBoss_OnUpdateScheduleType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetAbnormalStateSlotTooltip.OnUpdateGroupText
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetAbnormalStateSlotTooltip_OnUpdateGroupText final
{
public:
	bool                                          bInIsGroup;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAbnormalStateSlotTooltip_OnUpdateGroupText) == 0x000001, "Wrong alignment on TLUserWidgetAbnormalStateSlotTooltip_OnUpdateGroupText");
static_assert(sizeof(TLUserWidgetAbnormalStateSlotTooltip_OnUpdateGroupText) == 0x000001, "Wrong size on TLUserWidgetAbnormalStateSlotTooltip_OnUpdateGroupText");
static_assert(offsetof(TLUserWidgetAbnormalStateSlotTooltip_OnUpdateGroupText, bInIsGroup) == 0x000000, "Member 'TLUserWidgetAbnormalStateSlotTooltip_OnUpdateGroupText::bInIsGroup' has a wrong offset!");

// Function TLClient.TLSkillLevelUpSceneControlActor.OnResult
// 0x0004 (0x0004 - 0x0000)
struct TLSkillLevelUpSceneControlActor_OnResult final
{
public:
	int32                                         InSuccessIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSkillLevelUpSceneControlActor_OnResult) == 0x000004, "Wrong alignment on TLSkillLevelUpSceneControlActor_OnResult");
static_assert(sizeof(TLSkillLevelUpSceneControlActor_OnResult) == 0x000004, "Wrong size on TLSkillLevelUpSceneControlActor_OnResult");
static_assert(offsetof(TLSkillLevelUpSceneControlActor_OnResult, InSuccessIndex) == 0x000000, "Member 'TLSkillLevelUpSceneControlActor_OnResult::InSuccessIndex' has a wrong offset!");

// Function TLClient.TLSkillLevelUpSceneControlActor.OnShowLevelUpUI
// 0x0001 (0x0001 - 0x0000)
struct TLSkillLevelUpSceneControlActor_OnShowLevelUpUI final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSkillLevelUpSceneControlActor_OnShowLevelUpUI) == 0x000001, "Wrong alignment on TLSkillLevelUpSceneControlActor_OnShowLevelUpUI");
static_assert(sizeof(TLSkillLevelUpSceneControlActor_OnShowLevelUpUI) == 0x000001, "Wrong size on TLSkillLevelUpSceneControlActor_OnShowLevelUpUI");
static_assert(offsetof(TLSkillLevelUpSceneControlActor_OnShowLevelUpUI, bInShow) == 0x000000, "Member 'TLSkillLevelUpSceneControlActor_OnShowLevelUpUI::bInShow' has a wrong offset!");

// Function TLClient.TLSkillLevelUpSceneControlActor.OnShowLongPress
// 0x0001 (0x0001 - 0x0000)
struct TLSkillLevelUpSceneControlActor_OnShowLongPress final
{
public:
	bool                                          bPress;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSkillLevelUpSceneControlActor_OnShowLongPress) == 0x000001, "Wrong alignment on TLSkillLevelUpSceneControlActor_OnShowLongPress");
static_assert(sizeof(TLSkillLevelUpSceneControlActor_OnShowLongPress) == 0x000001, "Wrong size on TLSkillLevelUpSceneControlActor_OnShowLongPress");
static_assert(offsetof(TLSkillLevelUpSceneControlActor_OnShowLongPress, bPress) == 0x000000, "Member 'TLSkillLevelUpSceneControlActor_OnShowLongPress::bPress' has a wrong offset!");

// Function TLClient.TLUserWidgetArenaRecordEntry.SetRPDiff
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArenaRecordEntry_SetRPDiff final
{
public:
	bool                                          bUp;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArenaRecordEntry_SetRPDiff) == 0x000001, "Wrong alignment on TLUserWidgetArenaRecordEntry_SetRPDiff");
static_assert(sizeof(TLUserWidgetArenaRecordEntry_SetRPDiff) == 0x000001, "Wrong size on TLUserWidgetArenaRecordEntry_SetRPDiff");
static_assert(offsetof(TLUserWidgetArenaRecordEntry_SetRPDiff, bUp) == 0x000000, "Member 'TLUserWidgetArenaRecordEntry_SetRPDiff::bUp' has a wrong offset!");

// Function TLClient.TLSoundStatics.PostUIEvent
// 0x0010 (0x0010 - 0x0000)
struct TLSoundStatics_PostUIEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLSoundEvent*                          In_pEvent;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSoundStatics_PostUIEvent) == 0x000008, "Wrong alignment on TLSoundStatics_PostUIEvent");
static_assert(sizeof(TLSoundStatics_PostUIEvent) == 0x000010, "Wrong size on TLSoundStatics_PostUIEvent");
static_assert(offsetof(TLSoundStatics_PostUIEvent, WorldContextObject) == 0x000000, "Member 'TLSoundStatics_PostUIEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TLSoundStatics_PostUIEvent, In_pEvent) == 0x000008, "Member 'TLSoundStatics_PostUIEvent::In_pEvent' has a wrong offset!");

// Function TLClient.TLSoundStatics.StopAllUISounds
// 0x0008 (0x0008 - 0x0000)
struct TLSoundStatics_StopAllUISounds final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSoundStatics_StopAllUISounds) == 0x000008, "Wrong alignment on TLSoundStatics_StopAllUISounds");
static_assert(sizeof(TLSoundStatics_StopAllUISounds) == 0x000008, "Wrong size on TLSoundStatics_StopAllUISounds");
static_assert(offsetof(TLSoundStatics_StopAllUISounds, WorldContextObject) == 0x000000, "Member 'TLSoundStatics_StopAllUISounds::WorldContextObject' has a wrong offset!");

// Function TLClient.TLSpecialShopSceneControlActor.OnChangeSceneType
// 0x0008 (0x0008 - 0x0000)
struct TLSpecialShopSceneControlActor_OnChangeSceneType final
{
public:
	class FName                                   InType;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLSpecialShopSceneControlActor_OnChangeSceneType) == 0x000004, "Wrong alignment on TLSpecialShopSceneControlActor_OnChangeSceneType");
static_assert(sizeof(TLSpecialShopSceneControlActor_OnChangeSceneType) == 0x000008, "Wrong size on TLSpecialShopSceneControlActor_OnChangeSceneType");
static_assert(offsetof(TLSpecialShopSceneControlActor_OnChangeSceneType, InType) == 0x000000, "Member 'TLSpecialShopSceneControlActor_OnChangeSceneType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetActionCameraButton.OnUpdateActionCameraState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetActionCameraButton_OnUpdateActionCameraState final
{
public:
	bool                                          InbActionCameraMode;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetActionCameraButton_OnUpdateActionCameraState) == 0x000001, "Wrong alignment on TLUserWidgetActionCameraButton_OnUpdateActionCameraState");
static_assert(sizeof(TLUserWidgetActionCameraButton_OnUpdateActionCameraState) == 0x000001, "Wrong size on TLUserWidgetActionCameraButton_OnUpdateActionCameraState");
static_assert(offsetof(TLUserWidgetActionCameraButton_OnUpdateActionCameraState, InbActionCameraMode) == 0x000000, "Member 'TLUserWidgetActionCameraButton_OnUpdateActionCameraState::InbActionCameraMode' has a wrong offset!");

// Function TLClient.TLUserWidgetCustomizeMidCategoryFrames.OnActiveWidgetChange
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetCustomizeMidCategoryFrames_OnActiveWidgetChange final
{
public:
	int32                                         InPrevIdx;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCurIdx;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCustomizeMidCategoryFrames_OnActiveWidgetChange) == 0x000004, "Wrong alignment on TLUserWidgetCustomizeMidCategoryFrames_OnActiveWidgetChange");
static_assert(sizeof(TLUserWidgetCustomizeMidCategoryFrames_OnActiveWidgetChange) == 0x000008, "Wrong size on TLUserWidgetCustomizeMidCategoryFrames_OnActiveWidgetChange");
static_assert(offsetof(TLUserWidgetCustomizeMidCategoryFrames_OnActiveWidgetChange, InPrevIdx) == 0x000000, "Member 'TLUserWidgetCustomizeMidCategoryFrames_OnActiveWidgetChange::InPrevIdx' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCustomizeMidCategoryFrames_OnActiveWidgetChange, InCurIdx) == 0x000004, "Member 'TLUserWidgetCustomizeMidCategoryFrames_OnActiveWidgetChange::InCurIdx' has a wrong offset!");

// Function TLClient.TLTestUserWidgetLogger.Logger_FOnCheckBoxComponentStateChanged
// 0x0001 (0x0001 - 0x0000)
struct TLTestUserWidgetLogger_Logger_FOnCheckBoxComponentStateChanged final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTestUserWidgetLogger_Logger_FOnCheckBoxComponentStateChanged) == 0x000001, "Wrong alignment on TLTestUserWidgetLogger_Logger_FOnCheckBoxComponentStateChanged");
static_assert(sizeof(TLTestUserWidgetLogger_Logger_FOnCheckBoxComponentStateChanged) == 0x000001, "Wrong size on TLTestUserWidgetLogger_Logger_FOnCheckBoxComponentStateChanged");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnCheckBoxComponentStateChanged, bIsChecked) == 0x000000, "Member 'TLTestUserWidgetLogger_Logger_FOnCheckBoxComponentStateChanged::bIsChecked' has a wrong offset!");

// Function TLClient.TLTestUserWidgetLogger.Logger_FOnEditableTextBoxChangedEvent
// 0x0018 (0x0018 - 0x0000)
struct TLTestUserWidgetLogger_Logger_FOnEditableTextBoxChangedEvent final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTestUserWidgetLogger_Logger_FOnEditableTextBoxChangedEvent) == 0x000008, "Wrong alignment on TLTestUserWidgetLogger_Logger_FOnEditableTextBoxChangedEvent");
static_assert(sizeof(TLTestUserWidgetLogger_Logger_FOnEditableTextBoxChangedEvent) == 0x000018, "Wrong size on TLTestUserWidgetLogger_Logger_FOnEditableTextBoxChangedEvent");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnEditableTextBoxChangedEvent, Text) == 0x000000, "Member 'TLTestUserWidgetLogger_Logger_FOnEditableTextBoxChangedEvent::Text' has a wrong offset!");

// Function TLClient.TLTestUserWidgetLogger.Logger_FOnEditableTextBoxCommittedEvent
// 0x0020 (0x0020 - 0x0000)
struct TLTestUserWidgetLogger_Logger_FOnEditableTextBoxCommittedEvent final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLTestUserWidgetLogger_Logger_FOnEditableTextBoxCommittedEvent) == 0x000008, "Wrong alignment on TLTestUserWidgetLogger_Logger_FOnEditableTextBoxCommittedEvent");
static_assert(sizeof(TLTestUserWidgetLogger_Logger_FOnEditableTextBoxCommittedEvent) == 0x000020, "Wrong size on TLTestUserWidgetLogger_Logger_FOnEditableTextBoxCommittedEvent");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnEditableTextBoxCommittedEvent, Text) == 0x000000, "Member 'TLTestUserWidgetLogger_Logger_FOnEditableTextBoxCommittedEvent::Text' has a wrong offset!");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnEditableTextBoxCommittedEvent, CommitMethod) == 0x000018, "Member 'TLTestUserWidgetLogger_Logger_FOnEditableTextBoxCommittedEvent::CommitMethod' has a wrong offset!");

// Function TLClient.TLTestUserWidgetLogger.Logger_FOnEditableTextChangedEvent
// 0x0018 (0x0018 - 0x0000)
struct TLTestUserWidgetLogger_Logger_FOnEditableTextChangedEvent final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTestUserWidgetLogger_Logger_FOnEditableTextChangedEvent) == 0x000008, "Wrong alignment on TLTestUserWidgetLogger_Logger_FOnEditableTextChangedEvent");
static_assert(sizeof(TLTestUserWidgetLogger_Logger_FOnEditableTextChangedEvent) == 0x000018, "Wrong size on TLTestUserWidgetLogger_Logger_FOnEditableTextChangedEvent");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnEditableTextChangedEvent, Text) == 0x000000, "Member 'TLTestUserWidgetLogger_Logger_FOnEditableTextChangedEvent::Text' has a wrong offset!");

// Function TLClient.TLTestUserWidgetLogger.Logger_FOnEditableTextCommittedEvent
// 0x0020 (0x0020 - 0x0000)
struct TLTestUserWidgetLogger_Logger_FOnEditableTextCommittedEvent final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLTestUserWidgetLogger_Logger_FOnEditableTextCommittedEvent) == 0x000008, "Wrong alignment on TLTestUserWidgetLogger_Logger_FOnEditableTextCommittedEvent");
static_assert(sizeof(TLTestUserWidgetLogger_Logger_FOnEditableTextCommittedEvent) == 0x000020, "Wrong size on TLTestUserWidgetLogger_Logger_FOnEditableTextCommittedEvent");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnEditableTextCommittedEvent, Text) == 0x000000, "Member 'TLTestUserWidgetLogger_Logger_FOnEditableTextCommittedEvent::Text' has a wrong offset!");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnEditableTextCommittedEvent, CommitMethod) == 0x000018, "Member 'TLTestUserWidgetLogger_Logger_FOnEditableTextCommittedEvent::CommitMethod' has a wrong offset!");

// Function TLClient.TLTestUserWidgetLogger.Logger_FOnExpandableAreaExpansionChanged
// 0x0010 (0x0010 - 0x0000)
struct TLTestUserWidgetLogger_Logger_FOnExpandableAreaExpansionChanged final
{
public:
	class UExpandableArea*                        Area;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExpanded;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLTestUserWidgetLogger_Logger_FOnExpandableAreaExpansionChanged) == 0x000008, "Wrong alignment on TLTestUserWidgetLogger_Logger_FOnExpandableAreaExpansionChanged");
static_assert(sizeof(TLTestUserWidgetLogger_Logger_FOnExpandableAreaExpansionChanged) == 0x000010, "Wrong size on TLTestUserWidgetLogger_Logger_FOnExpandableAreaExpansionChanged");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnExpandableAreaExpansionChanged, Area) == 0x000000, "Member 'TLTestUserWidgetLogger_Logger_FOnExpandableAreaExpansionChanged::Area' has a wrong offset!");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnExpandableAreaExpansionChanged, bIsExpanded) == 0x000008, "Member 'TLTestUserWidgetLogger_Logger_FOnExpandableAreaExpansionChanged::bIsExpanded' has a wrong offset!");

// Function TLClient.TLTestUserWidgetLogger.Logger_FOnFloatValueChangedEvent
// 0x0004 (0x0004 - 0x0000)
struct TLTestUserWidgetLogger_Logger_FOnFloatValueChangedEvent final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTestUserWidgetLogger_Logger_FOnFloatValueChangedEvent) == 0x000004, "Wrong alignment on TLTestUserWidgetLogger_Logger_FOnFloatValueChangedEvent");
static_assert(sizeof(TLTestUserWidgetLogger_Logger_FOnFloatValueChangedEvent) == 0x000004, "Wrong size on TLTestUserWidgetLogger_Logger_FOnFloatValueChangedEvent");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnFloatValueChangedEvent, Value) == 0x000000, "Member 'TLTestUserWidgetLogger_Logger_FOnFloatValueChangedEvent::Value' has a wrong offset!");

// Function TLClient.TLTestUserWidgetLogger.Logger_FOnHoveredWidgetChanged
// 0x0010 (0x0010 - 0x0000)
struct TLTestUserWidgetLogger_Logger_FOnHoveredWidgetChanged final
{
public:
	class UWidgetComponent*                       WidgetComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetComponent*                       PreviousWidgetComponent;                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTestUserWidgetLogger_Logger_FOnHoveredWidgetChanged) == 0x000008, "Wrong alignment on TLTestUserWidgetLogger_Logger_FOnHoveredWidgetChanged");
static_assert(sizeof(TLTestUserWidgetLogger_Logger_FOnHoveredWidgetChanged) == 0x000010, "Wrong size on TLTestUserWidgetLogger_Logger_FOnHoveredWidgetChanged");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnHoveredWidgetChanged, WidgetComponent) == 0x000000, "Member 'TLTestUserWidgetLogger_Logger_FOnHoveredWidgetChanged::WidgetComponent' has a wrong offset!");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnHoveredWidgetChanged, PreviousWidgetComponent) == 0x000008, "Member 'TLTestUserWidgetLogger_Logger_FOnHoveredWidgetChanged::PreviousWidgetComponent' has a wrong offset!");

// Function TLClient.TLTestUserWidgetLogger.Logger_FOnKeySelected
// 0x0020 (0x0020 - 0x0000)
struct TLTestUserWidgetLogger_Logger_FOnKeySelected final
{
public:
	struct FInputChord                            SelectedKey;                                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTestUserWidgetLogger_Logger_FOnKeySelected) == 0x000008, "Wrong alignment on TLTestUserWidgetLogger_Logger_FOnKeySelected");
static_assert(sizeof(TLTestUserWidgetLogger_Logger_FOnKeySelected) == 0x000020, "Wrong size on TLTestUserWidgetLogger_Logger_FOnKeySelected");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnKeySelected, SelectedKey) == 0x000000, "Member 'TLTestUserWidgetLogger_Logger_FOnKeySelected::SelectedKey' has a wrong offset!");

// Function TLClient.TLTestUserWidgetLogger.Logger_FOnMenuOpenChangedEvent
// 0x0001 (0x0001 - 0x0000)
struct TLTestUserWidgetLogger_Logger_FOnMenuOpenChangedEvent final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTestUserWidgetLogger_Logger_FOnMenuOpenChangedEvent) == 0x000001, "Wrong alignment on TLTestUserWidgetLogger_Logger_FOnMenuOpenChangedEvent");
static_assert(sizeof(TLTestUserWidgetLogger_Logger_FOnMenuOpenChangedEvent) == 0x000001, "Wrong size on TLTestUserWidgetLogger_Logger_FOnMenuOpenChangedEvent");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnMenuOpenChangedEvent, bIsOpen) == 0x000000, "Member 'TLTestUserWidgetLogger_Logger_FOnMenuOpenChangedEvent::bIsOpen' has a wrong offset!");

// Function TLClient.TLTestUserWidgetLogger.Logger_FOnMultiLineEditableTextBoxChangedEvent
// 0x0018 (0x0018 - 0x0000)
struct TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextBoxChangedEvent final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextBoxChangedEvent) == 0x000008, "Wrong alignment on TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextBoxChangedEvent");
static_assert(sizeof(TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextBoxChangedEvent) == 0x000018, "Wrong size on TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextBoxChangedEvent");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextBoxChangedEvent, Text) == 0x000000, "Member 'TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextBoxChangedEvent::Text' has a wrong offset!");

// Function TLClient.TLTestUserWidgetLogger.Logger_FOnMultiLineEditableTextBoxCommittedEvent
// 0x0020 (0x0020 - 0x0000)
struct TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextBoxCommittedEvent final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextBoxCommittedEvent) == 0x000008, "Wrong alignment on TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextBoxCommittedEvent");
static_assert(sizeof(TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextBoxCommittedEvent) == 0x000020, "Wrong size on TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextBoxCommittedEvent");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextBoxCommittedEvent, Text) == 0x000000, "Member 'TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextBoxCommittedEvent::Text' has a wrong offset!");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextBoxCommittedEvent, CommitMethod) == 0x000018, "Member 'TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextBoxCommittedEvent::CommitMethod' has a wrong offset!");

// Function TLClient.TLTestUserWidgetLogger.Logger_FOnMultiLineEditableTextChangedEvent
// 0x0018 (0x0018 - 0x0000)
struct TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextChangedEvent final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextChangedEvent) == 0x000008, "Wrong alignment on TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextChangedEvent");
static_assert(sizeof(TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextChangedEvent) == 0x000018, "Wrong size on TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextChangedEvent");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextChangedEvent, Text) == 0x000000, "Member 'TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextChangedEvent::Text' has a wrong offset!");

// Function TLClient.TLTestUserWidgetLogger.Logger_FOnMultiLineEditableTextCommittedEvent
// 0x0020 (0x0020 - 0x0000)
struct TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextCommittedEvent final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextCommittedEvent) == 0x000008, "Wrong alignment on TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextCommittedEvent");
static_assert(sizeof(TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextCommittedEvent) == 0x000020, "Wrong size on TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextCommittedEvent");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextCommittedEvent, Text) == 0x000000, "Member 'TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextCommittedEvent::Text' has a wrong offset!");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextCommittedEvent, CommitMethod) == 0x000018, "Member 'TLTestUserWidgetLogger_Logger_FOnMultiLineEditableTextCommittedEvent::CommitMethod' has a wrong offset!");

// Function TLClient.TLTestUserWidgetLogger.Logger_FOnSelectionChangedEvent
// 0x0018 (0x0018 - 0x0000)
struct TLTestUserWidgetLogger_Logger_FOnSelectionChangedEvent final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLTestUserWidgetLogger_Logger_FOnSelectionChangedEvent) == 0x000008, "Wrong alignment on TLTestUserWidgetLogger_Logger_FOnSelectionChangedEvent");
static_assert(sizeof(TLTestUserWidgetLogger_Logger_FOnSelectionChangedEvent) == 0x000018, "Wrong size on TLTestUserWidgetLogger_Logger_FOnSelectionChangedEvent");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnSelectionChangedEvent, SelectedItem) == 0x000000, "Member 'TLTestUserWidgetLogger_Logger_FOnSelectionChangedEvent::SelectedItem' has a wrong offset!");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnSelectionChangedEvent, SelectionType) == 0x000010, "Member 'TLTestUserWidgetLogger_Logger_FOnSelectionChangedEvent::SelectionType' has a wrong offset!");

// Function TLClient.TLTestUserWidgetLogger.Logger_FOnSpinBoxValueChangedEvent
// 0x0004 (0x0004 - 0x0000)
struct TLTestUserWidgetLogger_Logger_FOnSpinBoxValueChangedEvent final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTestUserWidgetLogger_Logger_FOnSpinBoxValueChangedEvent) == 0x000004, "Wrong alignment on TLTestUserWidgetLogger_Logger_FOnSpinBoxValueChangedEvent");
static_assert(sizeof(TLTestUserWidgetLogger_Logger_FOnSpinBoxValueChangedEvent) == 0x000004, "Wrong size on TLTestUserWidgetLogger_Logger_FOnSpinBoxValueChangedEvent");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnSpinBoxValueChangedEvent, InValue) == 0x000000, "Member 'TLTestUserWidgetLogger_Logger_FOnSpinBoxValueChangedEvent::InValue' has a wrong offset!");

// Function TLClient.TLTestUserWidgetLogger.Logger_FOnSpinBoxValueCommittedEvent
// 0x0008 (0x0008 - 0x0000)
struct TLTestUserWidgetLogger_Logger_FOnSpinBoxValueCommittedEvent final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLTestUserWidgetLogger_Logger_FOnSpinBoxValueCommittedEvent) == 0x000004, "Wrong alignment on TLTestUserWidgetLogger_Logger_FOnSpinBoxValueCommittedEvent");
static_assert(sizeof(TLTestUserWidgetLogger_Logger_FOnSpinBoxValueCommittedEvent) == 0x000008, "Wrong size on TLTestUserWidgetLogger_Logger_FOnSpinBoxValueCommittedEvent");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnSpinBoxValueCommittedEvent, InValue) == 0x000000, "Member 'TLTestUserWidgetLogger_Logger_FOnSpinBoxValueCommittedEvent::InValue' has a wrong offset!");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnSpinBoxValueCommittedEvent, CommitMethod) == 0x000004, "Member 'TLTestUserWidgetLogger_Logger_FOnSpinBoxValueCommittedEvent::CommitMethod' has a wrong offset!");

// Function TLClient.TLTestUserWidgetLogger.Logger_FOnUserScrolledEvent
// 0x0004 (0x0004 - 0x0000)
struct TLTestUserWidgetLogger_Logger_FOnUserScrolledEvent final
{
public:
	float                                         CurrentOffset;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTestUserWidgetLogger_Logger_FOnUserScrolledEvent) == 0x000004, "Wrong alignment on TLTestUserWidgetLogger_Logger_FOnUserScrolledEvent");
static_assert(sizeof(TLTestUserWidgetLogger_Logger_FOnUserScrolledEvent) == 0x000004, "Wrong size on TLTestUserWidgetLogger_Logger_FOnUserScrolledEvent");
static_assert(offsetof(TLTestUserWidgetLogger_Logger_FOnUserScrolledEvent, CurrentOffset) == 0x000000, "Member 'TLTestUserWidgetLogger_Logger_FOnUserScrolledEvent::CurrentOffset' has a wrong offset!");

// Function TLClient.TLUserWidgetPcInfo.OnHpAbnormalStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPcInfo_OnHpAbnormalStatusChanged final
{
public:
	EHpAbnormalStatus                             InHpAbnormalStatus;                                // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPcInfo_OnHpAbnormalStatusChanged) == 0x000001, "Wrong alignment on TLUserWidgetPcInfo_OnHpAbnormalStatusChanged");
static_assert(sizeof(TLUserWidgetPcInfo_OnHpAbnormalStatusChanged) == 0x000001, "Wrong size on TLUserWidgetPcInfo_OnHpAbnormalStatusChanged");
static_assert(offsetof(TLUserWidgetPcInfo_OnHpAbnormalStatusChanged, InHpAbnormalStatus) == 0x000000, "Member 'TLUserWidgetPcInfo_OnHpAbnormalStatusChanged::InHpAbnormalStatus' has a wrong offset!");

// Function TLClient.TLUserWidgetPcInfo.OnHpIncreasedByContinuousHeal
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPcInfo_OnHpIncreasedByContinuousHeal final
{
public:
	bool                                          bStartAnimation;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPcInfo_OnHpIncreasedByContinuousHeal) == 0x000001, "Wrong alignment on TLUserWidgetPcInfo_OnHpIncreasedByContinuousHeal");
static_assert(sizeof(TLUserWidgetPcInfo_OnHpIncreasedByContinuousHeal) == 0x000001, "Wrong size on TLUserWidgetPcInfo_OnHpIncreasedByContinuousHeal");
static_assert(offsetof(TLUserWidgetPcInfo_OnHpIncreasedByContinuousHeal, bStartAnimation) == 0x000000, "Member 'TLUserWidgetPcInfo_OnHpIncreasedByContinuousHeal::bStartAnimation' has a wrong offset!");

// Function TLClient.TLUserWidgetPcInfo.OnLevelCapStateChanged
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPcInfo_OnLevelCapStateChanged final
{
public:
	bool                                          InLevelCapState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPcInfo_OnLevelCapStateChanged) == 0x000001, "Wrong alignment on TLUserWidgetPcInfo_OnLevelCapStateChanged");
static_assert(sizeof(TLUserWidgetPcInfo_OnLevelCapStateChanged) == 0x000001, "Wrong size on TLUserWidgetPcInfo_OnLevelCapStateChanged");
static_assert(offsetof(TLUserWidgetPcInfo_OnLevelCapStateChanged, InLevelCapState) == 0x000000, "Member 'TLUserWidgetPcInfo_OnLevelCapStateChanged::InLevelCapState' has a wrong offset!");

// Function TLClient.TLUserWidgetPcInfo.OnMyPcCombatStatusUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPcInfo_OnMyPcCombatStatusUpdate final
{
public:
	bool                                          InCombatStatus;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPcInfo_OnMyPcCombatStatusUpdate) == 0x000001, "Wrong alignment on TLUserWidgetPcInfo_OnMyPcCombatStatusUpdate");
static_assert(sizeof(TLUserWidgetPcInfo_OnMyPcCombatStatusUpdate) == 0x000001, "Wrong size on TLUserWidgetPcInfo_OnMyPcCombatStatusUpdate");
static_assert(offsetof(TLUserWidgetPcInfo_OnMyPcCombatStatusUpdate, InCombatStatus) == 0x000000, "Member 'TLUserWidgetPcInfo_OnMyPcCombatStatusUpdate::InCombatStatus' has a wrong offset!");

// Function TLClient.TLUserWidgetPcInfo.OnMyPcDamaged
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPcInfo_OnMyPcDamaged final
{
public:
	EFloaterCategory                              InDamageType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPcInfo_OnMyPcDamaged) == 0x000001, "Wrong alignment on TLUserWidgetPcInfo_OnMyPcDamaged");
static_assert(sizeof(TLUserWidgetPcInfo_OnMyPcDamaged) == 0x000001, "Wrong size on TLUserWidgetPcInfo_OnMyPcDamaged");
static_assert(offsetof(TLUserWidgetPcInfo_OnMyPcDamaged, InDamageType) == 0x000000, "Member 'TLUserWidgetPcInfo_OnMyPcDamaged::InDamageType' has a wrong offset!");

// Function TLClient.TLUserWidgetPcInfo.OnRestorableStatusChanged
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetPcInfo_OnRestorableStatusChanged final
{
public:
	int32                                         MarkIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HaveSomethingToRestore;                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetPcInfo_OnRestorableStatusChanged) == 0x000004, "Wrong alignment on TLUserWidgetPcInfo_OnRestorableStatusChanged");
static_assert(sizeof(TLUserWidgetPcInfo_OnRestorableStatusChanged) == 0x000008, "Wrong size on TLUserWidgetPcInfo_OnRestorableStatusChanged");
static_assert(offsetof(TLUserWidgetPcInfo_OnRestorableStatusChanged, MarkIndex) == 0x000000, "Member 'TLUserWidgetPcInfo_OnRestorableStatusChanged::MarkIndex' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPcInfo_OnRestorableStatusChanged, HaveSomethingToRestore) == 0x000004, "Member 'TLUserWidgetPcInfo_OnRestorableStatusChanged::HaveSomethingToRestore' has a wrong offset!");

// Function TLClient.TLUserWidgetPcInfo.OnSetupUIPlatformEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPcInfo_OnSetupUIPlatformEvent final
{
public:
	ETLUIPlatform                                 InUIPlatform;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPcInfo_OnSetupUIPlatformEvent) == 0x000001, "Wrong alignment on TLUserWidgetPcInfo_OnSetupUIPlatformEvent");
static_assert(sizeof(TLUserWidgetPcInfo_OnSetupUIPlatformEvent) == 0x000001, "Wrong size on TLUserWidgetPcInfo_OnSetupUIPlatformEvent");
static_assert(offsetof(TLUserWidgetPcInfo_OnSetupUIPlatformEvent, InUIPlatform) == 0x000000, "Member 'TLUserWidgetPcInfo_OnSetupUIPlatformEvent::InUIPlatform' has a wrong offset!");

// Function TLClient.TLUserWidgetPcInfo.OnShowFriendlyTargetOnMe
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPcInfo_OnShowFriendlyTargetOnMe final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPcInfo_OnShowFriendlyTargetOnMe) == 0x000001, "Wrong alignment on TLUserWidgetPcInfo_OnShowFriendlyTargetOnMe");
static_assert(sizeof(TLUserWidgetPcInfo_OnShowFriendlyTargetOnMe) == 0x000001, "Wrong size on TLUserWidgetPcInfo_OnShowFriendlyTargetOnMe");
static_assert(offsetof(TLUserWidgetPcInfo_OnShowFriendlyTargetOnMe, bShow) == 0x000000, "Member 'TLUserWidgetPcInfo_OnShowFriendlyTargetOnMe::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetPcInfo.OnUpdateCriminalType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPcInfo_OnUpdateCriminalType final
{
public:
	ECriminalType                                 bInCriminalType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPcInfo_OnUpdateCriminalType) == 0x000001, "Wrong alignment on TLUserWidgetPcInfo_OnUpdateCriminalType");
static_assert(sizeof(TLUserWidgetPcInfo_OnUpdateCriminalType) == 0x000001, "Wrong size on TLUserWidgetPcInfo_OnUpdateCriminalType");
static_assert(offsetof(TLUserWidgetPcInfo_OnUpdateCriminalType, bInCriminalType) == 0x000000, "Member 'TLUserWidgetPcInfo_OnUpdateCriminalType::bInCriminalType' has a wrong offset!");

// Function TLClient.TLUserWidgetPcInfo.OnUpdateLevelUp
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetPcInfo_OnUpdateLevelUp final
{
public:
	int32                                         InNewLevel;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPcInfo_OnUpdateLevelUp) == 0x000004, "Wrong alignment on TLUserWidgetPcInfo_OnUpdateLevelUp");
static_assert(sizeof(TLUserWidgetPcInfo_OnUpdateLevelUp) == 0x000004, "Wrong size on TLUserWidgetPcInfo_OnUpdateLevelUp");
static_assert(offsetof(TLUserWidgetPcInfo_OnUpdateLevelUp, InNewLevel) == 0x000000, "Member 'TLUserWidgetPcInfo_OnUpdateLevelUp::InNewLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetCasting.OnStart
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCasting_OnStart final
{
public:
	bool                                          bForward;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCasting_OnStart) == 0x000001, "Wrong alignment on TLUserWidgetCasting_OnStart");
static_assert(sizeof(TLUserWidgetCasting_OnStart) == 0x000001, "Wrong size on TLUserWidgetCasting_OnStart");
static_assert(offsetof(TLUserWidgetCasting_OnStart, bForward) == 0x000000, "Member 'TLUserWidgetCasting_OnStart::bForward' has a wrong offset!");

// Function TLClient.TLUserWidgetCasting.OnStop
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCasting_OnStop final
{
public:
	ETLStopCastingReason                          Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCasting_OnStop) == 0x000001, "Wrong alignment on TLUserWidgetCasting_OnStop");
static_assert(sizeof(TLUserWidgetCasting_OnStop) == 0x000001, "Wrong size on TLUserWidgetCasting_OnStop");
static_assert(offsetof(TLUserWidgetCasting_OnStop, Reason) == 0x000000, "Member 'TLUserWidgetCasting_OnStop::Reason' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeListItem.OnAcquisitionTypeUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeListItem_OnAcquisitionTypeUpdate final
{
public:
	ETLAcquisitionContentType                     InAcquisitionType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeListItem_OnAcquisitionTypeUpdate) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeListItem_OnAcquisitionTypeUpdate");
static_assert(sizeof(TLUserWidgetArmorCostumeListItem_OnAcquisitionTypeUpdate) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeListItem_OnAcquisitionTypeUpdate");
static_assert(offsetof(TLUserWidgetArmorCostumeListItem_OnAcquisitionTypeUpdate, InAcquisitionType) == 0x000000, "Member 'TLUserWidgetArmorCostumeListItem_OnAcquisitionTypeUpdate::InAcquisitionType' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeListItem.OnPreviewEquipState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeListItem_OnPreviewEquipState final
{
public:
	bool                                          bEquipped;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeListItem_OnPreviewEquipState) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeListItem_OnPreviewEquipState");
static_assert(sizeof(TLUserWidgetArmorCostumeListItem_OnPreviewEquipState) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeListItem_OnPreviewEquipState");
static_assert(offsetof(TLUserWidgetArmorCostumeListItem_OnPreviewEquipState, bEquipped) == 0x000000, "Member 'TLUserWidgetArmorCostumeListItem_OnPreviewEquipState::bEquipped' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeListItem.OnSelectState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeListItem_OnSelectState final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeListItem_OnSelectState) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeListItem_OnSelectState");
static_assert(sizeof(TLUserWidgetArmorCostumeListItem_OnSelectState) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeListItem_OnSelectState");
static_assert(offsetof(TLUserWidgetArmorCostumeListItem_OnSelectState, bSelected) == 0x000000, "Member 'TLUserWidgetArmorCostumeListItem_OnSelectState::bSelected' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeListItem.OnUserEquipState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeListItem_OnUserEquipState final
{
public:
	bool                                          bEquipped;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeListItem_OnUserEquipState) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeListItem_OnUserEquipState");
static_assert(sizeof(TLUserWidgetArmorCostumeListItem_OnUserEquipState) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeListItem_OnUserEquipState");
static_assert(offsetof(TLUserWidgetArmorCostumeListItem_OnUserEquipState, bEquipped) == 0x000000, "Member 'TLUserWidgetArmorCostumeListItem_OnUserEquipState::bEquipped' has a wrong offset!");

// Function TLClient.TLObjectWorldProxy.IsCanSeeFromMyPc
// 0x0001 (0x0001 - 0x0000)
struct TLObjectWorldProxy_IsCanSeeFromMyPc final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLObjectWorldProxy_IsCanSeeFromMyPc) == 0x000001, "Wrong alignment on TLObjectWorldProxy_IsCanSeeFromMyPc");
static_assert(sizeof(TLObjectWorldProxy_IsCanSeeFromMyPc) == 0x000001, "Wrong size on TLObjectWorldProxy_IsCanSeeFromMyPc");
static_assert(offsetof(TLObjectWorldProxy_IsCanSeeFromMyPc, ReturnValue) == 0x000000, "Member 'TLObjectWorldProxy_IsCanSeeFromMyPc::ReturnValue' has a wrong offset!");

// Function TLClient.TLObjectWorldProxy.IsValid
// 0x0001 (0x0001 - 0x0000)
struct TLObjectWorldProxy_IsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLObjectWorldProxy_IsValid) == 0x000001, "Wrong alignment on TLObjectWorldProxy_IsValid");
static_assert(sizeof(TLObjectWorldProxy_IsValid) == 0x000001, "Wrong size on TLObjectWorldProxy_IsValid");
static_assert(offsetof(TLObjectWorldProxy_IsValid, ReturnValue) == 0x000000, "Member 'TLObjectWorldProxy_IsValid::ReturnValue' has a wrong offset!");

// Function TLClient.TLObjectWorldProxy.GetDistToMyPc
// 0x0004 (0x0004 - 0x0000)
struct TLObjectWorldProxy_GetDistToMyPc final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLObjectWorldProxy_GetDistToMyPc) == 0x000004, "Wrong alignment on TLObjectWorldProxy_GetDistToMyPc");
static_assert(sizeof(TLObjectWorldProxy_GetDistToMyPc) == 0x000004, "Wrong size on TLObjectWorldProxy_GetDistToMyPc");
static_assert(offsetof(TLObjectWorldProxy_GetDistToMyPc, ReturnValue) == 0x000000, "Member 'TLObjectWorldProxy_GetDistToMyPc::ReturnValue' has a wrong offset!");

// Function TLClient.TLObjectWorldProxy.GetDistToMyPcC2C
// 0x0004 (0x0004 - 0x0000)
struct TLObjectWorldProxy_GetDistToMyPcC2C final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLObjectWorldProxy_GetDistToMyPcC2C) == 0x000004, "Wrong alignment on TLObjectWorldProxy_GetDistToMyPcC2C");
static_assert(sizeof(TLObjectWorldProxy_GetDistToMyPcC2C) == 0x000004, "Wrong size on TLObjectWorldProxy_GetDistToMyPcC2C");
static_assert(offsetof(TLObjectWorldProxy_GetDistToMyPcC2C, ReturnValue) == 0x000000, "Member 'TLObjectWorldProxy_GetDistToMyPcC2C::ReturnValue' has a wrong offset!");

// Function TLClient.TLObjectWorldProxy.GetDistToMyPcSQ
// 0x0004 (0x0004 - 0x0000)
struct TLObjectWorldProxy_GetDistToMyPcSQ final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLObjectWorldProxy_GetDistToMyPcSQ) == 0x000004, "Wrong alignment on TLObjectWorldProxy_GetDistToMyPcSQ");
static_assert(sizeof(TLObjectWorldProxy_GetDistToMyPcSQ) == 0x000004, "Wrong size on TLObjectWorldProxy_GetDistToMyPcSQ");
static_assert(offsetof(TLObjectWorldProxy_GetDistToMyPcSQ, ReturnValue) == 0x000000, "Member 'TLObjectWorldProxy_GetDistToMyPcSQ::ReturnValue' has a wrong offset!");

// Function TLClient.TLObjectWorldProxy.GetGuid
// 0x0008 (0x0008 - 0x0000)
struct TLObjectWorldProxy_GetGuid final
{
public:
	uint64                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLObjectWorldProxy_GetGuid) == 0x000008, "Wrong alignment on TLObjectWorldProxy_GetGuid");
static_assert(sizeof(TLObjectWorldProxy_GetGuid) == 0x000008, "Wrong size on TLObjectWorldProxy_GetGuid");
static_assert(offsetof(TLObjectWorldProxy_GetGuid, ReturnValue) == 0x000000, "Member 'TLObjectWorldProxy_GetGuid::ReturnValue' has a wrong offset!");

// Function TLClient.TLObjectWorldProxy.GetObjId
// 0x0004 (0x0004 - 0x0000)
struct TLObjectWorldProxy_GetObjId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLObjectWorldProxy_GetObjId) == 0x000004, "Wrong alignment on TLObjectWorldProxy_GetObjId");
static_assert(sizeof(TLObjectWorldProxy_GetObjId) == 0x000004, "Wrong size on TLObjectWorldProxy_GetObjId");
static_assert(offsetof(TLObjectWorldProxy_GetObjId, ReturnValue) == 0x000000, "Member 'TLObjectWorldProxy_GetObjId::ReturnValue' has a wrong offset!");

// Function TLClient.TLObjectWorldProxy.GetObjRowName
// 0x0008 (0x0008 - 0x0000)
struct TLObjectWorldProxy_GetObjRowName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLObjectWorldProxy_GetObjRowName) == 0x000004, "Wrong alignment on TLObjectWorldProxy_GetObjRowName");
static_assert(sizeof(TLObjectWorldProxy_GetObjRowName) == 0x000008, "Wrong size on TLObjectWorldProxy_GetObjRowName");
static_assert(offsetof(TLObjectWorldProxy_GetObjRowName, ReturnValue) == 0x000000, "Member 'TLObjectWorldProxy_GetObjRowName::ReturnValue' has a wrong offset!");

// Function TLClient.TLObjectWorldProxy.GetObjType
// 0x0001 (0x0001 - 0x0000)
struct TLObjectWorldProxy_GetObjType final
{
public:
	EWorldObjectType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLObjectWorldProxy_GetObjType) == 0x000001, "Wrong alignment on TLObjectWorldProxy_GetObjType");
static_assert(sizeof(TLObjectWorldProxy_GetObjType) == 0x000001, "Wrong size on TLObjectWorldProxy_GetObjType");
static_assert(offsetof(TLObjectWorldProxy_GetObjType, ReturnValue) == 0x000000, "Member 'TLObjectWorldProxy_GetObjType::ReturnValue' has a wrong offset!");

// Function TLClient.TLObjectWorldProxy.GetObjTypeName
// 0x0008 (0x0008 - 0x0000)
struct TLObjectWorldProxy_GetObjTypeName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLObjectWorldProxy_GetObjTypeName) == 0x000004, "Wrong alignment on TLObjectWorldProxy_GetObjTypeName");
static_assert(sizeof(TLObjectWorldProxy_GetObjTypeName) == 0x000008, "Wrong size on TLObjectWorldProxy_GetObjTypeName");
static_assert(offsetof(TLObjectWorldProxy_GetObjTypeName, ReturnValue) == 0x000000, "Member 'TLObjectWorldProxy_GetObjTypeName::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObject.Advance
// 0x0004 (0x0004 - 0x0000)
struct TLTutorialConditionObject_Advance final
{
public:
	int32                                         InPageNum;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObject_Advance) == 0x000004, "Wrong alignment on TLTutorialConditionObject_Advance");
static_assert(sizeof(TLTutorialConditionObject_Advance) == 0x000004, "Wrong size on TLTutorialConditionObject_Advance");
static_assert(offsetof(TLTutorialConditionObject_Advance, InPageNum) == 0x000000, "Member 'TLTutorialConditionObject_Advance::InPageNum' has a wrong offset!");

// Function TLClient.TLTutorialConditionObject.AdvanceByID
// 0x000C (0x000C - 0x0000)
struct TLTutorialConditionObject_AdvanceByID final
{
public:
	class FName                                   InTutorialId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPageNum;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObject_AdvanceByID) == 0x000004, "Wrong alignment on TLTutorialConditionObject_AdvanceByID");
static_assert(sizeof(TLTutorialConditionObject_AdvanceByID) == 0x00000C, "Wrong size on TLTutorialConditionObject_AdvanceByID");
static_assert(offsetof(TLTutorialConditionObject_AdvanceByID, InTutorialId) == 0x000000, "Member 'TLTutorialConditionObject_AdvanceByID::InTutorialId' has a wrong offset!");
static_assert(offsetof(TLTutorialConditionObject_AdvanceByID, InPageNum) == 0x000008, "Member 'TLTutorialConditionObject_AdvanceByID::InPageNum' has a wrong offset!");

// Function TLClient.TLTutorialConditionObject.IsActivate
// 0x0001 (0x0001 - 0x0000)
struct TLTutorialConditionObject_IsActivate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObject_IsActivate) == 0x000001, "Wrong alignment on TLTutorialConditionObject_IsActivate");
static_assert(sizeof(TLTutorialConditionObject_IsActivate) == 0x000001, "Wrong size on TLTutorialConditionObject_IsActivate");
static_assert(offsetof(TLTutorialConditionObject_IsActivate, ReturnValue) == 0x000000, "Member 'TLTutorialConditionObject_IsActivate::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObject.IsActivateByID
// 0x000C (0x000C - 0x0000)
struct TLTutorialConditionObject_IsActivateByID final
{
public:
	class FName                                   InTutorialId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLTutorialConditionObject_IsActivateByID) == 0x000004, "Wrong alignment on TLTutorialConditionObject_IsActivateByID");
static_assert(sizeof(TLTutorialConditionObject_IsActivateByID) == 0x00000C, "Wrong size on TLTutorialConditionObject_IsActivateByID");
static_assert(offsetof(TLTutorialConditionObject_IsActivateByID, InTutorialId) == 0x000000, "Member 'TLTutorialConditionObject_IsActivateByID::InTutorialId' has a wrong offset!");
static_assert(offsetof(TLTutorialConditionObject_IsActivateByID, ReturnValue) == 0x000008, "Member 'TLTutorialConditionObject_IsActivateByID::ReturnValue' has a wrong offset!");

// Function TLClient.TLTutorialConditionObject.OnActivateByID
// 0x0008 (0x0008 - 0x0000)
struct TLTutorialConditionObject_OnActivateByID final
{
public:
	class FName                                   InTutorialId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObject_OnActivateByID) == 0x000004, "Wrong alignment on TLTutorialConditionObject_OnActivateByID");
static_assert(sizeof(TLTutorialConditionObject_OnActivateByID) == 0x000008, "Wrong size on TLTutorialConditionObject_OnActivateByID");
static_assert(offsetof(TLTutorialConditionObject_OnActivateByID, InTutorialId) == 0x000000, "Member 'TLTutorialConditionObject_OnActivateByID::InTutorialId' has a wrong offset!");

// Function TLClient.TLTutorialConditionObject.OnCompleteByID
// 0x000C (0x000C - 0x0000)
struct TLTutorialConditionObject_OnCompleteByID final
{
public:
	class FName                                   InTutorialId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSkip;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLTutorialConditionObject_OnCompleteByID) == 0x000004, "Wrong alignment on TLTutorialConditionObject_OnCompleteByID");
static_assert(sizeof(TLTutorialConditionObject_OnCompleteByID) == 0x00000C, "Wrong size on TLTutorialConditionObject_OnCompleteByID");
static_assert(offsetof(TLTutorialConditionObject_OnCompleteByID, InTutorialId) == 0x000000, "Member 'TLTutorialConditionObject_OnCompleteByID::InTutorialId' has a wrong offset!");
static_assert(offsetof(TLTutorialConditionObject_OnCompleteByID, bInSkip) == 0x000008, "Member 'TLTutorialConditionObject_OnCompleteByID::bInSkip' has a wrong offset!");

// Function TLClient.TLTutorialConditionObject.RegisterObjectTickInterval
// 0x0004 (0x0004 - 0x0000)
struct TLTutorialConditionObject_RegisterObjectTickInterval final
{
public:
	int32                                         InObjId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObject_RegisterObjectTickInterval) == 0x000004, "Wrong alignment on TLTutorialConditionObject_RegisterObjectTickInterval");
static_assert(sizeof(TLTutorialConditionObject_RegisterObjectTickInterval) == 0x000004, "Wrong size on TLTutorialConditionObject_RegisterObjectTickInterval");
static_assert(offsetof(TLTutorialConditionObject_RegisterObjectTickInterval, InObjId) == 0x000000, "Member 'TLTutorialConditionObject_RegisterObjectTickInterval::InObjId' has a wrong offset!");

// Function TLClient.TLTutorialConditionObject.RegisterObjectTickIntervalByID
// 0x000C (0x000C - 0x0000)
struct TLTutorialConditionObject_RegisterObjectTickIntervalByID final
{
public:
	class FName                                   InTutorialId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InObjId;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObject_RegisterObjectTickIntervalByID) == 0x000004, "Wrong alignment on TLTutorialConditionObject_RegisterObjectTickIntervalByID");
static_assert(sizeof(TLTutorialConditionObject_RegisterObjectTickIntervalByID) == 0x00000C, "Wrong size on TLTutorialConditionObject_RegisterObjectTickIntervalByID");
static_assert(offsetof(TLTutorialConditionObject_RegisterObjectTickIntervalByID, InTutorialId) == 0x000000, "Member 'TLTutorialConditionObject_RegisterObjectTickIntervalByID::InTutorialId' has a wrong offset!");
static_assert(offsetof(TLTutorialConditionObject_RegisterObjectTickIntervalByID, InObjId) == 0x000008, "Member 'TLTutorialConditionObject_RegisterObjectTickIntervalByID::InObjId' has a wrong offset!");

// Function TLClient.TLTutorialConditionObject.SetActivateByID
// 0x0008 (0x0008 - 0x0000)
struct TLTutorialConditionObject_SetActivateByID final
{
public:
	class FName                                   InTutorialId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObject_SetActivateByID) == 0x000004, "Wrong alignment on TLTutorialConditionObject_SetActivateByID");
static_assert(sizeof(TLTutorialConditionObject_SetActivateByID) == 0x000008, "Wrong size on TLTutorialConditionObject_SetActivateByID");
static_assert(offsetof(TLTutorialConditionObject_SetActivateByID, InTutorialId) == 0x000000, "Member 'TLTutorialConditionObject_SetActivateByID::InTutorialId' has a wrong offset!");

// Function TLClient.TLTutorialConditionObject.SetComplete
// 0x0004 (0x0004 - 0x0000)
struct TLTutorialConditionObject_SetComplete final
{
public:
	int32                                         InDelayTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObject_SetComplete) == 0x000004, "Wrong alignment on TLTutorialConditionObject_SetComplete");
static_assert(sizeof(TLTutorialConditionObject_SetComplete) == 0x000004, "Wrong size on TLTutorialConditionObject_SetComplete");
static_assert(offsetof(TLTutorialConditionObject_SetComplete, InDelayTime) == 0x000000, "Member 'TLTutorialConditionObject_SetComplete::InDelayTime' has a wrong offset!");

// Function TLClient.TLTutorialConditionObject.SetCompleteByID
// 0x000C (0x000C - 0x0000)
struct TLTutorialConditionObject_SetCompleteByID final
{
public:
	class FName                                   InTutorialId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InDelayTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObject_SetCompleteByID) == 0x000004, "Wrong alignment on TLTutorialConditionObject_SetCompleteByID");
static_assert(sizeof(TLTutorialConditionObject_SetCompleteByID) == 0x00000C, "Wrong size on TLTutorialConditionObject_SetCompleteByID");
static_assert(offsetof(TLTutorialConditionObject_SetCompleteByID, InTutorialId) == 0x000000, "Member 'TLTutorialConditionObject_SetCompleteByID::InTutorialId' has a wrong offset!");
static_assert(offsetof(TLTutorialConditionObject_SetCompleteByID, InDelayTime) == 0x000008, "Member 'TLTutorialConditionObject_SetCompleteByID::InDelayTime' has a wrong offset!");

// Function TLClient.TLTutorialConditionObject.SetSkipByID
// 0x0008 (0x0008 - 0x0000)
struct TLTutorialConditionObject_SetSkipByID final
{
public:
	class FName                                   InTutorialId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObject_SetSkipByID) == 0x000004, "Wrong alignment on TLTutorialConditionObject_SetSkipByID");
static_assert(sizeof(TLTutorialConditionObject_SetSkipByID) == 0x000008, "Wrong size on TLTutorialConditionObject_SetSkipByID");
static_assert(offsetof(TLTutorialConditionObject_SetSkipByID, InTutorialId) == 0x000000, "Member 'TLTutorialConditionObject_SetSkipByID::InTutorialId' has a wrong offset!");

// Function TLClient.TLTutorialConditionObject.TutorialLog
// 0x0010 (0x0010 - 0x0000)
struct TLTutorialConditionObject_TutorialLog final
{
public:
	class FString                                 InMsg;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLTutorialConditionObject_TutorialLog) == 0x000008, "Wrong alignment on TLTutorialConditionObject_TutorialLog");
static_assert(sizeof(TLTutorialConditionObject_TutorialLog) == 0x000010, "Wrong size on TLTutorialConditionObject_TutorialLog");
static_assert(offsetof(TLTutorialConditionObject_TutorialLog, InMsg) == 0x000000, "Member 'TLTutorialConditionObject_TutorialLog::InMsg' has a wrong offset!");

// Function TLClient.TLUserWidgetArenaCountDown.OnCountDown
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetArenaCountDown_OnCountDown final
{
public:
	int32                                         CoundDownSeconds;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArenaCountDown_OnCountDown) == 0x000004, "Wrong alignment on TLUserWidgetArenaCountDown_OnCountDown");
static_assert(sizeof(TLUserWidgetArenaCountDown_OnCountDown) == 0x000004, "Wrong size on TLUserWidgetArenaCountDown_OnCountDown");
static_assert(offsetof(TLUserWidgetArenaCountDown_OnCountDown, CoundDownSeconds) == 0x000000, "Member 'TLUserWidgetArenaCountDown_OnCountDown::CoundDownSeconds' has a wrong offset!");

// Function TLClient.TLUserWidgetArenaDailyScheduleElem.SetHighlightFX
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArenaDailyScheduleElem_SetHighlightFX final
{
public:
	bool                                          bSet;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArenaDailyScheduleElem_SetHighlightFX) == 0x000001, "Wrong alignment on TLUserWidgetArenaDailyScheduleElem_SetHighlightFX");
static_assert(sizeof(TLUserWidgetArenaDailyScheduleElem_SetHighlightFX) == 0x000001, "Wrong size on TLUserWidgetArenaDailyScheduleElem_SetHighlightFX");
static_assert(offsetof(TLUserWidgetArenaDailyScheduleElem_SetHighlightFX, bSet) == 0x000000, "Member 'TLUserWidgetArenaDailyScheduleElem_SetHighlightFX::bSet' has a wrong offset!");

// Function TLClient.TLUserStateInterface.BP_OnChangeCharacterAlive
// 0x0002 (0x0002 - 0x0000)
struct TLUserStateInterface_BP_OnChangeCharacterAlive final
{
public:
	bool                                          InAlive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLSetAliveSource                             InAliveSource;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserStateInterface_BP_OnChangeCharacterAlive) == 0x000001, "Wrong alignment on TLUserStateInterface_BP_OnChangeCharacterAlive");
static_assert(sizeof(TLUserStateInterface_BP_OnChangeCharacterAlive) == 0x000002, "Wrong size on TLUserStateInterface_BP_OnChangeCharacterAlive");
static_assert(offsetof(TLUserStateInterface_BP_OnChangeCharacterAlive, InAlive) == 0x000000, "Member 'TLUserStateInterface_BP_OnChangeCharacterAlive::InAlive' has a wrong offset!");
static_assert(offsetof(TLUserStateInterface_BP_OnChangeCharacterAlive, InAliveSource) == 0x000001, "Member 'TLUserStateInterface_BP_OnChangeCharacterAlive::InAliveSource' has a wrong offset!");

// Function TLClient.TLUserWidgetGacha.OnShowButtonClickGuide
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGacha_OnShowButtonClickGuide final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGacha_OnShowButtonClickGuide) == 0x000001, "Wrong alignment on TLUserWidgetGacha_OnShowButtonClickGuide");
static_assert(sizeof(TLUserWidgetGacha_OnShowButtonClickGuide) == 0x000001, "Wrong size on TLUserWidgetGacha_OnShowButtonClickGuide");
static_assert(offsetof(TLUserWidgetGacha_OnShowButtonClickGuide, bInVisible) == 0x000000, "Member 'TLUserWidgetGacha_OnShowButtonClickGuide::bInVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetGacha.OnShowResultWidget
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetGacha_OnShowResultWidget final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInGachaSkipStep;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGacha_OnShowResultWidget) == 0x000001, "Wrong alignment on TLUserWidgetGacha_OnShowResultWidget");
static_assert(sizeof(TLUserWidgetGacha_OnShowResultWidget) == 0x000002, "Wrong size on TLUserWidgetGacha_OnShowResultWidget");
static_assert(offsetof(TLUserWidgetGacha_OnShowResultWidget, bInVisible) == 0x000000, "Member 'TLUserWidgetGacha_OnShowResultWidget::bInVisible' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGacha_OnShowResultWidget, bInGachaSkipStep) == 0x000001, "Member 'TLUserWidgetGacha_OnShowResultWidget::bInGachaSkipStep' has a wrong offset!");

// Function TLClient.TLUserWidgetGacha.OnShowSkipGacha
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGacha_OnShowSkipGacha final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGacha_OnShowSkipGacha) == 0x000001, "Wrong alignment on TLUserWidgetGacha_OnShowSkipGacha");
static_assert(sizeof(TLUserWidgetGacha_OnShowSkipGacha) == 0x000001, "Wrong size on TLUserWidgetGacha_OnShowSkipGacha");
static_assert(offsetof(TLUserWidgetGacha_OnShowSkipGacha, bInVisible) == 0x000000, "Member 'TLUserWidgetGacha_OnShowSkipGacha::bInVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetGacha.SetGachaSkipStep
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGacha_SetGachaSkipStep final
{
public:
	bool                                          bInSkip;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGacha_SetGachaSkipStep) == 0x000001, "Wrong alignment on TLUserWidgetGacha_SetGachaSkipStep");
static_assert(sizeof(TLUserWidgetGacha_SetGachaSkipStep) == 0x000001, "Wrong size on TLUserWidgetGacha_SetGachaSkipStep");
static_assert(offsetof(TLUserWidgetGacha_SetGachaSkipStep, bInSkip) == 0x000000, "Member 'TLUserWidgetGacha_SetGachaSkipStep::bInSkip' has a wrong offset!");

// Function TLClient.TLUserWidgetGacha.ShowButtonClickGuide
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGacha_ShowButtonClickGuide final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGacha_ShowButtonClickGuide) == 0x000001, "Wrong alignment on TLUserWidgetGacha_ShowButtonClickGuide");
static_assert(sizeof(TLUserWidgetGacha_ShowButtonClickGuide) == 0x000001, "Wrong size on TLUserWidgetGacha_ShowButtonClickGuide");
static_assert(offsetof(TLUserWidgetGacha_ShowButtonClickGuide, bInVisible) == 0x000000, "Member 'TLUserWidgetGacha_ShowButtonClickGuide::bInVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetGacha.ShowResultWidget
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGacha_ShowResultWidget final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGacha_ShowResultWidget) == 0x000001, "Wrong alignment on TLUserWidgetGacha_ShowResultWidget");
static_assert(sizeof(TLUserWidgetGacha_ShowResultWidget) == 0x000001, "Wrong size on TLUserWidgetGacha_ShowResultWidget");
static_assert(offsetof(TLUserWidgetGacha_ShowResultWidget, bInVisible) == 0x000000, "Member 'TLUserWidgetGacha_ShowResultWidget::bInVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetGacha.ShowSkipGacha
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGacha_ShowSkipGacha final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGacha_ShowSkipGacha) == 0x000001, "Wrong alignment on TLUserWidgetGacha_ShowSkipGacha");
static_assert(sizeof(TLUserWidgetGacha_ShowSkipGacha) == 0x000001, "Wrong size on TLUserWidgetGacha_ShowSkipGacha");
static_assert(offsetof(TLUserWidgetGacha_ShowSkipGacha, bInVisible) == 0x000000, "Member 'TLUserWidgetGacha_ShowSkipGacha::bInVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetHeadUI.OnUpdateCombatAlert
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetHeadUI_OnUpdateCombatAlert final
{
public:
	ETLCombatAlertType                            InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetHeadUI_OnUpdateCombatAlert) == 0x000001, "Wrong alignment on TLUserWidgetHeadUI_OnUpdateCombatAlert");
static_assert(sizeof(TLUserWidgetHeadUI_OnUpdateCombatAlert) == 0x000001, "Wrong size on TLUserWidgetHeadUI_OnUpdateCombatAlert");
static_assert(offsetof(TLUserWidgetHeadUI_OnUpdateCombatAlert, InType) == 0x000000, "Member 'TLUserWidgetHeadUI_OnUpdateCombatAlert::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetRuneSocketPanel.OnActiveRuneStatEffect
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRuneSocketPanel_OnActiveRuneStatEffect final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRuneSocketPanel_OnActiveRuneStatEffect) == 0x000001, "Wrong alignment on TLUserWidgetRuneSocketPanel_OnActiveRuneStatEffect");
static_assert(sizeof(TLUserWidgetRuneSocketPanel_OnActiveRuneStatEffect) == 0x000001, "Wrong size on TLUserWidgetRuneSocketPanel_OnActiveRuneStatEffect");
static_assert(offsetof(TLUserWidgetRuneSocketPanel_OnActiveRuneStatEffect, InIsActive) == 0x000000, "Member 'TLUserWidgetRuneSocketPanel_OnActiveRuneStatEffect::InIsActive' has a wrong offset!");

// Function TLClient.TLUserWidgetRuneSocketPanel.OnActiveRuneSynergy
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetRuneSocketPanel_OnActiveRuneSynergy final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemGrade                                    InSynergyGrade;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRuneSocketPanel_OnActiveRuneSynergy) == 0x000001, "Wrong alignment on TLUserWidgetRuneSocketPanel_OnActiveRuneSynergy");
static_assert(sizeof(TLUserWidgetRuneSocketPanel_OnActiveRuneSynergy) == 0x000002, "Wrong size on TLUserWidgetRuneSocketPanel_OnActiveRuneSynergy");
static_assert(offsetof(TLUserWidgetRuneSocketPanel_OnActiveRuneSynergy, InIsActive) == 0x000000, "Member 'TLUserWidgetRuneSocketPanel_OnActiveRuneSynergy::InIsActive' has a wrong offset!");
static_assert(offsetof(TLUserWidgetRuneSocketPanel_OnActiveRuneSynergy, InSynergyGrade) == 0x000001, "Member 'TLUserWidgetRuneSocketPanel_OnActiveRuneSynergy::InSynergyGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetRuneSocketPanel.OnEmptyTargetItem
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRuneSocketPanel_OnEmptyTargetItem final
{
public:
	bool                                          InIsEmpty;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRuneSocketPanel_OnEmptyTargetItem) == 0x000001, "Wrong alignment on TLUserWidgetRuneSocketPanel_OnEmptyTargetItem");
static_assert(sizeof(TLUserWidgetRuneSocketPanel_OnEmptyTargetItem) == 0x000001, "Wrong size on TLUserWidgetRuneSocketPanel_OnEmptyTargetItem");
static_assert(offsetof(TLUserWidgetRuneSocketPanel_OnEmptyTargetItem, InIsEmpty) == 0x000000, "Member 'TLUserWidgetRuneSocketPanel_OnEmptyTargetItem::InIsEmpty' has a wrong offset!");

// Function TLClient.TLUserWidgetRuneSocketPanel.OnTargetItemWating
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRuneSocketPanel_OnTargetItemWating final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRuneSocketPanel_OnTargetItemWating) == 0x000001, "Wrong alignment on TLUserWidgetRuneSocketPanel_OnTargetItemWating");
static_assert(sizeof(TLUserWidgetRuneSocketPanel_OnTargetItemWating) == 0x000001, "Wrong size on TLUserWidgetRuneSocketPanel_OnTargetItemWating");
static_assert(offsetof(TLUserWidgetRuneSocketPanel_OnTargetItemWating, InIsActive) == 0x000000, "Member 'TLUserWidgetRuneSocketPanel_OnTargetItemWating::InIsActive' has a wrong offset!");

// Function TLClient.TLUserWidgetSeasonPassLevelUnit.OnChangedPassLevel
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSeasonPassLevelUnit_OnChangedPassLevel final
{
public:
	bool                                          InIsMyLevelUnit;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSeasonPassLevelUnit_OnChangedPassLevel) == 0x000001, "Wrong alignment on TLUserWidgetSeasonPassLevelUnit_OnChangedPassLevel");
static_assert(sizeof(TLUserWidgetSeasonPassLevelUnit_OnChangedPassLevel) == 0x000001, "Wrong size on TLUserWidgetSeasonPassLevelUnit_OnChangedPassLevel");
static_assert(offsetof(TLUserWidgetSeasonPassLevelUnit_OnChangedPassLevel, InIsMyLevelUnit) == 0x000000, "Member 'TLUserWidgetSeasonPassLevelUnit_OnChangedPassLevel::InIsMyLevelUnit' has a wrong offset!");

// Function TLClient.TLUserWidgetSeasonPassLevelUnit.OnGuidePointShop
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetSeasonPassLevelUnit_OnGuidePointShop final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InHasPassTicket;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSeasonPassLevelUnit_OnGuidePointShop) == 0x000001, "Wrong alignment on TLUserWidgetSeasonPassLevelUnit_OnGuidePointShop");
static_assert(sizeof(TLUserWidgetSeasonPassLevelUnit_OnGuidePointShop) == 0x000002, "Wrong size on TLUserWidgetSeasonPassLevelUnit_OnGuidePointShop");
static_assert(offsetof(TLUserWidgetSeasonPassLevelUnit_OnGuidePointShop, bInShow) == 0x000000, "Member 'TLUserWidgetSeasonPassLevelUnit_OnGuidePointShop::bInShow' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSeasonPassLevelUnit_OnGuidePointShop, InHasPassTicket) == 0x000001, "Member 'TLUserWidgetSeasonPassLevelUnit_OnGuidePointShop::InHasPassTicket' has a wrong offset!");

// Function TLClient.TLUserWidgetSeasonPassLevelUnit.OnSetupLevelInfo
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSeasonPassLevelUnit_OnSetupLevelInfo final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSeasonPassLevelUnit_OnSetupLevelInfo) == 0x000004, "Wrong alignment on TLUserWidgetSeasonPassLevelUnit_OnSetupLevelInfo");
static_assert(sizeof(TLUserWidgetSeasonPassLevelUnit_OnSetupLevelInfo) == 0x000004, "Wrong size on TLUserWidgetSeasonPassLevelUnit_OnSetupLevelInfo");
static_assert(offsetof(TLUserWidgetSeasonPassLevelUnit_OnSetupLevelInfo, InLevel) == 0x000000, "Member 'TLUserWidgetSeasonPassLevelUnit_OnSetupLevelInfo::InLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetSeasonPassLevelUnit.OnUpdatePassPointEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSeasonPassLevelUnit_OnUpdatePassPointEvent final
{
public:
	bool                                          InbLevelUp;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSeasonPassLevelUnit_OnUpdatePassPointEvent) == 0x000001, "Wrong alignment on TLUserWidgetSeasonPassLevelUnit_OnUpdatePassPointEvent");
static_assert(sizeof(TLUserWidgetSeasonPassLevelUnit_OnUpdatePassPointEvent) == 0x000001, "Wrong size on TLUserWidgetSeasonPassLevelUnit_OnUpdatePassPointEvent");
static_assert(offsetof(TLUserWidgetSeasonPassLevelUnit_OnUpdatePassPointEvent, InbLevelUp) == 0x000000, "Member 'TLUserWidgetSeasonPassLevelUnit_OnUpdatePassPointEvent::InbLevelUp' has a wrong offset!");

// Function TLClient.TLUserWidgetTooltipWorldBoss.OnUpdateScheduleType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTooltipWorldBoss_OnUpdateScheduleType final
{
public:
	ETLEventScheduleType                          InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTooltipWorldBoss_OnUpdateScheduleType) == 0x000001, "Wrong alignment on TLUserWidgetTooltipWorldBoss_OnUpdateScheduleType");
static_assert(sizeof(TLUserWidgetTooltipWorldBoss_OnUpdateScheduleType) == 0x000001, "Wrong size on TLUserWidgetTooltipWorldBoss_OnUpdateScheduleType");
static_assert(offsetof(TLUserWidgetTooltipWorldBoss_OnUpdateScheduleType, InType) == 0x000000, "Member 'TLUserWidgetTooltipWorldBoss_OnUpdateScheduleType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitmentInfo.IsMyPartyFulled
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyRecruitmentInfo_IsMyPartyFulled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitmentInfo_IsMyPartyFulled) == 0x000001, "Wrong alignment on TLUserWidgetPartyRecruitmentInfo_IsMyPartyFulled");
static_assert(sizeof(TLUserWidgetPartyRecruitmentInfo_IsMyPartyFulled) == 0x000001, "Wrong size on TLUserWidgetPartyRecruitmentInfo_IsMyPartyFulled");
static_assert(offsetof(TLUserWidgetPartyRecruitmentInfo_IsMyPartyFulled, ReturnValue) == 0x000000, "Member 'TLUserWidgetPartyRecruitmentInfo_IsMyPartyFulled::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitmentInfo.IsPartyMaster
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyRecruitmentInfo_IsPartyMaster final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitmentInfo_IsPartyMaster) == 0x000001, "Wrong alignment on TLUserWidgetPartyRecruitmentInfo_IsPartyMaster");
static_assert(sizeof(TLUserWidgetPartyRecruitmentInfo_IsPartyMaster) == 0x000001, "Wrong size on TLUserWidgetPartyRecruitmentInfo_IsPartyMaster");
static_assert(offsetof(TLUserWidgetPartyRecruitmentInfo_IsPartyMaster, ReturnValue) == 0x000000, "Member 'TLUserWidgetPartyRecruitmentInfo_IsPartyMaster::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitmentInfo.OnState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyRecruitmentInfo_OnState final
{
public:
	ETLPartyState                                 InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitmentInfo_OnState) == 0x000001, "Wrong alignment on TLUserWidgetPartyRecruitmentInfo_OnState");
static_assert(sizeof(TLUserWidgetPartyRecruitmentInfo_OnState) == 0x000001, "Wrong size on TLUserWidgetPartyRecruitmentInfo_OnState");
static_assert(offsetof(TLUserWidgetPartyRecruitmentInfo_OnState, InState) == 0x000000, "Member 'TLUserWidgetPartyRecruitmentInfo_OnState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitmentInfo.OnVisibleExpireInfo
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyRecruitmentInfo_OnVisibleExpireInfo final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitmentInfo_OnVisibleExpireInfo) == 0x000001, "Wrong alignment on TLUserWidgetPartyRecruitmentInfo_OnVisibleExpireInfo");
static_assert(sizeof(TLUserWidgetPartyRecruitmentInfo_OnVisibleExpireInfo) == 0x000001, "Wrong size on TLUserWidgetPartyRecruitmentInfo_OnVisibleExpireInfo");
static_assert(offsetof(TLUserWidgetPartyRecruitmentInfo_OnVisibleExpireInfo, bVisible) == 0x000000, "Member 'TLUserWidgetPartyRecruitmentInfo_OnVisibleExpireInfo::bVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetActionKeyGuideItemAxis.OnPressed
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetActionKeyGuideItemAxis_OnPressed final
{
public:
	ETLActionKeyGuideAxisEventType                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetActionKeyGuideItemAxis_OnPressed) == 0x000001, "Wrong alignment on TLUserWidgetActionKeyGuideItemAxis_OnPressed");
static_assert(sizeof(TLUserWidgetActionKeyGuideItemAxis_OnPressed) == 0x000001, "Wrong size on TLUserWidgetActionKeyGuideItemAxis_OnPressed");
static_assert(offsetof(TLUserWidgetActionKeyGuideItemAxis_OnPressed, Type) == 0x000000, "Member 'TLUserWidgetActionKeyGuideItemAxis_OnPressed::Type' has a wrong offset!");

// Function TLClient.TLUserWidgetActionKeyGuideItemAxis.OnReleased
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetActionKeyGuideItemAxis_OnReleased final
{
public:
	ETLActionKeyGuideAxisEventType                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetActionKeyGuideItemAxis_OnReleased) == 0x000001, "Wrong alignment on TLUserWidgetActionKeyGuideItemAxis_OnReleased");
static_assert(sizeof(TLUserWidgetActionKeyGuideItemAxis_OnReleased) == 0x000001, "Wrong size on TLUserWidgetActionKeyGuideItemAxis_OnReleased");
static_assert(offsetof(TLUserWidgetActionKeyGuideItemAxis_OnReleased, Type) == 0x000000, "Member 'TLUserWidgetActionKeyGuideItemAxis_OnReleased::Type' has a wrong offset!");

// Function TLClient.TLUserWidgetActionKeyGuide.OnCreateGuide
// 0x0060 (0x0060 - 0x0000)
struct TLUserWidgetActionKeyGuide_OnCreateGuide final
{
public:
	struct FTLActionKeyGuideInfo                  InInfo;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetActionKeyGuide_OnCreateGuide) == 0x000008, "Wrong alignment on TLUserWidgetActionKeyGuide_OnCreateGuide");
static_assert(sizeof(TLUserWidgetActionKeyGuide_OnCreateGuide) == 0x000060, "Wrong size on TLUserWidgetActionKeyGuide_OnCreateGuide");
static_assert(offsetof(TLUserWidgetActionKeyGuide_OnCreateGuide, InInfo) == 0x000000, "Member 'TLUserWidgetActionKeyGuide_OnCreateGuide::InInfo' has a wrong offset!");

// Function TLClient.TLUserWidgetAICustomAgreement.OnClickLinkBP
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetAICustomAgreement_OnClickLinkBP final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAICustomAgreement_OnClickLinkBP) == 0x000001, "Wrong alignment on TLUserWidgetAICustomAgreement_OnClickLinkBP");
static_assert(sizeof(TLUserWidgetAICustomAgreement_OnClickLinkBP) == 0x000001, "Wrong size on TLUserWidgetAICustomAgreement_OnClickLinkBP");
static_assert(offsetof(TLUserWidgetAICustomAgreement_OnClickLinkBP, bOpen) == 0x000000, "Member 'TLUserWidgetAICustomAgreement_OnClickLinkBP::bOpen' has a wrong offset!");

// Function TLClient.TLUserWidgetAICustomAgreement.IsOpenedLinkDesc
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetAICustomAgreement_IsOpenedLinkDesc final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAICustomAgreement_IsOpenedLinkDesc) == 0x000001, "Wrong alignment on TLUserWidgetAICustomAgreement_IsOpenedLinkDesc");
static_assert(sizeof(TLUserWidgetAICustomAgreement_IsOpenedLinkDesc) == 0x000001, "Wrong size on TLUserWidgetAICustomAgreement_IsOpenedLinkDesc");
static_assert(offsetof(TLUserWidgetAICustomAgreement_IsOpenedLinkDesc, ReturnValue) == 0x000000, "Member 'TLUserWidgetAICustomAgreement_IsOpenedLinkDesc::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSelectableFixedPackage.OnConfirmStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSelectableFixedPackage_OnConfirmStatusChanged final
{
public:
	bool                                          InCanConfirm;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSelectableFixedPackage_OnConfirmStatusChanged) == 0x000001, "Wrong alignment on TLUserWidgetSelectableFixedPackage_OnConfirmStatusChanged");
static_assert(sizeof(TLUserWidgetSelectableFixedPackage_OnConfirmStatusChanged) == 0x000001, "Wrong size on TLUserWidgetSelectableFixedPackage_OnConfirmStatusChanged");
static_assert(offsetof(TLUserWidgetSelectableFixedPackage_OnConfirmStatusChanged, InCanConfirm) == 0x000000, "Member 'TLUserWidgetSelectableFixedPackage_OnConfirmStatusChanged::InCanConfirm' has a wrong offset!");

// Function TLClient.TLUserWidgetTooltipFieldBoss.OnUpdateScheduleType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTooltipFieldBoss_OnUpdateScheduleType final
{
public:
	ETLEventScheduleType                          InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTooltipFieldBoss_OnUpdateScheduleType) == 0x000001, "Wrong alignment on TLUserWidgetTooltipFieldBoss_OnUpdateScheduleType");
static_assert(sizeof(TLUserWidgetTooltipFieldBoss_OnUpdateScheduleType) == 0x000001, "Wrong size on TLUserWidgetTooltipFieldBoss_OnUpdateScheduleType");
static_assert(offsetof(TLUserWidgetTooltipFieldBoss_OnUpdateScheduleType, InType) == 0x000000, "Member 'TLUserWidgetTooltipFieldBoss_OnUpdateScheduleType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetAlchemy.OnAlchemyTotalPointUpdated
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetAlchemy_OnAlchemyTotalPointUpdated final
{
public:
	int32                                         InTotalPoint;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsIncrease;                                      // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetAlchemy_OnAlchemyTotalPointUpdated) == 0x000004, "Wrong alignment on TLUserWidgetAlchemy_OnAlchemyTotalPointUpdated");
static_assert(sizeof(TLUserWidgetAlchemy_OnAlchemyTotalPointUpdated) == 0x000008, "Wrong size on TLUserWidgetAlchemy_OnAlchemyTotalPointUpdated");
static_assert(offsetof(TLUserWidgetAlchemy_OnAlchemyTotalPointUpdated, InTotalPoint) == 0x000000, "Member 'TLUserWidgetAlchemy_OnAlchemyTotalPointUpdated::InTotalPoint' has a wrong offset!");
static_assert(offsetof(TLUserWidgetAlchemy_OnAlchemyTotalPointUpdated, InIsIncrease) == 0x000004, "Member 'TLUserWidgetAlchemy_OnAlchemyTotalPointUpdated::InIsIncrease' has a wrong offset!");

// Function TLClient.TLUserWidgetAlchemy.OnIncreaseAlchemyStep
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetAlchemy_OnIncreaseAlchemyStep final
{
public:
	bool                                          InIsLastStep;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAlchemy_OnIncreaseAlchemyStep) == 0x000001, "Wrong alignment on TLUserWidgetAlchemy_OnIncreaseAlchemyStep");
static_assert(sizeof(TLUserWidgetAlchemy_OnIncreaseAlchemyStep) == 0x000001, "Wrong size on TLUserWidgetAlchemy_OnIncreaseAlchemyStep");
static_assert(offsetof(TLUserWidgetAlchemy_OnIncreaseAlchemyStep, InIsLastStep) == 0x000000, "Member 'TLUserWidgetAlchemy_OnIncreaseAlchemyStep::InIsLastStep' has a wrong offset!");

// Function TLClient.TLUserWidgetRefreshButton.EnableRefreshButton
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRefreshButton_EnableRefreshButton final
{
public:
	bool                                          InEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRefreshButton_EnableRefreshButton) == 0x000001, "Wrong alignment on TLUserWidgetRefreshButton_EnableRefreshButton");
static_assert(sizeof(TLUserWidgetRefreshButton_EnableRefreshButton) == 0x000001, "Wrong size on TLUserWidgetRefreshButton_EnableRefreshButton");
static_assert(offsetof(TLUserWidgetRefreshButton_EnableRefreshButton, InEnable) == 0x000000, "Member 'TLUserWidgetRefreshButton_EnableRefreshButton::InEnable' has a wrong offset!");

// Function TLClient.TLUserWidgetShopCurrency.GetValue
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetShopCurrency_GetValue final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetShopCurrency_GetValue) == 0x000008, "Wrong alignment on TLUserWidgetShopCurrency_GetValue");
static_assert(sizeof(TLUserWidgetShopCurrency_GetValue) == 0x000008, "Wrong size on TLUserWidgetShopCurrency_GetValue");
static_assert(offsetof(TLUserWidgetShopCurrency_GetValue, ReturnValue) == 0x000000, "Member 'TLUserWidgetShopCurrency_GetValue::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetShopCurrency.OnCurrencyTypeChange
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetShopCurrency_OnCurrencyTypeChange final
{
public:
	EShopCurrencyType                             InCurrencyType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetShopCurrency_OnCurrencyTypeChange) == 0x000001, "Wrong alignment on TLUserWidgetShopCurrency_OnCurrencyTypeChange");
static_assert(sizeof(TLUserWidgetShopCurrency_OnCurrencyTypeChange) == 0x000001, "Wrong size on TLUserWidgetShopCurrency_OnCurrencyTypeChange");
static_assert(offsetof(TLUserWidgetShopCurrency_OnCurrencyTypeChange, InCurrencyType) == 0x000000, "Member 'TLUserWidgetShopCurrency_OnCurrencyTypeChange::InCurrencyType' has a wrong offset!");

// Function TLClient.TLUserWidgetShopCurrency.ShowTooltipWithValue
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetShopCurrency_ShowTooltipWithValue final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetShopCurrency_ShowTooltipWithValue) == 0x000001, "Wrong alignment on TLUserWidgetShopCurrency_ShowTooltipWithValue");
static_assert(sizeof(TLUserWidgetShopCurrency_ShowTooltipWithValue) == 0x000001, "Wrong size on TLUserWidgetShopCurrency_ShowTooltipWithValue");
static_assert(offsetof(TLUserWidgetShopCurrency_ShowTooltipWithValue, InShow) == 0x000000, "Member 'TLUserWidgetShopCurrency_ShowTooltipWithValue::InShow' has a wrong offset!");

// Function TLClient.TLUserWidgetAlchemyResult.OnPlayAnim
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetAlchemyResult_OnPlayAnim final
{
public:
	ETLAlchemySceneGradeType                      InCutSceneGradeType;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAlchemyResult_OnPlayAnim) == 0x000001, "Wrong alignment on TLUserWidgetAlchemyResult_OnPlayAnim");
static_assert(sizeof(TLUserWidgetAlchemyResult_OnPlayAnim) == 0x000001, "Wrong size on TLUserWidgetAlchemyResult_OnPlayAnim");
static_assert(offsetof(TLUserWidgetAlchemyResult_OnPlayAnim, InCutSceneGradeType) == 0x000000, "Member 'TLUserWidgetAlchemyResult_OnPlayAnim::InCutSceneGradeType' has a wrong offset!");

// Function TLClient.TLUserWidgetMagicDollDialog.UpdateMagicDollDialog
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMagicDollDialog_UpdateMagicDollDialog final
{
public:
	ETLMagicDollStringDialogType                  Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMagicDollDialog_UpdateMagicDollDialog) == 0x000001, "Wrong alignment on TLUserWidgetMagicDollDialog_UpdateMagicDollDialog");
static_assert(sizeof(TLUserWidgetMagicDollDialog_UpdateMagicDollDialog) == 0x000001, "Wrong size on TLUserWidgetMagicDollDialog_UpdateMagicDollDialog");
static_assert(offsetof(TLUserWidgetMagicDollDialog_UpdateMagicDollDialog, Type) == 0x000000, "Member 'TLUserWidgetMagicDollDialog_UpdateMagicDollDialog::Type' has a wrong offset!");

// Function TLClient.TLUserWidgetAmount.SetEnoughCost
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetAmount_SetEnoughCost final
{
public:
	bool                                          bInEnoughCost;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAmount_SetEnoughCost) == 0x000001, "Wrong alignment on TLUserWidgetAmount_SetEnoughCost");
static_assert(sizeof(TLUserWidgetAmount_SetEnoughCost) == 0x000001, "Wrong size on TLUserWidgetAmount_SetEnoughCost");
static_assert(offsetof(TLUserWidgetAmount_SetEnoughCost, bInEnoughCost) == 0x000000, "Member 'TLUserWidgetAmount_SetEnoughCost::bInEnoughCost' has a wrong offset!");

// Function TLClient.TLUserWidgetAmount.SetValue
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetAmount_SetValue final
{
public:
	int64                                         InValue;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAmount_SetValue) == 0x000008, "Wrong alignment on TLUserWidgetAmount_SetValue");
static_assert(sizeof(TLUserWidgetAmount_SetValue) == 0x000008, "Wrong size on TLUserWidgetAmount_SetValue");
static_assert(offsetof(TLUserWidgetAmount_SetValue, InValue) == 0x000000, "Member 'TLUserWidgetAmount_SetValue::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyHud.OnUpdatePartyState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyHud_OnUpdatePartyState final
{
public:
	ETLPartyState                                 InPartyState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyHud_OnUpdatePartyState) == 0x000001, "Wrong alignment on TLUserWidgetPartyHud_OnUpdatePartyState");
static_assert(sizeof(TLUserWidgetPartyHud_OnUpdatePartyState) == 0x000001, "Wrong size on TLUserWidgetPartyHud_OnUpdatePartyState");
static_assert(offsetof(TLUserWidgetPartyHud_OnUpdatePartyState, InPartyState) == 0x000000, "Member 'TLUserWidgetPartyHud_OnUpdatePartyState::InPartyState' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyHud.IsMatchingParty
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyHud_IsMatchingParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyHud_IsMatchingParty) == 0x000001, "Wrong alignment on TLUserWidgetPartyHud_IsMatchingParty");
static_assert(sizeof(TLUserWidgetPartyHud_IsMatchingParty) == 0x000001, "Wrong size on TLUserWidgetPartyHud_IsMatchingParty");
static_assert(offsetof(TLUserWidgetPartyHud_IsMatchingParty, ReturnValue) == 0x000000, "Member 'TLUserWidgetPartyHud_IsMatchingParty::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetArenaPartyIcon.OnSetPartyType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArenaPartyIcon_OnSetPartyType final
{
public:
	ETLArenaPartyType                             InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArenaPartyIcon_OnSetPartyType) == 0x000001, "Wrong alignment on TLUserWidgetArenaPartyIcon_OnSetPartyType");
static_assert(sizeof(TLUserWidgetArenaPartyIcon_OnSetPartyType) == 0x000001, "Wrong size on TLUserWidgetArenaPartyIcon_OnSetPartyType");
static_assert(offsetof(TLUserWidgetArenaPartyIcon_OnSetPartyType, InType) == 0x000000, "Member 'TLUserWidgetArenaPartyIcon_OnSetPartyType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetArenaTierChangeEffect.PlayPartyTypeIconEffect
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArenaTierChangeEffect_PlayPartyTypeIconEffect final
{
public:
	ETLArenaPartyType                             InPartyType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArenaTierChangeEffect_PlayPartyTypeIconEffect) == 0x000001, "Wrong alignment on TLUserWidgetArenaTierChangeEffect_PlayPartyTypeIconEffect");
static_assert(sizeof(TLUserWidgetArenaTierChangeEffect_PlayPartyTypeIconEffect) == 0x000001, "Wrong size on TLUserWidgetArenaTierChangeEffect_PlayPartyTypeIconEffect");
static_assert(offsetof(TLUserWidgetArenaTierChangeEffect_PlayPartyTypeIconEffect, InPartyType) == 0x000000, "Member 'TLUserWidgetArenaTierChangeEffect_PlayPartyTypeIconEffect::InPartyType' has a wrong offset!");

// Function TLClient.TLUserWidgetTooltipItemTraitInfo.OnTraitResonanceState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTooltipItemTraitInfo_OnTraitResonanceState final
{
public:
	bool                                          IsOpened;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTooltipItemTraitInfo_OnTraitResonanceState) == 0x000001, "Wrong alignment on TLUserWidgetTooltipItemTraitInfo_OnTraitResonanceState");
static_assert(sizeof(TLUserWidgetTooltipItemTraitInfo_OnTraitResonanceState) == 0x000001, "Wrong size on TLUserWidgetTooltipItemTraitInfo_OnTraitResonanceState");
static_assert(offsetof(TLUserWidgetTooltipItemTraitInfo_OnTraitResonanceState, IsOpened) == 0x000000, "Member 'TLUserWidgetTooltipItemTraitInfo_OnTraitResonanceState::IsOpened' has a wrong offset!");

// Function TLClient.TLUserWidgetItemPackageResultSlotInterface.OnPlayShowAnim
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemPackageResultSlotInterface_OnPlayShowAnim final
{
public:
	EItemGrade                                    InGrade;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemPackageResultSlotInterface_OnPlayShowAnim) == 0x000001, "Wrong alignment on TLUserWidgetItemPackageResultSlotInterface_OnPlayShowAnim");
static_assert(sizeof(TLUserWidgetItemPackageResultSlotInterface_OnPlayShowAnim) == 0x000001, "Wrong size on TLUserWidgetItemPackageResultSlotInterface_OnPlayShowAnim");
static_assert(offsetof(TLUserWidgetItemPackageResultSlotInterface_OnPlayShowAnim, InGrade) == 0x000000, "Member 'TLUserWidgetItemPackageResultSlotInterface_OnPlayShowAnim::InGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDonateItem.OnEnableDonate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildDonateItem_OnEnableDonate final
{
public:
	bool                                          InIsEnable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDonateItem_OnEnableDonate) == 0x000001, "Wrong alignment on TLUserWidgetGuildDonateItem_OnEnableDonate");
static_assert(sizeof(TLUserWidgetGuildDonateItem_OnEnableDonate) == 0x000001, "Wrong size on TLUserWidgetGuildDonateItem_OnEnableDonate");
static_assert(offsetof(TLUserWidgetGuildDonateItem_OnEnableDonate, InIsEnable) == 0x000000, "Member 'TLUserWidgetGuildDonateItem_OnEnableDonate::InIsEnable' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDonateItem.OnReqDonation
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetGuildDonateItem_OnReqDonation final
{
public:
	class FText                                   InDonationText;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDonateItem_OnReqDonation) == 0x000008, "Wrong alignment on TLUserWidgetGuildDonateItem_OnReqDonation");
static_assert(sizeof(TLUserWidgetGuildDonateItem_OnReqDonation) == 0x000018, "Wrong size on TLUserWidgetGuildDonateItem_OnReqDonation");
static_assert(offsetof(TLUserWidgetGuildDonateItem_OnReqDonation, InDonationText) == 0x000000, "Member 'TLUserWidgetGuildDonateItem_OnReqDonation::InDonationText' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDonateItem.OnUpdateRecommend
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildDonateItem_OnUpdateRecommend final
{
public:
	bool                                          IsRecommend;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDonateItem_OnUpdateRecommend) == 0x000001, "Wrong alignment on TLUserWidgetGuildDonateItem_OnUpdateRecommend");
static_assert(sizeof(TLUserWidgetGuildDonateItem_OnUpdateRecommend) == 0x000001, "Wrong size on TLUserWidgetGuildDonateItem_OnUpdateRecommend");
static_assert(offsetof(TLUserWidgetGuildDonateItem_OnUpdateRecommend, IsRecommend) == 0x000000, "Member 'TLUserWidgetGuildDonateItem_OnUpdateRecommend::IsRecommend' has a wrong offset!");

// Function TLClient.TLUserWidgetContentsAlramGuideBase.OnFoldGuide
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContentsAlramGuideBase_OnFoldGuide final
{
public:
	bool                                          InIsOpen;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContentsAlramGuideBase_OnFoldGuide) == 0x000001, "Wrong alignment on TLUserWidgetContentsAlramGuideBase_OnFoldGuide");
static_assert(sizeof(TLUserWidgetContentsAlramGuideBase_OnFoldGuide) == 0x000001, "Wrong size on TLUserWidgetContentsAlramGuideBase_OnFoldGuide");
static_assert(offsetof(TLUserWidgetContentsAlramGuideBase_OnFoldGuide, InIsOpen) == 0x000000, "Member 'TLUserWidgetContentsAlramGuideBase_OnFoldGuide::InIsOpen' has a wrong offset!");

// Function TLClient.TLUserWidgetItemPackageResultList.OnTitleSet
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetItemPackageResultList_OnTitleSet final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemPackageResultList_OnTitleSet) == 0x000008, "Wrong alignment on TLUserWidgetItemPackageResultList_OnTitleSet");
static_assert(sizeof(TLUserWidgetItemPackageResultList_OnTitleSet) == 0x000018, "Wrong size on TLUserWidgetItemPackageResultList_OnTitleSet");
static_assert(offsetof(TLUserWidgetItemPackageResultList_OnTitleSet, InText) == 0x000000, "Member 'TLUserWidgetItemPackageResultList_OnTitleSet::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetArenaDailyScheduleSlot.SetDayHighlightFX
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArenaDailyScheduleSlot_SetDayHighlightFX final
{
public:
	bool                                          bSet;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArenaDailyScheduleSlot_SetDayHighlightFX) == 0x000001, "Wrong alignment on TLUserWidgetArenaDailyScheduleSlot_SetDayHighlightFX");
static_assert(sizeof(TLUserWidgetArenaDailyScheduleSlot_SetDayHighlightFX) == 0x000001, "Wrong size on TLUserWidgetArenaDailyScheduleSlot_SetDayHighlightFX");
static_assert(offsetof(TLUserWidgetArenaDailyScheduleSlot_SetDayHighlightFX, bSet) == 0x000000, "Member 'TLUserWidgetArenaDailyScheduleSlot_SetDayHighlightFX::bSet' has a wrong offset!");

// Function TLClient.TLUserWidgetArenaMatchingConfirmPopup.UpdateAcceptAndCancelButtonVisibility
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArenaMatchingConfirmPopup_UpdateAcceptAndCancelButtonVisibility final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArenaMatchingConfirmPopup_UpdateAcceptAndCancelButtonVisibility) == 0x000001, "Wrong alignment on TLUserWidgetArenaMatchingConfirmPopup_UpdateAcceptAndCancelButtonVisibility");
static_assert(sizeof(TLUserWidgetArenaMatchingConfirmPopup_UpdateAcceptAndCancelButtonVisibility) == 0x000001, "Wrong size on TLUserWidgetArenaMatchingConfirmPopup_UpdateAcceptAndCancelButtonVisibility");
static_assert(offsetof(TLUserWidgetArenaMatchingConfirmPopup_UpdateAcceptAndCancelButtonVisibility, bInShow) == 0x000000, "Member 'TLUserWidgetArenaMatchingConfirmPopup_UpdateAcceptAndCancelButtonVisibility::bInShow' has a wrong offset!");

// Function TLClient.TLUserWidgetArenaMatchingConfirmStatusListItem.OnUpdateColorType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArenaMatchingConfirmStatusListItem_OnUpdateColorType final
{
public:
	ETLArenaMatchingConfirmStatusListItemColorType InColorType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArenaMatchingConfirmStatusListItem_OnUpdateColorType) == 0x000001, "Wrong alignment on TLUserWidgetArenaMatchingConfirmStatusListItem_OnUpdateColorType");
static_assert(sizeof(TLUserWidgetArenaMatchingConfirmStatusListItem_OnUpdateColorType) == 0x000001, "Wrong size on TLUserWidgetArenaMatchingConfirmStatusListItem_OnUpdateColorType");
static_assert(offsetof(TLUserWidgetArenaMatchingConfirmStatusListItem_OnUpdateColorType, InColorType) == 0x000000, "Member 'TLUserWidgetArenaMatchingConfirmStatusListItem_OnUpdateColorType::InColorType' has a wrong offset!");

// Function TLClient.TLUserWidgetArenaMatchingConfirmStatusListItem.OnUpdateStatus
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArenaMatchingConfirmStatusListItem_OnUpdateStatus final
{
public:
	ETLArenaMatchingConfirmStatus                 InConfirmStatus;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArenaMatchingConfirmStatusListItem_OnUpdateStatus) == 0x000001, "Wrong alignment on TLUserWidgetArenaMatchingConfirmStatusListItem_OnUpdateStatus");
static_assert(sizeof(TLUserWidgetArenaMatchingConfirmStatusListItem_OnUpdateStatus) == 0x000001, "Wrong size on TLUserWidgetArenaMatchingConfirmStatusListItem_OnUpdateStatus");
static_assert(offsetof(TLUserWidgetArenaMatchingConfirmStatusListItem_OnUpdateStatus, InConfirmStatus) == 0x000000, "Member 'TLUserWidgetArenaMatchingConfirmStatusListItem_OnUpdateStatus::InConfirmStatus' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitExtractMaterialSlot.OnAddItem
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitExtractMaterialSlot_OnAddItem final
{
public:
	bool                                          InIsUpdated;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitExtractMaterialSlot_OnAddItem) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitExtractMaterialSlot_OnAddItem");
static_assert(sizeof(TLUserWidgetItemTraitExtractMaterialSlot_OnAddItem) == 0x000001, "Wrong size on TLUserWidgetItemTraitExtractMaterialSlot_OnAddItem");
static_assert(offsetof(TLUserWidgetItemTraitExtractMaterialSlot_OnAddItem, InIsUpdated) == 0x000000, "Member 'TLUserWidgetItemTraitExtractMaterialSlot_OnAddItem::InIsUpdated' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitExtractMaterialSlot.OnLackMaterial
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitExtractMaterialSlot_OnLackMaterial final
{
public:
	bool                                          InIsLack;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitExtractMaterialSlot_OnLackMaterial) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitExtractMaterialSlot_OnLackMaterial");
static_assert(sizeof(TLUserWidgetItemTraitExtractMaterialSlot_OnLackMaterial) == 0x000001, "Wrong size on TLUserWidgetItemTraitExtractMaterialSlot_OnLackMaterial");
static_assert(offsetof(TLUserWidgetItemTraitExtractMaterialSlot_OnLackMaterial, InIsLack) == 0x000000, "Member 'TLUserWidgetItemTraitExtractMaterialSlot_OnLackMaterial::InIsLack' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitExtractMaterialSlot.OnRemoveItem
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitExtractMaterialSlot_OnRemoveItem final
{
public:
	bool                                          InIsUpdated;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitExtractMaterialSlot_OnRemoveItem) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitExtractMaterialSlot_OnRemoveItem");
static_assert(sizeof(TLUserWidgetItemTraitExtractMaterialSlot_OnRemoveItem) == 0x000001, "Wrong size on TLUserWidgetItemTraitExtractMaterialSlot_OnRemoveItem");
static_assert(offsetof(TLUserWidgetItemTraitExtractMaterialSlot_OnRemoveItem, InIsUpdated) == 0x000000, "Member 'TLUserWidgetItemTraitExtractMaterialSlot_OnRemoveItem::InIsUpdated' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeCostItem.OnAvailableCost
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeCostItem_OnAvailableCost final
{
public:
	bool                                          IsAvailable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeCostItem_OnAvailableCost) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeCostItem_OnAvailableCost");
static_assert(sizeof(TLUserWidgetArmorCostumeCostItem_OnAvailableCost) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeCostItem_OnAvailableCost");
static_assert(offsetof(TLUserWidgetArmorCostumeCostItem_OnAvailableCost, IsAvailable) == 0x000000, "Member 'TLUserWidgetArmorCostumeCostItem_OnAvailableCost::IsAvailable' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeCustomizeConfirmListCostItem.OnAvailableCost
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeCustomizeConfirmListCostItem_OnAvailableCost final
{
public:
	bool                                          IsAvailable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeCustomizeConfirmListCostItem_OnAvailableCost) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeCustomizeConfirmListCostItem_OnAvailableCost");
static_assert(sizeof(TLUserWidgetArmorCostumeCustomizeConfirmListCostItem_OnAvailableCost) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeCustomizeConfirmListCostItem_OnAvailableCost");
static_assert(offsetof(TLUserWidgetArmorCostumeCustomizeConfirmListCostItem_OnAvailableCost, IsAvailable) == 0x000000, "Member 'TLUserWidgetArmorCostumeCustomizeConfirmListCostItem_OnAvailableCost::IsAvailable' has a wrong offset!");

// Function TLClient.TLUserWidgetTradeItemSearch.OnSearchTextBoxCommit
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetTradeItemSearch_OnSearchTextBoxCommit final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetTradeItemSearch_OnSearchTextBoxCommit) == 0x000008, "Wrong alignment on TLUserWidgetTradeItemSearch_OnSearchTextBoxCommit");
static_assert(sizeof(TLUserWidgetTradeItemSearch_OnSearchTextBoxCommit) == 0x000020, "Wrong size on TLUserWidgetTradeItemSearch_OnSearchTextBoxCommit");
static_assert(offsetof(TLUserWidgetTradeItemSearch_OnSearchTextBoxCommit, InText) == 0x000000, "Member 'TLUserWidgetTradeItemSearch_OnSearchTextBoxCommit::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetTradeItemSearch_OnSearchTextBoxCommit, InCommitMethod) == 0x000018, "Member 'TLUserWidgetTradeItemSearch_OnSearchTextBoxCommit::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetTradeItemSearch.SetSearchHyperlinkVisible
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetTradeItemSearch_SetSearchHyperlinkVisible final
{
public:
	bool                                          bShowSecondary;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowThird;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTradeItemSearch_SetSearchHyperlinkVisible) == 0x000001, "Wrong alignment on TLUserWidgetTradeItemSearch_SetSearchHyperlinkVisible");
static_assert(sizeof(TLUserWidgetTradeItemSearch_SetSearchHyperlinkVisible) == 0x000002, "Wrong size on TLUserWidgetTradeItemSearch_SetSearchHyperlinkVisible");
static_assert(offsetof(TLUserWidgetTradeItemSearch_SetSearchHyperlinkVisible, bShowSecondary) == 0x000000, "Member 'TLUserWidgetTradeItemSearch_SetSearchHyperlinkVisible::bShowSecondary' has a wrong offset!");
static_assert(offsetof(TLUserWidgetTradeItemSearch_SetSearchHyperlinkVisible, bShowThird) == 0x000001, "Member 'TLUserWidgetTradeItemSearch_SetSearchHyperlinkVisible::bShowThird' has a wrong offset!");

// Function TLClient.TLUserWidgetDragSlot.OnDragStart
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetDragSlot_OnDragStart final
{
public:
	class UTLUserWidgetIcon*                      SourceWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDragSlot_OnDragStart) == 0x000008, "Wrong alignment on TLUserWidgetDragSlot_OnDragStart");
static_assert(sizeof(TLUserWidgetDragSlot_OnDragStart) == 0x000008, "Wrong size on TLUserWidgetDragSlot_OnDragStart");
static_assert(offsetof(TLUserWidgetDragSlot_OnDragStart, SourceWidget) == 0x000000, "Member 'TLUserWidgetDragSlot_OnDragStart::SourceWidget' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeCustomizeColorSlotPanel.IsSelectedCustomizeColorSlot
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeCustomizeColorSlotPanel_IsSelectedCustomizeColorSlot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeCustomizeColorSlotPanel_IsSelectedCustomizeColorSlot) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeCustomizeColorSlotPanel_IsSelectedCustomizeColorSlot");
static_assert(sizeof(TLUserWidgetArmorCostumeCustomizeColorSlotPanel_IsSelectedCustomizeColorSlot) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeCustomizeColorSlotPanel_IsSelectedCustomizeColorSlot");
static_assert(offsetof(TLUserWidgetArmorCostumeCustomizeColorSlotPanel_IsSelectedCustomizeColorSlot, ReturnValue) == 0x000000, "Member 'TLUserWidgetArmorCostumeCustomizeColorSlotPanel_IsSelectedCustomizeColorSlot::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeCustomizeColorSlotPanel.OnClickHideAndExpandButtonImpl
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeCustomizeColorSlotPanel_OnClickHideAndExpandButtonImpl final
{
public:
	bool                                          bExpand;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeCustomizeColorSlotPanel_OnClickHideAndExpandButtonImpl) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeCustomizeColorSlotPanel_OnClickHideAndExpandButtonImpl");
static_assert(sizeof(TLUserWidgetArmorCostumeCustomizeColorSlotPanel_OnClickHideAndExpandButtonImpl) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeCustomizeColorSlotPanel_OnClickHideAndExpandButtonImpl");
static_assert(offsetof(TLUserWidgetArmorCostumeCustomizeColorSlotPanel_OnClickHideAndExpandButtonImpl, bExpand) == 0x000000, "Member 'TLUserWidgetArmorCostumeCustomizeColorSlotPanel_OnClickHideAndExpandButtonImpl::bExpand' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeCustomizeColorSlotPanel.OnShowColorPalette
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeCustomizeColorSlotPanel_OnShowColorPalette final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeCustomizeColorSlotPanel_OnShowColorPalette) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeCustomizeColorSlotPanel_OnShowColorPalette");
static_assert(sizeof(TLUserWidgetArmorCostumeCustomizeColorSlotPanel_OnShowColorPalette) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeCustomizeColorSlotPanel_OnShowColorPalette");
static_assert(offsetof(TLUserWidgetArmorCostumeCustomizeColorSlotPanel_OnShowColorPalette, bShow) == 0x000000, "Member 'TLUserWidgetArmorCostumeCustomizeColorSlotPanel_OnShowColorPalette::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeCustomizePatternColorSlotPanel.OnClickHideAndExpandButtonImpl
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeCustomizePatternColorSlotPanel_OnClickHideAndExpandButtonImpl final
{
public:
	bool                                          bExpand;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeCustomizePatternColorSlotPanel_OnClickHideAndExpandButtonImpl) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeCustomizePatternColorSlotPanel_OnClickHideAndExpandButtonImpl");
static_assert(sizeof(TLUserWidgetArmorCostumeCustomizePatternColorSlotPanel_OnClickHideAndExpandButtonImpl) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeCustomizePatternColorSlotPanel_OnClickHideAndExpandButtonImpl");
static_assert(offsetof(TLUserWidgetArmorCostumeCustomizePatternColorSlotPanel_OnClickHideAndExpandButtonImpl, bExpand) == 0x000000, "Member 'TLUserWidgetArmorCostumeCustomizePatternColorSlotPanel_OnClickHideAndExpandButtonImpl::bExpand' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeCustomizePanel.HandleChangeUIPlatformImpl
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeCustomizePanel_HandleChangeUIPlatformImpl final
{
public:
	ETLUIPlatform                                 InUIPlatform;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeCustomizePanel_HandleChangeUIPlatformImpl) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeCustomizePanel_HandleChangeUIPlatformImpl");
static_assert(sizeof(TLUserWidgetArmorCostumeCustomizePanel_HandleChangeUIPlatformImpl) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeCustomizePanel_HandleChangeUIPlatformImpl");
static_assert(offsetof(TLUserWidgetArmorCostumeCustomizePanel_HandleChangeUIPlatformImpl, InUIPlatform) == 0x000000, "Member 'TLUserWidgetArmorCostumeCustomizePanel_HandleChangeUIPlatformImpl::InUIPlatform' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeCustomizePanel.OnActiveCustomizingPanel
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeCustomizePanel_OnActiveCustomizingPanel final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeCustomizePanel_OnActiveCustomizingPanel) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeCustomizePanel_OnActiveCustomizingPanel");
static_assert(sizeof(TLUserWidgetArmorCostumeCustomizePanel_OnActiveCustomizingPanel) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeCustomizePanel_OnActiveCustomizingPanel");
static_assert(offsetof(TLUserWidgetArmorCostumeCustomizePanel_OnActiveCustomizingPanel, IsActive) == 0x000000, "Member 'TLUserWidgetArmorCostumeCustomizePanel_OnActiveCustomizingPanel::IsActive' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeCustomizePanel.OnExpandColorGroupImpl
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeCustomizePanel_OnExpandColorGroupImpl final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeCustomizePanel_OnExpandColorGroupImpl) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeCustomizePanel_OnExpandColorGroupImpl");
static_assert(sizeof(TLUserWidgetArmorCostumeCustomizePanel_OnExpandColorGroupImpl) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeCustomizePanel_OnExpandColorGroupImpl");
static_assert(offsetof(TLUserWidgetArmorCostumeCustomizePanel_OnExpandColorGroupImpl, bShow) == 0x000000, "Member 'TLUserWidgetArmorCostumeCustomizePanel_OnExpandColorGroupImpl::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeCustomizePanel.OnExpandColorLayerImpl
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeCustomizePanel_OnExpandColorLayerImpl final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeCustomizePanel_OnExpandColorLayerImpl) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeCustomizePanel_OnExpandColorLayerImpl");
static_assert(sizeof(TLUserWidgetArmorCostumeCustomizePanel_OnExpandColorLayerImpl) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeCustomizePanel_OnExpandColorLayerImpl");
static_assert(offsetof(TLUserWidgetArmorCostumeCustomizePanel_OnExpandColorLayerImpl, bShow) == 0x000000, "Member 'TLUserWidgetArmorCostumeCustomizePanel_OnExpandColorLayerImpl::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeCustomizePanel.OnExpandPatternImpl
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeCustomizePanel_OnExpandPatternImpl final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeCustomizePanel_OnExpandPatternImpl) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeCustomizePanel_OnExpandPatternImpl");
static_assert(sizeof(TLUserWidgetArmorCostumeCustomizePanel_OnExpandPatternImpl) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeCustomizePanel_OnExpandPatternImpl");
static_assert(offsetof(TLUserWidgetArmorCostumeCustomizePanel_OnExpandPatternImpl, bShow) == 0x000000, "Member 'TLUserWidgetArmorCostumeCustomizePanel_OnExpandPatternImpl::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeCustomizePanel.OnExpandStyleImpl
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeCustomizePanel_OnExpandStyleImpl final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeCustomizePanel_OnExpandStyleImpl) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeCustomizePanel_OnExpandStyleImpl");
static_assert(sizeof(TLUserWidgetArmorCostumeCustomizePanel_OnExpandStyleImpl) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeCustomizePanel_OnExpandStyleImpl");
static_assert(offsetof(TLUserWidgetArmorCostumeCustomizePanel_OnExpandStyleImpl, bShow) == 0x000000, "Member 'TLUserWidgetArmorCostumeCustomizePanel_OnExpandStyleImpl::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetSeasonPassUnit.OnPassGradePeriod
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSeasonPassUnit_OnPassGradePeriod final
{
public:
	bool                                          InIsPeriod;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSeasonPassUnit_OnPassGradePeriod) == 0x000001, "Wrong alignment on TLUserWidgetSeasonPassUnit_OnPassGradePeriod");
static_assert(sizeof(TLUserWidgetSeasonPassUnit_OnPassGradePeriod) == 0x000001, "Wrong size on TLUserWidgetSeasonPassUnit_OnPassGradePeriod");
static_assert(offsetof(TLUserWidgetSeasonPassUnit_OnPassGradePeriod, InIsPeriod) == 0x000000, "Member 'TLUserWidgetSeasonPassUnit_OnPassGradePeriod::InIsPeriod' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeTooltip.GetActionGuideAttachPanel
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetArmorCostumeTooltip_GetActionGuideAttachPanel final
{
public:
	class UTLSizeBox*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeTooltip_GetActionGuideAttachPanel) == 0x000008, "Wrong alignment on TLUserWidgetArmorCostumeTooltip_GetActionGuideAttachPanel");
static_assert(sizeof(TLUserWidgetArmorCostumeTooltip_GetActionGuideAttachPanel) == 0x000008, "Wrong size on TLUserWidgetArmorCostumeTooltip_GetActionGuideAttachPanel");
static_assert(offsetof(TLUserWidgetArmorCostumeTooltip_GetActionGuideAttachPanel, ReturnValue) == 0x000000, "Member 'TLUserWidgetArmorCostumeTooltip_GetActionGuideAttachPanel::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeEquippedIconSlot.ActiveFocusFX
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeEquippedIconSlot_ActiveFocusFX final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeEquippedIconSlot_ActiveFocusFX) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeEquippedIconSlot_ActiveFocusFX");
static_assert(sizeof(TLUserWidgetArmorCostumeEquippedIconSlot_ActiveFocusFX) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeEquippedIconSlot_ActiveFocusFX");
static_assert(offsetof(TLUserWidgetArmorCostumeEquippedIconSlot_ActiveFocusFX, bActive) == 0x000000, "Member 'TLUserWidgetArmorCostumeEquippedIconSlot_ActiveFocusFX::bActive' has a wrong offset!");

// Function TLClient.TLUserWidgetArmorCostumeEquippedIconSlot.SetDisableState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetArmorCostumeEquippedIconSlot_SetDisableState final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetArmorCostumeEquippedIconSlot_SetDisableState) == 0x000001, "Wrong alignment on TLUserWidgetArmorCostumeEquippedIconSlot_SetDisableState");
static_assert(sizeof(TLUserWidgetArmorCostumeEquippedIconSlot_SetDisableState) == 0x000001, "Wrong size on TLUserWidgetArmorCostumeEquippedIconSlot_SetDisableState");
static_assert(offsetof(TLUserWidgetArmorCostumeEquippedIconSlot_SetDisableState, bDisable) == 0x000000, "Member 'TLUserWidgetArmorCostumeEquippedIconSlot_SetDisableState::bDisable' has a wrong offset!");

// Function TLClient.TLUserWidgetTimeTableEventGroup.OnTimeStamp
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTimeTableEventGroup_OnTimeStamp final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTimeTableEventGroup_OnTimeStamp) == 0x000001, "Wrong alignment on TLUserWidgetTimeTableEventGroup_OnTimeStamp");
static_assert(sizeof(TLUserWidgetTimeTableEventGroup_OnTimeStamp) == 0x000001, "Wrong size on TLUserWidgetTimeTableEventGroup_OnTimeStamp");
static_assert(offsetof(TLUserWidgetTimeTableEventGroup_OnTimeStamp, InShow) == 0x000000, "Member 'TLUserWidgetTimeTableEventGroup_OnTimeStamp::InShow' has a wrong offset!");

// Function TLClient.TLUserWidgetAttendanceRewardSlot.OnUpdateRewardType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetAttendanceRewardSlot_OnUpdateRewardType final
{
public:
	EAttendanceRewardType                         InRewardType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAttendanceRewardSlot_OnUpdateRewardType) == 0x000001, "Wrong alignment on TLUserWidgetAttendanceRewardSlot_OnUpdateRewardType");
static_assert(sizeof(TLUserWidgetAttendanceRewardSlot_OnUpdateRewardType) == 0x000001, "Wrong size on TLUserWidgetAttendanceRewardSlot_OnUpdateRewardType");
static_assert(offsetof(TLUserWidgetAttendanceRewardSlot_OnUpdateRewardType, InRewardType) == 0x000000, "Member 'TLUserWidgetAttendanceRewardSlot_OnUpdateRewardType::InRewardType' has a wrong offset!");

// Function TLClient.TLUserWidgetAzulejoCanvasFrame.OnCanvasPaddingChanged
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetAzulejoCanvasFrame_OnCanvasPaddingChanged final
{
public:
	float                                         PaddingSize;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAzulejoCanvasFrame_OnCanvasPaddingChanged) == 0x000004, "Wrong alignment on TLUserWidgetAzulejoCanvasFrame_OnCanvasPaddingChanged");
static_assert(sizeof(TLUserWidgetAzulejoCanvasFrame_OnCanvasPaddingChanged) == 0x000004, "Wrong size on TLUserWidgetAzulejoCanvasFrame_OnCanvasPaddingChanged");
static_assert(offsetof(TLUserWidgetAzulejoCanvasFrame_OnCanvasPaddingChanged, PaddingSize) == 0x000000, "Member 'TLUserWidgetAzulejoCanvasFrame_OnCanvasPaddingChanged::PaddingSize' has a wrong offset!");

// Function TLClient.TLUserWidgetAzulejoDecoy.OnLinkGravityChanged
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetAzulejoDecoy_OnLinkGravityChanged final
{
public:
	bool                                          bLinkGravity;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAzulejoDirection                             GravityDirection;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAzulejoDecoy_OnLinkGravityChanged) == 0x000001, "Wrong alignment on TLUserWidgetAzulejoDecoy_OnLinkGravityChanged");
static_assert(sizeof(TLUserWidgetAzulejoDecoy_OnLinkGravityChanged) == 0x000002, "Wrong size on TLUserWidgetAzulejoDecoy_OnLinkGravityChanged");
static_assert(offsetof(TLUserWidgetAzulejoDecoy_OnLinkGravityChanged, bLinkGravity) == 0x000000, "Member 'TLUserWidgetAzulejoDecoy_OnLinkGravityChanged::bLinkGravity' has a wrong offset!");
static_assert(offsetof(TLUserWidgetAzulejoDecoy_OnLinkGravityChanged, GravityDirection) == 0x000001, "Member 'TLUserWidgetAzulejoDecoy_OnLinkGravityChanged::GravityDirection' has a wrong offset!");

// Function TLClient.TLUserWidgetAzulejoDecoy.OnLinkStatusChanged
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetAzulejoDecoy_OnLinkStatusChanged final
{
public:
	bool                                          bLink;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAzulejoDirection                             LinkDirection;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAzulejoDecoy_OnLinkStatusChanged) == 0x000001, "Wrong alignment on TLUserWidgetAzulejoDecoy_OnLinkStatusChanged");
static_assert(sizeof(TLUserWidgetAzulejoDecoy_OnLinkStatusChanged) == 0x000002, "Wrong size on TLUserWidgetAzulejoDecoy_OnLinkStatusChanged");
static_assert(offsetof(TLUserWidgetAzulejoDecoy_OnLinkStatusChanged, bLink) == 0x000000, "Member 'TLUserWidgetAzulejoDecoy_OnLinkStatusChanged::bLink' has a wrong offset!");
static_assert(offsetof(TLUserWidgetAzulejoDecoy_OnLinkStatusChanged, LinkDirection) == 0x000001, "Member 'TLUserWidgetAzulejoDecoy_OnLinkStatusChanged::LinkDirection' has a wrong offset!");

// Function TLClient.TLUserWidgetAzulejoDecoy.OnMouseDowned
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetAzulejoDecoy_OnMouseDowned final
{
public:
	bool                                          bIndirect;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAzulejoDecoy_OnMouseDowned) == 0x000001, "Wrong alignment on TLUserWidgetAzulejoDecoy_OnMouseDowned");
static_assert(sizeof(TLUserWidgetAzulejoDecoy_OnMouseDowned) == 0x000001, "Wrong size on TLUserWidgetAzulejoDecoy_OnMouseDowned");
static_assert(offsetof(TLUserWidgetAzulejoDecoy_OnMouseDowned, bIndirect) == 0x000000, "Member 'TLUserWidgetAzulejoDecoy_OnMouseDowned::bIndirect' has a wrong offset!");

// Function TLClient.TLUserWidgetAzulejoDecoy.OnMouseDragBegan
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetAzulejoDecoy_OnMouseDragBegan final
{
public:
	bool                                          bIndirect;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAzulejoDecoy_OnMouseDragBegan) == 0x000001, "Wrong alignment on TLUserWidgetAzulejoDecoy_OnMouseDragBegan");
static_assert(sizeof(TLUserWidgetAzulejoDecoy_OnMouseDragBegan) == 0x000001, "Wrong size on TLUserWidgetAzulejoDecoy_OnMouseDragBegan");
static_assert(offsetof(TLUserWidgetAzulejoDecoy_OnMouseDragBegan, bIndirect) == 0x000000, "Member 'TLUserWidgetAzulejoDecoy_OnMouseDragBegan::bIndirect' has a wrong offset!");

// Function TLClient.TLUserWidgetAzulejoDecoy.OnMouseHovered
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetAzulejoDecoy_OnMouseHovered final
{
public:
	bool                                          bIndirect;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAzulejoDecoy_OnMouseHovered) == 0x000001, "Wrong alignment on TLUserWidgetAzulejoDecoy_OnMouseHovered");
static_assert(sizeof(TLUserWidgetAzulejoDecoy_OnMouseHovered) == 0x000001, "Wrong size on TLUserWidgetAzulejoDecoy_OnMouseHovered");
static_assert(offsetof(TLUserWidgetAzulejoDecoy_OnMouseHovered, bIndirect) == 0x000000, "Member 'TLUserWidgetAzulejoDecoy_OnMouseHovered::bIndirect' has a wrong offset!");

// Function TLClient.TLUserWidgetAzulejoDecoy.OnMouseUnhovered
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetAzulejoDecoy_OnMouseUnhovered final
{
public:
	bool                                          bIndirect;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAzulejoDecoy_OnMouseUnhovered) == 0x000001, "Wrong alignment on TLUserWidgetAzulejoDecoy_OnMouseUnhovered");
static_assert(sizeof(TLUserWidgetAzulejoDecoy_OnMouseUnhovered) == 0x000001, "Wrong size on TLUserWidgetAzulejoDecoy_OnMouseUnhovered");
static_assert(offsetof(TLUserWidgetAzulejoDecoy_OnMouseUnhovered, bIndirect) == 0x000000, "Member 'TLUserWidgetAzulejoDecoy_OnMouseUnhovered::bIndirect' has a wrong offset!");

// Function TLClient.TLUserWidgetAzulejoDecoy.OnMouseUpped
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetAzulejoDecoy_OnMouseUpped final
{
public:
	bool                                          bIndirect;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAzulejoDecoy_OnMouseUpped) == 0x000001, "Wrong alignment on TLUserWidgetAzulejoDecoy_OnMouseUpped");
static_assert(sizeof(TLUserWidgetAzulejoDecoy_OnMouseUpped) == 0x000001, "Wrong size on TLUserWidgetAzulejoDecoy_OnMouseUpped");
static_assert(offsetof(TLUserWidgetAzulejoDecoy_OnMouseUpped, bIndirect) == 0x000000, "Member 'TLUserWidgetAzulejoDecoy_OnMouseUpped::bIndirect' has a wrong offset!");

// Function TLClient.TLUserWidgetAzulejoLinker.OnLinkDirectionChanged
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetAzulejoLinker_OnLinkDirectionChanged final
{
public:
	EAzulejoDirection                             LinkDirection;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAzulejoLinker_OnLinkDirectionChanged) == 0x000001, "Wrong alignment on TLUserWidgetAzulejoLinker_OnLinkDirectionChanged");
static_assert(sizeof(TLUserWidgetAzulejoLinker_OnLinkDirectionChanged) == 0x000001, "Wrong size on TLUserWidgetAzulejoLinker_OnLinkDirectionChanged");
static_assert(offsetof(TLUserWidgetAzulejoLinker_OnLinkDirectionChanged, LinkDirection) == 0x000000, "Member 'TLUserWidgetAzulejoLinker_OnLinkDirectionChanged::LinkDirection' has a wrong offset!");

// Function TLClient.TLUserWidgetAzulejoLinker.OnLinkStatusChanged
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetAzulejoLinker_OnLinkStatusChanged final
{
public:
	bool                                          bLinkedOrLinkable;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAzulejoDirection                             LinkDirection;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAzulejoLinker_OnLinkStatusChanged) == 0x000001, "Wrong alignment on TLUserWidgetAzulejoLinker_OnLinkStatusChanged");
static_assert(sizeof(TLUserWidgetAzulejoLinker_OnLinkStatusChanged) == 0x000002, "Wrong size on TLUserWidgetAzulejoLinker_OnLinkStatusChanged");
static_assert(offsetof(TLUserWidgetAzulejoLinker_OnLinkStatusChanged, bLinkedOrLinkable) == 0x000000, "Member 'TLUserWidgetAzulejoLinker_OnLinkStatusChanged::bLinkedOrLinkable' has a wrong offset!");
static_assert(offsetof(TLUserWidgetAzulejoLinker_OnLinkStatusChanged, LinkDirection) == 0x000001, "Member 'TLUserWidgetAzulejoLinker_OnLinkStatusChanged::LinkDirection' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillMasterySkillSlot.OnShowSkillSlotAblePassive
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillMasterySkillSlot_OnShowSkillSlotAblePassive final
{
public:
	bool                                          bInAblePassive;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillMasterySkillSlot_OnShowSkillSlotAblePassive) == 0x000001, "Wrong alignment on TLUserWidgetSkillMasterySkillSlot_OnShowSkillSlotAblePassive");
static_assert(sizeof(TLUserWidgetSkillMasterySkillSlot_OnShowSkillSlotAblePassive) == 0x000001, "Wrong size on TLUserWidgetSkillMasterySkillSlot_OnShowSkillSlotAblePassive");
static_assert(offsetof(TLUserWidgetSkillMasterySkillSlot_OnShowSkillSlotAblePassive, bInAblePassive) == 0x000000, "Member 'TLUserWidgetSkillMasterySkillSlot_OnShowSkillSlotAblePassive::bInAblePassive' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillMasterySkillSlot.SetStatIconImage
// 0x0028 (0x0028 - 0x0000)
struct TLUserWidgetSkillMasterySkillSlot_SetStatIconImage final
{
public:
	TSoftObjectPtr<class UTexture2D>              InStatIconImage;                                   // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillMasterySkillSlot_SetStatIconImage) == 0x000008, "Wrong alignment on TLUserWidgetSkillMasterySkillSlot_SetStatIconImage");
static_assert(sizeof(TLUserWidgetSkillMasterySkillSlot_SetStatIconImage) == 0x000028, "Wrong size on TLUserWidgetSkillMasterySkillSlot_SetStatIconImage");
static_assert(offsetof(TLUserWidgetSkillMasterySkillSlot_SetStatIconImage, InStatIconImage) == 0x000000, "Member 'TLUserWidgetSkillMasterySkillSlot_SetStatIconImage::InStatIconImage' has a wrong offset!");

// Function TLClient.TLUserWidgetLobbyCharacterSelect.GetSlotByCharacterID
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetLobbyCharacterSelect_GetSlotByCharacterID final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTLUserWidgetLobbyCharacterSlotChkBtn*  ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetLobbyCharacterSelect_GetSlotByCharacterID) == 0x000008, "Wrong alignment on TLUserWidgetLobbyCharacterSelect_GetSlotByCharacterID");
static_assert(sizeof(TLUserWidgetLobbyCharacterSelect_GetSlotByCharacterID) == 0x000010, "Wrong size on TLUserWidgetLobbyCharacterSelect_GetSlotByCharacterID");
static_assert(offsetof(TLUserWidgetLobbyCharacterSelect_GetSlotByCharacterID, InID) == 0x000000, "Member 'TLUserWidgetLobbyCharacterSelect_GetSlotByCharacterID::InID' has a wrong offset!");
static_assert(offsetof(TLUserWidgetLobbyCharacterSelect_GetSlotByCharacterID, ReturnValue) == 0x000008, "Member 'TLUserWidgetLobbyCharacterSelect_GetSlotByCharacterID::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetBasicStatTypeWeaponCategory.SetImageFromItemCategory
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetBasicStatTypeWeaponCategory_SetImageFromItemCategory final
{
public:
	EItemCategory                                 InItemCategory;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetBasicStatTypeWeaponCategory_SetImageFromItemCategory) == 0x000001, "Wrong alignment on TLUserWidgetBasicStatTypeWeaponCategory_SetImageFromItemCategory");
static_assert(sizeof(TLUserWidgetBasicStatTypeWeaponCategory_SetImageFromItemCategory) == 0x000001, "Wrong size on TLUserWidgetBasicStatTypeWeaponCategory_SetImageFromItemCategory");
static_assert(offsetof(TLUserWidgetBasicStatTypeWeaponCategory_SetImageFromItemCategory, InItemCategory) == 0x000000, "Member 'TLUserWidgetBasicStatTypeWeaponCategory_SetImageFromItemCategory::InItemCategory' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillMasteryPointScreenMessage.OnEventUpdateSkillMasteryPoint
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillMasteryPointScreenMessage_OnEventUpdateSkillMasteryPoint final
{
public:
	EItemCategory                                 InWeaponSetType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillMasteryPointScreenMessage_OnEventUpdateSkillMasteryPoint) == 0x000001, "Wrong alignment on TLUserWidgetSkillMasteryPointScreenMessage_OnEventUpdateSkillMasteryPoint");
static_assert(sizeof(TLUserWidgetSkillMasteryPointScreenMessage_OnEventUpdateSkillMasteryPoint) == 0x000001, "Wrong size on TLUserWidgetSkillMasteryPointScreenMessage_OnEventUpdateSkillMasteryPoint");
static_assert(offsetof(TLUserWidgetSkillMasteryPointScreenMessage_OnEventUpdateSkillMasteryPoint, InWeaponSetType) == 0x000000, "Member 'TLUserWidgetSkillMasteryPointScreenMessage_OnEventUpdateSkillMasteryPoint::InWeaponSetType' has a wrong offset!");

// Function TLClient.TLUserWidgetSiegeDistributionInput.UpdateItemCount
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSiegeDistributionInput_UpdateItemCount final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSiegeDistributionInput_UpdateItemCount) == 0x000004, "Wrong alignment on TLUserWidgetSiegeDistributionInput_UpdateItemCount");
static_assert(sizeof(TLUserWidgetSiegeDistributionInput_UpdateItemCount) == 0x000004, "Wrong size on TLUserWidgetSiegeDistributionInput_UpdateItemCount");
static_assert(offsetof(TLUserWidgetSiegeDistributionInput_UpdateItemCount, InCount) == 0x000000, "Member 'TLUserWidgetSiegeDistributionInput_UpdateItemCount::InCount' has a wrong offset!");

// Function TLClient.TLUserWidgetRollingText.SetTargetWrapTextAt
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetRollingText_SetTargetWrapTextAt final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRollingText_SetTargetWrapTextAt) == 0x000004, "Wrong alignment on TLUserWidgetRollingText_SetTargetWrapTextAt");
static_assert(sizeof(TLUserWidgetRollingText_SetTargetWrapTextAt) == 0x000004, "Wrong size on TLUserWidgetRollingText_SetTargetWrapTextAt");
static_assert(offsetof(TLUserWidgetRollingText_SetTargetWrapTextAt, InValue) == 0x000000, "Member 'TLUserWidgetRollingText_SetTargetWrapTextAt::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetRollingText.SetTextBlockStylePath
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetRollingText_SetTextBlockStylePath final
{
public:
	struct FSoftObjectPath                        InTLTextBlockStylePath;                            // 0x0000(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRollingText_SetTextBlockStylePath) == 0x000008, "Wrong alignment on TLUserWidgetRollingText_SetTextBlockStylePath");
static_assert(sizeof(TLUserWidgetRollingText_SetTextBlockStylePath) == 0x000018, "Wrong size on TLUserWidgetRollingText_SetTextBlockStylePath");
static_assert(offsetof(TLUserWidgetRollingText_SetTextBlockStylePath, InTLTextBlockStylePath) == 0x000000, "Member 'TLUserWidgetRollingText_SetTextBlockStylePath::InTLTextBlockStylePath' has a wrong offset!");

// Function TLClient.TLUserWidgetBeautyshopCustomizePresetIcon.OnSelected
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetBeautyshopCustomizePresetIcon_OnSelected final
{
public:
	bool                                          bInSelect;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetBeautyshopCustomizePresetIcon_OnSelected) == 0x000001, "Wrong alignment on TLUserWidgetBeautyshopCustomizePresetIcon_OnSelected");
static_assert(sizeof(TLUserWidgetBeautyshopCustomizePresetIcon_OnSelected) == 0x000001, "Wrong size on TLUserWidgetBeautyshopCustomizePresetIcon_OnSelected");
static_assert(offsetof(TLUserWidgetBeautyshopCustomizePresetIcon_OnSelected, bInSelect) == 0x000000, "Member 'TLUserWidgetBeautyshopCustomizePresetIcon_OnSelected::bInSelect' has a wrong offset!");

// Function TLClient.TLUserWidgetBeautyshopCustomizePresetIcon.GetPresetIndex
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetBeautyshopCustomizePresetIcon_GetPresetIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetBeautyshopCustomizePresetIcon_GetPresetIndex) == 0x000004, "Wrong alignment on TLUserWidgetBeautyshopCustomizePresetIcon_GetPresetIndex");
static_assert(sizeof(TLUserWidgetBeautyshopCustomizePresetIcon_GetPresetIndex) == 0x000004, "Wrong size on TLUserWidgetBeautyshopCustomizePresetIcon_GetPresetIndex");
static_assert(offsetof(TLUserWidgetBeautyshopCustomizePresetIcon_GetPresetIndex, ReturnValue) == 0x000000, "Member 'TLUserWidgetBeautyshopCustomizePresetIcon_GetPresetIndex::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetBindingTest.SetAlive
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetBindingTest_SetAlive final
{
public:
	bool                                          bInIsAlive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetBindingTest_SetAlive) == 0x000001, "Wrong alignment on TLUserWidgetBindingTest_SetAlive");
static_assert(sizeof(TLUserWidgetBindingTest_SetAlive) == 0x000001, "Wrong size on TLUserWidgetBindingTest_SetAlive");
static_assert(offsetof(TLUserWidgetBindingTest_SetAlive, bInIsAlive) == 0x000000, "Member 'TLUserWidgetBindingTest_SetAlive::bInIsAlive' has a wrong offset!");

// Function TLClient.TLUserWidgetBindingTest.SetClassColor
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetBindingTest_SetClassColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetBindingTest_SetClassColor) == 0x000004, "Wrong alignment on TLUserWidgetBindingTest_SetClassColor");
static_assert(sizeof(TLUserWidgetBindingTest_SetClassColor) == 0x000010, "Wrong size on TLUserWidgetBindingTest_SetClassColor");
static_assert(offsetof(TLUserWidgetBindingTest_SetClassColor, Color) == 0x000000, "Member 'TLUserWidgetBindingTest_SetClassColor::Color' has a wrong offset!");

// Function TLClient.TLUserWidgetBindingTest.SetClassIcon
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetBindingTest_SetClassIcon final
{
public:
	struct FSoftObjectPath                        SpritePath;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetBindingTest_SetClassIcon) == 0x000008, "Wrong alignment on TLUserWidgetBindingTest_SetClassIcon");
static_assert(sizeof(TLUserWidgetBindingTest_SetClassIcon) == 0x000018, "Wrong size on TLUserWidgetBindingTest_SetClassIcon");
static_assert(offsetof(TLUserWidgetBindingTest_SetClassIcon, SpritePath) == 0x000000, "Member 'TLUserWidgetBindingTest_SetClassIcon::SpritePath' has a wrong offset!");

// Function TLClient.TLUserWidgetBindingTest.SetClassText
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetBindingTest_SetClassText final
{
public:
	class FText                                   InClassText;                                       // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetBindingTest_SetClassText) == 0x000008, "Wrong alignment on TLUserWidgetBindingTest_SetClassText");
static_assert(sizeof(TLUserWidgetBindingTest_SetClassText) == 0x000018, "Wrong size on TLUserWidgetBindingTest_SetClassText");
static_assert(offsetof(TLUserWidgetBindingTest_SetClassText, InClassText) == 0x000000, "Member 'TLUserWidgetBindingTest_SetClassText::InClassText' has a wrong offset!");

// Function TLClient.TLUserWidgetBindingTest.SetClassTextFontStyleId
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetBindingTest_SetClassTextFontStyleId final
{
public:
	class FName                                   InClassTextFontStyleId;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetBindingTest_SetClassTextFontStyleId) == 0x000004, "Wrong alignment on TLUserWidgetBindingTest_SetClassTextFontStyleId");
static_assert(sizeof(TLUserWidgetBindingTest_SetClassTextFontStyleId) == 0x000008, "Wrong size on TLUserWidgetBindingTest_SetClassTextFontStyleId");
static_assert(offsetof(TLUserWidgetBindingTest_SetClassTextFontStyleId, InClassTextFontStyleId) == 0x000000, "Member 'TLUserWidgetBindingTest_SetClassTextFontStyleId::InClassTextFontStyleId' has a wrong offset!");

// Function TLClient.TLUserWidgetBindingTest.SetClassTextId
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetBindingTest_SetClassTextId final
{
public:
	class FName                                   InClassTextId;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetBindingTest_SetClassTextId) == 0x000004, "Wrong alignment on TLUserWidgetBindingTest_SetClassTextId");
static_assert(sizeof(TLUserWidgetBindingTest_SetClassTextId) == 0x000008, "Wrong size on TLUserWidgetBindingTest_SetClassTextId");
static_assert(offsetof(TLUserWidgetBindingTest_SetClassTextId, InClassTextId) == 0x000000, "Member 'TLUserWidgetBindingTest_SetClassTextId::InClassTextId' has a wrong offset!");

// Function TLClient.TLUserWidgetBindingTest.SetEnumTest
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetBindingTest_SetEnumTest final
{
public:
	ETestEnum                                     InEnumTest;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetBindingTest_SetEnumTest) == 0x000001, "Wrong alignment on TLUserWidgetBindingTest_SetEnumTest");
static_assert(sizeof(TLUserWidgetBindingTest_SetEnumTest) == 0x000001, "Wrong size on TLUserWidgetBindingTest_SetEnumTest");
static_assert(offsetof(TLUserWidgetBindingTest_SetEnumTest, InEnumTest) == 0x000000, "Member 'TLUserWidgetBindingTest_SetEnumTest::InEnumTest' has a wrong offset!");

// Function TLClient.TLUserWidgetBindingTest.SetExp
// 0x000C (0x000C - 0x0000)
struct TLUserWidgetBindingTest_SetExp final
{
public:
	int32                                         InExp;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InExpMin;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InExpMax;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetBindingTest_SetExp) == 0x000004, "Wrong alignment on TLUserWidgetBindingTest_SetExp");
static_assert(sizeof(TLUserWidgetBindingTest_SetExp) == 0x00000C, "Wrong size on TLUserWidgetBindingTest_SetExp");
static_assert(offsetof(TLUserWidgetBindingTest_SetExp, InExp) == 0x000000, "Member 'TLUserWidgetBindingTest_SetExp::InExp' has a wrong offset!");
static_assert(offsetof(TLUserWidgetBindingTest_SetExp, InExpMin) == 0x000004, "Member 'TLUserWidgetBindingTest_SetExp::InExpMin' has a wrong offset!");
static_assert(offsetof(TLUserWidgetBindingTest_SetExp, InExpMax) == 0x000008, "Member 'TLUserWidgetBindingTest_SetExp::InExpMax' has a wrong offset!");

// Function TLClient.TLUserWidgetBindingTest.SetHpPercent
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetBindingTest_SetHpPercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetBindingTest_SetHpPercent) == 0x000004, "Wrong alignment on TLUserWidgetBindingTest_SetHpPercent");
static_assert(sizeof(TLUserWidgetBindingTest_SetHpPercent) == 0x000004, "Wrong size on TLUserWidgetBindingTest_SetHpPercent");
static_assert(offsetof(TLUserWidgetBindingTest_SetHpPercent, Percent) == 0x000000, "Member 'TLUserWidgetBindingTest_SetHpPercent::Percent' has a wrong offset!");

// Function TLClient.TLUserWidgetBindingTest.SetHpPercentTest
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetBindingTest_SetHpPercentTest final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetBindingTest_SetHpPercentTest) == 0x000004, "Wrong alignment on TLUserWidgetBindingTest_SetHpPercentTest");
static_assert(sizeof(TLUserWidgetBindingTest_SetHpPercentTest) == 0x000004, "Wrong size on TLUserWidgetBindingTest_SetHpPercentTest");
static_assert(offsetof(TLUserWidgetBindingTest_SetHpPercentTest, Percent) == 0x000000, "Member 'TLUserWidgetBindingTest_SetHpPercentTest::Percent' has a wrong offset!");

// Function TLClient.TLUserWidgetBindingTest.SetLock
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetBindingTest_SetLock final
{
public:
	bool                                          bInLock;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetBindingTest_SetLock) == 0x000001, "Wrong alignment on TLUserWidgetBindingTest_SetLock");
static_assert(sizeof(TLUserWidgetBindingTest_SetLock) == 0x000001, "Wrong size on TLUserWidgetBindingTest_SetLock");
static_assert(offsetof(TLUserWidgetBindingTest_SetLock, bInLock) == 0x000000, "Member 'TLUserWidgetBindingTest_SetLock::bInLock' has a wrong offset!");

// Function TLClient.TLUserWidgetCustomizeLightSelect.HandleLightSequencePlay
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetCustomizeLightSelect_HandleLightSequencePlay final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCustomizeLightSelect_HandleLightSequencePlay) == 0x000004, "Wrong alignment on TLUserWidgetCustomizeLightSelect_HandleLightSequencePlay");
static_assert(sizeof(TLUserWidgetCustomizeLightSelect_HandleLightSequencePlay) == 0x000004, "Wrong size on TLUserWidgetCustomizeLightSelect_HandleLightSequencePlay");
static_assert(offsetof(TLUserWidgetCustomizeLightSelect_HandleLightSequencePlay, InIndex) == 0x000000, "Member 'TLUserWidgetCustomizeLightSelect_HandleLightSequencePlay::InIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetResultItemSelectSlotItem.OnItemNameUpdate
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetResultItemSelectSlotItem_OnItemNameUpdate final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetResultItemSelectSlotItem_OnItemNameUpdate) == 0x000008, "Wrong alignment on TLUserWidgetResultItemSelectSlotItem_OnItemNameUpdate");
static_assert(sizeof(TLUserWidgetResultItemSelectSlotItem_OnItemNameUpdate) == 0x000018, "Wrong size on TLUserWidgetResultItemSelectSlotItem_OnItemNameUpdate");
static_assert(offsetof(TLUserWidgetResultItemSelectSlotItem_OnItemNameUpdate, InName) == 0x000000, "Member 'TLUserWidgetResultItemSelectSlotItem_OnItemNameUpdate::InName' has a wrong offset!");

// Function TLClient.TLUserWidgetResultItemSelectSlotItem.PlayShowAnim
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetResultItemSelectSlotItem_PlayShowAnim final
{
public:
	EItemGrade                                    InGrade;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetResultItemSelectSlotItem_PlayShowAnim) == 0x000001, "Wrong alignment on TLUserWidgetResultItemSelectSlotItem_PlayShowAnim");
static_assert(sizeof(TLUserWidgetResultItemSelectSlotItem_PlayShowAnim) == 0x000001, "Wrong size on TLUserWidgetResultItemSelectSlotItem_PlayShowAnim");
static_assert(offsetof(TLUserWidgetResultItemSelectSlotItem_PlayShowAnim, InGrade) == 0x000000, "Member 'TLUserWidgetResultItemSelectSlotItem_PlayShowAnim::InGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetChallengePartyDungeonRankingSlot.OnUpdateRanking
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetChallengePartyDungeonRankingSlot_OnUpdateRanking final
{
public:
	bool                                          bMyRanking;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChallengePartyDungeonRankingSlot_OnUpdateRanking) == 0x000001, "Wrong alignment on TLUserWidgetChallengePartyDungeonRankingSlot_OnUpdateRanking");
static_assert(sizeof(TLUserWidgetChallengePartyDungeonRankingSlot_OnUpdateRanking) == 0x000001, "Wrong size on TLUserWidgetChallengePartyDungeonRankingSlot_OnUpdateRanking");
static_assert(offsetof(TLUserWidgetChallengePartyDungeonRankingSlot_OnUpdateRanking, bMyRanking) == 0x000000, "Member 'TLUserWidgetChallengePartyDungeonRankingSlot_OnUpdateRanking::bMyRanking' has a wrong offset!");

// Function TLClient.TLUserWidgetPolymorphGrowthCollectionEffectSlot.PlayLevelUpdateEffect
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetPolymorphGrowthCollectionEffectSlot_PlayLevelUpdateEffect final
{
public:
	bool                                          bAcquired;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMaxLevel;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPolymorphGrowthCollectionEffectSlot_PlayLevelUpdateEffect) == 0x000001, "Wrong alignment on TLUserWidgetPolymorphGrowthCollectionEffectSlot_PlayLevelUpdateEffect");
static_assert(sizeof(TLUserWidgetPolymorphGrowthCollectionEffectSlot_PlayLevelUpdateEffect) == 0x000002, "Wrong size on TLUserWidgetPolymorphGrowthCollectionEffectSlot_PlayLevelUpdateEffect");
static_assert(offsetof(TLUserWidgetPolymorphGrowthCollectionEffectSlot_PlayLevelUpdateEffect, bAcquired) == 0x000000, "Member 'TLUserWidgetPolymorphGrowthCollectionEffectSlot_PlayLevelUpdateEffect::bAcquired' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPolymorphGrowthCollectionEffectSlot_PlayLevelUpdateEffect, bIsMaxLevel) == 0x000001, "Member 'TLUserWidgetPolymorphGrowthCollectionEffectSlot_PlayLevelUpdateEffect::bIsMaxLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterCardBase.OnUpdateInteractable
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCharacterCardBase_OnUpdateInteractable final
{
public:
	bool                                          bInInteractable;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterCardBase_OnUpdateInteractable) == 0x000001, "Wrong alignment on TLUserWidgetCharacterCardBase_OnUpdateInteractable");
static_assert(sizeof(TLUserWidgetCharacterCardBase_OnUpdateInteractable) == 0x000001, "Wrong size on TLUserWidgetCharacterCardBase_OnUpdateInteractable");
static_assert(offsetof(TLUserWidgetCharacterCardBase_OnUpdateInteractable, bInInteractable) == 0x000000, "Member 'TLUserWidgetCharacterCardBase_OnUpdateInteractable::bInInteractable' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterCardBase.SetActiveServerInfo
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCharacterCardBase_SetActiveServerInfo final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterCardBase_SetActiveServerInfo) == 0x000001, "Wrong alignment on TLUserWidgetCharacterCardBase_SetActiveServerInfo");
static_assert(sizeof(TLUserWidgetCharacterCardBase_SetActiveServerInfo) == 0x000001, "Wrong size on TLUserWidgetCharacterCardBase_SetActiveServerInfo");
static_assert(offsetof(TLUserWidgetCharacterCardBase_SetActiveServerInfo, bActive) == 0x000000, "Member 'TLUserWidgetCharacterCardBase_SetActiveServerInfo::bActive' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterCardPopup.MemoTextBox_OnTextFocusLost
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetCharacterCardPopup_MemoTextBox_OnTextFocusLost final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterCardPopup_MemoTextBox_OnTextFocusLost) == 0x000004, "Wrong alignment on TLUserWidgetCharacterCardPopup_MemoTextBox_OnTextFocusLost");
static_assert(sizeof(TLUserWidgetCharacterCardPopup_MemoTextBox_OnTextFocusLost) == 0x000008, "Wrong size on TLUserWidgetCharacterCardPopup_MemoTextBox_OnTextFocusLost");
static_assert(offsetof(TLUserWidgetCharacterCardPopup_MemoTextBox_OnTextFocusLost, InFocusEvent) == 0x000000, "Member 'TLUserWidgetCharacterCardPopup_MemoTextBox_OnTextFocusLost::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterCardPopup.MemoTextBox_OnTextFocusReceived
// 0x0040 (0x0040 - 0x0000)
struct TLUserWidgetCharacterCardPopup_MemoTextBox_OnTextFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterCardPopup_MemoTextBox_OnTextFocusReceived) == 0x000004, "Wrong alignment on TLUserWidgetCharacterCardPopup_MemoTextBox_OnTextFocusReceived");
static_assert(sizeof(TLUserWidgetCharacterCardPopup_MemoTextBox_OnTextFocusReceived) == 0x000040, "Wrong size on TLUserWidgetCharacterCardPopup_MemoTextBox_OnTextFocusReceived");
static_assert(offsetof(TLUserWidgetCharacterCardPopup_MemoTextBox_OnTextFocusReceived, MyGeometry) == 0x000000, "Member 'TLUserWidgetCharacterCardPopup_MemoTextBox_OnTextFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCharacterCardPopup_MemoTextBox_OnTextFocusReceived, InFocusEvent) == 0x000038, "Member 'TLUserWidgetCharacterCardPopup_MemoTextBox_OnTextFocusReceived::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterCardPopup.MessageTextBox_OnTextFocusLost
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetCharacterCardPopup_MessageTextBox_OnTextFocusLost final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterCardPopup_MessageTextBox_OnTextFocusLost) == 0x000004, "Wrong alignment on TLUserWidgetCharacterCardPopup_MessageTextBox_OnTextFocusLost");
static_assert(sizeof(TLUserWidgetCharacterCardPopup_MessageTextBox_OnTextFocusLost) == 0x000008, "Wrong size on TLUserWidgetCharacterCardPopup_MessageTextBox_OnTextFocusLost");
static_assert(offsetof(TLUserWidgetCharacterCardPopup_MessageTextBox_OnTextFocusLost, InFocusEvent) == 0x000000, "Member 'TLUserWidgetCharacterCardPopup_MessageTextBox_OnTextFocusLost::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterCardPopup.MessageTextBox_OnTextFocusReceived
// 0x0040 (0x0040 - 0x0000)
struct TLUserWidgetCharacterCardPopup_MessageTextBox_OnTextFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterCardPopup_MessageTextBox_OnTextFocusReceived) == 0x000004, "Wrong alignment on TLUserWidgetCharacterCardPopup_MessageTextBox_OnTextFocusReceived");
static_assert(sizeof(TLUserWidgetCharacterCardPopup_MessageTextBox_OnTextFocusReceived) == 0x000040, "Wrong size on TLUserWidgetCharacterCardPopup_MessageTextBox_OnTextFocusReceived");
static_assert(offsetof(TLUserWidgetCharacterCardPopup_MessageTextBox_OnTextFocusReceived, MyGeometry) == 0x000000, "Member 'TLUserWidgetCharacterCardPopup_MessageTextBox_OnTextFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCharacterCardPopup_MessageTextBox_OnTextFocusReceived, InFocusEvent) == 0x000038, "Member 'TLUserWidgetCharacterCardPopup_MessageTextBox_OnTextFocusReceived::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterCardPopup.Whisper_OnTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetCharacterCardPopup_Whisper_OnTextChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterCardPopup_Whisper_OnTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetCharacterCardPopup_Whisper_OnTextChanged");
static_assert(sizeof(TLUserWidgetCharacterCardPopup_Whisper_OnTextChanged) == 0x000018, "Wrong size on TLUserWidgetCharacterCardPopup_Whisper_OnTextChanged");
static_assert(offsetof(TLUserWidgetCharacterCardPopup_Whisper_OnTextChanged, InText) == 0x000000, "Member 'TLUserWidgetCharacterCardPopup_Whisper_OnTextChanged::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterCardPopup.Whisper_OnTextFocusLost
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetCharacterCardPopup_Whisper_OnTextFocusLost final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterCardPopup_Whisper_OnTextFocusLost) == 0x000004, "Wrong alignment on TLUserWidgetCharacterCardPopup_Whisper_OnTextFocusLost");
static_assert(sizeof(TLUserWidgetCharacterCardPopup_Whisper_OnTextFocusLost) == 0x000008, "Wrong size on TLUserWidgetCharacterCardPopup_Whisper_OnTextFocusLost");
static_assert(offsetof(TLUserWidgetCharacterCardPopup_Whisper_OnTextFocusLost, InFocusEvent) == 0x000000, "Member 'TLUserWidgetCharacterCardPopup_Whisper_OnTextFocusLost::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterCardPopup.Whisper_OnTextFocusReceived
// 0x0040 (0x0040 - 0x0000)
struct TLUserWidgetCharacterCardPopup_Whisper_OnTextFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterCardPopup_Whisper_OnTextFocusReceived) == 0x000004, "Wrong alignment on TLUserWidgetCharacterCardPopup_Whisper_OnTextFocusReceived");
static_assert(sizeof(TLUserWidgetCharacterCardPopup_Whisper_OnTextFocusReceived) == 0x000040, "Wrong size on TLUserWidgetCharacterCardPopup_Whisper_OnTextFocusReceived");
static_assert(offsetof(TLUserWidgetCharacterCardPopup_Whisper_OnTextFocusReceived, MyGeometry) == 0x000000, "Member 'TLUserWidgetCharacterCardPopup_Whisper_OnTextFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCharacterCardPopup_Whisper_OnTextFocusReceived, InFocusEvent) == 0x000038, "Member 'TLUserWidgetCharacterCardPopup_Whisper_OnTextFocusReceived::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetPolymorphCollection.HandleSearchTextBoxCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetPolymorphCollection_HandleSearchTextBoxCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetPolymorphCollection_HandleSearchTextBoxCommitted) == 0x000008, "Wrong alignment on TLUserWidgetPolymorphCollection_HandleSearchTextBoxCommitted");
static_assert(sizeof(TLUserWidgetPolymorphCollection_HandleSearchTextBoxCommitted) == 0x000020, "Wrong size on TLUserWidgetPolymorphCollection_HandleSearchTextBoxCommitted");
static_assert(offsetof(TLUserWidgetPolymorphCollection_HandleSearchTextBoxCommitted, InText) == 0x000000, "Member 'TLUserWidgetPolymorphCollection_HandleSearchTextBoxCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPolymorphCollection_HandleSearchTextBoxCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetPolymorphCollection_HandleSearchTextBoxCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterEquipInfo.OnCombatPresetSelect
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCharacterEquipInfo_OnCombatPresetSelect final
{
public:
	bool                                          bExpiredPreset;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterEquipInfo_OnCombatPresetSelect) == 0x000001, "Wrong alignment on TLUserWidgetCharacterEquipInfo_OnCombatPresetSelect");
static_assert(sizeof(TLUserWidgetCharacterEquipInfo_OnCombatPresetSelect) == 0x000001, "Wrong size on TLUserWidgetCharacterEquipInfo_OnCombatPresetSelect");
static_assert(offsetof(TLUserWidgetCharacterEquipInfo_OnCombatPresetSelect, bExpiredPreset) == 0x000000, "Member 'TLUserWidgetCharacterEquipInfo_OnCombatPresetSelect::bExpiredPreset' has a wrong offset!");

// Function TLClient.TLUserWidgetLobbyCharacterSlotChkBtn.SetupWidgetData
// 0x01C8 (0x01C8 - 0x0000)
struct TLUserWidgetLobbyCharacterSlotChkBtn_SetupWidgetData final
{
public:
	struct FTLCharacterData                       Data;                                              // 0x0000(0x01C8)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetLobbyCharacterSlotChkBtn_SetupWidgetData) == 0x000008, "Wrong alignment on TLUserWidgetLobbyCharacterSlotChkBtn_SetupWidgetData");
static_assert(sizeof(TLUserWidgetLobbyCharacterSlotChkBtn_SetupWidgetData) == 0x0001C8, "Wrong size on TLUserWidgetLobbyCharacterSlotChkBtn_SetupWidgetData");
static_assert(offsetof(TLUserWidgetLobbyCharacterSlotChkBtn_SetupWidgetData, Data) == 0x000000, "Member 'TLUserWidgetLobbyCharacterSlotChkBtn_SetupWidgetData::Data' has a wrong offset!");

// Function TLClient.TLUserWidgetLobbyCharacterSlotChkBtn.GetCharacterID
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetLobbyCharacterSlotChkBtn_GetCharacterID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetLobbyCharacterSlotChkBtn_GetCharacterID) == 0x000004, "Wrong alignment on TLUserWidgetLobbyCharacterSlotChkBtn_GetCharacterID");
static_assert(sizeof(TLUserWidgetLobbyCharacterSlotChkBtn_GetCharacterID) == 0x000004, "Wrong size on TLUserWidgetLobbyCharacterSlotChkBtn_GetCharacterID");
static_assert(offsetof(TLUserWidgetLobbyCharacterSlotChkBtn_GetCharacterID, ReturnValue) == 0x000000, "Member 'TLUserWidgetLobbyCharacterSlotChkBtn_GetCharacterID::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterInfo.OnHideExpText
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCharacterInfo_OnHideExpText final
{
public:
	bool                                          IsHideExp;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterInfo_OnHideExpText) == 0x000001, "Wrong alignment on TLUserWidgetCharacterInfo_OnHideExpText");
static_assert(sizeof(TLUserWidgetCharacterInfo_OnHideExpText) == 0x000001, "Wrong size on TLUserWidgetCharacterInfo_OnHideExpText");
static_assert(offsetof(TLUserWidgetCharacterInfo_OnHideExpText, IsHideExp) == 0x000000, "Member 'TLUserWidgetCharacterInfo_OnHideExpText::IsHideExp' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterName.OnClickable
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCharacterName_OnClickable final
{
public:
	bool                                          bClickable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterName_OnClickable) == 0x000001, "Wrong alignment on TLUserWidgetCharacterName_OnClickable");
static_assert(sizeof(TLUserWidgetCharacterName_OnClickable) == 0x000001, "Wrong size on TLUserWidgetCharacterName_OnClickable");
static_assert(offsetof(TLUserWidgetCharacterName_OnClickable, bClickable) == 0x000000, "Member 'TLUserWidgetCharacterName_OnClickable::bClickable' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterName.SetCharacterName
// 0x0058 (0x0058 - 0x0000)
struct TLUserWidgetCharacterName_SetCharacterName final
{
public:
	int64                                         InPcId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InName;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         InPostId;                                          // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InFormatText;                                      // 0x0028(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   InChatMessage;                                     // 0x0040(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterName_SetCharacterName) == 0x000008, "Wrong alignment on TLUserWidgetCharacterName_SetCharacterName");
static_assert(sizeof(TLUserWidgetCharacterName_SetCharacterName) == 0x000058, "Wrong size on TLUserWidgetCharacterName_SetCharacterName");
static_assert(offsetof(TLUserWidgetCharacterName_SetCharacterName, InPcId) == 0x000000, "Member 'TLUserWidgetCharacterName_SetCharacterName::InPcId' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCharacterName_SetCharacterName, InName) == 0x000008, "Member 'TLUserWidgetCharacterName_SetCharacterName::InName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCharacterName_SetCharacterName, InPostId) == 0x000020, "Member 'TLUserWidgetCharacterName_SetCharacterName::InPostId' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCharacterName_SetCharacterName, InFormatText) == 0x000028, "Member 'TLUserWidgetCharacterName_SetCharacterName::InFormatText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCharacterName_SetCharacterName, InChatMessage) == 0x000040, "Member 'TLUserWidgetCharacterName_SetCharacterName::InChatMessage' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterSelectWait.OnSetWidgetVisibleRelatedServerTransfer
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCharacterSelectWait_OnSetWidgetVisibleRelatedServerTransfer final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterSelectWait_OnSetWidgetVisibleRelatedServerTransfer) == 0x000001, "Wrong alignment on TLUserWidgetCharacterSelectWait_OnSetWidgetVisibleRelatedServerTransfer");
static_assert(sizeof(TLUserWidgetCharacterSelectWait_OnSetWidgetVisibleRelatedServerTransfer) == 0x000001, "Wrong size on TLUserWidgetCharacterSelectWait_OnSetWidgetVisibleRelatedServerTransfer");
static_assert(offsetof(TLUserWidgetCharacterSelectWait_OnSetWidgetVisibleRelatedServerTransfer, InIsShow) == 0x000000, "Member 'TLUserWidgetCharacterSelectWait_OnSetWidgetVisibleRelatedServerTransfer::InIsShow' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterSubtitleList.OnUpdateEmpty
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCharacterSubtitleList_OnUpdateEmpty final
{
public:
	bool                                          InEmpty;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterSubtitleList_OnUpdateEmpty) == 0x000001, "Wrong alignment on TLUserWidgetCharacterSubtitleList_OnUpdateEmpty");
static_assert(sizeof(TLUserWidgetCharacterSubtitleList_OnUpdateEmpty) == 0x000001, "Wrong size on TLUserWidgetCharacterSubtitleList_OnUpdateEmpty");
static_assert(offsetof(TLUserWidgetCharacterSubtitleList_OnUpdateEmpty, InEmpty) == 0x000000, "Member 'TLUserWidgetCharacterSubtitleList_OnUpdateEmpty::InEmpty' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterSubtitleList.SelectSubtitleItem
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetCharacterSubtitleList_SelectSubtitleItem final
{
public:
	int32                                         InUID;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterSubtitleList_SelectSubtitleItem) == 0x000004, "Wrong alignment on TLUserWidgetCharacterSubtitleList_SelectSubtitleItem");
static_assert(sizeof(TLUserWidgetCharacterSubtitleList_SelectSubtitleItem) == 0x000004, "Wrong size on TLUserWidgetCharacterSubtitleList_SelectSubtitleItem");
static_assert(offsetof(TLUserWidgetCharacterSubtitleList_SelectSubtitleItem, InUID) == 0x000000, "Member 'TLUserWidgetCharacterSubtitleList_SelectSubtitleItem::InUID' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterWeaponSlot.OnUpdateMainWeapon
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetCharacterWeaponSlot_OnUpdateMainWeapon final
{
public:
	EItemCategory                                 InMainHandCategory;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsTwoHand;                                       // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterWeaponSlot_OnUpdateMainWeapon) == 0x000001, "Wrong alignment on TLUserWidgetCharacterWeaponSlot_OnUpdateMainWeapon");
static_assert(sizeof(TLUserWidgetCharacterWeaponSlot_OnUpdateMainWeapon) == 0x000002, "Wrong size on TLUserWidgetCharacterWeaponSlot_OnUpdateMainWeapon");
static_assert(offsetof(TLUserWidgetCharacterWeaponSlot_OnUpdateMainWeapon, InMainHandCategory) == 0x000000, "Member 'TLUserWidgetCharacterWeaponSlot_OnUpdateMainWeapon::InMainHandCategory' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCharacterWeaponSlot_OnUpdateMainWeapon, InIsTwoHand) == 0x000001, "Member 'TLUserWidgetCharacterWeaponSlot_OnUpdateMainWeapon::InIsTwoHand' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterWeaponSlot.OnUpdateOffWeapon
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetCharacterWeaponSlot_OnUpdateOffWeapon final
{
public:
	EItemCategory                                 InOffHandCategory;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsTwoHand;                                       // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterWeaponSlot_OnUpdateOffWeapon) == 0x000001, "Wrong alignment on TLUserWidgetCharacterWeaponSlot_OnUpdateOffWeapon");
static_assert(sizeof(TLUserWidgetCharacterWeaponSlot_OnUpdateOffWeapon) == 0x000002, "Wrong size on TLUserWidgetCharacterWeaponSlot_OnUpdateOffWeapon");
static_assert(offsetof(TLUserWidgetCharacterWeaponSlot_OnUpdateOffWeapon, InOffHandCategory) == 0x000000, "Member 'TLUserWidgetCharacterWeaponSlot_OnUpdateOffWeapon::InOffHandCategory' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCharacterWeaponSlot_OnUpdateOffWeapon, InIsTwoHand) == 0x000001, "Member 'TLUserWidgetCharacterWeaponSlot_OnUpdateOffWeapon::InIsTwoHand' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpDetail.EventIngredientButtonUpdateForConsloe
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillLevelUpDetail_EventIngredientButtonUpdateForConsloe final
{
public:
	bool                                          bCheck;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpDetail_EventIngredientButtonUpdateForConsloe) == 0x000001, "Wrong alignment on TLUserWidgetSkillLevelUpDetail_EventIngredientButtonUpdateForConsloe");
static_assert(sizeof(TLUserWidgetSkillLevelUpDetail_EventIngredientButtonUpdateForConsloe) == 0x000001, "Wrong size on TLUserWidgetSkillLevelUpDetail_EventIngredientButtonUpdateForConsloe");
static_assert(offsetof(TLUserWidgetSkillLevelUpDetail_EventIngredientButtonUpdateForConsloe, bCheck) == 0x000000, "Member 'TLUserWidgetSkillLevelUpDetail_EventIngredientButtonUpdateForConsloe::bCheck' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpDetail.HandleContinuousEnchantBtnChecked
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillLevelUpDetail_HandleContinuousEnchantBtnChecked final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpDetail_HandleContinuousEnchantBtnChecked) == 0x000001, "Wrong alignment on TLUserWidgetSkillLevelUpDetail_HandleContinuousEnchantBtnChecked");
static_assert(sizeof(TLUserWidgetSkillLevelUpDetail_HandleContinuousEnchantBtnChecked) == 0x000001, "Wrong size on TLUserWidgetSkillLevelUpDetail_HandleContinuousEnchantBtnChecked");
static_assert(offsetof(TLUserWidgetSkillLevelUpDetail_HandleContinuousEnchantBtnChecked, bIsChecked) == 0x000000, "Member 'TLUserWidgetSkillLevelUpDetail_HandleContinuousEnchantBtnChecked::bIsChecked' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpDetail.HandleSkillPointTooltip
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillLevelUpDetail_HandleSkillPointTooltip final
{
public:
	bool                                          InbHover;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpDetail_HandleSkillPointTooltip) == 0x000001, "Wrong alignment on TLUserWidgetSkillLevelUpDetail_HandleSkillPointTooltip");
static_assert(sizeof(TLUserWidgetSkillLevelUpDetail_HandleSkillPointTooltip) == 0x000001, "Wrong size on TLUserWidgetSkillLevelUpDetail_HandleSkillPointTooltip");
static_assert(offsetof(TLUserWidgetSkillLevelUpDetail_HandleSkillPointTooltip, InbHover) == 0x000000, "Member 'TLUserWidgetSkillLevelUpDetail_HandleSkillPointTooltip::InbHover' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpDetail.OnUpdateEnchantPoint
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetSkillLevelUpDetail_OnUpdateEnchantPoint final
{
public:
	int32                                         InPoint;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPercent;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpDetail_OnUpdateEnchantPoint) == 0x000004, "Wrong alignment on TLUserWidgetSkillLevelUpDetail_OnUpdateEnchantPoint");
static_assert(sizeof(TLUserWidgetSkillLevelUpDetail_OnUpdateEnchantPoint) == 0x000008, "Wrong size on TLUserWidgetSkillLevelUpDetail_OnUpdateEnchantPoint");
static_assert(offsetof(TLUserWidgetSkillLevelUpDetail_OnUpdateEnchantPoint, InPoint) == 0x000000, "Member 'TLUserWidgetSkillLevelUpDetail_OnUpdateEnchantPoint::InPoint' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillLevelUpDetail_OnUpdateEnchantPoint, InPercent) == 0x000004, "Member 'TLUserWidgetSkillLevelUpDetail_OnUpdateEnchantPoint::InPercent' has a wrong offset!");

// Function TLClient.TLUserWidgetChatBalloon.OnChangeChatBalloonStyle
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetChatBalloon_OnChangeChatBalloonStyle final
{
public:
	bool                                          IsMyPc;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChatMessageCategory                          InChatCategory;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatBalloon_OnChangeChatBalloonStyle) == 0x000001, "Wrong alignment on TLUserWidgetChatBalloon_OnChangeChatBalloonStyle");
static_assert(sizeof(TLUserWidgetChatBalloon_OnChangeChatBalloonStyle) == 0x000002, "Wrong size on TLUserWidgetChatBalloon_OnChangeChatBalloonStyle");
static_assert(offsetof(TLUserWidgetChatBalloon_OnChangeChatBalloonStyle, IsMyPc) == 0x000000, "Member 'TLUserWidgetChatBalloon_OnChangeChatBalloonStyle::IsMyPc' has a wrong offset!");
static_assert(offsetof(TLUserWidgetChatBalloon_OnChangeChatBalloonStyle, InChatCategory) == 0x000001, "Member 'TLUserWidgetChatBalloon_OnChangeChatBalloonStyle::InChatCategory' has a wrong offset!");

// Function TLClient.TLUserWidgetChatBalloon.OnChatBalloonTypeApply
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetChatBalloon_OnChatBalloonTypeApply final
{
public:
	EChatBalloonType                              InChatBalloonType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatBalloon_OnChatBalloonTypeApply) == 0x000001, "Wrong alignment on TLUserWidgetChatBalloon_OnChatBalloonTypeApply");
static_assert(sizeof(TLUserWidgetChatBalloon_OnChatBalloonTypeApply) == 0x000001, "Wrong size on TLUserWidgetChatBalloon_OnChatBalloonTypeApply");
static_assert(offsetof(TLUserWidgetChatBalloon_OnChatBalloonTypeApply, InChatBalloonType) == 0x000000, "Member 'TLUserWidgetChatBalloon_OnChatBalloonTypeApply::InChatBalloonType' has a wrong offset!");

// Function TLClient.TLUserWidgetChatBalloon.OnPositionCalibrated
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetChatBalloon_OnPositionCalibrated final
{
public:
	bool                                          bCalibrated;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECalibratedEdgeType                           InEdgeType;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatBalloon_OnPositionCalibrated) == 0x000001, "Wrong alignment on TLUserWidgetChatBalloon_OnPositionCalibrated");
static_assert(sizeof(TLUserWidgetChatBalloon_OnPositionCalibrated) == 0x000002, "Wrong size on TLUserWidgetChatBalloon_OnPositionCalibrated");
static_assert(offsetof(TLUserWidgetChatBalloon_OnPositionCalibrated, bCalibrated) == 0x000000, "Member 'TLUserWidgetChatBalloon_OnPositionCalibrated::bCalibrated' has a wrong offset!");
static_assert(offsetof(TLUserWidgetChatBalloon_OnPositionCalibrated, InEdgeType) == 0x000001, "Member 'TLUserWidgetChatBalloon_OnPositionCalibrated::InEdgeType' has a wrong offset!");

// Function TLClient.TLUserWidgetChatGroupManager.HandleChangeChatTab
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetChatGroupManager_HandleChangeChatTab final
{
public:
	ETLChatTabType                                InChatTabType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InSender;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatGroupManager_HandleChangeChatTab) == 0x000008, "Wrong alignment on TLUserWidgetChatGroupManager_HandleChangeChatTab");
static_assert(sizeof(TLUserWidgetChatGroupManager_HandleChangeChatTab) == 0x000020, "Wrong size on TLUserWidgetChatGroupManager_HandleChangeChatTab");
static_assert(offsetof(TLUserWidgetChatGroupManager_HandleChangeChatTab, InChatTabType) == 0x000000, "Member 'TLUserWidgetChatGroupManager_HandleChangeChatTab::InChatTabType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetChatGroupManager_HandleChangeChatTab, InSender) == 0x000008, "Member 'TLUserWidgetChatGroupManager_HandleChangeChatTab::InSender' has a wrong offset!");

// Function TLClient.TLUserWidgetChatGroupManager.OnUpdateInvitationListCount
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetChatGroupManager_OnUpdateInvitationListCount final
{
public:
	int32                                         InInvitationCount;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatGroupManager_OnUpdateInvitationListCount) == 0x000004, "Wrong alignment on TLUserWidgetChatGroupManager_OnUpdateInvitationListCount");
static_assert(sizeof(TLUserWidgetChatGroupManager_OnUpdateInvitationListCount) == 0x000004, "Wrong size on TLUserWidgetChatGroupManager_OnUpdateInvitationListCount");
static_assert(offsetof(TLUserWidgetChatGroupManager_OnUpdateInvitationListCount, InInvitationCount) == 0x000000, "Member 'TLUserWidgetChatGroupManager_OnUpdateInvitationListCount::InInvitationCount' has a wrong offset!");

// Function TLClient.TLUserWidgetChatGroupManager.OnUpdateMaxGroupChat
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetChatGroupManager_OnUpdateMaxGroupChat final
{
public:
	bool                                          bMaxGroupChat;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatGroupManager_OnUpdateMaxGroupChat) == 0x000001, "Wrong alignment on TLUserWidgetChatGroupManager_OnUpdateMaxGroupChat");
static_assert(sizeof(TLUserWidgetChatGroupManager_OnUpdateMaxGroupChat) == 0x000001, "Wrong size on TLUserWidgetChatGroupManager_OnUpdateMaxGroupChat");
static_assert(offsetof(TLUserWidgetChatGroupManager_OnUpdateMaxGroupChat, bMaxGroupChat) == 0x000000, "Member 'TLUserWidgetChatGroupManager_OnUpdateMaxGroupChat::bMaxGroupChat' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpWaiting.HandleContinuousEnchantBtnChecked
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillLevelUpWaiting_HandleContinuousEnchantBtnChecked final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpWaiting_HandleContinuousEnchantBtnChecked) == 0x000001, "Wrong alignment on TLUserWidgetSkillLevelUpWaiting_HandleContinuousEnchantBtnChecked");
static_assert(sizeof(TLUserWidgetSkillLevelUpWaiting_HandleContinuousEnchantBtnChecked) == 0x000001, "Wrong size on TLUserWidgetSkillLevelUpWaiting_HandleContinuousEnchantBtnChecked");
static_assert(offsetof(TLUserWidgetSkillLevelUpWaiting_HandleContinuousEnchantBtnChecked, bIsChecked) == 0x000000, "Member 'TLUserWidgetSkillLevelUpWaiting_HandleContinuousEnchantBtnChecked::bIsChecked' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpWaiting.IsLongPressLock
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillLevelUpWaiting_IsLongPressLock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpWaiting_IsLongPressLock) == 0x000001, "Wrong alignment on TLUserWidgetSkillLevelUpWaiting_IsLongPressLock");
static_assert(sizeof(TLUserWidgetSkillLevelUpWaiting_IsLongPressLock) == 0x000001, "Wrong size on TLUserWidgetSkillLevelUpWaiting_IsLongPressLock");
static_assert(offsetof(TLUserWidgetSkillLevelUpWaiting_IsLongPressLock, ReturnValue) == 0x000000, "Member 'TLUserWidgetSkillLevelUpWaiting_IsLongPressLock::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpWaiting.IsLongPressPlayback
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillLevelUpWaiting_IsLongPressPlayback final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpWaiting_IsLongPressPlayback) == 0x000001, "Wrong alignment on TLUserWidgetSkillLevelUpWaiting_IsLongPressPlayback");
static_assert(sizeof(TLUserWidgetSkillLevelUpWaiting_IsLongPressPlayback) == 0x000001, "Wrong size on TLUserWidgetSkillLevelUpWaiting_IsLongPressPlayback");
static_assert(offsetof(TLUserWidgetSkillLevelUpWaiting_IsLongPressPlayback, ReturnValue) == 0x000000, "Member 'TLUserWidgetSkillLevelUpWaiting_IsLongPressPlayback::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpWaiting.OnGoToResultWaitingPhase
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillLevelUpWaiting_OnGoToResultWaitingPhase final
{
public:
	bool                                          InbShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpWaiting_OnGoToResultWaitingPhase) == 0x000001, "Wrong alignment on TLUserWidgetSkillLevelUpWaiting_OnGoToResultWaitingPhase");
static_assert(sizeof(TLUserWidgetSkillLevelUpWaiting_OnGoToResultWaitingPhase) == 0x000001, "Wrong size on TLUserWidgetSkillLevelUpWaiting_OnGoToResultWaitingPhase");
static_assert(offsetof(TLUserWidgetSkillLevelUpWaiting_OnGoToResultWaitingPhase, InbShow) == 0x000000, "Member 'TLUserWidgetSkillLevelUpWaiting_OnGoToResultWaitingPhase::InbShow' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpWaiting.OnLongPressEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillLevelUpWaiting_OnLongPressEvent final
{
public:
	bool                                          bPress;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpWaiting_OnLongPressEvent) == 0x000001, "Wrong alignment on TLUserWidgetSkillLevelUpWaiting_OnLongPressEvent");
static_assert(sizeof(TLUserWidgetSkillLevelUpWaiting_OnLongPressEvent) == 0x000001, "Wrong size on TLUserWidgetSkillLevelUpWaiting_OnLongPressEvent");
static_assert(offsetof(TLUserWidgetSkillLevelUpWaiting_OnLongPressEvent, bPress) == 0x000000, "Member 'TLUserWidgetSkillLevelUpWaiting_OnLongPressEvent::bPress' has a wrong offset!");

// Function TLClient.TLUserWidgetChatGroupOption.OnEventInviteMode
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetChatGroupOption_OnEventInviteMode final
{
public:
	bool                                          bInviteMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatGroupOption_OnEventInviteMode) == 0x000001, "Wrong alignment on TLUserWidgetChatGroupOption_OnEventInviteMode");
static_assert(sizeof(TLUserWidgetChatGroupOption_OnEventInviteMode) == 0x000001, "Wrong size on TLUserWidgetChatGroupOption_OnEventInviteMode");
static_assert(offsetof(TLUserWidgetChatGroupOption_OnEventInviteMode, bInviteMode) == 0x000000, "Member 'TLUserWidgetChatGroupOption_OnEventInviteMode::bInviteMode' has a wrong offset!");

// Function TLClient.TLUserWidgetChatGroupOption.OnInputPasswordTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetChatGroupOption_OnInputPasswordTextChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatGroupOption_OnInputPasswordTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetChatGroupOption_OnInputPasswordTextChanged");
static_assert(sizeof(TLUserWidgetChatGroupOption_OnInputPasswordTextChanged) == 0x000018, "Wrong size on TLUserWidgetChatGroupOption_OnInputPasswordTextChanged");
static_assert(offsetof(TLUserWidgetChatGroupOption_OnInputPasswordTextChanged, InInputText) == 0x000000, "Member 'TLUserWidgetChatGroupOption_OnInputPasswordTextChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetChatGroupOption.OnInputTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetChatGroupOption_OnInputTextChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatGroupOption_OnInputTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetChatGroupOption_OnInputTextChanged");
static_assert(sizeof(TLUserWidgetChatGroupOption_OnInputTextChanged) == 0x000018, "Wrong size on TLUserWidgetChatGroupOption_OnInputTextChanged");
static_assert(offsetof(TLUserWidgetChatGroupOption_OnInputTextChanged, InInputText) == 0x000000, "Member 'TLUserWidgetChatGroupOption_OnInputTextChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetChatInput.EditableTextBox_OnTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetChatInput_EditableTextBox_OnTextChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatInput_EditableTextBox_OnTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetChatInput_EditableTextBox_OnTextChanged");
static_assert(sizeof(TLUserWidgetChatInput_EditableTextBox_OnTextChanged) == 0x000018, "Wrong size on TLUserWidgetChatInput_EditableTextBox_OnTextChanged");
static_assert(offsetof(TLUserWidgetChatInput_EditableTextBox_OnTextChanged, InText) == 0x000000, "Member 'TLUserWidgetChatInput_EditableTextBox_OnTextChanged::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetChatInput.EditableTextBox_OnTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetChatInput_EditableTextBox_OnTextCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetChatInput_EditableTextBox_OnTextCommitted) == 0x000008, "Wrong alignment on TLUserWidgetChatInput_EditableTextBox_OnTextCommitted");
static_assert(sizeof(TLUserWidgetChatInput_EditableTextBox_OnTextCommitted) == 0x000020, "Wrong size on TLUserWidgetChatInput_EditableTextBox_OnTextCommitted");
static_assert(offsetof(TLUserWidgetChatInput_EditableTextBox_OnTextCommitted, InText) == 0x000000, "Member 'TLUserWidgetChatInput_EditableTextBox_OnTextCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetChatInput_EditableTextBox_OnTextCommitted, InCommitType) == 0x000018, "Member 'TLUserWidgetChatInput_EditableTextBox_OnTextCommitted::InCommitType' has a wrong offset!");

// Function TLClient.TLUserWidgetChatInput.EditableTextBox_OnTextFocusLost
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetChatInput_EditableTextBox_OnTextFocusLost final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatInput_EditableTextBox_OnTextFocusLost) == 0x000004, "Wrong alignment on TLUserWidgetChatInput_EditableTextBox_OnTextFocusLost");
static_assert(sizeof(TLUserWidgetChatInput_EditableTextBox_OnTextFocusLost) == 0x000008, "Wrong size on TLUserWidgetChatInput_EditableTextBox_OnTextFocusLost");
static_assert(offsetof(TLUserWidgetChatInput_EditableTextBox_OnTextFocusLost, InFocusEvent) == 0x000000, "Member 'TLUserWidgetChatInput_EditableTextBox_OnTextFocusLost::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetChatInput.EditableTextBox_OnTextFocusReceived
// 0x0040 (0x0040 - 0x0000)
struct TLUserWidgetChatInput_EditableTextBox_OnTextFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatInput_EditableTextBox_OnTextFocusReceived) == 0x000004, "Wrong alignment on TLUserWidgetChatInput_EditableTextBox_OnTextFocusReceived");
static_assert(sizeof(TLUserWidgetChatInput_EditableTextBox_OnTextFocusReceived) == 0x000040, "Wrong size on TLUserWidgetChatInput_EditableTextBox_OnTextFocusReceived");
static_assert(offsetof(TLUserWidgetChatInput_EditableTextBox_OnTextFocusReceived, MyGeometry) == 0x000000, "Member 'TLUserWidgetChatInput_EditableTextBox_OnTextFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLUserWidgetChatInput_EditableTextBox_OnTextFocusReceived, InFocusEvent) == 0x000038, "Member 'TLUserWidgetChatInput_EditableTextBox_OnTextFocusReceived::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetChatInput.EditableTextBox_OnTextMouseButtonDown
// 0x00A8 (0x00A8 - 0x0000)
struct TLUserWidgetChatInput_EditableTextBox_OnTextMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatInput_EditableTextBox_OnTextMouseButtonDown) == 0x000008, "Wrong alignment on TLUserWidgetChatInput_EditableTextBox_OnTextMouseButtonDown");
static_assert(sizeof(TLUserWidgetChatInput_EditableTextBox_OnTextMouseButtonDown) == 0x0000A8, "Wrong size on TLUserWidgetChatInput_EditableTextBox_OnTextMouseButtonDown");
static_assert(offsetof(TLUserWidgetChatInput_EditableTextBox_OnTextMouseButtonDown, MyGeometry) == 0x000000, "Member 'TLUserWidgetChatInput_EditableTextBox_OnTextMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLUserWidgetChatInput_EditableTextBox_OnTextMouseButtonDown, InMouseEvent) == 0x000038, "Member 'TLUserWidgetChatInput_EditableTextBox_OnTextMouseButtonDown::InMouseEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetChatInput.HandleOnFocusLost_WhisperInputTextBox
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetChatInput_HandleOnFocusLost_WhisperInputTextBox final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatInput_HandleOnFocusLost_WhisperInputTextBox) == 0x000004, "Wrong alignment on TLUserWidgetChatInput_HandleOnFocusLost_WhisperInputTextBox");
static_assert(sizeof(TLUserWidgetChatInput_HandleOnFocusLost_WhisperInputTextBox) == 0x000008, "Wrong size on TLUserWidgetChatInput_HandleOnFocusLost_WhisperInputTextBox");
static_assert(offsetof(TLUserWidgetChatInput_HandleOnFocusLost_WhisperInputTextBox, InFocusEvent) == 0x000000, "Member 'TLUserWidgetChatInput_HandleOnFocusLost_WhisperInputTextBox::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetChatInput.OnIsWorldChatOpen
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetChatInput_OnIsWorldChatOpen final
{
public:
	bool                                          IsOpen;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OpenLevel;                                         // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatInput_OnIsWorldChatOpen) == 0x000004, "Wrong alignment on TLUserWidgetChatInput_OnIsWorldChatOpen");
static_assert(sizeof(TLUserWidgetChatInput_OnIsWorldChatOpen) == 0x000008, "Wrong size on TLUserWidgetChatInput_OnIsWorldChatOpen");
static_assert(offsetof(TLUserWidgetChatInput_OnIsWorldChatOpen, IsOpen) == 0x000000, "Member 'TLUserWidgetChatInput_OnIsWorldChatOpen::IsOpen' has a wrong offset!");
static_assert(offsetof(TLUserWidgetChatInput_OnIsWorldChatOpen, OpenLevel) == 0x000004, "Member 'TLUserWidgetChatInput_OnIsWorldChatOpen::OpenLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetChatInput.UpdateActiveChatUI
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetChatInput_UpdateActiveChatUI final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatInput_UpdateActiveChatUI) == 0x000001, "Wrong alignment on TLUserWidgetChatInput_UpdateActiveChatUI");
static_assert(sizeof(TLUserWidgetChatInput_UpdateActiveChatUI) == 0x000001, "Wrong size on TLUserWidgetChatInput_UpdateActiveChatUI");
static_assert(offsetof(TLUserWidgetChatInput_UpdateActiveChatUI, bActive) == 0x000000, "Member 'TLUserWidgetChatInput_UpdateActiveChatUI::bActive' has a wrong offset!");

// Function TLClient.TLUserWidgetChatInput.UpdateBlockGuideMessage
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetChatInput_UpdateBlockGuideMessage final
{
public:
	EChatInputMode                                InInputMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenChat;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatInput_UpdateBlockGuideMessage) == 0x000001, "Wrong alignment on TLUserWidgetChatInput_UpdateBlockGuideMessage");
static_assert(sizeof(TLUserWidgetChatInput_UpdateBlockGuideMessage) == 0x000002, "Wrong size on TLUserWidgetChatInput_UpdateBlockGuideMessage");
static_assert(offsetof(TLUserWidgetChatInput_UpdateBlockGuideMessage, InInputMode) == 0x000000, "Member 'TLUserWidgetChatInput_UpdateBlockGuideMessage::InInputMode' has a wrong offset!");
static_assert(offsetof(TLUserWidgetChatInput_UpdateBlockGuideMessage, bOpenChat) == 0x000001, "Member 'TLUserWidgetChatInput_UpdateBlockGuideMessage::bOpenChat' has a wrong offset!");

// Function TLClient.TLUserWidgetChatInput.UpdateConsoleInputModeGuideVisible
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetChatInput_UpdateConsoleInputModeGuideVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatInput_UpdateConsoleInputModeGuideVisible) == 0x000001, "Wrong alignment on TLUserWidgetChatInput_UpdateConsoleInputModeGuideVisible");
static_assert(sizeof(TLUserWidgetChatInput_UpdateConsoleInputModeGuideVisible) == 0x000001, "Wrong size on TLUserWidgetChatInput_UpdateConsoleInputModeGuideVisible");
static_assert(offsetof(TLUserWidgetChatInput_UpdateConsoleInputModeGuideVisible, bVisible) == 0x000000, "Member 'TLUserWidgetChatInput_UpdateConsoleInputModeGuideVisible::bVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetChatInput.UpdateInputBoxHintTextUsingSTT
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetChatInput_UpdateInputBoxHintTextUsingSTT final
{
public:
	ETLRecordVoiceState                           RecordState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseVivox;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatInput_UpdateInputBoxHintTextUsingSTT) == 0x000001, "Wrong alignment on TLUserWidgetChatInput_UpdateInputBoxHintTextUsingSTT");
static_assert(sizeof(TLUserWidgetChatInput_UpdateInputBoxHintTextUsingSTT) == 0x000002, "Wrong size on TLUserWidgetChatInput_UpdateInputBoxHintTextUsingSTT");
static_assert(offsetof(TLUserWidgetChatInput_UpdateInputBoxHintTextUsingSTT, RecordState) == 0x000000, "Member 'TLUserWidgetChatInput_UpdateInputBoxHintTextUsingSTT::RecordState' has a wrong offset!");
static_assert(offsetof(TLUserWidgetChatInput_UpdateInputBoxHintTextUsingSTT, bUseVivox) == 0x000001, "Member 'TLUserWidgetChatInput_UpdateInputBoxHintTextUsingSTT::bUseVivox' has a wrong offset!");

// Function TLClient.TLUserWidgetChatInput.UpdateRecordButtonState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetChatInput_UpdateRecordButtonState final
{
public:
	ETLRecordVoiceState                           RecordState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatInput_UpdateRecordButtonState) == 0x000001, "Wrong alignment on TLUserWidgetChatInput_UpdateRecordButtonState");
static_assert(sizeof(TLUserWidgetChatInput_UpdateRecordButtonState) == 0x000001, "Wrong size on TLUserWidgetChatInput_UpdateRecordButtonState");
static_assert(offsetof(TLUserWidgetChatInput_UpdateRecordButtonState, RecordState) == 0x000000, "Member 'TLUserWidgetChatInput_UpdateRecordButtonState::RecordState' has a wrong offset!");

// Function TLClient.TLUserWidgetChatInput.UpdateRecordButtonTooltipText
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetChatInput_UpdateRecordButtonTooltipText final
{
public:
	bool                                          bUseVivox;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatInput_UpdateRecordButtonTooltipText) == 0x000001, "Wrong alignment on TLUserWidgetChatInput_UpdateRecordButtonTooltipText");
static_assert(sizeof(TLUserWidgetChatInput_UpdateRecordButtonTooltipText) == 0x000001, "Wrong size on TLUserWidgetChatInput_UpdateRecordButtonTooltipText");
static_assert(offsetof(TLUserWidgetChatInput_UpdateRecordButtonTooltipText, bUseVivox) == 0x000000, "Member 'TLUserWidgetChatInput_UpdateRecordButtonTooltipText::bUseVivox' has a wrong offset!");

// Function TLClient.TLUserWidgetChatInput.UpdateVisibleChatInputUI
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetChatInput_UpdateVisibleChatInputUI final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatInput_UpdateVisibleChatInputUI) == 0x000001, "Wrong alignment on TLUserWidgetChatInput_UpdateVisibleChatInputUI");
static_assert(sizeof(TLUserWidgetChatInput_UpdateVisibleChatInputUI) == 0x000001, "Wrong size on TLUserWidgetChatInput_UpdateVisibleChatInputUI");
static_assert(offsetof(TLUserWidgetChatInput_UpdateVisibleChatInputUI, bVisible) == 0x000000, "Member 'TLUserWidgetChatInput_UpdateVisibleChatInputUI::bVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetTextBlockWidgetTooltip.GetActionGuideAttachPanel
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetTextBlockWidgetTooltip_GetActionGuideAttachPanel final
{
public:
	class UTLSizeBox*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTextBlockWidgetTooltip_GetActionGuideAttachPanel) == 0x000008, "Wrong alignment on TLUserWidgetTextBlockWidgetTooltip_GetActionGuideAttachPanel");
static_assert(sizeof(TLUserWidgetTextBlockWidgetTooltip_GetActionGuideAttachPanel) == 0x000008, "Wrong size on TLUserWidgetTextBlockWidgetTooltip_GetActionGuideAttachPanel");
static_assert(offsetof(TLUserWidgetTextBlockWidgetTooltip_GetActionGuideAttachPanel, ReturnValue) == 0x000000, "Member 'TLUserWidgetTextBlockWidgetTooltip_GetActionGuideAttachPanel::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetChatList.HandleChatListScrolled
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetChatList_HandleChatListScrolled final
{
public:
	float                                         InItemOffset;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDistanceRemaining;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatList_HandleChatListScrolled) == 0x000004, "Wrong alignment on TLUserWidgetChatList_HandleChatListScrolled");
static_assert(sizeof(TLUserWidgetChatList_HandleChatListScrolled) == 0x000008, "Wrong size on TLUserWidgetChatList_HandleChatListScrolled");
static_assert(offsetof(TLUserWidgetChatList_HandleChatListScrolled, InItemOffset) == 0x000000, "Member 'TLUserWidgetChatList_HandleChatListScrolled::InItemOffset' has a wrong offset!");
static_assert(offsetof(TLUserWidgetChatList_HandleChatListScrolled, InDistanceRemaining) == 0x000004, "Member 'TLUserWidgetChatList_HandleChatListScrolled::InDistanceRemaining' has a wrong offset!");

// Function TLClient.TLUserWidgetChatList.OnStartChatItemVisibleAnimation
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetChatList_OnStartChatItemVisibleAnimation final
{
public:
	bool                                          bReverseAnim;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatList_OnStartChatItemVisibleAnimation) == 0x000001, "Wrong alignment on TLUserWidgetChatList_OnStartChatItemVisibleAnimation");
static_assert(sizeof(TLUserWidgetChatList_OnStartChatItemVisibleAnimation) == 0x000001, "Wrong size on TLUserWidgetChatList_OnStartChatItemVisibleAnimation");
static_assert(offsetof(TLUserWidgetChatList_OnStartChatItemVisibleAnimation, bReverseAnim) == 0x000000, "Member 'TLUserWidgetChatList_OnStartChatItemVisibleAnimation::bReverseAnim' has a wrong offset!");

// Function TLClient.TLUserWidgetRuneSocketViewSlot.OnActiveSynergy
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetRuneSocketViewSlot_OnActiveSynergy final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemGrade                                    InSynergyGrade;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRuneSocketViewSlot_OnActiveSynergy) == 0x000001, "Wrong alignment on TLUserWidgetRuneSocketViewSlot_OnActiveSynergy");
static_assert(sizeof(TLUserWidgetRuneSocketViewSlot_OnActiveSynergy) == 0x000002, "Wrong size on TLUserWidgetRuneSocketViewSlot_OnActiveSynergy");
static_assert(offsetof(TLUserWidgetRuneSocketViewSlot_OnActiveSynergy, InIsActive) == 0x000000, "Member 'TLUserWidgetRuneSocketViewSlot_OnActiveSynergy::InIsActive' has a wrong offset!");
static_assert(offsetof(TLUserWidgetRuneSocketViewSlot_OnActiveSynergy, InSynergyGrade) == 0x000001, "Member 'TLUserWidgetRuneSocketViewSlot_OnActiveSynergy::InSynergyGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetRuneSocketViewSlot.OnNotOpenSocket
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRuneSocketViewSlot_OnNotOpenSocket final
{
public:
	bool                                          InIsNotOpen;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRuneSocketViewSlot_OnNotOpenSocket) == 0x000001, "Wrong alignment on TLUserWidgetRuneSocketViewSlot_OnNotOpenSocket");
static_assert(sizeof(TLUserWidgetRuneSocketViewSlot_OnNotOpenSocket) == 0x000001, "Wrong size on TLUserWidgetRuneSocketViewSlot_OnNotOpenSocket");
static_assert(offsetof(TLUserWidgetRuneSocketViewSlot_OnNotOpenSocket, InIsNotOpen) == 0x000000, "Member 'TLUserWidgetRuneSocketViewSlot_OnNotOpenSocket::InIsNotOpen' has a wrong offset!");

// Function TLClient.TLUserWidgetTabButtonGroup.BindNextAction
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetTabButtonGroup_BindNextAction final
{
public:
	class FName                                   InActionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTabButtonGroup_BindNextAction) == 0x000004, "Wrong alignment on TLUserWidgetTabButtonGroup_BindNextAction");
static_assert(sizeof(TLUserWidgetTabButtonGroup_BindNextAction) == 0x000008, "Wrong size on TLUserWidgetTabButtonGroup_BindNextAction");
static_assert(offsetof(TLUserWidgetTabButtonGroup_BindNextAction, InActionName) == 0x000000, "Member 'TLUserWidgetTabButtonGroup_BindNextAction::InActionName' has a wrong offset!");

// Function TLClient.TLUserWidgetTabButtonGroup.BindPrevAction
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetTabButtonGroup_BindPrevAction final
{
public:
	class FName                                   InActionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTabButtonGroup_BindPrevAction) == 0x000004, "Wrong alignment on TLUserWidgetTabButtonGroup_BindPrevAction");
static_assert(sizeof(TLUserWidgetTabButtonGroup_BindPrevAction) == 0x000008, "Wrong size on TLUserWidgetTabButtonGroup_BindPrevAction");
static_assert(offsetof(TLUserWidgetTabButtonGroup_BindPrevAction, InActionName) == 0x000000, "Member 'TLUserWidgetTabButtonGroup_BindPrevAction::InActionName' has a wrong offset!");

// Function TLClient.TLUserWidgetTabButtonGroup.GetButton
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetTabButtonGroup_GetButton final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTLUserWidgetCheckButton*               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTabButtonGroup_GetButton) == 0x000008, "Wrong alignment on TLUserWidgetTabButtonGroup_GetButton");
static_assert(sizeof(TLUserWidgetTabButtonGroup_GetButton) == 0x000010, "Wrong size on TLUserWidgetTabButtonGroup_GetButton");
static_assert(offsetof(TLUserWidgetTabButtonGroup_GetButton, Index_0) == 0x000000, "Member 'TLUserWidgetTabButtonGroup_GetButton::Index_0' has a wrong offset!");
static_assert(offsetof(TLUserWidgetTabButtonGroup_GetButton, ReturnValue) == 0x000008, "Member 'TLUserWidgetTabButtonGroup_GetButton::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetTabButtonGroup.HandleUserScrolled
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetTabButtonGroup_HandleUserScrolled final
{
public:
	float                                         CurrentOffset;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTabButtonGroup_HandleUserScrolled) == 0x000004, "Wrong alignment on TLUserWidgetTabButtonGroup_HandleUserScrolled");
static_assert(sizeof(TLUserWidgetTabButtonGroup_HandleUserScrolled) == 0x000004, "Wrong size on TLUserWidgetTabButtonGroup_HandleUserScrolled");
static_assert(offsetof(TLUserWidgetTabButtonGroup_HandleUserScrolled, CurrentOffset) == 0x000000, "Member 'TLUserWidgetTabButtonGroup_HandleUserScrolled::CurrentOffset' has a wrong offset!");

// Function TLClient.TLUserWidgetTabButtonGroup.OnUpdateTabButtonCount
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetTabButtonGroup_OnUpdateTabButtonCount final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTabButtonGroup_OnUpdateTabButtonCount) == 0x000004, "Wrong alignment on TLUserWidgetTabButtonGroup_OnUpdateTabButtonCount");
static_assert(sizeof(TLUserWidgetTabButtonGroup_OnUpdateTabButtonCount) == 0x000004, "Wrong size on TLUserWidgetTabButtonGroup_OnUpdateTabButtonCount");
static_assert(offsetof(TLUserWidgetTabButtonGroup_OnUpdateTabButtonCount, InCount) == 0x000000, "Member 'TLUserWidgetTabButtonGroup_OnUpdateTabButtonCount::InCount' has a wrong offset!");

// Function TLClient.TLUserWidgetTabButtonGroup.GetCurrentIndex
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetTabButtonGroup_GetCurrentIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTabButtonGroup_GetCurrentIndex) == 0x000004, "Wrong alignment on TLUserWidgetTabButtonGroup_GetCurrentIndex");
static_assert(sizeof(TLUserWidgetTabButtonGroup_GetCurrentIndex) == 0x000004, "Wrong size on TLUserWidgetTabButtonGroup_GetCurrentIndex");
static_assert(offsetof(TLUserWidgetTabButtonGroup_GetCurrentIndex, ReturnValue) == 0x000000, "Member 'TLUserWidgetTabButtonGroup_GetCurrentIndex::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetTabButtonGroup.IsSelected
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetTabButtonGroup_IsSelected final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetTabButtonGroup_IsSelected) == 0x000004, "Wrong alignment on TLUserWidgetTabButtonGroup_IsSelected");
static_assert(sizeof(TLUserWidgetTabButtonGroup_IsSelected) == 0x000008, "Wrong size on TLUserWidgetTabButtonGroup_IsSelected");
static_assert(offsetof(TLUserWidgetTabButtonGroup_IsSelected, Index_0) == 0x000000, "Member 'TLUserWidgetTabButtonGroup_IsSelected::Index_0' has a wrong offset!");
static_assert(offsetof(TLUserWidgetTabButtonGroup_IsSelected, ReturnValue) == 0x000004, "Member 'TLUserWidgetTabButtonGroup_IsSelected::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetTabButtonGroup.Num
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetTabButtonGroup_Num final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTabButtonGroup_Num) == 0x000004, "Wrong alignment on TLUserWidgetTabButtonGroup_Num");
static_assert(sizeof(TLUserWidgetTabButtonGroup_Num) == 0x000004, "Wrong size on TLUserWidgetTabButtonGroup_Num");
static_assert(offsetof(TLUserWidgetTabButtonGroup_Num, ReturnValue) == 0x000000, "Member 'TLUserWidgetTabButtonGroup_Num::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetChatMenuBar.OnChangeNewChatCount
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetChatMenuBar_OnChangeNewChatCount final
{
public:
	class UTLUserWidgetChatTabButton*             ChatTabButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   NewChatCountText;                                  // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatMenuBar_OnChangeNewChatCount) == 0x000008, "Wrong alignment on TLUserWidgetChatMenuBar_OnChangeNewChatCount");
static_assert(sizeof(TLUserWidgetChatMenuBar_OnChangeNewChatCount) == 0x000020, "Wrong size on TLUserWidgetChatMenuBar_OnChangeNewChatCount");
static_assert(offsetof(TLUserWidgetChatMenuBar_OnChangeNewChatCount, ChatTabButton) == 0x000000, "Member 'TLUserWidgetChatMenuBar_OnChangeNewChatCount::ChatTabButton' has a wrong offset!");
static_assert(offsetof(TLUserWidgetChatMenuBar_OnChangeNewChatCount, NewChatCountText) == 0x000008, "Member 'TLUserWidgetChatMenuBar_OnChangeNewChatCount::NewChatCountText' has a wrong offset!");

// Function TLClient.TLUserWidgetChatMenuBar.OnEventChatTabActivate
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetChatMenuBar_OnEventChatTabActivate final
{
public:
	ETLChatTabType                                InChatTabType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivate;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatMenuBar_OnEventChatTabActivate) == 0x000001, "Wrong alignment on TLUserWidgetChatMenuBar_OnEventChatTabActivate");
static_assert(sizeof(TLUserWidgetChatMenuBar_OnEventChatTabActivate) == 0x000002, "Wrong size on TLUserWidgetChatMenuBar_OnEventChatTabActivate");
static_assert(offsetof(TLUserWidgetChatMenuBar_OnEventChatTabActivate, InChatTabType) == 0x000000, "Member 'TLUserWidgetChatMenuBar_OnEventChatTabActivate::InChatTabType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetChatMenuBar_OnEventChatTabActivate, bInActivate) == 0x000001, "Member 'TLUserWidgetChatMenuBar_OnEventChatTabActivate::bInActivate' has a wrong offset!");

// Function TLClient.TLUserWidgetChatMenuBar.OnExpandButton
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetChatMenuBar_OnExpandButton final
{
public:
	ETLChatTabType                                InChatTabType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatMenuBar_OnExpandButton) == 0x000001, "Wrong alignment on TLUserWidgetChatMenuBar_OnExpandButton");
static_assert(sizeof(TLUserWidgetChatMenuBar_OnExpandButton) == 0x000002, "Wrong size on TLUserWidgetChatMenuBar_OnExpandButton");
static_assert(offsetof(TLUserWidgetChatMenuBar_OnExpandButton, InChatTabType) == 0x000000, "Member 'TLUserWidgetChatMenuBar_OnExpandButton::InChatTabType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetChatMenuBar_OnExpandButton, bVisible) == 0x000001, "Member 'TLUserWidgetChatMenuBar_OnExpandButton::bVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillBookWeaponSet.OnWeaponCategorySelected_BP
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetSkillBookWeaponSet_OnWeaponCategorySelected_BP final
{
public:
	EWeaponCategory                               InWeaponCategory;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WeaponSetIndex;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillBookWeaponSet_OnWeaponCategorySelected_BP) == 0x000004, "Wrong alignment on TLUserWidgetSkillBookWeaponSet_OnWeaponCategorySelected_BP");
static_assert(sizeof(TLUserWidgetSkillBookWeaponSet_OnWeaponCategorySelected_BP) == 0x000008, "Wrong size on TLUserWidgetSkillBookWeaponSet_OnWeaponCategorySelected_BP");
static_assert(offsetof(TLUserWidgetSkillBookWeaponSet_OnWeaponCategorySelected_BP, InWeaponCategory) == 0x000000, "Member 'TLUserWidgetSkillBookWeaponSet_OnWeaponCategorySelected_BP::InWeaponCategory' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillBookWeaponSet_OnWeaponCategorySelected_BP, WeaponSetIndex) == 0x000004, "Member 'TLUserWidgetSkillBookWeaponSet_OnWeaponCategorySelected_BP::WeaponSetIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetPurchaseState.OnGoodsState
// 0x0003 (0x0003 - 0x0000)
struct TLUserWidgetPurchaseState_OnGoodsState final
{
public:
	bool                                          InIsNew;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsBest;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsEvent;                                         // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPurchaseState_OnGoodsState) == 0x000001, "Wrong alignment on TLUserWidgetPurchaseState_OnGoodsState");
static_assert(sizeof(TLUserWidgetPurchaseState_OnGoodsState) == 0x000003, "Wrong size on TLUserWidgetPurchaseState_OnGoodsState");
static_assert(offsetof(TLUserWidgetPurchaseState_OnGoodsState, InIsNew) == 0x000000, "Member 'TLUserWidgetPurchaseState_OnGoodsState::InIsNew' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPurchaseState_OnGoodsState, InIsBest) == 0x000001, "Member 'TLUserWidgetPurchaseState_OnGoodsState::InIsBest' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPurchaseState_OnGoodsState, InIsEvent) == 0x000002, "Member 'TLUserWidgetPurchaseState_OnGoodsState::InIsEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetEmojiListEntry.OnPlayEmojiAnimation
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetEmojiListEntry_OnPlayEmojiAnimation final
{
public:
	int32                                         AnimFrame;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEmojiListEntry_OnPlayEmojiAnimation) == 0x000004, "Wrong alignment on TLUserWidgetEmojiListEntry_OnPlayEmojiAnimation");
static_assert(sizeof(TLUserWidgetEmojiListEntry_OnPlayEmojiAnimation) == 0x000004, "Wrong size on TLUserWidgetEmojiListEntry_OnPlayEmojiAnimation");
static_assert(offsetof(TLUserWidgetEmojiListEntry_OnPlayEmojiAnimation, AnimFrame) == 0x000000, "Member 'TLUserWidgetEmojiListEntry_OnPlayEmojiAnimation::AnimFrame' has a wrong offset!");

// Function TLClient.TLUserWidgetPotionAutoUseController.SetListOpen
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPotionAutoUseController_SetListOpen final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPotionAutoUseController_SetListOpen) == 0x000001, "Wrong alignment on TLUserWidgetPotionAutoUseController_SetListOpen");
static_assert(sizeof(TLUserWidgetPotionAutoUseController_SetListOpen) == 0x000001, "Wrong size on TLUserWidgetPotionAutoUseController_SetListOpen");
static_assert(offsetof(TLUserWidgetPotionAutoUseController_SetListOpen, bInValue) == 0x000000, "Member 'TLUserWidgetPotionAutoUseController_SetListOpen::bInValue' has a wrong offset!");

// Function TLClient.TLUserWidgetChatUser.OnUpdateWaitingInviteUser
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetChatUser_OnUpdateWaitingInviteUser final
{
public:
	bool                                          IsWaiting;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatUser_OnUpdateWaitingInviteUser) == 0x000001, "Wrong alignment on TLUserWidgetChatUser_OnUpdateWaitingInviteUser");
static_assert(sizeof(TLUserWidgetChatUser_OnUpdateWaitingInviteUser) == 0x000001, "Wrong size on TLUserWidgetChatUser_OnUpdateWaitingInviteUser");
static_assert(offsetof(TLUserWidgetChatUser_OnUpdateWaitingInviteUser, IsWaiting) == 0x000000, "Member 'TLUserWidgetChatUser_OnUpdateWaitingInviteUser::IsWaiting' has a wrong offset!");

// Function TLClient.TLUserWidgetChatUserList.OnUpdateVisibleExpandButton
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetChatUserList_OnUpdateVisibleExpandButton final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatUserList_OnUpdateVisibleExpandButton) == 0x000001, "Wrong alignment on TLUserWidgetChatUserList_OnUpdateVisibleExpandButton");
static_assert(sizeof(TLUserWidgetChatUserList_OnUpdateVisibleExpandButton) == 0x000001, "Wrong size on TLUserWidgetChatUserList_OnUpdateVisibleExpandButton");
static_assert(offsetof(TLUserWidgetChatUserList_OnUpdateVisibleExpandButton, bVisible) == 0x000000, "Member 'TLUserWidgetChatUserList_OnUpdateVisibleExpandButton::bVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetChatVoiceRecordGauge.UpdateRemainPercent
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetChatVoiceRecordGauge_UpdateRemainPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatVoiceRecordGauge_UpdateRemainPercent) == 0x000004, "Wrong alignment on TLUserWidgetChatVoiceRecordGauge_UpdateRemainPercent");
static_assert(sizeof(TLUserWidgetChatVoiceRecordGauge_UpdateRemainPercent) == 0x000004, "Wrong size on TLUserWidgetChatVoiceRecordGauge_UpdateRemainPercent");
static_assert(offsetof(TLUserWidgetChatVoiceRecordGauge_UpdateRemainPercent, InPercent) == 0x000000, "Member 'TLUserWidgetChatVoiceRecordGauge_UpdateRemainPercent::InPercent' has a wrong offset!");

// Function TLClient.TLUserWidgetChatWindow.OnOpenFullScreenUI
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetChatWindow_OnOpenFullScreenUI final
{
public:
	bool                                          IsOpenUI;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatWindow_OnOpenFullScreenUI) == 0x000001, "Wrong alignment on TLUserWidgetChatWindow_OnOpenFullScreenUI");
static_assert(sizeof(TLUserWidgetChatWindow_OnOpenFullScreenUI) == 0x000001, "Wrong size on TLUserWidgetChatWindow_OnOpenFullScreenUI");
static_assert(offsetof(TLUserWidgetChatWindow_OnOpenFullScreenUI, IsOpenUI) == 0x000000, "Member 'TLUserWidgetChatWindow_OnOpenFullScreenUI::IsOpenUI' has a wrong offset!");

// Function TLClient.TLUserWidgetChatWindow.OnSocialMotionNotificationOff
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetChatWindow_OnSocialMotionNotificationOff final
{
public:
	class FName                                   InMotionID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatWindow_OnSocialMotionNotificationOff) == 0x000004, "Wrong alignment on TLUserWidgetChatWindow_OnSocialMotionNotificationOff");
static_assert(sizeof(TLUserWidgetChatWindow_OnSocialMotionNotificationOff) == 0x000008, "Wrong size on TLUserWidgetChatWindow_OnSocialMotionNotificationOff");
static_assert(offsetof(TLUserWidgetChatWindow_OnSocialMotionNotificationOff, InMotionID) == 0x000000, "Member 'TLUserWidgetChatWindow_OnSocialMotionNotificationOff::InMotionID' has a wrong offset!");

// Function TLClient.TLUserWidgetChatWindow.OnStartAnimChangeChatVisibleType
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetChatWindow_OnStartAnimChangeChatVisibleType final
{
public:
	ETLChatVisibleType                            OldVisibleType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLChatVisibleType                            NewVisibleType;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetChatWindow_OnStartAnimChangeChatVisibleType) == 0x000001, "Wrong alignment on TLUserWidgetChatWindow_OnStartAnimChangeChatVisibleType");
static_assert(sizeof(TLUserWidgetChatWindow_OnStartAnimChangeChatVisibleType) == 0x000002, "Wrong size on TLUserWidgetChatWindow_OnStartAnimChangeChatVisibleType");
static_assert(offsetof(TLUserWidgetChatWindow_OnStartAnimChangeChatVisibleType, OldVisibleType) == 0x000000, "Member 'TLUserWidgetChatWindow_OnStartAnimChangeChatVisibleType::OldVisibleType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetChatWindow_OnStartAnimChangeChatVisibleType, NewVisibleType) == 0x000001, "Member 'TLUserWidgetChatWindow_OnStartAnimChangeChatVisibleType::NewVisibleType' has a wrong offset!");

// Function TLClient.TLUserWidgetCinematricDialog.PlayChoiceTake
// 0x0038 (0x0038 - 0x0000)
struct TLUserWidgetCinematricDialog_PlayChoiceTake final
{
public:
	class FName                                   TakeCutsceneID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExclusiveTag;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTLInfoCinematicDialogSelectList       InTLInfo;                                          // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(int32 SelectedIndex)>          InCallBackOnChoiceEndTake;                         // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCinematricDialog_PlayChoiceTake) == 0x000008, "Wrong alignment on TLUserWidgetCinematricDialog_PlayChoiceTake");
static_assert(sizeof(TLUserWidgetCinematricDialog_PlayChoiceTake) == 0x000038, "Wrong size on TLUserWidgetCinematricDialog_PlayChoiceTake");
static_assert(offsetof(TLUserWidgetCinematricDialog_PlayChoiceTake, TakeCutsceneID) == 0x000000, "Member 'TLUserWidgetCinematricDialog_PlayChoiceTake::TakeCutsceneID' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCinematricDialog_PlayChoiceTake, ExclusiveTag) == 0x000008, "Member 'TLUserWidgetCinematricDialog_PlayChoiceTake::ExclusiveTag' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCinematricDialog_PlayChoiceTake, InTLInfo) == 0x000010, "Member 'TLUserWidgetCinematricDialog_PlayChoiceTake::InTLInfo' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCinematricDialog_PlayChoiceTake, InCallBackOnChoiceEndTake) == 0x000028, "Member 'TLUserWidgetCinematricDialog_PlayChoiceTake::InCallBackOnChoiceEndTake' has a wrong offset!");

// Function TLClient.TLUserWidgetCinematricDialog.PlayEndTake
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCinematricDialog_PlayEndTake final
{
public:
	EEndTakeType                                  InEndTakeType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCinematricDialog_PlayEndTake) == 0x000001, "Wrong alignment on TLUserWidgetCinematricDialog_PlayEndTake");
static_assert(sizeof(TLUserWidgetCinematricDialog_PlayEndTake) == 0x000001, "Wrong size on TLUserWidgetCinematricDialog_PlayEndTake");
static_assert(offsetof(TLUserWidgetCinematricDialog_PlayEndTake, InEndTakeType) == 0x000000, "Member 'TLUserWidgetCinematricDialog_PlayEndTake::InEndTakeType' has a wrong offset!");

// Function TLClient.TLUserWidgetCinematricDialog.PlayInputActionTake
// 0x0070 (0x0070 - 0x0000)
struct TLUserWidgetCinematricDialog_PlayInputActionTake final
{
public:
	class FName                                   TakeCutsceneID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCinematicInputActionData              PCData;                                            // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCinematicInputActionData              ConsoleData;                                       // 0x0028(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        IconPath;                                          // 0x0048(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             InCallBackOnEndTake;                               // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCinematricDialog_PlayInputActionTake) == 0x000008, "Wrong alignment on TLUserWidgetCinematricDialog_PlayInputActionTake");
static_assert(sizeof(TLUserWidgetCinematricDialog_PlayInputActionTake) == 0x000070, "Wrong size on TLUserWidgetCinematricDialog_PlayInputActionTake");
static_assert(offsetof(TLUserWidgetCinematricDialog_PlayInputActionTake, TakeCutsceneID) == 0x000000, "Member 'TLUserWidgetCinematricDialog_PlayInputActionTake::TakeCutsceneID' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCinematricDialog_PlayInputActionTake, PCData) == 0x000008, "Member 'TLUserWidgetCinematricDialog_PlayInputActionTake::PCData' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCinematricDialog_PlayInputActionTake, ConsoleData) == 0x000028, "Member 'TLUserWidgetCinematricDialog_PlayInputActionTake::ConsoleData' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCinematricDialog_PlayInputActionTake, IconPath) == 0x000048, "Member 'TLUserWidgetCinematricDialog_PlayInputActionTake::IconPath' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCinematricDialog_PlayInputActionTake, InCallBackOnEndTake) == 0x000060, "Member 'TLUserWidgetCinematricDialog_PlayInputActionTake::InCallBackOnEndTake' has a wrong offset!");

// Function TLClient.TLUserWidgetCinematricDialog.PlayTake
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetCinematricDialog_PlayTake final
{
public:
	class FName                                   TakeCutsceneID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExclusiveTag;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             InCallBackOnEndTake;                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCinematricDialog_PlayTake) == 0x000004, "Wrong alignment on TLUserWidgetCinematricDialog_PlayTake");
static_assert(sizeof(TLUserWidgetCinematricDialog_PlayTake) == 0x000020, "Wrong size on TLUserWidgetCinematricDialog_PlayTake");
static_assert(offsetof(TLUserWidgetCinematricDialog_PlayTake, TakeCutsceneID) == 0x000000, "Member 'TLUserWidgetCinematricDialog_PlayTake::TakeCutsceneID' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCinematricDialog_PlayTake, ExclusiveTag) == 0x000008, "Member 'TLUserWidgetCinematricDialog_PlayTake::ExclusiveTag' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCinematricDialog_PlayTake, InCallBackOnEndTake) == 0x000010, "Member 'TLUserWidgetCinematricDialog_PlayTake::InCallBackOnEndTake' has a wrong offset!");

// Function TLClient.TLUserWidgetCinematricDialog.SetShowCursor
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCinematricDialog_SetShowCursor final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCinematricDialog_SetShowCursor) == 0x000001, "Wrong alignment on TLUserWidgetCinematricDialog_SetShowCursor");
static_assert(sizeof(TLUserWidgetCinematricDialog_SetShowCursor) == 0x000001, "Wrong size on TLUserWidgetCinematricDialog_SetShowCursor");
static_assert(offsetof(TLUserWidgetCinematricDialog_SetShowCursor, bShow) == 0x000000, "Member 'TLUserWidgetCinematricDialog_SetShowCursor::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetCinematricDialog_SpecialContent.OnNameValidated
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCinematricDialog_SpecialContent_OnNameValidated final
{
public:
	bool                                          bValidated;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCinematricDialog_SpecialContent_OnNameValidated) == 0x000001, "Wrong alignment on TLUserWidgetCinematricDialog_SpecialContent_OnNameValidated");
static_assert(sizeof(TLUserWidgetCinematricDialog_SpecialContent_OnNameValidated) == 0x000001, "Wrong size on TLUserWidgetCinematricDialog_SpecialContent_OnNameValidated");
static_assert(offsetof(TLUserWidgetCinematricDialog_SpecialContent_OnNameValidated, bValidated) == 0x000000, "Member 'TLUserWidgetCinematricDialog_SpecialContent_OnNameValidated::bValidated' has a wrong offset!");

// Function TLClient.TLUserWidgetCinematricDialog_SpecialContent.PlayNameInputTake
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetCinematricDialog_SpecialContent_PlayNameInputTake final
{
public:
	class FName                                   NameCutsceneID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             InCallBackOnEndTake;                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCinematricDialog_SpecialContent_PlayNameInputTake) == 0x000004, "Wrong alignment on TLUserWidgetCinematricDialog_SpecialContent_PlayNameInputTake");
static_assert(sizeof(TLUserWidgetCinematricDialog_SpecialContent_PlayNameInputTake) == 0x000018, "Wrong size on TLUserWidgetCinematricDialog_SpecialContent_PlayNameInputTake");
static_assert(offsetof(TLUserWidgetCinematricDialog_SpecialContent_PlayNameInputTake, NameCutsceneID) == 0x000000, "Member 'TLUserWidgetCinematricDialog_SpecialContent_PlayNameInputTake::NameCutsceneID' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCinematricDialog_SpecialContent_PlayNameInputTake, InCallBackOnEndTake) == 0x000008, "Member 'TLUserWidgetCinematricDialog_SpecialContent_PlayNameInputTake::InCallBackOnEndTake' has a wrong offset!");

// Function TLClient.TLUserWidgetCinematricDialog_SpecialContent.ShowWorldMap
// 0x001C (0x001C - 0x0000)
struct TLUserWidgetCinematricDialog_SpecialContent_ShowWorldMap final
{
public:
	float                                         InZoomLevel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InTargetPos;                                       // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             InMapCinematicKeyEvent;                            // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCinematricDialog_SpecialContent_ShowWorldMap) == 0x000004, "Wrong alignment on TLUserWidgetCinematricDialog_SpecialContent_ShowWorldMap");
static_assert(sizeof(TLUserWidgetCinematricDialog_SpecialContent_ShowWorldMap) == 0x00001C, "Wrong size on TLUserWidgetCinematricDialog_SpecialContent_ShowWorldMap");
static_assert(offsetof(TLUserWidgetCinematricDialog_SpecialContent_ShowWorldMap, InZoomLevel) == 0x000000, "Member 'TLUserWidgetCinematricDialog_SpecialContent_ShowWorldMap::InZoomLevel' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCinematricDialog_SpecialContent_ShowWorldMap, InTargetPos) == 0x000004, "Member 'TLUserWidgetCinematricDialog_SpecialContent_ShowWorldMap::InTargetPos' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCinematricDialog_SpecialContent_ShowWorldMap, InMapCinematicKeyEvent) == 0x00000C, "Member 'TLUserWidgetCinematricDialog_SpecialContent_ShowWorldMap::InMapCinematicKeyEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetCinematricDialog_SpecialContent.StartMapCinematicDialog
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetCinematricDialog_SpecialContent_StartMapCinematicDialog final
{
public:
	TDelegate<void()>                             InMapReadyEvent;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCinematricDialog_SpecialContent_StartMapCinematicDialog) == 0x000004, "Wrong alignment on TLUserWidgetCinematricDialog_SpecialContent_StartMapCinematicDialog");
static_assert(sizeof(TLUserWidgetCinematricDialog_SpecialContent_StartMapCinematicDialog) == 0x000010, "Wrong size on TLUserWidgetCinematricDialog_SpecialContent_StartMapCinematicDialog");
static_assert(offsetof(TLUserWidgetCinematricDialog_SpecialContent_StartMapCinematicDialog, InMapReadyEvent) == 0x000000, "Member 'TLUserWidgetCinematricDialog_SpecialContent_StartMapCinematicDialog::InMapReadyEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetDynamicEventGuideBaseInfo.OnCurrentType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDynamicEventGuideBaseInfo_OnCurrentType final
{
public:
	ETLDynamicEventHUDType                        InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDynamicEventGuideBaseInfo_OnCurrentType) == 0x000001, "Wrong alignment on TLUserWidgetDynamicEventGuideBaseInfo_OnCurrentType");
static_assert(sizeof(TLUserWidgetDynamicEventGuideBaseInfo_OnCurrentType) == 0x000001, "Wrong size on TLUserWidgetDynamicEventGuideBaseInfo_OnCurrentType");
static_assert(offsetof(TLUserWidgetDynamicEventGuideBaseInfo_OnCurrentType, InType) == 0x000000, "Member 'TLUserWidgetDynamicEventGuideBaseInfo_OnCurrentType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetDynamicEventGuideBaseInfo.OnUpdateScheduleType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDynamicEventGuideBaseInfo_OnUpdateScheduleType final
{
public:
	ETLEventScheduleType                          InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDynamicEventGuideBaseInfo_OnUpdateScheduleType) == 0x000001, "Wrong alignment on TLUserWidgetDynamicEventGuideBaseInfo_OnUpdateScheduleType");
static_assert(sizeof(TLUserWidgetDynamicEventGuideBaseInfo_OnUpdateScheduleType) == 0x000001, "Wrong size on TLUserWidgetDynamicEventGuideBaseInfo_OnUpdateScheduleType");
static_assert(offsetof(TLUserWidgetDynamicEventGuideBaseInfo_OnUpdateScheduleType, InType) == 0x000000, "Member 'TLUserWidgetDynamicEventGuideBaseInfo_OnUpdateScheduleType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetDynamicEventGuideBaseInfo.UpdateMyEECount
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDynamicEventGuideBaseInfo_UpdateMyEECount final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDynamicEventGuideBaseInfo_UpdateMyEECount) == 0x000001, "Wrong alignment on TLUserWidgetDynamicEventGuideBaseInfo_UpdateMyEECount");
static_assert(sizeof(TLUserWidgetDynamicEventGuideBaseInfo_UpdateMyEECount) == 0x000001, "Wrong size on TLUserWidgetDynamicEventGuideBaseInfo_UpdateMyEECount");
static_assert(offsetof(TLUserWidgetDynamicEventGuideBaseInfo_UpdateMyEECount, bInShow) == 0x000000, "Member 'TLUserWidgetDynamicEventGuideBaseInfo_UpdateMyEECount::bInShow' has a wrong offset!");

// Function TLClient.TLUserWidgetCinematricDialogPanel.HandleEndCinematicDialog
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetCinematricDialogPanel_HandleEndCinematicDialog final
{
public:
	class FName                                   InTableRowId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCinematricDialogPanel_HandleEndCinematicDialog) == 0x000004, "Wrong alignment on TLUserWidgetCinematricDialogPanel_HandleEndCinematicDialog");
static_assert(sizeof(TLUserWidgetCinematricDialogPanel_HandleEndCinematicDialog) == 0x000008, "Wrong size on TLUserWidgetCinematricDialogPanel_HandleEndCinematicDialog");
static_assert(offsetof(TLUserWidgetCinematricDialogPanel_HandleEndCinematicDialog, InTableRowId) == 0x000000, "Member 'TLUserWidgetCinematricDialogPanel_HandleEndCinematicDialog::InTableRowId' has a wrong offset!");

// Function TLClient.TLUserWidgetCinematricDialogPanel.HandleEndCinematicDialogTake
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCinematricDialogPanel_HandleEndCinematicDialogTake final
{
public:
	bool                                          bInSkipped;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCinematricDialogPanel_HandleEndCinematicDialogTake) == 0x000001, "Wrong alignment on TLUserWidgetCinematricDialogPanel_HandleEndCinematicDialogTake");
static_assert(sizeof(TLUserWidgetCinematricDialogPanel_HandleEndCinematicDialogTake) == 0x000001, "Wrong size on TLUserWidgetCinematricDialogPanel_HandleEndCinematicDialogTake");
static_assert(offsetof(TLUserWidgetCinematricDialogPanel_HandleEndCinematicDialogTake, bInSkipped) == 0x000000, "Member 'TLUserWidgetCinematricDialogPanel_HandleEndCinematicDialogTake::bInSkipped' has a wrong offset!");

// Function TLClient.TLUserWidgetCinematricDialogPanel.HandleMapCinematicDialog
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCinematricDialogPanel_HandleMapCinematicDialog final
{
public:
	bool                                          InOn;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCinematricDialogPanel_HandleMapCinematicDialog) == 0x000001, "Wrong alignment on TLUserWidgetCinematricDialogPanel_HandleMapCinematicDialog");
static_assert(sizeof(TLUserWidgetCinematricDialogPanel_HandleMapCinematicDialog) == 0x000001, "Wrong size on TLUserWidgetCinematricDialogPanel_HandleMapCinematicDialog");
static_assert(offsetof(TLUserWidgetCinematricDialogPanel_HandleMapCinematicDialog, InOn) == 0x000000, "Member 'TLUserWidgetCinematricDialogPanel_HandleMapCinematicDialog::InOn' has a wrong offset!");

// Function TLClient.TLUserWidgetCinematricDialogPanel.HandleStartCinematicDialog
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialog final
{
public:
	class FName                                   InTableRowId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialog) == 0x000004, "Wrong alignment on TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialog");
static_assert(sizeof(TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialog) == 0x000008, "Wrong size on TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialog");
static_assert(offsetof(TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialog, InTableRowId) == 0x000000, "Member 'TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialog::InTableRowId' has a wrong offset!");

// Function TLClient.TLUserWidgetCinematricDialogPanel.HandleStartCinematicDialogChoiceTake
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialogChoiceTake final
{
public:
	struct FTLInfoCinematicDialogSelectList       InTLInfoCinematicDialogSelectList;                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialogChoiceTake) == 0x000008, "Wrong alignment on TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialogChoiceTake");
static_assert(sizeof(TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialogChoiceTake) == 0x000018, "Wrong size on TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialogChoiceTake");
static_assert(offsetof(TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialogChoiceTake, InTLInfoCinematicDialogSelectList) == 0x000000, "Member 'TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialogChoiceTake::InTLInfoCinematicDialogSelectList' has a wrong offset!");

// Function TLClient.TLUserWidgetCinematricDialogPanel.HandleStartCinematicDialogTake
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialogTake final
{
public:
	class FName                                   InCutSceneID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialogTake) == 0x000004, "Wrong alignment on TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialogTake");
static_assert(sizeof(TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialogTake) == 0x000008, "Wrong size on TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialogTake");
static_assert(offsetof(TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialogTake, InCutSceneID) == 0x000000, "Member 'TLUserWidgetCinematricDialogPanel_HandleStartCinematicDialogTake::InCutSceneID' has a wrong offset!");

// Function TLClient.TLUserWidgetEventCalenderWebView.HandleOnWebBrowserClosed
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetEventCalenderWebView_HandleOnWebBrowserClosed final
{
public:
	bool                                          HasError;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMsg;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEventCalenderWebView_HandleOnWebBrowserClosed) == 0x000008, "Wrong alignment on TLUserWidgetEventCalenderWebView_HandleOnWebBrowserClosed");
static_assert(sizeof(TLUserWidgetEventCalenderWebView_HandleOnWebBrowserClosed) == 0x000018, "Wrong size on TLUserWidgetEventCalenderWebView_HandleOnWebBrowserClosed");
static_assert(offsetof(TLUserWidgetEventCalenderWebView_HandleOnWebBrowserClosed, HasError) == 0x000000, "Member 'TLUserWidgetEventCalenderWebView_HandleOnWebBrowserClosed::HasError' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEventCalenderWebView_HandleOnWebBrowserClosed, ErrorMsg) == 0x000008, "Member 'TLUserWidgetEventCalenderWebView_HandleOnWebBrowserClosed::ErrorMsg' has a wrong offset!");

// Function TLClient.TLUserWidgetEventCalenderWebView.OpenWeb
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetEventCalenderWebView_OpenWeb final
{
public:
	class FString                                 InUrl;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEventCalenderWebView_OpenWeb) == 0x000008, "Wrong alignment on TLUserWidgetEventCalenderWebView_OpenWeb");
static_assert(sizeof(TLUserWidgetEventCalenderWebView_OpenWeb) == 0x000010, "Wrong size on TLUserWidgetEventCalenderWebView_OpenWeb");
static_assert(offsetof(TLUserWidgetEventCalenderWebView_OpenWeb, InUrl) == 0x000000, "Member 'TLUserWidgetEventCalenderWebView_OpenWeb::InUrl' has a wrong offset!");

// Function TLClient.TLUserWidgetClock.HandleChangeFixedGameHour
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetClock_HandleChangeFixedGameHour final
{
public:
	bool                                          bFixedGameHour_0;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetClock_HandleChangeFixedGameHour) == 0x000001, "Wrong alignment on TLUserWidgetClock_HandleChangeFixedGameHour");
static_assert(sizeof(TLUserWidgetClock_HandleChangeFixedGameHour) == 0x000001, "Wrong size on TLUserWidgetClock_HandleChangeFixedGameHour");
static_assert(offsetof(TLUserWidgetClock_HandleChangeFixedGameHour, bFixedGameHour_0) == 0x000000, "Member 'TLUserWidgetClock_HandleChangeFixedGameHour::bFixedGameHour_0' has a wrong offset!");

// Function TLClient.TLUserWidgetClock.SetFixedGameHour
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetClock_SetFixedGameHour final
{
public:
	bool                                          bInFixedGameHour;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetClock_SetFixedGameHour) == 0x000001, "Wrong alignment on TLUserWidgetClock_SetFixedGameHour");
static_assert(sizeof(TLUserWidgetClock_SetFixedGameHour) == 0x000001, "Wrong size on TLUserWidgetClock_SetFixedGameHour");
static_assert(offsetof(TLUserWidgetClock_SetFixedGameHour, bInFixedGameHour) == 0x000000, "Member 'TLUserWidgetClock_SetFixedGameHour::bInFixedGameHour' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexCodeBase.OnCodeFocusEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexCodeBase_OnCodeFocusEvent final
{
public:
	bool                                          InbVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexCodeBase_OnCodeFocusEvent) == 0x000001, "Wrong alignment on TLUserWidgetCodexCodeBase_OnCodeFocusEvent");
static_assert(sizeof(TLUserWidgetCodexCodeBase_OnCodeFocusEvent) == 0x000001, "Wrong size on TLUserWidgetCodexCodeBase_OnCodeFocusEvent");
static_assert(offsetof(TLUserWidgetCodexCodeBase_OnCodeFocusEvent, InbVisible) == 0x000000, "Member 'TLUserWidgetCodexCodeBase_OnCodeFocusEvent::InbVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexCodeBase.OnCodeStatusEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexCodeBase_OnCodeStatusEvent final
{
public:
	ETLCodexCommonStatusType                      InCodeStatusType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexCodeBase_OnCodeStatusEvent) == 0x000001, "Wrong alignment on TLUserWidgetCodexCodeBase_OnCodeStatusEvent");
static_assert(sizeof(TLUserWidgetCodexCodeBase_OnCodeStatusEvent) == 0x000001, "Wrong size on TLUserWidgetCodexCodeBase_OnCodeStatusEvent");
static_assert(offsetof(TLUserWidgetCodexCodeBase_OnCodeStatusEvent, InCodeStatusType) == 0x000000, "Member 'TLUserWidgetCodexCodeBase_OnCodeStatusEvent::InCodeStatusType' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexCodeBase.OnDimmedEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexCodeBase_OnDimmedEvent final
{
public:
	bool                                          InbDisable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexCodeBase_OnDimmedEvent) == 0x000001, "Wrong alignment on TLUserWidgetCodexCodeBase_OnDimmedEvent");
static_assert(sizeof(TLUserWidgetCodexCodeBase_OnDimmedEvent) == 0x000001, "Wrong size on TLUserWidgetCodexCodeBase_OnDimmedEvent");
static_assert(offsetof(TLUserWidgetCodexCodeBase_OnDimmedEvent, InbDisable) == 0x000000, "Member 'TLUserWidgetCodexCodeBase_OnDimmedEvent::InbDisable' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexCodeBase.OnRewarableEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexCodeBase_OnRewarableEvent final
{
public:
	bool                                          InbRewardable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexCodeBase_OnRewarableEvent) == 0x000001, "Wrong alignment on TLUserWidgetCodexCodeBase_OnRewarableEvent");
static_assert(sizeof(TLUserWidgetCodexCodeBase_OnRewarableEvent) == 0x000001, "Wrong size on TLUserWidgetCodexCodeBase_OnRewarableEvent");
static_assert(offsetof(TLUserWidgetCodexCodeBase_OnRewarableEvent, InbRewardable) == 0x000000, "Member 'TLUserWidgetCodexCodeBase_OnRewarableEvent::InbRewardable' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexAlarmCode.OnUpdateCategoryType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexAlarmCode_OnUpdateCategoryType final
{
public:
	ECodexCategoryType                            CodexCategoryType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexAlarmCode_OnUpdateCategoryType) == 0x000001, "Wrong alignment on TLUserWidgetCodexAlarmCode_OnUpdateCategoryType");
static_assert(sizeof(TLUserWidgetCodexAlarmCode_OnUpdateCategoryType) == 0x000001, "Wrong size on TLUserWidgetCodexAlarmCode_OnUpdateCategoryType");
static_assert(offsetof(TLUserWidgetCodexAlarmCode_OnUpdateCategoryType, CodexCategoryType) == 0x000000, "Member 'TLUserWidgetCodexAlarmCode_OnUpdateCategoryType::CodexCategoryType' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexAlarmObjective.OnShowObjective
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexAlarmObjective_OnShowObjective final
{
public:
	bool                                          bPlayingPrevComplete;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexAlarmObjective_OnShowObjective) == 0x000001, "Wrong alignment on TLUserWidgetCodexAlarmObjective_OnShowObjective");
static_assert(sizeof(TLUserWidgetCodexAlarmObjective_OnShowObjective) == 0x000001, "Wrong size on TLUserWidgetCodexAlarmObjective_OnShowObjective");
static_assert(offsetof(TLUserWidgetCodexAlarmObjective_OnShowObjective, bPlayingPrevComplete) == 0x000000, "Member 'TLUserWidgetCodexAlarmObjective_OnShowObjective::bPlayingPrevComplete' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexAlarmObjective.OnStateObjectiveAnim
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexAlarmObjective_OnStateObjectiveAnim final
{
public:
	bool                                          bCompleted;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexAlarmObjective_OnStateObjectiveAnim) == 0x000001, "Wrong alignment on TLUserWidgetCodexAlarmObjective_OnStateObjectiveAnim");
static_assert(sizeof(TLUserWidgetCodexAlarmObjective_OnStateObjectiveAnim) == 0x000001, "Wrong size on TLUserWidgetCodexAlarmObjective_OnStateObjectiveAnim");
static_assert(offsetof(TLUserWidgetCodexAlarmObjective_OnStateObjectiveAnim, bCompleted) == 0x000000, "Member 'TLUserWidgetCodexAlarmObjective_OnStateObjectiveAnim::bCompleted' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxContractShareConfirm.OnUpdateSharedInfo
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMsgBoxContractShareConfirm_OnUpdateSharedInfo final
{
public:
	bool                                          InSender;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxContractShareConfirm_OnUpdateSharedInfo) == 0x000001, "Wrong alignment on TLUserWidgetMsgBoxContractShareConfirm_OnUpdateSharedInfo");
static_assert(sizeof(TLUserWidgetMsgBoxContractShareConfirm_OnUpdateSharedInfo) == 0x000001, "Wrong size on TLUserWidgetMsgBoxContractShareConfirm_OnUpdateSharedInfo");
static_assert(offsetof(TLUserWidgetMsgBoxContractShareConfirm_OnUpdateSharedInfo, InSender) == 0x000000, "Member 'TLUserWidgetMsgBoxContractShareConfirm_OnUpdateSharedInfo::InSender' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexChart.OnSelectChart
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexChart_OnSelectChart final
{
public:
	ECodexCategoryType                            InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexChart_OnSelectChart) == 0x000001, "Wrong alignment on TLUserWidgetCodexChart_OnSelectChart");
static_assert(sizeof(TLUserWidgetCodexChart_OnSelectChart) == 0x000001, "Wrong size on TLUserWidgetCodexChart_OnSelectChart");
static_assert(offsetof(TLUserWidgetCodexChart_OnSelectChart, InType) == 0x000000, "Member 'TLUserWidgetCodexChart_OnSelectChart::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexChart.OnUnLockMemorial
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexChart_OnUnLockMemorial final
{
public:
	bool                                          IsUnLock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexChart_OnUnLockMemorial) == 0x000001, "Wrong alignment on TLUserWidgetCodexChart_OnUnLockMemorial");
static_assert(sizeof(TLUserWidgetCodexChart_OnUnLockMemorial) == 0x000001, "Wrong size on TLUserWidgetCodexChart_OnUnLockMemorial");
static_assert(offsetof(TLUserWidgetCodexChart_OnUnLockMemorial, IsUnLock) == 0x000000, "Member 'TLUserWidgetCodexChart_OnUnLockMemorial::IsUnLock' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexDetailObjective.OnStatusEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexDetailObjective_OnStatusEvent final
{
public:
	ETLCodexCommonStatusType                      InStatusType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexDetailObjective_OnStatusEvent) == 0x000001, "Wrong alignment on TLUserWidgetCodexDetailObjective_OnStatusEvent");
static_assert(sizeof(TLUserWidgetCodexDetailObjective_OnStatusEvent) == 0x000001, "Wrong size on TLUserWidgetCodexDetailObjective_OnStatusEvent");
static_assert(offsetof(TLUserWidgetCodexDetailObjective_OnStatusEvent, InStatusType) == 0x000000, "Member 'TLUserWidgetCodexDetailObjective_OnStatusEvent::InStatusType' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexDetailObjective.OnUpdateNextLineEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexDetailObjective_OnUpdateNextLineEvent final
{
public:
	bool                                          InbAttained;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexDetailObjective_OnUpdateNextLineEvent) == 0x000001, "Wrong alignment on TLUserWidgetCodexDetailObjective_OnUpdateNextLineEvent");
static_assert(sizeof(TLUserWidgetCodexDetailObjective_OnUpdateNextLineEvent) == 0x000001, "Wrong size on TLUserWidgetCodexDetailObjective_OnUpdateNextLineEvent");
static_assert(offsetof(TLUserWidgetCodexDetailObjective_OnUpdateNextLineEvent, InbAttained) == 0x000000, "Member 'TLUserWidgetCodexDetailObjective_OnUpdateNextLineEvent::InbAttained' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexDetailObjective.OnUpdatePrevLineEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexDetailObjective_OnUpdatePrevLineEvent final
{
public:
	bool                                          InbAttained;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexDetailObjective_OnUpdatePrevLineEvent) == 0x000001, "Wrong alignment on TLUserWidgetCodexDetailObjective_OnUpdatePrevLineEvent");
static_assert(sizeof(TLUserWidgetCodexDetailObjective_OnUpdatePrevLineEvent) == 0x000001, "Wrong size on TLUserWidgetCodexDetailObjective_OnUpdatePrevLineEvent");
static_assert(offsetof(TLUserWidgetCodexDetailObjective_OnUpdatePrevLineEvent, InbAttained) == 0x000000, "Member 'TLUserWidgetCodexDetailObjective_OnUpdatePrevLineEvent::InbAttained' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexCollectionPage.OnUpdatePageTypeEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexCollectionPage_OnUpdatePageTypeEvent final
{
public:
	ETLCodexCollectionPageType                    PageType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexCollectionPage_OnUpdatePageTypeEvent) == 0x000001, "Wrong alignment on TLUserWidgetCodexCollectionPage_OnUpdatePageTypeEvent");
static_assert(sizeof(TLUserWidgetCodexCollectionPage_OnUpdatePageTypeEvent) == 0x000001, "Wrong size on TLUserWidgetCodexCollectionPage_OnUpdatePageTypeEvent");
static_assert(offsetof(TLUserWidgetCodexCollectionPage_OnUpdatePageTypeEvent, PageType) == 0x000000, "Member 'TLUserWidgetCodexCollectionPage_OnUpdatePageTypeEvent::PageType' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexCollectionPageButton.OnStatusEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexCollectionPageButton_OnStatusEvent final
{
public:
	bool                                          bCollected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexCollectionPageButton_OnStatusEvent) == 0x000001, "Wrong alignment on TLUserWidgetCodexCollectionPageButton_OnStatusEvent");
static_assert(sizeof(TLUserWidgetCodexCollectionPageButton_OnStatusEvent) == 0x000001, "Wrong size on TLUserWidgetCodexCollectionPageButton_OnStatusEvent");
static_assert(offsetof(TLUserWidgetCodexCollectionPageButton_OnStatusEvent, bCollected) == 0x000000, "Member 'TLUserWidgetCodexCollectionPageButton_OnStatusEvent::bCollected' has a wrong offset!");

// Function TLClient.TLUserWidgetFishingGauge.OnChangeDifficulty
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetFishingGauge_OnChangeDifficulty final
{
public:
	ETLFishingDifficultType                       Difficulty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetFishingGauge_OnChangeDifficulty) == 0x000001, "Wrong alignment on TLUserWidgetFishingGauge_OnChangeDifficulty");
static_assert(sizeof(TLUserWidgetFishingGauge_OnChangeDifficulty) == 0x000001, "Wrong size on TLUserWidgetFishingGauge_OnChangeDifficulty");
static_assert(offsetof(TLUserWidgetFishingGauge_OnChangeDifficulty, Difficulty) == 0x000000, "Member 'TLUserWidgetFishingGauge_OnChangeDifficulty::Difficulty' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexCollectionBookDetailPanel.OnCompleteBookEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexCollectionBookDetailPanel_OnCompleteBookEvent final
{
public:
	bool                                          bCollectedComplete;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexCollectionBookDetailPanel_OnCompleteBookEvent) == 0x000001, "Wrong alignment on TLUserWidgetCodexCollectionBookDetailPanel_OnCompleteBookEvent");
static_assert(sizeof(TLUserWidgetCodexCollectionBookDetailPanel_OnCompleteBookEvent) == 0x000001, "Wrong size on TLUserWidgetCodexCollectionBookDetailPanel_OnCompleteBookEvent");
static_assert(offsetof(TLUserWidgetCodexCollectionBookDetailPanel_OnCompleteBookEvent, bCollectedComplete) == 0x000000, "Member 'TLUserWidgetCodexCollectionBookDetailPanel_OnCompleteBookEvent::bCollectedComplete' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexCollectionBookDetailPanel.OnUpdatePageTypeEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexCollectionBookDetailPanel_OnUpdatePageTypeEvent final
{
public:
	ETLCodexCollectionPageType                    PageType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexCollectionBookDetailPanel_OnUpdatePageTypeEvent) == 0x000001, "Wrong alignment on TLUserWidgetCodexCollectionBookDetailPanel_OnUpdatePageTypeEvent");
static_assert(sizeof(TLUserWidgetCodexCollectionBookDetailPanel_OnUpdatePageTypeEvent) == 0x000001, "Wrong size on TLUserWidgetCodexCollectionBookDetailPanel_OnUpdatePageTypeEvent");
static_assert(offsetof(TLUserWidgetCodexCollectionBookDetailPanel_OnUpdatePageTypeEvent, PageType) == 0x000000, "Member 'TLUserWidgetCodexCollectionBookDetailPanel_OnUpdatePageTypeEvent::PageType' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipSetInfo.OnUpdateDescription
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetItemTooltipSetInfo_OnUpdateDescription final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipSetInfo_OnUpdateDescription) == 0x000008, "Wrong alignment on TLUserWidgetItemTooltipSetInfo_OnUpdateDescription");
static_assert(sizeof(TLUserWidgetItemTooltipSetInfo_OnUpdateDescription) == 0x000018, "Wrong size on TLUserWidgetItemTooltipSetInfo_OnUpdateDescription");
static_assert(offsetof(TLUserWidgetItemTooltipSetInfo_OnUpdateDescription, InText) == 0x000000, "Member 'TLUserWidgetItemTooltipSetInfo_OnUpdateDescription::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexGroupRewardDetail.OnGroupRewardUIPlacementEvent
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetCodexGroupRewardDetail_OnGroupRewardUIPlacementEvent final
{
public:
	int32                                         InRewardCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexGroupRewardDetail_OnGroupRewardUIPlacementEvent) == 0x000004, "Wrong alignment on TLUserWidgetCodexGroupRewardDetail_OnGroupRewardUIPlacementEvent");
static_assert(sizeof(TLUserWidgetCodexGroupRewardDetail_OnGroupRewardUIPlacementEvent) == 0x000004, "Wrong size on TLUserWidgetCodexGroupRewardDetail_OnGroupRewardUIPlacementEvent");
static_assert(offsetof(TLUserWidgetCodexGroupRewardDetail_OnGroupRewardUIPlacementEvent, InRewardCount) == 0x000000, "Member 'TLUserWidgetCodexGroupRewardDetail_OnGroupRewardUIPlacementEvent::InRewardCount' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexUnit.HandleCheckedFoldButtonEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexUnit_HandleCheckedFoldButtonEvent final
{
public:
	bool                                          bCheck;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexUnit_HandleCheckedFoldButtonEvent) == 0x000001, "Wrong alignment on TLUserWidgetCodexUnit_HandleCheckedFoldButtonEvent");
static_assert(sizeof(TLUserWidgetCodexUnit_HandleCheckedFoldButtonEvent) == 0x000001, "Wrong size on TLUserWidgetCodexUnit_HandleCheckedFoldButtonEvent");
static_assert(offsetof(TLUserWidgetCodexUnit_HandleCheckedFoldButtonEvent, bCheck) == 0x000000, "Member 'TLUserWidgetCodexUnit_HandleCheckedFoldButtonEvent::bCheck' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexUnit.OnUnLockMemorial
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexUnit_OnUnLockMemorial final
{
public:
	bool                                          IsUnLock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexUnit_OnUnLockMemorial) == 0x000001, "Wrong alignment on TLUserWidgetCodexUnit_OnUnLockMemorial");
static_assert(sizeof(TLUserWidgetCodexUnit_OnUnLockMemorial) == 0x000001, "Wrong size on TLUserWidgetCodexUnit_OnUnLockMemorial");
static_assert(offsetof(TLUserWidgetCodexUnit_OnUnLockMemorial, IsUnLock) == 0x000000, "Member 'TLUserWidgetCodexUnit_OnUnLockMemorial::IsUnLock' has a wrong offset!");

// Function TLClient.TLUserWidgetCodexVoiceRead.OnVoicePlayEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCodexVoiceRead_OnVoicePlayEvent final
{
public:
	bool                                          InImmediatlyPlay;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCodexVoiceRead_OnVoicePlayEvent) == 0x000001, "Wrong alignment on TLUserWidgetCodexVoiceRead_OnVoicePlayEvent");
static_assert(sizeof(TLUserWidgetCodexVoiceRead_OnVoicePlayEvent) == 0x000001, "Wrong size on TLUserWidgetCodexVoiceRead_OnVoicePlayEvent");
static_assert(offsetof(TLUserWidgetCodexVoiceRead_OnVoicePlayEvent, InImmediatlyPlay) == 0x000000, "Member 'TLUserWidgetCodexVoiceRead_OnVoicePlayEvent::InImmediatlyPlay' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildMemberList.HandleOnlineMemberCheckButton
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildMemberList_HandleOnlineMemberCheckButton final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildMemberList_HandleOnlineMemberCheckButton) == 0x000001, "Wrong alignment on TLUserWidgetGuildMemberList_HandleOnlineMemberCheckButton");
static_assert(sizeof(TLUserWidgetGuildMemberList_HandleOnlineMemberCheckButton) == 0x000001, "Wrong size on TLUserWidgetGuildMemberList_HandleOnlineMemberCheckButton");
static_assert(offsetof(TLUserWidgetGuildMemberList_HandleOnlineMemberCheckButton, bIsChecked) == 0x000000, "Member 'TLUserWidgetGuildMemberList_HandleOnlineMemberCheckButton::bIsChecked' has a wrong offset!");

// Function TLClient.TLUserWidgetColorPicker.HandleChangeUIPlatformBP
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetColorPicker_HandleChangeUIPlatformBP final
{
public:
	ETLUIPlatform                                 InUIPlatform;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetColorPicker_HandleChangeUIPlatformBP) == 0x000001, "Wrong alignment on TLUserWidgetColorPicker_HandleChangeUIPlatformBP");
static_assert(sizeof(TLUserWidgetColorPicker_HandleChangeUIPlatformBP) == 0x000001, "Wrong size on TLUserWidgetColorPicker_HandleChangeUIPlatformBP");
static_assert(offsetof(TLUserWidgetColorPicker_HandleChangeUIPlatformBP, InUIPlatform) == 0x000000, "Member 'TLUserWidgetColorPicker_HandleChangeUIPlatformBP::InUIPlatform' has a wrong offset!");

// Function TLClient.TLUserWidgetColorPicker.HandleHueSliderValueChanged
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetColorPicker_HandleHueSliderValueChanged final
{
public:
	float                                         InHue;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetColorPicker_HandleHueSliderValueChanged) == 0x000004, "Wrong alignment on TLUserWidgetColorPicker_HandleHueSliderValueChanged");
static_assert(sizeof(TLUserWidgetColorPicker_HandleHueSliderValueChanged) == 0x000004, "Wrong size on TLUserWidgetColorPicker_HandleHueSliderValueChanged");
static_assert(offsetof(TLUserWidgetColorPicker_HandleHueSliderValueChanged, InHue) == 0x000000, "Member 'TLUserWidgetColorPicker_HandleHueSliderValueChanged::InHue' has a wrong offset!");

// Function TLClient.TLUserWidgetColorPicker.HandleSVSliderValueChanged
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetColorPicker_HandleSVSliderValueChanged final
{
public:
	struct FVector2D                              InValue;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetColorPicker_HandleSVSliderValueChanged) == 0x000004, "Wrong alignment on TLUserWidgetColorPicker_HandleSVSliderValueChanged");
static_assert(sizeof(TLUserWidgetColorPicker_HandleSVSliderValueChanged) == 0x000008, "Wrong size on TLUserWidgetColorPicker_HandleSVSliderValueChanged");
static_assert(offsetof(TLUserWidgetColorPicker_HandleSVSliderValueChanged, InValue) == 0x000000, "Member 'TLUserWidgetColorPicker_HandleSVSliderValueChanged::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetColorPicker.HandleTextFocusLost
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetColorPicker_HandleTextFocusLost final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetColorPicker_HandleTextFocusLost) == 0x000004, "Wrong alignment on TLUserWidgetColorPicker_HandleTextFocusLost");
static_assert(sizeof(TLUserWidgetColorPicker_HandleTextFocusLost) == 0x000008, "Wrong size on TLUserWidgetColorPicker_HandleTextFocusLost");
static_assert(offsetof(TLUserWidgetColorPicker_HandleTextFocusLost, InFocusEvent) == 0x000000, "Member 'TLUserWidgetColorPicker_HandleTextFocusLost::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetColorPicker.OnChangeFocusArea
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetColorPicker_OnChangeFocusArea final
{
public:
	EColorPickerFocusArea                         InArea;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetColorPicker_OnChangeFocusArea) == 0x000001, "Wrong alignment on TLUserWidgetColorPicker_OnChangeFocusArea");
static_assert(sizeof(TLUserWidgetColorPicker_OnChangeFocusArea) == 0x000001, "Wrong size on TLUserWidgetColorPicker_OnChangeFocusArea");
static_assert(offsetof(TLUserWidgetColorPicker_OnChangeFocusArea, InArea) == 0x000000, "Member 'TLUserWidgetColorPicker_OnChangeFocusArea::InArea' has a wrong offset!");

// Function TLClient.TLUserWidgetColorPicker.OnClickedReset
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetColorPicker_OnClickedReset final
{
public:
	bool                                          bCheck;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetColorPicker_OnClickedReset) == 0x000001, "Wrong alignment on TLUserWidgetColorPicker_OnClickedReset");
static_assert(sizeof(TLUserWidgetColorPicker_OnClickedReset) == 0x000001, "Wrong size on TLUserWidgetColorPicker_OnClickedReset");
static_assert(offsetof(TLUserWidgetColorPicker_OnClickedReset, bCheck) == 0x000000, "Member 'TLUserWidgetColorPicker_OnClickedReset::bCheck' has a wrong offset!");

// Function TLClient.TLUserWidgetColorPicker.OnInputFocusReceived
// 0x0040 (0x0040 - 0x0000)
struct TLUserWidgetColorPicker_OnInputFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetColorPicker_OnInputFocusReceived) == 0x000004, "Wrong alignment on TLUserWidgetColorPicker_OnInputFocusReceived");
static_assert(sizeof(TLUserWidgetColorPicker_OnInputFocusReceived) == 0x000040, "Wrong size on TLUserWidgetColorPicker_OnInputFocusReceived");
static_assert(offsetof(TLUserWidgetColorPicker_OnInputFocusReceived, MyGeometry) == 0x000000, "Member 'TLUserWidgetColorPicker_OnInputFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLUserWidgetColorPicker_OnInputFocusReceived, InFocusEvent) == 0x000038, "Member 'TLUserWidgetColorPicker_OnInputFocusReceived::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetColorPicker.OnInputTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetColorPicker_OnInputTextChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetColorPicker_OnInputTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetColorPicker_OnInputTextChanged");
static_assert(sizeof(TLUserWidgetColorPicker_OnInputTextChanged) == 0x000018, "Wrong size on TLUserWidgetColorPicker_OnInputTextChanged");
static_assert(offsetof(TLUserWidgetColorPicker_OnInputTextChanged, InInputText) == 0x000000, "Member 'TLUserWidgetColorPicker_OnInputTextChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetColorPicker.OnInputTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetColorPicker_OnInputTextCommitted final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetColorPicker_OnInputTextCommitted) == 0x000008, "Wrong alignment on TLUserWidgetColorPicker_OnInputTextCommitted");
static_assert(sizeof(TLUserWidgetColorPicker_OnInputTextCommitted) == 0x000020, "Wrong size on TLUserWidgetColorPicker_OnInputTextCommitted");
static_assert(offsetof(TLUserWidgetColorPicker_OnInputTextCommitted, InInputText) == 0x000000, "Member 'TLUserWidgetColorPicker_OnInputTextCommitted::InInputText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetColorPicker_OnInputTextCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetColorPicker_OnInputTextCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetColorPicker.GetHSV
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetColorPicker_GetHSV final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetColorPicker_GetHSV) == 0x000004, "Wrong alignment on TLUserWidgetColorPicker_GetHSV");
static_assert(sizeof(TLUserWidgetColorPicker_GetHSV) == 0x000010, "Wrong size on TLUserWidgetColorPicker_GetHSV");
static_assert(offsetof(TLUserWidgetColorPicker_GetHSV, ReturnValue) == 0x000000, "Member 'TLUserWidgetColorPicker_GetHSV::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetColorPicker.ToFColor
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetColorPicker_ToFColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetColorPicker_ToFColor) == 0x000004, "Wrong alignment on TLUserWidgetColorPicker_ToFColor");
static_assert(sizeof(TLUserWidgetColorPicker_ToFColor) == 0x000004, "Wrong size on TLUserWidgetColorPicker_ToFColor");
static_assert(offsetof(TLUserWidgetColorPicker_ToFColor, ReturnValue) == 0x000000, "Member 'TLUserWidgetColorPicker_ToFColor::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetColorPicker.ToHex
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetColorPicker_ToHex final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetColorPicker_ToHex) == 0x000008, "Wrong alignment on TLUserWidgetColorPicker_ToHex");
static_assert(sizeof(TLUserWidgetColorPicker_ToHex) == 0x000010, "Wrong size on TLUserWidgetColorPicker_ToHex");
static_assert(offsetof(TLUserWidgetColorPicker_ToHex, ReturnValue) == 0x000000, "Member 'TLUserWidgetColorPicker_ToHex::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetColorPicker.ToLinearRGB
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetColorPicker_ToLinearRGB final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetColorPicker_ToLinearRGB) == 0x000004, "Wrong alignment on TLUserWidgetColorPicker_ToLinearRGB");
static_assert(sizeof(TLUserWidgetColorPicker_ToLinearRGB) == 0x000010, "Wrong size on TLUserWidgetColorPicker_ToLinearRGB");
static_assert(offsetof(TLUserWidgetColorPicker_ToLinearRGB, ReturnValue) == 0x000000, "Member 'TLUserWidgetColorPicker_ToLinearRGB::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetCombatControl.OnCombatControlContentsOpenUpdated
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCombatControl_OnCombatControlContentsOpenUpdated final
{
public:
	bool                                          bContentsOpenPolymorph;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCombatControl_OnCombatControlContentsOpenUpdated) == 0x000001, "Wrong alignment on TLUserWidgetCombatControl_OnCombatControlContentsOpenUpdated");
static_assert(sizeof(TLUserWidgetCombatControl_OnCombatControlContentsOpenUpdated) == 0x000001, "Wrong size on TLUserWidgetCombatControl_OnCombatControlContentsOpenUpdated");
static_assert(offsetof(TLUserWidgetCombatControl_OnCombatControlContentsOpenUpdated, bContentsOpenPolymorph) == 0x000000, "Member 'TLUserWidgetCombatControl_OnCombatControlContentsOpenUpdated::bContentsOpenPolymorph' has a wrong offset!");

// Function TLClient.TLUserWidgetCombatPolymorphAwakeningPanel.OnGrowUpCompleted
// 0x0050 (0x0050 - 0x0000)
struct TLUserWidgetCombatPolymorphAwakeningPanel_OnGrowUpCompleted final
{
public:
	struct FTLGrowthPendingData                   InGrowthPendingData;                               // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCombatPolymorphAwakeningPanel_OnGrowUpCompleted) == 0x000008, "Wrong alignment on TLUserWidgetCombatPolymorphAwakeningPanel_OnGrowUpCompleted");
static_assert(sizeof(TLUserWidgetCombatPolymorphAwakeningPanel_OnGrowUpCompleted) == 0x000050, "Wrong size on TLUserWidgetCombatPolymorphAwakeningPanel_OnGrowUpCompleted");
static_assert(offsetof(TLUserWidgetCombatPolymorphAwakeningPanel_OnGrowUpCompleted, InGrowthPendingData) == 0x000000, "Member 'TLUserWidgetCombatPolymorphAwakeningPanel_OnGrowUpCompleted::InGrowthPendingData' has a wrong offset!");

// Function TLClient.TLUserWidgetCombatPolymorphAwakeningPanel.OnLevelChanged
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetCombatPolymorphAwakeningPanel_OnLevelChanged final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxLevel;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCombatPolymorphAwakeningPanel_OnLevelChanged) == 0x000004, "Wrong alignment on TLUserWidgetCombatPolymorphAwakeningPanel_OnLevelChanged");
static_assert(sizeof(TLUserWidgetCombatPolymorphAwakeningPanel_OnLevelChanged) == 0x000008, "Wrong size on TLUserWidgetCombatPolymorphAwakeningPanel_OnLevelChanged");
static_assert(offsetof(TLUserWidgetCombatPolymorphAwakeningPanel_OnLevelChanged, InLevel) == 0x000000, "Member 'TLUserWidgetCombatPolymorphAwakeningPanel_OnLevelChanged::InLevel' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCombatPolymorphAwakeningPanel_OnLevelChanged, InMaxLevel) == 0x000004, "Member 'TLUserWidgetCombatPolymorphAwakeningPanel_OnLevelChanged::InMaxLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetCombatPolymorphAwakeningPanel.OnLevelupReady
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCombatPolymorphAwakeningPanel_OnLevelupReady final
{
public:
	bool                                          bReady;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCombatPolymorphAwakeningPanel_OnLevelupReady) == 0x000001, "Wrong alignment on TLUserWidgetCombatPolymorphAwakeningPanel_OnLevelupReady");
static_assert(sizeof(TLUserWidgetCombatPolymorphAwakeningPanel_OnLevelupReady) == 0x000001, "Wrong size on TLUserWidgetCombatPolymorphAwakeningPanel_OnLevelupReady");
static_assert(offsetof(TLUserWidgetCombatPolymorphAwakeningPanel_OnLevelupReady, bReady) == 0x000000, "Member 'TLUserWidgetCombatPolymorphAwakeningPanel_OnLevelupReady::bReady' has a wrong offset!");

// Function TLClient.TLUserWidgetCombatPolymorphAwakeningPanel.OnPointChanged
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetCombatPolymorphAwakeningPanel_OnPointChanged final
{
public:
	int32                                         InChancePoint;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InExpPoint;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCombatPolymorphAwakeningPanel_OnPointChanged) == 0x000004, "Wrong alignment on TLUserWidgetCombatPolymorphAwakeningPanel_OnPointChanged");
static_assert(sizeof(TLUserWidgetCombatPolymorphAwakeningPanel_OnPointChanged) == 0x000008, "Wrong size on TLUserWidgetCombatPolymorphAwakeningPanel_OnPointChanged");
static_assert(offsetof(TLUserWidgetCombatPolymorphAwakeningPanel_OnPointChanged, InChancePoint) == 0x000000, "Member 'TLUserWidgetCombatPolymorphAwakeningPanel_OnPointChanged::InChancePoint' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCombatPolymorphAwakeningPanel_OnPointChanged, InExpPoint) == 0x000004, "Member 'TLUserWidgetCombatPolymorphAwakeningPanel_OnPointChanged::InExpPoint' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildBenefitSlot.OnSelectBenefitGuild
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildBenefitSlot_OnSelectBenefitGuild final
{
public:
	bool                                          IsSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildBenefitSlot_OnSelectBenefitGuild) == 0x000001, "Wrong alignment on TLUserWidgetGuildBenefitSlot_OnSelectBenefitGuild");
static_assert(sizeof(TLUserWidgetGuildBenefitSlot_OnSelectBenefitGuild) == 0x000001, "Wrong size on TLUserWidgetGuildBenefitSlot_OnSelectBenefitGuild");
static_assert(offsetof(TLUserWidgetGuildBenefitSlot_OnSelectBenefitGuild, IsSelected) == 0x000000, "Member 'TLUserWidgetGuildBenefitSlot_OnSelectBenefitGuild::IsSelected' has a wrong offset!");

// Function TLClient.TLUserWidgetCombatPolymorphListPanel.SetAwakeningPanel
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetCombatPolymorphListPanel_SetAwakeningPanel final
{
public:
	class UTLUserWidgetCombatPolymorphAwakeningPanel* InAwakeningPanel;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCombatPolymorphListPanel_SetAwakeningPanel) == 0x000008, "Wrong alignment on TLUserWidgetCombatPolymorphListPanel_SetAwakeningPanel");
static_assert(sizeof(TLUserWidgetCombatPolymorphListPanel_SetAwakeningPanel) == 0x000008, "Wrong size on TLUserWidgetCombatPolymorphListPanel_SetAwakeningPanel");
static_assert(offsetof(TLUserWidgetCombatPolymorphListPanel_SetAwakeningPanel, InAwakeningPanel) == 0x000000, "Member 'TLUserWidgetCombatPolymorphListPanel_SetAwakeningPanel::InAwakeningPanel' has a wrong offset!");

// Function TLClient.TLUserWidgetCombatPresetRename.HandleInputTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetCombatPresetRename_HandleInputTextChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCombatPresetRename_HandleInputTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetCombatPresetRename_HandleInputTextChanged");
static_assert(sizeof(TLUserWidgetCombatPresetRename_HandleInputTextChanged) == 0x000018, "Wrong size on TLUserWidgetCombatPresetRename_HandleInputTextChanged");
static_assert(offsetof(TLUserWidgetCombatPresetRename_HandleInputTextChanged, InText) == 0x000000, "Member 'TLUserWidgetCombatPresetRename_HandleInputTextChanged::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetCombatPresetRename.HandleInputTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetCombatPresetRename_HandleInputTextCommitted final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetCombatPresetRename_HandleInputTextCommitted) == 0x000008, "Wrong alignment on TLUserWidgetCombatPresetRename_HandleInputTextCommitted");
static_assert(sizeof(TLUserWidgetCombatPresetRename_HandleInputTextCommitted) == 0x000020, "Wrong size on TLUserWidgetCombatPresetRename_HandleInputTextCommitted");
static_assert(offsetof(TLUserWidgetCombatPresetRename_HandleInputTextCommitted, InInputText) == 0x000000, "Member 'TLUserWidgetCombatPresetRename_HandleInputTextCommitted::InInputText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCombatPresetRename_HandleInputTextCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetCombatPresetRename_HandleInputTextCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetCombatPresetRename.HandleOnTextFocusLost
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetCombatPresetRename_HandleOnTextFocusLost final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCombatPresetRename_HandleOnTextFocusLost) == 0x000004, "Wrong alignment on TLUserWidgetCombatPresetRename_HandleOnTextFocusLost");
static_assert(sizeof(TLUserWidgetCombatPresetRename_HandleOnTextFocusLost) == 0x000008, "Wrong size on TLUserWidgetCombatPresetRename_HandleOnTextFocusLost");
static_assert(offsetof(TLUserWidgetCombatPresetRename_HandleOnTextFocusLost, InFocusEvent) == 0x000000, "Member 'TLUserWidgetCombatPresetRename_HandleOnTextFocusLost::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleAnalogCursor.OnChangeCursorType
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetConsoleAnalogCursor_OnChangeCursorType final
{
public:
	ETLCursorType                                 OldCursorType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLCursorType                                 NewCursorType;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleAnalogCursor_OnChangeCursorType) == 0x000001, "Wrong alignment on TLUserWidgetConsoleAnalogCursor_OnChangeCursorType");
static_assert(sizeof(TLUserWidgetConsoleAnalogCursor_OnChangeCursorType) == 0x000002, "Wrong size on TLUserWidgetConsoleAnalogCursor_OnChangeCursorType");
static_assert(offsetof(TLUserWidgetConsoleAnalogCursor_OnChangeCursorType, OldCursorType) == 0x000000, "Member 'TLUserWidgetConsoleAnalogCursor_OnChangeCursorType::OldCursorType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetConsoleAnalogCursor_OnChangeCursorType, NewCursorType) == 0x000001, "Member 'TLUserWidgetConsoleAnalogCursor_OnChangeCursorType::NewCursorType' has a wrong offset!");

// Function TLClient.TLUserWidgetMemorialBoard.HandleMinimizeButtonOnCheck
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMemorialBoard_HandleMinimizeButtonOnCheck final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMemorialBoard_HandleMinimizeButtonOnCheck) == 0x000001, "Wrong alignment on TLUserWidgetMemorialBoard_HandleMinimizeButtonOnCheck");
static_assert(sizeof(TLUserWidgetMemorialBoard_HandleMinimizeButtonOnCheck) == 0x000001, "Wrong size on TLUserWidgetMemorialBoard_HandleMinimizeButtonOnCheck");
static_assert(offsetof(TLUserWidgetMemorialBoard_HandleMinimizeButtonOnCheck, bIsChecked) == 0x000000, "Member 'TLUserWidgetMemorialBoard_HandleMinimizeButtonOnCheck::bIsChecked' has a wrong offset!");

// Function TLClient.TLUserWidgetMemorialBoard.OnMinimizeEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMemorialBoard_OnMinimizeEvent final
{
public:
	bool                                          bMinimize;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMemorialBoard_OnMinimizeEvent) == 0x000001, "Wrong alignment on TLUserWidgetMemorialBoard_OnMinimizeEvent");
static_assert(sizeof(TLUserWidgetMemorialBoard_OnMinimizeEvent) == 0x000001, "Wrong size on TLUserWidgetMemorialBoard_OnMinimizeEvent");
static_assert(offsetof(TLUserWidgetMemorialBoard_OnMinimizeEvent, bMinimize) == 0x000000, "Member 'TLUserWidgetMemorialBoard_OnMinimizeEvent::bMinimize' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleEventPopupHolder.OnEventHolderMinimization
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetConsoleEventPopupHolder_OnEventHolderMinimization final
{
public:
	bool                                          bInEventHolderMinimization;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleEventPopupHolder_OnEventHolderMinimization) == 0x000001, "Wrong alignment on TLUserWidgetConsoleEventPopupHolder_OnEventHolderMinimization");
static_assert(sizeof(TLUserWidgetConsoleEventPopupHolder_OnEventHolderMinimization) == 0x000001, "Wrong size on TLUserWidgetConsoleEventPopupHolder_OnEventHolderMinimization");
static_assert(offsetof(TLUserWidgetConsoleEventPopupHolder_OnEventHolderMinimization, bInEventHolderMinimization) == 0x000000, "Member 'TLUserWidgetConsoleEventPopupHolder_OnEventHolderMinimization::bInEventHolderMinimization' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailHistory.OnDistributionState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildDistributionDetailHistory_OnDistributionState final
{
public:
	EGuildDistributionStateType                   InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailHistory_OnDistributionState) == 0x000001, "Wrong alignment on TLUserWidgetGuildDistributionDetailHistory_OnDistributionState");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailHistory_OnDistributionState) == 0x000001, "Wrong size on TLUserWidgetGuildDistributionDetailHistory_OnDistributionState");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailHistory_OnDistributionState, InState) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailHistory_OnDistributionState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailHistory.OnItemSlotUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildDistributionDetailHistory_OnItemSlotUpdate final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailHistory_OnItemSlotUpdate) == 0x000001, "Wrong alignment on TLUserWidgetGuildDistributionDetailHistory_OnItemSlotUpdate");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailHistory_OnItemSlotUpdate) == 0x000001, "Wrong size on TLUserWidgetGuildDistributionDetailHistory_OnItemSlotUpdate");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailHistory_OnItemSlotUpdate, InIsShow) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailHistory_OnItemSlotUpdate::InIsShow' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleFaceButtonQuickSlotGroup.OnChangeActivateMode
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnChangeActivateMode final
{
public:
	ETLConsoleGroupActivateMode                   InOld;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLConsoleGroupActivateMode                   InNew;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnChangeActivateMode) == 0x000001, "Wrong alignment on TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnChangeActivateMode");
static_assert(sizeof(TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnChangeActivateMode) == 0x000002, "Wrong size on TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnChangeActivateMode");
static_assert(offsetof(TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnChangeActivateMode, InOld) == 0x000000, "Member 'TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnChangeActivateMode::InOld' has a wrong offset!");
static_assert(offsetof(TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnChangeActivateMode, InNew) == 0x000001, "Member 'TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnChangeActivateMode::InNew' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleFaceButtonQuickSlotGroup.OnInitActivateMode
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnInitActivateMode final
{
public:
	ETLConsoleGroupActivateMode                   InNew;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnInitActivateMode) == 0x000001, "Wrong alignment on TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnInitActivateMode");
static_assert(sizeof(TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnInitActivateMode) == 0x000001, "Wrong size on TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnInitActivateMode");
static_assert(offsetof(TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnInitActivateMode, InNew) == 0x000000, "Member 'TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnInitActivateMode::InNew' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleFaceButtonQuickSlotGroup.OnOtherGroupActivated
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnOtherGroupActivated final
{
public:
	bool                                          OtherGroupActivated;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnOtherGroupActivated) == 0x000001, "Wrong alignment on TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnOtherGroupActivated");
static_assert(sizeof(TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnOtherGroupActivated) == 0x000001, "Wrong size on TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnOtherGroupActivated");
static_assert(offsetof(TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnOtherGroupActivated, OtherGroupActivated) == 0x000000, "Member 'TLUserWidgetConsoleFaceButtonQuickSlotGroup_OnOtherGroupActivated::OtherGroupActivated' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleFaceButtonQuickSlotGroup.IsActivate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetConsoleFaceButtonQuickSlotGroup_IsActivate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleFaceButtonQuickSlotGroup_IsActivate) == 0x000001, "Wrong alignment on TLUserWidgetConsoleFaceButtonQuickSlotGroup_IsActivate");
static_assert(sizeof(TLUserWidgetConsoleFaceButtonQuickSlotGroup_IsActivate) == 0x000001, "Wrong size on TLUserWidgetConsoleFaceButtonQuickSlotGroup_IsActivate");
static_assert(offsetof(TLUserWidgetConsoleFaceButtonQuickSlotGroup_IsActivate, ReturnValue) == 0x000000, "Member 'TLUserWidgetConsoleFaceButtonQuickSlotGroup_IsActivate::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleFaceButtonQuickSlotGroup.IsAlwaysActivate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetConsoleFaceButtonQuickSlotGroup_IsAlwaysActivate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleFaceButtonQuickSlotGroup_IsAlwaysActivate) == 0x000001, "Wrong alignment on TLUserWidgetConsoleFaceButtonQuickSlotGroup_IsAlwaysActivate");
static_assert(sizeof(TLUserWidgetConsoleFaceButtonQuickSlotGroup_IsAlwaysActivate) == 0x000001, "Wrong size on TLUserWidgetConsoleFaceButtonQuickSlotGroup_IsAlwaysActivate");
static_assert(offsetof(TLUserWidgetConsoleFaceButtonQuickSlotGroup_IsAlwaysActivate, ReturnValue) == 0x000000, "Member 'TLUserWidgetConsoleFaceButtonQuickSlotGroup_IsAlwaysActivate::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetMagicDollExpeditionDollIcon.OnUpdateIconState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMagicDollExpeditionDollIcon_OnUpdateIconState final
{
public:
	ETLExpeditionDollIconState                    State;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMagicDollExpeditionDollIcon_OnUpdateIconState) == 0x000001, "Wrong alignment on TLUserWidgetMagicDollExpeditionDollIcon_OnUpdateIconState");
static_assert(sizeof(TLUserWidgetMagicDollExpeditionDollIcon_OnUpdateIconState) == 0x000001, "Wrong size on TLUserWidgetMagicDollExpeditionDollIcon_OnUpdateIconState");
static_assert(offsetof(TLUserWidgetMagicDollExpeditionDollIcon_OnUpdateIconState, State) == 0x000000, "Member 'TLUserWidgetMagicDollExpeditionDollIcon_OnUpdateIconState::State' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconOccupationBattleInfo.OnShowState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconOccupationBattleInfo_OnShowState final
{
public:
	EBattleInfoShowState                          InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconOccupationBattleInfo_OnShowState) == 0x000001, "Wrong alignment on TLUserWidgetMapIconOccupationBattleInfo_OnShowState");
static_assert(sizeof(TLUserWidgetMapIconOccupationBattleInfo_OnShowState) == 0x000001, "Wrong size on TLUserWidgetMapIconOccupationBattleInfo_OnShowState");
static_assert(offsetof(TLUserWidgetMapIconOccupationBattleInfo_OnShowState, InState) == 0x000000, "Member 'TLUserWidgetMapIconOccupationBattleInfo_OnShowState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetFixQuickSlotGroup.OnContentsOpen
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetFixQuickSlotGroup_OnContentsOpen final
{
public:
	bool                                          InbOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetFixQuickSlotGroup_OnContentsOpen) == 0x000001, "Wrong alignment on TLUserWidgetFixQuickSlotGroup_OnContentsOpen");
static_assert(sizeof(TLUserWidgetFixQuickSlotGroup_OnContentsOpen) == 0x000001, "Wrong size on TLUserWidgetFixQuickSlotGroup_OnContentsOpen");
static_assert(offsetof(TLUserWidgetFixQuickSlotGroup_OnContentsOpen, InbOpen) == 0x000000, "Member 'TLUserWidgetFixQuickSlotGroup_OnContentsOpen::InbOpen' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleFixQuickSlotGroup.OnUpdateCurrentSlotIndex
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetConsoleFixQuickSlotGroup_OnUpdateCurrentSlotIndex final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInChangingSlotReverse;                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetConsoleFixQuickSlotGroup_OnUpdateCurrentSlotIndex) == 0x000004, "Wrong alignment on TLUserWidgetConsoleFixQuickSlotGroup_OnUpdateCurrentSlotIndex");
static_assert(sizeof(TLUserWidgetConsoleFixQuickSlotGroup_OnUpdateCurrentSlotIndex) == 0x000008, "Wrong size on TLUserWidgetConsoleFixQuickSlotGroup_OnUpdateCurrentSlotIndex");
static_assert(offsetof(TLUserWidgetConsoleFixQuickSlotGroup_OnUpdateCurrentSlotIndex, InSlotIndex) == 0x000000, "Member 'TLUserWidgetConsoleFixQuickSlotGroup_OnUpdateCurrentSlotIndex::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TLUserWidgetConsoleFixQuickSlotGroup_OnUpdateCurrentSlotIndex, bInChangingSlotReverse) == 0x000004, "Member 'TLUserWidgetConsoleFixQuickSlotGroup_OnUpdateCurrentSlotIndex::bInChangingSlotReverse' has a wrong offset!");

// Function TLClient.TLUserWidgetHud.OnAttackerShow
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetHud_OnAttackerShow final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InAttackerNum;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetHud_OnAttackerShow) == 0x000004, "Wrong alignment on TLUserWidgetHud_OnAttackerShow");
static_assert(sizeof(TLUserWidgetHud_OnAttackerShow) == 0x000008, "Wrong size on TLUserWidgetHud_OnAttackerShow");
static_assert(offsetof(TLUserWidgetHud_OnAttackerShow, InShow) == 0x000000, "Member 'TLUserWidgetHud_OnAttackerShow::InShow' has a wrong offset!");
static_assert(offsetof(TLUserWidgetHud_OnAttackerShow, InAttackerNum) == 0x000004, "Member 'TLUserWidgetHud_OnAttackerShow::InAttackerNum' has a wrong offset!");

// Function TLClient.TLUserWidgetHud.OnChangeMapModeType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetHud_OnChangeMapModeType final
{
public:
	ETLMapModeType                                InMapModeType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetHud_OnChangeMapModeType) == 0x000001, "Wrong alignment on TLUserWidgetHud_OnChangeMapModeType");
static_assert(sizeof(TLUserWidgetHud_OnChangeMapModeType) == 0x000001, "Wrong size on TLUserWidgetHud_OnChangeMapModeType");
static_assert(offsetof(TLUserWidgetHud_OnChangeMapModeType, InMapModeType) == 0x000000, "Member 'TLUserWidgetHud_OnChangeMapModeType::InMapModeType' has a wrong offset!");

// Function TLClient.TLUserWidgetHud.OnLevelCapStateChanged
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetHud_OnLevelCapStateChanged final
{
public:
	bool                                          InLevelCapState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetHud_OnLevelCapStateChanged) == 0x000001, "Wrong alignment on TLUserWidgetHud_OnLevelCapStateChanged");
static_assert(sizeof(TLUserWidgetHud_OnLevelCapStateChanged) == 0x000001, "Wrong size on TLUserWidgetHud_OnLevelCapStateChanged");
static_assert(offsetof(TLUserWidgetHud_OnLevelCapStateChanged, InLevelCapState) == 0x000000, "Member 'TLUserWidgetHud_OnLevelCapStateChanged::InLevelCapState' has a wrong offset!");

// Function TLClient.TLUserWidgetHud.OnMainHandEquipChange
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetHud_OnMainHandEquipChange final
{
public:
	EItemCategory                                 InItemCategory;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInInit;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetHud_OnMainHandEquipChange) == 0x000001, "Wrong alignment on TLUserWidgetHud_OnMainHandEquipChange");
static_assert(sizeof(TLUserWidgetHud_OnMainHandEquipChange) == 0x000002, "Wrong size on TLUserWidgetHud_OnMainHandEquipChange");
static_assert(offsetof(TLUserWidgetHud_OnMainHandEquipChange, InItemCategory) == 0x000000, "Member 'TLUserWidgetHud_OnMainHandEquipChange::InItemCategory' has a wrong offset!");
static_assert(offsetof(TLUserWidgetHud_OnMainHandEquipChange, bIsInInit) == 0x000001, "Member 'TLUserWidgetHud_OnMainHandEquipChange::bIsInInit' has a wrong offset!");

// Function TLClient.TLUserWidgetHud.OnPvpModeChanged
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetHud_OnPvpModeChanged final
{
public:
	bool                                          InOnPvpMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetHud_OnPvpModeChanged) == 0x000001, "Wrong alignment on TLUserWidgetHud_OnPvpModeChanged");
static_assert(sizeof(TLUserWidgetHud_OnPvpModeChanged) == 0x000001, "Wrong size on TLUserWidgetHud_OnPvpModeChanged");
static_assert(offsetof(TLUserWidgetHud_OnPvpModeChanged, InOnPvpMode) == 0x000000, "Member 'TLUserWidgetHud_OnPvpModeChanged::InOnPvpMode' has a wrong offset!");

// Function TLClient.TLUserWidgetHud.OnUpdateMovePolymorphQuickSlot
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetHud_OnUpdateMovePolymorphQuickSlot final
{
public:
	class UTLUserWidgetSkillQuickSlot*            SkillSlotWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetHud_OnUpdateMovePolymorphQuickSlot) == 0x000008, "Wrong alignment on TLUserWidgetHud_OnUpdateMovePolymorphQuickSlot");
static_assert(sizeof(TLUserWidgetHud_OnUpdateMovePolymorphQuickSlot) == 0x000008, "Wrong size on TLUserWidgetHud_OnUpdateMovePolymorphQuickSlot");
static_assert(offsetof(TLUserWidgetHud_OnUpdateMovePolymorphQuickSlot, SkillSlotWidget) == 0x000000, "Member 'TLUserWidgetHud_OnUpdateMovePolymorphQuickSlot::SkillSlotWidget' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleHud.OnDpadRightIsRingMenu
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetConsoleHud_OnDpadRightIsRingMenu final
{
public:
	bool                                          bRingMenu;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleHud_OnDpadRightIsRingMenu) == 0x000001, "Wrong alignment on TLUserWidgetConsoleHud_OnDpadRightIsRingMenu");
static_assert(sizeof(TLUserWidgetConsoleHud_OnDpadRightIsRingMenu) == 0x000001, "Wrong size on TLUserWidgetConsoleHud_OnDpadRightIsRingMenu");
static_assert(offsetof(TLUserWidgetConsoleHud_OnDpadRightIsRingMenu, bRingMenu) == 0x000000, "Member 'TLUserWidgetConsoleHud_OnDpadRightIsRingMenu::bRingMenu' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleHud.OnShowAmmoListEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetConsoleHud_OnShowAmmoListEvent final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleHud_OnShowAmmoListEvent) == 0x000001, "Wrong alignment on TLUserWidgetConsoleHud_OnShowAmmoListEvent");
static_assert(sizeof(TLUserWidgetConsoleHud_OnShowAmmoListEvent) == 0x000001, "Wrong size on TLUserWidgetConsoleHud_OnShowAmmoListEvent");
static_assert(offsetof(TLUserWidgetConsoleHud_OnShowAmmoListEvent, bShow) == 0x000000, "Member 'TLUserWidgetConsoleHud_OnShowAmmoListEvent::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleHud.OnShowKeyGuide
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetConsoleHud_OnShowKeyGuide final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleHud_OnShowKeyGuide) == 0x000001, "Wrong alignment on TLUserWidgetConsoleHud_OnShowKeyGuide");
static_assert(sizeof(TLUserWidgetConsoleHud_OnShowKeyGuide) == 0x000001, "Wrong size on TLUserWidgetConsoleHud_OnShowKeyGuide");
static_assert(offsetof(TLUserWidgetConsoleHud_OnShowKeyGuide, bShow) == 0x000000, "Member 'TLUserWidgetConsoleHud_OnShowKeyGuide::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleHud.OnShowRingMenuEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetConsoleHud_OnShowRingMenuEvent final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleHud_OnShowRingMenuEvent) == 0x000001, "Wrong alignment on TLUserWidgetConsoleHud_OnShowRingMenuEvent");
static_assert(sizeof(TLUserWidgetConsoleHud_OnShowRingMenuEvent) == 0x000001, "Wrong size on TLUserWidgetConsoleHud_OnShowRingMenuEvent");
static_assert(offsetof(TLUserWidgetConsoleHud_OnShowRingMenuEvent, bShow) == 0x000000, "Member 'TLUserWidgetConsoleHud_OnShowRingMenuEvent::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleHud.OnShowTargetPriorityEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetConsoleHud_OnShowTargetPriorityEvent final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleHud_OnShowTargetPriorityEvent) == 0x000001, "Wrong alignment on TLUserWidgetConsoleHud_OnShowTargetPriorityEvent");
static_assert(sizeof(TLUserWidgetConsoleHud_OnShowTargetPriorityEvent) == 0x000001, "Wrong size on TLUserWidgetConsoleHud_OnShowTargetPriorityEvent");
static_assert(offsetof(TLUserWidgetConsoleHud_OnShowTargetPriorityEvent, bShow) == 0x000000, "Member 'TLUserWidgetConsoleHud_OnShowTargetPriorityEvent::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleHud.SetTargetScan
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetConsoleHud_SetTargetScan final
{
public:
	class UTLUserWidgetConsoleTargetScan*         InTargetScan;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleHud_SetTargetScan) == 0x000008, "Wrong alignment on TLUserWidgetConsoleHud_SetTargetScan");
static_assert(sizeof(TLUserWidgetConsoleHud_SetTargetScan) == 0x000008, "Wrong size on TLUserWidgetConsoleHud_SetTargetScan");
static_assert(offsetof(TLUserWidgetConsoleHud_SetTargetScan, InTargetScan) == 0x000000, "Member 'TLUserWidgetConsoleHud_SetTargetScan::InTargetScan' has a wrong offset!");

// Function TLClient.TLUserWidgetInvenSlotGroup.SetGroupFilter
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInvenSlotGroup_SetGroupFilter final
{
public:
	ETLItemGroupFilter                            InFilter;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInvenSlotGroup_SetGroupFilter) == 0x000001, "Wrong alignment on TLUserWidgetInvenSlotGroup_SetGroupFilter");
static_assert(sizeof(TLUserWidgetInvenSlotGroup_SetGroupFilter) == 0x000001, "Wrong size on TLUserWidgetInvenSlotGroup_SetGroupFilter");
static_assert(offsetof(TLUserWidgetInvenSlotGroup_SetGroupFilter, InFilter) == 0x000000, "Member 'TLUserWidgetInvenSlotGroup_SetGroupFilter::InFilter' has a wrong offset!");

// Function TLClient.TLUserWidgetInvenSlotGroup.ShowGroupFilterLabel
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInvenSlotGroup_ShowGroupFilterLabel final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInvenSlotGroup_ShowGroupFilterLabel) == 0x000001, "Wrong alignment on TLUserWidgetInvenSlotGroup_ShowGroupFilterLabel");
static_assert(sizeof(TLUserWidgetInvenSlotGroup_ShowGroupFilterLabel) == 0x000001, "Wrong size on TLUserWidgetInvenSlotGroup_ShowGroupFilterLabel");
static_assert(offsetof(TLUserWidgetInvenSlotGroup_ShowGroupFilterLabel, InShow) == 0x000000, "Member 'TLUserWidgetInvenSlotGroup_ShowGroupFilterLabel::InShow' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleInventory.OnDimmedEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetConsoleInventory_OnDimmedEvent final
{
public:
	bool                                          bInDisable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleInventory_OnDimmedEvent) == 0x000001, "Wrong alignment on TLUserWidgetConsoleInventory_OnDimmedEvent");
static_assert(sizeof(TLUserWidgetConsoleInventory_OnDimmedEvent) == 0x000001, "Wrong size on TLUserWidgetConsoleInventory_OnDimmedEvent");
static_assert(offsetof(TLUserWidgetConsoleInventory_OnDimmedEvent, bInDisable) == 0x000000, "Member 'TLUserWidgetConsoleInventory_OnDimmedEvent::bInDisable' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleInventory.OnShowTempInventory
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetConsoleInventory_OnShowTempInventory final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleInventory_OnShowTempInventory) == 0x000001, "Wrong alignment on TLUserWidgetConsoleInventory_OnShowTempInventory");
static_assert(sizeof(TLUserWidgetConsoleInventory_OnShowTempInventory) == 0x000001, "Wrong size on TLUserWidgetConsoleInventory_OnShowTempInventory");
static_assert(offsetof(TLUserWidgetConsoleInventory_OnShowTempInventory, bInShow) == 0x000000, "Member 'TLUserWidgetConsoleInventory_OnShowTempInventory::bInShow' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconSiege.Button_OnClicked
// 0x0070 (0x0070 - 0x0000)
struct TLUserWidgetMapIconSiege_Button_OnClicked final
{
public:
	struct FPointerEvent                          InMouseEvent;                                      // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconSiege_Button_OnClicked) == 0x000008, "Wrong alignment on TLUserWidgetMapIconSiege_Button_OnClicked");
static_assert(sizeof(TLUserWidgetMapIconSiege_Button_OnClicked) == 0x000070, "Wrong size on TLUserWidgetMapIconSiege_Button_OnClicked");
static_assert(offsetof(TLUserWidgetMapIconSiege_Button_OnClicked, InMouseEvent) == 0x000000, "Member 'TLUserWidgetMapIconSiege_Button_OnClicked::InMouseEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconSiege.OnUpdateIconColor
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetMapIconSiege_OnUpdateIconColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconSiege_OnUpdateIconColor) == 0x000004, "Wrong alignment on TLUserWidgetMapIconSiege_OnUpdateIconColor");
static_assert(sizeof(TLUserWidgetMapIconSiege_OnUpdateIconColor) == 0x000010, "Wrong size on TLUserWidgetMapIconSiege_OnUpdateIconColor");
static_assert(offsetof(TLUserWidgetMapIconSiege_OnUpdateIconColor, InColor) == 0x000000, "Member 'TLUserWidgetMapIconSiege_OnUpdateIconColor::InColor' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconSiege.OnUpdateSiegeState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconSiege_OnUpdateSiegeState final
{
public:
	bool                                          InIsSiegeWarfare;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconSiege_OnUpdateSiegeState) == 0x000001, "Wrong alignment on TLUserWidgetMapIconSiege_OnUpdateSiegeState");
static_assert(sizeof(TLUserWidgetMapIconSiege_OnUpdateSiegeState) == 0x000001, "Wrong size on TLUserWidgetMapIconSiege_OnUpdateSiegeState");
static_assert(offsetof(TLUserWidgetMapIconSiege_OnUpdateSiegeState, InIsSiegeWarfare) == 0x000000, "Member 'TLUserWidgetMapIconSiege_OnUpdateSiegeState::InIsSiegeWarfare' has a wrong offset!");

// Function TLClient.TLUserWidgetConsolePartyHud.OnDimmed
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetConsolePartyHud_OnDimmed final
{
public:
	bool                                          bInDimmed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsolePartyHud_OnDimmed) == 0x000001, "Wrong alignment on TLUserWidgetConsolePartyHud_OnDimmed");
static_assert(sizeof(TLUserWidgetConsolePartyHud_OnDimmed) == 0x000001, "Wrong size on TLUserWidgetConsolePartyHud_OnDimmed");
static_assert(offsetof(TLUserWidgetConsolePartyHud_OnDimmed, bInDimmed) == 0x000000, "Member 'TLUserWidgetConsolePartyHud_OnDimmed::bInDimmed' has a wrong offset!");

// Function TLClient.TLUserWidgetConsolePartyHud.OnUpdatePartyState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetConsolePartyHud_OnUpdatePartyState final
{
public:
	ETLPartyState                                 InPartyState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsolePartyHud_OnUpdatePartyState) == 0x000001, "Wrong alignment on TLUserWidgetConsolePartyHud_OnUpdatePartyState");
static_assert(sizeof(TLUserWidgetConsolePartyHud_OnUpdatePartyState) == 0x000001, "Wrong size on TLUserWidgetConsolePartyHud_OnUpdatePartyState");
static_assert(offsetof(TLUserWidgetConsolePartyHud_OnUpdatePartyState, InPartyState) == 0x000000, "Member 'TLUserWidgetConsolePartyHud_OnUpdatePartyState::InPartyState' has a wrong offset!");

// Function TLClient.TLUserWidgetConsolePartyHud.IsMatchingParty
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetConsolePartyHud_IsMatchingParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsolePartyHud_IsMatchingParty) == 0x000001, "Wrong alignment on TLUserWidgetConsolePartyHud_IsMatchingParty");
static_assert(sizeof(TLUserWidgetConsolePartyHud_IsMatchingParty) == 0x000001, "Wrong size on TLUserWidgetConsolePartyHud_IsMatchingParty");
static_assert(offsetof(TLUserWidgetConsolePartyHud_IsMatchingParty, ReturnValue) == 0x000000, "Member 'TLUserWidgetConsolePartyHud_IsMatchingParty::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetEmojiButton.OnSocialMotionNotificationOff
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetEmojiButton_OnSocialMotionNotificationOff final
{
public:
	class FName                                   InMotionID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEmojiButton_OnSocialMotionNotificationOff) == 0x000004, "Wrong alignment on TLUserWidgetEmojiButton_OnSocialMotionNotificationOff");
static_assert(sizeof(TLUserWidgetEmojiButton_OnSocialMotionNotificationOff) == 0x000008, "Wrong size on TLUserWidgetEmojiButton_OnSocialMotionNotificationOff");
static_assert(offsetof(TLUserWidgetEmojiButton_OnSocialMotionNotificationOff, InMotionID) == 0x000000, "Member 'TLUserWidgetEmojiButton_OnSocialMotionNotificationOff::InMotionID' has a wrong offset!");

// Function TLClient.TLUserWidgetQuickSlot.OnUpdateEditableNonQuickSlotSelected
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetQuickSlot_OnUpdateEditableNonQuickSlotSelected final
{
public:
	bool                                          bInSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetQuickSlot_OnUpdateEditableNonQuickSlotSelected) == 0x000001, "Wrong alignment on TLUserWidgetQuickSlot_OnUpdateEditableNonQuickSlotSelected");
static_assert(sizeof(TLUserWidgetQuickSlot_OnUpdateEditableNonQuickSlotSelected) == 0x000001, "Wrong size on TLUserWidgetQuickSlot_OnUpdateEditableNonQuickSlotSelected");
static_assert(offsetof(TLUserWidgetQuickSlot_OnUpdateEditableNonQuickSlotSelected, bInSelected) == 0x000000, "Member 'TLUserWidgetQuickSlot_OnUpdateEditableNonQuickSlotSelected::bInSelected' has a wrong offset!");

// Function TLClient.TLUserWidgetQuickSlot.IsIgnoreHotKeyHide
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetQuickSlot_IsIgnoreHotKeyHide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetQuickSlot_IsIgnoreHotKeyHide) == 0x000001, "Wrong alignment on TLUserWidgetQuickSlot_IsIgnoreHotKeyHide");
static_assert(sizeof(TLUserWidgetQuickSlot_IsIgnoreHotKeyHide) == 0x000001, "Wrong size on TLUserWidgetQuickSlot_IsIgnoreHotKeyHide");
static_assert(offsetof(TLUserWidgetQuickSlot_IsIgnoreHotKeyHide, ReturnValue) == 0x000000, "Member 'TLUserWidgetQuickSlot_IsIgnoreHotKeyHide::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetQuickSlot.IsKeyPressed
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetQuickSlot_IsKeyPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetQuickSlot_IsKeyPressed) == 0x000001, "Wrong alignment on TLUserWidgetQuickSlot_IsKeyPressed");
static_assert(sizeof(TLUserWidgetQuickSlot_IsKeyPressed) == 0x000001, "Wrong size on TLUserWidgetQuickSlot_IsKeyPressed");
static_assert(offsetof(TLUserWidgetQuickSlot_IsKeyPressed, ReturnValue) == 0x000000, "Member 'TLUserWidgetQuickSlot_IsKeyPressed::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleQuickSlotGroup.OnActivateCurrentGroupIds
// 0x00A0 (0x00A0 - 0x0000)
struct TLUserWidgetConsoleQuickSlotGroup_OnActivateCurrentGroupIds final
{
public:
	TSet<int32>                                   LastID;                                            // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSet<int32>                                   NewId;                                             // 0x0050(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleQuickSlotGroup_OnActivateCurrentGroupIds) == 0x000008, "Wrong alignment on TLUserWidgetConsoleQuickSlotGroup_OnActivateCurrentGroupIds");
static_assert(sizeof(TLUserWidgetConsoleQuickSlotGroup_OnActivateCurrentGroupIds) == 0x0000A0, "Wrong size on TLUserWidgetConsoleQuickSlotGroup_OnActivateCurrentGroupIds");
static_assert(offsetof(TLUserWidgetConsoleQuickSlotGroup_OnActivateCurrentGroupIds, LastID) == 0x000000, "Member 'TLUserWidgetConsoleQuickSlotGroup_OnActivateCurrentGroupIds::LastID' has a wrong offset!");
static_assert(offsetof(TLUserWidgetConsoleQuickSlotGroup_OnActivateCurrentGroupIds, NewId) == 0x000050, "Member 'TLUserWidgetConsoleQuickSlotGroup_OnActivateCurrentGroupIds::NewId' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleQuickSlotGroup.OnDeactivateCurrentGroupId
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetConsoleQuickSlotGroup_OnDeactivateCurrentGroupId final
{
public:
	int32                                         LastID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleQuickSlotGroup_OnDeactivateCurrentGroupId) == 0x000004, "Wrong alignment on TLUserWidgetConsoleQuickSlotGroup_OnDeactivateCurrentGroupId");
static_assert(sizeof(TLUserWidgetConsoleQuickSlotGroup_OnDeactivateCurrentGroupId) == 0x000004, "Wrong size on TLUserWidgetConsoleQuickSlotGroup_OnDeactivateCurrentGroupId");
static_assert(offsetof(TLUserWidgetConsoleQuickSlotGroup_OnDeactivateCurrentGroupId, LastID) == 0x000000, "Member 'TLUserWidgetConsoleQuickSlotGroup_OnDeactivateCurrentGroupId::LastID' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleQuickSlotGroup.OnDeactivateCurrentGroupIds
// 0x0050 (0x0050 - 0x0000)
struct TLUserWidgetConsoleQuickSlotGroup_OnDeactivateCurrentGroupIds final
{
public:
	TSet<int32>                                   LastID;                                            // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleQuickSlotGroup_OnDeactivateCurrentGroupIds) == 0x000008, "Wrong alignment on TLUserWidgetConsoleQuickSlotGroup_OnDeactivateCurrentGroupIds");
static_assert(sizeof(TLUserWidgetConsoleQuickSlotGroup_OnDeactivateCurrentGroupIds) == 0x000050, "Wrong size on TLUserWidgetConsoleQuickSlotGroup_OnDeactivateCurrentGroupIds");
static_assert(offsetof(TLUserWidgetConsoleQuickSlotGroup_OnDeactivateCurrentGroupIds, LastID) == 0x000000, "Member 'TLUserWidgetConsoleQuickSlotGroup_OnDeactivateCurrentGroupIds::LastID' has a wrong offset!");

// Function TLClient.TLUserWidgetConsoleQuickSlotGroup.OnUpdateSkillQuickSlotGroupState
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetConsoleQuickSlotGroup_OnUpdateSkillQuickSlotGroupState final
{
public:
	bool                                          bContentsOpened;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillGroupShowCount;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetConsoleQuickSlotGroup_OnUpdateSkillQuickSlotGroupState) == 0x000004, "Wrong alignment on TLUserWidgetConsoleQuickSlotGroup_OnUpdateSkillQuickSlotGroupState");
static_assert(sizeof(TLUserWidgetConsoleQuickSlotGroup_OnUpdateSkillQuickSlotGroupState) == 0x000008, "Wrong size on TLUserWidgetConsoleQuickSlotGroup_OnUpdateSkillQuickSlotGroupState");
static_assert(offsetof(TLUserWidgetConsoleQuickSlotGroup_OnUpdateSkillQuickSlotGroupState, bContentsOpened) == 0x000000, "Member 'TLUserWidgetConsoleQuickSlotGroup_OnUpdateSkillQuickSlotGroupState::bContentsOpened' has a wrong offset!");
static_assert(offsetof(TLUserWidgetConsoleQuickSlotGroup_OnUpdateSkillQuickSlotGroupState, SkillGroupShowCount) == 0x000004, "Member 'TLUserWidgetConsoleQuickSlotGroup_OnUpdateSkillQuickSlotGroupState::SkillGroupShowCount' has a wrong offset!");

// Function TLClient.TLUserWidgetGrowthMissionObjective.OnStatusEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGrowthMissionObjective_OnStatusEvent final
{
public:
	bool                                          InbComplete;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGrowthMissionObjective_OnStatusEvent) == 0x000001, "Wrong alignment on TLUserWidgetGrowthMissionObjective_OnStatusEvent");
static_assert(sizeof(TLUserWidgetGrowthMissionObjective_OnStatusEvent) == 0x000001, "Wrong size on TLUserWidgetGrowthMissionObjective_OnStatusEvent");
static_assert(offsetof(TLUserWidgetGrowthMissionObjective_OnStatusEvent, InbComplete) == 0x000000, "Member 'TLUserWidgetGrowthMissionObjective_OnStatusEvent::InbComplete' has a wrong offset!");

// Function TLClient.TLWidgetConsoleSkillBook.OnActivateSkillQuickSlotGroup
// 0x0004 (0x0004 - 0x0000)
struct TLWidgetConsoleSkillBook_OnActivateSkillQuickSlotGroup final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLWidgetConsoleSkillBook_OnActivateSkillQuickSlotGroup) == 0x000004, "Wrong alignment on TLWidgetConsoleSkillBook_OnActivateSkillQuickSlotGroup");
static_assert(sizeof(TLWidgetConsoleSkillBook_OnActivateSkillQuickSlotGroup) == 0x000004, "Wrong size on TLWidgetConsoleSkillBook_OnActivateSkillQuickSlotGroup");
static_assert(offsetof(TLWidgetConsoleSkillBook_OnActivateSkillQuickSlotGroup, Index_0) == 0x000000, "Member 'TLWidgetConsoleSkillBook_OnActivateSkillQuickSlotGroup::Index_0' has a wrong offset!");

// Function TLClient.TLUserWidgetContentsAlarmReward.OnUpdateAlarmType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContentsAlarmReward_OnUpdateAlarmType final
{
public:
	EContentsAlarmType                            InViewType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContentsAlarmReward_OnUpdateAlarmType) == 0x000001, "Wrong alignment on TLUserWidgetContentsAlarmReward_OnUpdateAlarmType");
static_assert(sizeof(TLUserWidgetContentsAlarmReward_OnUpdateAlarmType) == 0x000001, "Wrong size on TLUserWidgetContentsAlarmReward_OnUpdateAlarmType");
static_assert(offsetof(TLUserWidgetContentsAlarmReward_OnUpdateAlarmType, InViewType) == 0x000000, "Member 'TLUserWidgetContentsAlarmReward_OnUpdateAlarmType::InViewType' has a wrong offset!");

// Function TLClient.TLUserWidgetContentsHolder.ScrollToContentWidget
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetContentsHolder_ScrollToContentWidget final
{
public:
	class UTLUserWidget*                          InContentWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContentsHolder_ScrollToContentWidget) == 0x000008, "Wrong alignment on TLUserWidgetContentsHolder_ScrollToContentWidget");
static_assert(sizeof(TLUserWidgetContentsHolder_ScrollToContentWidget) == 0x000008, "Wrong size on TLUserWidgetContentsHolder_ScrollToContentWidget");
static_assert(offsetof(TLUserWidgetContentsHolder_ScrollToContentWidget, InContentWidget) == 0x000000, "Member 'TLUserWidgetContentsHolder_ScrollToContentWidget::InContentWidget' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxTradePurchase.OnActiveEscrow
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMsgBoxTradePurchase_OnActiveEscrow final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxTradePurchase_OnActiveEscrow) == 0x000001, "Wrong alignment on TLUserWidgetMsgBoxTradePurchase_OnActiveEscrow");
static_assert(sizeof(TLUserWidgetMsgBoxTradePurchase_OnActiveEscrow) == 0x000001, "Wrong size on TLUserWidgetMsgBoxTradePurchase_OnActiveEscrow");
static_assert(offsetof(TLUserWidgetMsgBoxTradePurchase_OnActiveEscrow, InIsActive) == 0x000000, "Member 'TLUserWidgetMsgBoxTradePurchase_OnActiveEscrow::InIsActive' has a wrong offset!");

// Function TLClient.TLUserWidgetContentsTitle.SetMainTabUse
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContentsTitle_SetMainTabUse final
{
public:
	bool                                          bInMainTabUse;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContentsTitle_SetMainTabUse) == 0x000001, "Wrong alignment on TLUserWidgetContentsTitle_SetMainTabUse");
static_assert(sizeof(TLUserWidgetContentsTitle_SetMainTabUse) == 0x000001, "Wrong size on TLUserWidgetContentsTitle_SetMainTabUse");
static_assert(offsetof(TLUserWidgetContentsTitle_SetMainTabUse, bInMainTabUse) == 0x000000, "Member 'TLUserWidgetContentsTitle_SetMainTabUse::bInMainTabUse' has a wrong offset!");

// Function TLClient.TLUserWidgetContentsTitle.SetNextFullScreen
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContentsTitle_SetNextFullScreen final
{
public:
	bool                                          bInbNextFullScreen;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContentsTitle_SetNextFullScreen) == 0x000001, "Wrong alignment on TLUserWidgetContentsTitle_SetNextFullScreen");
static_assert(sizeof(TLUserWidgetContentsTitle_SetNextFullScreen) == 0x000001, "Wrong size on TLUserWidgetContentsTitle_SetNextFullScreen");
static_assert(offsetof(TLUserWidgetContentsTitle_SetNextFullScreen, bInbNextFullScreen) == 0x000000, "Member 'TLUserWidgetContentsTitle_SetNextFullScreen::bInbNextFullScreen' has a wrong offset!");

// Function TLClient.TLUserWidgetMoviePlayer.HandleMediaClosed
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetMoviePlayer_HandleMediaClosed final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMoviePlayer_HandleMediaClosed) == 0x000008, "Wrong alignment on TLUserWidgetMoviePlayer_HandleMediaClosed");
static_assert(sizeof(TLUserWidgetMoviePlayer_HandleMediaClosed) == 0x000008, "Wrong size on TLUserWidgetMoviePlayer_HandleMediaClosed");
static_assert(offsetof(TLUserWidgetMoviePlayer_HandleMediaClosed, InBinkMediaPlayer) == 0x000000, "Member 'TLUserWidgetMoviePlayer_HandleMediaClosed::InBinkMediaPlayer' has a wrong offset!");

// Function TLClient.TLUserWidgetMoviePlayer.HandleMediaOpened
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetMoviePlayer_HandleMediaOpened final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OpenedUrl;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMoviePlayer_HandleMediaOpened) == 0x000008, "Wrong alignment on TLUserWidgetMoviePlayer_HandleMediaOpened");
static_assert(sizeof(TLUserWidgetMoviePlayer_HandleMediaOpened) == 0x000018, "Wrong size on TLUserWidgetMoviePlayer_HandleMediaOpened");
static_assert(offsetof(TLUserWidgetMoviePlayer_HandleMediaOpened, InBinkMediaPlayer) == 0x000000, "Member 'TLUserWidgetMoviePlayer_HandleMediaOpened::InBinkMediaPlayer' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMoviePlayer_HandleMediaOpened, OpenedUrl) == 0x000008, "Member 'TLUserWidgetMoviePlayer_HandleMediaOpened::OpenedUrl' has a wrong offset!");

// Function TLClient.TLUserWidgetMoviePlayer.HandleMediaReachedEnd
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetMoviePlayer_HandleMediaReachedEnd final
{
public:
	class UBinkMediaPlayer*                       InBinkMediaPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMoviePlayer_HandleMediaReachedEnd) == 0x000008, "Wrong alignment on TLUserWidgetMoviePlayer_HandleMediaReachedEnd");
static_assert(sizeof(TLUserWidgetMoviePlayer_HandleMediaReachedEnd) == 0x000008, "Wrong size on TLUserWidgetMoviePlayer_HandleMediaReachedEnd");
static_assert(offsetof(TLUserWidgetMoviePlayer_HandleMediaReachedEnd, InBinkMediaPlayer) == 0x000000, "Member 'TLUserWidgetMoviePlayer_HandleMediaReachedEnd::InBinkMediaPlayer' has a wrong offset!");

// Function TLClient.TLUserWidgetDeTeamPartyMatchingButton.OnUpdateMatchingType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDeTeamPartyMatchingButton_OnUpdateMatchingType final
{
public:
	EDeTeamPartyMatchingType                      InMatchingType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDeTeamPartyMatchingButton_OnUpdateMatchingType) == 0x000001, "Wrong alignment on TLUserWidgetDeTeamPartyMatchingButton_OnUpdateMatchingType");
static_assert(sizeof(TLUserWidgetDeTeamPartyMatchingButton_OnUpdateMatchingType) == 0x000001, "Wrong size on TLUserWidgetDeTeamPartyMatchingButton_OnUpdateMatchingType");
static_assert(offsetof(TLUserWidgetDeTeamPartyMatchingButton_OnUpdateMatchingType, InMatchingType) == 0x000000, "Member 'TLUserWidgetDeTeamPartyMatchingButton_OnUpdateMatchingType::InMatchingType' has a wrong offset!");

// Function TLClient.TLUserWidgetContractItem.HandleChangeContract
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetContractItem_HandleChangeContract final
{
public:
	uint64                                        InContractGuid;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractItem_HandleChangeContract) == 0x000008, "Wrong alignment on TLUserWidgetContractItem_HandleChangeContract");
static_assert(sizeof(TLUserWidgetContractItem_HandleChangeContract) == 0x000008, "Wrong size on TLUserWidgetContractItem_HandleChangeContract");
static_assert(offsetof(TLUserWidgetContractItem_HandleChangeContract, InContractGuid) == 0x000000, "Member 'TLUserWidgetContractItem_HandleChangeContract::InContractGuid' has a wrong offset!");

// Function TLClient.TLUserWidgetContractItem.OnUpdateContractInfo
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetContractItem_OnUpdateContractInfo final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractItem_OnUpdateContractInfo) == 0x000008, "Wrong alignment on TLUserWidgetContractItem_OnUpdateContractInfo");
static_assert(sizeof(TLUserWidgetContractItem_OnUpdateContractInfo) == 0x000008, "Wrong size on TLUserWidgetContractItem_OnUpdateContractInfo");
static_assert(offsetof(TLUserWidgetContractItem_OnUpdateContractInfo, InObject) == 0x000000, "Member 'TLUserWidgetContractItem_OnUpdateContractInfo::InObject' has a wrong offset!");

// Function TLClient.TLUserWidgetContractItem.SetContractInfo
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetContractItem_SetContractInfo final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractItem_SetContractInfo) == 0x000008, "Wrong alignment on TLUserWidgetContractItem_SetContractInfo");
static_assert(sizeof(TLUserWidgetContractItem_SetContractInfo) == 0x000008, "Wrong size on TLUserWidgetContractItem_SetContractInfo");
static_assert(offsetof(TLUserWidgetContractItem_SetContractInfo, InObject) == 0x000000, "Member 'TLUserWidgetContractItem_SetContractInfo::InObject' has a wrong offset!");

// Function TLClient.TLUserWidgetContractObjective.HandleCompleteContractObjective
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetContractObjective_HandleCompleteContractObjective final
{
public:
	uint64                                        InContractGuid;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        InContractObjectiveGuid;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractObjective_HandleCompleteContractObjective) == 0x000008, "Wrong alignment on TLUserWidgetContractObjective_HandleCompleteContractObjective");
static_assert(sizeof(TLUserWidgetContractObjective_HandleCompleteContractObjective) == 0x000010, "Wrong size on TLUserWidgetContractObjective_HandleCompleteContractObjective");
static_assert(offsetof(TLUserWidgetContractObjective_HandleCompleteContractObjective, InContractGuid) == 0x000000, "Member 'TLUserWidgetContractObjective_HandleCompleteContractObjective::InContractGuid' has a wrong offset!");
static_assert(offsetof(TLUserWidgetContractObjective_HandleCompleteContractObjective, InContractObjectiveGuid) == 0x000008, "Member 'TLUserWidgetContractObjective_HandleCompleteContractObjective::InContractObjectiveGuid' has a wrong offset!");

// Function TLClient.TLUserWidgetContractObjective.HandleUpdateContractObjectiveCount
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetContractObjective_HandleUpdateContractObjectiveCount final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractObjective_HandleUpdateContractObjectiveCount) == 0x000004, "Wrong alignment on TLUserWidgetContractObjective_HandleUpdateContractObjectiveCount");
static_assert(sizeof(TLUserWidgetContractObjective_HandleUpdateContractObjectiveCount) == 0x000004, "Wrong size on TLUserWidgetContractObjective_HandleUpdateContractObjectiveCount");
static_assert(offsetof(TLUserWidgetContractObjective_HandleUpdateContractObjectiveCount, InCount) == 0x000000, "Member 'TLUserWidgetContractObjective_HandleUpdateContractObjectiveCount::InCount' has a wrong offset!");

// Function TLClient.TLUserWidgetContractObjective.UpdateContractObjectiveCount
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetContractObjective_UpdateContractObjectiveCount final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractObjective_UpdateContractObjectiveCount) == 0x000004, "Wrong alignment on TLUserWidgetContractObjective_UpdateContractObjectiveCount");
static_assert(sizeof(TLUserWidgetContractObjective_UpdateContractObjectiveCount) == 0x000004, "Wrong size on TLUserWidgetContractObjective_UpdateContractObjectiveCount");
static_assert(offsetof(TLUserWidgetContractObjective_UpdateContractObjectiveCount, InCount) == 0x000000, "Member 'TLUserWidgetContractObjective_UpdateContractObjectiveCount::InCount' has a wrong offset!");

// Function TLClient.TLUserWidgetContractReward.OnUpdateContractInfo
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetContractReward_OnUpdateContractInfo final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractReward_OnUpdateContractInfo) == 0x000008, "Wrong alignment on TLUserWidgetContractReward_OnUpdateContractInfo");
static_assert(sizeof(TLUserWidgetContractReward_OnUpdateContractInfo) == 0x000008, "Wrong size on TLUserWidgetContractReward_OnUpdateContractInfo");
static_assert(offsetof(TLUserWidgetContractReward_OnUpdateContractInfo, InObject) == 0x000000, "Member 'TLUserWidgetContractReward_OnUpdateContractInfo::InObject' has a wrong offset!");

// Function TLClient.TLUserWidgetContractRewardItemList.OnRewardResultEvent
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetContractRewardItemList_OnRewardResultEvent final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemGrade                                    ItemGrade;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetContractRewardItemList_OnRewardResultEvent) == 0x000004, "Wrong alignment on TLUserWidgetContractRewardItemList_OnRewardResultEvent");
static_assert(sizeof(TLUserWidgetContractRewardItemList_OnRewardResultEvent) == 0x000008, "Wrong size on TLUserWidgetContractRewardItemList_OnRewardResultEvent");
static_assert(offsetof(TLUserWidgetContractRewardItemList_OnRewardResultEvent, SlotIndex) == 0x000000, "Member 'TLUserWidgetContractRewardItemList_OnRewardResultEvent::SlotIndex' has a wrong offset!");
static_assert(offsetof(TLUserWidgetContractRewardItemList_OnRewardResultEvent, ItemGrade) == 0x000004, "Member 'TLUserWidgetContractRewardItemList_OnRewardResultEvent::ItemGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetContractRewardItemList.UpdateResultItem
// 0x000C (0x000C - 0x0000)
struct TLUserWidgetContractRewardItemList_UpdateResultItem final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemTableId;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InAmount;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractRewardItemList_UpdateResultItem) == 0x000004, "Wrong alignment on TLUserWidgetContractRewardItemList_UpdateResultItem");
static_assert(sizeof(TLUserWidgetContractRewardItemList_UpdateResultItem) == 0x00000C, "Wrong size on TLUserWidgetContractRewardItemList_UpdateResultItem");
static_assert(offsetof(TLUserWidgetContractRewardItemList_UpdateResultItem, InSlotIndex) == 0x000000, "Member 'TLUserWidgetContractRewardItemList_UpdateResultItem::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TLUserWidgetContractRewardItemList_UpdateResultItem, InItemTableId) == 0x000004, "Member 'TLUserWidgetContractRewardItemList_UpdateResultItem::InItemTableId' has a wrong offset!");
static_assert(offsetof(TLUserWidgetContractRewardItemList_UpdateResultItem, InAmount) == 0x000008, "Member 'TLUserWidgetContractRewardItemList_UpdateResultItem::InAmount' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconCallClan.OnDamaged
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconCallClan_OnDamaged final
{
public:
	bool                                          InIsDamaged;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconCallClan_OnDamaged) == 0x000001, "Wrong alignment on TLUserWidgetMapIconCallClan_OnDamaged");
static_assert(sizeof(TLUserWidgetMapIconCallClan_OnDamaged) == 0x000001, "Wrong size on TLUserWidgetMapIconCallClan_OnDamaged");
static_assert(offsetof(TLUserWidgetMapIconCallClan_OnDamaged, InIsDamaged) == 0x000000, "Member 'TLUserWidgetMapIconCallClan_OnDamaged::InIsDamaged' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconCallClan.OnUpdateHpPercent
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetMapIconCallClan_OnUpdateHpPercent final
{
public:
	float                                         InHpPercent;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconCallClan_OnUpdateHpPercent) == 0x000004, "Wrong alignment on TLUserWidgetMapIconCallClan_OnUpdateHpPercent");
static_assert(sizeof(TLUserWidgetMapIconCallClan_OnUpdateHpPercent) == 0x000004, "Wrong size on TLUserWidgetMapIconCallClan_OnUpdateHpPercent");
static_assert(offsetof(TLUserWidgetMapIconCallClan_OnUpdateHpPercent, InHpPercent) == 0x000000, "Member 'TLUserWidgetMapIconCallClan_OnUpdateHpPercent::InHpPercent' has a wrong offset!");

// Function TLClient.TLUserWidgetContractRewardScreenMessageSlot.OnUpdateRewardSlot
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetContractRewardScreenMessageSlot_OnUpdateRewardSlot final
{
public:
	EItemGrade                                    InItemGrade;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractRewardScreenMessageSlot_OnUpdateRewardSlot) == 0x000001, "Wrong alignment on TLUserWidgetContractRewardScreenMessageSlot_OnUpdateRewardSlot");
static_assert(sizeof(TLUserWidgetContractRewardScreenMessageSlot_OnUpdateRewardSlot) == 0x000001, "Wrong size on TLUserWidgetContractRewardScreenMessageSlot_OnUpdateRewardSlot");
static_assert(offsetof(TLUserWidgetContractRewardScreenMessageSlot_OnUpdateRewardSlot, InItemGrade) == 0x000000, "Member 'TLUserWidgetContractRewardScreenMessageSlot_OnUpdateRewardSlot::InItemGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetContractTitle.SetContractInfo
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetContractTitle_SetContractInfo final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractTitle_SetContractInfo) == 0x000008, "Wrong alignment on TLUserWidgetContractTitle_SetContractInfo");
static_assert(sizeof(TLUserWidgetContractTitle_SetContractInfo) == 0x000008, "Wrong size on TLUserWidgetContractTitle_SetContractInfo");
static_assert(offsetof(TLUserWidgetContractTitle_SetContractInfo, InObject) == 0x000000, "Member 'TLUserWidgetContractTitle_SetContractInfo::InObject' has a wrong offset!");

// Function TLClient.TLUserWidgetContractTitle.SetContractInfoWithGuid
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetContractTitle_SetContractInfoWithGuid final
{
public:
	uint64                                        InContractGuid;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetContractTitle_SetContractInfoWithGuid) == 0x000008, "Wrong alignment on TLUserWidgetContractTitle_SetContractInfoWithGuid");
static_assert(sizeof(TLUserWidgetContractTitle_SetContractInfoWithGuid) == 0x000008, "Wrong size on TLUserWidgetContractTitle_SetContractInfoWithGuid");
static_assert(offsetof(TLUserWidgetContractTitle_SetContractInfoWithGuid, InContractGuid) == 0x000000, "Member 'TLUserWidgetContractTitle_SetContractInfoWithGuid::InContractGuid' has a wrong offset!");

// Function TLClient.TLUserWidgetCooking.OnUpdateLayout
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCooking_OnUpdateLayout final
{
public:
	bool                                          bInCookingBook;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCooking_OnUpdateLayout) == 0x000001, "Wrong alignment on TLUserWidgetCooking_OnUpdateLayout");
static_assert(sizeof(TLUserWidgetCooking_OnUpdateLayout) == 0x000001, "Wrong size on TLUserWidgetCooking_OnUpdateLayout");
static_assert(offsetof(TLUserWidgetCooking_OnUpdateLayout, bInCookingBook) == 0x000000, "Member 'TLUserWidgetCooking_OnUpdateLayout::bInCookingBook' has a wrong offset!");

// Function TLClient.TLUserWidgetCooking.OnUpdateMainIngredientNum
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetCooking_OnUpdateMainIngredientNum final
{
public:
	int32                                         InNum;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCooking_OnUpdateMainIngredientNum) == 0x000004, "Wrong alignment on TLUserWidgetCooking_OnUpdateMainIngredientNum");
static_assert(sizeof(TLUserWidgetCooking_OnUpdateMainIngredientNum) == 0x000004, "Wrong size on TLUserWidgetCooking_OnUpdateMainIngredientNum");
static_assert(offsetof(TLUserWidgetCooking_OnUpdateMainIngredientNum, InNum) == 0x000000, "Member 'TLUserWidgetCooking_OnUpdateMainIngredientNum::InNum' has a wrong offset!");

// Function TLClient.TLUserWidgetCooking.OnUpdateOnboardingState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCooking_OnUpdateOnboardingState final
{
public:
	bool                                          bOnboarding;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCooking_OnUpdateOnboardingState) == 0x000001, "Wrong alignment on TLUserWidgetCooking_OnUpdateOnboardingState");
static_assert(sizeof(TLUserWidgetCooking_OnUpdateOnboardingState) == 0x000001, "Wrong size on TLUserWidgetCooking_OnUpdateOnboardingState");
static_assert(offsetof(TLUserWidgetCooking_OnUpdateOnboardingState, bOnboarding) == 0x000000, "Member 'TLUserWidgetCooking_OnUpdateOnboardingState::bOnboarding' has a wrong offset!");

// Function TLClient.TLUserWidgetCooking.OnUpdateRecipeExp
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetCooking_OnUpdateRecipeExp final
{
public:
	int32                                         InExp;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCooking_OnUpdateRecipeExp) == 0x000004, "Wrong alignment on TLUserWidgetCooking_OnUpdateRecipeExp");
static_assert(sizeof(TLUserWidgetCooking_OnUpdateRecipeExp) == 0x000004, "Wrong size on TLUserWidgetCooking_OnUpdateRecipeExp");
static_assert(offsetof(TLUserWidgetCooking_OnUpdateRecipeExp, InExp) == 0x000000, "Member 'TLUserWidgetCooking_OnUpdateRecipeExp::InExp' has a wrong offset!");

// Function TLClient.TLUserWidgetCooking.OnUpdateVisibleCookingUI
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCooking_OnUpdateVisibleCookingUI final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCooking_OnUpdateVisibleCookingUI) == 0x000001, "Wrong alignment on TLUserWidgetCooking_OnUpdateVisibleCookingUI");
static_assert(sizeof(TLUserWidgetCooking_OnUpdateVisibleCookingUI) == 0x000001, "Wrong size on TLUserWidgetCooking_OnUpdateVisibleCookingUI");
static_assert(offsetof(TLUserWidgetCooking_OnUpdateVisibleCookingUI, bInVisible) == 0x000000, "Member 'TLUserWidgetCooking_OnUpdateVisibleCookingUI::bInVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetCookingListSlot.OnUpdateCookAvailable
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCookingListSlot_OnUpdateCookAvailable final
{
public:
	bool                                          bInAvailableCook;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCookingListSlot_OnUpdateCookAvailable) == 0x000001, "Wrong alignment on TLUserWidgetCookingListSlot_OnUpdateCookAvailable");
static_assert(sizeof(TLUserWidgetCookingListSlot_OnUpdateCookAvailable) == 0x000001, "Wrong size on TLUserWidgetCookingListSlot_OnUpdateCookAvailable");
static_assert(offsetof(TLUserWidgetCookingListSlot_OnUpdateCookAvailable, bInAvailableCook) == 0x000000, "Member 'TLUserWidgetCookingListSlot_OnUpdateCookAvailable::bInAvailableCook' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildViewFrame.OnChangedFrameType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildViewFrame_OnChangedFrameType final
{
public:
	EGuildViewFrameType                           InFrameType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildViewFrame_OnChangedFrameType) == 0x000001, "Wrong alignment on TLUserWidgetGuildViewFrame_OnChangedFrameType");
static_assert(sizeof(TLUserWidgetGuildViewFrame_OnChangedFrameType) == 0x000001, "Wrong size on TLUserWidgetGuildViewFrame_OnChangedFrameType");
static_assert(offsetof(TLUserWidgetGuildViewFrame_OnChangedFrameType, InFrameType) == 0x000000, "Member 'TLUserWidgetGuildViewFrame_OnChangedFrameType::InFrameType' has a wrong offset!");

// Function TLClient.TLUserWidgetCostTextButton.SetCostVisible
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCostTextButton_SetCostVisible final
{
public:
	bool                                          bInCostVisible;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCostTextButton_SetCostVisible) == 0x000001, "Wrong alignment on TLUserWidgetCostTextButton_SetCostVisible");
static_assert(sizeof(TLUserWidgetCostTextButton_SetCostVisible) == 0x000001, "Wrong size on TLUserWidgetCostTextButton_SetCostVisible");
static_assert(offsetof(TLUserWidgetCostTextButton_SetCostVisible, bInCostVisible) == 0x000000, "Member 'TLUserWidgetCostTextButton_SetCostVisible::bInCostVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetCostTextButton.SetEnoughCost
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCostTextButton_SetEnoughCost final
{
public:
	bool                                          bInEnoughCost;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCostTextButton_SetEnoughCost) == 0x000001, "Wrong alignment on TLUserWidgetCostTextButton_SetEnoughCost");
static_assert(sizeof(TLUserWidgetCostTextButton_SetEnoughCost) == 0x000001, "Wrong size on TLUserWidgetCostTextButton_SetEnoughCost");
static_assert(offsetof(TLUserWidgetCostTextButton_SetEnoughCost, bInEnoughCost) == 0x000000, "Member 'TLUserWidgetCostTextButton_SetEnoughCost::bInEnoughCost' has a wrong offset!");

// DelegateFunction TLClient.TLUserWidgetCostTextButton.TLOnUpdateEnoughCostEvent__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCostTextButton_TLOnUpdateEnoughCostEvent__DelegateSignature final
{
public:
	bool                                          bEnoughCost;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCostTextButton_TLOnUpdateEnoughCostEvent__DelegateSignature) == 0x000001, "Wrong alignment on TLUserWidgetCostTextButton_TLOnUpdateEnoughCostEvent__DelegateSignature");
static_assert(sizeof(TLUserWidgetCostTextButton_TLOnUpdateEnoughCostEvent__DelegateSignature) == 0x000001, "Wrong size on TLUserWidgetCostTextButton_TLOnUpdateEnoughCostEvent__DelegateSignature");
static_assert(offsetof(TLUserWidgetCostTextButton_TLOnUpdateEnoughCostEvent__DelegateSignature, bEnoughCost) == 0x000000, "Member 'TLUserWidgetCostTextButton_TLOnUpdateEnoughCostEvent__DelegateSignature::bEnoughCost' has a wrong offset!");

// Function TLClient.TLUserWidgetCostTextButton.UpdateCost
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCostTextButton_UpdateCost final
{
public:
	bool                                          bInZeroCost;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCostTextButton_UpdateCost) == 0x000001, "Wrong alignment on TLUserWidgetCostTextButton_UpdateCost");
static_assert(sizeof(TLUserWidgetCostTextButton_UpdateCost) == 0x000001, "Wrong size on TLUserWidgetCostTextButton_UpdateCost");
static_assert(offsetof(TLUserWidgetCostTextButton_UpdateCost, bInZeroCost) == 0x000000, "Member 'TLUserWidgetCostTextButton_UpdateCost::bInZeroCost' has a wrong offset!");

// Function TLClient.TLUserWidgetCraftingBook.ShowOnboarding
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCraftingBook_ShowOnboarding final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCraftingBook_ShowOnboarding) == 0x000001, "Wrong alignment on TLUserWidgetCraftingBook_ShowOnboarding");
static_assert(sizeof(TLUserWidgetCraftingBook_ShowOnboarding) == 0x000001, "Wrong size on TLUserWidgetCraftingBook_ShowOnboarding");
static_assert(offsetof(TLUserWidgetCraftingBook_ShowOnboarding, InShow) == 0x000000, "Member 'TLUserWidgetCraftingBook_ShowOnboarding::InShow' has a wrong offset!");

// Function TLClient.TLUserWidgetMagicDollListPanel.HandleSearchFocusLost
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetMagicDollListPanel_HandleSearchFocusLost final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMagicDollListPanel_HandleSearchFocusLost) == 0x000004, "Wrong alignment on TLUserWidgetMagicDollListPanel_HandleSearchFocusLost");
static_assert(sizeof(TLUserWidgetMagicDollListPanel_HandleSearchFocusLost) == 0x000008, "Wrong size on TLUserWidgetMagicDollListPanel_HandleSearchFocusLost");
static_assert(offsetof(TLUserWidgetMagicDollListPanel_HandleSearchFocusLost, InFocusEvent) == 0x000000, "Member 'TLUserWidgetMagicDollListPanel_HandleSearchFocusLost::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetMagicDollListPanel.HandleSearchTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetMagicDollListPanel_HandleSearchTextCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetMagicDollListPanel_HandleSearchTextCommitted) == 0x000008, "Wrong alignment on TLUserWidgetMagicDollListPanel_HandleSearchTextCommitted");
static_assert(sizeof(TLUserWidgetMagicDollListPanel_HandleSearchTextCommitted) == 0x000020, "Wrong size on TLUserWidgetMagicDollListPanel_HandleSearchTextCommitted");
static_assert(offsetof(TLUserWidgetMagicDollListPanel_HandleSearchTextCommitted, InText) == 0x000000, "Member 'TLUserWidgetMagicDollListPanel_HandleSearchTextCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMagicDollListPanel_HandleSearchTextCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetMagicDollListPanel_HandleSearchTextCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetStatSlotTooltip.OnUpdateNodeState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetStatSlotTooltip_OnUpdateNodeState final
{
public:
	ETLWeaponMasteryNodeState                     InNodeState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetStatSlotTooltip_OnUpdateNodeState) == 0x000001, "Wrong alignment on TLUserWidgetStatSlotTooltip_OnUpdateNodeState");
static_assert(sizeof(TLUserWidgetStatSlotTooltip_OnUpdateNodeState) == 0x000001, "Wrong size on TLUserWidgetStatSlotTooltip_OnUpdateNodeState");
static_assert(offsetof(TLUserWidgetStatSlotTooltip_OnUpdateNodeState, InNodeState) == 0x000000, "Member 'TLUserWidgetStatSlotTooltip_OnUpdateNodeState::InNodeState' has a wrong offset!");

// Function TLClient.TLUserWidgetCraftingMaterialSlotController.OnDimmed
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCraftingMaterialSlotController_OnDimmed final
{
public:
	bool                                          InDimmed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCraftingMaterialSlotController_OnDimmed) == 0x000001, "Wrong alignment on TLUserWidgetCraftingMaterialSlotController_OnDimmed");
static_assert(sizeof(TLUserWidgetCraftingMaterialSlotController_OnDimmed) == 0x000001, "Wrong size on TLUserWidgetCraftingMaterialSlotController_OnDimmed");
static_assert(offsetof(TLUserWidgetCraftingMaterialSlotController_OnDimmed, InDimmed) == 0x000000, "Member 'TLUserWidgetCraftingMaterialSlotController_OnDimmed::InDimmed' has a wrong offset!");

// Function TLClient.TLUserWidgetCraftingSlotAlarm.OnMaterialSufficientUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCraftingSlotAlarm_OnMaterialSufficientUpdate final
{
public:
	bool                                          InSufficient;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCraftingSlotAlarm_OnMaterialSufficientUpdate) == 0x000001, "Wrong alignment on TLUserWidgetCraftingSlotAlarm_OnMaterialSufficientUpdate");
static_assert(sizeof(TLUserWidgetCraftingSlotAlarm_OnMaterialSufficientUpdate) == 0x000001, "Wrong size on TLUserWidgetCraftingSlotAlarm_OnMaterialSufficientUpdate");
static_assert(offsetof(TLUserWidgetCraftingSlotAlarm_OnMaterialSufficientUpdate, InSufficient) == 0x000000, "Member 'TLUserWidgetCraftingSlotAlarm_OnMaterialSufficientUpdate::InSufficient' has a wrong offset!");

// Function TLClient.TLUserWidgetCraftingListPanel.ShowOnboarding
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCraftingListPanel_ShowOnboarding final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCraftingListPanel_ShowOnboarding) == 0x000001, "Wrong alignment on TLUserWidgetCraftingListPanel_ShowOnboarding");
static_assert(sizeof(TLUserWidgetCraftingListPanel_ShowOnboarding) == 0x000001, "Wrong size on TLUserWidgetCraftingListPanel_ShowOnboarding");
static_assert(offsetof(TLUserWidgetCraftingListPanel_ShowOnboarding, InShow) == 0x000000, "Member 'TLUserWidgetCraftingListPanel_ShowOnboarding::InShow' has a wrong offset!");

// Function TLClient.TLUserWidgetCraftingListSlot.OnUpdateCraftable
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCraftingListSlot_OnUpdateCraftable final
{
public:
	bool                                          bIsCraftable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCraftingListSlot_OnUpdateCraftable) == 0x000001, "Wrong alignment on TLUserWidgetCraftingListSlot_OnUpdateCraftable");
static_assert(sizeof(TLUserWidgetCraftingListSlot_OnUpdateCraftable) == 0x000001, "Wrong size on TLUserWidgetCraftingListSlot_OnUpdateCraftable");
static_assert(offsetof(TLUserWidgetCraftingListSlot_OnUpdateCraftable, bIsCraftable) == 0x000000, "Member 'TLUserWidgetCraftingListSlot_OnUpdateCraftable::bIsCraftable' has a wrong offset!");

// Function TLClient.TLUserWidgetWeaponMasteryNodeInterface.OnPlayOpenPending
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWeaponMasteryNodeInterface_OnPlayOpenPending final
{
public:
	bool                                          bInIsTarget;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWeaponMasteryNodeInterface_OnPlayOpenPending) == 0x000001, "Wrong alignment on TLUserWidgetWeaponMasteryNodeInterface_OnPlayOpenPending");
static_assert(sizeof(TLUserWidgetWeaponMasteryNodeInterface_OnPlayOpenPending) == 0x000001, "Wrong size on TLUserWidgetWeaponMasteryNodeInterface_OnPlayOpenPending");
static_assert(offsetof(TLUserWidgetWeaponMasteryNodeInterface_OnPlayOpenPending, bInIsTarget) == 0x000000, "Member 'TLUserWidgetWeaponMasteryNodeInterface_OnPlayOpenPending::bInIsTarget' has a wrong offset!");

// Function TLClient.TLUserWidgetWeaponMasteryNodeInterface.OnUpdateNodeState
// 0x000C (0x000C - 0x0000)
struct TLUserWidgetWeaponMasteryNodeInterface_OnUpdateNodeState final
{
public:
	ETLWeaponMasteryNodeState                     InNodeState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AchievementPercent;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsRootNode;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetWeaponMasteryNodeInterface_OnUpdateNodeState) == 0x000004, "Wrong alignment on TLUserWidgetWeaponMasteryNodeInterface_OnUpdateNodeState");
static_assert(sizeof(TLUserWidgetWeaponMasteryNodeInterface_OnUpdateNodeState) == 0x00000C, "Wrong size on TLUserWidgetWeaponMasteryNodeInterface_OnUpdateNodeState");
static_assert(offsetof(TLUserWidgetWeaponMasteryNodeInterface_OnUpdateNodeState, InNodeState) == 0x000000, "Member 'TLUserWidgetWeaponMasteryNodeInterface_OnUpdateNodeState::InNodeState' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWeaponMasteryNodeInterface_OnUpdateNodeState, AchievementPercent) == 0x000004, "Member 'TLUserWidgetWeaponMasteryNodeInterface_OnUpdateNodeState::AchievementPercent' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWeaponMasteryNodeInterface_OnUpdateNodeState, InIsRootNode) == 0x000008, "Member 'TLUserWidgetWeaponMasteryNodeInterface_OnUpdateNodeState::InIsRootNode' has a wrong offset!");

// Function TLClient.TLUserWidgetCraftingMode.OnRecipeChange
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCraftingMode_OnRecipeChange final
{
public:
	bool                                          InRecipeEmpty;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCraftingMode_OnRecipeChange) == 0x000001, "Wrong alignment on TLUserWidgetCraftingMode_OnRecipeChange");
static_assert(sizeof(TLUserWidgetCraftingMode_OnRecipeChange) == 0x000001, "Wrong size on TLUserWidgetCraftingMode_OnRecipeChange");
static_assert(offsetof(TLUserWidgetCraftingMode_OnRecipeChange, InRecipeEmpty) == 0x000000, "Member 'TLUserWidgetCraftingMode_OnRecipeChange::InRecipeEmpty' has a wrong offset!");

// Function TLClient.TLUserWidgetCraftingMode.OnResultShowUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCraftingMode_OnResultShowUpdate final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCraftingMode_OnResultShowUpdate) == 0x000001, "Wrong alignment on TLUserWidgetCraftingMode_OnResultShowUpdate");
static_assert(sizeof(TLUserWidgetCraftingMode_OnResultShowUpdate) == 0x000001, "Wrong size on TLUserWidgetCraftingMode_OnResultShowUpdate");
static_assert(offsetof(TLUserWidgetCraftingMode_OnResultShowUpdate, InShow) == 0x000000, "Member 'TLUserWidgetCraftingMode_OnResultShowUpdate::InShow' has a wrong offset!");

// Function TLClient.TLUserWidgetDeath.OnGuildRaidMode
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDeath_OnGuildRaidMode final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDeath_OnGuildRaidMode) == 0x000001, "Wrong alignment on TLUserWidgetDeath_OnGuildRaidMode");
static_assert(sizeof(TLUserWidgetDeath_OnGuildRaidMode) == 0x000001, "Wrong size on TLUserWidgetDeath_OnGuildRaidMode");
static_assert(offsetof(TLUserWidgetDeath_OnGuildRaidMode, bInShow) == 0x000000, "Member 'TLUserWidgetDeath_OnGuildRaidMode::bInShow' has a wrong offset!");

// Function TLClient.TLUserWidgetDeath.OnGuildRaidResurrectionCount
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetDeath_OnGuildRaidResurrectionCount final
{
public:
	int32                                         InResurrectionCount;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDeath_OnGuildRaidResurrectionCount) == 0x000004, "Wrong alignment on TLUserWidgetDeath_OnGuildRaidResurrectionCount");
static_assert(sizeof(TLUserWidgetDeath_OnGuildRaidResurrectionCount) == 0x000004, "Wrong size on TLUserWidgetDeath_OnGuildRaidResurrectionCount");
static_assert(offsetof(TLUserWidgetDeath_OnGuildRaidResurrectionCount, InResurrectionCount) == 0x000000, "Member 'TLUserWidgetDeath_OnGuildRaidResurrectionCount::InResurrectionCount' has a wrong offset!");

// Function TLClient.TLUserWidgetDeath.OnRecoveryCostButtonHovered
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDeath_OnRecoveryCostButtonHovered final
{
public:
	bool                                          InIsAfterRecovery;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDeath_OnRecoveryCostButtonHovered) == 0x000001, "Wrong alignment on TLUserWidgetDeath_OnRecoveryCostButtonHovered");
static_assert(sizeof(TLUserWidgetDeath_OnRecoveryCostButtonHovered) == 0x000001, "Wrong size on TLUserWidgetDeath_OnRecoveryCostButtonHovered");
static_assert(offsetof(TLUserWidgetDeath_OnRecoveryCostButtonHovered, InIsAfterRecovery) == 0x000000, "Member 'TLUserWidgetDeath_OnRecoveryCostButtonHovered::InIsAfterRecovery' has a wrong offset!");

// Function TLClient.TLUserWidgetDeath.OnRecoveryCostButtonUnHovered
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDeath_OnRecoveryCostButtonUnHovered final
{
public:
	bool                                          InIsAfterRecovery;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDeath_OnRecoveryCostButtonUnHovered) == 0x000001, "Wrong alignment on TLUserWidgetDeath_OnRecoveryCostButtonUnHovered");
static_assert(sizeof(TLUserWidgetDeath_OnRecoveryCostButtonUnHovered) == 0x000001, "Wrong size on TLUserWidgetDeath_OnRecoveryCostButtonUnHovered");
static_assert(offsetof(TLUserWidgetDeath_OnRecoveryCostButtonUnHovered, InIsAfterRecovery) == 0x000000, "Member 'TLUserWidgetDeath_OnRecoveryCostButtonUnHovered::InIsAfterRecovery' has a wrong offset!");

// Function TLClient.TLUserWidgetDeath.OnRecoveryDeathPenaltySucceed
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDeath_OnRecoveryDeathPenaltySucceed final
{
public:
	bool                                          InIsShowDescription;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDeath_OnRecoveryDeathPenaltySucceed) == 0x000001, "Wrong alignment on TLUserWidgetDeath_OnRecoveryDeathPenaltySucceed");
static_assert(sizeof(TLUserWidgetDeath_OnRecoveryDeathPenaltySucceed) == 0x000001, "Wrong size on TLUserWidgetDeath_OnRecoveryDeathPenaltySucceed");
static_assert(offsetof(TLUserWidgetDeath_OnRecoveryDeathPenaltySucceed, InIsShowDescription) == 0x000000, "Member 'TLUserWidgetDeath_OnRecoveryDeathPenaltySucceed::InIsShowDescription' has a wrong offset!");

// Function TLClient.TLUserWidgetDeath.OnShowDeathPenaltyUI
// 0x0003 (0x0003 - 0x0000)
struct TLUserWidgetDeath_OnShowDeathPenaltyUI final
{
public:
	bool                                          InIsCanRecovery;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsRecoveryToFreeCoin;                            // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsShowDescription;                               // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDeath_OnShowDeathPenaltyUI) == 0x000001, "Wrong alignment on TLUserWidgetDeath_OnShowDeathPenaltyUI");
static_assert(sizeof(TLUserWidgetDeath_OnShowDeathPenaltyUI) == 0x000003, "Wrong size on TLUserWidgetDeath_OnShowDeathPenaltyUI");
static_assert(offsetof(TLUserWidgetDeath_OnShowDeathPenaltyUI, InIsCanRecovery) == 0x000000, "Member 'TLUserWidgetDeath_OnShowDeathPenaltyUI::InIsCanRecovery' has a wrong offset!");
static_assert(offsetof(TLUserWidgetDeath_OnShowDeathPenaltyUI, InIsRecoveryToFreeCoin) == 0x000001, "Member 'TLUserWidgetDeath_OnShowDeathPenaltyUI::InIsRecoveryToFreeCoin' has a wrong offset!");
static_assert(offsetof(TLUserWidgetDeath_OnShowDeathPenaltyUI, InIsShowDescription) == 0x000002, "Member 'TLUserWidgetDeath_OnShowDeathPenaltyUI::InIsShowDescription' has a wrong offset!");

// Function TLClient.TLUserWidgetDeath.OnShowDeathUI
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDeath_OnShowDeathUI final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDeath_OnShowDeathUI) == 0x000001, "Wrong alignment on TLUserWidgetDeath_OnShowDeathUI");
static_assert(sizeof(TLUserWidgetDeath_OnShowDeathUI) == 0x000001, "Wrong size on TLUserWidgetDeath_OnShowDeathUI");
static_assert(offsetof(TLUserWidgetDeath_OnShowDeathUI, InIsShow) == 0x000000, "Member 'TLUserWidgetDeath_OnShowDeathUI::InIsShow' has a wrong offset!");

// Function TLClient.TLUserWidgetDeath.OnUpdateMemberShip
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDeath_OnUpdateMemberShip final
{
public:
	bool                                          InIsActivate;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDeath_OnUpdateMemberShip) == 0x000001, "Wrong alignment on TLUserWidgetDeath_OnUpdateMemberShip");
static_assert(sizeof(TLUserWidgetDeath_OnUpdateMemberShip) == 0x000001, "Wrong size on TLUserWidgetDeath_OnUpdateMemberShip");
static_assert(offsetof(TLUserWidgetDeath_OnUpdateMemberShip, InIsActivate) == 0x000000, "Member 'TLUserWidgetDeath_OnUpdateMemberShip::InIsActivate' has a wrong offset!");

// Function TLClient.TLUserWidgetDeath.OnUpdateUIHideMode
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDeath_OnUpdateUIHideMode final
{
public:
	bool                                          bInSetMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDeath_OnUpdateUIHideMode) == 0x000001, "Wrong alignment on TLUserWidgetDeath_OnUpdateUIHideMode");
static_assert(sizeof(TLUserWidgetDeath_OnUpdateUIHideMode) == 0x000001, "Wrong size on TLUserWidgetDeath_OnUpdateUIHideMode");
static_assert(offsetof(TLUserWidgetDeath_OnUpdateUIHideMode, bInSetMode) == 0x000000, "Member 'TLUserWidgetDeath_OnUpdateUIHideMode::bInSetMode' has a wrong offset!");

// Function TLClient.TLUserWidgetCraftingResultPanel.OnCraftMultiFinish
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetCraftingResultPanel_OnCraftMultiFinish final
{
public:
	int32                                         ResultSlotCount;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECraftingResultType                           ResultType1;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECraftingResultType                           ResultType2;                                       // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECraftingResultType                           ResultType3;                                       // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetCraftingResultPanel_OnCraftMultiFinish) == 0x000004, "Wrong alignment on TLUserWidgetCraftingResultPanel_OnCraftMultiFinish");
static_assert(sizeof(TLUserWidgetCraftingResultPanel_OnCraftMultiFinish) == 0x000008, "Wrong size on TLUserWidgetCraftingResultPanel_OnCraftMultiFinish");
static_assert(offsetof(TLUserWidgetCraftingResultPanel_OnCraftMultiFinish, ResultSlotCount) == 0x000000, "Member 'TLUserWidgetCraftingResultPanel_OnCraftMultiFinish::ResultSlotCount' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCraftingResultPanel_OnCraftMultiFinish, ResultType1) == 0x000004, "Member 'TLUserWidgetCraftingResultPanel_OnCraftMultiFinish::ResultType1' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCraftingResultPanel_OnCraftMultiFinish, ResultType2) == 0x000005, "Member 'TLUserWidgetCraftingResultPanel_OnCraftMultiFinish::ResultType2' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCraftingResultPanel_OnCraftMultiFinish, ResultType3) == 0x000006, "Member 'TLUserWidgetCraftingResultPanel_OnCraftMultiFinish::ResultType3' has a wrong offset!");

// Function TLClient.TLUserWidgetCraftingResultPanel.OnResultPanelHide
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCraftingResultPanel_OnResultPanelHide final
{
public:
	bool                                          bInMultiCraft;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCraftingResultPanel_OnResultPanelHide) == 0x000001, "Wrong alignment on TLUserWidgetCraftingResultPanel_OnResultPanelHide");
static_assert(sizeof(TLUserWidgetCraftingResultPanel_OnResultPanelHide) == 0x000001, "Wrong size on TLUserWidgetCraftingResultPanel_OnResultPanelHide");
static_assert(offsetof(TLUserWidgetCraftingResultPanel_OnResultPanelHide, bInMultiCraft) == 0x000000, "Member 'TLUserWidgetCraftingResultPanel_OnResultPanelHide::bInMultiCraft' has a wrong offset!");

// Function TLClient.TLUserWidgetCraftingResultPanel.OnResultPanelShow
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCraftingResultPanel_OnResultPanelShow final
{
public:
	bool                                          bInMultiCraft;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCraftingResultPanel_OnResultPanelShow) == 0x000001, "Wrong alignment on TLUserWidgetCraftingResultPanel_OnResultPanelShow");
static_assert(sizeof(TLUserWidgetCraftingResultPanel_OnResultPanelShow) == 0x000001, "Wrong size on TLUserWidgetCraftingResultPanel_OnResultPanelShow");
static_assert(offsetof(TLUserWidgetCraftingResultPanel_OnResultPanelShow, bInMultiCraft) == 0x000000, "Member 'TLUserWidgetCraftingResultPanel_OnResultPanelShow::bInMultiCraft' has a wrong offset!");

// Function TLClient.TLUserWidgetOccupationGuideBase.OnOwnerGuildRelationByMe
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetOccupationGuideBase_OnOwnerGuildRelationByMe final
{
public:
	EGuildRelationship                            InRelation;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOccupationGuideBase_OnOwnerGuildRelationByMe) == 0x000001, "Wrong alignment on TLUserWidgetOccupationGuideBase_OnOwnerGuildRelationByMe");
static_assert(sizeof(TLUserWidgetOccupationGuideBase_OnOwnerGuildRelationByMe) == 0x000001, "Wrong size on TLUserWidgetOccupationGuideBase_OnOwnerGuildRelationByMe");
static_assert(offsetof(TLUserWidgetOccupationGuideBase_OnOwnerGuildRelationByMe, InRelation) == 0x000000, "Member 'TLUserWidgetOccupationGuideBase_OnOwnerGuildRelationByMe::InRelation' has a wrong offset!");

// Function TLClient.TLUserWidgetCreatureSubRankItem.OnTypeUpdated
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCreatureSubRankItem_OnTypeUpdated final
{
public:
	ETLCreatureSubRankItemType                    InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCreatureSubRankItem_OnTypeUpdated) == 0x000001, "Wrong alignment on TLUserWidgetCreatureSubRankItem_OnTypeUpdated");
static_assert(sizeof(TLUserWidgetCreatureSubRankItem_OnTypeUpdated) == 0x000001, "Wrong size on TLUserWidgetCreatureSubRankItem_OnTypeUpdated");
static_assert(offsetof(TLUserWidgetCreatureSubRankItem_OnTypeUpdated, InType) == 0x000000, "Member 'TLUserWidgetCreatureSubRankItem_OnTypeUpdated::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetCrosshair.OnChangeCrosshairCenterCustom
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCrosshair_OnChangeCrosshairCenterCustom final
{
public:
	bool                                          bCustomed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCrosshair_OnChangeCrosshairCenterCustom) == 0x000001, "Wrong alignment on TLUserWidgetCrosshair_OnChangeCrosshairCenterCustom");
static_assert(sizeof(TLUserWidgetCrosshair_OnChangeCrosshairCenterCustom) == 0x000001, "Wrong size on TLUserWidgetCrosshair_OnChangeCrosshairCenterCustom");
static_assert(offsetof(TLUserWidgetCrosshair_OnChangeCrosshairCenterCustom, bCustomed) == 0x000000, "Member 'TLUserWidgetCrosshair_OnChangeCrosshairCenterCustom::bCustomed' has a wrong offset!");

// Function TLClient.TLUserWidgetCrosshair.OnChangeCrosshairType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCrosshair_OnChangeCrosshairType final
{
public:
	ETLCrosshairType                              InCrosshairType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCrosshair_OnChangeCrosshairType) == 0x000001, "Wrong alignment on TLUserWidgetCrosshair_OnChangeCrosshairType");
static_assert(sizeof(TLUserWidgetCrosshair_OnChangeCrosshairType) == 0x000001, "Wrong size on TLUserWidgetCrosshair_OnChangeCrosshairType");
static_assert(offsetof(TLUserWidgetCrosshair_OnChangeCrosshairType, InCrosshairType) == 0x000000, "Member 'TLUserWidgetCrosshair_OnChangeCrosshairType::InCrosshairType' has a wrong offset!");

// Function TLClient.TLUserWidgetCrosshair.OnMinimizeCrosshair
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCrosshair_OnMinimizeCrosshair final
{
public:
	bool                                          bInMinimize;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCrosshair_OnMinimizeCrosshair) == 0x000001, "Wrong alignment on TLUserWidgetCrosshair_OnMinimizeCrosshair");
static_assert(sizeof(TLUserWidgetCrosshair_OnMinimizeCrosshair) == 0x000001, "Wrong size on TLUserWidgetCrosshair_OnMinimizeCrosshair");
static_assert(offsetof(TLUserWidgetCrosshair_OnMinimizeCrosshair, bInMinimize) == 0x000000, "Member 'TLUserWidgetCrosshair_OnMinimizeCrosshair::bInMinimize' has a wrong offset!");

// Function TLClient.TLUserWidgetCurrency.IsShowMoneyWidget
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetCurrency_IsShowMoneyWidget final
{
public:
	uint8                                         InFlag;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCurrency_IsShowMoneyWidget) == 0x000001, "Wrong alignment on TLUserWidgetCurrency_IsShowMoneyWidget");
static_assert(sizeof(TLUserWidgetCurrency_IsShowMoneyWidget) == 0x000002, "Wrong size on TLUserWidgetCurrency_IsShowMoneyWidget");
static_assert(offsetof(TLUserWidgetCurrency_IsShowMoneyWidget, InFlag) == 0x000000, "Member 'TLUserWidgetCurrency_IsShowMoneyWidget::InFlag' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCurrency_IsShowMoneyWidget, ReturnValue) == 0x000001, "Member 'TLUserWidgetCurrency_IsShowMoneyWidget::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetCurrency.ShowMoneyWidgetWithValue
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetCurrency_ShowMoneyWidgetWithValue final
{
public:
	EMoneyType                                    InMoneyType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InShow;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCurrency_ShowMoneyWidgetWithValue) == 0x000001, "Wrong alignment on TLUserWidgetCurrency_ShowMoneyWidgetWithValue");
static_assert(sizeof(TLUserWidgetCurrency_ShowMoneyWidgetWithValue) == 0x000002, "Wrong size on TLUserWidgetCurrency_ShowMoneyWidgetWithValue");
static_assert(offsetof(TLUserWidgetCurrency_ShowMoneyWidgetWithValue, InMoneyType) == 0x000000, "Member 'TLUserWidgetCurrency_ShowMoneyWidgetWithValue::InMoneyType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCurrency_ShowMoneyWidgetWithValue, InShow) == 0x000001, "Member 'TLUserWidgetCurrency_ShowMoneyWidgetWithValue::InShow' has a wrong offset!");

// Function TLClient.TLUserWidgetCursor.OnCursorFXEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCursor_OnCursorFXEvent final
{
public:
	bool                                          bStronglyFX;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCursor_OnCursorFXEvent) == 0x000001, "Wrong alignment on TLUserWidgetCursor_OnCursorFXEvent");
static_assert(sizeof(TLUserWidgetCursor_OnCursorFXEvent) == 0x000001, "Wrong size on TLUserWidgetCursor_OnCursorFXEvent");
static_assert(offsetof(TLUserWidgetCursor_OnCursorFXEvent, bStronglyFX) == 0x000000, "Member 'TLUserWidgetCursor_OnCursorFXEvent::bStronglyFX' has a wrong offset!");

// Function TLClient.TLUserWidgetMemorialRecord.UpdateRecordStatus
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMemorialRecord_UpdateRecordStatus final
{
public:
	EMemorialStatus                               InStatus;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMemorialRecord_UpdateRecordStatus) == 0x000001, "Wrong alignment on TLUserWidgetMemorialRecord_UpdateRecordStatus");
static_assert(sizeof(TLUserWidgetMemorialRecord_UpdateRecordStatus) == 0x000001, "Wrong size on TLUserWidgetMemorialRecord_UpdateRecordStatus");
static_assert(offsetof(TLUserWidgetMemorialRecord_UpdateRecordStatus, InStatus) == 0x000000, "Member 'TLUserWidgetMemorialRecord_UpdateRecordStatus::InStatus' has a wrong offset!");

// Function TLClient.TLUserWidgetCustomizeIcon.AddIcon
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetCustomizeIcon_AddIcon final
{
public:
	int32                                         InUID;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        InIcon;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCustomizeIcon_AddIcon) == 0x000008, "Wrong alignment on TLUserWidgetCustomizeIcon_AddIcon");
static_assert(sizeof(TLUserWidgetCustomizeIcon_AddIcon) == 0x000020, "Wrong size on TLUserWidgetCustomizeIcon_AddIcon");
static_assert(offsetof(TLUserWidgetCustomizeIcon_AddIcon, InUID) == 0x000000, "Member 'TLUserWidgetCustomizeIcon_AddIcon::InUID' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCustomizeIcon_AddIcon, InIcon) == 0x000008, "Member 'TLUserWidgetCustomizeIcon_AddIcon::InIcon' has a wrong offset!");

// Function TLClient.TLUserWidgetCustomizeColorPicker.CreateColor
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCustomizeColorPicker_CreateColor final
{
public:
	ECustomizeUIType                              InUIType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCustomizeColorPicker_CreateColor) == 0x000001, "Wrong alignment on TLUserWidgetCustomizeColorPicker_CreateColor");
static_assert(sizeof(TLUserWidgetCustomizeColorPicker_CreateColor) == 0x000001, "Wrong size on TLUserWidgetCustomizeColorPicker_CreateColor");
static_assert(offsetof(TLUserWidgetCustomizeColorPicker_CreateColor, InUIType) == 0x000000, "Member 'TLUserWidgetCustomizeColorPicker_CreateColor::InUIType' has a wrong offset!");

// Function TLClient.TLUserWidgetCustomizeColorPicker.GetActualColor
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetCustomizeColorPicker_GetActualColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCustomizeColorPicker_GetActualColor) == 0x000004, "Wrong alignment on TLUserWidgetCustomizeColorPicker_GetActualColor");
static_assert(sizeof(TLUserWidgetCustomizeColorPicker_GetActualColor) == 0x000010, "Wrong size on TLUserWidgetCustomizeColorPicker_GetActualColor");
static_assert(offsetof(TLUserWidgetCustomizeColorPicker_GetActualColor, ReturnValue) == 0x000000, "Member 'TLUserWidgetCustomizeColorPicker_GetActualColor::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetCustomizeColorPicker.SetTitleStringId
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetCustomizeColorPicker_SetTitleStringId final
{
public:
	class FName                                   InStringId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCustomizeColorPicker_SetTitleStringId) == 0x000004, "Wrong alignment on TLUserWidgetCustomizeColorPicker_SetTitleStringId");
static_assert(sizeof(TLUserWidgetCustomizeColorPicker_SetTitleStringId) == 0x000008, "Wrong size on TLUserWidgetCustomizeColorPicker_SetTitleStringId");
static_assert(offsetof(TLUserWidgetCustomizeColorPicker_SetTitleStringId, InStringId) == 0x000000, "Member 'TLUserWidgetCustomizeColorPicker_SetTitleStringId::InStringId' has a wrong offset!");

// Function TLClient.TLUserWidgetCustomizeColorPicker.SetValue
// 0x000C (0x000C - 0x0000)
struct TLUserWidgetCustomizeColorPicker_SetValue final
{
public:
	struct FVector                                InValue;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCustomizeColorPicker_SetValue) == 0x000004, "Wrong alignment on TLUserWidgetCustomizeColorPicker_SetValue");
static_assert(sizeof(TLUserWidgetCustomizeColorPicker_SetValue) == 0x00000C, "Wrong size on TLUserWidgetCustomizeColorPicker_SetValue");
static_assert(offsetof(TLUserWidgetCustomizeColorPicker_SetValue, InValue) == 0x000000, "Member 'TLUserWidgetCustomizeColorPicker_SetValue::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetCustomizePresetBlender.GetAlpha
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetCustomizePresetBlender_GetAlpha final
{
public:
	ECustomizeUIPresetBlendPoints                 TargetPoint;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCustomizePresetBlender_GetAlpha) == 0x000004, "Wrong alignment on TLUserWidgetCustomizePresetBlender_GetAlpha");
static_assert(sizeof(TLUserWidgetCustomizePresetBlender_GetAlpha) == 0x000008, "Wrong size on TLUserWidgetCustomizePresetBlender_GetAlpha");
static_assert(offsetof(TLUserWidgetCustomizePresetBlender_GetAlpha, TargetPoint) == 0x000000, "Member 'TLUserWidgetCustomizePresetBlender_GetAlpha::TargetPoint' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCustomizePresetBlender_GetAlpha, ReturnValue) == 0x000004, "Member 'TLUserWidgetCustomizePresetBlender_GetAlpha::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetDynamicEventIcon.OnUpdateAvailable
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDynamicEventIcon_OnUpdateAvailable final
{
public:
	bool                                          InIsAvaliable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDynamicEventIcon_OnUpdateAvailable) == 0x000001, "Wrong alignment on TLUserWidgetDynamicEventIcon_OnUpdateAvailable");
static_assert(sizeof(TLUserWidgetDynamicEventIcon_OnUpdateAvailable) == 0x000001, "Wrong size on TLUserWidgetDynamicEventIcon_OnUpdateAvailable");
static_assert(offsetof(TLUserWidgetDynamicEventIcon_OnUpdateAvailable, InIsAvaliable) == 0x000000, "Member 'TLUserWidgetDynamicEventIcon_OnUpdateAvailable::InIsAvaliable' has a wrong offset!");

// Function TLClient.TLUserWidgetDynamicEventIcon.OnUpdateInfo
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDynamicEventIcon_OnUpdateInfo final
{
public:
	ETLDEEventEffectStorePointState               StorePointState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDynamicEventIcon_OnUpdateInfo) == 0x000001, "Wrong alignment on TLUserWidgetDynamicEventIcon_OnUpdateInfo");
static_assert(sizeof(TLUserWidgetDynamicEventIcon_OnUpdateInfo) == 0x000001, "Wrong size on TLUserWidgetDynamicEventIcon_OnUpdateInfo");
static_assert(offsetof(TLUserWidgetDynamicEventIcon_OnUpdateInfo, StorePointState) == 0x000000, "Member 'TLUserWidgetDynamicEventIcon_OnUpdateInfo::StorePointState' has a wrong offset!");

// Function TLClient.TLUserWidgetDynamicEventIcon.OnUpdateMyCount
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetDynamicEventIcon_OnUpdateMyCount final
{
public:
	int32                                         InMyCount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDynamicEventIcon_OnUpdateMyCount) == 0x000004, "Wrong alignment on TLUserWidgetDynamicEventIcon_OnUpdateMyCount");
static_assert(sizeof(TLUserWidgetDynamicEventIcon_OnUpdateMyCount) == 0x000004, "Wrong size on TLUserWidgetDynamicEventIcon_OnUpdateMyCount");
static_assert(offsetof(TLUserWidgetDynamicEventIcon_OnUpdateMyCount, InMyCount) == 0x000000, "Member 'TLUserWidgetDynamicEventIcon_OnUpdateMyCount::InMyCount' has a wrong offset!");

// Function TLClient.TLUserWidgetCustomizeHighCategoryFrames.OnActiveWidgetChange
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetCustomizeHighCategoryFrames_OnActiveWidgetChange final
{
public:
	int32                                         InPrevIdx;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCurIdx;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCustomizeHighCategoryFrames_OnActiveWidgetChange) == 0x000004, "Wrong alignment on TLUserWidgetCustomizeHighCategoryFrames_OnActiveWidgetChange");
static_assert(sizeof(TLUserWidgetCustomizeHighCategoryFrames_OnActiveWidgetChange) == 0x000008, "Wrong size on TLUserWidgetCustomizeHighCategoryFrames_OnActiveWidgetChange");
static_assert(offsetof(TLUserWidgetCustomizeHighCategoryFrames_OnActiveWidgetChange, InPrevIdx) == 0x000000, "Member 'TLUserWidgetCustomizeHighCategoryFrames_OnActiveWidgetChange::InPrevIdx' has a wrong offset!");
static_assert(offsetof(TLUserWidgetCustomizeHighCategoryFrames_OnActiveWidgetChange, InCurIdx) == 0x000004, "Member 'TLUserWidgetCustomizeHighCategoryFrames_OnActiveWidgetChange::InCurIdx' has a wrong offset!");

// Function TLClient.TLUserWidgetCustomizeMainFrame.SetMainWidget
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetCustomizeMainFrame_SetMainWidget final
{
public:
	class UTLUserWidgetCustomizeMain*             InMainWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCustomizeMainFrame_SetMainWidget) == 0x000008, "Wrong alignment on TLUserWidgetCustomizeMainFrame_SetMainWidget");
static_assert(sizeof(TLUserWidgetCustomizeMainFrame_SetMainWidget) == 0x000008, "Wrong size on TLUserWidgetCustomizeMainFrame_SetMainWidget");
static_assert(offsetof(TLUserWidgetCustomizeMainFrame_SetMainWidget, InMainWidget) == 0x000000, "Member 'TLUserWidgetCustomizeMainFrame_SetMainWidget::InMainWidget' has a wrong offset!");

// Function TLClient.TLUserWidgetRestorationHudTooltip.OnUpdateMembershipState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRestorationHudTooltip_OnUpdateMembershipState final
{
public:
	bool                                          bActivate;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRestorationHudTooltip_OnUpdateMembershipState) == 0x000001, "Wrong alignment on TLUserWidgetRestorationHudTooltip_OnUpdateMembershipState");
static_assert(sizeof(TLUserWidgetRestorationHudTooltip_OnUpdateMembershipState) == 0x000001, "Wrong size on TLUserWidgetRestorationHudTooltip_OnUpdateMembershipState");
static_assert(offsetof(TLUserWidgetRestorationHudTooltip_OnUpdateMembershipState, bActivate) == 0x000000, "Member 'TLUserWidgetRestorationHudTooltip_OnUpdateMembershipState::bActivate' has a wrong offset!");

// Function TLClient.TLUserWidgetPVPHistoryListFrame.OnFilterGuide
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPVPHistoryListFrame_OnFilterGuide final
{
public:
	ETLPVPHistoryEventType                        InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPVPHistoryListFrame_OnFilterGuide) == 0x000001, "Wrong alignment on TLUserWidgetPVPHistoryListFrame_OnFilterGuide");
static_assert(sizeof(TLUserWidgetPVPHistoryListFrame_OnFilterGuide) == 0x000001, "Wrong size on TLUserWidgetPVPHistoryListFrame_OnFilterGuide");
static_assert(offsetof(TLUserWidgetPVPHistoryListFrame_OnFilterGuide, InType) == 0x000000, "Member 'TLUserWidgetPVPHistoryListFrame_OnFilterGuide::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetDungeonRewardPoint.OnUpdateDungeonRewardPoint
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDungeonRewardPoint_OnUpdateDungeonRewardPoint final
{
public:
	bool                                          bPositive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDungeonRewardPoint_OnUpdateDungeonRewardPoint) == 0x000001, "Wrong alignment on TLUserWidgetDungeonRewardPoint_OnUpdateDungeonRewardPoint");
static_assert(sizeof(TLUserWidgetDungeonRewardPoint_OnUpdateDungeonRewardPoint) == 0x000001, "Wrong size on TLUserWidgetDungeonRewardPoint_OnUpdateDungeonRewardPoint");
static_assert(offsetof(TLUserWidgetDungeonRewardPoint_OnUpdateDungeonRewardPoint, bPositive) == 0x000000, "Member 'TLUserWidgetDungeonRewardPoint_OnUpdateDungeonRewardPoint::bPositive' has a wrong offset!");

// Function TLClient.TLUserWidgetDungeonWaypointItem.OnLockState
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetDungeonWaypointItem_OnLockState final
{
public:
	bool                                          InIsLock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDungeonWaypointLockType                      InType;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDungeonWaypointItem_OnLockState) == 0x000001, "Wrong alignment on TLUserWidgetDungeonWaypointItem_OnLockState");
static_assert(sizeof(TLUserWidgetDungeonWaypointItem_OnLockState) == 0x000002, "Wrong size on TLUserWidgetDungeonWaypointItem_OnLockState");
static_assert(offsetof(TLUserWidgetDungeonWaypointItem_OnLockState, InIsLock) == 0x000000, "Member 'TLUserWidgetDungeonWaypointItem_OnLockState::InIsLock' has a wrong offset!");
static_assert(offsetof(TLUserWidgetDungeonWaypointItem_OnLockState, InType) == 0x000001, "Member 'TLUserWidgetDungeonWaypointItem_OnLockState::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetDungeonWaypointItem.OnSelectedSlot
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDungeonWaypointItem_OnSelectedSlot final
{
public:
	bool                                          InSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDungeonWaypointItem_OnSelectedSlot) == 0x000001, "Wrong alignment on TLUserWidgetDungeonWaypointItem_OnSelectedSlot");
static_assert(sizeof(TLUserWidgetDungeonWaypointItem_OnSelectedSlot) == 0x000001, "Wrong size on TLUserWidgetDungeonWaypointItem_OnSelectedSlot");
static_assert(offsetof(TLUserWidgetDungeonWaypointItem_OnSelectedSlot, InSelected) == 0x000000, "Member 'TLUserWidgetDungeonWaypointItem_OnSelectedSlot::InSelected' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapRegionInfoSlotItem.OnFeverItem
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWorldMapRegionInfoSlotItem_OnFeverItem final
{
public:
	bool                                          InIsFeverItem;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapRegionInfoSlotItem_OnFeverItem) == 0x000001, "Wrong alignment on TLUserWidgetWorldMapRegionInfoSlotItem_OnFeverItem");
static_assert(sizeof(TLUserWidgetWorldMapRegionInfoSlotItem_OnFeverItem) == 0x000001, "Wrong size on TLUserWidgetWorldMapRegionInfoSlotItem_OnFeverItem");
static_assert(offsetof(TLUserWidgetWorldMapRegionInfoSlotItem_OnFeverItem, InIsFeverItem) == 0x000000, "Member 'TLUserWidgetWorldMapRegionInfoSlotItem_OnFeverItem::InIsFeverItem' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapRegionInfoSlotItem.OnUpdateEnvironmentFlag
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetWorldMapRegionInfoSlotItem_OnUpdateEnvironmentFlag final
{
public:
	int32                                         InEnvironmentFlag;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapRegionInfoSlotItem_OnUpdateEnvironmentFlag) == 0x000004, "Wrong alignment on TLUserWidgetWorldMapRegionInfoSlotItem_OnUpdateEnvironmentFlag");
static_assert(sizeof(TLUserWidgetWorldMapRegionInfoSlotItem_OnUpdateEnvironmentFlag) == 0x000004, "Wrong size on TLUserWidgetWorldMapRegionInfoSlotItem_OnUpdateEnvironmentFlag");
static_assert(offsetof(TLUserWidgetWorldMapRegionInfoSlotItem_OnUpdateEnvironmentFlag, InEnvironmentFlag) == 0x000000, "Member 'TLUserWidgetWorldMapRegionInfoSlotItem_OnUpdateEnvironmentFlag::InEnvironmentFlag' has a wrong offset!");

// Function TLClient.TLUserWidgetPolymorphGrowthPanel.OnGrowUpCompleted
// 0x0050 (0x0050 - 0x0000)
struct TLUserWidgetPolymorphGrowthPanel_OnGrowUpCompleted final
{
public:
	struct FTLGrowthPendingData                   InGrowthPendingData;                               // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPolymorphGrowthPanel_OnGrowUpCompleted) == 0x000008, "Wrong alignment on TLUserWidgetPolymorphGrowthPanel_OnGrowUpCompleted");
static_assert(sizeof(TLUserWidgetPolymorphGrowthPanel_OnGrowUpCompleted) == 0x000050, "Wrong size on TLUserWidgetPolymorphGrowthPanel_OnGrowUpCompleted");
static_assert(offsetof(TLUserWidgetPolymorphGrowthPanel_OnGrowUpCompleted, InGrowthPendingData) == 0x000000, "Member 'TLUserWidgetPolymorphGrowthPanel_OnGrowUpCompleted::InGrowthPendingData' has a wrong offset!");

// Function TLClient.TLUserWidgetPolymorphGrowthPanel.OnLevelChanged
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetPolymorphGrowthPanel_OnLevelChanged final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxLevel;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPolymorphGrowthPanel_OnLevelChanged) == 0x000004, "Wrong alignment on TLUserWidgetPolymorphGrowthPanel_OnLevelChanged");
static_assert(sizeof(TLUserWidgetPolymorphGrowthPanel_OnLevelChanged) == 0x000008, "Wrong size on TLUserWidgetPolymorphGrowthPanel_OnLevelChanged");
static_assert(offsetof(TLUserWidgetPolymorphGrowthPanel_OnLevelChanged, InLevel) == 0x000000, "Member 'TLUserWidgetPolymorphGrowthPanel_OnLevelChanged::InLevel' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPolymorphGrowthPanel_OnLevelChanged, InMaxLevel) == 0x000004, "Member 'TLUserWidgetPolymorphGrowthPanel_OnLevelChanged::InMaxLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetPolymorphGrowthPanel.OnPointChanged
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetPolymorphGrowthPanel_OnPointChanged final
{
public:
	int32                                         InChancePoint;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InExpPoint;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPolymorphGrowthPanel_OnPointChanged) == 0x000004, "Wrong alignment on TLUserWidgetPolymorphGrowthPanel_OnPointChanged");
static_assert(sizeof(TLUserWidgetPolymorphGrowthPanel_OnPointChanged) == 0x000008, "Wrong size on TLUserWidgetPolymorphGrowthPanel_OnPointChanged");
static_assert(offsetof(TLUserWidgetPolymorphGrowthPanel_OnPointChanged, InChancePoint) == 0x000000, "Member 'TLUserWidgetPolymorphGrowthPanel_OnPointChanged::InChancePoint' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPolymorphGrowthPanel_OnPointChanged, InExpPoint) == 0x000004, "Member 'TLUserWidgetPolymorphGrowthPanel_OnPointChanged::InExpPoint' has a wrong offset!");

// Function TLClient.TLUserWidgetDynamicEventGuideTitle02.OnPvpMode
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDynamicEventGuideTitle02_OnPvpMode final
{
public:
	bool                                          IsInPvpMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDynamicEventGuideTitle02_OnPvpMode) == 0x000001, "Wrong alignment on TLUserWidgetDynamicEventGuideTitle02_OnPvpMode");
static_assert(sizeof(TLUserWidgetDynamicEventGuideTitle02_OnPvpMode) == 0x000001, "Wrong size on TLUserWidgetDynamicEventGuideTitle02_OnPvpMode");
static_assert(offsetof(TLUserWidgetDynamicEventGuideTitle02_OnPvpMode, IsInPvpMode) == 0x000000, "Member 'TLUserWidgetDynamicEventGuideTitle02_OnPvpMode::IsInPvpMode' has a wrong offset!");

// Function TLClient.TLUserWidgetDynamicEventGuideTitle03.OnPvpMode
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDynamicEventGuideTitle03_OnPvpMode final
{
public:
	bool                                          IsInPvpMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDynamicEventGuideTitle03_OnPvpMode) == 0x000001, "Wrong alignment on TLUserWidgetDynamicEventGuideTitle03_OnPvpMode");
static_assert(sizeof(TLUserWidgetDynamicEventGuideTitle03_OnPvpMode) == 0x000001, "Wrong size on TLUserWidgetDynamicEventGuideTitle03_OnPvpMode");
static_assert(offsetof(TLUserWidgetDynamicEventGuideTitle03_OnPvpMode, IsInPvpMode) == 0x000000, "Member 'TLUserWidgetDynamicEventGuideTitle03_OnPvpMode::IsInPvpMode' has a wrong offset!");

// Function TLClient.TLUserWidgetDynamicEventGuideWidgetTooltip.OnWarehouseValueType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDynamicEventGuideWidgetTooltip_OnWarehouseValueType final
{
public:
	ETLDynamicEventWarehouseValueType             InValueType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDynamicEventGuideWidgetTooltip_OnWarehouseValueType) == 0x000001, "Wrong alignment on TLUserWidgetDynamicEventGuideWidgetTooltip_OnWarehouseValueType");
static_assert(sizeof(TLUserWidgetDynamicEventGuideWidgetTooltip_OnWarehouseValueType) == 0x000001, "Wrong size on TLUserWidgetDynamicEventGuideWidgetTooltip_OnWarehouseValueType");
static_assert(offsetof(TLUserWidgetDynamicEventGuideWidgetTooltip_OnWarehouseValueType, InValueType) == 0x000000, "Member 'TLUserWidgetDynamicEventGuideWidgetTooltip_OnWarehouseValueType::InValueType' has a wrong offset!");

// Function TLClient.TLUserWidgetRequestSlot.SetTitleText
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetRequestSlot_SetTitleText final
{
public:
	class FText                                   InTitle;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRequestSlot_SetTitleText) == 0x000008, "Wrong alignment on TLUserWidgetRequestSlot_SetTitleText");
static_assert(sizeof(TLUserWidgetRequestSlot_SetTitleText) == 0x000018, "Wrong size on TLUserWidgetRequestSlot_SetTitleText");
static_assert(offsetof(TLUserWidgetRequestSlot_SetTitleText, InTitle) == 0x000000, "Member 'TLUserWidgetRequestSlot_SetTitleText::InTitle' has a wrong offset!");

// Function TLClient.TLUserWidgetDynamicEventPhaseFrame.OnRepeatSteps
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDynamicEventPhaseFrame_OnRepeatSteps final
{
public:
	bool                                          InOn;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDynamicEventPhaseFrame_OnRepeatSteps) == 0x000001, "Wrong alignment on TLUserWidgetDynamicEventPhaseFrame_OnRepeatSteps");
static_assert(sizeof(TLUserWidgetDynamicEventPhaseFrame_OnRepeatSteps) == 0x000001, "Wrong size on TLUserWidgetDynamicEventPhaseFrame_OnRepeatSteps");
static_assert(offsetof(TLUserWidgetDynamicEventPhaseFrame_OnRepeatSteps, InOn) == 0x000000, "Member 'TLUserWidgetDynamicEventPhaseFrame_OnRepeatSteps::InOn' has a wrong offset!");

// Function TLClient.TLUserWidgetDynamicEventResult.OnUpdateScheduleType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDynamicEventResult_OnUpdateScheduleType final
{
public:
	ETLEventScheduleType                          InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDynamicEventResult_OnUpdateScheduleType) == 0x000001, "Wrong alignment on TLUserWidgetDynamicEventResult_OnUpdateScheduleType");
static_assert(sizeof(TLUserWidgetDynamicEventResult_OnUpdateScheduleType) == 0x000001, "Wrong size on TLUserWidgetDynamicEventResult_OnUpdateScheduleType");
static_assert(offsetof(TLUserWidgetDynamicEventResult_OnUpdateScheduleType, InType) == 0x000000, "Member 'TLUserWidgetDynamicEventResult_OnUpdateScheduleType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetDynamicEventRewardItemList.UpdateResultItem
// 0x000C (0x000C - 0x0000)
struct TLUserWidgetDynamicEventRewardItemList_UpdateResultItem final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemTableId;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InAmount;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDynamicEventRewardItemList_UpdateResultItem) == 0x000004, "Wrong alignment on TLUserWidgetDynamicEventRewardItemList_UpdateResultItem");
static_assert(sizeof(TLUserWidgetDynamicEventRewardItemList_UpdateResultItem) == 0x00000C, "Wrong size on TLUserWidgetDynamicEventRewardItemList_UpdateResultItem");
static_assert(offsetof(TLUserWidgetDynamicEventRewardItemList_UpdateResultItem, InSlotIndex) == 0x000000, "Member 'TLUserWidgetDynamicEventRewardItemList_UpdateResultItem::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TLUserWidgetDynamicEventRewardItemList_UpdateResultItem, InItemTableId) == 0x000004, "Member 'TLUserWidgetDynamicEventRewardItemList_UpdateResultItem::InItemTableId' has a wrong offset!");
static_assert(offsetof(TLUserWidgetDynamicEventRewardItemList_UpdateResultItem, InAmount) == 0x000008, "Member 'TLUserWidgetDynamicEventRewardItemList_UpdateResultItem::InAmount' has a wrong offset!");

// Function TLClient.TLUserWidgetDynamicEventState.OnUpdateEffectStorePointState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetDynamicEventState_OnUpdateEffectStorePointState final
{
public:
	ETLDEEventEffectStorePointState               InStorePointState;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetDynamicEventState_OnUpdateEffectStorePointState) == 0x000001, "Wrong alignment on TLUserWidgetDynamicEventState_OnUpdateEffectStorePointState");
static_assert(sizeof(TLUserWidgetDynamicEventState_OnUpdateEffectStorePointState) == 0x000001, "Wrong size on TLUserWidgetDynamicEventState_OnUpdateEffectStorePointState");
static_assert(offsetof(TLUserWidgetDynamicEventState_OnUpdateEffectStorePointState, InStorePointState) == 0x000000, "Member 'TLUserWidgetDynamicEventState_OnUpdateEffectStorePointState::InStorePointState' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantBaseInfoPanel.OnInfoFormChange
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantBaseInfoPanel_OnInfoFormChange final
{
public:
	bool                                          bComparison;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantBaseInfoPanel_OnInfoFormChange) == 0x000001, "Wrong alignment on TLUserWidgetEnchantBaseInfoPanel_OnInfoFormChange");
static_assert(sizeof(TLUserWidgetEnchantBaseInfoPanel_OnInfoFormChange) == 0x000001, "Wrong size on TLUserWidgetEnchantBaseInfoPanel_OnInfoFormChange");
static_assert(offsetof(TLUserWidgetEnchantBaseInfoPanel_OnInfoFormChange, bComparison) == 0x000000, "Member 'TLUserWidgetEnchantBaseInfoPanel_OnInfoFormChange::bComparison' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantBaseInfoPanel.OnUpdateEnchant
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetEnchantBaseInfoPanel_OnUpdateEnchant final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbMaxLevel;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetEnchantBaseInfoPanel_OnUpdateEnchant) == 0x000004, "Wrong alignment on TLUserWidgetEnchantBaseInfoPanel_OnUpdateEnchant");
static_assert(sizeof(TLUserWidgetEnchantBaseInfoPanel_OnUpdateEnchant) == 0x000008, "Wrong size on TLUserWidgetEnchantBaseInfoPanel_OnUpdateEnchant");
static_assert(offsetof(TLUserWidgetEnchantBaseInfoPanel_OnUpdateEnchant, InLevel) == 0x000000, "Member 'TLUserWidgetEnchantBaseInfoPanel_OnUpdateEnchant::InLevel' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantBaseInfoPanel_OnUpdateEnchant, InbMaxLevel) == 0x000004, "Member 'TLUserWidgetEnchantBaseInfoPanel_OnUpdateEnchant::InbMaxLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantBaseInfoPanel.OnUpdateItemGrade
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantBaseInfoPanel_OnUpdateItemGrade final
{
public:
	EItemGrade                                    InGrade;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantBaseInfoPanel_OnUpdateItemGrade) == 0x000001, "Wrong alignment on TLUserWidgetEnchantBaseInfoPanel_OnUpdateItemGrade");
static_assert(sizeof(TLUserWidgetEnchantBaseInfoPanel_OnUpdateItemGrade) == 0x000001, "Wrong size on TLUserWidgetEnchantBaseInfoPanel_OnUpdateItemGrade");
static_assert(offsetof(TLUserWidgetEnchantBaseInfoPanel_OnUpdateItemGrade, InGrade) == 0x000000, "Member 'TLUserWidgetEnchantBaseInfoPanel_OnUpdateItemGrade::InGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantInfoPanel.OnEnchantMethodChange
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantInfoPanel_OnEnchantMethodChange final
{
public:
	EEnchantMethod                                InEnchantMethod;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantInfoPanel_OnEnchantMethodChange) == 0x000001, "Wrong alignment on TLUserWidgetEnchantInfoPanel_OnEnchantMethodChange");
static_assert(sizeof(TLUserWidgetEnchantInfoPanel_OnEnchantMethodChange) == 0x000001, "Wrong size on TLUserWidgetEnchantInfoPanel_OnEnchantMethodChange");
static_assert(offsetof(TLUserWidgetEnchantInfoPanel_OnEnchantMethodChange, InEnchantMethod) == 0x000000, "Member 'TLUserWidgetEnchantInfoPanel_OnEnchantMethodChange::InEnchantMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantInfoPanel.OnInfoFormChange
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantInfoPanel_OnInfoFormChange final
{
public:
	bool                                          bComparison;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantInfoPanel_OnInfoFormChange) == 0x000001, "Wrong alignment on TLUserWidgetEnchantInfoPanel_OnInfoFormChange");
static_assert(sizeof(TLUserWidgetEnchantInfoPanel_OnInfoFormChange) == 0x000001, "Wrong size on TLUserWidgetEnchantInfoPanel_OnInfoFormChange");
static_assert(offsetof(TLUserWidgetEnchantInfoPanel_OnInfoFormChange, bComparison) == 0x000000, "Member 'TLUserWidgetEnchantInfoPanel_OnInfoFormChange::bComparison' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantInfoPanel.OnPcInfoShowOnly
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantInfoPanel_OnPcInfoShowOnly final
{
public:
	bool                                          bInPcInfoShowOnly;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantInfoPanel_OnPcInfoShowOnly) == 0x000001, "Wrong alignment on TLUserWidgetEnchantInfoPanel_OnPcInfoShowOnly");
static_assert(sizeof(TLUserWidgetEnchantInfoPanel_OnPcInfoShowOnly) == 0x000001, "Wrong size on TLUserWidgetEnchantInfoPanel_OnPcInfoShowOnly");
static_assert(offsetof(TLUserWidgetEnchantInfoPanel_OnPcInfoShowOnly, bInPcInfoShowOnly) == 0x000000, "Member 'TLUserWidgetEnchantInfoPanel_OnPcInfoShowOnly::bInPcInfoShowOnly' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantInfoPanel.OnUpdateItemGrade
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantInfoPanel_OnUpdateItemGrade final
{
public:
	EItemGrade                                    InGrade;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantInfoPanel_OnUpdateItemGrade) == 0x000001, "Wrong alignment on TLUserWidgetEnchantInfoPanel_OnUpdateItemGrade");
static_assert(sizeof(TLUserWidgetEnchantInfoPanel_OnUpdateItemGrade) == 0x000001, "Wrong size on TLUserWidgetEnchantInfoPanel_OnUpdateItemGrade");
static_assert(offsetof(TLUserWidgetEnchantInfoPanel_OnUpdateItemGrade, InGrade) == 0x000000, "Member 'TLUserWidgetEnchantInfoPanel_OnUpdateItemGrade::InGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantInfoPanel.OnUpdateLevelMax
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetEnchantInfoPanel_OnUpdateLevelMax final
{
public:
	bool                                          InbCurrentMaxLevel;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbNextMaxLevel;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantInfoPanel_OnUpdateLevelMax) == 0x000001, "Wrong alignment on TLUserWidgetEnchantInfoPanel_OnUpdateLevelMax");
static_assert(sizeof(TLUserWidgetEnchantInfoPanel_OnUpdateLevelMax) == 0x000002, "Wrong size on TLUserWidgetEnchantInfoPanel_OnUpdateLevelMax");
static_assert(offsetof(TLUserWidgetEnchantInfoPanel_OnUpdateLevelMax, InbCurrentMaxLevel) == 0x000000, "Member 'TLUserWidgetEnchantInfoPanel_OnUpdateLevelMax::InbCurrentMaxLevel' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantInfoPanel_OnUpdateLevelMax, InbNextMaxLevel) == 0x000001, "Member 'TLUserWidgetEnchantInfoPanel_OnUpdateLevelMax::InbNextMaxLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantItemSlot.OnUpdateBlankStatus
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantItemSlot_OnUpdateBlankStatus final
{
public:
	bool                                          bBlank;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantItemSlot_OnUpdateBlankStatus) == 0x000001, "Wrong alignment on TLUserWidgetEnchantItemSlot_OnUpdateBlankStatus");
static_assert(sizeof(TLUserWidgetEnchantItemSlot_OnUpdateBlankStatus) == 0x000001, "Wrong size on TLUserWidgetEnchantItemSlot_OnUpdateBlankStatus");
static_assert(offsetof(TLUserWidgetEnchantItemSlot_OnUpdateBlankStatus, bBlank) == 0x000000, "Member 'TLUserWidgetEnchantItemSlot_OnUpdateBlankStatus::bBlank' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantResourceController.OnStateUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantResourceController_OnStateUpdate final
{
public:
	EEnchantResourceState                         InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantResourceController_OnStateUpdate) == 0x000001, "Wrong alignment on TLUserWidgetEnchantResourceController_OnStateUpdate");
static_assert(sizeof(TLUserWidgetEnchantResourceController_OnStateUpdate) == 0x000001, "Wrong size on TLUserWidgetEnchantResourceController_OnStateUpdate");
static_assert(offsetof(TLUserWidgetEnchantResourceController_OnStateUpdate, InState) == 0x000000, "Member 'TLUserWidgetEnchantResourceController_OnStateUpdate::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantResPanel.OnEnchantFinish
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetEnchantResPanel_OnEnchantFinish final
{
public:
	EEnchantResultType                            InResultType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InLevelUp;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantResPanel_OnEnchantFinish) == 0x000001, "Wrong alignment on TLUserWidgetEnchantResPanel_OnEnchantFinish");
static_assert(sizeof(TLUserWidgetEnchantResPanel_OnEnchantFinish) == 0x000002, "Wrong size on TLUserWidgetEnchantResPanel_OnEnchantFinish");
static_assert(offsetof(TLUserWidgetEnchantResPanel_OnEnchantFinish, InResultType) == 0x000000, "Member 'TLUserWidgetEnchantResPanel_OnEnchantFinish::InResultType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantResPanel_OnEnchantFinish, InLevelUp) == 0x000001, "Member 'TLUserWidgetEnchantResPanel_OnEnchantFinish::InLevelUp' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantResPanel.OnInterimEnchantFinish
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantResPanel_OnInterimEnchantFinish final
{
public:
	EEnchantResultType                            InInterimResultType;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantResPanel_OnInterimEnchantFinish) == 0x000001, "Wrong alignment on TLUserWidgetEnchantResPanel_OnInterimEnchantFinish");
static_assert(sizeof(TLUserWidgetEnchantResPanel_OnInterimEnchantFinish) == 0x000001, "Wrong size on TLUserWidgetEnchantResPanel_OnInterimEnchantFinish");
static_assert(offsetof(TLUserWidgetEnchantResPanel_OnInterimEnchantFinish, InInterimResultType) == 0x000000, "Member 'TLUserWidgetEnchantResPanel_OnInterimEnchantFinish::InInterimResultType' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantResPanel.OnInterimEnchantStart
// 0x000C (0x000C - 0x0000)
struct TLUserWidgetEnchantResPanel_OnInterimEnchantStart final
{
public:
	EEnchantResultType                            InInterimResultType;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InTargetPercent;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDuration;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantResPanel_OnInterimEnchantStart) == 0x000004, "Wrong alignment on TLUserWidgetEnchantResPanel_OnInterimEnchantStart");
static_assert(sizeof(TLUserWidgetEnchantResPanel_OnInterimEnchantStart) == 0x00000C, "Wrong size on TLUserWidgetEnchantResPanel_OnInterimEnchantStart");
static_assert(offsetof(TLUserWidgetEnchantResPanel_OnInterimEnchantStart, InInterimResultType) == 0x000000, "Member 'TLUserWidgetEnchantResPanel_OnInterimEnchantStart::InInterimResultType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantResPanel_OnInterimEnchantStart, InTargetPercent) == 0x000004, "Member 'TLUserWidgetEnchantResPanel_OnInterimEnchantStart::InTargetPercent' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantResPanel_OnInterimEnchantStart, InDuration) == 0x000008, "Member 'TLUserWidgetEnchantResPanel_OnInterimEnchantStart::InDuration' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMatchingRoleIcon.GetNormalIconTexture
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetPartyMatchingRoleIcon_GetNormalIconTexture final
{
public:
	struct FSoftObjectPath                        ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMatchingRoleIcon_GetNormalIconTexture) == 0x000008, "Wrong alignment on TLUserWidgetPartyMatchingRoleIcon_GetNormalIconTexture");
static_assert(sizeof(TLUserWidgetPartyMatchingRoleIcon_GetNormalIconTexture) == 0x000018, "Wrong size on TLUserWidgetPartyMatchingRoleIcon_GetNormalIconTexture");
static_assert(offsetof(TLUserWidgetPartyMatchingRoleIcon_GetNormalIconTexture, ReturnValue) == 0x000000, "Member 'TLUserWidgetPartyMatchingRoleIcon_GetNormalIconTexture::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMatchingRoleIcon.GetSelectFXTexture
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetPartyMatchingRoleIcon_GetSelectFXTexture final
{
public:
	struct FSoftObjectPath                        ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMatchingRoleIcon_GetSelectFXTexture) == 0x000008, "Wrong alignment on TLUserWidgetPartyMatchingRoleIcon_GetSelectFXTexture");
static_assert(sizeof(TLUserWidgetPartyMatchingRoleIcon_GetSelectFXTexture) == 0x000018, "Wrong size on TLUserWidgetPartyMatchingRoleIcon_GetSelectFXTexture");
static_assert(offsetof(TLUserWidgetPartyMatchingRoleIcon_GetSelectFXTexture, ReturnValue) == 0x000000, "Member 'TLUserWidgetPartyMatchingRoleIcon_GetSelectFXTexture::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMatchingRoleIcon.GetSelectIconTexture
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetPartyMatchingRoleIcon_GetSelectIconTexture final
{
public:
	struct FSoftObjectPath                        ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMatchingRoleIcon_GetSelectIconTexture) == 0x000008, "Wrong alignment on TLUserWidgetPartyMatchingRoleIcon_GetSelectIconTexture");
static_assert(sizeof(TLUserWidgetPartyMatchingRoleIcon_GetSelectIconTexture) == 0x000018, "Wrong size on TLUserWidgetPartyMatchingRoleIcon_GetSelectIconTexture");
static_assert(offsetof(TLUserWidgetPartyMatchingRoleIcon_GetSelectIconTexture, ReturnValue) == 0x000000, "Member 'TLUserWidgetPartyMatchingRoleIcon_GetSelectIconTexture::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMatchingRoleIcon.SetActiveRole
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetPartyMatchingRoleIcon_SetActiveRole final
{
public:
	bool                                          bActivate;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyRole                                    InRole;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMatchingRoleIcon_SetActiveRole) == 0x000001, "Wrong alignment on TLUserWidgetPartyMatchingRoleIcon_SetActiveRole");
static_assert(sizeof(TLUserWidgetPartyMatchingRoleIcon_SetActiveRole) == 0x000002, "Wrong size on TLUserWidgetPartyMatchingRoleIcon_SetActiveRole");
static_assert(offsetof(TLUserWidgetPartyMatchingRoleIcon_SetActiveRole, bActivate) == 0x000000, "Member 'TLUserWidgetPartyMatchingRoleIcon_SetActiveRole::bActivate' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPartyMatchingRoleIcon_SetActiveRole, InRole) == 0x000001, "Member 'TLUserWidgetPartyMatchingRoleIcon_SetActiveRole::InRole' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMatchingRoleIcon.SetMyRole
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMatchingRoleIcon_SetMyRole final
{
public:
	bool                                          bMyRole;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMatchingRoleIcon_SetMyRole) == 0x000001, "Wrong alignment on TLUserWidgetPartyMatchingRoleIcon_SetMyRole");
static_assert(sizeof(TLUserWidgetPartyMatchingRoleIcon_SetMyRole) == 0x000001, "Wrong size on TLUserWidgetPartyMatchingRoleIcon_SetMyRole");
static_assert(offsetof(TLUserWidgetPartyMatchingRoleIcon_SetMyRole, bMyRole) == 0x000000, "Member 'TLUserWidgetPartyMatchingRoleIcon_SetMyRole::bMyRole' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMatchingRoleIcon.GetRole
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMatchingRoleIcon_GetRole final
{
public:
	EPartyRole                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMatchingRoleIcon_GetRole) == 0x000001, "Wrong alignment on TLUserWidgetPartyMatchingRoleIcon_GetRole");
static_assert(sizeof(TLUserWidgetPartyMatchingRoleIcon_GetRole) == 0x000001, "Wrong size on TLUserWidgetPartyMatchingRoleIcon_GetRole");
static_assert(offsetof(TLUserWidgetPartyMatchingRoleIcon_GetRole, ReturnValue) == 0x000000, "Member 'TLUserWidgetPartyMatchingRoleIcon_GetRole::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransfer.EventChangeFlow
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetEnchantTransfer_EventChangeFlow final
{
public:
	ETLEnchantTransferFlow                        InNewFlow;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLEnchantTransferFlow                        InPrevFlow;                                        // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransfer_EventChangeFlow) == 0x000001, "Wrong alignment on TLUserWidgetEnchantTransfer_EventChangeFlow");
static_assert(sizeof(TLUserWidgetEnchantTransfer_EventChangeFlow) == 0x000002, "Wrong size on TLUserWidgetEnchantTransfer_EventChangeFlow");
static_assert(offsetof(TLUserWidgetEnchantTransfer_EventChangeFlow, InNewFlow) == 0x000000, "Member 'TLUserWidgetEnchantTransfer_EventChangeFlow::InNewFlow' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantTransfer_EventChangeFlow, InPrevFlow) == 0x000001, "Member 'TLUserWidgetEnchantTransfer_EventChangeFlow::InPrevFlow' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransfer.EventEnchantTransferResult
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetEnchantTransfer_EventEnchantTransferResult final
{
public:
	ETLEnchantTransferResult                      InResult;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLevelChange;                                    // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransfer_EventEnchantTransferResult) == 0x000001, "Wrong alignment on TLUserWidgetEnchantTransfer_EventEnchantTransferResult");
static_assert(sizeof(TLUserWidgetEnchantTransfer_EventEnchantTransferResult) == 0x000002, "Wrong size on TLUserWidgetEnchantTransfer_EventEnchantTransferResult");
static_assert(offsetof(TLUserWidgetEnchantTransfer_EventEnchantTransferResult, InResult) == 0x000000, "Member 'TLUserWidgetEnchantTransfer_EventEnchantTransferResult::InResult' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantTransfer_EventEnchantTransferResult, bInLevelChange) == 0x000001, "Member 'TLUserWidgetEnchantTransfer_EventEnchantTransferResult::bInLevelChange' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransfer.EventMaterialItemChange
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetEnchantTransfer_EventMaterialItemChange final
{
public:
	uint64                                        InNewItemID;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        InPrevItemID;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransfer_EventMaterialItemChange) == 0x000008, "Wrong alignment on TLUserWidgetEnchantTransfer_EventMaterialItemChange");
static_assert(sizeof(TLUserWidgetEnchantTransfer_EventMaterialItemChange) == 0x000010, "Wrong size on TLUserWidgetEnchantTransfer_EventMaterialItemChange");
static_assert(offsetof(TLUserWidgetEnchantTransfer_EventMaterialItemChange, InNewItemID) == 0x000000, "Member 'TLUserWidgetEnchantTransfer_EventMaterialItemChange::InNewItemID' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantTransfer_EventMaterialItemChange, InPrevItemID) == 0x000008, "Member 'TLUserWidgetEnchantTransfer_EventMaterialItemChange::InPrevItemID' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransfer.EventProgressActionEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantTransfer_EventProgressActionEvent final
{
public:
	ETLEnchantTransferProgressActionEvent         InEvent;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransfer_EventProgressActionEvent) == 0x000001, "Wrong alignment on TLUserWidgetEnchantTransfer_EventProgressActionEvent");
static_assert(sizeof(TLUserWidgetEnchantTransfer_EventProgressActionEvent) == 0x000001, "Wrong size on TLUserWidgetEnchantTransfer_EventProgressActionEvent");
static_assert(offsetof(TLUserWidgetEnchantTransfer_EventProgressActionEvent, InEvent) == 0x000000, "Member 'TLUserWidgetEnchantTransfer_EventProgressActionEvent::InEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransfer.EventTargetItemChange
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetEnchantTransfer_EventTargetItemChange final
{
public:
	uint64                                        InNewItemID;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        InPrevItemID;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransfer_EventTargetItemChange) == 0x000008, "Wrong alignment on TLUserWidgetEnchantTransfer_EventTargetItemChange");
static_assert(sizeof(TLUserWidgetEnchantTransfer_EventTargetItemChange) == 0x000010, "Wrong size on TLUserWidgetEnchantTransfer_EventTargetItemChange");
static_assert(offsetof(TLUserWidgetEnchantTransfer_EventTargetItemChange, InNewItemID) == 0x000000, "Member 'TLUserWidgetEnchantTransfer_EventTargetItemChange::InNewItemID' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantTransfer_EventTargetItemChange, InPrevItemID) == 0x000008, "Member 'TLUserWidgetEnchantTransfer_EventTargetItemChange::InPrevItemID' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransfer.GetSceneActor
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetEnchantTransfer_GetSceneActor final
{
public:
	class ATLCustomSceneControlActor*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransfer_GetSceneActor) == 0x000008, "Wrong alignment on TLUserWidgetEnchantTransfer_GetSceneActor");
static_assert(sizeof(TLUserWidgetEnchantTransfer_GetSceneActor) == 0x000008, "Wrong size on TLUserWidgetEnchantTransfer_GetSceneActor");
static_assert(offsetof(TLUserWidgetEnchantTransfer_GetSceneActor, ReturnValue) == 0x000000, "Member 'TLUserWidgetEnchantTransfer_GetSceneActor::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetRotationEventRanking.OnTabSelected
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetRotationEventRanking_OnTabSelected final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRotationEventRanking_OnTabSelected) == 0x000004, "Wrong alignment on TLUserWidgetRotationEventRanking_OnTabSelected");
static_assert(sizeof(TLUserWidgetRotationEventRanking_OnTabSelected) == 0x000004, "Wrong size on TLUserWidgetRotationEventRanking_OnTabSelected");
static_assert(offsetof(TLUserWidgetRotationEventRanking_OnTabSelected, InIndex) == 0x000000, "Member 'TLUserWidgetRotationEventRanking_OnTabSelected::InIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferInventory.EventChangeFlow
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetEnchantTransferInventory_EventChangeFlow final
{
public:
	ETLEnchantTransferFlow                        InNewFlow;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLEnchantTransferFlow                        InPrevFlow;                                        // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferInventory_EventChangeFlow) == 0x000001, "Wrong alignment on TLUserWidgetEnchantTransferInventory_EventChangeFlow");
static_assert(sizeof(TLUserWidgetEnchantTransferInventory_EventChangeFlow) == 0x000002, "Wrong size on TLUserWidgetEnchantTransferInventory_EventChangeFlow");
static_assert(offsetof(TLUserWidgetEnchantTransferInventory_EventChangeFlow, InNewFlow) == 0x000000, "Member 'TLUserWidgetEnchantTransferInventory_EventChangeFlow::InNewFlow' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantTransferInventory_EventChangeFlow, InPrevFlow) == 0x000001, "Member 'TLUserWidgetEnchantTransferInventory_EventChangeFlow::InPrevFlow' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferInventory.EventEnchantTransferResult
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetEnchantTransferInventory_EventEnchantTransferResult final
{
public:
	ETLEnchantTransferResult                      InResult;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLevelChange;                                    // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferInventory_EventEnchantTransferResult) == 0x000001, "Wrong alignment on TLUserWidgetEnchantTransferInventory_EventEnchantTransferResult");
static_assert(sizeof(TLUserWidgetEnchantTransferInventory_EventEnchantTransferResult) == 0x000002, "Wrong size on TLUserWidgetEnchantTransferInventory_EventEnchantTransferResult");
static_assert(offsetof(TLUserWidgetEnchantTransferInventory_EventEnchantTransferResult, InResult) == 0x000000, "Member 'TLUserWidgetEnchantTransferInventory_EventEnchantTransferResult::InResult' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantTransferInventory_EventEnchantTransferResult, bInLevelChange) == 0x000001, "Member 'TLUserWidgetEnchantTransferInventory_EventEnchantTransferResult::bInLevelChange' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferInventory.EventMaterialItemChange
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetEnchantTransferInventory_EventMaterialItemChange final
{
public:
	uint64                                        InNewItemID;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        InPrevItemID;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferInventory_EventMaterialItemChange) == 0x000008, "Wrong alignment on TLUserWidgetEnchantTransferInventory_EventMaterialItemChange");
static_assert(sizeof(TLUserWidgetEnchantTransferInventory_EventMaterialItemChange) == 0x000010, "Wrong size on TLUserWidgetEnchantTransferInventory_EventMaterialItemChange");
static_assert(offsetof(TLUserWidgetEnchantTransferInventory_EventMaterialItemChange, InNewItemID) == 0x000000, "Member 'TLUserWidgetEnchantTransferInventory_EventMaterialItemChange::InNewItemID' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantTransferInventory_EventMaterialItemChange, InPrevItemID) == 0x000008, "Member 'TLUserWidgetEnchantTransferInventory_EventMaterialItemChange::InPrevItemID' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferInventory.EventTargetItemChange
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetEnchantTransferInventory_EventTargetItemChange final
{
public:
	uint64                                        InNewItemID;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        InPrevItemID;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferInventory_EventTargetItemChange) == 0x000008, "Wrong alignment on TLUserWidgetEnchantTransferInventory_EventTargetItemChange");
static_assert(sizeof(TLUserWidgetEnchantTransferInventory_EventTargetItemChange) == 0x000010, "Wrong size on TLUserWidgetEnchantTransferInventory_EventTargetItemChange");
static_assert(offsetof(TLUserWidgetEnchantTransferInventory_EventTargetItemChange, InNewItemID) == 0x000000, "Member 'TLUserWidgetEnchantTransferInventory_EventTargetItemChange::InNewItemID' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantTransferInventory_EventTargetItemChange, InPrevItemID) == 0x000008, "Member 'TLUserWidgetEnchantTransferInventory_EventTargetItemChange::InPrevItemID' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferInventory.GetSceneActor
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetEnchantTransferInventory_GetSceneActor final
{
public:
	class ATLCustomSceneControlActor*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferInventory_GetSceneActor) == 0x000008, "Wrong alignment on TLUserWidgetEnchantTransferInventory_GetSceneActor");
static_assert(sizeof(TLUserWidgetEnchantTransferInventory_GetSceneActor) == 0x000008, "Wrong size on TLUserWidgetEnchantTransferInventory_GetSceneActor");
static_assert(offsetof(TLUserWidgetEnchantTransferInventory_GetSceneActor, ReturnValue) == 0x000000, "Member 'TLUserWidgetEnchantTransferInventory_GetSceneActor::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetWeaponCostume.OnUIToggleEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWeaponCostume_OnUIToggleEvent final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWeaponCostume_OnUIToggleEvent) == 0x000001, "Wrong alignment on TLUserWidgetWeaponCostume_OnUIToggleEvent");
static_assert(sizeof(TLUserWidgetWeaponCostume_OnUIToggleEvent) == 0x000001, "Wrong size on TLUserWidgetWeaponCostume_OnUIToggleEvent");
static_assert(offsetof(TLUserWidgetWeaponCostume_OnUIToggleEvent, bVisible) == 0x000000, "Member 'TLUserWidgetWeaponCostume_OnUIToggleEvent::bVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferMaterialItem.EventChangeFlow
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetEnchantTransferMaterialItem_EventChangeFlow final
{
public:
	ETLEnchantTransferFlow                        InNewFlow;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLEnchantTransferFlow                        InPrevFlow;                                        // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferMaterialItem_EventChangeFlow) == 0x000001, "Wrong alignment on TLUserWidgetEnchantTransferMaterialItem_EventChangeFlow");
static_assert(sizeof(TLUserWidgetEnchantTransferMaterialItem_EventChangeFlow) == 0x000002, "Wrong size on TLUserWidgetEnchantTransferMaterialItem_EventChangeFlow");
static_assert(offsetof(TLUserWidgetEnchantTransferMaterialItem_EventChangeFlow, InNewFlow) == 0x000000, "Member 'TLUserWidgetEnchantTransferMaterialItem_EventChangeFlow::InNewFlow' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantTransferMaterialItem_EventChangeFlow, InPrevFlow) == 0x000001, "Member 'TLUserWidgetEnchantTransferMaterialItem_EventChangeFlow::InPrevFlow' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferMaterialItem.EventEnchantTransferResult
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetEnchantTransferMaterialItem_EventEnchantTransferResult final
{
public:
	ETLEnchantTransferResult                      InResult;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLevelChange;                                    // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferMaterialItem_EventEnchantTransferResult) == 0x000001, "Wrong alignment on TLUserWidgetEnchantTransferMaterialItem_EventEnchantTransferResult");
static_assert(sizeof(TLUserWidgetEnchantTransferMaterialItem_EventEnchantTransferResult) == 0x000002, "Wrong size on TLUserWidgetEnchantTransferMaterialItem_EventEnchantTransferResult");
static_assert(offsetof(TLUserWidgetEnchantTransferMaterialItem_EventEnchantTransferResult, InResult) == 0x000000, "Member 'TLUserWidgetEnchantTransferMaterialItem_EventEnchantTransferResult::InResult' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantTransferMaterialItem_EventEnchantTransferResult, bInLevelChange) == 0x000001, "Member 'TLUserWidgetEnchantTransferMaterialItem_EventEnchantTransferResult::bInLevelChange' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferMaterialItem.EventMaterialItemChange
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetEnchantTransferMaterialItem_EventMaterialItemChange final
{
public:
	uint64                                        InNewItemID;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        InPrevItemID;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferMaterialItem_EventMaterialItemChange) == 0x000008, "Wrong alignment on TLUserWidgetEnchantTransferMaterialItem_EventMaterialItemChange");
static_assert(sizeof(TLUserWidgetEnchantTransferMaterialItem_EventMaterialItemChange) == 0x000010, "Wrong size on TLUserWidgetEnchantTransferMaterialItem_EventMaterialItemChange");
static_assert(offsetof(TLUserWidgetEnchantTransferMaterialItem_EventMaterialItemChange, InNewItemID) == 0x000000, "Member 'TLUserWidgetEnchantTransferMaterialItem_EventMaterialItemChange::InNewItemID' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantTransferMaterialItem_EventMaterialItemChange, InPrevItemID) == 0x000008, "Member 'TLUserWidgetEnchantTransferMaterialItem_EventMaterialItemChange::InPrevItemID' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferMaterialItem.EventProgressActionEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantTransferMaterialItem_EventProgressActionEvent final
{
public:
	ETLEnchantTransferProgressActionEvent         InEvent;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferMaterialItem_EventProgressActionEvent) == 0x000001, "Wrong alignment on TLUserWidgetEnchantTransferMaterialItem_EventProgressActionEvent");
static_assert(sizeof(TLUserWidgetEnchantTransferMaterialItem_EventProgressActionEvent) == 0x000001, "Wrong size on TLUserWidgetEnchantTransferMaterialItem_EventProgressActionEvent");
static_assert(offsetof(TLUserWidgetEnchantTransferMaterialItem_EventProgressActionEvent, InEvent) == 0x000000, "Member 'TLUserWidgetEnchantTransferMaterialItem_EventProgressActionEvent::InEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferMaterialItem.EventTargetItemChange
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetEnchantTransferMaterialItem_EventTargetItemChange final
{
public:
	uint64                                        InNewItemID;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        InPrevItemID;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferMaterialItem_EventTargetItemChange) == 0x000008, "Wrong alignment on TLUserWidgetEnchantTransferMaterialItem_EventTargetItemChange");
static_assert(sizeof(TLUserWidgetEnchantTransferMaterialItem_EventTargetItemChange) == 0x000010, "Wrong size on TLUserWidgetEnchantTransferMaterialItem_EventTargetItemChange");
static_assert(offsetof(TLUserWidgetEnchantTransferMaterialItem_EventTargetItemChange, InNewItemID) == 0x000000, "Member 'TLUserWidgetEnchantTransferMaterialItem_EventTargetItemChange::InNewItemID' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantTransferMaterialItem_EventTargetItemChange, InPrevItemID) == 0x000008, "Member 'TLUserWidgetEnchantTransferMaterialItem_EventTargetItemChange::InPrevItemID' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferMaterialItem.OnEnchantResultAction
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantTransferMaterialItem_OnEnchantResultAction final
{
public:
	bool                                          bInLevelChange;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferMaterialItem_OnEnchantResultAction) == 0x000001, "Wrong alignment on TLUserWidgetEnchantTransferMaterialItem_OnEnchantResultAction");
static_assert(sizeof(TLUserWidgetEnchantTransferMaterialItem_OnEnchantResultAction) == 0x000001, "Wrong size on TLUserWidgetEnchantTransferMaterialItem_OnEnchantResultAction");
static_assert(offsetof(TLUserWidgetEnchantTransferMaterialItem_OnEnchantResultAction, bInLevelChange) == 0x000000, "Member 'TLUserWidgetEnchantTransferMaterialItem_OnEnchantResultAction::bInLevelChange' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferMaterialItem.OnSetItemSlot
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantTransferMaterialItem_OnSetItemSlot final
{
public:
	EItemGrade                                    InGrade;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferMaterialItem_OnSetItemSlot) == 0x000001, "Wrong alignment on TLUserWidgetEnchantTransferMaterialItem_OnSetItemSlot");
static_assert(sizeof(TLUserWidgetEnchantTransferMaterialItem_OnSetItemSlot) == 0x000001, "Wrong size on TLUserWidgetEnchantTransferMaterialItem_OnSetItemSlot");
static_assert(offsetof(TLUserWidgetEnchantTransferMaterialItem_OnSetItemSlot, InGrade) == 0x000000, "Member 'TLUserWidgetEnchantTransferMaterialItem_OnSetItemSlot::InGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferMaterialItem.OnSetTargetItemSlot
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantTransferMaterialItem_OnSetTargetItemSlot final
{
public:
	EItemGrade                                    InGrade;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferMaterialItem_OnSetTargetItemSlot) == 0x000001, "Wrong alignment on TLUserWidgetEnchantTransferMaterialItem_OnSetTargetItemSlot");
static_assert(sizeof(TLUserWidgetEnchantTransferMaterialItem_OnSetTargetItemSlot) == 0x000001, "Wrong size on TLUserWidgetEnchantTransferMaterialItem_OnSetTargetItemSlot");
static_assert(offsetof(TLUserWidgetEnchantTransferMaterialItem_OnSetTargetItemSlot, InGrade) == 0x000000, "Member 'TLUserWidgetEnchantTransferMaterialItem_OnSetTargetItemSlot::InGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetWeaponSwapButton.OnUpdateEquipMainWeapon
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetWeaponSwapButton_OnUpdateEquipMainWeapon final
{
public:
	EWeaponCategory                               InWeaponCategory;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemGrade                                    WeaponGrade;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWeaponSwapButton_OnUpdateEquipMainWeapon) == 0x000001, "Wrong alignment on TLUserWidgetWeaponSwapButton_OnUpdateEquipMainWeapon");
static_assert(sizeof(TLUserWidgetWeaponSwapButton_OnUpdateEquipMainWeapon) == 0x000002, "Wrong size on TLUserWidgetWeaponSwapButton_OnUpdateEquipMainWeapon");
static_assert(offsetof(TLUserWidgetWeaponSwapButton_OnUpdateEquipMainWeapon, InWeaponCategory) == 0x000000, "Member 'TLUserWidgetWeaponSwapButton_OnUpdateEquipMainWeapon::InWeaponCategory' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWeaponSwapButton_OnUpdateEquipMainWeapon, WeaponGrade) == 0x000001, "Member 'TLUserWidgetWeaponSwapButton_OnUpdateEquipMainWeapon::WeaponGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetWeaponSwapButton.OnUpdateEquipOtherWeapon
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetWeaponSwapButton_OnUpdateEquipOtherWeapon final
{
public:
	EWeaponCategory                               InWeaponCategory;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemGrade                                    WeaponGrade;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWeaponSwapButton_OnUpdateEquipOtherWeapon) == 0x000001, "Wrong alignment on TLUserWidgetWeaponSwapButton_OnUpdateEquipOtherWeapon");
static_assert(sizeof(TLUserWidgetWeaponSwapButton_OnUpdateEquipOtherWeapon) == 0x000002, "Wrong size on TLUserWidgetWeaponSwapButton_OnUpdateEquipOtherWeapon");
static_assert(offsetof(TLUserWidgetWeaponSwapButton_OnUpdateEquipOtherWeapon, InWeaponCategory) == 0x000000, "Member 'TLUserWidgetWeaponSwapButton_OnUpdateEquipOtherWeapon::InWeaponCategory' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWeaponSwapButton_OnUpdateEquipOtherWeapon, WeaponGrade) == 0x000001, "Member 'TLUserWidgetWeaponSwapButton_OnUpdateEquipOtherWeapon::WeaponGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetWeaponSwapButton.OnUpdateWeaponPresetNum
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetWeaponSwapButton_OnUpdateWeaponPresetNum final
{
public:
	int32                                         InNewNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInit;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetWeaponSwapButton_OnUpdateWeaponPresetNum) == 0x000004, "Wrong alignment on TLUserWidgetWeaponSwapButton_OnUpdateWeaponPresetNum");
static_assert(sizeof(TLUserWidgetWeaponSwapButton_OnUpdateWeaponPresetNum) == 0x000008, "Wrong size on TLUserWidgetWeaponSwapButton_OnUpdateWeaponPresetNum");
static_assert(offsetof(TLUserWidgetWeaponSwapButton_OnUpdateWeaponPresetNum, InNewNum) == 0x000000, "Member 'TLUserWidgetWeaponSwapButton_OnUpdateWeaponPresetNum::InNewNum' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWeaponSwapButton_OnUpdateWeaponPresetNum, bInit) == 0x000004, "Member 'TLUserWidgetWeaponSwapButton_OnUpdateWeaponPresetNum::bInit' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferTargetItem.EventChangeFlow
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetEnchantTransferTargetItem_EventChangeFlow final
{
public:
	ETLEnchantTransferFlow                        InNewFlow;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLEnchantTransferFlow                        InPrevFlow;                                        // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferTargetItem_EventChangeFlow) == 0x000001, "Wrong alignment on TLUserWidgetEnchantTransferTargetItem_EventChangeFlow");
static_assert(sizeof(TLUserWidgetEnchantTransferTargetItem_EventChangeFlow) == 0x000002, "Wrong size on TLUserWidgetEnchantTransferTargetItem_EventChangeFlow");
static_assert(offsetof(TLUserWidgetEnchantTransferTargetItem_EventChangeFlow, InNewFlow) == 0x000000, "Member 'TLUserWidgetEnchantTransferTargetItem_EventChangeFlow::InNewFlow' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantTransferTargetItem_EventChangeFlow, InPrevFlow) == 0x000001, "Member 'TLUserWidgetEnchantTransferTargetItem_EventChangeFlow::InPrevFlow' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferTargetItem.EventEnchantTransferResult
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetEnchantTransferTargetItem_EventEnchantTransferResult final
{
public:
	ETLEnchantTransferResult                      InResult;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLevelChange;                                    // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferTargetItem_EventEnchantTransferResult) == 0x000001, "Wrong alignment on TLUserWidgetEnchantTransferTargetItem_EventEnchantTransferResult");
static_assert(sizeof(TLUserWidgetEnchantTransferTargetItem_EventEnchantTransferResult) == 0x000002, "Wrong size on TLUserWidgetEnchantTransferTargetItem_EventEnchantTransferResult");
static_assert(offsetof(TLUserWidgetEnchantTransferTargetItem_EventEnchantTransferResult, InResult) == 0x000000, "Member 'TLUserWidgetEnchantTransferTargetItem_EventEnchantTransferResult::InResult' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantTransferTargetItem_EventEnchantTransferResult, bInLevelChange) == 0x000001, "Member 'TLUserWidgetEnchantTransferTargetItem_EventEnchantTransferResult::bInLevelChange' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferTargetItem.EventMaterialItemChange
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetEnchantTransferTargetItem_EventMaterialItemChange final
{
public:
	uint64                                        InNewItemID;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        InPrevItemID;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferTargetItem_EventMaterialItemChange) == 0x000008, "Wrong alignment on TLUserWidgetEnchantTransferTargetItem_EventMaterialItemChange");
static_assert(sizeof(TLUserWidgetEnchantTransferTargetItem_EventMaterialItemChange) == 0x000010, "Wrong size on TLUserWidgetEnchantTransferTargetItem_EventMaterialItemChange");
static_assert(offsetof(TLUserWidgetEnchantTransferTargetItem_EventMaterialItemChange, InNewItemID) == 0x000000, "Member 'TLUserWidgetEnchantTransferTargetItem_EventMaterialItemChange::InNewItemID' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantTransferTargetItem_EventMaterialItemChange, InPrevItemID) == 0x000008, "Member 'TLUserWidgetEnchantTransferTargetItem_EventMaterialItemChange::InPrevItemID' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferTargetItem.EventProgressActionEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantTransferTargetItem_EventProgressActionEvent final
{
public:
	ETLEnchantTransferProgressActionEvent         InEvent;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferTargetItem_EventProgressActionEvent) == 0x000001, "Wrong alignment on TLUserWidgetEnchantTransferTargetItem_EventProgressActionEvent");
static_assert(sizeof(TLUserWidgetEnchantTransferTargetItem_EventProgressActionEvent) == 0x000001, "Wrong size on TLUserWidgetEnchantTransferTargetItem_EventProgressActionEvent");
static_assert(offsetof(TLUserWidgetEnchantTransferTargetItem_EventProgressActionEvent, InEvent) == 0x000000, "Member 'TLUserWidgetEnchantTransferTargetItem_EventProgressActionEvent::InEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferTargetItem.EventTargetItemChange
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetEnchantTransferTargetItem_EventTargetItemChange final
{
public:
	uint64                                        InNewItemID;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        InPrevItemID;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferTargetItem_EventTargetItemChange) == 0x000008, "Wrong alignment on TLUserWidgetEnchantTransferTargetItem_EventTargetItemChange");
static_assert(sizeof(TLUserWidgetEnchantTransferTargetItem_EventTargetItemChange) == 0x000010, "Wrong size on TLUserWidgetEnchantTransferTargetItem_EventTargetItemChange");
static_assert(offsetof(TLUserWidgetEnchantTransferTargetItem_EventTargetItemChange, InNewItemID) == 0x000000, "Member 'TLUserWidgetEnchantTransferTargetItem_EventTargetItemChange::InNewItemID' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEnchantTransferTargetItem_EventTargetItemChange, InPrevItemID) == 0x000008, "Member 'TLUserWidgetEnchantTransferTargetItem_EventTargetItemChange::InPrevItemID' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferTargetItem.OnEnchantResultAction
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantTransferTargetItem_OnEnchantResultAction final
{
public:
	bool                                          bInLevelChange;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferTargetItem_OnEnchantResultAction) == 0x000001, "Wrong alignment on TLUserWidgetEnchantTransferTargetItem_OnEnchantResultAction");
static_assert(sizeof(TLUserWidgetEnchantTransferTargetItem_OnEnchantResultAction) == 0x000001, "Wrong size on TLUserWidgetEnchantTransferTargetItem_OnEnchantResultAction");
static_assert(offsetof(TLUserWidgetEnchantTransferTargetItem_OnEnchantResultAction, bInLevelChange) == 0x000000, "Member 'TLUserWidgetEnchantTransferTargetItem_OnEnchantResultAction::bInLevelChange' has a wrong offset!");

// Function TLClient.TLUserWidgetEnchantTransferTargetItem.OnSetItemSlot
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEnchantTransferTargetItem_OnSetItemSlot final
{
public:
	EItemGrade                                    InGrade;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEnchantTransferTargetItem_OnSetItemSlot) == 0x000001, "Wrong alignment on TLUserWidgetEnchantTransferTargetItem_OnSetItemSlot");
static_assert(sizeof(TLUserWidgetEnchantTransferTargetItem_OnSetItemSlot) == 0x000001, "Wrong size on TLUserWidgetEnchantTransferTargetItem_OnSetItemSlot");
static_assert(offsetof(TLUserWidgetEnchantTransferTargetItem_OnSetItemSlot, InGrade) == 0x000000, "Member 'TLUserWidgetEnchantTransferTargetItem_OnSetItemSlot::InGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetRuneEffectListSlot.OnNegativeStat
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRuneEffectListSlot_OnNegativeStat final
{
public:
	bool                                          InIsNegativeStat;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRuneEffectListSlot_OnNegativeStat) == 0x000001, "Wrong alignment on TLUserWidgetRuneEffectListSlot_OnNegativeStat");
static_assert(sizeof(TLUserWidgetRuneEffectListSlot_OnNegativeStat) == 0x000001, "Wrong size on TLUserWidgetRuneEffectListSlot_OnNegativeStat");
static_assert(offsetof(TLUserWidgetRuneEffectListSlot_OnNegativeStat, InIsNegativeStat) == 0x000000, "Member 'TLUserWidgetRuneEffectListSlot_OnNegativeStat::InIsNegativeStat' has a wrong offset!");

// Function TLClient.TLUserWidgetRuneSocketSlot.OnActiveSynergy
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetRuneSocketSlot_OnActiveSynergy final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemGrade                                    InSynergyGrade;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRuneSocketSlot_OnActiveSynergy) == 0x000001, "Wrong alignment on TLUserWidgetRuneSocketSlot_OnActiveSynergy");
static_assert(sizeof(TLUserWidgetRuneSocketSlot_OnActiveSynergy) == 0x000002, "Wrong size on TLUserWidgetRuneSocketSlot_OnActiveSynergy");
static_assert(offsetof(TLUserWidgetRuneSocketSlot_OnActiveSynergy, InIsActive) == 0x000000, "Member 'TLUserWidgetRuneSocketSlot_OnActiveSynergy::InIsActive' has a wrong offset!");
static_assert(offsetof(TLUserWidgetRuneSocketSlot_OnActiveSynergy, InSynergyGrade) == 0x000001, "Member 'TLUserWidgetRuneSocketSlot_OnActiveSynergy::InSynergyGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetRuneSocketSlot.OnEmptyRuneSocket
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRuneSocketSlot_OnEmptyRuneSocket final
{
public:
	bool                                          InIsEmpty;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRuneSocketSlot_OnEmptyRuneSocket) == 0x000001, "Wrong alignment on TLUserWidgetRuneSocketSlot_OnEmptyRuneSocket");
static_assert(sizeof(TLUserWidgetRuneSocketSlot_OnEmptyRuneSocket) == 0x000001, "Wrong size on TLUserWidgetRuneSocketSlot_OnEmptyRuneSocket");
static_assert(offsetof(TLUserWidgetRuneSocketSlot_OnEmptyRuneSocket, InIsEmpty) == 0x000000, "Member 'TLUserWidgetRuneSocketSlot_OnEmptyRuneSocket::InIsEmpty' has a wrong offset!");

// Function TLClient.TLUserWidgetRuneSocketSlot.OnSocketSelected
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRuneSocketSlot_OnSocketSelected final
{
public:
	bool                                          InIsSelected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRuneSocketSlot_OnSocketSelected) == 0x000001, "Wrong alignment on TLUserWidgetRuneSocketSlot_OnSocketSelected");
static_assert(sizeof(TLUserWidgetRuneSocketSlot_OnSocketSelected) == 0x000001, "Wrong size on TLUserWidgetRuneSocketSlot_OnSocketSelected");
static_assert(offsetof(TLUserWidgetRuneSocketSlot_OnSocketSelected, InIsSelected) == 0x000000, "Member 'TLUserWidgetRuneSocketSlot_OnSocketSelected::InIsSelected' has a wrong offset!");

// Function TLClient.TLUserWidgetRuneSocketSlot.OnSocketState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRuneSocketSlot_OnSocketState final
{
public:
	ETLRuneSocketState                            InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRuneSocketSlot_OnSocketState) == 0x000001, "Wrong alignment on TLUserWidgetRuneSocketSlot_OnSocketState");
static_assert(sizeof(TLUserWidgetRuneSocketSlot_OnSocketState) == 0x000001, "Wrong size on TLUserWidgetRuneSocketSlot_OnSocketState");
static_assert(offsetof(TLUserWidgetRuneSocketSlot_OnSocketState, InState) == 0x000000, "Member 'TLUserWidgetRuneSocketSlot_OnSocketState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetRuneSocketSlot.OnWaitingRuneSocket
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRuneSocketSlot_OnWaitingRuneSocket final
{
public:
	bool                                          InIsWaiting;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRuneSocketSlot_OnWaitingRuneSocket) == 0x000001, "Wrong alignment on TLUserWidgetRuneSocketSlot_OnWaitingRuneSocket");
static_assert(sizeof(TLUserWidgetRuneSocketSlot_OnWaitingRuneSocket) == 0x000001, "Wrong size on TLUserWidgetRuneSocketSlot_OnWaitingRuneSocket");
static_assert(offsetof(TLUserWidgetRuneSocketSlot_OnWaitingRuneSocket, InIsWaiting) == 0x000000, "Member 'TLUserWidgetRuneSocketSlot_OnWaitingRuneSocket::InIsWaiting' has a wrong offset!");

// Function TLClient.TLUserWidgetEventCalenderMainSchedule.OnTextRolling
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEventCalenderMainSchedule_OnTextRolling final
{
public:
	bool                                          InOnRolling;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEventCalenderMainSchedule_OnTextRolling) == 0x000001, "Wrong alignment on TLUserWidgetEventCalenderMainSchedule_OnTextRolling");
static_assert(sizeof(TLUserWidgetEventCalenderMainSchedule_OnTextRolling) == 0x000001, "Wrong size on TLUserWidgetEventCalenderMainSchedule_OnTextRolling");
static_assert(offsetof(TLUserWidgetEventCalenderMainSchedule_OnTextRolling, InOnRolling) == 0x000000, "Member 'TLUserWidgetEventCalenderMainSchedule_OnTextRolling::InOnRolling' has a wrong offset!");

// Function TLClient.TLUserWidgetEventCalenderSchedule.MainSchedulePos
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetEventCalenderSchedule_MainSchedulePos final
{
public:
	int32                                         InStartPos;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InEndPos;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEventCalenderSchedule_MainSchedulePos) == 0x000004, "Wrong alignment on TLUserWidgetEventCalenderSchedule_MainSchedulePos");
static_assert(sizeof(TLUserWidgetEventCalenderSchedule_MainSchedulePos) == 0x000008, "Wrong size on TLUserWidgetEventCalenderSchedule_MainSchedulePos");
static_assert(offsetof(TLUserWidgetEventCalenderSchedule_MainSchedulePos, InStartPos) == 0x000000, "Member 'TLUserWidgetEventCalenderSchedule_MainSchedulePos::InStartPos' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEventCalenderSchedule_MainSchedulePos, InEndPos) == 0x000004, "Member 'TLUserWidgetEventCalenderSchedule_MainSchedulePos::InEndPos' has a wrong offset!");

// Function TLClient.TLUserWidgetEventCalenderSchedule.OnSubScheduleBar
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEventCalenderSchedule_OnSubScheduleBar final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEventCalenderSchedule_OnSubScheduleBar) == 0x000001, "Wrong alignment on TLUserWidgetEventCalenderSchedule_OnSubScheduleBar");
static_assert(sizeof(TLUserWidgetEventCalenderSchedule_OnSubScheduleBar) == 0x000001, "Wrong size on TLUserWidgetEventCalenderSchedule_OnSubScheduleBar");
static_assert(offsetof(TLUserWidgetEventCalenderSchedule_OnSubScheduleBar, InShow) == 0x000000, "Member 'TLUserWidgetEventCalenderSchedule_OnSubScheduleBar::InShow' has a wrong offset!");

// Function TLClient.TLUserWidgetEventCalenderSchedule.SubSchedulePos
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetEventCalenderSchedule_SubSchedulePos final
{
public:
	int32                                         InStartPos;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InEndPos;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEventCalenderSchedule_SubSchedulePos) == 0x000004, "Wrong alignment on TLUserWidgetEventCalenderSchedule_SubSchedulePos");
static_assert(sizeof(TLUserWidgetEventCalenderSchedule_SubSchedulePos) == 0x000008, "Wrong size on TLUserWidgetEventCalenderSchedule_SubSchedulePos");
static_assert(offsetof(TLUserWidgetEventCalenderSchedule_SubSchedulePos, InStartPos) == 0x000000, "Member 'TLUserWidgetEventCalenderSchedule_SubSchedulePos::InStartPos' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEventCalenderSchedule_SubSchedulePos, InEndPos) == 0x000004, "Member 'TLUserWidgetEventCalenderSchedule_SubSchedulePos::InEndPos' has a wrong offset!");

// Function TLClient.TLUserWidgetEventSceneEnchant.EventChangeFlow
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetEventSceneEnchant_EventChangeFlow final
{
public:
	ETLEnchantTransferFlow                        InNewFlow;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLEnchantTransferFlow                        InPrevFlow;                                        // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEventSceneEnchant_EventChangeFlow) == 0x000001, "Wrong alignment on TLUserWidgetEventSceneEnchant_EventChangeFlow");
static_assert(sizeof(TLUserWidgetEventSceneEnchant_EventChangeFlow) == 0x000002, "Wrong size on TLUserWidgetEventSceneEnchant_EventChangeFlow");
static_assert(offsetof(TLUserWidgetEventSceneEnchant_EventChangeFlow, InNewFlow) == 0x000000, "Member 'TLUserWidgetEventSceneEnchant_EventChangeFlow::InNewFlow' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEventSceneEnchant_EventChangeFlow, InPrevFlow) == 0x000001, "Member 'TLUserWidgetEventSceneEnchant_EventChangeFlow::InPrevFlow' has a wrong offset!");

// Function TLClient.TLUserWidgetEventSceneEnchant.EventChangeTraitStep
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetEventSceneEnchant_EventChangeTraitStep final
{
public:
	EItemTraitEnchantStep                         InNewStep;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemTraitEnchantStep                         InPrevStep;                                        // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEventSceneEnchant_EventChangeTraitStep) == 0x000001, "Wrong alignment on TLUserWidgetEventSceneEnchant_EventChangeTraitStep");
static_assert(sizeof(TLUserWidgetEventSceneEnchant_EventChangeTraitStep) == 0x000002, "Wrong size on TLUserWidgetEventSceneEnchant_EventChangeTraitStep");
static_assert(offsetof(TLUserWidgetEventSceneEnchant_EventChangeTraitStep, InNewStep) == 0x000000, "Member 'TLUserWidgetEventSceneEnchant_EventChangeTraitStep::InNewStep' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEventSceneEnchant_EventChangeTraitStep, InPrevStep) == 0x000001, "Member 'TLUserWidgetEventSceneEnchant_EventChangeTraitStep::InPrevStep' has a wrong offset!");

// Function TLClient.TLUserWidgetEventSceneEnchant.EventTabSelected
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetEventSceneEnchant_EventTabSelected final
{
public:
	int32                                         InSelectedIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEventSceneEnchant_EventTabSelected) == 0x000004, "Wrong alignment on TLUserWidgetEventSceneEnchant_EventTabSelected");
static_assert(sizeof(TLUserWidgetEventSceneEnchant_EventTabSelected) == 0x000004, "Wrong size on TLUserWidgetEventSceneEnchant_EventTabSelected");
static_assert(offsetof(TLUserWidgetEventSceneEnchant_EventTabSelected, InSelectedIndex) == 0x000000, "Member 'TLUserWidgetEventSceneEnchant_EventTabSelected::InSelectedIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetEventSceneEnchant.HandleEnchantItemSlotDrag
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetEventSceneEnchant_HandleEnchantItemSlotDrag final
{
public:
	class UTLUserWidgetEnchantItemSlot*           InSlot;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDrag;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetEventSceneEnchant_HandleEnchantItemSlotDrag) == 0x000008, "Wrong alignment on TLUserWidgetEventSceneEnchant_HandleEnchantItemSlotDrag");
static_assert(sizeof(TLUserWidgetEventSceneEnchant_HandleEnchantItemSlotDrag) == 0x000010, "Wrong size on TLUserWidgetEventSceneEnchant_HandleEnchantItemSlotDrag");
static_assert(offsetof(TLUserWidgetEventSceneEnchant_HandleEnchantItemSlotDrag, InSlot) == 0x000000, "Member 'TLUserWidgetEventSceneEnchant_HandleEnchantItemSlotDrag::InSlot' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEventSceneEnchant_HandleEnchantItemSlotDrag, InDrag) == 0x000008, "Member 'TLUserWidgetEventSceneEnchant_HandleEnchantItemSlotDrag::InDrag' has a wrong offset!");

// Function TLClient.TLUserWidgetEventSceneEnchant.IsLongPressLock
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEventSceneEnchant_IsLongPressLock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEventSceneEnchant_IsLongPressLock) == 0x000001, "Wrong alignment on TLUserWidgetEventSceneEnchant_IsLongPressLock");
static_assert(sizeof(TLUserWidgetEventSceneEnchant_IsLongPressLock) == 0x000001, "Wrong size on TLUserWidgetEventSceneEnchant_IsLongPressLock");
static_assert(offsetof(TLUserWidgetEventSceneEnchant_IsLongPressLock, ReturnValue) == 0x000000, "Member 'TLUserWidgetEventSceneEnchant_IsLongPressLock::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetEventSceneEnchant.IsLongPressPlayback
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEventSceneEnchant_IsLongPressPlayback final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEventSceneEnchant_IsLongPressPlayback) == 0x000001, "Wrong alignment on TLUserWidgetEventSceneEnchant_IsLongPressPlayback");
static_assert(sizeof(TLUserWidgetEventSceneEnchant_IsLongPressPlayback) == 0x000001, "Wrong size on TLUserWidgetEventSceneEnchant_IsLongPressPlayback");
static_assert(offsetof(TLUserWidgetEventSceneEnchant_IsLongPressPlayback, ReturnValue) == 0x000000, "Member 'TLUserWidgetEventSceneEnchant_IsLongPressPlayback::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetEventSceneEnchant.OnEnchantItemDrag
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetEventSceneEnchant_OnEnchantItemDrag final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaterial;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrag;                                             // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetEventSceneEnchant_OnEnchantItemDrag) == 0x000004, "Wrong alignment on TLUserWidgetEventSceneEnchant_OnEnchantItemDrag");
static_assert(sizeof(TLUserWidgetEventSceneEnchant_OnEnchantItemDrag) == 0x000008, "Wrong size on TLUserWidgetEventSceneEnchant_OnEnchantItemDrag");
static_assert(offsetof(TLUserWidgetEventSceneEnchant_OnEnchantItemDrag, Index_0) == 0x000000, "Member 'TLUserWidgetEventSceneEnchant_OnEnchantItemDrag::Index_0' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEventSceneEnchant_OnEnchantItemDrag, bMaterial) == 0x000004, "Member 'TLUserWidgetEventSceneEnchant_OnEnchantItemDrag::bMaterial' has a wrong offset!");
static_assert(offsetof(TLUserWidgetEventSceneEnchant_OnEnchantItemDrag, bDrag) == 0x000005, "Member 'TLUserWidgetEventSceneEnchant_OnEnchantItemDrag::bDrag' has a wrong offset!");

// Function TLClient.TLUserWidgetEventSceneEnchant.OnGoToSettingPhase
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEventSceneEnchant_OnGoToSettingPhase final
{
public:
	bool                                          InbInit;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEventSceneEnchant_OnGoToSettingPhase) == 0x000001, "Wrong alignment on TLUserWidgetEventSceneEnchant_OnGoToSettingPhase");
static_assert(sizeof(TLUserWidgetEventSceneEnchant_OnGoToSettingPhase) == 0x000001, "Wrong size on TLUserWidgetEventSceneEnchant_OnGoToSettingPhase");
static_assert(offsetof(TLUserWidgetEventSceneEnchant_OnGoToSettingPhase, InbInit) == 0x000000, "Member 'TLUserWidgetEventSceneEnchant_OnGoToSettingPhase::InbInit' has a wrong offset!");

// Function TLClient.TLUserWidgetEventSceneEnchant.OnLongPressEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEventSceneEnchant_OnLongPressEvent final
{
public:
	bool                                          bPress;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEventSceneEnchant_OnLongPressEvent) == 0x000001, "Wrong alignment on TLUserWidgetEventSceneEnchant_OnLongPressEvent");
static_assert(sizeof(TLUserWidgetEventSceneEnchant_OnLongPressEvent) == 0x000001, "Wrong size on TLUserWidgetEventSceneEnchant_OnLongPressEvent");
static_assert(offsetof(TLUserWidgetEventSceneEnchant_OnLongPressEvent, bPress) == 0x000000, "Member 'TLUserWidgetEventSceneEnchant_OnLongPressEvent::bPress' has a wrong offset!");

// Function TLClient.TLUserWidgetEventSceneEnchant.OnTargetItemSelect
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetEventSceneEnchant_OnTargetItemSelect final
{
public:
	bool                                          bSelect;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetEventSceneEnchant_OnTargetItemSelect) == 0x000001, "Wrong alignment on TLUserWidgetEventSceneEnchant_OnTargetItemSelect");
static_assert(sizeof(TLUserWidgetEventSceneEnchant_OnTargetItemSelect) == 0x000001, "Wrong size on TLUserWidgetEventSceneEnchant_OnTargetItemSelect");
static_assert(offsetof(TLUserWidgetEventSceneEnchant_OnTargetItemSelect, bSelect) == 0x000000, "Member 'TLUserWidgetEventSceneEnchant_OnTargetItemSelect::bSelect' has a wrong offset!");

// Function TLClient.TLUserWidgetExploreAlarmCode.OnStateCompleteAnim
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetExploreAlarmCode_OnStateCompleteAnim final
{
public:
	bool                                          IsPrologue;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetExploreAlarmCode_OnStateCompleteAnim) == 0x000001, "Wrong alignment on TLUserWidgetExploreAlarmCode_OnStateCompleteAnim");
static_assert(sizeof(TLUserWidgetExploreAlarmCode_OnStateCompleteAnim) == 0x000001, "Wrong size on TLUserWidgetExploreAlarmCode_OnStateCompleteAnim");
static_assert(offsetof(TLUserWidgetExploreAlarmCode_OnStateCompleteAnim, IsPrologue) == 0x000000, "Member 'TLUserWidgetExploreAlarmCode_OnStateCompleteAnim::IsPrologue' has a wrong offset!");

// Function TLClient.TLUserWidgetExploreAlarmCode.OnUpdateCategoryType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetExploreAlarmCode_OnUpdateCategoryType final
{
public:
	ECodexCategoryType                            CodexCategoryType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetExploreAlarmCode_OnUpdateCategoryType) == 0x000001, "Wrong alignment on TLUserWidgetExploreAlarmCode_OnUpdateCategoryType");
static_assert(sizeof(TLUserWidgetExploreAlarmCode_OnUpdateCategoryType) == 0x000001, "Wrong size on TLUserWidgetExploreAlarmCode_OnUpdateCategoryType");
static_assert(offsetof(TLUserWidgetExploreAlarmCode_OnUpdateCategoryType, CodexCategoryType) == 0x000000, "Member 'TLUserWidgetExploreAlarmCode_OnUpdateCategoryType::CodexCategoryType' has a wrong offset!");

// Function TLClient.TLUserWidgetExploreCodeBase.OnCodeFocusEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetExploreCodeBase_OnCodeFocusEvent final
{
public:
	bool                                          InbVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetExploreCodeBase_OnCodeFocusEvent) == 0x000001, "Wrong alignment on TLUserWidgetExploreCodeBase_OnCodeFocusEvent");
static_assert(sizeof(TLUserWidgetExploreCodeBase_OnCodeFocusEvent) == 0x000001, "Wrong size on TLUserWidgetExploreCodeBase_OnCodeFocusEvent");
static_assert(offsetof(TLUserWidgetExploreCodeBase_OnCodeFocusEvent, InbVisible) == 0x000000, "Member 'TLUserWidgetExploreCodeBase_OnCodeFocusEvent::InbVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetExploreCodeBase.OnCodeStatusEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetExploreCodeBase_OnCodeStatusEvent final
{
public:
	ETLCodexCommonStatusType                      InCodeStatusType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetExploreCodeBase_OnCodeStatusEvent) == 0x000001, "Wrong alignment on TLUserWidgetExploreCodeBase_OnCodeStatusEvent");
static_assert(sizeof(TLUserWidgetExploreCodeBase_OnCodeStatusEvent) == 0x000001, "Wrong size on TLUserWidgetExploreCodeBase_OnCodeStatusEvent");
static_assert(offsetof(TLUserWidgetExploreCodeBase_OnCodeStatusEvent, InCodeStatusType) == 0x000000, "Member 'TLUserWidgetExploreCodeBase_OnCodeStatusEvent::InCodeStatusType' has a wrong offset!");

// Function TLClient.TLUserWidgetExploreCodeBase.OnDimmedEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetExploreCodeBase_OnDimmedEvent final
{
public:
	bool                                          InbDisable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetExploreCodeBase_OnDimmedEvent) == 0x000001, "Wrong alignment on TLUserWidgetExploreCodeBase_OnDimmedEvent");
static_assert(sizeof(TLUserWidgetExploreCodeBase_OnDimmedEvent) == 0x000001, "Wrong size on TLUserWidgetExploreCodeBase_OnDimmedEvent");
static_assert(offsetof(TLUserWidgetExploreCodeBase_OnDimmedEvent, InbDisable) == 0x000000, "Member 'TLUserWidgetExploreCodeBase_OnDimmedEvent::InbDisable' has a wrong offset!");

// Function TLClient.TLUserWidgetExploreCodeBase.OnRewarableEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetExploreCodeBase_OnRewarableEvent final
{
public:
	bool                                          InbRewardable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetExploreCodeBase_OnRewarableEvent) == 0x000001, "Wrong alignment on TLUserWidgetExploreCodeBase_OnRewarableEvent");
static_assert(sizeof(TLUserWidgetExploreCodeBase_OnRewarableEvent) == 0x000001, "Wrong size on TLUserWidgetExploreCodeBase_OnRewarableEvent");
static_assert(offsetof(TLUserWidgetExploreCodeBase_OnRewarableEvent, InbRewardable) == 0x000000, "Member 'TLUserWidgetExploreCodeBase_OnRewarableEvent::InbRewardable' has a wrong offset!");

// Function TLClient.TLUserWidgetExploreCodeDetailObjective.OnStatusEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetExploreCodeDetailObjective_OnStatusEvent final
{
public:
	ETLCodexCommonStatusType                      InStatusType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetExploreCodeDetailObjective_OnStatusEvent) == 0x000001, "Wrong alignment on TLUserWidgetExploreCodeDetailObjective_OnStatusEvent");
static_assert(sizeof(TLUserWidgetExploreCodeDetailObjective_OnStatusEvent) == 0x000001, "Wrong size on TLUserWidgetExploreCodeDetailObjective_OnStatusEvent");
static_assert(offsetof(TLUserWidgetExploreCodeDetailObjective_OnStatusEvent, InStatusType) == 0x000000, "Member 'TLUserWidgetExploreCodeDetailObjective_OnStatusEvent::InStatusType' has a wrong offset!");

// Function TLClient.TLUserWidgetExploreCodeDetailObjective.OnUpdateNextLineEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetExploreCodeDetailObjective_OnUpdateNextLineEvent final
{
public:
	bool                                          InbAttained;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetExploreCodeDetailObjective_OnUpdateNextLineEvent) == 0x000001, "Wrong alignment on TLUserWidgetExploreCodeDetailObjective_OnUpdateNextLineEvent");
static_assert(sizeof(TLUserWidgetExploreCodeDetailObjective_OnUpdateNextLineEvent) == 0x000001, "Wrong size on TLUserWidgetExploreCodeDetailObjective_OnUpdateNextLineEvent");
static_assert(offsetof(TLUserWidgetExploreCodeDetailObjective_OnUpdateNextLineEvent, InbAttained) == 0x000000, "Member 'TLUserWidgetExploreCodeDetailObjective_OnUpdateNextLineEvent::InbAttained' has a wrong offset!");

// Function TLClient.TLUserWidgetExploreCodeDetailObjective.OnUpdatePrevLineEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetExploreCodeDetailObjective_OnUpdatePrevLineEvent final
{
public:
	bool                                          InbAttained;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetExploreCodeDetailObjective_OnUpdatePrevLineEvent) == 0x000001, "Wrong alignment on TLUserWidgetExploreCodeDetailObjective_OnUpdatePrevLineEvent");
static_assert(sizeof(TLUserWidgetExploreCodeDetailObjective_OnUpdatePrevLineEvent) == 0x000001, "Wrong size on TLUserWidgetExploreCodeDetailObjective_OnUpdatePrevLineEvent");
static_assert(offsetof(TLUserWidgetExploreCodeDetailObjective_OnUpdatePrevLineEvent, InbAttained) == 0x000000, "Member 'TLUserWidgetExploreCodeDetailObjective_OnUpdatePrevLineEvent::InbAttained' has a wrong offset!");

// Function TLClient.TLUserWidgetExploreGroup.OnUnLockMemorial
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetExploreGroup_OnUnLockMemorial final
{
public:
	bool                                          IsUnLock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetExploreGroup_OnUnLockMemorial) == 0x000001, "Wrong alignment on TLUserWidgetExploreGroup_OnUnLockMemorial");
static_assert(sizeof(TLUserWidgetExploreGroup_OnUnLockMemorial) == 0x000001, "Wrong size on TLUserWidgetExploreGroup_OnUnLockMemorial");
static_assert(offsetof(TLUserWidgetExploreGroup_OnUnLockMemorial, IsUnLock) == 0x000000, "Member 'TLUserWidgetExploreGroup_OnUnLockMemorial::IsUnLock' has a wrong offset!");

// Function TLClient.TLUserWidgetExploreObjective.OnStatusEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetExploreObjective_OnStatusEvent final
{
public:
	ETLCodexCommonStatusType                      InStatusType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetExploreObjective_OnStatusEvent) == 0x000001, "Wrong alignment on TLUserWidgetExploreObjective_OnStatusEvent");
static_assert(sizeof(TLUserWidgetExploreObjective_OnStatusEvent) == 0x000001, "Wrong size on TLUserWidgetExploreObjective_OnStatusEvent");
static_assert(offsetof(TLUserWidgetExploreObjective_OnStatusEvent, InStatusType) == 0x000000, "Member 'TLUserWidgetExploreObjective_OnStatusEvent::InStatusType' has a wrong offset!");

// Function TLClient.TLUserWidgetFieldBossGuideFrame.OnCurrentType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetFieldBossGuideFrame_OnCurrentType final
{
public:
	ETLFieldBossEventState                        InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetFieldBossGuideFrame_OnCurrentType) == 0x000001, "Wrong alignment on TLUserWidgetFieldBossGuideFrame_OnCurrentType");
static_assert(sizeof(TLUserWidgetFieldBossGuideFrame_OnCurrentType) == 0x000001, "Wrong size on TLUserWidgetFieldBossGuideFrame_OnCurrentType");
static_assert(offsetof(TLUserWidgetFieldBossGuideFrame_OnCurrentType, InState) == 0x000000, "Member 'TLUserWidgetFieldBossGuideFrame_OnCurrentType::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetFieldBossGuideFrame.OnUpdateScheduleType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetFieldBossGuideFrame_OnUpdateScheduleType final
{
public:
	ETLEventScheduleType                          InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetFieldBossGuideFrame_OnUpdateScheduleType) == 0x000001, "Wrong alignment on TLUserWidgetFieldBossGuideFrame_OnUpdateScheduleType");
static_assert(sizeof(TLUserWidgetFieldBossGuideFrame_OnUpdateScheduleType) == 0x000001, "Wrong size on TLUserWidgetFieldBossGuideFrame_OnUpdateScheduleType");
static_assert(offsetof(TLUserWidgetFieldBossGuideFrame_OnUpdateScheduleType, InType) == 0x000000, "Member 'TLUserWidgetFieldBossGuideFrame_OnUpdateScheduleType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetSelectableItemSlot.OnSlotDimmed
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSelectableItemSlot_OnSlotDimmed final
{
public:
	bool                                          InIsDimmed;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSelectableItemSlot_OnSlotDimmed) == 0x000001, "Wrong alignment on TLUserWidgetSelectableItemSlot_OnSlotDimmed");
static_assert(sizeof(TLUserWidgetSelectableItemSlot_OnSlotDimmed) == 0x000001, "Wrong size on TLUserWidgetSelectableItemSlot_OnSlotDimmed");
static_assert(offsetof(TLUserWidgetSelectableItemSlot_OnSlotDimmed, InIsDimmed) == 0x000000, "Member 'TLUserWidgetSelectableItemSlot_OnSlotDimmed::InIsDimmed' has a wrong offset!");

// Function TLClient.TLUserWidgetFirstSettingBrightness.HandleSliderValueChanged
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetFirstSettingBrightness_HandleSliderValueChanged final
{
public:
	float                                         InBrightness;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetFirstSettingBrightness_HandleSliderValueChanged) == 0x000004, "Wrong alignment on TLUserWidgetFirstSettingBrightness_HandleSliderValueChanged");
static_assert(sizeof(TLUserWidgetFirstSettingBrightness_HandleSliderValueChanged) == 0x000004, "Wrong size on TLUserWidgetFirstSettingBrightness_HandleSliderValueChanged");
static_assert(offsetof(TLUserWidgetFirstSettingBrightness_HandleSliderValueChanged, InBrightness) == 0x000000, "Member 'TLUserWidgetFirstSettingBrightness_HandleSliderValueChanged::InBrightness' has a wrong offset!");

// Function TLClient.TLUserWidgetViewBindingLibrary.AddEnabledBindingOnViewModel
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetViewBindingLibrary_AddEnabledBindingOnViewModel final
{
public:
	class UWidget*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLBindingOperator                            Operator;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SourceValue;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetViewBindingLibrary_AddEnabledBindingOnViewModel) == 0x000008, "Wrong alignment on TLUserWidgetViewBindingLibrary_AddEnabledBindingOnViewModel");
static_assert(sizeof(TLUserWidgetViewBindingLibrary_AddEnabledBindingOnViewModel) == 0x000020, "Wrong size on TLUserWidgetViewBindingLibrary_AddEnabledBindingOnViewModel");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddEnabledBindingOnViewModel, Target) == 0x000000, "Member 'TLUserWidgetViewBindingLibrary_AddEnabledBindingOnViewModel::Target' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddEnabledBindingOnViewModel, PropertyName) == 0x000008, "Member 'TLUserWidgetViewBindingLibrary_AddEnabledBindingOnViewModel::PropertyName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddEnabledBindingOnViewModel, Operator) == 0x000010, "Member 'TLUserWidgetViewBindingLibrary_AddEnabledBindingOnViewModel::Operator' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddEnabledBindingOnViewModel, SourceValue) == 0x000014, "Member 'TLUserWidgetViewBindingLibrary_AddEnabledBindingOnViewModel::SourceValue' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddEnabledBindingOnViewModel, ReturnValue) == 0x000018, "Member 'TLUserWidgetViewBindingLibrary_AddEnabledBindingOnViewModel::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetViewBindingLibrary.AddImageBrushBindingOnViewModel
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetViewBindingLibrary_AddImageBrushBindingOnViewModel final
{
public:
	class UTLImage*                               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetVisibleWithValue;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetViewBindingLibrary_AddImageBrushBindingOnViewModel) == 0x000008, "Wrong alignment on TLUserWidgetViewBindingLibrary_AddImageBrushBindingOnViewModel");
static_assert(sizeof(TLUserWidgetViewBindingLibrary_AddImageBrushBindingOnViewModel) == 0x000018, "Wrong size on TLUserWidgetViewBindingLibrary_AddImageBrushBindingOnViewModel");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddImageBrushBindingOnViewModel, Target) == 0x000000, "Member 'TLUserWidgetViewBindingLibrary_AddImageBrushBindingOnViewModel::Target' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddImageBrushBindingOnViewModel, PropertyName) == 0x000008, "Member 'TLUserWidgetViewBindingLibrary_AddImageBrushBindingOnViewModel::PropertyName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddImageBrushBindingOnViewModel, bSetVisibleWithValue) == 0x000010, "Member 'TLUserWidgetViewBindingLibrary_AddImageBrushBindingOnViewModel::bSetVisibleWithValue' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddImageBrushBindingOnViewModel, ReturnValue) == 0x000011, "Member 'TLUserWidgetViewBindingLibrary_AddImageBrushBindingOnViewModel::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetViewBindingLibrary.AddImageColorAndOpacityBindingOnViewModel
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetViewBindingLibrary_AddImageColorAndOpacityBindingOnViewModel final
{
public:
	class UTLImage*                               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetViewBindingLibrary_AddImageColorAndOpacityBindingOnViewModel) == 0x000008, "Wrong alignment on TLUserWidgetViewBindingLibrary_AddImageColorAndOpacityBindingOnViewModel");
static_assert(sizeof(TLUserWidgetViewBindingLibrary_AddImageColorAndOpacityBindingOnViewModel) == 0x000018, "Wrong size on TLUserWidgetViewBindingLibrary_AddImageColorAndOpacityBindingOnViewModel");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddImageColorAndOpacityBindingOnViewModel, Target) == 0x000000, "Member 'TLUserWidgetViewBindingLibrary_AddImageColorAndOpacityBindingOnViewModel::Target' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddImageColorAndOpacityBindingOnViewModel, PropertyName) == 0x000008, "Member 'TLUserWidgetViewBindingLibrary_AddImageColorAndOpacityBindingOnViewModel::PropertyName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddImageColorAndOpacityBindingOnViewModel, ReturnValue) == 0x000010, "Member 'TLUserWidgetViewBindingLibrary_AddImageColorAndOpacityBindingOnViewModel::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetViewBindingLibrary.AddListChangedBindingOnViewModel
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetViewBindingLibrary_AddListChangedBindingOnViewModel final
{
public:
	class UListView*                              Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetViewBindingLibrary_AddListChangedBindingOnViewModel) == 0x000008, "Wrong alignment on TLUserWidgetViewBindingLibrary_AddListChangedBindingOnViewModel");
static_assert(sizeof(TLUserWidgetViewBindingLibrary_AddListChangedBindingOnViewModel) == 0x000018, "Wrong size on TLUserWidgetViewBindingLibrary_AddListChangedBindingOnViewModel");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddListChangedBindingOnViewModel, Target) == 0x000000, "Member 'TLUserWidgetViewBindingLibrary_AddListChangedBindingOnViewModel::Target' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddListChangedBindingOnViewModel, PropertyName) == 0x000008, "Member 'TLUserWidgetViewBindingLibrary_AddListChangedBindingOnViewModel::PropertyName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddListChangedBindingOnViewModel, ReturnValue) == 0x000010, "Member 'TLUserWidgetViewBindingLibrary_AddListChangedBindingOnViewModel::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetViewBindingLibrary.AddPercentBindingOnViewModel
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetViewBindingLibrary_AddPercentBindingOnViewModel final
{
public:
	class UTLProgressBar*                         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetViewBindingLibrary_AddPercentBindingOnViewModel) == 0x000008, "Wrong alignment on TLUserWidgetViewBindingLibrary_AddPercentBindingOnViewModel");
static_assert(sizeof(TLUserWidgetViewBindingLibrary_AddPercentBindingOnViewModel) == 0x000018, "Wrong size on TLUserWidgetViewBindingLibrary_AddPercentBindingOnViewModel");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddPercentBindingOnViewModel, Target) == 0x000000, "Member 'TLUserWidgetViewBindingLibrary_AddPercentBindingOnViewModel::Target' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddPercentBindingOnViewModel, PropertyName) == 0x000008, "Member 'TLUserWidgetViewBindingLibrary_AddPercentBindingOnViewModel::PropertyName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddPercentBindingOnViewModel, ReturnValue) == 0x000010, "Member 'TLUserWidgetViewBindingLibrary_AddPercentBindingOnViewModel::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetViewBindingLibrary.AddTextBindingFloatOnViewModel
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetViewBindingLibrary_AddTextBindingFloatOnViewModel final
{
public:
	class UTLTextBlock*                           Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERoundingMode                                 RoundingMode;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FractionalDigits;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetViewBindingLibrary_AddTextBindingFloatOnViewModel) == 0x000008, "Wrong alignment on TLUserWidgetViewBindingLibrary_AddTextBindingFloatOnViewModel");
static_assert(sizeof(TLUserWidgetViewBindingLibrary_AddTextBindingFloatOnViewModel) == 0x000020, "Wrong size on TLUserWidgetViewBindingLibrary_AddTextBindingFloatOnViewModel");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextBindingFloatOnViewModel, Target) == 0x000000, "Member 'TLUserWidgetViewBindingLibrary_AddTextBindingFloatOnViewModel::Target' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextBindingFloatOnViewModel, PropertyName) == 0x000008, "Member 'TLUserWidgetViewBindingLibrary_AddTextBindingFloatOnViewModel::PropertyName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextBindingFloatOnViewModel, RoundingMode) == 0x000010, "Member 'TLUserWidgetViewBindingLibrary_AddTextBindingFloatOnViewModel::RoundingMode' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextBindingFloatOnViewModel, FractionalDigits) == 0x000014, "Member 'TLUserWidgetViewBindingLibrary_AddTextBindingFloatOnViewModel::FractionalDigits' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextBindingFloatOnViewModel, ReturnValue) == 0x000018, "Member 'TLUserWidgetViewBindingLibrary_AddTextBindingFloatOnViewModel::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetViewBindingLibrary.AddTextBindingOnViewModel
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetViewBindingLibrary_AddTextBindingOnViewModel final
{
public:
	class UTLTextBlock*                           Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetVisibleWithValue;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetViewBindingLibrary_AddTextBindingOnViewModel) == 0x000008, "Wrong alignment on TLUserWidgetViewBindingLibrary_AddTextBindingOnViewModel");
static_assert(sizeof(TLUserWidgetViewBindingLibrary_AddTextBindingOnViewModel) == 0x000018, "Wrong size on TLUserWidgetViewBindingLibrary_AddTextBindingOnViewModel");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextBindingOnViewModel, Target) == 0x000000, "Member 'TLUserWidgetViewBindingLibrary_AddTextBindingOnViewModel::Target' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextBindingOnViewModel, PropertyName) == 0x000008, "Member 'TLUserWidgetViewBindingLibrary_AddTextBindingOnViewModel::PropertyName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextBindingOnViewModel, bSetVisibleWithValue) == 0x000010, "Member 'TLUserWidgetViewBindingLibrary_AddTextBindingOnViewModel::bSetVisibleWithValue' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextBindingOnViewModel, ReturnValue) == 0x000011, "Member 'TLUserWidgetViewBindingLibrary_AddTextBindingOnViewModel::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetViewBindingLibrary.AddTextBindingTimeOnViewModel
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetViewBindingLibrary_AddTextBindingTimeOnViewModel final
{
public:
	class UTLTextBlock*                           Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLBindingTextTimeType                        TimeType;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeRefreshRate;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetViewBindingLibrary_AddTextBindingTimeOnViewModel) == 0x000008, "Wrong alignment on TLUserWidgetViewBindingLibrary_AddTextBindingTimeOnViewModel");
static_assert(sizeof(TLUserWidgetViewBindingLibrary_AddTextBindingTimeOnViewModel) == 0x000020, "Wrong size on TLUserWidgetViewBindingLibrary_AddTextBindingTimeOnViewModel");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextBindingTimeOnViewModel, Target) == 0x000000, "Member 'TLUserWidgetViewBindingLibrary_AddTextBindingTimeOnViewModel::Target' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextBindingTimeOnViewModel, PropertyName) == 0x000008, "Member 'TLUserWidgetViewBindingLibrary_AddTextBindingTimeOnViewModel::PropertyName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextBindingTimeOnViewModel, TimeType) == 0x000010, "Member 'TLUserWidgetViewBindingLibrary_AddTextBindingTimeOnViewModel::TimeType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextBindingTimeOnViewModel, TimeRefreshRate) == 0x000014, "Member 'TLUserWidgetViewBindingLibrary_AddTextBindingTimeOnViewModel::TimeRefreshRate' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextBindingTimeOnViewModel, ReturnValue) == 0x000018, "Member 'TLUserWidgetViewBindingLibrary_AddTextBindingTimeOnViewModel::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetViewBindingLibrary.AddTextColorAndOpacityBindingOnViewModel
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetViewBindingLibrary_AddTextColorAndOpacityBindingOnViewModel final
{
public:
	class UTLTextBlock*                           Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetViewBindingLibrary_AddTextColorAndOpacityBindingOnViewModel) == 0x000008, "Wrong alignment on TLUserWidgetViewBindingLibrary_AddTextColorAndOpacityBindingOnViewModel");
static_assert(sizeof(TLUserWidgetViewBindingLibrary_AddTextColorAndOpacityBindingOnViewModel) == 0x000018, "Wrong size on TLUserWidgetViewBindingLibrary_AddTextColorAndOpacityBindingOnViewModel");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextColorAndOpacityBindingOnViewModel, Target) == 0x000000, "Member 'TLUserWidgetViewBindingLibrary_AddTextColorAndOpacityBindingOnViewModel::Target' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextColorAndOpacityBindingOnViewModel, PropertyName) == 0x000008, "Member 'TLUserWidgetViewBindingLibrary_AddTextColorAndOpacityBindingOnViewModel::PropertyName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextColorAndOpacityBindingOnViewModel, ReturnValue) == 0x000010, "Member 'TLUserWidgetViewBindingLibrary_AddTextColorAndOpacityBindingOnViewModel::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetViewBindingLibrary.AddTextColorWithColorTableBindingOnViewModel
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetViewBindingLibrary_AddTextColorWithColorTableBindingOnViewModel final
{
public:
	class UTLTextBlock*                           Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLBindingOperator                            Operator;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SourceValue;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetViewBindingLibrary_AddTextColorWithColorTableBindingOnViewModel) == 0x000008, "Wrong alignment on TLUserWidgetViewBindingLibrary_AddTextColorWithColorTableBindingOnViewModel");
static_assert(sizeof(TLUserWidgetViewBindingLibrary_AddTextColorWithColorTableBindingOnViewModel) == 0x000020, "Wrong size on TLUserWidgetViewBindingLibrary_AddTextColorWithColorTableBindingOnViewModel");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextColorWithColorTableBindingOnViewModel, Target) == 0x000000, "Member 'TLUserWidgetViewBindingLibrary_AddTextColorWithColorTableBindingOnViewModel::Target' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextColorWithColorTableBindingOnViewModel, PropertyName) == 0x000008, "Member 'TLUserWidgetViewBindingLibrary_AddTextColorWithColorTableBindingOnViewModel::PropertyName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextColorWithColorTableBindingOnViewModel, Operator) == 0x000010, "Member 'TLUserWidgetViewBindingLibrary_AddTextColorWithColorTableBindingOnViewModel::Operator' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextColorWithColorTableBindingOnViewModel, SourceValue) == 0x000014, "Member 'TLUserWidgetViewBindingLibrary_AddTextColorWithColorTableBindingOnViewModel::SourceValue' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddTextColorWithColorTableBindingOnViewModel, ReturnValue) == 0x000018, "Member 'TLUserWidgetViewBindingLibrary_AddTextColorWithColorTableBindingOnViewModel::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetViewBindingLibrary.AddVisibleBindingOnViewModel
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetViewBindingLibrary_AddVisibleBindingOnViewModel final
{
public:
	class UWidget*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLBindingOperator                            Operator;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SourceValue;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetViewBindingLibrary_AddVisibleBindingOnViewModel) == 0x000008, "Wrong alignment on TLUserWidgetViewBindingLibrary_AddVisibleBindingOnViewModel");
static_assert(sizeof(TLUserWidgetViewBindingLibrary_AddVisibleBindingOnViewModel) == 0x000020, "Wrong size on TLUserWidgetViewBindingLibrary_AddVisibleBindingOnViewModel");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddVisibleBindingOnViewModel, Target) == 0x000000, "Member 'TLUserWidgetViewBindingLibrary_AddVisibleBindingOnViewModel::Target' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddVisibleBindingOnViewModel, PropertyName) == 0x000008, "Member 'TLUserWidgetViewBindingLibrary_AddVisibleBindingOnViewModel::PropertyName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddVisibleBindingOnViewModel, Operator) == 0x000010, "Member 'TLUserWidgetViewBindingLibrary_AddVisibleBindingOnViewModel::Operator' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddVisibleBindingOnViewModel, SourceValue) == 0x000014, "Member 'TLUserWidgetViewBindingLibrary_AddVisibleBindingOnViewModel::SourceValue' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_AddVisibleBindingOnViewModel, ReturnValue) == 0x000018, "Member 'TLUserWidgetViewBindingLibrary_AddVisibleBindingOnViewModel::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetViewBindingLibrary.SetDataSourceBindingOnViewModel
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetViewBindingLibrary_SetDataSourceBindingOnViewModel final
{
public:
	class UTLUserWidgetView*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetViewBindingLibrary_SetDataSourceBindingOnViewModel) == 0x000008, "Wrong alignment on TLUserWidgetViewBindingLibrary_SetDataSourceBindingOnViewModel");
static_assert(sizeof(TLUserWidgetViewBindingLibrary_SetDataSourceBindingOnViewModel) == 0x000018, "Wrong size on TLUserWidgetViewBindingLibrary_SetDataSourceBindingOnViewModel");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_SetDataSourceBindingOnViewModel, Target) == 0x000000, "Member 'TLUserWidgetViewBindingLibrary_SetDataSourceBindingOnViewModel::Target' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_SetDataSourceBindingOnViewModel, PropertyName) == 0x000008, "Member 'TLUserWidgetViewBindingLibrary_SetDataSourceBindingOnViewModel::PropertyName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_SetDataSourceBindingOnViewModel, ReturnValue) == 0x000010, "Member 'TLUserWidgetViewBindingLibrary_SetDataSourceBindingOnViewModel::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetViewBindingLibrary.SetOnViewModelUpdateDefault
// 0x001C (0x001C - 0x0000)
struct TLUserWidgetViewBindingLibrary_SetOnViewModelUpdateDefault final
{
public:
	class FName                                   PropertyName;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             Event;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetViewBindingLibrary_SetOnViewModelUpdateDefault) == 0x000004, "Wrong alignment on TLUserWidgetViewBindingLibrary_SetOnViewModelUpdateDefault");
static_assert(sizeof(TLUserWidgetViewBindingLibrary_SetOnViewModelUpdateDefault) == 0x00001C, "Wrong size on TLUserWidgetViewBindingLibrary_SetOnViewModelUpdateDefault");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_SetOnViewModelUpdateDefault, PropertyName) == 0x000000, "Member 'TLUserWidgetViewBindingLibrary_SetOnViewModelUpdateDefault::PropertyName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_SetOnViewModelUpdateDefault, Event) == 0x000008, "Member 'TLUserWidgetViewBindingLibrary_SetOnViewModelUpdateDefault::Event' has a wrong offset!");
static_assert(offsetof(TLUserWidgetViewBindingLibrary_SetOnViewModelUpdateDefault, ReturnValue) == 0x000018, "Member 'TLUserWidgetViewBindingLibrary_SetOnViewModelUpdateDefault::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetItemQuickSlot.OnItemGradeUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemQuickSlot_OnItemGradeUpdate final
{
public:
	EItemGrade                                    InGrade;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemQuickSlot_OnItemGradeUpdate) == 0x000001, "Wrong alignment on TLUserWidgetItemQuickSlot_OnItemGradeUpdate");
static_assert(sizeof(TLUserWidgetItemQuickSlot_OnItemGradeUpdate) == 0x000001, "Wrong size on TLUserWidgetItemQuickSlot_OnItemGradeUpdate");
static_assert(offsetof(TLUserWidgetItemQuickSlot_OnItemGradeUpdate, InGrade) == 0x000000, "Member 'TLUserWidgetItemQuickSlot_OnItemGradeUpdate::InGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetItemQuickSlot.OnItemLockUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemQuickSlot_OnItemLockUpdate final
{
public:
	bool                                          InLock;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemQuickSlot_OnItemLockUpdate) == 0x000001, "Wrong alignment on TLUserWidgetItemQuickSlot_OnItemLockUpdate");
static_assert(sizeof(TLUserWidgetItemQuickSlot_OnItemLockUpdate) == 0x000001, "Wrong size on TLUserWidgetItemQuickSlot_OnItemLockUpdate");
static_assert(offsetof(TLUserWidgetItemQuickSlot_OnItemLockUpdate, InLock) == 0x000000, "Member 'TLUserWidgetItemQuickSlot_OnItemLockUpdate::InLock' has a wrong offset!");

// Function TLClient.TLUserWidgetItemQuickSlot.OnQuickSlotSourceBySwap
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemQuickSlot_OnQuickSlotSourceBySwap final
{
public:
	bool                                          bInSwap;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemQuickSlot_OnQuickSlotSourceBySwap) == 0x000001, "Wrong alignment on TLUserWidgetItemQuickSlot_OnQuickSlotSourceBySwap");
static_assert(sizeof(TLUserWidgetItemQuickSlot_OnQuickSlotSourceBySwap) == 0x000001, "Wrong size on TLUserWidgetItemQuickSlot_OnQuickSlotSourceBySwap");
static_assert(offsetof(TLUserWidgetItemQuickSlot_OnQuickSlotSourceBySwap, bInSwap) == 0x000000, "Member 'TLUserWidgetItemQuickSlot_OnQuickSlotSourceBySwap::bInSwap' has a wrong offset!");

// Function TLClient.TLUserWidgetItemQuickSlot.OnUpdateOtherPresetInfo
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemQuickSlot_OnUpdateOtherPresetInfo final
{
public:
	bool                                          bIsOtherPresetItem;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemQuickSlot_OnUpdateOtherPresetInfo) == 0x000001, "Wrong alignment on TLUserWidgetItemQuickSlot_OnUpdateOtherPresetInfo");
static_assert(sizeof(TLUserWidgetItemQuickSlot_OnUpdateOtherPresetInfo) == 0x000001, "Wrong size on TLUserWidgetItemQuickSlot_OnUpdateOtherPresetInfo");
static_assert(offsetof(TLUserWidgetItemQuickSlot_OnUpdateOtherPresetInfo, bIsOtherPresetItem) == 0x000000, "Member 'TLUserWidgetItemQuickSlot_OnUpdateOtherPresetInfo::bIsOtherPresetItem' has a wrong offset!");

// Function TLClient.TLUserWidgetItemQuickSlot.OnUpdateRequireLevel
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetItemQuickSlot_OnUpdateRequireLevel final
{
public:
	int32                                         InRequireLevel;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPcLevel;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemQuickSlot_OnUpdateRequireLevel) == 0x000004, "Wrong alignment on TLUserWidgetItemQuickSlot_OnUpdateRequireLevel");
static_assert(sizeof(TLUserWidgetItemQuickSlot_OnUpdateRequireLevel) == 0x000008, "Wrong size on TLUserWidgetItemQuickSlot_OnUpdateRequireLevel");
static_assert(offsetof(TLUserWidgetItemQuickSlot_OnUpdateRequireLevel, InRequireLevel) == 0x000000, "Member 'TLUserWidgetItemQuickSlot_OnUpdateRequireLevel::InRequireLevel' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemQuickSlot_OnUpdateRequireLevel, InPcLevel) == 0x000004, "Member 'TLUserWidgetItemQuickSlot_OnUpdateRequireLevel::InPcLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetItemQuickSlot.OnUpdateTradable
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemQuickSlot_OnUpdateTradable final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemQuickSlot_OnUpdateTradable) == 0x000001, "Wrong alignment on TLUserWidgetItemQuickSlot_OnUpdateTradable");
static_assert(sizeof(TLUserWidgetItemQuickSlot_OnUpdateTradable) == 0x000001, "Wrong size on TLUserWidgetItemQuickSlot_OnUpdateTradable");
static_assert(offsetof(TLUserWidgetItemQuickSlot_OnUpdateTradable, bInValue) == 0x000000, "Member 'TLUserWidgetItemQuickSlot_OnUpdateTradable::bInValue' has a wrong offset!");

// Function TLClient.TLUserWidgetItemQuickSlot.PlayUseItemAnim
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemQuickSlot_PlayUseItemAnim final
{
public:
	EItemCategory                                 InItemCategory;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemQuickSlot_PlayUseItemAnim) == 0x000001, "Wrong alignment on TLUserWidgetItemQuickSlot_PlayUseItemAnim");
static_assert(sizeof(TLUserWidgetItemQuickSlot_PlayUseItemAnim) == 0x000001, "Wrong size on TLUserWidgetItemQuickSlot_PlayUseItemAnim");
static_assert(offsetof(TLUserWidgetItemQuickSlot_PlayUseItemAnim, InItemCategory) == 0x000000, "Member 'TLUserWidgetItemQuickSlot_PlayUseItemAnim::InItemCategory' has a wrong offset!");

// Function TLClient.TLUserWidgetItemQuickSlot.SetQuickSlotId
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetItemQuickSlot_SetQuickSlotId final
{
public:
	int32                                         InSlotId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemQuickSlot_SetQuickSlotId) == 0x000004, "Wrong alignment on TLUserWidgetItemQuickSlot_SetQuickSlotId");
static_assert(sizeof(TLUserWidgetItemQuickSlot_SetQuickSlotId) == 0x000004, "Wrong size on TLUserWidgetItemQuickSlot_SetQuickSlotId");
static_assert(offsetof(TLUserWidgetItemQuickSlot_SetQuickSlotId, InSlotId) == 0x000000, "Member 'TLUserWidgetItemQuickSlot_SetQuickSlotId::InSlotId' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyKickElectionRegisterPopup.HandleReasonTextInputChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetPartyKickElectionRegisterPopup_HandleReasonTextInputChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyKickElectionRegisterPopup_HandleReasonTextInputChanged) == 0x000008, "Wrong alignment on TLUserWidgetPartyKickElectionRegisterPopup_HandleReasonTextInputChanged");
static_assert(sizeof(TLUserWidgetPartyKickElectionRegisterPopup_HandleReasonTextInputChanged) == 0x000018, "Wrong size on TLUserWidgetPartyKickElectionRegisterPopup_HandleReasonTextInputChanged");
static_assert(offsetof(TLUserWidgetPartyKickElectionRegisterPopup_HandleReasonTextInputChanged, InInputText) == 0x000000, "Member 'TLUserWidgetPartyKickElectionRegisterPopup_HandleReasonTextInputChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyKickElectionRegisterPopup.HandleReasonTextInputCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetPartyKickElectionRegisterPopup_HandleReasonTextInputCommitted final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetPartyKickElectionRegisterPopup_HandleReasonTextInputCommitted) == 0x000008, "Wrong alignment on TLUserWidgetPartyKickElectionRegisterPopup_HandleReasonTextInputCommitted");
static_assert(sizeof(TLUserWidgetPartyKickElectionRegisterPopup_HandleReasonTextInputCommitted) == 0x000020, "Wrong size on TLUserWidgetPartyKickElectionRegisterPopup_HandleReasonTextInputCommitted");
static_assert(offsetof(TLUserWidgetPartyKickElectionRegisterPopup_HandleReasonTextInputCommitted, InInputText) == 0x000000, "Member 'TLUserWidgetPartyKickElectionRegisterPopup_HandleReasonTextInputCommitted::InInputText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPartyKickElectionRegisterPopup_HandleReasonTextInputCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetPartyKickElectionRegisterPopup_HandleReasonTextInputCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyKickElectionRegisterPopup.OnChangeUIPlatformImpl
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyKickElectionRegisterPopup_OnChangeUIPlatformImpl final
{
public:
	ETLUIPlatform                                 InPlatform;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyKickElectionRegisterPopup_OnChangeUIPlatformImpl) == 0x000001, "Wrong alignment on TLUserWidgetPartyKickElectionRegisterPopup_OnChangeUIPlatformImpl");
static_assert(sizeof(TLUserWidgetPartyKickElectionRegisterPopup_OnChangeUIPlatformImpl) == 0x000001, "Wrong size on TLUserWidgetPartyKickElectionRegisterPopup_OnChangeUIPlatformImpl");
static_assert(offsetof(TLUserWidgetPartyKickElectionRegisterPopup_OnChangeUIPlatformImpl, InPlatform) == 0x000000, "Member 'TLUserWidgetPartyKickElectionRegisterPopup_OnChangeUIPlatformImpl::InPlatform' has a wrong offset!");

// Function TLClient.TLUserWidgetFloater.OnEmit
// 0x0005 (0x0005 - 0x0000)
struct TLUserWidgetFloater_OnEmit final
{
public:
	bool                                          bInPrimeSkill;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHpAbnormalStatus                             AbnormalStatus;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSuccessByAccuracy;                              // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFloaterCategory                              FloaterCategory;                                   // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMyPc;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetFloater_OnEmit) == 0x000001, "Wrong alignment on TLUserWidgetFloater_OnEmit");
static_assert(sizeof(TLUserWidgetFloater_OnEmit) == 0x000005, "Wrong size on TLUserWidgetFloater_OnEmit");
static_assert(offsetof(TLUserWidgetFloater_OnEmit, bInPrimeSkill) == 0x000000, "Member 'TLUserWidgetFloater_OnEmit::bInPrimeSkill' has a wrong offset!");
static_assert(offsetof(TLUserWidgetFloater_OnEmit, AbnormalStatus) == 0x000001, "Member 'TLUserWidgetFloater_OnEmit::AbnormalStatus' has a wrong offset!");
static_assert(offsetof(TLUserWidgetFloater_OnEmit, bInSuccessByAccuracy) == 0x000002, "Member 'TLUserWidgetFloater_OnEmit::bInSuccessByAccuracy' has a wrong offset!");
static_assert(offsetof(TLUserWidgetFloater_OnEmit, FloaterCategory) == 0x000003, "Member 'TLUserWidgetFloater_OnEmit::FloaterCategory' has a wrong offset!");
static_assert(offsetof(TLUserWidgetFloater_OnEmit, IsMyPc) == 0x000004, "Member 'TLUserWidgetFloater_OnEmit::IsMyPc' has a wrong offset!");

// Function TLClient.TLUserWidgetFloatingFrame.GetContextMenuAnchorWidget
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetFloatingFrame_GetContextMenuAnchorWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetFloatingFrame_GetContextMenuAnchorWidget) == 0x000008, "Wrong alignment on TLUserWidgetFloatingFrame_GetContextMenuAnchorWidget");
static_assert(sizeof(TLUserWidgetFloatingFrame_GetContextMenuAnchorWidget) == 0x000008, "Wrong size on TLUserWidgetFloatingFrame_GetContextMenuAnchorWidget");
static_assert(offsetof(TLUserWidgetFloatingFrame_GetContextMenuAnchorWidget, ReturnValue) == 0x000000, "Member 'TLUserWidgetFloatingFrame_GetContextMenuAnchorWidget::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetFramePcEventEffect.OnUpdateEEAlert
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetFramePcEventEffect_OnUpdateEEAlert final
{
public:
	bool                                          bInEEAlert;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetFramePcEventEffect_OnUpdateEEAlert) == 0x000001, "Wrong alignment on TLUserWidgetFramePcEventEffect_OnUpdateEEAlert");
static_assert(sizeof(TLUserWidgetFramePcEventEffect_OnUpdateEEAlert) == 0x000001, "Wrong size on TLUserWidgetFramePcEventEffect_OnUpdateEEAlert");
static_assert(offsetof(TLUserWidgetFramePcEventEffect_OnUpdateEEAlert, bInEEAlert) == 0x000000, "Member 'TLUserWidgetFramePcEventEffect_OnUpdateEEAlert::bInEEAlert' has a wrong offset!");

// Function TLClient.TLUserWidgetSeasonPassGroupTabButton.OnUpdateLockState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSeasonPassGroupTabButton_OnUpdateLockState final
{
public:
	bool                                          bInPurchaseTicket;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSeasonPassGroupTabButton_OnUpdateLockState) == 0x000001, "Wrong alignment on TLUserWidgetSeasonPassGroupTabButton_OnUpdateLockState");
static_assert(sizeof(TLUserWidgetSeasonPassGroupTabButton_OnUpdateLockState) == 0x000001, "Wrong size on TLUserWidgetSeasonPassGroupTabButton_OnUpdateLockState");
static_assert(offsetof(TLUserWidgetSeasonPassGroupTabButton_OnUpdateLockState, bInPurchaseTicket) == 0x000000, "Member 'TLUserWidgetSeasonPassGroupTabButton_OnUpdateLockState::bInPurchaseTicket' has a wrong offset!");

// Function TLClient.TLUserWidgetGrowthPass.OnPurchasePassTicket
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetGrowthPass_OnPurchasePassTicket final
{
public:
	bool                                          InIsPurchased;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InGroupLevel;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGrowthPass_OnPurchasePassTicket) == 0x000004, "Wrong alignment on TLUserWidgetGrowthPass_OnPurchasePassTicket");
static_assert(sizeof(TLUserWidgetGrowthPass_OnPurchasePassTicket) == 0x000008, "Wrong size on TLUserWidgetGrowthPass_OnPurchasePassTicket");
static_assert(offsetof(TLUserWidgetGrowthPass_OnPurchasePassTicket, InIsPurchased) == 0x000000, "Member 'TLUserWidgetGrowthPass_OnPurchasePassTicket::InIsPurchased' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGrowthPass_OnPurchasePassTicket, InGroupLevel) == 0x000004, "Member 'TLUserWidgetGrowthPass_OnPurchasePassTicket::InGroupLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitment.GetRequestRecruitmentListRateTime
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetPartyRecruitment_GetRequestRecruitmentListRateTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitment_GetRequestRecruitmentListRateTime) == 0x000004, "Wrong alignment on TLUserWidgetPartyRecruitment_GetRequestRecruitmentListRateTime");
static_assert(sizeof(TLUserWidgetPartyRecruitment_GetRequestRecruitmentListRateTime) == 0x000004, "Wrong size on TLUserWidgetPartyRecruitment_GetRequestRecruitmentListRateTime");
static_assert(offsetof(TLUserWidgetPartyRecruitment_GetRequestRecruitmentListRateTime, ReturnValue) == 0x000000, "Member 'TLUserWidgetPartyRecruitment_GetRequestRecruitmentListRateTime::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitment.GetRequestRecruitmentListRemainTime
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetPartyRecruitment_GetRequestRecruitmentListRemainTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitment_GetRequestRecruitmentListRemainTime) == 0x000004, "Wrong alignment on TLUserWidgetPartyRecruitment_GetRequestRecruitmentListRemainTime");
static_assert(sizeof(TLUserWidgetPartyRecruitment_GetRequestRecruitmentListRemainTime) == 0x000004, "Wrong size on TLUserWidgetPartyRecruitment_GetRequestRecruitmentListRemainTime");
static_assert(offsetof(TLUserWidgetPartyRecruitment_GetRequestRecruitmentListRemainTime, ReturnValue) == 0x000000, "Member 'TLUserWidgetPartyRecruitment_GetRequestRecruitmentListRemainTime::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitment.IsRequestRecruitmentListCoolDown
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyRecruitment_IsRequestRecruitmentListCoolDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitment_IsRequestRecruitmentListCoolDown) == 0x000001, "Wrong alignment on TLUserWidgetPartyRecruitment_IsRequestRecruitmentListCoolDown");
static_assert(sizeof(TLUserWidgetPartyRecruitment_IsRequestRecruitmentListCoolDown) == 0x000001, "Wrong size on TLUserWidgetPartyRecruitment_IsRequestRecruitmentListCoolDown");
static_assert(offsetof(TLUserWidgetPartyRecruitment_IsRequestRecruitmentListCoolDown, ReturnValue) == 0x000000, "Member 'TLUserWidgetPartyRecruitment_IsRequestRecruitmentListCoolDown::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitment.OnAvailableChallengeDungeonImpl
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyRecruitment_OnAvailableChallengeDungeonImpl final
{
public:
	bool                                          bAvailable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitment_OnAvailableChallengeDungeonImpl) == 0x000001, "Wrong alignment on TLUserWidgetPartyRecruitment_OnAvailableChallengeDungeonImpl");
static_assert(sizeof(TLUserWidgetPartyRecruitment_OnAvailableChallengeDungeonImpl) == 0x000001, "Wrong size on TLUserWidgetPartyRecruitment_OnAvailableChallengeDungeonImpl");
static_assert(offsetof(TLUserWidgetPartyRecruitment_OnAvailableChallengeDungeonImpl, bAvailable) == 0x000000, "Member 'TLUserWidgetPartyRecruitment_OnAvailableChallengeDungeonImpl::bAvailable' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitment.OnChangeDungeonCategory
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyRecruitment_OnChangeDungeonCategory final
{
public:
	ETLDungeonCategory                            InCategory;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitment_OnChangeDungeonCategory) == 0x000001, "Wrong alignment on TLUserWidgetPartyRecruitment_OnChangeDungeonCategory");
static_assert(sizeof(TLUserWidgetPartyRecruitment_OnChangeDungeonCategory) == 0x000001, "Wrong size on TLUserWidgetPartyRecruitment_OnChangeDungeonCategory");
static_assert(offsetof(TLUserWidgetPartyRecruitment_OnChangeDungeonCategory, InCategory) == 0x000000, "Member 'TLUserWidgetPartyRecruitment_OnChangeDungeonCategory::InCategory' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitment.OnListEmpty
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyRecruitment_OnListEmpty final
{
public:
	bool                                          bEmpty;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitment_OnListEmpty) == 0x000001, "Wrong alignment on TLUserWidgetPartyRecruitment_OnListEmpty");
static_assert(sizeof(TLUserWidgetPartyRecruitment_OnListEmpty) == 0x000001, "Wrong size on TLUserWidgetPartyRecruitment_OnListEmpty");
static_assert(offsetof(TLUserWidgetPartyRecruitment_OnListEmpty, bEmpty) == 0x000000, "Member 'TLUserWidgetPartyRecruitment_OnListEmpty::bEmpty' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitment.OnPartyState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyRecruitment_OnPartyState final
{
public:
	ETLPartyState                                 InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitment_OnPartyState) == 0x000001, "Wrong alignment on TLUserWidgetPartyRecruitment_OnPartyState");
static_assert(sizeof(TLUserWidgetPartyRecruitment_OnPartyState) == 0x000001, "Wrong size on TLUserWidgetPartyRecruitment_OnPartyState");
static_assert(offsetof(TLUserWidgetPartyRecruitment_OnPartyState, InState) == 0x000000, "Member 'TLUserWidgetPartyRecruitment_OnPartyState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitment.OnVisibleLevelSelector
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyRecruitment_OnVisibleLevelSelector final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitment_OnVisibleLevelSelector) == 0x000001, "Wrong alignment on TLUserWidgetPartyRecruitment_OnVisibleLevelSelector");
static_assert(sizeof(TLUserWidgetPartyRecruitment_OnVisibleLevelSelector) == 0x000001, "Wrong size on TLUserWidgetPartyRecruitment_OnVisibleLevelSelector");
static_assert(offsetof(TLUserWidgetPartyRecruitment_OnVisibleLevelSelector, bVisible) == 0x000000, "Member 'TLUserWidgetPartyRecruitment_OnVisibleLevelSelector::bVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitment.GetCurrentDungeonCategory
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyRecruitment_GetCurrentDungeonCategory final
{
public:
	ETLDungeonCategory                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitment_GetCurrentDungeonCategory) == 0x000001, "Wrong alignment on TLUserWidgetPartyRecruitment_GetCurrentDungeonCategory");
static_assert(sizeof(TLUserWidgetPartyRecruitment_GetCurrentDungeonCategory) == 0x000001, "Wrong size on TLUserWidgetPartyRecruitment_GetCurrentDungeonCategory");
static_assert(offsetof(TLUserWidgetPartyRecruitment_GetCurrentDungeonCategory, ReturnValue) == 0x000000, "Member 'TLUserWidgetPartyRecruitment_GetCurrentDungeonCategory::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitment.IsMatchingParty
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyRecruitment_IsMatchingParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitment_IsMatchingParty) == 0x000001, "Wrong alignment on TLUserWidgetPartyRecruitment_IsMatchingParty");
static_assert(sizeof(TLUserWidgetPartyRecruitment_IsMatchingParty) == 0x000001, "Wrong size on TLUserWidgetPartyRecruitment_IsMatchingParty");
static_assert(offsetof(TLUserWidgetPartyRecruitment_IsMatchingParty, ReturnValue) == 0x000000, "Member 'TLUserWidgetPartyRecruitment_IsMatchingParty::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitment.IsMyPartyFulled
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyRecruitment_IsMyPartyFulled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitment_IsMyPartyFulled) == 0x000001, "Wrong alignment on TLUserWidgetPartyRecruitment_IsMyPartyFulled");
static_assert(sizeof(TLUserWidgetPartyRecruitment_IsMyPartyFulled) == 0x000001, "Wrong size on TLUserWidgetPartyRecruitment_IsMyPartyFulled");
static_assert(offsetof(TLUserWidgetPartyRecruitment_IsMyPartyFulled, ReturnValue) == 0x000000, "Member 'TLUserWidgetPartyRecruitment_IsMyPartyFulled::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSavedPlaceSlot.OnInputTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetSavedPlaceSlot_OnInputTextCommitted final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetSavedPlaceSlot_OnInputTextCommitted) == 0x000008, "Wrong alignment on TLUserWidgetSavedPlaceSlot_OnInputTextCommitted");
static_assert(sizeof(TLUserWidgetSavedPlaceSlot_OnInputTextCommitted) == 0x000020, "Wrong size on TLUserWidgetSavedPlaceSlot_OnInputTextCommitted");
static_assert(offsetof(TLUserWidgetSavedPlaceSlot_OnInputTextCommitted, InInputText) == 0x000000, "Member 'TLUserWidgetSavedPlaceSlot_OnInputTextCommitted::InInputText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSavedPlaceSlot_OnInputTextCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetSavedPlaceSlot_OnInputTextCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetSavedPlaceSlot.OnSelectedSlot
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSavedPlaceSlot_OnSelectedSlot final
{
public:
	bool                                          InIsSelected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSavedPlaceSlot_OnSelectedSlot) == 0x000001, "Wrong alignment on TLUserWidgetSavedPlaceSlot_OnSelectedSlot");
static_assert(sizeof(TLUserWidgetSavedPlaceSlot_OnSelectedSlot) == 0x000001, "Wrong size on TLUserWidgetSavedPlaceSlot_OnSelectedSlot");
static_assert(offsetof(TLUserWidgetSavedPlaceSlot_OnSelectedSlot, InIsSelected) == 0x000000, "Member 'TLUserWidgetSavedPlaceSlot_OnSelectedSlot::InIsSelected' has a wrong offset!");

// Function TLClient.TLUserWidgetGrowthPassLevelUnitLock.OnUpdateLockState
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetGrowthPassLevelUnitLock_OnUpdateLockState final
{
public:
	int32                                         InGroupLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPurchasePassTicket;                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetGrowthPassLevelUnitLock_OnUpdateLockState) == 0x000004, "Wrong alignment on TLUserWidgetGrowthPassLevelUnitLock_OnUpdateLockState");
static_assert(sizeof(TLUserWidgetGrowthPassLevelUnitLock_OnUpdateLockState) == 0x000008, "Wrong size on TLUserWidgetGrowthPassLevelUnitLock_OnUpdateLockState");
static_assert(offsetof(TLUserWidgetGrowthPassLevelUnitLock_OnUpdateLockState, InGroupLevel) == 0x000000, "Member 'TLUserWidgetGrowthPassLevelUnitLock_OnUpdateLockState::InGroupLevel' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGrowthPassLevelUnitLock_OnUpdateLockState, bInPurchasePassTicket) == 0x000004, "Member 'TLUserWidgetGrowthPassLevelUnitLock_OnUpdateLockState::bInPurchasePassTicket' has a wrong offset!");

// Function TLClient.TLUserWidgetGrowthPassLevelUnit.HandleScrollChange
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetGrowthPassLevelUnit_HandleScrollChange final
{
public:
	float                                         ScrollOffset;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGrowthPassLevelUnit_HandleScrollChange) == 0x000004, "Wrong alignment on TLUserWidgetGrowthPassLevelUnit_HandleScrollChange");
static_assert(sizeof(TLUserWidgetGrowthPassLevelUnit_HandleScrollChange) == 0x000004, "Wrong size on TLUserWidgetGrowthPassLevelUnit_HandleScrollChange");
static_assert(offsetof(TLUserWidgetGrowthPassLevelUnit_HandleScrollChange, ScrollOffset) == 0x000000, "Member 'TLUserWidgetGrowthPassLevelUnit_HandleScrollChange::ScrollOffset' has a wrong offset!");

// Function TLClient.TLUserWidgetGrowthPassLevelUnit.OnSelectedMyLevel
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGrowthPassLevelUnit_OnSelectedMyLevel final
{
public:
	bool                                          InIsMyLevel;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGrowthPassLevelUnit_OnSelectedMyLevel) == 0x000001, "Wrong alignment on TLUserWidgetGrowthPassLevelUnit_OnSelectedMyLevel");
static_assert(sizeof(TLUserWidgetGrowthPassLevelUnit_OnSelectedMyLevel) == 0x000001, "Wrong size on TLUserWidgetGrowthPassLevelUnit_OnSelectedMyLevel");
static_assert(offsetof(TLUserWidgetGrowthPassLevelUnit_OnSelectedMyLevel, InIsMyLevel) == 0x000000, "Member 'TLUserWidgetGrowthPassLevelUnit_OnSelectedMyLevel::InIsMyLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetGrowthPassLevelUnit.OnStatusEvent
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetGrowthPassLevelUnit_OnStatusEvent final
{
public:
	bool                                          bAchieved;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMyLevel;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGrowthPassLevelUnit_OnStatusEvent) == 0x000001, "Wrong alignment on TLUserWidgetGrowthPassLevelUnit_OnStatusEvent");
static_assert(sizeof(TLUserWidgetGrowthPassLevelUnit_OnStatusEvent) == 0x000002, "Wrong size on TLUserWidgetGrowthPassLevelUnit_OnStatusEvent");
static_assert(offsetof(TLUserWidgetGrowthPassLevelUnit_OnStatusEvent, bAchieved) == 0x000000, "Member 'TLUserWidgetGrowthPassLevelUnit_OnStatusEvent::bAchieved' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGrowthPassLevelUnit_OnStatusEvent, IsMyLevel) == 0x000001, "Member 'TLUserWidgetGrowthPassLevelUnit_OnStatusEvent::IsMyLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetGrowthPassMission.OnRewardCanDeliverEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGrowthPassMission_OnRewardCanDeliverEvent final
{
public:
	bool                                          bCanDeliver;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGrowthPassMission_OnRewardCanDeliverEvent) == 0x000001, "Wrong alignment on TLUserWidgetGrowthPassMission_OnRewardCanDeliverEvent");
static_assert(sizeof(TLUserWidgetGrowthPassMission_OnRewardCanDeliverEvent) == 0x000001, "Wrong size on TLUserWidgetGrowthPassMission_OnRewardCanDeliverEvent");
static_assert(offsetof(TLUserWidgetGrowthPassMission_OnRewardCanDeliverEvent, bCanDeliver) == 0x000000, "Member 'TLUserWidgetGrowthPassMission_OnRewardCanDeliverEvent::bCanDeliver' has a wrong offset!");

// Function TLClient.TLUserWidgetGrowthMission.OnMissionTypeEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGrowthMission_OnMissionTypeEvent final
{
public:
	ETLGrowthMissionType                          InGrowthMissionType;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGrowthMission_OnMissionTypeEvent) == 0x000001, "Wrong alignment on TLUserWidgetGrowthMission_OnMissionTypeEvent");
static_assert(sizeof(TLUserWidgetGrowthMission_OnMissionTypeEvent) == 0x000001, "Wrong size on TLUserWidgetGrowthMission_OnMissionTypeEvent");
static_assert(offsetof(TLUserWidgetGrowthMission_OnMissionTypeEvent, InGrowthMissionType) == 0x000000, "Member 'TLUserWidgetGrowthMission_OnMissionTypeEvent::InGrowthMissionType' has a wrong offset!");

// Function TLClient.TLUserWidgetGrowthMission.OnSelectedUncompletedMission
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGrowthMission_OnSelectedUncompletedMission final
{
public:
	bool                                          InIsSelected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGrowthMission_OnSelectedUncompletedMission) == 0x000001, "Wrong alignment on TLUserWidgetGrowthMission_OnSelectedUncompletedMission");
static_assert(sizeof(TLUserWidgetGrowthMission_OnSelectedUncompletedMission) == 0x000001, "Wrong size on TLUserWidgetGrowthMission_OnSelectedUncompletedMission");
static_assert(offsetof(TLUserWidgetGrowthMission_OnSelectedUncompletedMission, InIsSelected) == 0x000000, "Member 'TLUserWidgetGrowthMission_OnSelectedUncompletedMission::InIsSelected' has a wrong offset!");

// Function TLClient.TLUserWidgetSearchTextBox.HandleTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetSearchTextBox_HandleTextChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSearchTextBox_HandleTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetSearchTextBox_HandleTextChanged");
static_assert(sizeof(TLUserWidgetSearchTextBox_HandleTextChanged) == 0x000018, "Wrong size on TLUserWidgetSearchTextBox_HandleTextChanged");
static_assert(offsetof(TLUserWidgetSearchTextBox_HandleTextChanged, InText) == 0x000000, "Member 'TLUserWidgetSearchTextBox_HandleTextChanged::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetSearchTextBox.HandleTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetSearchTextBox_HandleTextCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetSearchTextBox_HandleTextCommitted) == 0x000008, "Wrong alignment on TLUserWidgetSearchTextBox_HandleTextCommitted");
static_assert(sizeof(TLUserWidgetSearchTextBox_HandleTextCommitted) == 0x000020, "Wrong size on TLUserWidgetSearchTextBox_HandleTextCommitted");
static_assert(offsetof(TLUserWidgetSearchTextBox_HandleTextCommitted, InText) == 0x000000, "Member 'TLUserWidgetSearchTextBox_HandleTextCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSearchTextBox_HandleTextCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetSearchTextBox_HandleTextCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetSearchTextBox.HandleTextFocusLost
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetSearchTextBox_HandleTextFocusLost final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSearchTextBox_HandleTextFocusLost) == 0x000004, "Wrong alignment on TLUserWidgetSearchTextBox_HandleTextFocusLost");
static_assert(sizeof(TLUserWidgetSearchTextBox_HandleTextFocusLost) == 0x000008, "Wrong size on TLUserWidgetSearchTextBox_HandleTextFocusLost");
static_assert(offsetof(TLUserWidgetSearchTextBox_HandleTextFocusLost, InFocusEvent) == 0x000000, "Member 'TLUserWidgetSearchTextBox_HandleTextFocusLost::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetSearchTextBox.HandleTextFocusReceived
// 0x0040 (0x0040 - 0x0000)
struct TLUserWidgetSearchTextBox_HandleTextFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSearchTextBox_HandleTextFocusReceived) == 0x000004, "Wrong alignment on TLUserWidgetSearchTextBox_HandleTextFocusReceived");
static_assert(sizeof(TLUserWidgetSearchTextBox_HandleTextFocusReceived) == 0x000040, "Wrong size on TLUserWidgetSearchTextBox_HandleTextFocusReceived");
static_assert(offsetof(TLUserWidgetSearchTextBox_HandleTextFocusReceived, MyGeometry) == 0x000000, "Member 'TLUserWidgetSearchTextBox_HandleTextFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSearchTextBox_HandleTextFocusReceived, InFocusEvent) == 0x000038, "Member 'TLUserWidgetSearchTextBox_HandleTextFocusReceived::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetSearchTextBox.SetMaxChar
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSearchTextBox_SetMaxChar final
{
public:
	int32                                         InMaxChar;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSearchTextBox_SetMaxChar) == 0x000004, "Wrong alignment on TLUserWidgetSearchTextBox_SetMaxChar");
static_assert(sizeof(TLUserWidgetSearchTextBox_SetMaxChar) == 0x000004, "Wrong size on TLUserWidgetSearchTextBox_SetMaxChar");
static_assert(offsetof(TLUserWidgetSearchTextBox_SetMaxChar, InMaxChar) == 0x000000, "Member 'TLUserWidgetSearchTextBox_SetMaxChar::InMaxChar' has a wrong offset!");

// Function TLClient.TLUserWidgetLevelAchievementReward.OnAchievementTypeEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetLevelAchievementReward_OnAchievementTypeEvent final
{
public:
	ETLLevelAchievementType                       InLevelAchievementType;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetLevelAchievementReward_OnAchievementTypeEvent) == 0x000001, "Wrong alignment on TLUserWidgetLevelAchievementReward_OnAchievementTypeEvent");
static_assert(sizeof(TLUserWidgetLevelAchievementReward_OnAchievementTypeEvent) == 0x000001, "Wrong size on TLUserWidgetLevelAchievementReward_OnAchievementTypeEvent");
static_assert(offsetof(TLUserWidgetLevelAchievementReward_OnAchievementTypeEvent, InLevelAchievementType) == 0x000000, "Member 'TLUserWidgetLevelAchievementReward_OnAchievementTypeEvent::InLevelAchievementType' has a wrong offset!");

// Function TLClient.TLUserWidgetLevelAchievementTicketReward.OnRewardStatus
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetLevelAchievementTicketReward_OnRewardStatus final
{
public:
	EGrowthPassRewardStatus                       InRewardStatus;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetLevelAchievementTicketReward_OnRewardStatus) == 0x000001, "Wrong alignment on TLUserWidgetLevelAchievementTicketReward_OnRewardStatus");
static_assert(sizeof(TLUserWidgetLevelAchievementTicketReward_OnRewardStatus) == 0x000001, "Wrong size on TLUserWidgetLevelAchievementTicketReward_OnRewardStatus");
static_assert(offsetof(TLUserWidgetLevelAchievementTicketReward_OnRewardStatus, InRewardStatus) == 0x000000, "Member 'TLUserWidgetLevelAchievementTicketReward_OnRewardStatus::InRewardStatus' has a wrong offset!");

// Function TLClient.TLUserWidgetGrowthPassRewardItem.OnItemTypeEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGrowthPassRewardItem_OnItemTypeEvent final
{
public:
	bool                                          bPassTicket;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGrowthPassRewardItem_OnItemTypeEvent) == 0x000001, "Wrong alignment on TLUserWidgetGrowthPassRewardItem_OnItemTypeEvent");
static_assert(sizeof(TLUserWidgetGrowthPassRewardItem_OnItemTypeEvent) == 0x000001, "Wrong size on TLUserWidgetGrowthPassRewardItem_OnItemTypeEvent");
static_assert(offsetof(TLUserWidgetGrowthPassRewardItem_OnItemTypeEvent, bPassTicket) == 0x000000, "Member 'TLUserWidgetGrowthPassRewardItem_OnItemTypeEvent::bPassTicket' has a wrong offset!");

// Function TLClient.TLUserWidgetGrowthPassRewardItem.OnPurchaseTicketEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGrowthPassRewardItem_OnPurchaseTicketEvent final
{
public:
	bool                                          bInPurchasePassTicket;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGrowthPassRewardItem_OnPurchaseTicketEvent) == 0x000001, "Wrong alignment on TLUserWidgetGrowthPassRewardItem_OnPurchaseTicketEvent");
static_assert(sizeof(TLUserWidgetGrowthPassRewardItem_OnPurchaseTicketEvent) == 0x000001, "Wrong size on TLUserWidgetGrowthPassRewardItem_OnPurchaseTicketEvent");
static_assert(offsetof(TLUserWidgetGrowthPassRewardItem_OnPurchaseTicketEvent, bInPurchasePassTicket) == 0x000000, "Member 'TLUserWidgetGrowthPassRewardItem_OnPurchaseTicketEvent::bInPurchasePassTicket' has a wrong offset!");

// Function TLClient.TLUserWidgetGrowthPassRewardItem.OnRewardStatusEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGrowthPassRewardItem_OnRewardStatusEvent final
{
public:
	EGrowthPassRewardStatus                       InStatus;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGrowthPassRewardItem_OnRewardStatusEvent) == 0x000001, "Wrong alignment on TLUserWidgetGrowthPassRewardItem_OnRewardStatusEvent");
static_assert(sizeof(TLUserWidgetGrowthPassRewardItem_OnRewardStatusEvent) == 0x000001, "Wrong size on TLUserWidgetGrowthPassRewardItem_OnRewardStatusEvent");
static_assert(offsetof(TLUserWidgetGrowthPassRewardItem_OnRewardStatusEvent, InStatus) == 0x000000, "Member 'TLUserWidgetGrowthPassRewardItem_OnRewardStatusEvent::InStatus' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildBMRewardListItem.OnCompleteReward
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildBMRewardListItem_OnCompleteReward final
{
public:
	bool                                          InIsAll;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildBMRewardListItem_OnCompleteReward) == 0x000001, "Wrong alignment on TLUserWidgetGuildBMRewardListItem_OnCompleteReward");
static_assert(sizeof(TLUserWidgetGuildBMRewardListItem_OnCompleteReward) == 0x000001, "Wrong size on TLUserWidgetGuildBMRewardListItem_OnCompleteReward");
static_assert(offsetof(TLUserWidgetGuildBMRewardListItem_OnCompleteReward, InIsAll) == 0x000000, "Member 'TLUserWidgetGuildBMRewardListItem_OnCompleteReward::InIsAll' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildBMRewardListItem.OnRewardState
// 0x0003 (0x0003 - 0x0000)
struct TLUserWidgetGuildBMRewardListItem_OnRewardState final
{
public:
	bool                                          InIsReceived;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAction;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsAllReceive;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildBMRewardListItem_OnRewardState) == 0x000001, "Wrong alignment on TLUserWidgetGuildBMRewardListItem_OnRewardState");
static_assert(sizeof(TLUserWidgetGuildBMRewardListItem_OnRewardState) == 0x000003, "Wrong size on TLUserWidgetGuildBMRewardListItem_OnRewardState");
static_assert(offsetof(TLUserWidgetGuildBMRewardListItem_OnRewardState, InIsReceived) == 0x000000, "Member 'TLUserWidgetGuildBMRewardListItem_OnRewardState::InIsReceived' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildBMRewardListItem_OnRewardState, IsAction) == 0x000001, "Member 'TLUserWidgetGuildBMRewardListItem_OnRewardState::IsAction' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildBMRewardListItem_OnRewardState, InIsAllReceive) == 0x000002, "Member 'TLUserWidgetGuildBMRewardListItem_OnRewardState::InIsAllReceive' has a wrong offset!");

// Function TLClient.TLUserWidgetTutorial.SetActivate
// 0x00C8 (0x00C8 - 0x0000)
struct TLUserWidgetTutorial_SetActivate final
{
public:
	struct FTLInfoTutorial                        Info;                                              // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTutorial_SetActivate) == 0x000008, "Wrong alignment on TLUserWidgetTutorial_SetActivate");
static_assert(sizeof(TLUserWidgetTutorial_SetActivate) == 0x0000C8, "Wrong size on TLUserWidgetTutorial_SetActivate");
static_assert(offsetof(TLUserWidgetTutorial_SetActivate, Info) == 0x000000, "Member 'TLUserWidgetTutorial_SetActivate::Info' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildCallClanHud.OnDamaged
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildCallClanHud_OnDamaged final
{
public:
	bool                                          InIsDamaged;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildCallClanHud_OnDamaged) == 0x000001, "Wrong alignment on TLUserWidgetGuildCallClanHud_OnDamaged");
static_assert(sizeof(TLUserWidgetGuildCallClanHud_OnDamaged) == 0x000001, "Wrong size on TLUserWidgetGuildCallClanHud_OnDamaged");
static_assert(offsetof(TLUserWidgetGuildCallClanHud_OnDamaged, InIsDamaged) == 0x000000, "Member 'TLUserWidgetGuildCallClanHud_OnDamaged::InIsDamaged' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildCallClanHud.OnUpdateHpPercent
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetGuildCallClanHud_OnUpdateHpPercent final
{
public:
	float                                         InHpPercent;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildCallClanHud_OnUpdateHpPercent) == 0x000004, "Wrong alignment on TLUserWidgetGuildCallClanHud_OnUpdateHpPercent");
static_assert(sizeof(TLUserWidgetGuildCallClanHud_OnUpdateHpPercent) == 0x000004, "Wrong size on TLUserWidgetGuildCallClanHud_OnUpdateHpPercent");
static_assert(offsetof(TLUserWidgetGuildCallClanHud_OnUpdateHpPercent, InHpPercent) == 0x000000, "Member 'TLUserWidgetGuildCallClanHud_OnUpdateHpPercent::InHpPercent' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildContentsRewardListItem.OnCompleteReward
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetGuildContentsRewardListItem_OnCompleteReward final
{
public:
	bool                                          InIsAll;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsReqScroll;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildContentsRewardListItem_OnCompleteReward) == 0x000001, "Wrong alignment on TLUserWidgetGuildContentsRewardListItem_OnCompleteReward");
static_assert(sizeof(TLUserWidgetGuildContentsRewardListItem_OnCompleteReward) == 0x000002, "Wrong size on TLUserWidgetGuildContentsRewardListItem_OnCompleteReward");
static_assert(offsetof(TLUserWidgetGuildContentsRewardListItem_OnCompleteReward, InIsAll) == 0x000000, "Member 'TLUserWidgetGuildContentsRewardListItem_OnCompleteReward::InIsAll' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildContentsRewardListItem_OnCompleteReward, InIsReqScroll) == 0x000001, "Member 'TLUserWidgetGuildContentsRewardListItem_OnCompleteReward::InIsReqScroll' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildContentsRewardListItem.OnReceivedCompleteReward
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildContentsRewardListItem_OnReceivedCompleteReward final
{
public:
	bool                                          InIsComplete;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildContentsRewardListItem_OnReceivedCompleteReward) == 0x000001, "Wrong alignment on TLUserWidgetGuildContentsRewardListItem_OnReceivedCompleteReward");
static_assert(sizeof(TLUserWidgetGuildContentsRewardListItem_OnReceivedCompleteReward) == 0x000001, "Wrong size on TLUserWidgetGuildContentsRewardListItem_OnReceivedCompleteReward");
static_assert(offsetof(TLUserWidgetGuildContentsRewardListItem_OnReceivedCompleteReward, InIsComplete) == 0x000000, "Member 'TLUserWidgetGuildContentsRewardListItem_OnReceivedCompleteReward::InIsComplete' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildContractItem.OnUpdateTypeImage
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildContractItem_OnUpdateTypeImage final
{
public:
	EGuildContractType                            InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildContractItem_OnUpdateTypeImage) == 0x000001, "Wrong alignment on TLUserWidgetGuildContractItem_OnUpdateTypeImage");
static_assert(sizeof(TLUserWidgetGuildContractItem_OnUpdateTypeImage) == 0x000001, "Wrong size on TLUserWidgetGuildContractItem_OnUpdateTypeImage");
static_assert(offsetof(TLUserWidgetGuildContractItem_OnUpdateTypeImage, InType) == 0x000000, "Member 'TLUserWidgetGuildContractItem_OnUpdateTypeImage::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildContractItem.UpdateState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildContractItem_UpdateState final
{
public:
	EGuildContractState                           InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildContractItem_UpdateState) == 0x000001, "Wrong alignment on TLUserWidgetGuildContractItem_UpdateState");
static_assert(sizeof(TLUserWidgetGuildContractItem_UpdateState) == 0x000001, "Wrong size on TLUserWidgetGuildContractItem_UpdateState");
static_assert(offsetof(TLUserWidgetGuildContractItem_UpdateState, InState) == 0x000000, "Member 'TLUserWidgetGuildContractItem_UpdateState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildContractHistoryItem.OnUpdateRewardButtonState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildContractHistoryItem_OnUpdateRewardButtonState final
{
public:
	bool                                          InIsEnable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildContractHistoryItem_OnUpdateRewardButtonState) == 0x000001, "Wrong alignment on TLUserWidgetGuildContractHistoryItem_OnUpdateRewardButtonState");
static_assert(sizeof(TLUserWidgetGuildContractHistoryItem_OnUpdateRewardButtonState) == 0x000001, "Wrong size on TLUserWidgetGuildContractHistoryItem_OnUpdateRewardButtonState");
static_assert(offsetof(TLUserWidgetGuildContractHistoryItem_OnUpdateRewardButtonState, InIsEnable) == 0x000000, "Member 'TLUserWidgetGuildContractHistoryItem_OnUpdateRewardButtonState::InIsEnable' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildContractHistoryItem.OnUpdateTypeImage
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildContractHistoryItem_OnUpdateTypeImage final
{
public:
	EGuildContractType                            InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildContractHistoryItem_OnUpdateTypeImage) == 0x000001, "Wrong alignment on TLUserWidgetGuildContractHistoryItem_OnUpdateTypeImage");
static_assert(sizeof(TLUserWidgetGuildContractHistoryItem_OnUpdateTypeImage) == 0x000001, "Wrong size on TLUserWidgetGuildContractHistoryItem_OnUpdateTypeImage");
static_assert(offsetof(TLUserWidgetGuildContractHistoryItem_OnUpdateTypeImage, InType) == 0x000000, "Member 'TLUserWidgetGuildContractHistoryItem_OnUpdateTypeImage::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetKeyEditGroup.HandleGamepadKeySelected
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetKeyEditGroup_HandleGamepadKeySelected final
{
public:
	TArray<struct FInputChord>                    InSelectedKey;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetKeyEditGroup_HandleGamepadKeySelected) == 0x000008, "Wrong alignment on TLUserWidgetKeyEditGroup_HandleGamepadKeySelected");
static_assert(sizeof(TLUserWidgetKeyEditGroup_HandleGamepadKeySelected) == 0x000010, "Wrong size on TLUserWidgetKeyEditGroup_HandleGamepadKeySelected");
static_assert(offsetof(TLUserWidgetKeyEditGroup_HandleGamepadKeySelected, InSelectedKey) == 0x000000, "Member 'TLUserWidgetKeyEditGroup_HandleGamepadKeySelected::InSelectedKey' has a wrong offset!");

// Function TLClient.TLUserWidgetKeyEditGroup.HandleGamepadKeySelecting
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetKeyEditGroup_HandleGamepadKeySelecting final
{
public:
	TArray<struct FInputChord>                    InSelectedKey;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInRepeat;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetKeyEditGroup_HandleGamepadKeySelecting) == 0x000008, "Wrong alignment on TLUserWidgetKeyEditGroup_HandleGamepadKeySelecting");
static_assert(sizeof(TLUserWidgetKeyEditGroup_HandleGamepadKeySelecting) == 0x000018, "Wrong size on TLUserWidgetKeyEditGroup_HandleGamepadKeySelecting");
static_assert(offsetof(TLUserWidgetKeyEditGroup_HandleGamepadKeySelecting, InSelectedKey) == 0x000000, "Member 'TLUserWidgetKeyEditGroup_HandleGamepadKeySelecting::InSelectedKey' has a wrong offset!");
static_assert(offsetof(TLUserWidgetKeyEditGroup_HandleGamepadKeySelecting, bInRepeat) == 0x000010, "Member 'TLUserWidgetKeyEditGroup_HandleGamepadKeySelecting::bInRepeat' has a wrong offset!");

// Function TLClient.TLUserWidgetKeyEditGroup.HandleKeySelected
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetKeyEditGroup_HandleKeySelected final
{
public:
	struct FInputChord                            InSelectedKey;                                     // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetKeyEditGroup_HandleKeySelected) == 0x000008, "Wrong alignment on TLUserWidgetKeyEditGroup_HandleKeySelected");
static_assert(sizeof(TLUserWidgetKeyEditGroup_HandleKeySelected) == 0x000020, "Wrong size on TLUserWidgetKeyEditGroup_HandleKeySelected");
static_assert(offsetof(TLUserWidgetKeyEditGroup_HandleKeySelected, InSelectedKey) == 0x000000, "Member 'TLUserWidgetKeyEditGroup_HandleKeySelected::InSelectedKey' has a wrong offset!");

// Function TLClient.TLUserWidgetKeyEditGroup.HandlePressedLongPress
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetKeyEditGroup_HandlePressedLongPress final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetKeyEditGroup_HandlePressedLongPress) == 0x000008, "Wrong alignment on TLUserWidgetKeyEditGroup_HandlePressedLongPress");
static_assert(sizeof(TLUserWidgetKeyEditGroup_HandlePressedLongPress) == 0x000018, "Wrong size on TLUserWidgetKeyEditGroup_HandlePressedLongPress");
static_assert(offsetof(TLUserWidgetKeyEditGroup_HandlePressedLongPress, InKey) == 0x000000, "Member 'TLUserWidgetKeyEditGroup_HandlePressedLongPress::InKey' has a wrong offset!");

// Function TLClient.TLUserWidgetKeyEditGroup.HandleReleasedLongPress
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetKeyEditGroup_HandleReleasedLongPress final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetKeyEditGroup_HandleReleasedLongPress) == 0x000008, "Wrong alignment on TLUserWidgetKeyEditGroup_HandleReleasedLongPress");
static_assert(sizeof(TLUserWidgetKeyEditGroup_HandleReleasedLongPress) == 0x000018, "Wrong size on TLUserWidgetKeyEditGroup_HandleReleasedLongPress");
static_assert(offsetof(TLUserWidgetKeyEditGroup_HandleReleasedLongPress, InKey) == 0x000000, "Member 'TLUserWidgetKeyEditGroup_HandleReleasedLongPress::InKey' has a wrong offset!");

// Function TLClient.TLUserWidgetKeyEditGroup.HandleRepeatedStartLongPress
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetKeyEditGroup_HandleRepeatedStartLongPress final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetKeyEditGroup_HandleRepeatedStartLongPress) == 0x000008, "Wrong alignment on TLUserWidgetKeyEditGroup_HandleRepeatedStartLongPress");
static_assert(sizeof(TLUserWidgetKeyEditGroup_HandleRepeatedStartLongPress) == 0x000018, "Wrong size on TLUserWidgetKeyEditGroup_HandleRepeatedStartLongPress");
static_assert(offsetof(TLUserWidgetKeyEditGroup_HandleRepeatedStartLongPress, InKey) == 0x000000, "Member 'TLUserWidgetKeyEditGroup_HandleRepeatedStartLongPress::InKey' has a wrong offset!");

// Function TLClient.TLUserWidgetKeyEditGroup.OnAvailableChangeKey
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetKeyEditGroup_OnAvailableChangeKey final
{
public:
	bool                                          bInAvailableChangeKey;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetKeyEditGroup_OnAvailableChangeKey) == 0x000001, "Wrong alignment on TLUserWidgetKeyEditGroup_OnAvailableChangeKey");
static_assert(sizeof(TLUserWidgetKeyEditGroup_OnAvailableChangeKey) == 0x000001, "Wrong size on TLUserWidgetKeyEditGroup_OnAvailableChangeKey");
static_assert(offsetof(TLUserWidgetKeyEditGroup_OnAvailableChangeKey, bInAvailableChangeKey) == 0x000000, "Member 'TLUserWidgetKeyEditGroup_OnAvailableChangeKey::bInAvailableChangeKey' has a wrong offset!");

// Function TLClient.TLUserWidgetKeyEditGroup.OnUpdateEditing
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetKeyEditGroup_OnUpdateEditing final
{
public:
	bool                                          bInEdit;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetKeyEditGroup_OnUpdateEditing) == 0x000001, "Wrong alignment on TLUserWidgetKeyEditGroup_OnUpdateEditing");
static_assert(sizeof(TLUserWidgetKeyEditGroup_OnUpdateEditing) == 0x000001, "Wrong size on TLUserWidgetKeyEditGroup_OnUpdateEditing");
static_assert(offsetof(TLUserWidgetKeyEditGroup_OnUpdateEditing, bInEdit) == 0x000000, "Member 'TLUserWidgetKeyEditGroup_OnUpdateEditing::bInEdit' has a wrong offset!");

// Function TLClient.TLUserWidgetComboBoxSetKeyEditGroup.HandleActiveKeySelectionChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetComboBoxSetKeyEditGroup_HandleActiveKeySelectionChanged final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetComboBoxSetKeyEditGroup_HandleActiveKeySelectionChanged) == 0x000008, "Wrong alignment on TLUserWidgetComboBoxSetKeyEditGroup_HandleActiveKeySelectionChanged");
static_assert(sizeof(TLUserWidgetComboBoxSetKeyEditGroup_HandleActiveKeySelectionChanged) == 0x000018, "Wrong size on TLUserWidgetComboBoxSetKeyEditGroup_HandleActiveKeySelectionChanged");
static_assert(offsetof(TLUserWidgetComboBoxSetKeyEditGroup_HandleActiveKeySelectionChanged, SelectedItem) == 0x000000, "Member 'TLUserWidgetComboBoxSetKeyEditGroup_HandleActiveKeySelectionChanged::SelectedItem' has a wrong offset!");
static_assert(offsetof(TLUserWidgetComboBoxSetKeyEditGroup_HandleActiveKeySelectionChanged, SelectionType) == 0x000010, "Member 'TLUserWidgetComboBoxSetKeyEditGroup_HandleActiveKeySelectionChanged::SelectionType' has a wrong offset!");

// Function TLClient.TLUserWidgetComboBoxSetKeyEditGroup.HandleSetKeyTypeSelectionChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetComboBoxSetKeyEditGroup_HandleSetKeyTypeSelectionChanged final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetComboBoxSetKeyEditGroup_HandleSetKeyTypeSelectionChanged) == 0x000008, "Wrong alignment on TLUserWidgetComboBoxSetKeyEditGroup_HandleSetKeyTypeSelectionChanged");
static_assert(sizeof(TLUserWidgetComboBoxSetKeyEditGroup_HandleSetKeyTypeSelectionChanged) == 0x000018, "Wrong size on TLUserWidgetComboBoxSetKeyEditGroup_HandleSetKeyTypeSelectionChanged");
static_assert(offsetof(TLUserWidgetComboBoxSetKeyEditGroup_HandleSetKeyTypeSelectionChanged, SelectedItem) == 0x000000, "Member 'TLUserWidgetComboBoxSetKeyEditGroup_HandleSetKeyTypeSelectionChanged::SelectedItem' has a wrong offset!");
static_assert(offsetof(TLUserWidgetComboBoxSetKeyEditGroup_HandleSetKeyTypeSelectionChanged, SelectionType) == 0x000010, "Member 'TLUserWidgetComboBoxSetKeyEditGroup_HandleSetKeyTypeSelectionChanged::SelectionType' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildContractBoaderObjectiveItem.OnUpdateObjective
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildContractBoaderObjectiveItem_OnUpdateObjective final
{
public:
	bool                                          IsComplete;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildContractBoaderObjectiveItem_OnUpdateObjective) == 0x000001, "Wrong alignment on TLUserWidgetGuildContractBoaderObjectiveItem_OnUpdateObjective");
static_assert(sizeof(TLUserWidgetGuildContractBoaderObjectiveItem_OnUpdateObjective) == 0x000001, "Wrong size on TLUserWidgetGuildContractBoaderObjectiveItem_OnUpdateObjective");
static_assert(offsetof(TLUserWidgetGuildContractBoaderObjectiveItem_OnUpdateObjective, IsComplete) == 0x000000, "Member 'TLUserWidgetGuildContractBoaderObjectiveItem_OnUpdateObjective::IsComplete' has a wrong offset!");

// Function TLClient.TLUserWidgetTreeViewItem.OnActive
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTreeViewItem_OnActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTreeViewItem_OnActive) == 0x000001, "Wrong alignment on TLUserWidgetTreeViewItem_OnActive");
static_assert(sizeof(TLUserWidgetTreeViewItem_OnActive) == 0x000001, "Wrong size on TLUserWidgetTreeViewItem_OnActive");
static_assert(offsetof(TLUserWidgetTreeViewItem_OnActive, bActive) == 0x000000, "Member 'TLUserWidgetTreeViewItem_OnActive::bActive' has a wrong offset!");

// Function TLClient.TLUserWidgetTreeViewItem.OnExpand
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTreeViewItem_OnExpand final
{
public:
	bool                                          bExpand;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTreeViewItem_OnExpand) == 0x000001, "Wrong alignment on TLUserWidgetTreeViewItem_OnExpand");
static_assert(sizeof(TLUserWidgetTreeViewItem_OnExpand) == 0x000001, "Wrong size on TLUserWidgetTreeViewItem_OnExpand");
static_assert(offsetof(TLUserWidgetTreeViewItem_OnExpand, bExpand) == 0x000000, "Member 'TLUserWidgetTreeViewItem_OnExpand::bExpand' has a wrong offset!");

// Function TLClient.TLUserWidgetTreeViewItem.OnShowExpansionButton
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTreeViewItem_OnShowExpansionButton final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTreeViewItem_OnShowExpansionButton) == 0x000001, "Wrong alignment on TLUserWidgetTreeViewItem_OnShowExpansionButton");
static_assert(sizeof(TLUserWidgetTreeViewItem_OnShowExpansionButton) == 0x000001, "Wrong size on TLUserWidgetTreeViewItem_OnShowExpansionButton");
static_assert(offsetof(TLUserWidgetTreeViewItem_OnShowExpansionButton, bShow) == 0x000000, "Member 'TLUserWidgetTreeViewItem_OnShowExpansionButton::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildContractBoaderItem.ButtonClickContractTarget
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildContractBoaderItem_ButtonClickContractTarget final
{
public:
	bool                                          InbChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildContractBoaderItem_ButtonClickContractTarget) == 0x000001, "Wrong alignment on TLUserWidgetGuildContractBoaderItem_ButtonClickContractTarget");
static_assert(sizeof(TLUserWidgetGuildContractBoaderItem_ButtonClickContractTarget) == 0x000001, "Wrong size on TLUserWidgetGuildContractBoaderItem_ButtonClickContractTarget");
static_assert(offsetof(TLUserWidgetGuildContractBoaderItem_ButtonClickContractTarget, InbChecked) == 0x000000, "Member 'TLUserWidgetGuildContractBoaderItem_ButtonClickContractTarget::InbChecked' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildContractBoaderItem.OnContractTargetAnimation
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildContractBoaderItem_OnContractTargetAnimation final
{
public:
	bool                                          InbVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildContractBoaderItem_OnContractTargetAnimation) == 0x000001, "Wrong alignment on TLUserWidgetGuildContractBoaderItem_OnContractTargetAnimation");
static_assert(sizeof(TLUserWidgetGuildContractBoaderItem_OnContractTargetAnimation) == 0x000001, "Wrong size on TLUserWidgetGuildContractBoaderItem_OnContractTargetAnimation");
static_assert(offsetof(TLUserWidgetGuildContractBoaderItem_OnContractTargetAnimation, InbVisible) == 0x000000, "Member 'TLUserWidgetGuildContractBoaderItem_OnContractTargetAnimation::InbVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildContractBoaderItem.OnUpdateGuildContract
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildContractBoaderItem_OnUpdateGuildContract final
{
public:
	bool                                          IsComplete;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildContractBoaderItem_OnUpdateGuildContract) == 0x000001, "Wrong alignment on TLUserWidgetGuildContractBoaderItem_OnUpdateGuildContract");
static_assert(sizeof(TLUserWidgetGuildContractBoaderItem_OnUpdateGuildContract) == 0x000001, "Wrong size on TLUserWidgetGuildContractBoaderItem_OnUpdateGuildContract");
static_assert(offsetof(TLUserWidgetGuildContractBoaderItem_OnUpdateGuildContract, IsComplete) == 0x000000, "Member 'TLUserWidgetGuildContractBoaderItem_OnUpdateGuildContract::IsComplete' has a wrong offset!");

// Function TLClient.TLUserWidgetUnionCreate.OnCreateFail
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetUnionCreate_OnCreateFail final
{
public:
	int32                                         InFailFlag;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetUnionCreate_OnCreateFail) == 0x000004, "Wrong alignment on TLUserWidgetUnionCreate_OnCreateFail");
static_assert(sizeof(TLUserWidgetUnionCreate_OnCreateFail) == 0x000004, "Wrong size on TLUserWidgetUnionCreate_OnCreateFail");
static_assert(offsetof(TLUserWidgetUnionCreate_OnCreateFail, InFailFlag) == 0x000000, "Member 'TLUserWidgetUnionCreate_OnCreateFail::InFailFlag' has a wrong offset!");

// Function TLClient.TLUserWidgetUnionCreate.OnUpdateCreateState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetUnionCreate_OnUpdateCreateState final
{
public:
	EUnionCreateFailType                          InFailType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetUnionCreate_OnUpdateCreateState) == 0x000001, "Wrong alignment on TLUserWidgetUnionCreate_OnUpdateCreateState");
static_assert(sizeof(TLUserWidgetUnionCreate_OnUpdateCreateState) == 0x000001, "Wrong size on TLUserWidgetUnionCreate_OnUpdateCreateState");
static_assert(offsetof(TLUserWidgetUnionCreate_OnUpdateCreateState, InFailType) == 0x000000, "Member 'TLUserWidgetUnionCreate_OnUpdateCreateState::InFailType' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildContractProgressInfo.OnUpdateTypeImage
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildContractProgressInfo_OnUpdateTypeImage final
{
public:
	EGuildContractType                            InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildContractProgressInfo_OnUpdateTypeImage) == 0x000001, "Wrong alignment on TLUserWidgetGuildContractProgressInfo_OnUpdateTypeImage");
static_assert(sizeof(TLUserWidgetGuildContractProgressInfo_OnUpdateTypeImage) == 0x000001, "Wrong size on TLUserWidgetGuildContractProgressInfo_OnUpdateTypeImage");
static_assert(offsetof(TLUserWidgetGuildContractProgressInfo_OnUpdateTypeImage, InType) == 0x000000, "Member 'TLUserWidgetGuildContractProgressInfo_OnUpdateTypeImage::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapRegionNpcInfo.OnUnLockMemorial
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWorldMapRegionNpcInfo_OnUnLockMemorial final
{
public:
	bool                                          IsUnLock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapRegionNpcInfo_OnUnLockMemorial) == 0x000001, "Wrong alignment on TLUserWidgetWorldMapRegionNpcInfo_OnUnLockMemorial");
static_assert(sizeof(TLUserWidgetWorldMapRegionNpcInfo_OnUnLockMemorial) == 0x000001, "Wrong size on TLUserWidgetWorldMapRegionNpcInfo_OnUnLockMemorial");
static_assert(offsetof(TLUserWidgetWorldMapRegionNpcInfo_OnUnLockMemorial, IsUnLock) == 0x000000, "Member 'TLUserWidgetWorldMapRegionNpcInfo_OnUnLockMemorial::IsUnLock' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapRegionNpcInfo.OnUpdateNpcInfo
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetWorldMapRegionNpcInfo_OnUpdateNpcInfo final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLCreatureRank                               InCreatureRank;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetWorldMapRegionNpcInfo_OnUpdateNpcInfo) == 0x000004, "Wrong alignment on TLUserWidgetWorldMapRegionNpcInfo_OnUpdateNpcInfo");
static_assert(sizeof(TLUserWidgetWorldMapRegionNpcInfo_OnUpdateNpcInfo) == 0x000008, "Wrong size on TLUserWidgetWorldMapRegionNpcInfo_OnUpdateNpcInfo");
static_assert(offsetof(TLUserWidgetWorldMapRegionNpcInfo_OnUpdateNpcInfo, InLevel) == 0x000000, "Member 'TLUserWidgetWorldMapRegionNpcInfo_OnUpdateNpcInfo::InLevel' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWorldMapRegionNpcInfo_OnUpdateNpcInfo, InCreatureRank) == 0x000004, "Member 'TLUserWidgetWorldMapRegionNpcInfo_OnUpdateNpcInfo::InCreatureRank' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildContractProgressMemberItem.OnUpdateJoinMember
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildContractProgressMemberItem_OnUpdateJoinMember final
{
public:
	bool                                          InIsJoin;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildContractProgressMemberItem_OnUpdateJoinMember) == 0x000001, "Wrong alignment on TLUserWidgetGuildContractProgressMemberItem_OnUpdateJoinMember");
static_assert(sizeof(TLUserWidgetGuildContractProgressMemberItem_OnUpdateJoinMember) == 0x000001, "Wrong size on TLUserWidgetGuildContractProgressMemberItem_OnUpdateJoinMember");
static_assert(offsetof(TLUserWidgetGuildContractProgressMemberItem_OnUpdateJoinMember, InIsJoin) == 0x000000, "Member 'TLUserWidgetGuildContractProgressMemberItem_OnUpdateJoinMember::InIsJoin' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapRegionNpcInfoListItem.OnUpdateMark
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWorldMapRegionNpcInfoListItem_OnUpdateMark final
{
public:
	bool                                          IsShowMark;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapRegionNpcInfoListItem_OnUpdateMark) == 0x000001, "Wrong alignment on TLUserWidgetWorldMapRegionNpcInfoListItem_OnUpdateMark");
static_assert(sizeof(TLUserWidgetWorldMapRegionNpcInfoListItem_OnUpdateMark) == 0x000001, "Wrong size on TLUserWidgetWorldMapRegionNpcInfoListItem_OnUpdateMark");
static_assert(offsetof(TLUserWidgetWorldMapRegionNpcInfoListItem_OnUpdateMark, IsShowMark) == 0x000000, "Member 'TLUserWidgetWorldMapRegionNpcInfoListItem_OnUpdateMark::IsShowMark' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildContractScreenMessage.OnUpdateTypeImage
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildContractScreenMessage_OnUpdateTypeImage final
{
public:
	EGuildContractType                            InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildContractScreenMessage_OnUpdateTypeImage) == 0x000001, "Wrong alignment on TLUserWidgetGuildContractScreenMessage_OnUpdateTypeImage");
static_assert(sizeof(TLUserWidgetGuildContractScreenMessage_OnUpdateTypeImage) == 0x000001, "Wrong size on TLUserWidgetGuildContractScreenMessage_OnUpdateTypeImage");
static_assert(offsetof(TLUserWidgetGuildContractScreenMessage_OnUpdateTypeImage, InType) == 0x000000, "Member 'TLUserWidgetGuildContractScreenMessage_OnUpdateTypeImage::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildCreate.OnGuildNameTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetGuildCreate_OnGuildNameTextChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildCreate_OnGuildNameTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetGuildCreate_OnGuildNameTextChanged");
static_assert(sizeof(TLUserWidgetGuildCreate_OnGuildNameTextChanged) == 0x000018, "Wrong size on TLUserWidgetGuildCreate_OnGuildNameTextChanged");
static_assert(offsetof(TLUserWidgetGuildCreate_OnGuildNameTextChanged, InText) == 0x000000, "Member 'TLUserWidgetGuildCreate_OnGuildNameTextChanged::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildCreate.OnGuildNameTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetGuildCreate_OnGuildNameTextCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetGuildCreate_OnGuildNameTextCommitted) == 0x000008, "Wrong alignment on TLUserWidgetGuildCreate_OnGuildNameTextCommitted");
static_assert(sizeof(TLUserWidgetGuildCreate_OnGuildNameTextCommitted) == 0x000020, "Wrong size on TLUserWidgetGuildCreate_OnGuildNameTextCommitted");
static_assert(offsetof(TLUserWidgetGuildCreate_OnGuildNameTextCommitted, InText) == 0x000000, "Member 'TLUserWidgetGuildCreate_OnGuildNameTextCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildCreate_OnGuildNameTextCommitted, InCommitType) == 0x000018, "Member 'TLUserWidgetGuildCreate_OnGuildNameTextCommitted::InCommitType' has a wrong offset!");

// Function TLClient.TLUserWidgetPolymorphLevelTabButton.OnUpdateAcquiredLevel
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPolymorphLevelTabButton_OnUpdateAcquiredLevel final
{
public:
	bool                                          bAcquired;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPolymorphLevelTabButton_OnUpdateAcquiredLevel) == 0x000001, "Wrong alignment on TLUserWidgetPolymorphLevelTabButton_OnUpdateAcquiredLevel");
static_assert(sizeof(TLUserWidgetPolymorphLevelTabButton_OnUpdateAcquiredLevel) == 0x000001, "Wrong size on TLUserWidgetPolymorphLevelTabButton_OnUpdateAcquiredLevel");
static_assert(offsetof(TLUserWidgetPolymorphLevelTabButton_OnUpdateAcquiredLevel, bAcquired) == 0x000000, "Member 'TLUserWidgetPolymorphLevelTabButton_OnUpdateAcquiredLevel::bAcquired' has a wrong offset!");

// Function TLClient.TLUserWidgetPolymorphLevelTabButton.OnUpdateLevel
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetPolymorphLevelTabButton_OnUpdateLevel final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPolymorphLevelTabButton_OnUpdateLevel) == 0x000004, "Wrong alignment on TLUserWidgetPolymorphLevelTabButton_OnUpdateLevel");
static_assert(sizeof(TLUserWidgetPolymorphLevelTabButton_OnUpdateLevel) == 0x000004, "Wrong size on TLUserWidgetPolymorphLevelTabButton_OnUpdateLevel");
static_assert(offsetof(TLUserWidgetPolymorphLevelTabButton_OnUpdateLevel, InLevel) == 0x000000, "Member 'TLUserWidgetPolymorphLevelTabButton_OnUpdateLevel::InLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailItemPay.HandleBuyCostChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetGuildDistributionDetailItemPay_HandleBuyCostChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailItemPay_HandleBuyCostChanged) == 0x000008, "Wrong alignment on TLUserWidgetGuildDistributionDetailItemPay_HandleBuyCostChanged");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailItemPay_HandleBuyCostChanged) == 0x000018, "Wrong size on TLUserWidgetGuildDistributionDetailItemPay_HandleBuyCostChanged");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailItemPay_HandleBuyCostChanged, InText) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailItemPay_HandleBuyCostChanged::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailItemPay.HandleBuyCostCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetGuildDistributionDetailItemPay_HandleBuyCostCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailItemPay_HandleBuyCostCommitted) == 0x000008, "Wrong alignment on TLUserWidgetGuildDistributionDetailItemPay_HandleBuyCostCommitted");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailItemPay_HandleBuyCostCommitted) == 0x000020, "Wrong size on TLUserWidgetGuildDistributionDetailItemPay_HandleBuyCostCommitted");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailItemPay_HandleBuyCostCommitted, InText) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailItemPay_HandleBuyCostCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailItemPay_HandleBuyCostCommitted, InCommitType) == 0x000018, "Member 'TLUserWidgetGuildDistributionDetailItemPay_HandleBuyCostCommitted::InCommitType' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailItemPay.HandleCost01Changed
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetGuildDistributionDetailItemPay_HandleCost01Changed final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailItemPay_HandleCost01Changed) == 0x000008, "Wrong alignment on TLUserWidgetGuildDistributionDetailItemPay_HandleCost01Changed");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailItemPay_HandleCost01Changed) == 0x000018, "Wrong size on TLUserWidgetGuildDistributionDetailItemPay_HandleCost01Changed");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailItemPay_HandleCost01Changed, InText) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailItemPay_HandleCost01Changed::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailItemPay.HandleCost01Committed
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetGuildDistributionDetailItemPay_HandleCost01Committed final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailItemPay_HandleCost01Committed) == 0x000008, "Wrong alignment on TLUserWidgetGuildDistributionDetailItemPay_HandleCost01Committed");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailItemPay_HandleCost01Committed) == 0x000020, "Wrong size on TLUserWidgetGuildDistributionDetailItemPay_HandleCost01Committed");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailItemPay_HandleCost01Committed, InText) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailItemPay_HandleCost01Committed::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailItemPay_HandleCost01Committed, InCommitType) == 0x000018, "Member 'TLUserWidgetGuildDistributionDetailItemPay_HandleCost01Committed::InCommitType' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailItemPay.HandleCost02Changed
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetGuildDistributionDetailItemPay_HandleCost02Changed final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailItemPay_HandleCost02Changed) == 0x000008, "Wrong alignment on TLUserWidgetGuildDistributionDetailItemPay_HandleCost02Changed");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailItemPay_HandleCost02Changed) == 0x000018, "Wrong size on TLUserWidgetGuildDistributionDetailItemPay_HandleCost02Changed");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailItemPay_HandleCost02Changed, InText) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailItemPay_HandleCost02Changed::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailItemPay.HandleCost02Committed
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetGuildDistributionDetailItemPay_HandleCost02Committed final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailItemPay_HandleCost02Committed) == 0x000008, "Wrong alignment on TLUserWidgetGuildDistributionDetailItemPay_HandleCost02Committed");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailItemPay_HandleCost02Committed) == 0x000020, "Wrong size on TLUserWidgetGuildDistributionDetailItemPay_HandleCost02Committed");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailItemPay_HandleCost02Committed, InText) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailItemPay_HandleCost02Committed::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailItemPay_HandleCost02Committed, InCommitType) == 0x000018, "Member 'TLUserWidgetGuildDistributionDetailItemPay_HandleCost02Committed::InCommitType' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailItemPay.OnDistributionSellingType
// 0x0003 (0x0003 - 0x0000)
struct TLUserWidgetGuildDistributionDetailItemPay_OnDistributionSellingType final
{
public:
	bool                                          InIsWait;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDistributionGuildSellState                   InState;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAvailableBidding;                                // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailItemPay_OnDistributionSellingType) == 0x000001, "Wrong alignment on TLUserWidgetGuildDistributionDetailItemPay_OnDistributionSellingType");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailItemPay_OnDistributionSellingType) == 0x000003, "Wrong size on TLUserWidgetGuildDistributionDetailItemPay_OnDistributionSellingType");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailItemPay_OnDistributionSellingType, InIsWait) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailItemPay_OnDistributionSellingType::InIsWait' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailItemPay_OnDistributionSellingType, InState) == 0x000001, "Member 'TLUserWidgetGuildDistributionDetailItemPay_OnDistributionSellingType::InState' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailItemPay_OnDistributionSellingType, IsAvailableBidding) == 0x000002, "Member 'TLUserWidgetGuildDistributionDetailItemPay_OnDistributionSellingType::IsAvailableBidding' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailItemPay.OnTradeShopItemCount
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildDistributionDetailItemPay_OnTradeShopItemCount final
{
public:
	bool                                          InIsFull;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailItemPay_OnTradeShopItemCount) == 0x000001, "Wrong alignment on TLUserWidgetGuildDistributionDetailItemPay_OnTradeShopItemCount");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailItemPay_OnTradeShopItemCount) == 0x000001, "Wrong size on TLUserWidgetGuildDistributionDetailItemPay_OnTradeShopItemCount");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailItemPay_OnTradeShopItemCount, InIsFull) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailItemPay_OnTradeShopItemCount::InIsFull' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailItemPay.UpdateActionButton03Color
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildDistributionDetailItemPay_UpdateActionButton03Color final
{
public:
	bool                                          bInMainButtonColor;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailItemPay_UpdateActionButton03Color) == 0x000001, "Wrong alignment on TLUserWidgetGuildDistributionDetailItemPay_UpdateActionButton03Color");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailItemPay_UpdateActionButton03Color) == 0x000001, "Wrong size on TLUserWidgetGuildDistributionDetailItemPay_UpdateActionButton03Color");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailItemPay_UpdateActionButton03Color, bInMainButtonColor) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailItemPay_UpdateActionButton03Color::bInMainButtonColor' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailItemStorageItem.OnModifyStatus
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildDistributionDetailItemStorageItem_OnModifyStatus final
{
public:
	EGuildDistributionJoinModifyStatus            InStatus;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailItemStorageItem_OnModifyStatus) == 0x000001, "Wrong alignment on TLUserWidgetGuildDistributionDetailItemStorageItem_OnModifyStatus");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailItemStorageItem_OnModifyStatus) == 0x000001, "Wrong size on TLUserWidgetGuildDistributionDetailItemStorageItem_OnModifyStatus");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailItemStorageItem_OnModifyStatus, InStatus) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailItemStorageItem_OnModifyStatus::InStatus' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailItemStorage.OnDistributionItemState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildDistributionDetailItemStorage_OnDistributionItemState final
{
public:
	EDistibutionItemState                         InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailItemStorage_OnDistributionItemState) == 0x000001, "Wrong alignment on TLUserWidgetGuildDistributionDetailItemStorage_OnDistributionItemState");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailItemStorage_OnDistributionItemState) == 0x000001, "Wrong size on TLUserWidgetGuildDistributionDetailItemStorage_OnDistributionItemState");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailItemStorage_OnDistributionItemState, InState) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailItemStorage_OnDistributionItemState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailItemStorage.OnItemSlotUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildDistributionDetailItemStorage_OnItemSlotUpdate final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailItemStorage_OnItemSlotUpdate) == 0x000001, "Wrong alignment on TLUserWidgetGuildDistributionDetailItemStorage_OnItemSlotUpdate");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailItemStorage_OnItemSlotUpdate) == 0x000001, "Wrong size on TLUserWidgetGuildDistributionDetailItemStorage_OnItemSlotUpdate");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailItemStorage_OnItemSlotUpdate, InIsShow) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailItemStorage_OnItemSlotUpdate::InIsShow' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailItemStorage.OnTradeShopItemCount
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildDistributionDetailItemStorage_OnTradeShopItemCount final
{
public:
	bool                                          InIsFull;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailItemStorage_OnTradeShopItemCount) == 0x000001, "Wrong alignment on TLUserWidgetGuildDistributionDetailItemStorage_OnTradeShopItemCount");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailItemStorage_OnTradeShopItemCount) == 0x000001, "Wrong size on TLUserWidgetGuildDistributionDetailItemStorage_OnTradeShopItemCount");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailItemStorage_OnTradeShopItemCount, InIsFull) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailItemStorage_OnTradeShopItemCount::InIsFull' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailRevenueItem.HandleAdenaChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetGuildDistributionDetailRevenueItem_HandleAdenaChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailRevenueItem_HandleAdenaChanged) == 0x000008, "Wrong alignment on TLUserWidgetGuildDistributionDetailRevenueItem_HandleAdenaChanged");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailRevenueItem_HandleAdenaChanged) == 0x000018, "Wrong size on TLUserWidgetGuildDistributionDetailRevenueItem_HandleAdenaChanged");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailRevenueItem_HandleAdenaChanged, InText) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailRevenueItem_HandleAdenaChanged::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailRevenueItem.HandleAdenaCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetGuildDistributionDetailRevenueItem_HandleAdenaCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailRevenueItem_HandleAdenaCommitted) == 0x000008, "Wrong alignment on TLUserWidgetGuildDistributionDetailRevenueItem_HandleAdenaCommitted");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailRevenueItem_HandleAdenaCommitted) == 0x000020, "Wrong size on TLUserWidgetGuildDistributionDetailRevenueItem_HandleAdenaCommitted");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailRevenueItem_HandleAdenaCommitted, InText) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailRevenueItem_HandleAdenaCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailRevenueItem_HandleAdenaCommitted, InCommitType) == 0x000018, "Member 'TLUserWidgetGuildDistributionDetailRevenueItem_HandleAdenaCommitted::InCommitType' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailRevenueItem.HandleDiamondChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetGuildDistributionDetailRevenueItem_HandleDiamondChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailRevenueItem_HandleDiamondChanged) == 0x000008, "Wrong alignment on TLUserWidgetGuildDistributionDetailRevenueItem_HandleDiamondChanged");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailRevenueItem_HandleDiamondChanged) == 0x000018, "Wrong size on TLUserWidgetGuildDistributionDetailRevenueItem_HandleDiamondChanged");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailRevenueItem_HandleDiamondChanged, InText) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailRevenueItem_HandleDiamondChanged::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailRevenueItem.HandleDiamondCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetGuildDistributionDetailRevenueItem_HandleDiamondCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailRevenueItem_HandleDiamondCommitted) == 0x000008, "Wrong alignment on TLUserWidgetGuildDistributionDetailRevenueItem_HandleDiamondCommitted");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailRevenueItem_HandleDiamondCommitted) == 0x000020, "Wrong size on TLUserWidgetGuildDistributionDetailRevenueItem_HandleDiamondCommitted");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailRevenueItem_HandleDiamondCommitted, InText) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailRevenueItem_HandleDiamondCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailRevenueItem_HandleDiamondCommitted, InCommitType) == 0x000018, "Member 'TLUserWidgetGuildDistributionDetailRevenueItem_HandleDiamondCommitted::InCommitType' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailRevenue.HandleBatchAdenaChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetGuildDistributionDetailRevenue_HandleBatchAdenaChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailRevenue_HandleBatchAdenaChanged) == 0x000008, "Wrong alignment on TLUserWidgetGuildDistributionDetailRevenue_HandleBatchAdenaChanged");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailRevenue_HandleBatchAdenaChanged) == 0x000018, "Wrong size on TLUserWidgetGuildDistributionDetailRevenue_HandleBatchAdenaChanged");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailRevenue_HandleBatchAdenaChanged, InText) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailRevenue_HandleBatchAdenaChanged::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailRevenue.HandleBatchAdenaCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetGuildDistributionDetailRevenue_HandleBatchAdenaCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailRevenue_HandleBatchAdenaCommitted) == 0x000008, "Wrong alignment on TLUserWidgetGuildDistributionDetailRevenue_HandleBatchAdenaCommitted");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailRevenue_HandleBatchAdenaCommitted) == 0x000020, "Wrong size on TLUserWidgetGuildDistributionDetailRevenue_HandleBatchAdenaCommitted");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailRevenue_HandleBatchAdenaCommitted, InText) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailRevenue_HandleBatchAdenaCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailRevenue_HandleBatchAdenaCommitted, InCommitType) == 0x000018, "Member 'TLUserWidgetGuildDistributionDetailRevenue_HandleBatchAdenaCommitted::InCommitType' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailRevenue.HandleBatchDiamondChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetGuildDistributionDetailRevenue_HandleBatchDiamondChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailRevenue_HandleBatchDiamondChanged) == 0x000008, "Wrong alignment on TLUserWidgetGuildDistributionDetailRevenue_HandleBatchDiamondChanged");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailRevenue_HandleBatchDiamondChanged) == 0x000018, "Wrong size on TLUserWidgetGuildDistributionDetailRevenue_HandleBatchDiamondChanged");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailRevenue_HandleBatchDiamondChanged, InText) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailRevenue_HandleBatchDiamondChanged::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailRevenue.HandleBatchDiamondCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetGuildDistributionDetailRevenue_HandleBatchDiamondCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailRevenue_HandleBatchDiamondCommitted) == 0x000008, "Wrong alignment on TLUserWidgetGuildDistributionDetailRevenue_HandleBatchDiamondCommitted");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailRevenue_HandleBatchDiamondCommitted) == 0x000020, "Wrong size on TLUserWidgetGuildDistributionDetailRevenue_HandleBatchDiamondCommitted");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailRevenue_HandleBatchDiamondCommitted, InText) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailRevenue_HandleBatchDiamondCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailRevenue_HandleBatchDiamondCommitted, InCommitType) == 0x000018, "Member 'TLUserWidgetGuildDistributionDetailRevenue_HandleBatchDiamondCommitted::InCommitType' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionDetailRevenue.OnItemSlotUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildDistributionDetailRevenue_OnItemSlotUpdate final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionDetailRevenue_OnItemSlotUpdate) == 0x000001, "Wrong alignment on TLUserWidgetGuildDistributionDetailRevenue_OnItemSlotUpdate");
static_assert(sizeof(TLUserWidgetGuildDistributionDetailRevenue_OnItemSlotUpdate) == 0x000001, "Wrong size on TLUserWidgetGuildDistributionDetailRevenue_OnItemSlotUpdate");
static_assert(offsetof(TLUserWidgetGuildDistributionDetailRevenue_OnItemSlotUpdate, InIsShow) == 0x000000, "Member 'TLUserWidgetGuildDistributionDetailRevenue_OnItemSlotUpdate::InIsShow' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionRevenueItem.OnItemSlotUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildDistributionRevenueItem_OnItemSlotUpdate final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionRevenueItem_OnItemSlotUpdate) == 0x000001, "Wrong alignment on TLUserWidgetGuildDistributionRevenueItem_OnItemSlotUpdate");
static_assert(sizeof(TLUserWidgetGuildDistributionRevenueItem_OnItemSlotUpdate) == 0x000001, "Wrong size on TLUserWidgetGuildDistributionRevenueItem_OnItemSlotUpdate");
static_assert(offsetof(TLUserWidgetGuildDistributionRevenueItem_OnItemSlotUpdate, InIsShow) == 0x000000, "Member 'TLUserWidgetGuildDistributionRevenueItem_OnItemSlotUpdate::InIsShow' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionStorageItem.OnAcquireItemMine
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildDistributionStorageItem_OnAcquireItemMine final
{
public:
	bool                                          InIsMine;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionStorageItem_OnAcquireItemMine) == 0x000001, "Wrong alignment on TLUserWidgetGuildDistributionStorageItem_OnAcquireItemMine");
static_assert(sizeof(TLUserWidgetGuildDistributionStorageItem_OnAcquireItemMine) == 0x000001, "Wrong size on TLUserWidgetGuildDistributionStorageItem_OnAcquireItemMine");
static_assert(offsetof(TLUserWidgetGuildDistributionStorageItem_OnAcquireItemMine, InIsMine) == 0x000000, "Member 'TLUserWidgetGuildDistributionStorageItem_OnAcquireItemMine::InIsMine' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDistributionStorageItem.OnDistributionItemState
// 0x0003 (0x0003 - 0x0000)
struct TLUserWidgetGuildDistributionStorageItem_OnDistributionItemState final
{
public:
	EDistibutionItemState                         InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsEnableBuy;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsBuying;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDistributionStorageItem_OnDistributionItemState) == 0x000001, "Wrong alignment on TLUserWidgetGuildDistributionStorageItem_OnDistributionItemState");
static_assert(sizeof(TLUserWidgetGuildDistributionStorageItem_OnDistributionItemState) == 0x000003, "Wrong size on TLUserWidgetGuildDistributionStorageItem_OnDistributionItemState");
static_assert(offsetof(TLUserWidgetGuildDistributionStorageItem_OnDistributionItemState, InState) == 0x000000, "Member 'TLUserWidgetGuildDistributionStorageItem_OnDistributionItemState::InState' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildDistributionStorageItem_OnDistributionItemState, InIsEnableBuy) == 0x000001, "Member 'TLUserWidgetGuildDistributionStorageItem_OnDistributionItemState::InIsEnableBuy' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildDistributionStorageItem_OnDistributionItemState, InIsBuying) == 0x000002, "Member 'TLUserWidgetGuildDistributionStorageItem_OnDistributionItemState::InIsBuying' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDonationPanel.OnOpenPanel
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildDonationPanel_OnOpenPanel final
{
public:
	bool                                          InIsOpen;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDonationPanel_OnOpenPanel) == 0x000001, "Wrong alignment on TLUserWidgetGuildDonationPanel_OnOpenPanel");
static_assert(sizeof(TLUserWidgetGuildDonationPanel_OnOpenPanel) == 0x000001, "Wrong size on TLUserWidgetGuildDonationPanel_OnOpenPanel");
static_assert(offsetof(TLUserWidgetGuildDonationPanel_OnOpenPanel, InIsOpen) == 0x000000, "Member 'TLUserWidgetGuildDonationPanel_OnOpenPanel::InIsOpen' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildDonationPanel.OnUpdateReputationReward
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildDonationPanel_OnUpdateReputationReward final
{
public:
	EGuildReputationRewardState                   InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildDonationPanel_OnUpdateReputationReward) == 0x000001, "Wrong alignment on TLUserWidgetGuildDonationPanel_OnUpdateReputationReward");
static_assert(sizeof(TLUserWidgetGuildDonationPanel_OnUpdateReputationReward) == 0x000001, "Wrong size on TLUserWidgetGuildDonationPanel_OnUpdateReputationReward");
static_assert(offsetof(TLUserWidgetGuildDonationPanel_OnUpdateReputationReward, InState) == 0x000000, "Member 'TLUserWidgetGuildDonationPanel_OnUpdateReputationReward::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetPostWrite.HandleContentsInputChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetPostWrite_HandleContentsInputChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPostWrite_HandleContentsInputChanged) == 0x000008, "Wrong alignment on TLUserWidgetPostWrite_HandleContentsInputChanged");
static_assert(sizeof(TLUserWidgetPostWrite_HandleContentsInputChanged) == 0x000018, "Wrong size on TLUserWidgetPostWrite_HandleContentsInputChanged");
static_assert(offsetof(TLUserWidgetPostWrite_HandleContentsInputChanged, InInputText) == 0x000000, "Member 'TLUserWidgetPostWrite_HandleContentsInputChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetPostWrite.HandleReceiverInputChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetPostWrite_HandleReceiverInputChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPostWrite_HandleReceiverInputChanged) == 0x000008, "Wrong alignment on TLUserWidgetPostWrite_HandleReceiverInputChanged");
static_assert(sizeof(TLUserWidgetPostWrite_HandleReceiverInputChanged) == 0x000018, "Wrong size on TLUserWidgetPostWrite_HandleReceiverInputChanged");
static_assert(offsetof(TLUserWidgetPostWrite_HandleReceiverInputChanged, InInputText) == 0x000000, "Member 'TLUserWidgetPostWrite_HandleReceiverInputChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetPostWrite.HandleReceiverInputCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetPostWrite_HandleReceiverInputCommitted final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetPostWrite_HandleReceiverInputCommitted) == 0x000008, "Wrong alignment on TLUserWidgetPostWrite_HandleReceiverInputCommitted");
static_assert(sizeof(TLUserWidgetPostWrite_HandleReceiverInputCommitted) == 0x000020, "Wrong size on TLUserWidgetPostWrite_HandleReceiverInputCommitted");
static_assert(offsetof(TLUserWidgetPostWrite_HandleReceiverInputCommitted, InInputText) == 0x000000, "Member 'TLUserWidgetPostWrite_HandleReceiverInputCommitted::InInputText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPostWrite_HandleReceiverInputCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetPostWrite_HandleReceiverInputCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetPostWrite.HandleSubjectInputChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetPostWrite_HandleSubjectInputChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPostWrite_HandleSubjectInputChanged) == 0x000008, "Wrong alignment on TLUserWidgetPostWrite_HandleSubjectInputChanged");
static_assert(sizeof(TLUserWidgetPostWrite_HandleSubjectInputChanged) == 0x000018, "Wrong size on TLUserWidgetPostWrite_HandleSubjectInputChanged");
static_assert(offsetof(TLUserWidgetPostWrite_HandleSubjectInputChanged, InInputText) == 0x000000, "Member 'TLUserWidgetPostWrite_HandleSubjectInputChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetPostWrite.HandleSubjectInputCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetPostWrite_HandleSubjectInputCommitted final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetPostWrite_HandleSubjectInputCommitted) == 0x000008, "Wrong alignment on TLUserWidgetPostWrite_HandleSubjectInputCommitted");
static_assert(sizeof(TLUserWidgetPostWrite_HandleSubjectInputCommitted) == 0x000020, "Wrong size on TLUserWidgetPostWrite_HandleSubjectInputCommitted");
static_assert(offsetof(TLUserWidgetPostWrite_HandleSubjectInputCommitted, InInputText) == 0x000000, "Member 'TLUserWidgetPostWrite_HandleSubjectInputCommitted::InInputText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPostWrite_HandleSubjectInputCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetPostWrite_HandleSubjectInputCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetPostWrite.HandleUIContentsInputCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetPostWrite_HandleUIContentsInputCommitted final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetPostWrite_HandleUIContentsInputCommitted) == 0x000008, "Wrong alignment on TLUserWidgetPostWrite_HandleUIContentsInputCommitted");
static_assert(sizeof(TLUserWidgetPostWrite_HandleUIContentsInputCommitted) == 0x000020, "Wrong size on TLUserWidgetPostWrite_HandleUIContentsInputCommitted");
static_assert(offsetof(TLUserWidgetPostWrite_HandleUIContentsInputCommitted, InInputText) == 0x000000, "Member 'TLUserWidgetPostWrite_HandleUIContentsInputCommitted::InInputText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPostWrite_HandleUIContentsInputCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetPostWrite_HandleUIContentsInputCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildList.OnGuildSearchTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetGuildList_OnGuildSearchTextCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetGuildList_OnGuildSearchTextCommitted) == 0x000008, "Wrong alignment on TLUserWidgetGuildList_OnGuildSearchTextCommitted");
static_assert(sizeof(TLUserWidgetGuildList_OnGuildSearchTextCommitted) == 0x000020, "Wrong size on TLUserWidgetGuildList_OnGuildSearchTextCommitted");
static_assert(offsetof(TLUserWidgetGuildList_OnGuildSearchTextCommitted, InText) == 0x000000, "Member 'TLUserWidgetGuildList_OnGuildSearchTextCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildList_OnGuildSearchTextCommitted, InCommitType) == 0x000018, "Member 'TLUserWidgetGuildList_OnGuildSearchTextCommitted::InCommitType' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildMainInfo.OnGuildHomeOpen
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildMainInfo_OnGuildHomeOpen final
{
public:
	bool                                          InHomeOpen;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildMainInfo_OnGuildHomeOpen) == 0x000001, "Wrong alignment on TLUserWidgetGuildMainInfo_OnGuildHomeOpen");
static_assert(sizeof(TLUserWidgetGuildMainInfo_OnGuildHomeOpen) == 0x000001, "Wrong size on TLUserWidgetGuildMainInfo_OnGuildHomeOpen");
static_assert(offsetof(TLUserWidgetGuildMainInfo_OnGuildHomeOpen, InHomeOpen) == 0x000000, "Member 'TLUserWidgetGuildMainInfo_OnGuildHomeOpen::InHomeOpen' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildMainInfo.OnGuildHomeRaidStart
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildMainInfo_OnGuildHomeRaidStart final
{
public:
	bool                                          InStart;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildMainInfo_OnGuildHomeRaidStart) == 0x000001, "Wrong alignment on TLUserWidgetGuildMainInfo_OnGuildHomeRaidStart");
static_assert(sizeof(TLUserWidgetGuildMainInfo_OnGuildHomeRaidStart) == 0x000001, "Wrong size on TLUserWidgetGuildMainInfo_OnGuildHomeRaidStart");
static_assert(offsetof(TLUserWidgetGuildMainInfo_OnGuildHomeRaidStart, InStart) == 0x000000, "Member 'TLUserWidgetGuildMainInfo_OnGuildHomeRaidStart::InStart' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildMainInfo.OnGuildHomeState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildMainInfo_OnGuildHomeState final
{
public:
	EGuildHomeState                               InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildMainInfo_OnGuildHomeState) == 0x000001, "Wrong alignment on TLUserWidgetGuildMainInfo_OnGuildHomeState");
static_assert(sizeof(TLUserWidgetGuildMainInfo_OnGuildHomeState) == 0x000001, "Wrong size on TLUserWidgetGuildMainInfo_OnGuildHomeState");
static_assert(offsetof(TLUserWidgetGuildMainInfo_OnGuildHomeState, InState) == 0x000000, "Member 'TLUserWidgetGuildMainInfo_OnGuildHomeState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildMainInfo.OnIsLegionGuild
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildMainInfo_OnIsLegionGuild final
{
public:
	bool                                          InLegionGuild;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildMainInfo_OnIsLegionGuild) == 0x000001, "Wrong alignment on TLUserWidgetGuildMainInfo_OnIsLegionGuild");
static_assert(sizeof(TLUserWidgetGuildMainInfo_OnIsLegionGuild) == 0x000001, "Wrong size on TLUserWidgetGuildMainInfo_OnIsLegionGuild");
static_assert(offsetof(TLUserWidgetGuildMainInfo_OnIsLegionGuild, InLegionGuild) == 0x000000, "Member 'TLUserWidgetGuildMainInfo_OnIsLegionGuild::InLegionGuild' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildMainInfo.OnUpdateReputationReward
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildMainInfo_OnUpdateReputationReward final
{
public:
	EGuildReputationRewardState                   InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildMainInfo_OnUpdateReputationReward) == 0x000001, "Wrong alignment on TLUserWidgetGuildMainInfo_OnUpdateReputationReward");
static_assert(sizeof(TLUserWidgetGuildMainInfo_OnUpdateReputationReward) == 0x000001, "Wrong size on TLUserWidgetGuildMainInfo_OnUpdateReputationReward");
static_assert(offsetof(TLUserWidgetGuildMainInfo_OnUpdateReputationReward, InState) == 0x000000, "Member 'TLUserWidgetGuildMainInfo_OnUpdateReputationReward::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapListItemBase.HandleClickedMainBtn
// 0x0070 (0x0070 - 0x0000)
struct TLUserWidgetWorldMapListItemBase_HandleClickedMainBtn final
{
public:
	struct FPointerEvent                          InPointerEvent;                                    // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapListItemBase_HandleClickedMainBtn) == 0x000008, "Wrong alignment on TLUserWidgetWorldMapListItemBase_HandleClickedMainBtn");
static_assert(sizeof(TLUserWidgetWorldMapListItemBase_HandleClickedMainBtn) == 0x000070, "Wrong size on TLUserWidgetWorldMapListItemBase_HandleClickedMainBtn");
static_assert(offsetof(TLUserWidgetWorldMapListItemBase_HandleClickedMainBtn, InPointerEvent) == 0x000000, "Member 'TLUserWidgetWorldMapListItemBase_HandleClickedMainBtn::InPointerEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapListItemBase.HandleFoldingBtnChecked
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWorldMapListItemBase_HandleFoldingBtnChecked final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapListItemBase_HandleFoldingBtnChecked) == 0x000001, "Wrong alignment on TLUserWidgetWorldMapListItemBase_HandleFoldingBtnChecked");
static_assert(sizeof(TLUserWidgetWorldMapListItemBase_HandleFoldingBtnChecked) == 0x000001, "Wrong size on TLUserWidgetWorldMapListItemBase_HandleFoldingBtnChecked");
static_assert(offsetof(TLUserWidgetWorldMapListItemBase_HandleFoldingBtnChecked, bIsChecked) == 0x000000, "Member 'TLUserWidgetWorldMapListItemBase_HandleFoldingBtnChecked::bIsChecked' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapListItemBase.OnContractUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWorldMapListItemBase_OnContractUpdate final
{
public:
	bool                                          IsActiveArea;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapListItemBase_OnContractUpdate) == 0x000001, "Wrong alignment on TLUserWidgetWorldMapListItemBase_OnContractUpdate");
static_assert(sizeof(TLUserWidgetWorldMapListItemBase_OnContractUpdate) == 0x000001, "Wrong size on TLUserWidgetWorldMapListItemBase_OnContractUpdate");
static_assert(offsetof(TLUserWidgetWorldMapListItemBase_OnContractUpdate, IsActiveArea) == 0x000000, "Member 'TLUserWidgetWorldMapListItemBase_OnContractUpdate::IsActiveArea' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapListItemBase.OnUnLockMemorial
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWorldMapListItemBase_OnUnLockMemorial final
{
public:
	bool                                          IsUnLock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapListItemBase_OnUnLockMemorial) == 0x000001, "Wrong alignment on TLUserWidgetWorldMapListItemBase_OnUnLockMemorial");
static_assert(sizeof(TLUserWidgetWorldMapListItemBase_OnUnLockMemorial) == 0x000001, "Wrong size on TLUserWidgetWorldMapListItemBase_OnUnLockMemorial");
static_assert(offsetof(TLUserWidgetWorldMapListItemBase_OnUnLockMemorial, IsUnLock) == 0x000000, "Member 'TLUserWidgetWorldMapListItemBase_OnUnLockMemorial::IsUnLock' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapListItemBase.OnUpdateGuildContract
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWorldMapListItemBase_OnUpdateGuildContract final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapListItemBase_OnUpdateGuildContract) == 0x000001, "Wrong alignment on TLUserWidgetWorldMapListItemBase_OnUpdateGuildContract");
static_assert(sizeof(TLUserWidgetWorldMapListItemBase_OnUpdateGuildContract) == 0x000001, "Wrong size on TLUserWidgetWorldMapListItemBase_OnUpdateGuildContract");
static_assert(offsetof(TLUserWidgetWorldMapListItemBase_OnUpdateGuildContract, IsActive) == 0x000000, "Member 'TLUserWidgetWorldMapListItemBase_OnUpdateGuildContract::IsActive' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapListItemBase.OnUpdateTreasureBox
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWorldMapListItemBase_OnUpdateTreasureBox final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapListItemBase_OnUpdateTreasureBox) == 0x000001, "Wrong alignment on TLUserWidgetWorldMapListItemBase_OnUpdateTreasureBox");
static_assert(sizeof(TLUserWidgetWorldMapListItemBase_OnUpdateTreasureBox) == 0x000001, "Wrong size on TLUserWidgetWorldMapListItemBase_OnUpdateTreasureBox");
static_assert(offsetof(TLUserWidgetWorldMapListItemBase_OnUpdateTreasureBox, IsActive) == 0x000000, "Member 'TLUserWidgetWorldMapListItemBase_OnUpdateTreasureBox::IsActive' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapListItemRegionGroup.HandleSearchKeywordChange
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetWorldMapListItemRegionGroup_HandleSearchKeywordChange final
{
public:
	class FText                                   InSearchKeyword;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EWorldMapListSearchType                       InSearchType;                                      // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetWorldMapListItemRegionGroup_HandleSearchKeywordChange) == 0x000008, "Wrong alignment on TLUserWidgetWorldMapListItemRegionGroup_HandleSearchKeywordChange");
static_assert(sizeof(TLUserWidgetWorldMapListItemRegionGroup_HandleSearchKeywordChange) == 0x000020, "Wrong size on TLUserWidgetWorldMapListItemRegionGroup_HandleSearchKeywordChange");
static_assert(offsetof(TLUserWidgetWorldMapListItemRegionGroup_HandleSearchKeywordChange, InSearchKeyword) == 0x000000, "Member 'TLUserWidgetWorldMapListItemRegionGroup_HandleSearchKeywordChange::InSearchKeyword' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWorldMapListItemRegionGroup_HandleSearchKeywordChange, InSearchType) == 0x000018, "Member 'TLUserWidgetWorldMapListItemRegionGroup_HandleSearchKeywordChange::InSearchType' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapListItemRegionGroup.HandleSearchSpeciesChange
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetWorldMapListItemRegionGroup_HandleSearchSpeciesChange final
{
public:
	TArray<uint64>                                InRegionGroupId;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapListItemRegionGroup_HandleSearchSpeciesChange) == 0x000008, "Wrong alignment on TLUserWidgetWorldMapListItemRegionGroup_HandleSearchSpeciesChange");
static_assert(sizeof(TLUserWidgetWorldMapListItemRegionGroup_HandleSearchSpeciesChange) == 0x000010, "Wrong size on TLUserWidgetWorldMapListItemRegionGroup_HandleSearchSpeciesChange");
static_assert(offsetof(TLUserWidgetWorldMapListItemRegionGroup_HandleSearchSpeciesChange, InRegionGroupId) == 0x000000, "Member 'TLUserWidgetWorldMapListItemRegionGroup_HandleSearchSpeciesChange::InRegionGroupId' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildManagementOptionGroup.OnEditPasswordChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetGuildManagementOptionGroup_OnEditPasswordChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildManagementOptionGroup_OnEditPasswordChanged) == 0x000008, "Wrong alignment on TLUserWidgetGuildManagementOptionGroup_OnEditPasswordChanged");
static_assert(sizeof(TLUserWidgetGuildManagementOptionGroup_OnEditPasswordChanged) == 0x000018, "Wrong size on TLUserWidgetGuildManagementOptionGroup_OnEditPasswordChanged");
static_assert(offsetof(TLUserWidgetGuildManagementOptionGroup_OnEditPasswordChanged, InText) == 0x000000, "Member 'TLUserWidgetGuildManagementOptionGroup_OnEditPasswordChanged::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildManagementOptionGroup.OnEditPasswordCommited
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetGuildManagementOptionGroup_OnEditPasswordCommited final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetGuildManagementOptionGroup_OnEditPasswordCommited) == 0x000008, "Wrong alignment on TLUserWidgetGuildManagementOptionGroup_OnEditPasswordCommited");
static_assert(sizeof(TLUserWidgetGuildManagementOptionGroup_OnEditPasswordCommited) == 0x000020, "Wrong size on TLUserWidgetGuildManagementOptionGroup_OnEditPasswordCommited");
static_assert(offsetof(TLUserWidgetGuildManagementOptionGroup_OnEditPasswordCommited, InText) == 0x000000, "Member 'TLUserWidgetGuildManagementOptionGroup_OnEditPasswordCommited::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildManagementOptionGroup_OnEditPasswordCommited, InCommitMethod) == 0x000018, "Member 'TLUserWidgetGuildManagementOptionGroup_OnEditPasswordCommited::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildManagementOptionGroup.OnInputIntroductionTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetGuildManagementOptionGroup_OnInputIntroductionTextChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildManagementOptionGroup_OnInputIntroductionTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetGuildManagementOptionGroup_OnInputIntroductionTextChanged");
static_assert(sizeof(TLUserWidgetGuildManagementOptionGroup_OnInputIntroductionTextChanged) == 0x000018, "Wrong size on TLUserWidgetGuildManagementOptionGroup_OnInputIntroductionTextChanged");
static_assert(offsetof(TLUserWidgetGuildManagementOptionGroup_OnInputIntroductionTextChanged, InInputText) == 0x000000, "Member 'TLUserWidgetGuildManagementOptionGroup_OnInputIntroductionTextChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildManagementOptionGroup.OnInputNoticeTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetGuildManagementOptionGroup_OnInputNoticeTextChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildManagementOptionGroup_OnInputNoticeTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetGuildManagementOptionGroup_OnInputNoticeTextChanged");
static_assert(sizeof(TLUserWidgetGuildManagementOptionGroup_OnInputNoticeTextChanged) == 0x000018, "Wrong size on TLUserWidgetGuildManagementOptionGroup_OnInputNoticeTextChanged");
static_assert(offsetof(TLUserWidgetGuildManagementOptionGroup_OnInputNoticeTextChanged, InInputText) == 0x000000, "Member 'TLUserWidgetGuildManagementOptionGroup_OnInputNoticeTextChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetPcRelationshipFavoritePanel.OnUpdateItemCount
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPcRelationshipFavoritePanel_OnUpdateItemCount final
{
public:
	bool                                          bInIsMaxCount;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPcRelationshipFavoritePanel_OnUpdateItemCount) == 0x000001, "Wrong alignment on TLUserWidgetPcRelationshipFavoritePanel_OnUpdateItemCount");
static_assert(sizeof(TLUserWidgetPcRelationshipFavoritePanel_OnUpdateItemCount) == 0x000001, "Wrong size on TLUserWidgetPcRelationshipFavoritePanel_OnUpdateItemCount");
static_assert(offsetof(TLUserWidgetPcRelationshipFavoritePanel_OnUpdateItemCount, bInIsMaxCount) == 0x000000, "Member 'TLUserWidgetPcRelationshipFavoritePanel_OnUpdateItemCount::bInIsMaxCount' has a wrong offset!");

// Function TLClient.TLUserWidgetPcRelationshipFavoritePanel.OnUpdatePcRelationshipType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPcRelationshipFavoritePanel_OnUpdatePcRelationshipType final
{
public:
	ETLPcRelationshipType                         InPcRelationshipType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPcRelationshipFavoritePanel_OnUpdatePcRelationshipType) == 0x000001, "Wrong alignment on TLUserWidgetPcRelationshipFavoritePanel_OnUpdatePcRelationshipType");
static_assert(sizeof(TLUserWidgetPcRelationshipFavoritePanel_OnUpdatePcRelationshipType) == 0x000001, "Wrong size on TLUserWidgetPcRelationshipFavoritePanel_OnUpdatePcRelationshipType");
static_assert(offsetof(TLUserWidgetPcRelationshipFavoritePanel_OnUpdatePcRelationshipType, InPcRelationshipType) == 0x000000, "Member 'TLUserWidgetPcRelationshipFavoritePanel_OnUpdatePcRelationshipType::InPcRelationshipType' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapList.HandleFocusEditBox
// 0x0040 (0x0040 - 0x0000)
struct TLUserWidgetWorldMapList_HandleFocusEditBox final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapList_HandleFocusEditBox) == 0x000004, "Wrong alignment on TLUserWidgetWorldMapList_HandleFocusEditBox");
static_assert(sizeof(TLUserWidgetWorldMapList_HandleFocusEditBox) == 0x000040, "Wrong size on TLUserWidgetWorldMapList_HandleFocusEditBox");
static_assert(offsetof(TLUserWidgetWorldMapList_HandleFocusEditBox, MyGeometry) == 0x000000, "Member 'TLUserWidgetWorldMapList_HandleFocusEditBox::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWorldMapList_HandleFocusEditBox, InFocusEvent) == 0x000038, "Member 'TLUserWidgetWorldMapList_HandleFocusEditBox::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapList.HandleLostFocusEditBox
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetWorldMapList_HandleLostFocusEditBox final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapList_HandleLostFocusEditBox) == 0x000004, "Wrong alignment on TLUserWidgetWorldMapList_HandleLostFocusEditBox");
static_assert(sizeof(TLUserWidgetWorldMapList_HandleLostFocusEditBox) == 0x000008, "Wrong size on TLUserWidgetWorldMapList_HandleLostFocusEditBox");
static_assert(offsetof(TLUserWidgetWorldMapList_HandleLostFocusEditBox, InFocusEvent) == 0x000000, "Member 'TLUserWidgetWorldMapList_HandleLostFocusEditBox::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapList.HandleSearchTypeChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetWorldMapList_HandleSearchTypeChanged final
{
public:
	class FString                                 OptionString;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectType;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetWorldMapList_HandleSearchTypeChanged) == 0x000008, "Wrong alignment on TLUserWidgetWorldMapList_HandleSearchTypeChanged");
static_assert(sizeof(TLUserWidgetWorldMapList_HandleSearchTypeChanged) == 0x000018, "Wrong size on TLUserWidgetWorldMapList_HandleSearchTypeChanged");
static_assert(offsetof(TLUserWidgetWorldMapList_HandleSearchTypeChanged, OptionString) == 0x000000, "Member 'TLUserWidgetWorldMapList_HandleSearchTypeChanged::OptionString' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWorldMapList_HandleSearchTypeChanged, SelectType) == 0x000010, "Member 'TLUserWidgetWorldMapList_HandleSearchTypeChanged::SelectType' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapList.HandleSpeciesTypeChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetWorldMapList_HandleSpeciesTypeChanged final
{
public:
	class FString                                 OptionString;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectType;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetWorldMapList_HandleSpeciesTypeChanged) == 0x000008, "Wrong alignment on TLUserWidgetWorldMapList_HandleSpeciesTypeChanged");
static_assert(sizeof(TLUserWidgetWorldMapList_HandleSpeciesTypeChanged) == 0x000018, "Wrong size on TLUserWidgetWorldMapList_HandleSpeciesTypeChanged");
static_assert(offsetof(TLUserWidgetWorldMapList_HandleSpeciesTypeChanged, OptionString) == 0x000000, "Member 'TLUserWidgetWorldMapList_HandleSpeciesTypeChanged::OptionString' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWorldMapList_HandleSpeciesTypeChanged, SelectType) == 0x000010, "Member 'TLUserWidgetWorldMapList_HandleSpeciesTypeChanged::SelectType' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapList.HandleTextInputCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetWorldMapList_HandleTextInputCommitted final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetWorldMapList_HandleTextInputCommitted) == 0x000008, "Wrong alignment on TLUserWidgetWorldMapList_HandleTextInputCommitted");
static_assert(sizeof(TLUserWidgetWorldMapList_HandleTextInputCommitted) == 0x000020, "Wrong size on TLUserWidgetWorldMapList_HandleTextInputCommitted");
static_assert(offsetof(TLUserWidgetWorldMapList_HandleTextInputCommitted, InInputText) == 0x000000, "Member 'TLUserWidgetWorldMapList_HandleTextInputCommitted::InInputText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWorldMapList_HandleTextInputCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetWorldMapList_HandleTextInputCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapRegionInfo.OnSelectedNpcSlot
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetWorldMapRegionInfo_OnSelectedNpcSlot final
{
public:
	class FName                                   InNpcRadeId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapRegionInfo_OnSelectedNpcSlot) == 0x000004, "Wrong alignment on TLUserWidgetWorldMapRegionInfo_OnSelectedNpcSlot");
static_assert(sizeof(TLUserWidgetWorldMapRegionInfo_OnSelectedNpcSlot) == 0x000008, "Wrong size on TLUserWidgetWorldMapRegionInfo_OnSelectedNpcSlot");
static_assert(offsetof(TLUserWidgetWorldMapRegionInfo_OnSelectedNpcSlot, InNpcRadeId) == 0x000000, "Member 'TLUserWidgetWorldMapRegionInfo_OnSelectedNpcSlot::InNpcRadeId' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapRegionInfo.OnUpdateActivePoint
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetWorldMapRegionInfo_OnUpdateActivePoint final
{
public:
	int32                                         InActivePoint;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapRegionInfo_OnUpdateActivePoint) == 0x000004, "Wrong alignment on TLUserWidgetWorldMapRegionInfo_OnUpdateActivePoint");
static_assert(sizeof(TLUserWidgetWorldMapRegionInfo_OnUpdateActivePoint) == 0x000004, "Wrong size on TLUserWidgetWorldMapRegionInfo_OnUpdateActivePoint");
static_assert(offsetof(TLUserWidgetWorldMapRegionInfo_OnUpdateActivePoint, InActivePoint) == 0x000000, "Member 'TLUserWidgetWorldMapRegionInfo_OnUpdateActivePoint::InActivePoint' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildOccupationItem.OnBossSpawned
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildOccupationItem_OnBossSpawned final
{
public:
	bool                                          IsSpawned;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildOccupationItem_OnBossSpawned) == 0x000001, "Wrong alignment on TLUserWidgetGuildOccupationItem_OnBossSpawned");
static_assert(sizeof(TLUserWidgetGuildOccupationItem_OnBossSpawned) == 0x000001, "Wrong size on TLUserWidgetGuildOccupationItem_OnBossSpawned");
static_assert(offsetof(TLUserWidgetGuildOccupationItem_OnBossSpawned, IsSpawned) == 0x000000, "Member 'TLUserWidgetGuildOccupationItem_OnBossSpawned::IsSpawned' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildOccupationItem.SetLock
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildOccupationItem_SetLock final
{
public:
	bool                                          IsLock;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildOccupationItem_SetLock) == 0x000001, "Wrong alignment on TLUserWidgetGuildOccupationItem_SetLock");
static_assert(sizeof(TLUserWidgetGuildOccupationItem_SetLock) == 0x000001, "Wrong size on TLUserWidgetGuildOccupationItem_SetLock");
static_assert(offsetof(TLUserWidgetGuildOccupationItem_SetLock, IsLock) == 0x000000, "Member 'TLUserWidgetGuildOccupationItem_SetLock::IsLock' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapPinList.GetContextMenuWidget
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetWorldMapPinList_GetContextMenuWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapPinList_GetContextMenuWidget) == 0x000008, "Wrong alignment on TLUserWidgetWorldMapPinList_GetContextMenuWidget");
static_assert(sizeof(TLUserWidgetWorldMapPinList_GetContextMenuWidget) == 0x000008, "Wrong size on TLUserWidgetWorldMapPinList_GetContextMenuWidget");
static_assert(offsetof(TLUserWidgetWorldMapPinList_GetContextMenuWidget, ReturnValue) == 0x000000, "Member 'TLUserWidgetWorldMapPinList_GetContextMenuWidget::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildOccupation.OnBossStoneUnLockMemorial
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildOccupation_OnBossStoneUnLockMemorial final
{
public:
	bool                                          IsUnLock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildOccupation_OnBossStoneUnLockMemorial) == 0x000001, "Wrong alignment on TLUserWidgetGuildOccupation_OnBossStoneUnLockMemorial");
static_assert(sizeof(TLUserWidgetGuildOccupation_OnBossStoneUnLockMemorial) == 0x000001, "Wrong size on TLUserWidgetGuildOccupation_OnBossStoneUnLockMemorial");
static_assert(offsetof(TLUserWidgetGuildOccupation_OnBossStoneUnLockMemorial, IsUnLock) == 0x000000, "Member 'TLUserWidgetGuildOccupation_OnBossStoneUnLockMemorial::IsUnLock' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildOccupation.OnRegionStoneUnLockMemorial
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildOccupation_OnRegionStoneUnLockMemorial final
{
public:
	bool                                          IsUnLock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildOccupation_OnRegionStoneUnLockMemorial) == 0x000001, "Wrong alignment on TLUserWidgetGuildOccupation_OnRegionStoneUnLockMemorial");
static_assert(sizeof(TLUserWidgetGuildOccupation_OnRegionStoneUnLockMemorial) == 0x000001, "Wrong size on TLUserWidgetGuildOccupation_OnRegionStoneUnLockMemorial");
static_assert(offsetof(TLUserWidgetGuildOccupation_OnRegionStoneUnLockMemorial, IsUnLock) == 0x000000, "Member 'TLUserWidgetGuildOccupation_OnRegionStoneUnLockMemorial::IsUnLock' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildOccupation.OnUpdateEffectCount
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetGuildOccupation_OnUpdateEffectCount final
{
public:
	int32                                         InEffectCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildOccupation_OnUpdateEffectCount) == 0x000004, "Wrong alignment on TLUserWidgetGuildOccupation_OnUpdateEffectCount");
static_assert(sizeof(TLUserWidgetGuildOccupation_OnUpdateEffectCount) == 0x000004, "Wrong size on TLUserWidgetGuildOccupation_OnUpdateEffectCount");
static_assert(offsetof(TLUserWidgetGuildOccupation_OnUpdateEffectCount, InEffectCount) == 0x000000, "Member 'TLUserWidgetGuildOccupation_OnUpdateEffectCount::InEffectCount' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildOccupation.OnUpdateOnboardingMessage
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildOccupation_OnUpdateOnboardingMessage final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildOccupation_OnUpdateOnboardingMessage) == 0x000001, "Wrong alignment on TLUserWidgetGuildOccupation_OnUpdateOnboardingMessage");
static_assert(sizeof(TLUserWidgetGuildOccupation_OnUpdateOnboardingMessage) == 0x000001, "Wrong size on TLUserWidgetGuildOccupation_OnUpdateOnboardingMessage");
static_assert(offsetof(TLUserWidgetGuildOccupation_OnUpdateOnboardingMessage, InIsShow) == 0x000000, "Member 'TLUserWidgetGuildOccupation_OnUpdateOnboardingMessage::InIsShow' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildOccupation.OnUpdateOnboardingMessageResource
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildOccupation_OnUpdateOnboardingMessageResource final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildOccupation_OnUpdateOnboardingMessageResource) == 0x000001, "Wrong alignment on TLUserWidgetGuildOccupation_OnUpdateOnboardingMessageResource");
static_assert(sizeof(TLUserWidgetGuildOccupation_OnUpdateOnboardingMessageResource) == 0x000001, "Wrong size on TLUserWidgetGuildOccupation_OnUpdateOnboardingMessageResource");
static_assert(offsetof(TLUserWidgetGuildOccupation_OnUpdateOnboardingMessageResource, InIsShow) == 0x000000, "Member 'TLUserWidgetGuildOccupation_OnUpdateOnboardingMessageResource::InIsShow' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildOccupation.OnUpdateOnboardingMessageStat
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildOccupation_OnUpdateOnboardingMessageStat final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildOccupation_OnUpdateOnboardingMessageStat) == 0x000001, "Wrong alignment on TLUserWidgetGuildOccupation_OnUpdateOnboardingMessageStat");
static_assert(sizeof(TLUserWidgetGuildOccupation_OnUpdateOnboardingMessageStat) == 0x000001, "Wrong size on TLUserWidgetGuildOccupation_OnUpdateOnboardingMessageStat");
static_assert(offsetof(TLUserWidgetGuildOccupation_OnUpdateOnboardingMessageStat, InIsShow) == 0x000000, "Member 'TLUserWidgetGuildOccupation_OnUpdateOnboardingMessageStat::InIsShow' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildOccupation.SetActiveMyCastleSlot
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildOccupation_SetActiveMyCastleSlot final
{
public:
	bool                                          IsShowCastle;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildOccupation_SetActiveMyCastleSlot) == 0x000001, "Wrong alignment on TLUserWidgetGuildOccupation_SetActiveMyCastleSlot");
static_assert(sizeof(TLUserWidgetGuildOccupation_SetActiveMyCastleSlot) == 0x000001, "Wrong size on TLUserWidgetGuildOccupation_SetActiveMyCastleSlot");
static_assert(offsetof(TLUserWidgetGuildOccupation_SetActiveMyCastleSlot, IsShowCastle) == 0x000000, "Member 'TLUserWidgetGuildOccupation_SetActiveMyCastleSlot::IsShowCastle' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxTextInput.OnInputTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetMsgBoxTextInput_OnInputTextChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxTextInput_OnInputTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetMsgBoxTextInput_OnInputTextChanged");
static_assert(sizeof(TLUserWidgetMsgBoxTextInput_OnInputTextChanged) == 0x000018, "Wrong size on TLUserWidgetMsgBoxTextInput_OnInputTextChanged");
static_assert(offsetof(TLUserWidgetMsgBoxTextInput_OnInputTextChanged, InInputText) == 0x000000, "Member 'TLUserWidgetMsgBoxTextInput_OnInputTextChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxTextInput.OnInputTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetMsgBoxTextInput_OnInputTextCommitted final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetMsgBoxTextInput_OnInputTextCommitted) == 0x000008, "Wrong alignment on TLUserWidgetMsgBoxTextInput_OnInputTextCommitted");
static_assert(sizeof(TLUserWidgetMsgBoxTextInput_OnInputTextCommitted) == 0x000020, "Wrong size on TLUserWidgetMsgBoxTextInput_OnInputTextCommitted");
static_assert(offsetof(TLUserWidgetMsgBoxTextInput_OnInputTextCommitted, InInputText) == 0x000000, "Member 'TLUserWidgetMsgBoxTextInput_OnInputTextCommitted::InInputText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxTextInput_OnInputTextCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetMsgBoxTextInput_OnInputTextCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildRaid.OnCreatureRank
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildRaid_OnCreatureRank final
{
public:
	ETLCreatureRank                               InRank;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildRaid_OnCreatureRank) == 0x000001, "Wrong alignment on TLUserWidgetGuildRaid_OnCreatureRank");
static_assert(sizeof(TLUserWidgetGuildRaid_OnCreatureRank) == 0x000001, "Wrong size on TLUserWidgetGuildRaid_OnCreatureRank");
static_assert(offsetof(TLUserWidgetGuildRaid_OnCreatureRank, InRank) == 0x000000, "Member 'TLUserWidgetGuildRaid_OnCreatureRank::InRank' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildRaid.OnRaidButtonState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildRaid_OnRaidButtonState final
{
public:
	EGuildRaidButtonState                         InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildRaid_OnRaidButtonState) == 0x000001, "Wrong alignment on TLUserWidgetGuildRaid_OnRaidButtonState");
static_assert(sizeof(TLUserWidgetGuildRaid_OnRaidButtonState) == 0x000001, "Wrong size on TLUserWidgetGuildRaid_OnRaidButtonState");
static_assert(offsetof(TLUserWidgetGuildRaid_OnRaidButtonState, InState) == 0x000000, "Member 'TLUserWidgetGuildRaid_OnRaidButtonState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildRaid.OnRewardClosed
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildRaid_OnRewardClosed final
{
public:
	bool                                          InEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildRaid_OnRewardClosed) == 0x000001, "Wrong alignment on TLUserWidgetGuildRaid_OnRewardClosed");
static_assert(sizeof(TLUserWidgetGuildRaid_OnRewardClosed) == 0x000001, "Wrong size on TLUserWidgetGuildRaid_OnRewardClosed");
static_assert(offsetof(TLUserWidgetGuildRaid_OnRewardClosed, InEnable) == 0x000000, "Member 'TLUserWidgetGuildRaid_OnRewardClosed::InEnable' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildRaid.OnShowErrorMsg
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildRaid_OnShowErrorMsg final
{
public:
	EGuildRaidErrorCode                           InErrorCode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildRaid_OnShowErrorMsg) == 0x000001, "Wrong alignment on TLUserWidgetGuildRaid_OnShowErrorMsg");
static_assert(sizeof(TLUserWidgetGuildRaid_OnShowErrorMsg) == 0x000001, "Wrong size on TLUserWidgetGuildRaid_OnShowErrorMsg");
static_assert(offsetof(TLUserWidgetGuildRaid_OnShowErrorMsg, InErrorCode) == 0x000000, "Member 'TLUserWidgetGuildRaid_OnShowErrorMsg::InErrorCode' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildRaidSlot.GetIsSelectRaid
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildRaidSlot_GetIsSelectRaid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildRaidSlot_GetIsSelectRaid) == 0x000001, "Wrong alignment on TLUserWidgetGuildRaidSlot_GetIsSelectRaid");
static_assert(sizeof(TLUserWidgetGuildRaidSlot_GetIsSelectRaid) == 0x000001, "Wrong size on TLUserWidgetGuildRaidSlot_GetIsSelectRaid");
static_assert(offsetof(TLUserWidgetGuildRaidSlot_GetIsSelectRaid, ReturnValue) == 0x000000, "Member 'TLUserWidgetGuildRaidSlot_GetIsSelectRaid::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildRaidSlot.GetIsSlotLock
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildRaidSlot_GetIsSlotLock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildRaidSlot_GetIsSlotLock) == 0x000001, "Wrong alignment on TLUserWidgetGuildRaidSlot_GetIsSlotLock");
static_assert(sizeof(TLUserWidgetGuildRaidSlot_GetIsSlotLock) == 0x000001, "Wrong size on TLUserWidgetGuildRaidSlot_GetIsSlotLock");
static_assert(offsetof(TLUserWidgetGuildRaidSlot_GetIsSlotLock, ReturnValue) == 0x000000, "Member 'TLUserWidgetGuildRaidSlot_GetIsSlotLock::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildRaidSlot.OnCreatureRank
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildRaidSlot_OnCreatureRank final
{
public:
	ETLCreatureRank                               InRank;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildRaidSlot_OnCreatureRank) == 0x000001, "Wrong alignment on TLUserWidgetGuildRaidSlot_OnCreatureRank");
static_assert(sizeof(TLUserWidgetGuildRaidSlot_OnCreatureRank) == 0x000001, "Wrong size on TLUserWidgetGuildRaidSlot_OnCreatureRank");
static_assert(offsetof(TLUserWidgetGuildRaidSlot_OnCreatureRank, InRank) == 0x000000, "Member 'TLUserWidgetGuildRaidSlot_OnCreatureRank::InRank' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildRaidSlot.OnRaidState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildRaidSlot_OnRaidState final
{
public:
	EGuildRaidState                               InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildRaidSlot_OnRaidState) == 0x000001, "Wrong alignment on TLUserWidgetGuildRaidSlot_OnRaidState");
static_assert(sizeof(TLUserWidgetGuildRaidSlot_OnRaidState) == 0x000001, "Wrong size on TLUserWidgetGuildRaidSlot_OnRaidState");
static_assert(offsetof(TLUserWidgetGuildRaidSlot_OnRaidState, InState) == 0x000000, "Member 'TLUserWidgetGuildRaidSlot_OnRaidState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetTimeTableAlarmHud.GetNextAlarm
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTimeTableAlarmHud_GetNextAlarm final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTimeTableAlarmHud_GetNextAlarm) == 0x000001, "Wrong alignment on TLUserWidgetTimeTableAlarmHud_GetNextAlarm");
static_assert(sizeof(TLUserWidgetTimeTableAlarmHud_GetNextAlarm) == 0x000001, "Wrong size on TLUserWidgetTimeTableAlarmHud_GetNextAlarm");
static_assert(offsetof(TLUserWidgetTimeTableAlarmHud_GetNextAlarm, ReturnValue) == 0x000000, "Member 'TLUserWidgetTimeTableAlarmHud_GetNextAlarm::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetTimeTableAlarmHud.OnUpdateScheduleType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTimeTableAlarmHud_OnUpdateScheduleType final
{
public:
	ETLEventScheduleType                          InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTimeTableAlarmHud_OnUpdateScheduleType) == 0x000001, "Wrong alignment on TLUserWidgetTimeTableAlarmHud_OnUpdateScheduleType");
static_assert(sizeof(TLUserWidgetTimeTableAlarmHud_OnUpdateScheduleType) == 0x000001, "Wrong size on TLUserWidgetTimeTableAlarmHud_OnUpdateScheduleType");
static_assert(offsetof(TLUserWidgetTimeTableAlarmHud_OnUpdateScheduleType, InType) == 0x000000, "Member 'TLUserWidgetTimeTableAlarmHud_OnUpdateScheduleType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetTimeTableAlarmHud.SetAlarmAnimation
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTimeTableAlarmHud_SetAlarmAnimation final
{
public:
	bool                                          InOn;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTimeTableAlarmHud_SetAlarmAnimation) == 0x000001, "Wrong alignment on TLUserWidgetTimeTableAlarmHud_SetAlarmAnimation");
static_assert(sizeof(TLUserWidgetTimeTableAlarmHud_SetAlarmAnimation) == 0x000001, "Wrong size on TLUserWidgetTimeTableAlarmHud_SetAlarmAnimation");
static_assert(offsetof(TLUserWidgetTimeTableAlarmHud_SetAlarmAnimation, InOn) == 0x000000, "Member 'TLUserWidgetTimeTableAlarmHud_SetAlarmAnimation::InOn' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildRelationList.OnGuildSearchFocusLost
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetGuildRelationList_OnGuildSearchFocusLost final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildRelationList_OnGuildSearchFocusLost) == 0x000004, "Wrong alignment on TLUserWidgetGuildRelationList_OnGuildSearchFocusLost");
static_assert(sizeof(TLUserWidgetGuildRelationList_OnGuildSearchFocusLost) == 0x000008, "Wrong size on TLUserWidgetGuildRelationList_OnGuildSearchFocusLost");
static_assert(offsetof(TLUserWidgetGuildRelationList_OnGuildSearchFocusLost, InFocusEvent) == 0x000000, "Member 'TLUserWidgetGuildRelationList_OnGuildSearchFocusLost::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildRelationList.OnGuildSearchFocusReceived
// 0x0040 (0x0040 - 0x0000)
struct TLUserWidgetGuildRelationList_OnGuildSearchFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildRelationList_OnGuildSearchFocusReceived) == 0x000004, "Wrong alignment on TLUserWidgetGuildRelationList_OnGuildSearchFocusReceived");
static_assert(sizeof(TLUserWidgetGuildRelationList_OnGuildSearchFocusReceived) == 0x000040, "Wrong size on TLUserWidgetGuildRelationList_OnGuildSearchFocusReceived");
static_assert(offsetof(TLUserWidgetGuildRelationList_OnGuildSearchFocusReceived, MyGeometry) == 0x000000, "Member 'TLUserWidgetGuildRelationList_OnGuildSearchFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildRelationList_OnGuildSearchFocusReceived, InFocusEvent) == 0x000038, "Member 'TLUserWidgetGuildRelationList_OnGuildSearchFocusReceived::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildRelationList.OnGuildSearchTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetGuildRelationList_OnGuildSearchTextCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetGuildRelationList_OnGuildSearchTextCommitted) == 0x000008, "Wrong alignment on TLUserWidgetGuildRelationList_OnGuildSearchTextCommitted");
static_assert(sizeof(TLUserWidgetGuildRelationList_OnGuildSearchTextCommitted) == 0x000020, "Wrong size on TLUserWidgetGuildRelationList_OnGuildSearchTextCommitted");
static_assert(offsetof(TLUserWidgetGuildRelationList_OnGuildSearchTextCommitted, InText) == 0x000000, "Member 'TLUserWidgetGuildRelationList_OnGuildSearchTextCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildRelationList_OnGuildSearchTextCommitted, InCommitType) == 0x000018, "Member 'TLUserWidgetGuildRelationList_OnGuildSearchTextCommitted::InCommitType' has a wrong offset!");

// Function TLClient.TLUserWidgetTimelineFrame.OnUpdateSubTimeline
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTimelineFrame_OnUpdateSubTimeline final
{
public:
	bool                                          IsActiveSubText;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTimelineFrame_OnUpdateSubTimeline) == 0x000001, "Wrong alignment on TLUserWidgetTimelineFrame_OnUpdateSubTimeline");
static_assert(sizeof(TLUserWidgetTimelineFrame_OnUpdateSubTimeline) == 0x000001, "Wrong size on TLUserWidgetTimelineFrame_OnUpdateSubTimeline");
static_assert(offsetof(TLUserWidgetTimelineFrame_OnUpdateSubTimeline, IsActiveSubText) == 0x000000, "Member 'TLUserWidgetTimelineFrame_OnUpdateSubTimeline::IsActiveSubText' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildReward.OnRemainGuildPointRewardBox
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildReward_OnRemainGuildPointRewardBox final
{
public:
	bool                                          InIsRemainBox;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildReward_OnRemainGuildPointRewardBox) == 0x000001, "Wrong alignment on TLUserWidgetGuildReward_OnRemainGuildPointRewardBox");
static_assert(sizeof(TLUserWidgetGuildReward_OnRemainGuildPointRewardBox) == 0x000001, "Wrong size on TLUserWidgetGuildReward_OnRemainGuildPointRewardBox");
static_assert(offsetof(TLUserWidgetGuildReward_OnRemainGuildPointRewardBox, InIsRemainBox) == 0x000000, "Member 'TLUserWidgetGuildReward_OnRemainGuildPointRewardBox::InIsRemainBox' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildReward.OnUpdatePresentRewardBox
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetGuildReward_OnUpdatePresentRewardBox final
{
public:
	bool                                          IsEnableOpenBox;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InLevel;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildReward_OnUpdatePresentRewardBox) == 0x000004, "Wrong alignment on TLUserWidgetGuildReward_OnUpdatePresentRewardBox");
static_assert(sizeof(TLUserWidgetGuildReward_OnUpdatePresentRewardBox) == 0x000008, "Wrong size on TLUserWidgetGuildReward_OnUpdatePresentRewardBox");
static_assert(offsetof(TLUserWidgetGuildReward_OnUpdatePresentRewardBox, IsEnableOpenBox) == 0x000000, "Member 'TLUserWidgetGuildReward_OnUpdatePresentRewardBox::IsEnableOpenBox' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildReward_OnUpdatePresentRewardBox, InLevel) == 0x000004, "Member 'TLUserWidgetGuildReward_OnUpdatePresentRewardBox::InLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetTargetIndicator.OnNameColorChange
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetTargetIndicator_OnNameColorChange final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTargetIndicator_OnNameColorChange) == 0x000004, "Wrong alignment on TLUserWidgetTargetIndicator_OnNameColorChange");
static_assert(sizeof(TLUserWidgetTargetIndicator_OnNameColorChange) == 0x000010, "Wrong size on TLUserWidgetTargetIndicator_OnNameColorChange");
static_assert(offsetof(TLUserWidgetTargetIndicator_OnNameColorChange, InColor) == 0x000000, "Member 'TLUserWidgetTargetIndicator_OnNameColorChange::InColor' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildSkillSlot.OnCooldownEnd
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildSkillSlot_OnCooldownEnd final
{
public:
	bool                                          IsEnd;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildSkillSlot_OnCooldownEnd) == 0x000001, "Wrong alignment on TLUserWidgetGuildSkillSlot_OnCooldownEnd");
static_assert(sizeof(TLUserWidgetGuildSkillSlot_OnCooldownEnd) == 0x000001, "Wrong size on TLUserWidgetGuildSkillSlot_OnCooldownEnd");
static_assert(offsetof(TLUserWidgetGuildSkillSlot_OnCooldownEnd, IsEnd) == 0x000000, "Member 'TLUserWidgetGuildSkillSlot_OnCooldownEnd::IsEnd' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildSkillSlot.SetEffect
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildSkillSlot_SetEffect final
{
public:
	bool                                          IsRemainEffect;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildSkillSlot_SetEffect) == 0x000001, "Wrong alignment on TLUserWidgetGuildSkillSlot_SetEffect");
static_assert(sizeof(TLUserWidgetGuildSkillSlot_SetEffect) == 0x000001, "Wrong size on TLUserWidgetGuildSkillSlot_SetEffect");
static_assert(offsetof(TLUserWidgetGuildSkillSlot_SetEffect, IsRemainEffect) == 0x000000, "Member 'TLUserWidgetGuildSkillSlot_SetEffect::IsRemainEffect' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildSkillSlot.SetUnlockGuildSkill
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildSkillSlot_SetUnlockGuildSkill final
{
public:
	bool                                          IsLock;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildSkillSlot_SetUnlockGuildSkill) == 0x000001, "Wrong alignment on TLUserWidgetGuildSkillSlot_SetUnlockGuildSkill");
static_assert(sizeof(TLUserWidgetGuildSkillSlot_SetUnlockGuildSkill) == 0x000001, "Wrong size on TLUserWidgetGuildSkillSlot_SetUnlockGuildSkill");
static_assert(offsetof(TLUserWidgetGuildSkillSlot_SetUnlockGuildSkill, IsLock) == 0x000000, "Member 'TLUserWidgetGuildSkillSlot_SetUnlockGuildSkill::IsLock' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimap.HandleChangeMapRegionType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMinimap_HandleChangeMapRegionType final
{
public:
	EMapRegionType                                MapRegionType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimap_HandleChangeMapRegionType) == 0x000001, "Wrong alignment on TLUserWidgetMinimap_HandleChangeMapRegionType");
static_assert(sizeof(TLUserWidgetMinimap_HandleChangeMapRegionType) == 0x000001, "Wrong size on TLUserWidgetMinimap_HandleChangeMapRegionType");
static_assert(offsetof(TLUserWidgetMinimap_HandleChangeMapRegionType, MapRegionType) == 0x000000, "Member 'TLUserWidgetMinimap_HandleChangeMapRegionType::MapRegionType' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimap.HandleDynamicEventRegionJoin
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetMinimap_HandleDynamicEventRegionJoin final
{
public:
	uint64                                        Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsJoing;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetMinimap_HandleDynamicEventRegionJoin) == 0x000008, "Wrong alignment on TLUserWidgetMinimap_HandleDynamicEventRegionJoin");
static_assert(sizeof(TLUserWidgetMinimap_HandleDynamicEventRegionJoin) == 0x000010, "Wrong size on TLUserWidgetMinimap_HandleDynamicEventRegionJoin");
static_assert(offsetof(TLUserWidgetMinimap_HandleDynamicEventRegionJoin, Guid) == 0x000000, "Member 'TLUserWidgetMinimap_HandleDynamicEventRegionJoin::Guid' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMinimap_HandleDynamicEventRegionJoin, InIsJoing) == 0x000008, "Member 'TLUserWidgetMinimap_HandleDynamicEventRegionJoin::InIsJoing' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimap.HandleMapIconEmphasis
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetMinimap_HandleMapIconEmphasis final
{
public:
	uint64                                        Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimap_HandleMapIconEmphasis) == 0x000008, "Wrong alignment on TLUserWidgetMinimap_HandleMapIconEmphasis");
static_assert(sizeof(TLUserWidgetMinimap_HandleMapIconEmphasis) == 0x000008, "Wrong size on TLUserWidgetMinimap_HandleMapIconEmphasis");
static_assert(offsetof(TLUserWidgetMinimap_HandleMapIconEmphasis, Guid) == 0x000000, "Member 'TLUserWidgetMinimap_HandleMapIconEmphasis::Guid' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimap.HandleMinimapSliderOpacity
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetMinimap_HandleMinimapSliderOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimap_HandleMinimapSliderOpacity) == 0x000004, "Wrong alignment on TLUserWidgetMinimap_HandleMinimapSliderOpacity");
static_assert(sizeof(TLUserWidgetMinimap_HandleMinimapSliderOpacity) == 0x000004, "Wrong size on TLUserWidgetMinimap_HandleMinimapSliderOpacity");
static_assert(offsetof(TLUserWidgetMinimap_HandleMinimapSliderOpacity, InOpacity) == 0x000000, "Member 'TLUserWidgetMinimap_HandleMinimapSliderOpacity::InOpacity' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimap.HandlePanningState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMinimap_HandlePanningState final
{
public:
	ETLMinimapPanningState                        InPanningState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimap_HandlePanningState) == 0x000001, "Wrong alignment on TLUserWidgetMinimap_HandlePanningState");
static_assert(sizeof(TLUserWidgetMinimap_HandlePanningState) == 0x000001, "Wrong size on TLUserWidgetMinimap_HandlePanningState");
static_assert(offsetof(TLUserWidgetMinimap_HandlePanningState, InPanningState) == 0x000000, "Member 'TLUserWidgetMinimap_HandlePanningState::InPanningState' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimap.HandleUpdateMapIconFilter
// 0x000C (0x000C - 0x0000)
struct TLUserWidgetMinimap_HandleUpdateMapIconFilter final
{
public:
	class FName                                   InMapIconFilterId;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsVisible;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInForceUpdate;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetMinimap_HandleUpdateMapIconFilter) == 0x000004, "Wrong alignment on TLUserWidgetMinimap_HandleUpdateMapIconFilter");
static_assert(sizeof(TLUserWidgetMinimap_HandleUpdateMapIconFilter) == 0x00000C, "Wrong size on TLUserWidgetMinimap_HandleUpdateMapIconFilter");
static_assert(offsetof(TLUserWidgetMinimap_HandleUpdateMapIconFilter, InMapIconFilterId) == 0x000000, "Member 'TLUserWidgetMinimap_HandleUpdateMapIconFilter::InMapIconFilterId' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMinimap_HandleUpdateMapIconFilter, InIsVisible) == 0x000008, "Member 'TLUserWidgetMinimap_HandleUpdateMapIconFilter::InIsVisible' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMinimap_HandleUpdateMapIconFilter, bInForceUpdate) == 0x000009, "Member 'TLUserWidgetMinimap_HandleUpdateMapIconFilter::bInForceUpdate' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimap.OnContentsOpenEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMinimap_OnContentsOpenEvent final
{
public:
	bool                                          bFirstOpen;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimap_OnContentsOpenEvent) == 0x000001, "Wrong alignment on TLUserWidgetMinimap_OnContentsOpenEvent");
static_assert(sizeof(TLUserWidgetMinimap_OnContentsOpenEvent) == 0x000001, "Wrong size on TLUserWidgetMinimap_OnContentsOpenEvent");
static_assert(offsetof(TLUserWidgetMinimap_OnContentsOpenEvent, bFirstOpen) == 0x000000, "Member 'TLUserWidgetMinimap_OnContentsOpenEvent::bFirstOpen' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimap.OnMinimizeEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMinimap_OnMinimizeEvent final
{
public:
	bool                                          bMinimize;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimap_OnMinimizeEvent) == 0x000001, "Wrong alignment on TLUserWidgetMinimap_OnMinimizeEvent");
static_assert(sizeof(TLUserWidgetMinimap_OnMinimizeEvent) == 0x000001, "Wrong size on TLUserWidgetMinimap_OnMinimizeEvent");
static_assert(offsetof(TLUserWidgetMinimap_OnMinimizeEvent, bMinimize) == 0x000000, "Member 'TLUserWidgetMinimap_OnMinimizeEvent::bMinimize' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimap.OnMouserHover
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMinimap_OnMouserHover final
{
public:
	bool                                          bIsHover;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimap_OnMouserHover) == 0x000001, "Wrong alignment on TLUserWidgetMinimap_OnMouserHover");
static_assert(sizeof(TLUserWidgetMinimap_OnMouserHover) == 0x000001, "Wrong size on TLUserWidgetMinimap_OnMouserHover");
static_assert(offsetof(TLUserWidgetMinimap_OnMouserHover, bIsHover) == 0x000000, "Member 'TLUserWidgetMinimap_OnMouserHover::bIsHover' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimap.OnPostLoadMap
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetMinimap_OnPostLoadMap final
{
public:
	int32                                         InCurMapID;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimap_OnPostLoadMap) == 0x000004, "Wrong alignment on TLUserWidgetMinimap_OnPostLoadMap");
static_assert(sizeof(TLUserWidgetMinimap_OnPostLoadMap) == 0x000004, "Wrong size on TLUserWidgetMinimap_OnPostLoadMap");
static_assert(offsetof(TLUserWidgetMinimap_OnPostLoadMap, InCurMapID) == 0x000000, "Member 'TLUserWidgetMinimap_OnPostLoadMap::InCurMapID' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimap.OnPreLoadMap
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetMinimap_OnPreLoadMap final
{
public:
	int32                                         InCurMapID;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InNextMapID;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimap_OnPreLoadMap) == 0x000004, "Wrong alignment on TLUserWidgetMinimap_OnPreLoadMap");
static_assert(sizeof(TLUserWidgetMinimap_OnPreLoadMap) == 0x000008, "Wrong size on TLUserWidgetMinimap_OnPreLoadMap");
static_assert(offsetof(TLUserWidgetMinimap_OnPreLoadMap, InCurMapID) == 0x000000, "Member 'TLUserWidgetMinimap_OnPreLoadMap::InCurMapID' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMinimap_OnPreLoadMap, InNextMapID) == 0x000004, "Member 'TLUserWidgetMinimap_OnPreLoadMap::InNextMapID' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimap.OnUpdateIconFrameAlpha
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetMinimap_OnUpdateIconFrameAlpha final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimap_OnUpdateIconFrameAlpha) == 0x000004, "Wrong alignment on TLUserWidgetMinimap_OnUpdateIconFrameAlpha");
static_assert(sizeof(TLUserWidgetMinimap_OnUpdateIconFrameAlpha) == 0x000004, "Wrong size on TLUserWidgetMinimap_OnUpdateIconFrameAlpha");
static_assert(offsetof(TLUserWidgetMinimap_OnUpdateIconFrameAlpha, InValue) == 0x000000, "Member 'TLUserWidgetMinimap_OnUpdateIconFrameAlpha::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimap.OnUpdateIndicatorFrameAlpha
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetMinimap_OnUpdateIndicatorFrameAlpha final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimap_OnUpdateIndicatorFrameAlpha) == 0x000004, "Wrong alignment on TLUserWidgetMinimap_OnUpdateIndicatorFrameAlpha");
static_assert(sizeof(TLUserWidgetMinimap_OnUpdateIndicatorFrameAlpha) == 0x000004, "Wrong size on TLUserWidgetMinimap_OnUpdateIndicatorFrameAlpha");
static_assert(offsetof(TLUserWidgetMinimap_OnUpdateIndicatorFrameAlpha, InValue) == 0x000000, "Member 'TLUserWidgetMinimap_OnUpdateIndicatorFrameAlpha::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimap.OnUpdateMinimapOpacity
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetMinimap_OnUpdateMinimapOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimap_OnUpdateMinimapOpacity) == 0x000004, "Wrong alignment on TLUserWidgetMinimap_OnUpdateMinimapOpacity");
static_assert(sizeof(TLUserWidgetMinimap_OnUpdateMinimapOpacity) == 0x000004, "Wrong size on TLUserWidgetMinimap_OnUpdateMinimapOpacity");
static_assert(offsetof(TLUserWidgetMinimap_OnUpdateMinimapOpacity, InOpacity) == 0x000000, "Member 'TLUserWidgetMinimap_OnUpdateMinimapOpacity::InOpacity' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimap.OnUpdateRoadAdditive
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetMinimap_OnUpdateRoadAdditive final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimap_OnUpdateRoadAdditive) == 0x000004, "Wrong alignment on TLUserWidgetMinimap_OnUpdateRoadAdditive");
static_assert(sizeof(TLUserWidgetMinimap_OnUpdateRoadAdditive) == 0x000004, "Wrong size on TLUserWidgetMinimap_OnUpdateRoadAdditive");
static_assert(offsetof(TLUserWidgetMinimap_OnUpdateRoadAdditive, InValue) == 0x000000, "Member 'TLUserWidgetMinimap_OnUpdateRoadAdditive::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimap.OnUpdateRoadAlphaWhite
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetMinimap_OnUpdateRoadAlphaWhite final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimap_OnUpdateRoadAlphaWhite) == 0x000004, "Wrong alignment on TLUserWidgetMinimap_OnUpdateRoadAlphaWhite");
static_assert(sizeof(TLUserWidgetMinimap_OnUpdateRoadAlphaWhite) == 0x000004, "Wrong size on TLUserWidgetMinimap_OnUpdateRoadAlphaWhite");
static_assert(offsetof(TLUserWidgetMinimap_OnUpdateRoadAlphaWhite, InValue) == 0x000000, "Member 'TLUserWidgetMinimap_OnUpdateRoadAlphaWhite::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimap.OnUpdateRoadBrightness
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetMinimap_OnUpdateRoadBrightness final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimap_OnUpdateRoadBrightness) == 0x000004, "Wrong alignment on TLUserWidgetMinimap_OnUpdateRoadBrightness");
static_assert(sizeof(TLUserWidgetMinimap_OnUpdateRoadBrightness) == 0x000004, "Wrong size on TLUserWidgetMinimap_OnUpdateRoadBrightness");
static_assert(offsetof(TLUserWidgetMinimap_OnUpdateRoadBrightness, InValue) == 0x000000, "Member 'TLUserWidgetMinimap_OnUpdateRoadBrightness::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetTargetScanList.OnRefreshTargetList
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetTargetScanList_OnRefreshTargetList final
{
public:
	int32                                         InListCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTargetScanList_OnRefreshTargetList) == 0x000004, "Wrong alignment on TLUserWidgetTargetScanList_OnRefreshTargetList");
static_assert(sizeof(TLUserWidgetTargetScanList_OnRefreshTargetList) == 0x000004, "Wrong size on TLUserWidgetTargetScanList_OnRefreshTargetList");
static_assert(offsetof(TLUserWidgetTargetScanList_OnRefreshTargetList, InListCount) == 0x000000, "Member 'TLUserWidgetTargetScanList_OnRefreshTargetList::InListCount' has a wrong offset!");

// Function TLClient.TLUserWidgetMoney.GetVisibleControlFromContentsOpen
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMoney_GetVisibleControlFromContentsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMoney_GetVisibleControlFromContentsOpen) == 0x000001, "Wrong alignment on TLUserWidgetMoney_GetVisibleControlFromContentsOpen");
static_assert(sizeof(TLUserWidgetMoney_GetVisibleControlFromContentsOpen) == 0x000001, "Wrong size on TLUserWidgetMoney_GetVisibleControlFromContentsOpen");
static_assert(offsetof(TLUserWidgetMoney_GetVisibleControlFromContentsOpen, ReturnValue) == 0x000000, "Member 'TLUserWidgetMoney_GetVisibleControlFromContentsOpen::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetMoney.SetVisibleControlFromContentsOpen
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMoney_SetVisibleControlFromContentsOpen final
{
public:
	bool                                          InIsControlFromContentsOpen;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMoney_SetVisibleControlFromContentsOpen) == 0x000001, "Wrong alignment on TLUserWidgetMoney_SetVisibleControlFromContentsOpen");
static_assert(sizeof(TLUserWidgetMoney_SetVisibleControlFromContentsOpen) == 0x000001, "Wrong size on TLUserWidgetMoney_SetVisibleControlFromContentsOpen");
static_assert(offsetof(TLUserWidgetMoney_SetVisibleControlFromContentsOpen, InIsControlFromContentsOpen) == 0x000000, "Member 'TLUserWidgetMoney_SetVisibleControlFromContentsOpen::InIsControlFromContentsOpen' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildSummary.OnGuildHomeOpen
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildSummary_OnGuildHomeOpen final
{
public:
	bool                                          InHomeOpen;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildSummary_OnGuildHomeOpen) == 0x000001, "Wrong alignment on TLUserWidgetGuildSummary_OnGuildHomeOpen");
static_assert(sizeof(TLUserWidgetGuildSummary_OnGuildHomeOpen) == 0x000001, "Wrong size on TLUserWidgetGuildSummary_OnGuildHomeOpen");
static_assert(offsetof(TLUserWidgetGuildSummary_OnGuildHomeOpen, InHomeOpen) == 0x000000, "Member 'TLUserWidgetGuildSummary_OnGuildHomeOpen::InHomeOpen' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildSummary.OnGuildHomeRaidStart
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildSummary_OnGuildHomeRaidStart final
{
public:
	bool                                          InStart;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildSummary_OnGuildHomeRaidStart) == 0x000001, "Wrong alignment on TLUserWidgetGuildSummary_OnGuildHomeRaidStart");
static_assert(sizeof(TLUserWidgetGuildSummary_OnGuildHomeRaidStart) == 0x000001, "Wrong size on TLUserWidgetGuildSummary_OnGuildHomeRaidStart");
static_assert(offsetof(TLUserWidgetGuildSummary_OnGuildHomeRaidStart, InStart) == 0x000000, "Member 'TLUserWidgetGuildSummary_OnGuildHomeRaidStart::InStart' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildSummary.OnGuildHomeState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildSummary_OnGuildHomeState final
{
public:
	EGuildHomeState                               InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildSummary_OnGuildHomeState) == 0x000001, "Wrong alignment on TLUserWidgetGuildSummary_OnGuildHomeState");
static_assert(sizeof(TLUserWidgetGuildSummary_OnGuildHomeState) == 0x000001, "Wrong size on TLUserWidgetGuildSummary_OnGuildHomeState");
static_assert(offsetof(TLUserWidgetGuildSummary_OnGuildHomeState, InState) == 0x000000, "Member 'TLUserWidgetGuildSummary_OnGuildHomeState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildSummary.OnGuildMasterDelegateState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildSummary_OnGuildMasterDelegateState final
{
public:
	EGuildMasterDelegateState                     InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildSummary_OnGuildMasterDelegateState) == 0x000001, "Wrong alignment on TLUserWidgetGuildSummary_OnGuildMasterDelegateState");
static_assert(sizeof(TLUserWidgetGuildSummary_OnGuildMasterDelegateState) == 0x000001, "Wrong size on TLUserWidgetGuildSummary_OnGuildMasterDelegateState");
static_assert(offsetof(TLUserWidgetGuildSummary_OnGuildMasterDelegateState, InState) == 0x000000, "Member 'TLUserWidgetGuildSummary_OnGuildMasterDelegateState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildSummary.OnInputNoticeTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetGuildSummary_OnInputNoticeTextChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildSummary_OnInputNoticeTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetGuildSummary_OnInputNoticeTextChanged");
static_assert(sizeof(TLUserWidgetGuildSummary_OnInputNoticeTextChanged) == 0x000018, "Wrong size on TLUserWidgetGuildSummary_OnInputNoticeTextChanged");
static_assert(offsetof(TLUserWidgetGuildSummary_OnInputNoticeTextChanged, InInputText) == 0x000000, "Member 'TLUserWidgetGuildSummary_OnInputNoticeTextChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildSummary.OnIsLegionGuild
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetGuildSummary_OnIsLegionGuild final
{
public:
	bool                                          InLegionGuild;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildSummary_OnIsLegionGuild) == 0x000001, "Wrong alignment on TLUserWidgetGuildSummary_OnIsLegionGuild");
static_assert(sizeof(TLUserWidgetGuildSummary_OnIsLegionGuild) == 0x000001, "Wrong size on TLUserWidgetGuildSummary_OnIsLegionGuild");
static_assert(offsetof(TLUserWidgetGuildSummary_OnIsLegionGuild, InLegionGuild) == 0x000000, "Member 'TLUserWidgetGuildSummary_OnIsLegionGuild::InLegionGuild' has a wrong offset!");

// Function TLClient.TLUserWidgetSpecialShopGoodsDetail.OnDiscountGoods
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetSpecialShopGoodsDetail_OnDiscountGoods final
{
public:
	ETLPurchaseDiscountType                       InDiscountType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsShowDiscount;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpecialShopGoodsDetail_OnDiscountGoods) == 0x000001, "Wrong alignment on TLUserWidgetSpecialShopGoodsDetail_OnDiscountGoods");
static_assert(sizeof(TLUserWidgetSpecialShopGoodsDetail_OnDiscountGoods) == 0x000002, "Wrong size on TLUserWidgetSpecialShopGoodsDetail_OnDiscountGoods");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsDetail_OnDiscountGoods, InDiscountType) == 0x000000, "Member 'TLUserWidgetSpecialShopGoodsDetail_OnDiscountGoods::InDiscountType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsDetail_OnDiscountGoods, InIsShowDiscount) == 0x000001, "Member 'TLUserWidgetSpecialShopGoodsDetail_OnDiscountGoods::InIsShowDiscount' has a wrong offset!");

// Function TLClient.TLUserWidgetSpecialShopGoodsDetail.OnExistAccumulateMileage
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSpecialShopGoodsDetail_OnExistAccumulateMileage final
{
public:
	bool                                          InIsExist;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpecialShopGoodsDetail_OnExistAccumulateMileage) == 0x000001, "Wrong alignment on TLUserWidgetSpecialShopGoodsDetail_OnExistAccumulateMileage");
static_assert(sizeof(TLUserWidgetSpecialShopGoodsDetail_OnExistAccumulateMileage) == 0x000001, "Wrong size on TLUserWidgetSpecialShopGoodsDetail_OnExistAccumulateMileage");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsDetail_OnExistAccumulateMileage, InIsExist) == 0x000000, "Member 'TLUserWidgetSpecialShopGoodsDetail_OnExistAccumulateMileage::InIsExist' has a wrong offset!");

// Function TLClient.TLUserWidgetSpecialShopGoodsDetail.OnExistGoodsInfo
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSpecialShopGoodsDetail_OnExistGoodsInfo final
{
public:
	bool                                          InIsExist;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpecialShopGoodsDetail_OnExistGoodsInfo) == 0x000001, "Wrong alignment on TLUserWidgetSpecialShopGoodsDetail_OnExistGoodsInfo");
static_assert(sizeof(TLUserWidgetSpecialShopGoodsDetail_OnExistGoodsInfo) == 0x000001, "Wrong size on TLUserWidgetSpecialShopGoodsDetail_OnExistGoodsInfo");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsDetail_OnExistGoodsInfo, InIsExist) == 0x000000, "Member 'TLUserWidgetSpecialShopGoodsDetail_OnExistGoodsInfo::InIsExist' has a wrong offset!");

// Function TLClient.TLUserWidgetSpecialShopGoodsDetail.OnGoodsCondition
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSpecialShopGoodsDetail_OnGoodsCondition final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpecialShopGoodsDetail_OnGoodsCondition) == 0x000001, "Wrong alignment on TLUserWidgetSpecialShopGoodsDetail_OnGoodsCondition");
static_assert(sizeof(TLUserWidgetSpecialShopGoodsDetail_OnGoodsCondition) == 0x000001, "Wrong size on TLUserWidgetSpecialShopGoodsDetail_OnGoodsCondition");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsDetail_OnGoodsCondition, InIsShow) == 0x000000, "Member 'TLUserWidgetSpecialShopGoodsDetail_OnGoodsCondition::InIsShow' has a wrong offset!");

// Function TLClient.TLUserWidgetSpecialShopGoodsDetail.OnGoodsPrice
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSpecialShopGoodsDetail_OnGoodsPrice final
{
public:
	bool                                          InPgGoods;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpecialShopGoodsDetail_OnGoodsPrice) == 0x000001, "Wrong alignment on TLUserWidgetSpecialShopGoodsDetail_OnGoodsPrice");
static_assert(sizeof(TLUserWidgetSpecialShopGoodsDetail_OnGoodsPrice) == 0x000001, "Wrong size on TLUserWidgetSpecialShopGoodsDetail_OnGoodsPrice");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsDetail_OnGoodsPrice, InPgGoods) == 0x000000, "Member 'TLUserWidgetSpecialShopGoodsDetail_OnGoodsPrice::InPgGoods' has a wrong offset!");

// Function TLClient.TLUserWidgetSpecialShopGoodsDetail.OnGoodsState
// 0x0003 (0x0003 - 0x0000)
struct TLUserWidgetSpecialShopGoodsDetail_OnGoodsState final
{
public:
	bool                                          InIsNew;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsEvent;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsBest;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpecialShopGoodsDetail_OnGoodsState) == 0x000001, "Wrong alignment on TLUserWidgetSpecialShopGoodsDetail_OnGoodsState");
static_assert(sizeof(TLUserWidgetSpecialShopGoodsDetail_OnGoodsState) == 0x000003, "Wrong size on TLUserWidgetSpecialShopGoodsDetail_OnGoodsState");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsDetail_OnGoodsState, InIsNew) == 0x000000, "Member 'TLUserWidgetSpecialShopGoodsDetail_OnGoodsState::InIsNew' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsDetail_OnGoodsState, InIsEvent) == 0x000001, "Member 'TLUserWidgetSpecialShopGoodsDetail_OnGoodsState::InIsEvent' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsDetail_OnGoodsState, InIsBest) == 0x000002, "Member 'TLUserWidgetSpecialShopGoodsDetail_OnGoodsState::InIsBest' has a wrong offset!");

// Function TLClient.TLUserWidgetSpecialShopGoodsDetail.OnShowEffectiveTime
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSpecialShopGoodsDetail_OnShowEffectiveTime final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpecialShopGoodsDetail_OnShowEffectiveTime) == 0x000001, "Wrong alignment on TLUserWidgetSpecialShopGoodsDetail_OnShowEffectiveTime");
static_assert(sizeof(TLUserWidgetSpecialShopGoodsDetail_OnShowEffectiveTime) == 0x000001, "Wrong size on TLUserWidgetSpecialShopGoodsDetail_OnShowEffectiveTime");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsDetail_OnShowEffectiveTime, InIsShow) == 0x000000, "Member 'TLUserWidgetSpecialShopGoodsDetail_OnShowEffectiveTime::InIsShow' has a wrong offset!");

// Function TLClient.TLUserWidgetSpecialShopGoodsDetail.OnShowTimeLimit
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSpecialShopGoodsDetail_OnShowTimeLimit final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpecialShopGoodsDetail_OnShowTimeLimit) == 0x000001, "Wrong alignment on TLUserWidgetSpecialShopGoodsDetail_OnShowTimeLimit");
static_assert(sizeof(TLUserWidgetSpecialShopGoodsDetail_OnShowTimeLimit) == 0x000001, "Wrong size on TLUserWidgetSpecialShopGoodsDetail_OnShowTimeLimit");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsDetail_OnShowTimeLimit, InIsShow) == 0x000000, "Member 'TLUserWidgetSpecialShopGoodsDetail_OnShowTimeLimit::InIsShow' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildViewGuildInfo.OnUpdateRelationship
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetGuildViewGuildInfo_OnUpdateRelationship final
{
public:
	EGuildViewGuildRelationType                   InRelationType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsAvailableGrade;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetGuildViewGuildInfo_OnUpdateRelationship) == 0x000001, "Wrong alignment on TLUserWidgetGuildViewGuildInfo_OnUpdateRelationship");
static_assert(sizeof(TLUserWidgetGuildViewGuildInfo_OnUpdateRelationship) == 0x000002, "Wrong size on TLUserWidgetGuildViewGuildInfo_OnUpdateRelationship");
static_assert(offsetof(TLUserWidgetGuildViewGuildInfo_OnUpdateRelationship, InRelationType) == 0x000000, "Member 'TLUserWidgetGuildViewGuildInfo_OnUpdateRelationship::InRelationType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildViewGuildInfo_OnUpdateRelationship, InIsAvailableGrade) == 0x000001, "Member 'TLUserWidgetGuildViewGuildInfo_OnUpdateRelationship::InIsAvailableGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetSocialMotionFrame.BP_HandleChangeUIPlatformImpl
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSocialMotionFrame_BP_HandleChangeUIPlatformImpl final
{
public:
	ETLUIPlatform                                 InPlatform;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSocialMotionFrame_BP_HandleChangeUIPlatformImpl) == 0x000001, "Wrong alignment on TLUserWidgetSocialMotionFrame_BP_HandleChangeUIPlatformImpl");
static_assert(sizeof(TLUserWidgetSocialMotionFrame_BP_HandleChangeUIPlatformImpl) == 0x000001, "Wrong size on TLUserWidgetSocialMotionFrame_BP_HandleChangeUIPlatformImpl");
static_assert(offsetof(TLUserWidgetSocialMotionFrame_BP_HandleChangeUIPlatformImpl, InPlatform) == 0x000000, "Member 'TLUserWidgetSocialMotionFrame_BP_HandleChangeUIPlatformImpl::InPlatform' has a wrong offset!");

// Function TLClient.TLUserWidgetSocialMotionFrame.OnUIToggleEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSocialMotionFrame_OnUIToggleEvent final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSocialMotionFrame_OnUIToggleEvent) == 0x000001, "Wrong alignment on TLUserWidgetSocialMotionFrame_OnUIToggleEvent");
static_assert(sizeof(TLUserWidgetSocialMotionFrame_OnUIToggleEvent) == 0x000001, "Wrong size on TLUserWidgetSocialMotionFrame_OnUIToggleEvent");
static_assert(offsetof(TLUserWidgetSocialMotionFrame_OnUIToggleEvent, bVisible) == 0x000000, "Member 'TLUserWidgetSocialMotionFrame_OnUIToggleEvent::bVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetGuildViewList.OnGuildSearchTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetGuildViewList_OnGuildSearchTextCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetGuildViewList_OnGuildSearchTextCommitted) == 0x000008, "Wrong alignment on TLUserWidgetGuildViewList_OnGuildSearchTextCommitted");
static_assert(sizeof(TLUserWidgetGuildViewList_OnGuildSearchTextCommitted) == 0x000020, "Wrong size on TLUserWidgetGuildViewList_OnGuildSearchTextCommitted");
static_assert(offsetof(TLUserWidgetGuildViewList_OnGuildSearchTextCommitted, InText) == 0x000000, "Member 'TLUserWidgetGuildViewList_OnGuildSearchTextCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetGuildViewList_OnGuildSearchTextCommitted, InCommitType) == 0x000018, "Member 'TLUserWidgetGuildViewList_OnGuildSearchTextCommitted::InCommitType' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconTaxDelivery.OnFocusAnimation
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconTaxDelivery_OnFocusAnimation final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconTaxDelivery_OnFocusAnimation) == 0x000001, "Wrong alignment on TLUserWidgetMapIconTaxDelivery_OnFocusAnimation");
static_assert(sizeof(TLUserWidgetMapIconTaxDelivery_OnFocusAnimation) == 0x000001, "Wrong size on TLUserWidgetMapIconTaxDelivery_OnFocusAnimation");
static_assert(offsetof(TLUserWidgetMapIconTaxDelivery_OnFocusAnimation, IsEnable) == 0x000000, "Member 'TLUserWidgetMapIconTaxDelivery_OnFocusAnimation::IsEnable' has a wrong offset!");

// Function TLClient.TLUserWidgetTimeAttackDungeonMission.OnComplete
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTimeAttackDungeonMission_OnComplete final
{
public:
	bool                                          InbSuccess;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTimeAttackDungeonMission_OnComplete) == 0x000001, "Wrong alignment on TLUserWidgetTimeAttackDungeonMission_OnComplete");
static_assert(sizeof(TLUserWidgetTimeAttackDungeonMission_OnComplete) == 0x000001, "Wrong size on TLUserWidgetTimeAttackDungeonMission_OnComplete");
static_assert(offsetof(TLUserWidgetTimeAttackDungeonMission_OnComplete, InbSuccess) == 0x000000, "Member 'TLUserWidgetTimeAttackDungeonMission_OnComplete::InbSuccess' has a wrong offset!");

// Function TLClient.TLUserWidgetHotDealPopup.OnDiscountGoods
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetHotDealPopup_OnDiscountGoods final
{
public:
	ETLPurchaseDiscountType                       InDiscountType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsShowDiscount;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetHotDealPopup_OnDiscountGoods) == 0x000001, "Wrong alignment on TLUserWidgetHotDealPopup_OnDiscountGoods");
static_assert(sizeof(TLUserWidgetHotDealPopup_OnDiscountGoods) == 0x000002, "Wrong size on TLUserWidgetHotDealPopup_OnDiscountGoods");
static_assert(offsetof(TLUserWidgetHotDealPopup_OnDiscountGoods, InDiscountType) == 0x000000, "Member 'TLUserWidgetHotDealPopup_OnDiscountGoods::InDiscountType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetHotDealPopup_OnDiscountGoods, InIsShowDiscount) == 0x000001, "Member 'TLUserWidgetHotDealPopup_OnDiscountGoods::InIsShowDiscount' has a wrong offset!");

// Function TLClient.TLUserWidgetHotDealPopup.OnGoodsPrice
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetHotDealPopup_OnGoodsPrice final
{
public:
	bool                                          InIsCashGoods;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetHotDealPopup_OnGoodsPrice) == 0x000001, "Wrong alignment on TLUserWidgetHotDealPopup_OnGoodsPrice");
static_assert(sizeof(TLUserWidgetHotDealPopup_OnGoodsPrice) == 0x000001, "Wrong size on TLUserWidgetHotDealPopup_OnGoodsPrice");
static_assert(offsetof(TLUserWidgetHotDealPopup_OnGoodsPrice, InIsCashGoods) == 0x000000, "Member 'TLUserWidgetHotDealPopup_OnGoodsPrice::InIsCashGoods' has a wrong offset!");

// Function TLClient.TLUserWidgetHudKeyGuideFrame.OnUpdateGamepadPresetType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetHudKeyGuideFrame_OnUpdateGamepadPresetType final
{
public:
	ETLGamepadPreset                              InGamepadPresetType;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetHudKeyGuideFrame_OnUpdateGamepadPresetType) == 0x000001, "Wrong alignment on TLUserWidgetHudKeyGuideFrame_OnUpdateGamepadPresetType");
static_assert(sizeof(TLUserWidgetHudKeyGuideFrame_OnUpdateGamepadPresetType) == 0x000001, "Wrong size on TLUserWidgetHudKeyGuideFrame_OnUpdateGamepadPresetType");
static_assert(offsetof(TLUserWidgetHudKeyGuideFrame_OnUpdateGamepadPresetType, InGamepadPresetType) == 0x000000, "Member 'TLUserWidgetHudKeyGuideFrame_OnUpdateGamepadPresetType::InGamepadPresetType' has a wrong offset!");

// Function TLClient.TLUserWidgetTradeSummarySlot.OnItemSlotDimmed
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTradeSummarySlot_OnItemSlotDimmed final
{
public:
	bool                                          InIsDimmed;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTradeSummarySlot_OnItemSlotDimmed) == 0x000001, "Wrong alignment on TLUserWidgetTradeSummarySlot_OnItemSlotDimmed");
static_assert(sizeof(TLUserWidgetTradeSummarySlot_OnItemSlotDimmed) == 0x000001, "Wrong size on TLUserWidgetTradeSummarySlot_OnItemSlotDimmed");
static_assert(offsetof(TLUserWidgetTradeSummarySlot_OnItemSlotDimmed, InIsDimmed) == 0x000000, "Member 'TLUserWidgetTradeSummarySlot_OnItemSlotDimmed::InIsDimmed' has a wrong offset!");

// Function TLClient.TLUserWidgetTradeSummarySlot.OnSearchConditionFilter
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTradeSummarySlot_OnSearchConditionFilter final
{
public:
	bool                                          IsActiveFilter;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTradeSummarySlot_OnSearchConditionFilter) == 0x000001, "Wrong alignment on TLUserWidgetTradeSummarySlot_OnSearchConditionFilter");
static_assert(sizeof(TLUserWidgetTradeSummarySlot_OnSearchConditionFilter) == 0x000001, "Wrong size on TLUserWidgetTradeSummarySlot_OnSearchConditionFilter");
static_assert(offsetof(TLUserWidgetTradeSummarySlot_OnSearchConditionFilter, IsActiveFilter) == 0x000000, "Member 'TLUserWidgetTradeSummarySlot_OnSearchConditionFilter::IsActiveFilter' has a wrong offset!");

// Function TLClient.TLUserWidgetHyperLinkText.SetWrapTextSize
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetHyperLinkText_SetWrapTextSize final
{
public:
	float                                         InWrapTextSize;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetHyperLinkText_SetWrapTextSize) == 0x000004, "Wrong alignment on TLUserWidgetHyperLinkText_SetWrapTextSize");
static_assert(sizeof(TLUserWidgetHyperLinkText_SetWrapTextSize) == 0x000004, "Wrong size on TLUserWidgetHyperLinkText_SetWrapTextSize");
static_assert(offsetof(TLUserWidgetHyperLinkText_SetWrapTextSize, InWrapTextSize) == 0x000000, "Member 'TLUserWidgetHyperLinkText_SetWrapTextSize::InWrapTextSize' has a wrong offset!");

// Function TLClient.TLUserWidgetOptionGameValueMonitorId.HandleSelectionChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetOptionGameValueMonitorId_HandleSelectionChanged final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetOptionGameValueMonitorId_HandleSelectionChanged) == 0x000008, "Wrong alignment on TLUserWidgetOptionGameValueMonitorId_HandleSelectionChanged");
static_assert(sizeof(TLUserWidgetOptionGameValueMonitorId_HandleSelectionChanged) == 0x000018, "Wrong size on TLUserWidgetOptionGameValueMonitorId_HandleSelectionChanged");
static_assert(offsetof(TLUserWidgetOptionGameValueMonitorId_HandleSelectionChanged, SelectedItem) == 0x000000, "Member 'TLUserWidgetOptionGameValueMonitorId_HandleSelectionChanged::SelectedItem' has a wrong offset!");
static_assert(offsetof(TLUserWidgetOptionGameValueMonitorId_HandleSelectionChanged, SelectionType) == 0x000010, "Member 'TLUserWidgetOptionGameValueMonitorId_HandleSelectionChanged::SelectionType' has a wrong offset!");

// Function TLClient.TLUserWidgetImageBasedCustomize.OnUpdateImageReady
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetImageBasedCustomize_OnUpdateImageReady final
{
public:
	bool                                          bInReady;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetImageBasedCustomize_OnUpdateImageReady) == 0x000001, "Wrong alignment on TLUserWidgetImageBasedCustomize_OnUpdateImageReady");
static_assert(sizeof(TLUserWidgetImageBasedCustomize_OnUpdateImageReady) == 0x000001, "Wrong size on TLUserWidgetImageBasedCustomize_OnUpdateImageReady");
static_assert(offsetof(TLUserWidgetImageBasedCustomize_OnUpdateImageReady, bInReady) == 0x000000, "Member 'TLUserWidgetImageBasedCustomize_OnUpdateImageReady::bInReady' has a wrong offset!");

// Function TLClient.TLUserWidgetImageEditInput.HandleEditTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetImageEditInput_HandleEditTextChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetImageEditInput_HandleEditTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetImageEditInput_HandleEditTextChanged");
static_assert(sizeof(TLUserWidgetImageEditInput_HandleEditTextChanged) == 0x000018, "Wrong size on TLUserWidgetImageEditInput_HandleEditTextChanged");
static_assert(offsetof(TLUserWidgetImageEditInput_HandleEditTextChanged, InText) == 0x000000, "Member 'TLUserWidgetImageEditInput_HandleEditTextChanged::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetImageEditInput.HandleEditTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetImageEditInput_HandleEditTextCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetImageEditInput_HandleEditTextCommitted) == 0x000008, "Wrong alignment on TLUserWidgetImageEditInput_HandleEditTextCommitted");
static_assert(sizeof(TLUserWidgetImageEditInput_HandleEditTextCommitted) == 0x000020, "Wrong size on TLUserWidgetImageEditInput_HandleEditTextCommitted");
static_assert(offsetof(TLUserWidgetImageEditInput_HandleEditTextCommitted, InText) == 0x000000, "Member 'TLUserWidgetImageEditInput_HandleEditTextCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetImageEditInput_HandleEditTextCommitted, InCommitType) == 0x000018, "Member 'TLUserWidgetImageEditInput_HandleEditTextCommitted::InCommitType' has a wrong offset!");

// Function TLClient.TLUserWidgetImageEditInput.HandleFocusEditBox
// 0x0040 (0x0040 - 0x0000)
struct TLUserWidgetImageEditInput_HandleFocusEditBox final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetImageEditInput_HandleFocusEditBox) == 0x000004, "Wrong alignment on TLUserWidgetImageEditInput_HandleFocusEditBox");
static_assert(sizeof(TLUserWidgetImageEditInput_HandleFocusEditBox) == 0x000040, "Wrong size on TLUserWidgetImageEditInput_HandleFocusEditBox");
static_assert(offsetof(TLUserWidgetImageEditInput_HandleFocusEditBox, MyGeometry) == 0x000000, "Member 'TLUserWidgetImageEditInput_HandleFocusEditBox::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLUserWidgetImageEditInput_HandleFocusEditBox, InFocusEvent) == 0x000038, "Member 'TLUserWidgetImageEditInput_HandleFocusEditBox::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetImageEditInput.HandleLostFocusEditBox
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetImageEditInput_HandleLostFocusEditBox final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetImageEditInput_HandleLostFocusEditBox) == 0x000004, "Wrong alignment on TLUserWidgetImageEditInput_HandleLostFocusEditBox");
static_assert(sizeof(TLUserWidgetImageEditInput_HandleLostFocusEditBox) == 0x000008, "Wrong size on TLUserWidgetImageEditInput_HandleLostFocusEditBox");
static_assert(offsetof(TLUserWidgetImageEditInput_HandleLostFocusEditBox, InFocusEvent) == 0x000000, "Member 'TLUserWidgetImageEditInput_HandleLostFocusEditBox::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetInfinityDungeonGuide.OnShowTimer
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInfinityDungeonGuide_OnShowTimer final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInfinityDungeonGuide_OnShowTimer) == 0x000001, "Wrong alignment on TLUserWidgetInfinityDungeonGuide_OnShowTimer");
static_assert(sizeof(TLUserWidgetInfinityDungeonGuide_OnShowTimer) == 0x000001, "Wrong size on TLUserWidgetInfinityDungeonGuide_OnShowTimer");
static_assert(offsetof(TLUserWidgetInfinityDungeonGuide_OnShowTimer, InIsShow) == 0x000000, "Member 'TLUserWidgetInfinityDungeonGuide_OnShowTimer::InIsShow' has a wrong offset!");

// Function TLClient.TLUserWidgetTradeUnitSlot.OnSearchConditionFilter
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTradeUnitSlot_OnSearchConditionFilter final
{
public:
	bool                                          IsActiveFilter;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTradeUnitSlot_OnSearchConditionFilter) == 0x000001, "Wrong alignment on TLUserWidgetTradeUnitSlot_OnSearchConditionFilter");
static_assert(sizeof(TLUserWidgetTradeUnitSlot_OnSearchConditionFilter) == 0x000001, "Wrong size on TLUserWidgetTradeUnitSlot_OnSearchConditionFilter");
static_assert(offsetof(TLUserWidgetTradeUnitSlot_OnSearchConditionFilter, IsActiveFilter) == 0x000000, "Member 'TLUserWidgetTradeUnitSlot_OnSearchConditionFilter::IsActiveFilter' has a wrong offset!");

// Function TLClient.TLUserWidgetTradeSaleSlot.OnSaleStatus
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTradeSaleSlot_OnSaleStatus final
{
public:
	ETLTradeSaleStatus                            InStatus;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTradeSaleSlot_OnSaleStatus) == 0x000001, "Wrong alignment on TLUserWidgetTradeSaleSlot_OnSaleStatus");
static_assert(sizeof(TLUserWidgetTradeSaleSlot_OnSaleStatus) == 0x000001, "Wrong size on TLUserWidgetTradeSaleSlot_OnSaleStatus");
static_assert(offsetof(TLUserWidgetTradeSaleSlot_OnSaleStatus, InStatus) == 0x000000, "Member 'TLUserWidgetTradeSaleSlot_OnSaleStatus::InStatus' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillExchangeInfo.OnSetSkillGrade
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetSkillExchangeInfo_OnSetSkillGrade final
{
public:
	class UTLImage*                               InImage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillGrade                                   InSkillGrade;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSource;                                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetSkillExchangeInfo_OnSetSkillGrade) == 0x000008, "Wrong alignment on TLUserWidgetSkillExchangeInfo_OnSetSkillGrade");
static_assert(sizeof(TLUserWidgetSkillExchangeInfo_OnSetSkillGrade) == 0x000010, "Wrong size on TLUserWidgetSkillExchangeInfo_OnSetSkillGrade");
static_assert(offsetof(TLUserWidgetSkillExchangeInfo_OnSetSkillGrade, InImage) == 0x000000, "Member 'TLUserWidgetSkillExchangeInfo_OnSetSkillGrade::InImage' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillExchangeInfo_OnSetSkillGrade, InSkillGrade) == 0x000008, "Member 'TLUserWidgetSkillExchangeInfo_OnSetSkillGrade::InSkillGrade' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillExchangeInfo_OnSetSkillGrade, bIsSource) == 0x000009, "Member 'TLUserWidgetSkillExchangeInfo_OnSetSkillGrade::bIsSource' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillExchangeInfo.OnVisibleAfterInfo
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillExchangeInfo_OnVisibleAfterInfo final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillExchangeInfo_OnVisibleAfterInfo) == 0x000001, "Wrong alignment on TLUserWidgetSkillExchangeInfo_OnVisibleAfterInfo");
static_assert(sizeof(TLUserWidgetSkillExchangeInfo_OnVisibleAfterInfo) == 0x000001, "Wrong size on TLUserWidgetSkillExchangeInfo_OnVisibleAfterInfo");
static_assert(offsetof(TLUserWidgetSkillExchangeInfo_OnVisibleAfterInfo, bVisible) == 0x000000, "Member 'TLUserWidgetSkillExchangeInfo_OnVisibleAfterInfo::bVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetnamePlateUsurperIcon.OnUpdateUsurperBuff
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetnamePlateUsurperIcon_OnUpdateUsurperBuff final
{
public:
	bool                                          InbHasPerfect;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetnamePlateUsurperIcon_OnUpdateUsurperBuff) == 0x000001, "Wrong alignment on TLUserWidgetnamePlateUsurperIcon_OnUpdateUsurperBuff");
static_assert(sizeof(TLUserWidgetnamePlateUsurperIcon_OnUpdateUsurperBuff) == 0x000001, "Wrong size on TLUserWidgetnamePlateUsurperIcon_OnUpdateUsurperBuff");
static_assert(offsetof(TLUserWidgetnamePlateUsurperIcon_OnUpdateUsurperBuff, InbHasPerfect) == 0x000000, "Member 'TLUserWidgetnamePlateUsurperIcon_OnUpdateUsurperBuff::InbHasPerfect' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelOption.ShowHideNextValue
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillLevelOption_ShowHideNextValue final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelOption_ShowHideNextValue) == 0x000001, "Wrong alignment on TLUserWidgetSkillLevelOption_ShowHideNextValue");
static_assert(sizeof(TLUserWidgetSkillLevelOption_ShowHideNextValue) == 0x000001, "Wrong size on TLUserWidgetSkillLevelOption_ShowHideNextValue");
static_assert(offsetof(TLUserWidgetSkillLevelOption_ShowHideNextValue, bShow) == 0x000000, "Member 'TLUserWidgetSkillLevelOption_ShowHideNextValue::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetInputRecommend.EditableTextBox_OnTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetInputRecommend_EditableTextBox_OnTextChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInputRecommend_EditableTextBox_OnTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetInputRecommend_EditableTextBox_OnTextChanged");
static_assert(sizeof(TLUserWidgetInputRecommend_EditableTextBox_OnTextChanged) == 0x000018, "Wrong size on TLUserWidgetInputRecommend_EditableTextBox_OnTextChanged");
static_assert(offsetof(TLUserWidgetInputRecommend_EditableTextBox_OnTextChanged, InText) == 0x000000, "Member 'TLUserWidgetInputRecommend_EditableTextBox_OnTextChanged::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetInputRecommend.EditableTextBox_OnTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetInputRecommend_EditableTextBox_OnTextCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetInputRecommend_EditableTextBox_OnTextCommitted) == 0x000008, "Wrong alignment on TLUserWidgetInputRecommend_EditableTextBox_OnTextCommitted");
static_assert(sizeof(TLUserWidgetInputRecommend_EditableTextBox_OnTextCommitted) == 0x000020, "Wrong size on TLUserWidgetInputRecommend_EditableTextBox_OnTextCommitted");
static_assert(offsetof(TLUserWidgetInputRecommend_EditableTextBox_OnTextCommitted, InText) == 0x000000, "Member 'TLUserWidgetInputRecommend_EditableTextBox_OnTextCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetInputRecommend_EditableTextBox_OnTextCommitted, InCommitType) == 0x000018, "Member 'TLUserWidgetInputRecommend_EditableTextBox_OnTextCommitted::InCommitType' has a wrong offset!");

// Function TLClient.TLUserWidgetInputRecommend.EditableTextBox_OnTextFocusLost
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetInputRecommend_EditableTextBox_OnTextFocusLost final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInputRecommend_EditableTextBox_OnTextFocusLost) == 0x000004, "Wrong alignment on TLUserWidgetInputRecommend_EditableTextBox_OnTextFocusLost");
static_assert(sizeof(TLUserWidgetInputRecommend_EditableTextBox_OnTextFocusLost) == 0x000008, "Wrong size on TLUserWidgetInputRecommend_EditableTextBox_OnTextFocusLost");
static_assert(offsetof(TLUserWidgetInputRecommend_EditableTextBox_OnTextFocusLost, InFocusEvent) == 0x000000, "Member 'TLUserWidgetInputRecommend_EditableTextBox_OnTextFocusLost::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetInputRecommend.EditableTextBox_OnTextFocusReceived
// 0x0040 (0x0040 - 0x0000)
struct TLUserWidgetInputRecommend_EditableTextBox_OnTextFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInputRecommend_EditableTextBox_OnTextFocusReceived) == 0x000004, "Wrong alignment on TLUserWidgetInputRecommend_EditableTextBox_OnTextFocusReceived");
static_assert(sizeof(TLUserWidgetInputRecommend_EditableTextBox_OnTextFocusReceived) == 0x000040, "Wrong size on TLUserWidgetInputRecommend_EditableTextBox_OnTextFocusReceived");
static_assert(offsetof(TLUserWidgetInputRecommend_EditableTextBox_OnTextFocusReceived, MyGeometry) == 0x000000, "Member 'TLUserWidgetInputRecommend_EditableTextBox_OnTextFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLUserWidgetInputRecommend_EditableTextBox_OnTextFocusReceived, InFocusEvent) == 0x000038, "Member 'TLUserWidgetInputRecommend_EditableTextBox_OnTextFocusReceived::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetInspection.OnUpdateAnswerEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInspection_OnUpdateAnswerEvent final
{
public:
	bool                                          InbComplete;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInspection_OnUpdateAnswerEvent) == 0x000001, "Wrong alignment on TLUserWidgetInspection_OnUpdateAnswerEvent");
static_assert(sizeof(TLUserWidgetInspection_OnUpdateAnswerEvent) == 0x000001, "Wrong size on TLUserWidgetInspection_OnUpdateAnswerEvent");
static_assert(offsetof(TLUserWidgetInspection_OnUpdateAnswerEvent, InbComplete) == 0x000000, "Member 'TLUserWidgetInspection_OnUpdateAnswerEvent::InbComplete' has a wrong offset!");

// Function TLClient.TLUserWidgetTimeTableEventSlot.OnUpdateScheduleType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTimeTableEventSlot_OnUpdateScheduleType final
{
public:
	ETLEventScheduleType                          InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTimeTableEventSlot_OnUpdateScheduleType) == 0x000001, "Wrong alignment on TLUserWidgetTimeTableEventSlot_OnUpdateScheduleType");
static_assert(sizeof(TLUserWidgetTimeTableEventSlot_OnUpdateScheduleType) == 0x000001, "Wrong size on TLUserWidgetTimeTableEventSlot_OnUpdateScheduleType");
static_assert(offsetof(TLUserWidgetTimeTableEventSlot_OnUpdateScheduleType, InType) == 0x000000, "Member 'TLUserWidgetTimeTableEventSlot_OnUpdateScheduleType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetInteractionScene.SetDialogueType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInteractionScene_SetDialogueType final
{
public:
	EDialogueType                                 InDialogueType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInteractionScene_SetDialogueType) == 0x000001, "Wrong alignment on TLUserWidgetInteractionScene_SetDialogueType");
static_assert(sizeof(TLUserWidgetInteractionScene_SetDialogueType) == 0x000001, "Wrong size on TLUserWidgetInteractionScene_SetDialogueType");
static_assert(offsetof(TLUserWidgetInteractionScene_SetDialogueType, InDialogueType) == 0x000000, "Member 'TLUserWidgetInteractionScene_SetDialogueType::InDialogueType' has a wrong offset!");

// Function TLClient.TLUserWidgetInvenItemDestroy.AddGradeFilteredItemList
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInvenItemDestroy_AddGradeFilteredItemList final
{
public:
	bool                                          bOnlyEquipType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInvenItemDestroy_AddGradeFilteredItemList) == 0x000001, "Wrong alignment on TLUserWidgetInvenItemDestroy_AddGradeFilteredItemList");
static_assert(sizeof(TLUserWidgetInvenItemDestroy_AddGradeFilteredItemList) == 0x000001, "Wrong size on TLUserWidgetInvenItemDestroy_AddGradeFilteredItemList");
static_assert(offsetof(TLUserWidgetInvenItemDestroy_AddGradeFilteredItemList, bOnlyEquipType) == 0x000000, "Member 'TLUserWidgetInvenItemDestroy_AddGradeFilteredItemList::bOnlyEquipType' has a wrong offset!");

// Function TLClient.TLUserWidgetInvenItemDestroy.OnUpdateGuideMessage
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetInvenItemDestroy_OnUpdateGuideMessage final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInvenItemDestroy_OnUpdateGuideMessage) == 0x000008, "Wrong alignment on TLUserWidgetInvenItemDestroy_OnUpdateGuideMessage");
static_assert(sizeof(TLUserWidgetInvenItemDestroy_OnUpdateGuideMessage) == 0x000018, "Wrong size on TLUserWidgetInvenItemDestroy_OnUpdateGuideMessage");
static_assert(offsetof(TLUserWidgetInvenItemDestroy_OnUpdateGuideMessage, InText) == 0x000000, "Member 'TLUserWidgetInvenItemDestroy_OnUpdateGuideMessage::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetInventory.FindSlotByItemName
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetInventory_FindSlotByItemName final
{
public:
	class FName                                   ItemName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLUserWidgetInvenSlot*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInventory_FindSlotByItemName) == 0x000008, "Wrong alignment on TLUserWidgetInventory_FindSlotByItemName");
static_assert(sizeof(TLUserWidgetInventory_FindSlotByItemName) == 0x000010, "Wrong size on TLUserWidgetInventory_FindSlotByItemName");
static_assert(offsetof(TLUserWidgetInventory_FindSlotByItemName, ItemName) == 0x000000, "Member 'TLUserWidgetInventory_FindSlotByItemName::ItemName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetInventory_FindSlotByItemName, ReturnValue) == 0x000008, "Member 'TLUserWidgetInventory_FindSlotByItemName::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetInventory.GetMyAdenaAmount
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetInventory_GetMyAdenaAmount final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInventory_GetMyAdenaAmount) == 0x000008, "Wrong alignment on TLUserWidgetInventory_GetMyAdenaAmount");
static_assert(sizeof(TLUserWidgetInventory_GetMyAdenaAmount) == 0x000008, "Wrong size on TLUserWidgetInventory_GetMyAdenaAmount");
static_assert(offsetof(TLUserWidgetInventory_GetMyAdenaAmount, ReturnValue) == 0x000000, "Member 'TLUserWidgetInventory_GetMyAdenaAmount::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetInventory.OnInventoryExpansion
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInventory_OnInventoryExpansion final
{
public:
	bool                                          InIsSuccess;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInventory_OnInventoryExpansion) == 0x000001, "Wrong alignment on TLUserWidgetInventory_OnInventoryExpansion");
static_assert(sizeof(TLUserWidgetInventory_OnInventoryExpansion) == 0x000001, "Wrong size on TLUserWidgetInventory_OnInventoryExpansion");
static_assert(offsetof(TLUserWidgetInventory_OnInventoryExpansion, InIsSuccess) == 0x000000, "Member 'TLUserWidgetInventory_OnInventoryExpansion::InIsSuccess' has a wrong offset!");

// Function TLClient.TLUserWidgetInventory.OnUpdateFilterCount
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetInventory_OnUpdateFilterCount final
{
public:
	int32                                         InTabIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCount;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInventory_OnUpdateFilterCount) == 0x000004, "Wrong alignment on TLUserWidgetInventory_OnUpdateFilterCount");
static_assert(sizeof(TLUserWidgetInventory_OnUpdateFilterCount) == 0x000008, "Wrong size on TLUserWidgetInventory_OnUpdateFilterCount");
static_assert(offsetof(TLUserWidgetInventory_OnUpdateFilterCount, InTabIndex) == 0x000000, "Member 'TLUserWidgetInventory_OnUpdateFilterCount::InTabIndex' has a wrong offset!");
static_assert(offsetof(TLUserWidgetInventory_OnUpdateFilterCount, InCount) == 0x000004, "Member 'TLUserWidgetInventory_OnUpdateFilterCount::InCount' has a wrong offset!");

// Function TLClient.TLUserWidgetInventory.ShowGroupFilterLabel
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInventory_ShowGroupFilterLabel final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInventory_ShowGroupFilterLabel) == 0x000001, "Wrong alignment on TLUserWidgetInventory_ShowGroupFilterLabel");
static_assert(sizeof(TLUserWidgetInventory_ShowGroupFilterLabel) == 0x000001, "Wrong size on TLUserWidgetInventory_ShowGroupFilterLabel");
static_assert(offsetof(TLUserWidgetInventory_ShowGroupFilterLabel, InShow) == 0x000000, "Member 'TLUserWidgetInventory_ShowGroupFilterLabel::InShow' has a wrong offset!");

// Function TLClient.TLUserWidgetInventoryGroupList.HandleScrollChange
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetInventoryGroupList_HandleScrollChange final
{
public:
	float                                         ScrollOffset;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInventoryGroupList_HandleScrollChange) == 0x000004, "Wrong alignment on TLUserWidgetInventoryGroupList_HandleScrollChange");
static_assert(sizeof(TLUserWidgetInventoryGroupList_HandleScrollChange) == 0x000004, "Wrong size on TLUserWidgetInventoryGroupList_HandleScrollChange");
static_assert(offsetof(TLUserWidgetInventoryGroupList_HandleScrollChange, ScrollOffset) == 0x000000, "Member 'TLUserWidgetInventoryGroupList_HandleScrollChange::ScrollOffset' has a wrong offset!");

// Function TLClient.TLUserWidgetInventoryTile.FindSlotByItemName
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetInventoryTile_FindSlotByItemName final
{
public:
	class FName                                   ItemName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLUserWidgetInvenSlot*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInventoryTile_FindSlotByItemName) == 0x000008, "Wrong alignment on TLUserWidgetInventoryTile_FindSlotByItemName");
static_assert(sizeof(TLUserWidgetInventoryTile_FindSlotByItemName) == 0x000010, "Wrong size on TLUserWidgetInventoryTile_FindSlotByItemName");
static_assert(offsetof(TLUserWidgetInventoryTile_FindSlotByItemName, ItemName) == 0x000000, "Member 'TLUserWidgetInventoryTile_FindSlotByItemName::ItemName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetInventoryTile_FindSlotByItemName, ReturnValue) == 0x000008, "Member 'TLUserWidgetInventoryTile_FindSlotByItemName::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetInventoryTile.GetMyAdenaAmount
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetInventoryTile_GetMyAdenaAmount final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInventoryTile_GetMyAdenaAmount) == 0x000008, "Wrong alignment on TLUserWidgetInventoryTile_GetMyAdenaAmount");
static_assert(sizeof(TLUserWidgetInventoryTile_GetMyAdenaAmount) == 0x000008, "Wrong size on TLUserWidgetInventoryTile_GetMyAdenaAmount");
static_assert(offsetof(TLUserWidgetInventoryTile_GetMyAdenaAmount, ReturnValue) == 0x000000, "Member 'TLUserWidgetInventoryTile_GetMyAdenaAmount::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetInventoryTile.HandleScrollChange
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetInventoryTile_HandleScrollChange final
{
public:
	float                                         ScrollOffset;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInventoryTile_HandleScrollChange) == 0x000004, "Wrong alignment on TLUserWidgetInventoryTile_HandleScrollChange");
static_assert(sizeof(TLUserWidgetInventoryTile_HandleScrollChange) == 0x000004, "Wrong size on TLUserWidgetInventoryTile_HandleScrollChange");
static_assert(offsetof(TLUserWidgetInventoryTile_HandleScrollChange, ScrollOffset) == 0x000000, "Member 'TLUserWidgetInventoryTile_HandleScrollChange::ScrollOffset' has a wrong offset!");

// Function TLClient.TLUserWidgetInventoryTile.OnInventoryExpansion
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInventoryTile_OnInventoryExpansion final
{
public:
	bool                                          InIsSuccess;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInventoryTile_OnInventoryExpansion) == 0x000001, "Wrong alignment on TLUserWidgetInventoryTile_OnInventoryExpansion");
static_assert(sizeof(TLUserWidgetInventoryTile_OnInventoryExpansion) == 0x000001, "Wrong size on TLUserWidgetInventoryTile_OnInventoryExpansion");
static_assert(offsetof(TLUserWidgetInventoryTile_OnInventoryExpansion, InIsSuccess) == 0x000000, "Member 'TLUserWidgetInventoryTile_OnInventoryExpansion::InIsSuccess' has a wrong offset!");

// Function TLClient.TLUserWidgetInventoryTile.OnUpdateFilterCount
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetInventoryTile_OnUpdateFilterCount final
{
public:
	int32                                         InTabIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCount;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInventoryTile_OnUpdateFilterCount) == 0x000004, "Wrong alignment on TLUserWidgetInventoryTile_OnUpdateFilterCount");
static_assert(sizeof(TLUserWidgetInventoryTile_OnUpdateFilterCount) == 0x000008, "Wrong size on TLUserWidgetInventoryTile_OnUpdateFilterCount");
static_assert(offsetof(TLUserWidgetInventoryTile_OnUpdateFilterCount, InTabIndex) == 0x000000, "Member 'TLUserWidgetInventoryTile_OnUpdateFilterCount::InTabIndex' has a wrong offset!");
static_assert(offsetof(TLUserWidgetInventoryTile_OnUpdateFilterCount, InCount) == 0x000004, "Member 'TLUserWidgetInventoryTile_OnUpdateFilterCount::InCount' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCollectionGroup.OnItemCollectionGroupState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemCollectionGroup_OnItemCollectionGroupState final
{
public:
	ETLItemCollectionGroupState                   InGroupState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemCollectionGroup_OnItemCollectionGroupState) == 0x000001, "Wrong alignment on TLUserWidgetItemCollectionGroup_OnItemCollectionGroupState");
static_assert(sizeof(TLUserWidgetItemCollectionGroup_OnItemCollectionGroupState) == 0x000001, "Wrong size on TLUserWidgetItemCollectionGroup_OnItemCollectionGroupState");
static_assert(offsetof(TLUserWidgetItemCollectionGroup_OnItemCollectionGroupState, InGroupState) == 0x000000, "Member 'TLUserWidgetItemCollectionGroup_OnItemCollectionGroupState::InGroupState' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCollectionGroup.OnRewardStateChange
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetItemCollectionGroup_OnRewardStateChange final
{
public:
	ETLItemCollectionRewardState                  InRewardState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInShowAnim;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemCollectionGroup_OnRewardStateChange) == 0x000001, "Wrong alignment on TLUserWidgetItemCollectionGroup_OnRewardStateChange");
static_assert(sizeof(TLUserWidgetItemCollectionGroup_OnRewardStateChange) == 0x000002, "Wrong size on TLUserWidgetItemCollectionGroup_OnRewardStateChange");
static_assert(offsetof(TLUserWidgetItemCollectionGroup_OnRewardStateChange, InRewardState) == 0x000000, "Member 'TLUserWidgetItemCollectionGroup_OnRewardStateChange::InRewardState' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemCollectionGroup_OnRewardStateChange, bInShowAnim) == 0x000001, "Member 'TLUserWidgetItemCollectionGroup_OnRewardStateChange::bInShowAnim' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCollectionGroupItemSlot.GetMatchedItemUid
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetItemCollectionGroupItemSlot_GetMatchedItemUid final
{
public:
	uint64                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemCollectionGroupItemSlot_GetMatchedItemUid) == 0x000008, "Wrong alignment on TLUserWidgetItemCollectionGroupItemSlot_GetMatchedItemUid");
static_assert(sizeof(TLUserWidgetItemCollectionGroupItemSlot_GetMatchedItemUid) == 0x000008, "Wrong size on TLUserWidgetItemCollectionGroupItemSlot_GetMatchedItemUid");
static_assert(offsetof(TLUserWidgetItemCollectionGroupItemSlot_GetMatchedItemUid, ReturnValue) == 0x000000, "Member 'TLUserWidgetItemCollectionGroupItemSlot_GetMatchedItemUid::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCollectionItemInfo.OnItemInfoTabClickedEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemCollectionItemInfo_OnItemInfoTabClickedEvent final
{
public:
	ETLItemCollectionItemInfoTabType              InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemCollectionItemInfo_OnItemInfoTabClickedEvent) == 0x000001, "Wrong alignment on TLUserWidgetItemCollectionItemInfo_OnItemInfoTabClickedEvent");
static_assert(sizeof(TLUserWidgetItemCollectionItemInfo_OnItemInfoTabClickedEvent) == 0x000001, "Wrong size on TLUserWidgetItemCollectionItemInfo_OnItemInfoTabClickedEvent");
static_assert(offsetof(TLUserWidgetItemCollectionItemInfo_OnItemInfoTabClickedEvent, InType) == 0x000000, "Member 'TLUserWidgetItemCollectionItemInfo_OnItemInfoTabClickedEvent::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCollectionItemInfo.OnUpdateCraftable
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemCollectionItemInfo_OnUpdateCraftable final
{
public:
	bool                                          bIsEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemCollectionItemInfo_OnUpdateCraftable) == 0x000001, "Wrong alignment on TLUserWidgetItemCollectionItemInfo_OnUpdateCraftable");
static_assert(sizeof(TLUserWidgetItemCollectionItemInfo_OnUpdateCraftable) == 0x000001, "Wrong size on TLUserWidgetItemCollectionItemInfo_OnUpdateCraftable");
static_assert(offsetof(TLUserWidgetItemCollectionItemInfo_OnUpdateCraftable, bIsEnable) == 0x000000, "Member 'TLUserWidgetItemCollectionItemInfo_OnUpdateCraftable::bIsEnable' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCollectionItemInfo.OnUpdateDecomposable
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemCollectionItemInfo_OnUpdateDecomposable final
{
public:
	bool                                          bIsDecomposable;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemCollectionItemInfo_OnUpdateDecomposable) == 0x000001, "Wrong alignment on TLUserWidgetItemCollectionItemInfo_OnUpdateDecomposable");
static_assert(sizeof(TLUserWidgetItemCollectionItemInfo_OnUpdateDecomposable) == 0x000001, "Wrong size on TLUserWidgetItemCollectionItemInfo_OnUpdateDecomposable");
static_assert(offsetof(TLUserWidgetItemCollectionItemInfo_OnUpdateDecomposable, bIsDecomposable) == 0x000000, "Member 'TLUserWidgetItemCollectionItemInfo_OnUpdateDecomposable::bIsDecomposable' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCollectionItemInfo.OnUpdateDestructible
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemCollectionItemInfo_OnUpdateDestructible final
{
public:
	bool                                          bIsDestructible;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemCollectionItemInfo_OnUpdateDestructible) == 0x000001, "Wrong alignment on TLUserWidgetItemCollectionItemInfo_OnUpdateDestructible");
static_assert(sizeof(TLUserWidgetItemCollectionItemInfo_OnUpdateDestructible) == 0x000001, "Wrong size on TLUserWidgetItemCollectionItemInfo_OnUpdateDestructible");
static_assert(offsetof(TLUserWidgetItemCollectionItemInfo_OnUpdateDestructible, bIsDestructible) == 0x000000, "Member 'TLUserWidgetItemCollectionItemInfo_OnUpdateDestructible::bIsDestructible' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCollectionItemInfo.OnUpdateStorable
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemCollectionItemInfo_OnUpdateStorable final
{
public:
	bool                                          bIsStorable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemCollectionItemInfo_OnUpdateStorable) == 0x000001, "Wrong alignment on TLUserWidgetItemCollectionItemInfo_OnUpdateStorable");
static_assert(sizeof(TLUserWidgetItemCollectionItemInfo_OnUpdateStorable) == 0x000001, "Wrong size on TLUserWidgetItemCollectionItemInfo_OnUpdateStorable");
static_assert(offsetof(TLUserWidgetItemCollectionItemInfo_OnUpdateStorable, bIsStorable) == 0x000000, "Member 'TLUserWidgetItemCollectionItemInfo_OnUpdateStorable::bIsStorable' has a wrong offset!");

// Function TLClient.TLUserWidgetMainMenuButton.OnWidgetShow
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMainMenuButton_OnWidgetShow final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMainMenuButton_OnWidgetShow) == 0x000001, "Wrong alignment on TLUserWidgetMainMenuButton_OnWidgetShow");
static_assert(sizeof(TLUserWidgetMainMenuButton_OnWidgetShow) == 0x000001, "Wrong size on TLUserWidgetMainMenuButton_OnWidgetShow");
static_assert(offsetof(TLUserWidgetMainMenuButton_OnWidgetShow, bInShow) == 0x000000, "Member 'TLUserWidgetMainMenuButton_OnWidgetShow::bInShow' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillBookQuickSlotGroup.OnChangeMainHandWeapon
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillBookQuickSlotGroup_OnChangeMainHandWeapon final
{
public:
	EItemCategory                                 InItemCategory;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillBookQuickSlotGroup_OnChangeMainHandWeapon) == 0x000001, "Wrong alignment on TLUserWidgetSkillBookQuickSlotGroup_OnChangeMainHandWeapon");
static_assert(sizeof(TLUserWidgetSkillBookQuickSlotGroup_OnChangeMainHandWeapon) == 0x000001, "Wrong size on TLUserWidgetSkillBookQuickSlotGroup_OnChangeMainHandWeapon");
static_assert(offsetof(TLUserWidgetSkillBookQuickSlotGroup_OnChangeMainHandWeapon, InItemCategory) == 0x000000, "Member 'TLUserWidgetSkillBookQuickSlotGroup_OnChangeMainHandWeapon::InItemCategory' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillBookQuickSlotGroup.OnChangeSlotPage
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSkillBookQuickSlotGroup_OnChangeSlotPage final
{
public:
	int32                                         InPageIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillBookQuickSlotGroup_OnChangeSlotPage) == 0x000004, "Wrong alignment on TLUserWidgetSkillBookQuickSlotGroup_OnChangeSlotPage");
static_assert(sizeof(TLUserWidgetSkillBookQuickSlotGroup_OnChangeSlotPage) == 0x000004, "Wrong size on TLUserWidgetSkillBookQuickSlotGroup_OnChangeSlotPage");
static_assert(offsetof(TLUserWidgetSkillBookQuickSlotGroup_OnChangeSlotPage, InPageIndex) == 0x000000, "Member 'TLUserWidgetSkillBookQuickSlotGroup_OnChangeSlotPage::InPageIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillBookQuickSlotGroup.OnUpdateEditableNonQuickSlotSelected
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillBookQuickSlotGroup_OnUpdateEditableNonQuickSlotSelected final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillBookQuickSlotGroup_OnUpdateEditableNonQuickSlotSelected) == 0x000001, "Wrong alignment on TLUserWidgetSkillBookQuickSlotGroup_OnUpdateEditableNonQuickSlotSelected");
static_assert(sizeof(TLUserWidgetSkillBookQuickSlotGroup_OnUpdateEditableNonQuickSlotSelected) == 0x000001, "Wrong size on TLUserWidgetSkillBookQuickSlotGroup_OnUpdateEditableNonQuickSlotSelected");
static_assert(offsetof(TLUserWidgetSkillBookQuickSlotGroup_OnUpdateEditableNonQuickSlotSelected, bInValue) == 0x000000, "Member 'TLUserWidgetSkillBookQuickSlotGroup_OnUpdateEditableNonQuickSlotSelected::bInValue' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCollectionRewardStat.OnCollectionEffectValueEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemCollectionRewardStat_OnCollectionEffectValueEvent final
{
public:
	bool                                          InPositiveValue;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemCollectionRewardStat_OnCollectionEffectValueEvent) == 0x000001, "Wrong alignment on TLUserWidgetItemCollectionRewardStat_OnCollectionEffectValueEvent");
static_assert(sizeof(TLUserWidgetItemCollectionRewardStat_OnCollectionEffectValueEvent) == 0x000001, "Wrong size on TLUserWidgetItemCollectionRewardStat_OnCollectionEffectValueEvent");
static_assert(offsetof(TLUserWidgetItemCollectionRewardStat_OnCollectionEffectValueEvent, InPositiveValue) == 0x000000, "Member 'TLUserWidgetItemCollectionRewardStat_OnCollectionEffectValueEvent::InPositiveValue' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCollectionRewardStat.OnUpdateFiltered
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemCollectionRewardStat_OnUpdateFiltered final
{
public:
	bool                                          bFiltered;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemCollectionRewardStat_OnUpdateFiltered) == 0x000001, "Wrong alignment on TLUserWidgetItemCollectionRewardStat_OnUpdateFiltered");
static_assert(sizeof(TLUserWidgetItemCollectionRewardStat_OnUpdateFiltered) == 0x000001, "Wrong size on TLUserWidgetItemCollectionRewardStat_OnUpdateFiltered");
static_assert(offsetof(TLUserWidgetItemCollectionRewardStat_OnUpdateFiltered, bFiltered) == 0x000000, "Member 'TLUserWidgetItemCollectionRewardStat_OnUpdateFiltered::bFiltered' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCollectionSummary.OnUpdateCompletionStatus
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetItemCollectionSummary_OnUpdateCompletionStatus final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPercent;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemCollectionSummary_OnUpdateCompletionStatus) == 0x000004, "Wrong alignment on TLUserWidgetItemCollectionSummary_OnUpdateCompletionStatus");
static_assert(sizeof(TLUserWidgetItemCollectionSummary_OnUpdateCompletionStatus) == 0x000008, "Wrong size on TLUserWidgetItemCollectionSummary_OnUpdateCompletionStatus");
static_assert(offsetof(TLUserWidgetItemCollectionSummary_OnUpdateCompletionStatus, InCount) == 0x000000, "Member 'TLUserWidgetItemCollectionSummary_OnUpdateCompletionStatus::InCount' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemCollectionSummary_OnUpdateCompletionStatus, InPercent) == 0x000004, "Member 'TLUserWidgetItemCollectionSummary_OnUpdateCompletionStatus::InPercent' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCollectionSummary.OnUpdateNotStartedStatus
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetItemCollectionSummary_OnUpdateNotStartedStatus final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPercent;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemCollectionSummary_OnUpdateNotStartedStatus) == 0x000004, "Wrong alignment on TLUserWidgetItemCollectionSummary_OnUpdateNotStartedStatus");
static_assert(sizeof(TLUserWidgetItemCollectionSummary_OnUpdateNotStartedStatus) == 0x000008, "Wrong size on TLUserWidgetItemCollectionSummary_OnUpdateNotStartedStatus");
static_assert(offsetof(TLUserWidgetItemCollectionSummary_OnUpdateNotStartedStatus, InCount) == 0x000000, "Member 'TLUserWidgetItemCollectionSummary_OnUpdateNotStartedStatus::InCount' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemCollectionSummary_OnUpdateNotStartedStatus, InPercent) == 0x000004, "Member 'TLUserWidgetItemCollectionSummary_OnUpdateNotStartedStatus::InPercent' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCollectionSummary.OnUpdateProgressingStatus
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetItemCollectionSummary_OnUpdateProgressingStatus final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPercent;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemCollectionSummary_OnUpdateProgressingStatus) == 0x000004, "Wrong alignment on TLUserWidgetItemCollectionSummary_OnUpdateProgressingStatus");
static_assert(sizeof(TLUserWidgetItemCollectionSummary_OnUpdateProgressingStatus) == 0x000008, "Wrong size on TLUserWidgetItemCollectionSummary_OnUpdateProgressingStatus");
static_assert(offsetof(TLUserWidgetItemCollectionSummary_OnUpdateProgressingStatus, InCount) == 0x000000, "Member 'TLUserWidgetItemCollectionSummary_OnUpdateProgressingStatus::InCount' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemCollectionSummary_OnUpdateProgressingStatus, InPercent) == 0x000004, "Member 'TLUserWidgetItemCollectionSummary_OnUpdateProgressingStatus::InPercent' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCompositionOpenResult.OnSetMode
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemCompositionOpenResult_OnSetMode final
{
public:
	ETLItemCompositionResultMode                  Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemCompositionOpenResult_OnSetMode) == 0x000001, "Wrong alignment on TLUserWidgetItemCompositionOpenResult_OnSetMode");
static_assert(sizeof(TLUserWidgetItemCompositionOpenResult_OnSetMode) == 0x000001, "Wrong size on TLUserWidgetItemCompositionOpenResult_OnSetMode");
static_assert(offsetof(TLUserWidgetItemCompositionOpenResult_OnSetMode, Mode) == 0x000000, "Member 'TLUserWidgetItemCompositionOpenResult_OnSetMode::Mode' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCompositionPanel.OnCompositionActivate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemCompositionPanel_OnCompositionActivate final
{
public:
	bool                                          bActivate;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemCompositionPanel_OnCompositionActivate) == 0x000001, "Wrong alignment on TLUserWidgetItemCompositionPanel_OnCompositionActivate");
static_assert(sizeof(TLUserWidgetItemCompositionPanel_OnCompositionActivate) == 0x000001, "Wrong size on TLUserWidgetItemCompositionPanel_OnCompositionActivate");
static_assert(offsetof(TLUserWidgetItemCompositionPanel_OnCompositionActivate, bActivate) == 0x000000, "Member 'TLUserWidgetItemCompositionPanel_OnCompositionActivate::bActivate' has a wrong offset!");

// Function TLClient.TLUserWidgetItemCompositionPanel.OnMaterialActivate
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetItemCompositionPanel_OnMaterialActivate final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivate;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetItemCompositionPanel_OnMaterialActivate) == 0x000004, "Wrong alignment on TLUserWidgetItemCompositionPanel_OnMaterialActivate");
static_assert(sizeof(TLUserWidgetItemCompositionPanel_OnMaterialActivate) == 0x000008, "Wrong size on TLUserWidgetItemCompositionPanel_OnMaterialActivate");
static_assert(offsetof(TLUserWidgetItemCompositionPanel_OnMaterialActivate, Index_0) == 0x000000, "Member 'TLUserWidgetItemCompositionPanel_OnMaterialActivate::Index_0' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemCompositionPanel_OnMaterialActivate, bActivate) == 0x000004, "Member 'TLUserWidgetItemCompositionPanel_OnMaterialActivate::bActivate' has a wrong offset!");

// Function TLClient.TLUserWidgetStorageMode.SetMultiSelectMode
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetStorageMode_SetMultiSelectMode final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetStorageMode_SetMultiSelectMode) == 0x000001, "Wrong alignment on TLUserWidgetStorageMode_SetMultiSelectMode");
static_assert(sizeof(TLUserWidgetStorageMode_SetMultiSelectMode) == 0x000001, "Wrong size on TLUserWidgetStorageMode_SetMultiSelectMode");
static_assert(offsetof(TLUserWidgetStorageMode_SetMultiSelectMode, bInChecked) == 0x000000, "Member 'TLUserWidgetStorageMode_SetMultiSelectMode::bInChecked' has a wrong offset!");

// Function TLClient.TLUserWidgetItemDecompositionResultSlot.OnItemNameUpdate
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetItemDecompositionResultSlot_OnItemNameUpdate final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemDecompositionResultSlot_OnItemNameUpdate) == 0x000008, "Wrong alignment on TLUserWidgetItemDecompositionResultSlot_OnItemNameUpdate");
static_assert(sizeof(TLUserWidgetItemDecompositionResultSlot_OnItemNameUpdate) == 0x000018, "Wrong size on TLUserWidgetItemDecompositionResultSlot_OnItemNameUpdate");
static_assert(offsetof(TLUserWidgetItemDecompositionResultSlot_OnItemNameUpdate, InName) == 0x000000, "Member 'TLUserWidgetItemDecompositionResultSlot_OnItemNameUpdate::InName' has a wrong offset!");

// Function TLClient.TLUserWidgetItemDecompositionResultSlot.PlayShowAnim
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemDecompositionResultSlot_PlayShowAnim final
{
public:
	EItemGrade                                    InGrade;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemDecompositionResultSlot_PlayShowAnim) == 0x000001, "Wrong alignment on TLUserWidgetItemDecompositionResultSlot_PlayShowAnim");
static_assert(sizeof(TLUserWidgetItemDecompositionResultSlot_PlayShowAnim) == 0x000001, "Wrong size on TLUserWidgetItemDecompositionResultSlot_PlayShowAnim");
static_assert(offsetof(TLUserWidgetItemDecompositionResultSlot_PlayShowAnim, InGrade) == 0x000000, "Member 'TLUserWidgetItemDecompositionResultSlot_PlayShowAnim::InGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetStorageGroupList.HandleScrollChange
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetStorageGroupList_HandleScrollChange final
{
public:
	float                                         ScrollOffset;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetStorageGroupList_HandleScrollChange) == 0x000004, "Wrong alignment on TLUserWidgetStorageGroupList_HandleScrollChange");
static_assert(sizeof(TLUserWidgetStorageGroupList_HandleScrollChange) == 0x000004, "Wrong size on TLUserWidgetStorageGroupList_HandleScrollChange");
static_assert(offsetof(TLUserWidgetStorageGroupList_HandleScrollChange, ScrollOffset) == 0x000000, "Member 'TLUserWidgetStorageGroupList_HandleScrollChange::ScrollOffset' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillMasteryWeaponInfo.OnUpdateCurrentEquipWeaponSet
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillMasteryWeaponInfo_OnUpdateCurrentEquipWeaponSet final
{
public:
	EEquipWeaponSet                               InEquipWeaponSet;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillMasteryWeaponInfo_OnUpdateCurrentEquipWeaponSet) == 0x000001, "Wrong alignment on TLUserWidgetSkillMasteryWeaponInfo_OnUpdateCurrentEquipWeaponSet");
static_assert(sizeof(TLUserWidgetSkillMasteryWeaponInfo_OnUpdateCurrentEquipWeaponSet) == 0x000001, "Wrong size on TLUserWidgetSkillMasteryWeaponInfo_OnUpdateCurrentEquipWeaponSet");
static_assert(offsetof(TLUserWidgetSkillMasteryWeaponInfo_OnUpdateCurrentEquipWeaponSet, InEquipWeaponSet) == 0x000000, "Member 'TLUserWidgetSkillMasteryWeaponInfo_OnUpdateCurrentEquipWeaponSet::InEquipWeaponSet' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillMasteryWeaponInfo.OnUpdateCurrentSkillMasteryWeaponInfo
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetSkillMasteryWeaponInfo_OnUpdateCurrentSkillMasteryWeaponInfo final
{
public:
	EWeaponCategory                               InWeaponType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InLevel;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InExpPercent;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsMaxLevel;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetSkillMasteryWeaponInfo_OnUpdateCurrentSkillMasteryWeaponInfo) == 0x000004, "Wrong alignment on TLUserWidgetSkillMasteryWeaponInfo_OnUpdateCurrentSkillMasteryWeaponInfo");
static_assert(sizeof(TLUserWidgetSkillMasteryWeaponInfo_OnUpdateCurrentSkillMasteryWeaponInfo) == 0x000010, "Wrong size on TLUserWidgetSkillMasteryWeaponInfo_OnUpdateCurrentSkillMasteryWeaponInfo");
static_assert(offsetof(TLUserWidgetSkillMasteryWeaponInfo_OnUpdateCurrentSkillMasteryWeaponInfo, InWeaponType) == 0x000000, "Member 'TLUserWidgetSkillMasteryWeaponInfo_OnUpdateCurrentSkillMasteryWeaponInfo::InWeaponType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillMasteryWeaponInfo_OnUpdateCurrentSkillMasteryWeaponInfo, InLevel) == 0x000004, "Member 'TLUserWidgetSkillMasteryWeaponInfo_OnUpdateCurrentSkillMasteryWeaponInfo::InLevel' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillMasteryWeaponInfo_OnUpdateCurrentSkillMasteryWeaponInfo, InExpPercent) == 0x000008, "Member 'TLUserWidgetSkillMasteryWeaponInfo_OnUpdateCurrentSkillMasteryWeaponInfo::InExpPercent' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillMasteryWeaponInfo_OnUpdateCurrentSkillMasteryWeaponInfo, InIsMaxLevel) == 0x00000C, "Member 'TLUserWidgetSkillMasteryWeaponInfo_OnUpdateCurrentSkillMasteryWeaponInfo::InIsMaxLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetItemLotteryInfo.OnShowCustomGroupTabDescription
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemLotteryInfo_OnShowCustomGroupTabDescription final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemLotteryInfo_OnShowCustomGroupTabDescription) == 0x000001, "Wrong alignment on TLUserWidgetItemLotteryInfo_OnShowCustomGroupTabDescription");
static_assert(sizeof(TLUserWidgetItemLotteryInfo_OnShowCustomGroupTabDescription) == 0x000001, "Wrong size on TLUserWidgetItemLotteryInfo_OnShowCustomGroupTabDescription");
static_assert(offsetof(TLUserWidgetItemLotteryInfo_OnShowCustomGroupTabDescription, InShow) == 0x000000, "Member 'TLUserWidgetItemLotteryInfo_OnShowCustomGroupTabDescription::InShow' has a wrong offset!");

// Function TLClient.TLUserWidgetItemLotteryInfo.OnShowLotteryByItem
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemLotteryInfo_OnShowLotteryByItem final
{
public:
	bool                                          InIsByItem;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemLotteryInfo_OnShowLotteryByItem) == 0x000001, "Wrong alignment on TLUserWidgetItemLotteryInfo_OnShowLotteryByItem");
static_assert(sizeof(TLUserWidgetItemLotteryInfo_OnShowLotteryByItem) == 0x000001, "Wrong size on TLUserWidgetItemLotteryInfo_OnShowLotteryByItem");
static_assert(offsetof(TLUserWidgetItemLotteryInfo_OnShowLotteryByItem, InIsByItem) == 0x000000, "Member 'TLUserWidgetItemLotteryInfo_OnShowLotteryByItem::InIsByItem' has a wrong offset!");

// Function TLClient.TLUserWidgetOccupationGuideBossStone.OnUpdateState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetOccupationGuideBossStone_OnUpdateState final
{
public:
	EOccupationState                              InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOccupationGuideBossStone_OnUpdateState) == 0x000001, "Wrong alignment on TLUserWidgetOccupationGuideBossStone_OnUpdateState");
static_assert(sizeof(TLUserWidgetOccupationGuideBossStone_OnUpdateState) == 0x000001, "Wrong size on TLUserWidgetOccupationGuideBossStone_OnUpdateState");
static_assert(offsetof(TLUserWidgetOccupationGuideBossStone_OnUpdateState, InState) == 0x000000, "Member 'TLUserWidgetOccupationGuideBossStone_OnUpdateState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetTooltipItemRuneSocket.OnActiveRuneSynergy
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetTooltipItemRuneSocket_OnActiveRuneSynergy final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemGrade                                    InSynergyGrade;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTooltipItemRuneSocket_OnActiveRuneSynergy) == 0x000001, "Wrong alignment on TLUserWidgetTooltipItemRuneSocket_OnActiveRuneSynergy");
static_assert(sizeof(TLUserWidgetTooltipItemRuneSocket_OnActiveRuneSynergy) == 0x000002, "Wrong size on TLUserWidgetTooltipItemRuneSocket_OnActiveRuneSynergy");
static_assert(offsetof(TLUserWidgetTooltipItemRuneSocket_OnActiveRuneSynergy, InIsActive) == 0x000000, "Member 'TLUserWidgetTooltipItemRuneSocket_OnActiveRuneSynergy::InIsActive' has a wrong offset!");
static_assert(offsetof(TLUserWidgetTooltipItemRuneSocket_OnActiveRuneSynergy, InSynergyGrade) == 0x000001, "Member 'TLUserWidgetTooltipItemRuneSocket_OnActiveRuneSynergy::InSynergyGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillTooltip.OnUpdateAwakeningOption
// 0x0028 (0x0028 - 0x0000)
struct TLUserWidgetSkillTooltip_OnUpdateAwakeningOption final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InOptionText;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInEnable;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetSkillTooltip_OnUpdateAwakeningOption) == 0x000008, "Wrong alignment on TLUserWidgetSkillTooltip_OnUpdateAwakeningOption");
static_assert(sizeof(TLUserWidgetSkillTooltip_OnUpdateAwakeningOption) == 0x000028, "Wrong size on TLUserWidgetSkillTooltip_OnUpdateAwakeningOption");
static_assert(offsetof(TLUserWidgetSkillTooltip_OnUpdateAwakeningOption, InIndex) == 0x000000, "Member 'TLUserWidgetSkillTooltip_OnUpdateAwakeningOption::InIndex' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillTooltip_OnUpdateAwakeningOption, InOptionText) == 0x000008, "Member 'TLUserWidgetSkillTooltip_OnUpdateAwakeningOption::InOptionText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillTooltip_OnUpdateAwakeningOption, bInEnable) == 0x000020, "Member 'TLUserWidgetSkillTooltip_OnUpdateAwakeningOption::bInEnable' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillTooltip.OnUpdateTriggerCounterMove
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetSkillTooltip_OnUpdateTriggerCounterMove final
{
public:
	bool                                          bInTriggerCounterMove;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInShowDesc;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillTooltip_OnUpdateTriggerCounterMove) == 0x000001, "Wrong alignment on TLUserWidgetSkillTooltip_OnUpdateTriggerCounterMove");
static_assert(sizeof(TLUserWidgetSkillTooltip_OnUpdateTriggerCounterMove) == 0x000002, "Wrong size on TLUserWidgetSkillTooltip_OnUpdateTriggerCounterMove");
static_assert(offsetof(TLUserWidgetSkillTooltip_OnUpdateTriggerCounterMove, bInTriggerCounterMove) == 0x000000, "Member 'TLUserWidgetSkillTooltip_OnUpdateTriggerCounterMove::bInTriggerCounterMove' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillTooltip_OnUpdateTriggerCounterMove, bInShowDesc) == 0x000001, "Member 'TLUserWidgetSkillTooltip_OnUpdateTriggerCounterMove::bInShowDesc' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillTooltip.OnUpdateWeaponMasteryState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillTooltip_OnUpdateWeaponMasteryState final
{
public:
	ETLWeaponMasteryNodeState                     InNodeState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillTooltip_OnUpdateWeaponMasteryState) == 0x000001, "Wrong alignment on TLUserWidgetSkillTooltip_OnUpdateWeaponMasteryState");
static_assert(sizeof(TLUserWidgetSkillTooltip_OnUpdateWeaponMasteryState) == 0x000001, "Wrong size on TLUserWidgetSkillTooltip_OnUpdateWeaponMasteryState");
static_assert(offsetof(TLUserWidgetSkillTooltip_OnUpdateWeaponMasteryState, InNodeState) == 0x000000, "Member 'TLUserWidgetSkillTooltip_OnUpdateWeaponMasteryState::InNodeState' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillTooltip.GetActionGuideAttachPanel
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetSkillTooltip_GetActionGuideAttachPanel final
{
public:
	class UTLSizeBox*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillTooltip_GetActionGuideAttachPanel) == 0x000008, "Wrong alignment on TLUserWidgetSkillTooltip_GetActionGuideAttachPanel");
static_assert(sizeof(TLUserWidgetSkillTooltip_GetActionGuideAttachPanel) == 0x000008, "Wrong size on TLUserWidgetSkillTooltip_GetActionGuideAttachPanel");
static_assert(offsetof(TLUserWidgetSkillTooltip_GetActionGuideAttachPanel, ReturnValue) == 0x000000, "Member 'TLUserWidgetSkillTooltip_GetActionGuideAttachPanel::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetItemSlotTraitInfo.OnVisibleTraitStat
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemSlotTraitInfo_OnVisibleTraitStat final
{
public:
	bool                                          InIsVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemSlotTraitInfo_OnVisibleTraitStat) == 0x000001, "Wrong alignment on TLUserWidgetItemSlotTraitInfo_OnVisibleTraitStat");
static_assert(sizeof(TLUserWidgetItemSlotTraitInfo_OnVisibleTraitStat) == 0x000001, "Wrong size on TLUserWidgetItemSlotTraitInfo_OnVisibleTraitStat");
static_assert(offsetof(TLUserWidgetItemSlotTraitInfo_OnVisibleTraitStat, InIsVisible) == 0x000000, "Member 'TLUserWidgetItemSlotTraitInfo_OnVisibleTraitStat::InIsVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltip.OnFixedEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTooltip_OnFixedEvent final
{
public:
	bool                                          InFixed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltip_OnFixedEvent) == 0x000001, "Wrong alignment on TLUserWidgetItemTooltip_OnFixedEvent");
static_assert(sizeof(TLUserWidgetItemTooltip_OnFixedEvent) == 0x000001, "Wrong size on TLUserWidgetItemTooltip_OnFixedEvent");
static_assert(offsetof(TLUserWidgetItemTooltip_OnFixedEvent, InFixed) == 0x000000, "Member 'TLUserWidgetItemTooltip_OnFixedEvent::InFixed' has a wrong offset!");

// Function TLClient.TLUserWidgetSiegeDistributionInfo.UpdateItemCount
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSiegeDistributionInfo_UpdateItemCount final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSiegeDistributionInfo_UpdateItemCount) == 0x000004, "Wrong alignment on TLUserWidgetSiegeDistributionInfo_UpdateItemCount");
static_assert(sizeof(TLUserWidgetSiegeDistributionInfo_UpdateItemCount) == 0x000004, "Wrong size on TLUserWidgetSiegeDistributionInfo_UpdateItemCount");
static_assert(offsetof(TLUserWidgetSiegeDistributionInfo_UpdateItemCount, InCount) == 0x000000, "Member 'TLUserWidgetSiegeDistributionInfo_UpdateItemCount::InCount' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipEquipContent.OnEmphasizeComponent
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetItemTooltipEquipContent_OnEmphasizeComponent final
{
public:
	EItemTooltipComponent                         InComponent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEmphasize;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipEquipContent_OnEmphasizeComponent) == 0x000001, "Wrong alignment on TLUserWidgetItemTooltipEquipContent_OnEmphasizeComponent");
static_assert(sizeof(TLUserWidgetItemTooltipEquipContent_OnEmphasizeComponent) == 0x000002, "Wrong size on TLUserWidgetItemTooltipEquipContent_OnEmphasizeComponent");
static_assert(offsetof(TLUserWidgetItemTooltipEquipContent_OnEmphasizeComponent, InComponent) == 0x000000, "Member 'TLUserWidgetItemTooltipEquipContent_OnEmphasizeComponent::InComponent' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTooltipEquipContent_OnEmphasizeComponent, InEmphasize) == 0x000001, "Member 'TLUserWidgetItemTooltipEquipContent_OnEmphasizeComponent::InEmphasize' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipEquipContent.OnExistStats
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTooltipEquipContent_OnExistStats final
{
public:
	bool                                          InIsExist;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipEquipContent_OnExistStats) == 0x000001, "Wrong alignment on TLUserWidgetItemTooltipEquipContent_OnExistStats");
static_assert(sizeof(TLUserWidgetItemTooltipEquipContent_OnExistStats) == 0x000001, "Wrong size on TLUserWidgetItemTooltipEquipContent_OnExistStats");
static_assert(offsetof(TLUserWidgetItemTooltipEquipContent_OnExistStats, InIsExist) == 0x000000, "Member 'TLUserWidgetItemTooltipEquipContent_OnExistStats::InIsExist' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipEquipContent.OnUpdateDropActionGuide
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetItemTooltipEquipContent_OnUpdateDropActionGuide final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsConsole;                                        // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipEquipContent_OnUpdateDropActionGuide) == 0x000001, "Wrong alignment on TLUserWidgetItemTooltipEquipContent_OnUpdateDropActionGuide");
static_assert(sizeof(TLUserWidgetItemTooltipEquipContent_OnUpdateDropActionGuide) == 0x000002, "Wrong size on TLUserWidgetItemTooltipEquipContent_OnUpdateDropActionGuide");
static_assert(offsetof(TLUserWidgetItemTooltipEquipContent_OnUpdateDropActionGuide, bShow) == 0x000000, "Member 'TLUserWidgetItemTooltipEquipContent_OnUpdateDropActionGuide::bShow' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTooltipEquipContent_OnUpdateDropActionGuide, bIsConsole) == 0x000001, "Member 'TLUserWidgetItemTooltipEquipContent_OnUpdateDropActionGuide::bIsConsole' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTooltipEquipContent.OnUpdateEquipPositionName
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetItemTooltipEquipContent_OnUpdateEquipPositionName final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTooltipEquipContent_OnUpdateEquipPositionName) == 0x000008, "Wrong alignment on TLUserWidgetItemTooltipEquipContent_OnUpdateEquipPositionName");
static_assert(sizeof(TLUserWidgetItemTooltipEquipContent_OnUpdateEquipPositionName) == 0x000018, "Wrong size on TLUserWidgetItemTooltipEquipContent_OnUpdateEquipPositionName");
static_assert(offsetof(TLUserWidgetItemTooltipEquipContent_OnUpdateEquipPositionName, InName) == 0x000000, "Member 'TLUserWidgetItemTooltipEquipContent_OnUpdateEquipPositionName::InName' has a wrong offset!");

// Function TLClient.TLUserWidgetSiegeWarfareSuccess.SetCastleType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSiegeWarfareSuccess_SetCastleType final
{
public:
	ECastleType                                   InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSiegeWarfareSuccess_SetCastleType) == 0x000001, "Wrong alignment on TLUserWidgetSiegeWarfareSuccess_SetCastleType");
static_assert(sizeof(TLUserWidgetSiegeWarfareSuccess_SetCastleType) == 0x000001, "Wrong size on TLUserWidgetSiegeWarfareSuccess_SetCastleType");
static_assert(offsetof(TLUserWidgetSiegeWarfareSuccess_SetCastleType, InType) == 0x000000, "Member 'TLUserWidgetSiegeWarfareSuccess_SetCastleType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetTooltipStatInfo.OnUpdateAttackEnchantValueText
// 0x0038 (0x0038 - 0x0000)
struct TLUserWidgetTooltipStatInfo_OnUpdateAttackEnchantValueText final
{
public:
	class FText                                   InEnchantMinValueText;                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   InEnchantMaxValueText;                             // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   InColorKey;                                        // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTooltipStatInfo_OnUpdateAttackEnchantValueText) == 0x000008, "Wrong alignment on TLUserWidgetTooltipStatInfo_OnUpdateAttackEnchantValueText");
static_assert(sizeof(TLUserWidgetTooltipStatInfo_OnUpdateAttackEnchantValueText) == 0x000038, "Wrong size on TLUserWidgetTooltipStatInfo_OnUpdateAttackEnchantValueText");
static_assert(offsetof(TLUserWidgetTooltipStatInfo_OnUpdateAttackEnchantValueText, InEnchantMinValueText) == 0x000000, "Member 'TLUserWidgetTooltipStatInfo_OnUpdateAttackEnchantValueText::InEnchantMinValueText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetTooltipStatInfo_OnUpdateAttackEnchantValueText, InEnchantMaxValueText) == 0x000018, "Member 'TLUserWidgetTooltipStatInfo_OnUpdateAttackEnchantValueText::InEnchantMaxValueText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetTooltipStatInfo_OnUpdateAttackEnchantValueText, InColorKey) == 0x000030, "Member 'TLUserWidgetTooltipStatInfo_OnUpdateAttackEnchantValueText::InColorKey' has a wrong offset!");

// Function TLClient.TLUserWidgetTooltipStatInfo.OnUpdateAttackValue
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetTooltipStatInfo_OnUpdateAttackValue final
{
public:
	int32                                         InMinValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTooltipStatInfo_OnUpdateAttackValue) == 0x000004, "Wrong alignment on TLUserWidgetTooltipStatInfo_OnUpdateAttackValue");
static_assert(sizeof(TLUserWidgetTooltipStatInfo_OnUpdateAttackValue) == 0x000008, "Wrong size on TLUserWidgetTooltipStatInfo_OnUpdateAttackValue");
static_assert(offsetof(TLUserWidgetTooltipStatInfo_OnUpdateAttackValue, InMinValue) == 0x000000, "Member 'TLUserWidgetTooltipStatInfo_OnUpdateAttackValue::InMinValue' has a wrong offset!");
static_assert(offsetof(TLUserWidgetTooltipStatInfo_OnUpdateAttackValue, InMaxValue) == 0x000004, "Member 'TLUserWidgetTooltipStatInfo_OnUpdateAttackValue::InMaxValue' has a wrong offset!");

// Function TLClient.TLUserWidgetTooltipStatInfo.OnUpdateAttackValueCompare
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetTooltipStatInfo_OnUpdateAttackValueCompare final
{
public:
	int32                                         InMinValueDiff;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxValueDiff;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTooltipStatInfo_OnUpdateAttackValueCompare) == 0x000004, "Wrong alignment on TLUserWidgetTooltipStatInfo_OnUpdateAttackValueCompare");
static_assert(sizeof(TLUserWidgetTooltipStatInfo_OnUpdateAttackValueCompare) == 0x000008, "Wrong size on TLUserWidgetTooltipStatInfo_OnUpdateAttackValueCompare");
static_assert(offsetof(TLUserWidgetTooltipStatInfo_OnUpdateAttackValueCompare, InMinValueDiff) == 0x000000, "Member 'TLUserWidgetTooltipStatInfo_OnUpdateAttackValueCompare::InMinValueDiff' has a wrong offset!");
static_assert(offsetof(TLUserWidgetTooltipStatInfo_OnUpdateAttackValueCompare, InMaxValueDiff) == 0x000004, "Member 'TLUserWidgetTooltipStatInfo_OnUpdateAttackValueCompare::InMaxValueDiff' has a wrong offset!");

// Function TLClient.TLUserWidgetTooltipStatInfo.OnUpdateBaseValueText
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetTooltipStatInfo_OnUpdateBaseValueText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTooltipStatInfo_OnUpdateBaseValueText) == 0x000008, "Wrong alignment on TLUserWidgetTooltipStatInfo_OnUpdateBaseValueText");
static_assert(sizeof(TLUserWidgetTooltipStatInfo_OnUpdateBaseValueText) == 0x000018, "Wrong size on TLUserWidgetTooltipStatInfo_OnUpdateBaseValueText");
static_assert(offsetof(TLUserWidgetTooltipStatInfo_OnUpdateBaseValueText, InText) == 0x000000, "Member 'TLUserWidgetTooltipStatInfo_OnUpdateBaseValueText::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetTooltipStatInfo.OnUpdateName
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetTooltipStatInfo_OnUpdateName final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTooltipStatInfo_OnUpdateName) == 0x000008, "Wrong alignment on TLUserWidgetTooltipStatInfo_OnUpdateName");
static_assert(sizeof(TLUserWidgetTooltipStatInfo_OnUpdateName) == 0x000018, "Wrong size on TLUserWidgetTooltipStatInfo_OnUpdateName");
static_assert(offsetof(TLUserWidgetTooltipStatInfo_OnUpdateName, InText) == 0x000000, "Member 'TLUserWidgetTooltipStatInfo_OnUpdateName::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetTooltipStatInfo.UpdateCompareAttackStat
// 0x0028 (0x0028 - 0x0000)
struct TLUserWidgetTooltipStatInfo_UpdateCompareAttackStat final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLTooltipStatCompareComponent         InCompareComponent;                                // 0x0008(0x0020)(Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTooltipStatInfo_UpdateCompareAttackStat) == 0x000008, "Wrong alignment on TLUserWidgetTooltipStatInfo_UpdateCompareAttackStat");
static_assert(sizeof(TLUserWidgetTooltipStatInfo_UpdateCompareAttackStat) == 0x000028, "Wrong size on TLUserWidgetTooltipStatInfo_UpdateCompareAttackStat");
static_assert(offsetof(TLUserWidgetTooltipStatInfo_UpdateCompareAttackStat, InValue) == 0x000000, "Member 'TLUserWidgetTooltipStatInfo_UpdateCompareAttackStat::InValue' has a wrong offset!");
static_assert(offsetof(TLUserWidgetTooltipStatInfo_UpdateCompareAttackStat, InCompareComponent) == 0x000008, "Member 'TLUserWidgetTooltipStatInfo_UpdateCompareAttackStat::InCompareComponent' has a wrong offset!");

// Function TLClient.TLUserWidgetSiegeWarfare.OnSiegeWarfareProgress
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSiegeWarfare_OnSiegeWarfareProgress final
{
public:
	bool                                          InIsProgress;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSiegeWarfare_OnSiegeWarfareProgress) == 0x000001, "Wrong alignment on TLUserWidgetSiegeWarfare_OnSiegeWarfareProgress");
static_assert(sizeof(TLUserWidgetSiegeWarfare_OnSiegeWarfareProgress) == 0x000001, "Wrong size on TLUserWidgetSiegeWarfare_OnSiegeWarfareProgress");
static_assert(offsetof(TLUserWidgetSiegeWarfare_OnSiegeWarfareProgress, InIsProgress) == 0x000000, "Member 'TLUserWidgetSiegeWarfare_OnSiegeWarfareProgress::InIsProgress' has a wrong offset!");

// Function TLClient.TLUserWidgetSiegeWarfare.OnUpdatePlunderEmpty
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSiegeWarfare_OnUpdatePlunderEmpty final
{
public:
	bool                                          InIsEmpty;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSiegeWarfare_OnUpdatePlunderEmpty) == 0x000001, "Wrong alignment on TLUserWidgetSiegeWarfare_OnUpdatePlunderEmpty");
static_assert(sizeof(TLUserWidgetSiegeWarfare_OnUpdatePlunderEmpty) == 0x000001, "Wrong size on TLUserWidgetSiegeWarfare_OnUpdatePlunderEmpty");
static_assert(offsetof(TLUserWidgetSiegeWarfare_OnUpdatePlunderEmpty, InIsEmpty) == 0x000000, "Member 'TLUserWidgetSiegeWarfare_OnUpdatePlunderEmpty::InIsEmpty' has a wrong offset!");

// Function TLClient.TLUserWidgetSiegeWarfare.OnUsurpingGuildRelation
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSiegeWarfare_OnUsurpingGuildRelation final
{
public:
	EGuildRelationship                            InRelationship;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSiegeWarfare_OnUsurpingGuildRelation) == 0x000001, "Wrong alignment on TLUserWidgetSiegeWarfare_OnUsurpingGuildRelation");
static_assert(sizeof(TLUserWidgetSiegeWarfare_OnUsurpingGuildRelation) == 0x000001, "Wrong size on TLUserWidgetSiegeWarfare_OnUsurpingGuildRelation");
static_assert(offsetof(TLUserWidgetSiegeWarfare_OnUsurpingGuildRelation, InRelationship) == 0x000000, "Member 'TLUserWidgetSiegeWarfare_OnUsurpingGuildRelation::InRelationship' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitChange.OnItemTraitChangeState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitChange_OnItemTraitChangeState final
{
public:
	ETLItemChangeState                            InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitChange_OnItemTraitChangeState) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitChange_OnItemTraitChangeState");
static_assert(sizeof(TLUserWidgetItemTraitChange_OnItemTraitChangeState) == 0x000001, "Wrong size on TLUserWidgetItemTraitChange_OnItemTraitChangeState");
static_assert(offsetof(TLUserWidgetItemTraitChange_OnItemTraitChangeState, InState) == 0x000000, "Member 'TLUserWidgetItemTraitChange_OnItemTraitChangeState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitChange.OnTabTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitChange_OnTabTypeChanged final
{
public:
	ETLItemTraitChangeType                        InTabType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitChange_OnTabTypeChanged) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitChange_OnTabTypeChanged");
static_assert(sizeof(TLUserWidgetItemTraitChange_OnTabTypeChanged) == 0x000001, "Wrong size on TLUserWidgetItemTraitChange_OnTabTypeChanged");
static_assert(offsetof(TLUserWidgetItemTraitChange_OnTabTypeChanged, InTabType) == 0x000000, "Member 'TLUserWidgetItemTraitChange_OnTabTypeChanged::InTabType' has a wrong offset!");

// Function TLClient.TLUserWidgetSpecialShopGoodsItemSlot.OnEquipItem
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSpecialShopGoodsItemSlot_OnEquipItem final
{
public:
	bool                                          InIsEquip;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpecialShopGoodsItemSlot_OnEquipItem) == 0x000001, "Wrong alignment on TLUserWidgetSpecialShopGoodsItemSlot_OnEquipItem");
static_assert(sizeof(TLUserWidgetSpecialShopGoodsItemSlot_OnEquipItem) == 0x000001, "Wrong size on TLUserWidgetSpecialShopGoodsItemSlot_OnEquipItem");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsItemSlot_OnEquipItem, InIsEquip) == 0x000000, "Member 'TLUserWidgetSpecialShopGoodsItemSlot_OnEquipItem::InIsEquip' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitChangeMaterialSlot.OnAddItem
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitChangeMaterialSlot_OnAddItem final
{
public:
	bool                                          InIsUpdated;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitChangeMaterialSlot_OnAddItem) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitChangeMaterialSlot_OnAddItem");
static_assert(sizeof(TLUserWidgetItemTraitChangeMaterialSlot_OnAddItem) == 0x000001, "Wrong size on TLUserWidgetItemTraitChangeMaterialSlot_OnAddItem");
static_assert(offsetof(TLUserWidgetItemTraitChangeMaterialSlot_OnAddItem, InIsUpdated) == 0x000000, "Member 'TLUserWidgetItemTraitChangeMaterialSlot_OnAddItem::InIsUpdated' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitChangeMaterialSlot.OnLackMaterial
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitChangeMaterialSlot_OnLackMaterial final
{
public:
	bool                                          InIsLack;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitChangeMaterialSlot_OnLackMaterial) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitChangeMaterialSlot_OnLackMaterial");
static_assert(sizeof(TLUserWidgetItemTraitChangeMaterialSlot_OnLackMaterial) == 0x000001, "Wrong size on TLUserWidgetItemTraitChangeMaterialSlot_OnLackMaterial");
static_assert(offsetof(TLUserWidgetItemTraitChangeMaterialSlot_OnLackMaterial, InIsLack) == 0x000000, "Member 'TLUserWidgetItemTraitChangeMaterialSlot_OnLackMaterial::InIsLack' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitChangeMaterialSlot.OnRemoveItem
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitChangeMaterialSlot_OnRemoveItem final
{
public:
	bool                                          InIsUpdated;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitChangeMaterialSlot_OnRemoveItem) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitChangeMaterialSlot_OnRemoveItem");
static_assert(sizeof(TLUserWidgetItemTraitChangeMaterialSlot_OnRemoveItem) == 0x000001, "Wrong size on TLUserWidgetItemTraitChangeMaterialSlot_OnRemoveItem");
static_assert(offsetof(TLUserWidgetItemTraitChangeMaterialSlot_OnRemoveItem, InIsUpdated) == 0x000000, "Member 'TLUserWidgetItemTraitChangeMaterialSlot_OnRemoveItem::InIsUpdated' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitEnchantNextStat.OnOpenStat
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetItemTraitEnchantNextStat_OnOpenStat final
{
public:
	bool                                          InIsOpen;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsSelectMaterial;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitEnchantNextStat_OnOpenStat) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitEnchantNextStat_OnOpenStat");
static_assert(sizeof(TLUserWidgetItemTraitEnchantNextStat_OnOpenStat) == 0x000002, "Wrong size on TLUserWidgetItemTraitEnchantNextStat_OnOpenStat");
static_assert(offsetof(TLUserWidgetItemTraitEnchantNextStat_OnOpenStat, InIsOpen) == 0x000000, "Member 'TLUserWidgetItemTraitEnchantNextStat_OnOpenStat::InIsOpen' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTraitEnchantNextStat_OnOpenStat, InIsSelectMaterial) == 0x000001, "Member 'TLUserWidgetItemTraitEnchantNextStat_OnOpenStat::InIsSelectMaterial' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitEnchant.GetSceneActor
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetItemTraitEnchant_GetSceneActor final
{
public:
	class ATLCustomSceneControlActor*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitEnchant_GetSceneActor) == 0x000008, "Wrong alignment on TLUserWidgetItemTraitEnchant_GetSceneActor");
static_assert(sizeof(TLUserWidgetItemTraitEnchant_GetSceneActor) == 0x000008, "Wrong size on TLUserWidgetItemTraitEnchant_GetSceneActor");
static_assert(offsetof(TLUserWidgetItemTraitEnchant_GetSceneActor, ReturnValue) == 0x000000, "Member 'TLUserWidgetItemTraitEnchant_GetSceneActor::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitEnchant.GetSelectedStatSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetItemTraitEnchant_GetSelectedStatSlotIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitEnchant_GetSelectedStatSlotIndex) == 0x000004, "Wrong alignment on TLUserWidgetItemTraitEnchant_GetSelectedStatSlotIndex");
static_assert(sizeof(TLUserWidgetItemTraitEnchant_GetSelectedStatSlotIndex) == 0x000004, "Wrong size on TLUserWidgetItemTraitEnchant_GetSelectedStatSlotIndex");
static_assert(offsetof(TLUserWidgetItemTraitEnchant_GetSelectedStatSlotIndex, ReturnValue) == 0x000000, "Member 'TLUserWidgetItemTraitEnchant_GetSelectedStatSlotIndex::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitEnchant.OnCheckAddingBlessPoint
// 0x000C (0x000C - 0x0000)
struct TLUserWidgetItemTraitEnchant_OnCheckAddingBlessPoint final
{
public:
	bool                                          bChecked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BaseProbabilityPercent;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddedProbabilityPercent;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitEnchant_OnCheckAddingBlessPoint) == 0x000004, "Wrong alignment on TLUserWidgetItemTraitEnchant_OnCheckAddingBlessPoint");
static_assert(sizeof(TLUserWidgetItemTraitEnchant_OnCheckAddingBlessPoint) == 0x00000C, "Wrong size on TLUserWidgetItemTraitEnchant_OnCheckAddingBlessPoint");
static_assert(offsetof(TLUserWidgetItemTraitEnchant_OnCheckAddingBlessPoint, bChecked) == 0x000000, "Member 'TLUserWidgetItemTraitEnchant_OnCheckAddingBlessPoint::bChecked' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTraitEnchant_OnCheckAddingBlessPoint, BaseProbabilityPercent) == 0x000004, "Member 'TLUserWidgetItemTraitEnchant_OnCheckAddingBlessPoint::BaseProbabilityPercent' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTraitEnchant_OnCheckAddingBlessPoint, AddedProbabilityPercent) == 0x000008, "Member 'TLUserWidgetItemTraitEnchant_OnCheckAddingBlessPoint::AddedProbabilityPercent' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitEnchant.OnEnchantResultAction
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitEnchant_OnEnchantResultAction final
{
public:
	bool                                          InIsSuccess;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitEnchant_OnEnchantResultAction) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitEnchant_OnEnchantResultAction");
static_assert(sizeof(TLUserWidgetItemTraitEnchant_OnEnchantResultAction) == 0x000001, "Wrong size on TLUserWidgetItemTraitEnchant_OnEnchantResultAction");
static_assert(offsetof(TLUserWidgetItemTraitEnchant_OnEnchantResultAction, InIsSuccess) == 0x000000, "Member 'TLUserWidgetItemTraitEnchant_OnEnchantResultAction::InIsSuccess' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitEnchant.OnEnchantState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitEnchant_OnEnchantState final
{
public:
	EItemTraitEnchantStep                         InStep;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitEnchant_OnEnchantState) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitEnchant_OnEnchantState");
static_assert(sizeof(TLUserWidgetItemTraitEnchant_OnEnchantState) == 0x000001, "Wrong size on TLUserWidgetItemTraitEnchant_OnEnchantState");
static_assert(offsetof(TLUserWidgetItemTraitEnchant_OnEnchantState, InStep) == 0x000000, "Member 'TLUserWidgetItemTraitEnchant_OnEnchantState::InStep' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitEnchant.OnEnchantTraitItemDrag
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitEnchant_OnEnchantTraitItemDrag final
{
public:
	bool                                          InDrag;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitEnchant_OnEnchantTraitItemDrag) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitEnchant_OnEnchantTraitItemDrag");
static_assert(sizeof(TLUserWidgetItemTraitEnchant_OnEnchantTraitItemDrag) == 0x000001, "Wrong size on TLUserWidgetItemTraitEnchant_OnEnchantTraitItemDrag");
static_assert(offsetof(TLUserWidgetItemTraitEnchant_OnEnchantTraitItemDrag, InDrag) == 0x000000, "Member 'TLUserWidgetItemTraitEnchant_OnEnchantTraitItemDrag::InDrag' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitEnchant.OnItemGrade
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitEnchant_OnItemGrade final
{
public:
	EItemGrade                                    InItemGrade;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitEnchant_OnItemGrade) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitEnchant_OnItemGrade");
static_assert(sizeof(TLUserWidgetItemTraitEnchant_OnItemGrade) == 0x000001, "Wrong size on TLUserWidgetItemTraitEnchant_OnItemGrade");
static_assert(offsetof(TLUserWidgetItemTraitEnchant_OnItemGrade, InItemGrade) == 0x000000, "Member 'TLUserWidgetItemTraitEnchant_OnItemGrade::InItemGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitEnchant.OnNeedBlessPointRewardPlay
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetItemTraitEnchant_OnNeedBlessPointRewardPlay final
{
public:
	int32                                         PreviousProbabilityPercent;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddedProbabilityPercent;                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitEnchant_OnNeedBlessPointRewardPlay) == 0x000004, "Wrong alignment on TLUserWidgetItemTraitEnchant_OnNeedBlessPointRewardPlay");
static_assert(sizeof(TLUserWidgetItemTraitEnchant_OnNeedBlessPointRewardPlay) == 0x000008, "Wrong size on TLUserWidgetItemTraitEnchant_OnNeedBlessPointRewardPlay");
static_assert(offsetof(TLUserWidgetItemTraitEnchant_OnNeedBlessPointRewardPlay, PreviousProbabilityPercent) == 0x000000, "Member 'TLUserWidgetItemTraitEnchant_OnNeedBlessPointRewardPlay::PreviousProbabilityPercent' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTraitEnchant_OnNeedBlessPointRewardPlay, AddedProbabilityPercent) == 0x000004, "Member 'TLUserWidgetItemTraitEnchant_OnNeedBlessPointRewardPlay::AddedProbabilityPercent' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitEnchant.OnOpenItemTraitChange
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitEnchant_OnOpenItemTraitChange final
{
public:
	bool                                          InIsOpen;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitEnchant_OnOpenItemTraitChange) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitEnchant_OnOpenItemTraitChange");
static_assert(sizeof(TLUserWidgetItemTraitEnchant_OnOpenItemTraitChange) == 0x000001, "Wrong size on TLUserWidgetItemTraitEnchant_OnOpenItemTraitChange");
static_assert(offsetof(TLUserWidgetItemTraitEnchant_OnOpenItemTraitChange, InIsOpen) == 0x000000, "Member 'TLUserWidgetItemTraitEnchant_OnOpenItemTraitChange::InIsOpen' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitEnchant.OnOpenItemTraitOpen
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitEnchant_OnOpenItemTraitOpen final
{
public:
	bool                                          InIsOpen;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitEnchant_OnOpenItemTraitOpen) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitEnchant_OnOpenItemTraitOpen");
static_assert(sizeof(TLUserWidgetItemTraitEnchant_OnOpenItemTraitOpen) == 0x000001, "Wrong size on TLUserWidgetItemTraitEnchant_OnOpenItemTraitOpen");
static_assert(offsetof(TLUserWidgetItemTraitEnchant_OnOpenItemTraitOpen, InIsOpen) == 0x000000, "Member 'TLUserWidgetItemTraitEnchant_OnOpenItemTraitOpen::InIsOpen' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitEnchant.OnOpenItemTraitResonanceChange
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitEnchant_OnOpenItemTraitResonanceChange final
{
public:
	bool                                          InIsOpen;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitEnchant_OnOpenItemTraitResonanceChange) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitEnchant_OnOpenItemTraitResonanceChange");
static_assert(sizeof(TLUserWidgetItemTraitEnchant_OnOpenItemTraitResonanceChange) == 0x000001, "Wrong size on TLUserWidgetItemTraitEnchant_OnOpenItemTraitResonanceChange");
static_assert(offsetof(TLUserWidgetItemTraitEnchant_OnOpenItemTraitResonanceChange, InIsOpen) == 0x000000, "Member 'TLUserWidgetItemTraitEnchant_OnOpenItemTraitResonanceChange::InIsOpen' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitEnchant.OnOpenItemTraitResonanceSelectChange
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitEnchant_OnOpenItemTraitResonanceSelectChange final
{
public:
	bool                                          InIsOpen;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitEnchant_OnOpenItemTraitResonanceSelectChange) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitEnchant_OnOpenItemTraitResonanceSelectChange");
static_assert(sizeof(TLUserWidgetItemTraitEnchant_OnOpenItemTraitResonanceSelectChange) == 0x000001, "Wrong size on TLUserWidgetItemTraitEnchant_OnOpenItemTraitResonanceSelectChange");
static_assert(offsetof(TLUserWidgetItemTraitEnchant_OnOpenItemTraitResonanceSelectChange, InIsOpen) == 0x000000, "Member 'TLUserWidgetItemTraitEnchant_OnOpenItemTraitResonanceSelectChange::InIsOpen' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitEnchant.OnPlayRewardProgressBar
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetItemTraitEnchant_OnPlayRewardProgressBar final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitEnchant_OnPlayRewardProgressBar) == 0x000004, "Wrong alignment on TLUserWidgetItemTraitEnchant_OnPlayRewardProgressBar");
static_assert(sizeof(TLUserWidgetItemTraitEnchant_OnPlayRewardProgressBar) == 0x000004, "Wrong size on TLUserWidgetItemTraitEnchant_OnPlayRewardProgressBar");
static_assert(offsetof(TLUserWidgetItemTraitEnchant_OnPlayRewardProgressBar, Duration) == 0x000000, "Member 'TLUserWidgetItemTraitEnchant_OnPlayRewardProgressBar::Duration' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitEnchant.OnSetEnchantTargetItem
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitEnchant_OnSetEnchantTargetItem final
{
public:
	bool                                          InIsSet;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitEnchant_OnSetEnchantTargetItem) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitEnchant_OnSetEnchantTargetItem");
static_assert(sizeof(TLUserWidgetItemTraitEnchant_OnSetEnchantTargetItem) == 0x000001, "Wrong size on TLUserWidgetItemTraitEnchant_OnSetEnchantTargetItem");
static_assert(offsetof(TLUserWidgetItemTraitEnchant_OnSetEnchantTargetItem, InIsSet) == 0x000000, "Member 'TLUserWidgetItemTraitEnchant_OnSetEnchantTargetItem::InIsSet' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitEnchant.OnTraitItemSetup
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetItemTraitEnchant_OnTraitItemSetup final
{
public:
	bool                                          InIsOpenStat;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsExistMaterialItem;                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitEnchant_OnTraitItemSetup) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitEnchant_OnTraitItemSetup");
static_assert(sizeof(TLUserWidgetItemTraitEnchant_OnTraitItemSetup) == 0x000002, "Wrong size on TLUserWidgetItemTraitEnchant_OnTraitItemSetup");
static_assert(offsetof(TLUserWidgetItemTraitEnchant_OnTraitItemSetup, InIsOpenStat) == 0x000000, "Member 'TLUserWidgetItemTraitEnchant_OnTraitItemSetup::InIsOpenStat' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTraitEnchant_OnTraitItemSetup, InIsExistMaterialItem) == 0x000001, "Member 'TLUserWidgetItemTraitEnchant_OnTraitItemSetup::InIsExistMaterialItem' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitEnchant.OnUpdateItemTraitChangeType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitEnchant_OnUpdateItemTraitChangeType final
{
public:
	ETLItemTraitChangeType                        InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitEnchant_OnUpdateItemTraitChangeType) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitEnchant_OnUpdateItemTraitChangeType");
static_assert(sizeof(TLUserWidgetItemTraitEnchant_OnUpdateItemTraitChangeType) == 0x000001, "Wrong size on TLUserWidgetItemTraitEnchant_OnUpdateItemTraitChangeType");
static_assert(offsetof(TLUserWidgetItemTraitEnchant_OnUpdateItemTraitChangeType, InType) == 0x000000, "Member 'TLUserWidgetItemTraitEnchant_OnUpdateItemTraitChangeType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitProbSlot.OnOwnStat
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitProbSlot_OnOwnStat final
{
public:
	bool                                          InIsOwn;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitProbSlot_OnOwnStat) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitProbSlot_OnOwnStat");
static_assert(sizeof(TLUserWidgetItemTraitProbSlot_OnOwnStat) == 0x000001, "Wrong size on TLUserWidgetItemTraitProbSlot_OnOwnStat");
static_assert(offsetof(TLUserWidgetItemTraitProbSlot_OnOwnStat, InIsOwn) == 0x000000, "Member 'TLUserWidgetItemTraitProbSlot_OnOwnStat::InIsOwn' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitEnchantStatSlotLevel.OnActiveLevel
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetItemTraitEnchantStatSlotLevel_OnActiveLevel final
{
public:
	bool                                          InStageOn;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InCompareLevelValue;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitEnchantStatSlotLevel_OnActiveLevel) == 0x000004, "Wrong alignment on TLUserWidgetItemTraitEnchantStatSlotLevel_OnActiveLevel");
static_assert(sizeof(TLUserWidgetItemTraitEnchantStatSlotLevel_OnActiveLevel) == 0x000008, "Wrong size on TLUserWidgetItemTraitEnchantStatSlotLevel_OnActiveLevel");
static_assert(offsetof(TLUserWidgetItemTraitEnchantStatSlotLevel_OnActiveLevel, InStageOn) == 0x000000, "Member 'TLUserWidgetItemTraitEnchantStatSlotLevel_OnActiveLevel::InStageOn' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTraitEnchantStatSlotLevel_OnActiveLevel, InCompareLevelValue) == 0x000004, "Member 'TLUserWidgetItemTraitEnchantStatSlotLevel_OnActiveLevel::InCompareLevelValue' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconSavedPlace.Button_OnClicked
// 0x0070 (0x0070 - 0x0000)
struct TLUserWidgetMapIconSavedPlace_Button_OnClicked final
{
public:
	struct FPointerEvent                          InMouseEvent;                                      // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconSavedPlace_Button_OnClicked) == 0x000008, "Wrong alignment on TLUserWidgetMapIconSavedPlace_Button_OnClicked");
static_assert(sizeof(TLUserWidgetMapIconSavedPlace_Button_OnClicked) == 0x000070, "Wrong size on TLUserWidgetMapIconSavedPlace_Button_OnClicked");
static_assert(offsetof(TLUserWidgetMapIconSavedPlace_Button_OnClicked, InMouseEvent) == 0x000000, "Member 'TLUserWidgetMapIconSavedPlace_Button_OnClicked::InMouseEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetStatsText.OnUpdateName
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetStatsText_OnUpdateName final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetStatsText_OnUpdateName) == 0x000008, "Wrong alignment on TLUserWidgetStatsText_OnUpdateName");
static_assert(sizeof(TLUserWidgetStatsText_OnUpdateName) == 0x000018, "Wrong size on TLUserWidgetStatsText_OnUpdateName");
static_assert(offsetof(TLUserWidgetStatsText_OnUpdateName, InText) == 0x000000, "Member 'TLUserWidgetStatsText_OnUpdateName::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetStatsText.OnUpdateValue
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetStatsText_OnUpdateValue final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetStatsText_OnUpdateValue) == 0x000008, "Wrong alignment on TLUserWidgetStatsText_OnUpdateValue");
static_assert(sizeof(TLUserWidgetStatsText_OnUpdateValue) == 0x000018, "Wrong size on TLUserWidgetStatsText_OnUpdateValue");
static_assert(offsetof(TLUserWidgetStatsText_OnUpdateValue, InText) == 0x000000, "Member 'TLUserWidgetStatsText_OnUpdateValue::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitEnchantStatSlot.OnOpenStat
// 0x0003 (0x0003 - 0x0000)
struct TLUserWidgetItemTraitEnchantStatSlot_OnOpenStat final
{
public:
	bool                                          InIsOpenStat;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsSelectedMaterial;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsAvailableMaterial;                             // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitEnchantStatSlot_OnOpenStat) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitEnchantStatSlot_OnOpenStat");
static_assert(sizeof(TLUserWidgetItemTraitEnchantStatSlot_OnOpenStat) == 0x000003, "Wrong size on TLUserWidgetItemTraitEnchantStatSlot_OnOpenStat");
static_assert(offsetof(TLUserWidgetItemTraitEnchantStatSlot_OnOpenStat, InIsOpenStat) == 0x000000, "Member 'TLUserWidgetItemTraitEnchantStatSlot_OnOpenStat::InIsOpenStat' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTraitEnchantStatSlot_OnOpenStat, InIsSelectedMaterial) == 0x000001, "Member 'TLUserWidgetItemTraitEnchantStatSlot_OnOpenStat::InIsSelectedMaterial' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTraitEnchantStatSlot_OnOpenStat, InIsAvailableMaterial) == 0x000002, "Member 'TLUserWidgetItemTraitEnchantStatSlot_OnOpenStat::InIsAvailableMaterial' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitEnchantStatSlot.OnUpdateRedDot
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitEnchantStatSlot_OnUpdateRedDot final
{
public:
	bool                                          InIsOn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitEnchantStatSlot_OnUpdateRedDot) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitEnchantStatSlot_OnUpdateRedDot");
static_assert(sizeof(TLUserWidgetItemTraitEnchantStatSlot_OnUpdateRedDot) == 0x000001, "Wrong size on TLUserWidgetItemTraitEnchantStatSlot_OnUpdateRedDot");
static_assert(offsetof(TLUserWidgetItemTraitEnchantStatSlot_OnUpdateRedDot, InIsOn) == 0x000000, "Member 'TLUserWidgetItemTraitEnchantStatSlot_OnUpdateRedDot::InIsOn' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitResonanceSlot.OnOpenStat
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitResonanceSlot_OnOpenStat final
{
public:
	bool                                          InIsOpenStat;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitResonanceSlot_OnOpenStat) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitResonanceSlot_OnOpenStat");
static_assert(sizeof(TLUserWidgetItemTraitResonanceSlot_OnOpenStat) == 0x000001, "Wrong size on TLUserWidgetItemTraitResonanceSlot_OnOpenStat");
static_assert(offsetof(TLUserWidgetItemTraitResonanceSlot_OnOpenStat, InIsOpenStat) == 0x000000, "Member 'TLUserWidgetItemTraitResonanceSlot_OnOpenStat::InIsOpenStat' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitStatListSlot.OnOpenStat
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetItemTraitStatListSlot_OnOpenStat final
{
public:
	bool                                          InIsOpenStat;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsLocked;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitStatListSlot_OnOpenStat) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitStatListSlot_OnOpenStat");
static_assert(sizeof(TLUserWidgetItemTraitStatListSlot_OnOpenStat) == 0x000002, "Wrong size on TLUserWidgetItemTraitStatListSlot_OnOpenStat");
static_assert(offsetof(TLUserWidgetItemTraitStatListSlot_OnOpenStat, InIsOpenStat) == 0x000000, "Member 'TLUserWidgetItemTraitStatListSlot_OnOpenStat::InIsOpenStat' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTraitStatListSlot_OnOpenStat, InIsLocked) == 0x000001, "Member 'TLUserWidgetItemTraitStatListSlot_OnOpenStat::InIsLocked' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitStatListSlot.OnSelectedStat
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitStatListSlot_OnSelectedStat final
{
public:
	bool                                          InIsSelect;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitStatListSlot_OnSelectedStat) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitStatListSlot_OnSelectedStat");
static_assert(sizeof(TLUserWidgetItemTraitStatListSlot_OnSelectedStat) == 0x000001, "Wrong size on TLUserWidgetItemTraitStatListSlot_OnSelectedStat");
static_assert(offsetof(TLUserWidgetItemTraitStatListSlot_OnSelectedStat, InIsSelect) == 0x000000, "Member 'TLUserWidgetItemTraitStatListSlot_OnSelectedStat::InIsSelect' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitStatListSlot.OnUpdateRedDot
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitStatListSlot_OnUpdateRedDot final
{
public:
	bool                                          InIsOn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitStatListSlot_OnUpdateRedDot) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitStatListSlot_OnUpdateRedDot");
static_assert(sizeof(TLUserWidgetItemTraitStatListSlot_OnUpdateRedDot) == 0x000001, "Wrong size on TLUserWidgetItemTraitStatListSlot_OnUpdateRedDot");
static_assert(offsetof(TLUserWidgetItemTraitStatListSlot_OnUpdateRedDot, InIsOn) == 0x000000, "Member 'TLUserWidgetItemTraitStatListSlot_OnUpdateRedDot::InIsOn' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitExtract.OnLackMaterial
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitExtract_OnLackMaterial final
{
public:
	bool                                          InIsLack;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitExtract_OnLackMaterial) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitExtract_OnLackMaterial");
static_assert(sizeof(TLUserWidgetItemTraitExtract_OnLackMaterial) == 0x000001, "Wrong size on TLUserWidgetItemTraitExtract_OnLackMaterial");
static_assert(offsetof(TLUserWidgetItemTraitExtract_OnLackMaterial, InIsLack) == 0x000000, "Member 'TLUserWidgetItemTraitExtract_OnLackMaterial::InIsLack' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitExtract.OnLackMoney
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitExtract_OnLackMoney final
{
public:
	bool                                          InIsLack;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitExtract_OnLackMoney) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitExtract_OnLackMoney");
static_assert(sizeof(TLUserWidgetItemTraitExtract_OnLackMoney) == 0x000001, "Wrong size on TLUserWidgetItemTraitExtract_OnLackMoney");
static_assert(offsetof(TLUserWidgetItemTraitExtract_OnLackMoney, InIsLack) == 0x000000, "Member 'TLUserWidgetItemTraitExtract_OnLackMoney::InIsLack' has a wrong offset!");

// Function TLClient.TLUserWidgetStamina.OnFishingStaminaEmpty
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetStamina_OnFishingStaminaEmpty final
{
public:
	bool                                          IsEmpty;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetStamina_OnFishingStaminaEmpty) == 0x000001, "Wrong alignment on TLUserWidgetStamina_OnFishingStaminaEmpty");
static_assert(sizeof(TLUserWidgetStamina_OnFishingStaminaEmpty) == 0x000001, "Wrong size on TLUserWidgetStamina_OnFishingStaminaEmpty");
static_assert(offsetof(TLUserWidgetStamina_OnFishingStaminaEmpty, IsEmpty) == 0x000000, "Member 'TLUserWidgetStamina_OnFishingStaminaEmpty::IsEmpty' has a wrong offset!");

// Function TLClient.TLUserWidgetStamina.OnUpdateGaugeState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetStamina_OnUpdateGaugeState final
{
public:
	ETLStaminaGaugeState                          InOldState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetStamina_OnUpdateGaugeState) == 0x000001, "Wrong alignment on TLUserWidgetStamina_OnUpdateGaugeState");
static_assert(sizeof(TLUserWidgetStamina_OnUpdateGaugeState) == 0x000001, "Wrong size on TLUserWidgetStamina_OnUpdateGaugeState");
static_assert(offsetof(TLUserWidgetStamina_OnUpdateGaugeState, InOldState) == 0x000000, "Member 'TLUserWidgetStamina_OnUpdateGaugeState::InOldState' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitOpen.OnItemTraitOpenState
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetItemTraitOpen_OnItemTraitOpenState final
{
public:
	ETLItemChangeState                            InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsExistTargetTait;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitOpen_OnItemTraitOpenState) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitOpen_OnItemTraitOpenState");
static_assert(sizeof(TLUserWidgetItemTraitOpen_OnItemTraitOpenState) == 0x000002, "Wrong size on TLUserWidgetItemTraitOpen_OnItemTraitOpenState");
static_assert(offsetof(TLUserWidgetItemTraitOpen_OnItemTraitOpenState, InState) == 0x000000, "Member 'TLUserWidgetItemTraitOpen_OnItemTraitOpenState::InState' has a wrong offset!");
static_assert(offsetof(TLUserWidgetItemTraitOpen_OnItemTraitOpenState, InIsExistTargetTait) == 0x000001, "Member 'TLUserWidgetItemTraitOpen_OnItemTraitOpenState::InIsExistTargetTait' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitResonance.OnItemTraitResonanceChangeState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitResonance_OnItemTraitResonanceChangeState final
{
public:
	ETLItemChangeState                            InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitResonance_OnItemTraitResonanceChangeState) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitResonance_OnItemTraitResonanceChangeState");
static_assert(sizeof(TLUserWidgetItemTraitResonance_OnItemTraitResonanceChangeState) == 0x000001, "Wrong size on TLUserWidgetItemTraitResonance_OnItemTraitResonanceChangeState");
static_assert(offsetof(TLUserWidgetItemTraitResonance_OnItemTraitResonanceChangeState, InState) == 0x000000, "Member 'TLUserWidgetItemTraitResonance_OnItemTraitResonanceChangeState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitResonanceSelect.OnResonanceSelectChangeState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitResonanceSelect_OnResonanceSelectChangeState final
{
public:
	ETLItemChangeState                            InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitResonanceSelect_OnResonanceSelectChangeState) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitResonanceSelect_OnResonanceSelectChangeState");
static_assert(sizeof(TLUserWidgetItemTraitResonanceSelect_OnResonanceSelectChangeState) == 0x000001, "Wrong size on TLUserWidgetItemTraitResonanceSelect_OnResonanceSelectChangeState");
static_assert(offsetof(TLUserWidgetItemTraitResonanceSelect_OnResonanceSelectChangeState, InState) == 0x000000, "Member 'TLUserWidgetItemTraitResonanceSelect_OnResonanceSelectChangeState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetItemTraitResonanceSelectSlot.OnExistItemResonance
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetItemTraitResonanceSelectSlot_OnExistItemResonance final
{
public:
	bool                                          InExistResonance;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetItemTraitResonanceSelectSlot_OnExistItemResonance) == 0x000001, "Wrong alignment on TLUserWidgetItemTraitResonanceSelectSlot_OnExistItemResonance");
static_assert(sizeof(TLUserWidgetItemTraitResonanceSelectSlot_OnExistItemResonance) == 0x000001, "Wrong size on TLUserWidgetItemTraitResonanceSelectSlot_OnExistItemResonance");
static_assert(offsetof(TLUserWidgetItemTraitResonanceSelectSlot_OnExistItemResonance, InExistResonance) == 0x000000, "Member 'TLUserWidgetItemTraitResonanceSelectSlot_OnExistItemResonance::InExistResonance' has a wrong offset!");

// Function TLClient.TLUserWidgetJoinContentsMessage.OnSetRegionType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetJoinContentsMessage_OnSetRegionType final
{
public:
	EMapRegionType                                InCurRegionType;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetJoinContentsMessage_OnSetRegionType) == 0x000001, "Wrong alignment on TLUserWidgetJoinContentsMessage_OnSetRegionType");
static_assert(sizeof(TLUserWidgetJoinContentsMessage_OnSetRegionType) == 0x000001, "Wrong size on TLUserWidgetJoinContentsMessage_OnSetRegionType");
static_assert(offsetof(TLUserWidgetJoinContentsMessage_OnSetRegionType, InCurRegionType) == 0x000000, "Member 'TLUserWidgetJoinContentsMessage_OnSetRegionType::InCurRegionType' has a wrong offset!");

// Function TLClient.TLUserWidgetLobbyMain.OnCharacterDataUpdated
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetLobbyMain_OnCharacterDataUpdated final
{
public:
	bool                                          bHasCharacterData;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetLobbyMain_OnCharacterDataUpdated) == 0x000001, "Wrong alignment on TLUserWidgetLobbyMain_OnCharacterDataUpdated");
static_assert(sizeof(TLUserWidgetLobbyMain_OnCharacterDataUpdated) == 0x000001, "Wrong size on TLUserWidgetLobbyMain_OnCharacterDataUpdated");
static_assert(offsetof(TLUserWidgetLobbyMain_OnCharacterDataUpdated, bHasCharacterData) == 0x000000, "Member 'TLUserWidgetLobbyMain_OnCharacterDataUpdated::bHasCharacterData' has a wrong offset!");

// Function TLClient.TLUserWidgetMagicDoll.GetContextMenuWidget
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetMagicDoll_GetContextMenuWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMagicDoll_GetContextMenuWidget) == 0x000008, "Wrong alignment on TLUserWidgetMagicDoll_GetContextMenuWidget");
static_assert(sizeof(TLUserWidgetMagicDoll_GetContextMenuWidget) == 0x000008, "Wrong size on TLUserWidgetMagicDoll_GetContextMenuWidget");
static_assert(offsetof(TLUserWidgetMagicDoll_GetContextMenuWidget, ReturnValue) == 0x000000, "Member 'TLUserWidgetMagicDoll_GetContextMenuWidget::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetMagicDoll.HandleActiveWidgetChange
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetMagicDoll_HandleActiveWidgetChange final
{
public:
	int32                                         PrevIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewIndex;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMagicDoll_HandleActiveWidgetChange) == 0x000004, "Wrong alignment on TLUserWidgetMagicDoll_HandleActiveWidgetChange");
static_assert(sizeof(TLUserWidgetMagicDoll_HandleActiveWidgetChange) == 0x000008, "Wrong size on TLUserWidgetMagicDoll_HandleActiveWidgetChange");
static_assert(offsetof(TLUserWidgetMagicDoll_HandleActiveWidgetChange, PrevIndex) == 0x000000, "Member 'TLUserWidgetMagicDoll_HandleActiveWidgetChange::PrevIndex' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMagicDoll_HandleActiveWidgetChange, NewIndex) == 0x000004, "Member 'TLUserWidgetMagicDoll_HandleActiveWidgetChange::NewIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetMagicDoll.OnContentTabSelected
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMagicDoll_OnContentTabSelected final
{
public:
	ETLMagicDollUIContentType                     InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMagicDoll_OnContentTabSelected) == 0x000001, "Wrong alignment on TLUserWidgetMagicDoll_OnContentTabSelected");
static_assert(sizeof(TLUserWidgetMagicDoll_OnContentTabSelected) == 0x000001, "Wrong size on TLUserWidgetMagicDoll_OnContentTabSelected");
static_assert(offsetof(TLUserWidgetMagicDoll_OnContentTabSelected, InType) == 0x000000, "Member 'TLUserWidgetMagicDoll_OnContentTabSelected::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetMagicDollCollection.HandleSearchTextBoxCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetMagicDollCollection_HandleSearchTextBoxCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetMagicDollCollection_HandleSearchTextBoxCommitted) == 0x000008, "Wrong alignment on TLUserWidgetMagicDollCollection_HandleSearchTextBoxCommitted");
static_assert(sizeof(TLUserWidgetMagicDollCollection_HandleSearchTextBoxCommitted) == 0x000020, "Wrong size on TLUserWidgetMagicDollCollection_HandleSearchTextBoxCommitted");
static_assert(offsetof(TLUserWidgetMagicDollCollection_HandleSearchTextBoxCommitted, InText) == 0x000000, "Member 'TLUserWidgetMagicDollCollection_HandleSearchTextBoxCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMagicDollCollection_HandleSearchTextBoxCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetMagicDollCollection_HandleSearchTextBoxCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillTraitDetailSlot.OnClickTraitButtonSoundEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillTraitDetailSlot_OnClickTraitButtonSoundEvent final
{
public:
	bool                                          InActivate;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillTraitDetailSlot_OnClickTraitButtonSoundEvent) == 0x000001, "Wrong alignment on TLUserWidgetSkillTraitDetailSlot_OnClickTraitButtonSoundEvent");
static_assert(sizeof(TLUserWidgetSkillTraitDetailSlot_OnClickTraitButtonSoundEvent) == 0x000001, "Wrong size on TLUserWidgetSkillTraitDetailSlot_OnClickTraitButtonSoundEvent");
static_assert(offsetof(TLUserWidgetSkillTraitDetailSlot_OnClickTraitButtonSoundEvent, InActivate) == 0x000000, "Member 'TLUserWidgetSkillTraitDetailSlot_OnClickTraitButtonSoundEvent::InActivate' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillTraitDetailFrame.OnStartUpdateDetailSlotAnim
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillTraitDetailFrame_OnStartUpdateDetailSlotAnim final
{
public:
	bool                                          bActivate;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillTraitDetailFrame_OnStartUpdateDetailSlotAnim) == 0x000001, "Wrong alignment on TLUserWidgetSkillTraitDetailFrame_OnStartUpdateDetailSlotAnim");
static_assert(sizeof(TLUserWidgetSkillTraitDetailFrame_OnStartUpdateDetailSlotAnim) == 0x000001, "Wrong size on TLUserWidgetSkillTraitDetailFrame_OnStartUpdateDetailSlotAnim");
static_assert(offsetof(TLUserWidgetSkillTraitDetailFrame_OnStartUpdateDetailSlotAnim, bActivate) == 0x000000, "Member 'TLUserWidgetSkillTraitDetailFrame_OnStartUpdateDetailSlotAnim::bActivate' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillTraitTooltip.GetActionGuideAttachPanel
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetSkillTraitTooltip_GetActionGuideAttachPanel final
{
public:
	class UTLSizeBox*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillTraitTooltip_GetActionGuideAttachPanel) == 0x000008, "Wrong alignment on TLUserWidgetSkillTraitTooltip_GetActionGuideAttachPanel");
static_assert(sizeof(TLUserWidgetSkillTraitTooltip_GetActionGuideAttachPanel) == 0x000008, "Wrong size on TLUserWidgetSkillTraitTooltip_GetActionGuideAttachPanel");
static_assert(offsetof(TLUserWidgetSkillTraitTooltip_GetActionGuideAttachPanel, ReturnValue) == 0x000000, "Member 'TLUserWidgetSkillTraitTooltip_GetActionGuideAttachPanel::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetMagicDollExpeditionRegionBtn.OnUpdateExpeditionMagicdollCount
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateExpeditionMagicdollCount final
{
public:
	ETLUIMagicDollCount                           InCount;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateExpeditionMagicdollCount) == 0x000001, "Wrong alignment on TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateExpeditionMagicdollCount");
static_assert(sizeof(TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateExpeditionMagicdollCount) == 0x000001, "Wrong size on TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateExpeditionMagicdollCount");
static_assert(offsetof(TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateExpeditionMagicdollCount, InCount) == 0x000000, "Member 'TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateExpeditionMagicdollCount::InCount' has a wrong offset!");

// Function TLClient.TLUserWidgetMagicDollExpeditionRegionBtn.OnUpdateExpeditionRegionState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateExpeditionRegionState final
{
public:
	ETLExpeditionState                            State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateExpeditionRegionState) == 0x000001, "Wrong alignment on TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateExpeditionRegionState");
static_assert(sizeof(TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateExpeditionRegionState) == 0x000001, "Wrong size on TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateExpeditionRegionState");
static_assert(offsetof(TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateExpeditionRegionState, State) == 0x000000, "Member 'TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateExpeditionRegionState::State' has a wrong offset!");

// Function TLClient.TLUserWidgetMagicDollExpeditionRegionBtn.OnUpdateRegionOpened
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateRegionOpened final
{
public:
	bool                                          bInOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateRegionOpened) == 0x000001, "Wrong alignment on TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateRegionOpened");
static_assert(sizeof(TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateRegionOpened) == 0x000001, "Wrong size on TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateRegionOpened");
static_assert(offsetof(TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateRegionOpened, bInOpen) == 0x000000, "Member 'TLUserWidgetMagicDollExpeditionRegionBtn_OnUpdateRegionOpened::bInOpen' has a wrong offset!");

// Function TLClient.TLUserWidgetCameraViewButton.OnUpdateUserCameraType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetCameraViewButton_OnUpdateUserCameraType final
{
public:
	ETLUserCameraType                             InUserCameraType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCameraViewButton_OnUpdateUserCameraType) == 0x000001, "Wrong alignment on TLUserWidgetCameraViewButton_OnUpdateUserCameraType");
static_assert(sizeof(TLUserWidgetCameraViewButton_OnUpdateUserCameraType) == 0x000001, "Wrong size on TLUserWidgetCameraViewButton_OnUpdateUserCameraType");
static_assert(offsetof(TLUserWidgetCameraViewButton_OnUpdateUserCameraType, InUserCameraType) == 0x000000, "Member 'TLUserWidgetCameraViewButton_OnUpdateUserCameraType::InUserCameraType' has a wrong offset!");

// Function TLClient.TLUserWidgetInventoryButton.OnRedDotCountUpdated
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetInventoryButton_OnRedDotCountUpdated final
{
public:
	int32                                         InRedDotCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInventoryButton_OnRedDotCountUpdated) == 0x000004, "Wrong alignment on TLUserWidgetInventoryButton_OnRedDotCountUpdated");
static_assert(sizeof(TLUserWidgetInventoryButton_OnRedDotCountUpdated) == 0x000004, "Wrong size on TLUserWidgetInventoryButton_OnRedDotCountUpdated");
static_assert(offsetof(TLUserWidgetInventoryButton_OnRedDotCountUpdated, InRedDotCount) == 0x000000, "Member 'TLUserWidgetInventoryButton_OnRedDotCountUpdated::InRedDotCount' has a wrong offset!");

// Function TLClient.TLUserWidgetMainMenuCenter.SetNameplateRuleButtonIconText
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetMainMenuCenter_SetNameplateRuleButtonIconText final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMainMenuCenter_SetNameplateRuleButtonIconText) == 0x000008, "Wrong alignment on TLUserWidgetMainMenuCenter_SetNameplateRuleButtonIconText");
static_assert(sizeof(TLUserWidgetMainMenuCenter_SetNameplateRuleButtonIconText) == 0x000018, "Wrong size on TLUserWidgetMainMenuCenter_SetNameplateRuleButtonIconText");
static_assert(offsetof(TLUserWidgetMainMenuCenter_SetNameplateRuleButtonIconText, Value) == 0x000000, "Member 'TLUserWidgetMainMenuCenter_SetNameplateRuleButtonIconText::Value' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapRegionInfoSlotNpc.OnUnLockMemorial
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWorldMapRegionInfoSlotNpc_OnUnLockMemorial final
{
public:
	bool                                          IsUnLock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapRegionInfoSlotNpc_OnUnLockMemorial) == 0x000001, "Wrong alignment on TLUserWidgetWorldMapRegionInfoSlotNpc_OnUnLockMemorial");
static_assert(sizeof(TLUserWidgetWorldMapRegionInfoSlotNpc_OnUnLockMemorial) == 0x000001, "Wrong size on TLUserWidgetWorldMapRegionInfoSlotNpc_OnUnLockMemorial");
static_assert(offsetof(TLUserWidgetWorldMapRegionInfoSlotNpc_OnUnLockMemorial, IsUnLock) == 0x000000, "Member 'TLUserWidgetWorldMapRegionInfoSlotNpc_OnUnLockMemorial::IsUnLock' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapRegionInfoSlotNpc.OnUpdateNpcInfo
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetWorldMapRegionInfoSlotNpc_OnUpdateNpcInfo final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLCreatureRank                               InCreatureRank;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetWorldMapRegionInfoSlotNpc_OnUpdateNpcInfo) == 0x000004, "Wrong alignment on TLUserWidgetWorldMapRegionInfoSlotNpc_OnUpdateNpcInfo");
static_assert(sizeof(TLUserWidgetWorldMapRegionInfoSlotNpc_OnUpdateNpcInfo) == 0x000008, "Wrong size on TLUserWidgetWorldMapRegionInfoSlotNpc_OnUpdateNpcInfo");
static_assert(offsetof(TLUserWidgetWorldMapRegionInfoSlotNpc_OnUpdateNpcInfo, InLevel) == 0x000000, "Member 'TLUserWidgetWorldMapRegionInfoSlotNpc_OnUpdateNpcInfo::InLevel' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWorldMapRegionInfoSlotNpc_OnUpdateNpcInfo, InCreatureRank) == 0x000004, "Member 'TLUserWidgetWorldMapRegionInfoSlotNpc_OnUpdateNpcInfo::InCreatureRank' has a wrong offset!");

// Function TLClient.TLUserWidgetAddButton.OnActivate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetAddButton_OnActivate final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAddButton_OnActivate) == 0x000001, "Wrong alignment on TLUserWidgetAddButton_OnActivate");
static_assert(sizeof(TLUserWidgetAddButton_OnActivate) == 0x000001, "Wrong size on TLUserWidgetAddButton_OnActivate");
static_assert(offsetof(TLUserWidgetAddButton_OnActivate, bInValue) == 0x000000, "Member 'TLUserWidgetAddButton_OnActivate::bInValue' has a wrong offset!");

// Function TLClient.TLUserWidgetMenuDragSlot.OnDimmed
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMenuDragSlot_OnDimmed final
{
public:
	bool                                          bInDimmed;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMenuDragSlot_OnDimmed) == 0x000001, "Wrong alignment on TLUserWidgetMenuDragSlot_OnDimmed");
static_assert(sizeof(TLUserWidgetMenuDragSlot_OnDimmed) == 0x000001, "Wrong size on TLUserWidgetMenuDragSlot_OnDimmed");
static_assert(offsetof(TLUserWidgetMenuDragSlot_OnDimmed, bInDimmed) == 0x000000, "Member 'TLUserWidgetMenuDragSlot_OnDimmed::bInDimmed' has a wrong offset!");

// Function TLClient.TLUserWidgetTimeTableContextMenuList.OnUpdateScheduleType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTimeTableContextMenuList_OnUpdateScheduleType final
{
public:
	ETLEventScheduleType                          InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTimeTableContextMenuList_OnUpdateScheduleType) == 0x000001, "Wrong alignment on TLUserWidgetTimeTableContextMenuList_OnUpdateScheduleType");
static_assert(sizeof(TLUserWidgetTimeTableContextMenuList_OnUpdateScheduleType) == 0x000001, "Wrong size on TLUserWidgetTimeTableContextMenuList_OnUpdateScheduleType");
static_assert(offsetof(TLUserWidgetTimeTableContextMenuList_OnUpdateScheduleType, InType) == 0x000000, "Member 'TLUserWidgetTimeTableContextMenuList_OnUpdateScheduleType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetMapCaptionContents.HandleFilterCheckButtonOnChecked
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapCaptionContents_HandleFilterCheckButtonOnChecked final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapCaptionContents_HandleFilterCheckButtonOnChecked) == 0x000001, "Wrong alignment on TLUserWidgetMapCaptionContents_HandleFilterCheckButtonOnChecked");
static_assert(sizeof(TLUserWidgetMapCaptionContents_HandleFilterCheckButtonOnChecked) == 0x000001, "Wrong size on TLUserWidgetMapCaptionContents_HandleFilterCheckButtonOnChecked");
static_assert(offsetof(TLUserWidgetMapCaptionContents_HandleFilterCheckButtonOnChecked, bIsChecked) == 0x000000, "Member 'TLUserWidgetMapCaptionContents_HandleFilterCheckButtonOnChecked::bIsChecked' has a wrong offset!");

// Function TLClient.TLUserWidgetMapCaptionContents.HandleUpdateMapIconFilter
// 0x000C (0x000C - 0x0000)
struct TLUserWidgetMapCaptionContents_HandleUpdateMapIconFilter final
{
public:
	class FName                                   InMapIconFilterId;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsVisible;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInForceUpdate;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetMapCaptionContents_HandleUpdateMapIconFilter) == 0x000004, "Wrong alignment on TLUserWidgetMapCaptionContents_HandleUpdateMapIconFilter");
static_assert(sizeof(TLUserWidgetMapCaptionContents_HandleUpdateMapIconFilter) == 0x00000C, "Wrong size on TLUserWidgetMapCaptionContents_HandleUpdateMapIconFilter");
static_assert(offsetof(TLUserWidgetMapCaptionContents_HandleUpdateMapIconFilter, InMapIconFilterId) == 0x000000, "Member 'TLUserWidgetMapCaptionContents_HandleUpdateMapIconFilter::InMapIconFilterId' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMapCaptionContents_HandleUpdateMapIconFilter, InIsVisible) == 0x000008, "Member 'TLUserWidgetMapCaptionContents_HandleUpdateMapIconFilter::InIsVisible' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMapCaptionContents_HandleUpdateMapIconFilter, bInForceUpdate) == 0x000009, "Member 'TLUserWidgetMapCaptionContents_HandleUpdateMapIconFilter::bInForceUpdate' has a wrong offset!");

// Function TLClient.TLUserWidgetMapCaptionGroup.HandleExpandCheckButtonOnChecked
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapCaptionGroup_HandleExpandCheckButtonOnChecked final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapCaptionGroup_HandleExpandCheckButtonOnChecked) == 0x000001, "Wrong alignment on TLUserWidgetMapCaptionGroup_HandleExpandCheckButtonOnChecked");
static_assert(sizeof(TLUserWidgetMapCaptionGroup_HandleExpandCheckButtonOnChecked) == 0x000001, "Wrong size on TLUserWidgetMapCaptionGroup_HandleExpandCheckButtonOnChecked");
static_assert(offsetof(TLUserWidgetMapCaptionGroup_HandleExpandCheckButtonOnChecked, bIsChecked) == 0x000000, "Member 'TLUserWidgetMapCaptionGroup_HandleExpandCheckButtonOnChecked::bIsChecked' has a wrong offset!");

// Function TLClient.TLUserWidgetMapCaptionGroup.HandleUpdateMapCaptionGroupExpand
// 0x000C (0x000C - 0x0000)
struct TLUserWidgetMapCaptionGroup_HandleUpdateMapCaptionGroupExpand final
{
public:
	class FName                                   InGroupId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsExpand;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetMapCaptionGroup_HandleUpdateMapCaptionGroupExpand) == 0x000004, "Wrong alignment on TLUserWidgetMapCaptionGroup_HandleUpdateMapCaptionGroupExpand");
static_assert(sizeof(TLUserWidgetMapCaptionGroup_HandleUpdateMapCaptionGroupExpand) == 0x00000C, "Wrong size on TLUserWidgetMapCaptionGroup_HandleUpdateMapCaptionGroupExpand");
static_assert(offsetof(TLUserWidgetMapCaptionGroup_HandleUpdateMapCaptionGroupExpand, InGroupId) == 0x000000, "Member 'TLUserWidgetMapCaptionGroup_HandleUpdateMapCaptionGroupExpand::InGroupId' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMapCaptionGroup_HandleUpdateMapCaptionGroupExpand, InIsExpand) == 0x000008, "Member 'TLUserWidgetMapCaptionGroup_HandleUpdateMapCaptionGroupExpand::InIsExpand' has a wrong offset!");

// Function TLClient.TLUserWidgetTooltipItemTraitStatSlot.OnTraitStatState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTooltipItemTraitStatSlot_OnTraitStatState final
{
public:
	bool                                          InIsOpenStat;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTooltipItemTraitStatSlot_OnTraitStatState) == 0x000001, "Wrong alignment on TLUserWidgetTooltipItemTraitStatSlot_OnTraitStatState");
static_assert(sizeof(TLUserWidgetTooltipItemTraitStatSlot_OnTraitStatState) == 0x000001, "Wrong size on TLUserWidgetTooltipItemTraitStatSlot_OnTraitStatState");
static_assert(offsetof(TLUserWidgetTooltipItemTraitStatSlot_OnTraitStatState, InIsOpenStat) == 0x000000, "Member 'TLUserWidgetTooltipItemTraitStatSlot_OnTraitStatState::InIsOpenStat' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconDynamicEvent.OnDynamicEventFocusAnimation
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconDynamicEvent_OnDynamicEventFocusAnimation final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconDynamicEvent_OnDynamicEventFocusAnimation) == 0x000001, "Wrong alignment on TLUserWidgetMapIconDynamicEvent_OnDynamicEventFocusAnimation");
static_assert(sizeof(TLUserWidgetMapIconDynamicEvent_OnDynamicEventFocusAnimation) == 0x000001, "Wrong size on TLUserWidgetMapIconDynamicEvent_OnDynamicEventFocusAnimation");
static_assert(offsetof(TLUserWidgetMapIconDynamicEvent_OnDynamicEventFocusAnimation, IsEnable) == 0x000000, "Member 'TLUserWidgetMapIconDynamicEvent_OnDynamicEventFocusAnimation::IsEnable' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconDynamicEvent.OnUpdateScheduleType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconDynamicEvent_OnUpdateScheduleType final
{
public:
	ETLEventScheduleType                          InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconDynamicEvent_OnUpdateScheduleType) == 0x000001, "Wrong alignment on TLUserWidgetMapIconDynamicEvent_OnUpdateScheduleType");
static_assert(sizeof(TLUserWidgetMapIconDynamicEvent_OnUpdateScheduleType) == 0x000001, "Wrong size on TLUserWidgetMapIconDynamicEvent_OnUpdateScheduleType");
static_assert(offsetof(TLUserWidgetMapIconDynamicEvent_OnUpdateScheduleType, InType) == 0x000000, "Member 'TLUserWidgetMapIconDynamicEvent_OnUpdateScheduleType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetTooltipGuildHome.OnGuildHomeRaidStart
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTooltipGuildHome_OnGuildHomeRaidStart final
{
public:
	bool                                          InStart;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTooltipGuildHome_OnGuildHomeRaidStart) == 0x000001, "Wrong alignment on TLUserWidgetTooltipGuildHome_OnGuildHomeRaidStart");
static_assert(sizeof(TLUserWidgetTooltipGuildHome_OnGuildHomeRaidStart) == 0x000001, "Wrong size on TLUserWidgetTooltipGuildHome_OnGuildHomeRaidStart");
static_assert(offsetof(TLUserWidgetTooltipGuildHome_OnGuildHomeRaidStart, InStart) == 0x000000, "Member 'TLUserWidgetTooltipGuildHome_OnGuildHomeRaidStart::InStart' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconOccupationTooltip.OnUnLockMemorial
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconOccupationTooltip_OnUnLockMemorial final
{
public:
	bool                                          IsUnLock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconOccupationTooltip_OnUnLockMemorial) == 0x000001, "Wrong alignment on TLUserWidgetMapIconOccupationTooltip_OnUnLockMemorial");
static_assert(sizeof(TLUserWidgetMapIconOccupationTooltip_OnUnLockMemorial) == 0x000001, "Wrong size on TLUserWidgetMapIconOccupationTooltip_OnUnLockMemorial");
static_assert(offsetof(TLUserWidgetMapIconOccupationTooltip_OnUnLockMemorial, IsUnLock) == 0x000000, "Member 'TLUserWidgetMapIconOccupationTooltip_OnUnLockMemorial::IsUnLock' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconOccupationTooltip.OnUpdateBossSpawned
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconOccupationTooltip_OnUpdateBossSpawned final
{
public:
	bool                                          IsBossSpawned;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconOccupationTooltip_OnUpdateBossSpawned) == 0x000001, "Wrong alignment on TLUserWidgetMapIconOccupationTooltip_OnUpdateBossSpawned");
static_assert(sizeof(TLUserWidgetMapIconOccupationTooltip_OnUpdateBossSpawned) == 0x000001, "Wrong size on TLUserWidgetMapIconOccupationTooltip_OnUpdateBossSpawned");
static_assert(offsetof(TLUserWidgetMapIconOccupationTooltip_OnUpdateBossSpawned, IsBossSpawned) == 0x000000, "Member 'TLUserWidgetMapIconOccupationTooltip_OnUpdateBossSpawned::IsBossSpawned' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconOccupationTooltip.OnUpdateLocationEffect
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconOccupationTooltip_OnUpdateLocationEffect final
{
public:
	bool                                          InIsActiveEffect;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconOccupationTooltip_OnUpdateLocationEffect) == 0x000001, "Wrong alignment on TLUserWidgetMapIconOccupationTooltip_OnUpdateLocationEffect");
static_assert(sizeof(TLUserWidgetMapIconOccupationTooltip_OnUpdateLocationEffect) == 0x000001, "Wrong size on TLUserWidgetMapIconOccupationTooltip_OnUpdateLocationEffect");
static_assert(offsetof(TLUserWidgetMapIconOccupationTooltip_OnUpdateLocationEffect, InIsActiveEffect) == 0x000000, "Member 'TLUserWidgetMapIconOccupationTooltip_OnUpdateLocationEffect::InIsActiveEffect' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconOccupationTooltip.OnUpdatePointInfo
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconOccupationTooltip_OnUpdatePointInfo final
{
public:
	bool                                          InIsActiveInfo;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconOccupationTooltip_OnUpdatePointInfo) == 0x000001, "Wrong alignment on TLUserWidgetMapIconOccupationTooltip_OnUpdatePointInfo");
static_assert(sizeof(TLUserWidgetMapIconOccupationTooltip_OnUpdatePointInfo) == 0x000001, "Wrong size on TLUserWidgetMapIconOccupationTooltip_OnUpdatePointInfo");
static_assert(offsetof(TLUserWidgetMapIconOccupationTooltip_OnUpdatePointInfo, InIsActiveInfo) == 0x000000, "Member 'TLUserWidgetMapIconOccupationTooltip_OnUpdatePointInfo::InIsActiveInfo' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconOccupationTooltip.OnUpdateProductionInfo
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconOccupationTooltip_OnUpdateProductionInfo final
{
public:
	bool                                          InIsActiveInfo;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconOccupationTooltip_OnUpdateProductionInfo) == 0x000001, "Wrong alignment on TLUserWidgetMapIconOccupationTooltip_OnUpdateProductionInfo");
static_assert(sizeof(TLUserWidgetMapIconOccupationTooltip_OnUpdateProductionInfo) == 0x000001, "Wrong size on TLUserWidgetMapIconOccupationTooltip_OnUpdateProductionInfo");
static_assert(offsetof(TLUserWidgetMapIconOccupationTooltip_OnUpdateProductionInfo, InIsActiveInfo) == 0x000000, "Member 'TLUserWidgetMapIconOccupationTooltip_OnUpdateProductionInfo::InIsActiveInfo' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconOccupationTooltip.OnUpdateState
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetMapIconOccupationTooltip_OnUpdateState final
{
public:
	EOccupationType                               InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOccupationState                              InState;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconOccupationTooltip_OnUpdateState) == 0x000001, "Wrong alignment on TLUserWidgetMapIconOccupationTooltip_OnUpdateState");
static_assert(sizeof(TLUserWidgetMapIconOccupationTooltip_OnUpdateState) == 0x000002, "Wrong size on TLUserWidgetMapIconOccupationTooltip_OnUpdateState");
static_assert(offsetof(TLUserWidgetMapIconOccupationTooltip_OnUpdateState, InType) == 0x000000, "Member 'TLUserWidgetMapIconOccupationTooltip_OnUpdateState::InType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMapIconOccupationTooltip_OnUpdateState, InState) == 0x000001, "Member 'TLUserWidgetMapIconOccupationTooltip_OnUpdateState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconOccupation.OnUpdateIconColor
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetMapIconOccupation_OnUpdateIconColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconOccupation_OnUpdateIconColor) == 0x000004, "Wrong alignment on TLUserWidgetMapIconOccupation_OnUpdateIconColor");
static_assert(sizeof(TLUserWidgetMapIconOccupation_OnUpdateIconColor) == 0x000010, "Wrong size on TLUserWidgetMapIconOccupation_OnUpdateIconColor");
static_assert(offsetof(TLUserWidgetMapIconOccupation_OnUpdateIconColor, InColor) == 0x000000, "Member 'TLUserWidgetMapIconOccupation_OnUpdateIconColor::InColor' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconOccupation.OnUpdateInterEventState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconOccupation_OnUpdateInterEventState final
{
public:
	bool                                          InIsInterServerEvent;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconOccupation_OnUpdateInterEventState) == 0x000001, "Wrong alignment on TLUserWidgetMapIconOccupation_OnUpdateInterEventState");
static_assert(sizeof(TLUserWidgetMapIconOccupation_OnUpdateInterEventState) == 0x000001, "Wrong size on TLUserWidgetMapIconOccupation_OnUpdateInterEventState");
static_assert(offsetof(TLUserWidgetMapIconOccupation_OnUpdateInterEventState, InIsInterServerEvent) == 0x000000, "Member 'TLUserWidgetMapIconOccupation_OnUpdateInterEventState::InIsInterServerEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconOccupation.OnUpdateOccupationState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconOccupation_OnUpdateOccupationState final
{
public:
	EOccupationState                              InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconOccupation_OnUpdateOccupationState) == 0x000001, "Wrong alignment on TLUserWidgetMapIconOccupation_OnUpdateOccupationState");
static_assert(sizeof(TLUserWidgetMapIconOccupation_OnUpdateOccupationState) == 0x000001, "Wrong size on TLUserWidgetMapIconOccupation_OnUpdateOccupationState");
static_assert(offsetof(TLUserWidgetMapIconOccupation_OnUpdateOccupationState, InState) == 0x000000, "Member 'TLUserWidgetMapIconOccupation_OnUpdateOccupationState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconPin.Button_OnClicked
// 0x0070 (0x0070 - 0x0000)
struct TLUserWidgetMapIconPin_Button_OnClicked final
{
public:
	struct FPointerEvent                          InMouseEvent;                                      // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconPin_Button_OnClicked) == 0x000008, "Wrong alignment on TLUserWidgetMapIconPin_Button_OnClicked");
static_assert(sizeof(TLUserWidgetMapIconPin_Button_OnClicked) == 0x000070, "Wrong size on TLUserWidgetMapIconPin_Button_OnClicked");
static_assert(offsetof(TLUserWidgetMapIconPin_Button_OnClicked, InMouseEvent) == 0x000000, "Member 'TLUserWidgetMapIconPin_Button_OnClicked::InMouseEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconPlayer.OnAnotherPlaceIcon
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconPlayer_OnAnotherPlaceIcon final
{
public:
	bool                                          InIsAnotherPlace;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconPlayer_OnAnotherPlaceIcon) == 0x000001, "Wrong alignment on TLUserWidgetMapIconPlayer_OnAnotherPlaceIcon");
static_assert(sizeof(TLUserWidgetMapIconPlayer_OnAnotherPlaceIcon) == 0x000001, "Wrong size on TLUserWidgetMapIconPlayer_OnAnotherPlaceIcon");
static_assert(offsetof(TLUserWidgetMapIconPlayer_OnAnotherPlaceIcon, InIsAnotherPlace) == 0x000000, "Member 'TLUserWidgetMapIconPlayer_OnAnotherPlaceIcon::InIsAnotherPlace' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconText.OnCodexUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconText_OnCodexUpdate final
{
public:
	bool                                          IsActiveArea;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconText_OnCodexUpdate) == 0x000001, "Wrong alignment on TLUserWidgetMapIconText_OnCodexUpdate");
static_assert(sizeof(TLUserWidgetMapIconText_OnCodexUpdate) == 0x000001, "Wrong size on TLUserWidgetMapIconText_OnCodexUpdate");
static_assert(offsetof(TLUserWidgetMapIconText_OnCodexUpdate, IsActiveArea) == 0x000000, "Member 'TLUserWidgetMapIconText_OnCodexUpdate::IsActiveArea' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconText.OnContractUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconText_OnContractUpdate final
{
public:
	bool                                          IsActiveArea;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconText_OnContractUpdate) == 0x000001, "Wrong alignment on TLUserWidgetMapIconText_OnContractUpdate");
static_assert(sizeof(TLUserWidgetMapIconText_OnContractUpdate) == 0x000001, "Wrong size on TLUserWidgetMapIconText_OnContractUpdate");
static_assert(offsetof(TLUserWidgetMapIconText_OnContractUpdate, IsActiveArea) == 0x000000, "Member 'TLUserWidgetMapIconText_OnContractUpdate::IsActiveArea' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconText.OnGuildContractUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconText_OnGuildContractUpdate final
{
public:
	bool                                          IsActiveArea;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconText_OnGuildContractUpdate) == 0x000001, "Wrong alignment on TLUserWidgetMapIconText_OnGuildContractUpdate");
static_assert(sizeof(TLUserWidgetMapIconText_OnGuildContractUpdate) == 0x000001, "Wrong size on TLUserWidgetMapIconText_OnGuildContractUpdate");
static_assert(offsetof(TLUserWidgetMapIconText_OnGuildContractUpdate, IsActiveArea) == 0x000000, "Member 'TLUserWidgetMapIconText_OnGuildContractUpdate::IsActiveArea' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconText.OnUpdateWeatherEvent
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetMapIconText_OnUpdateWeatherEvent final
{
public:
	EWeatherType                                  WeatherType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTimeDay;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconText_OnUpdateWeatherEvent) == 0x000001, "Wrong alignment on TLUserWidgetMapIconText_OnUpdateWeatherEvent");
static_assert(sizeof(TLUserWidgetMapIconText_OnUpdateWeatherEvent) == 0x000002, "Wrong size on TLUserWidgetMapIconText_OnUpdateWeatherEvent");
static_assert(offsetof(TLUserWidgetMapIconText_OnUpdateWeatherEvent, WeatherType) == 0x000000, "Member 'TLUserWidgetMapIconText_OnUpdateWeatherEvent::WeatherType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMapIconText_OnUpdateWeatherEvent, bIsTimeDay) == 0x000001, "Member 'TLUserWidgetMapIconText_OnUpdateWeatherEvent::bIsTimeDay' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconThroneTooltip.OnUnLockMemorial
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconThroneTooltip_OnUnLockMemorial final
{
public:
	bool                                          IsUnLock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconThroneTooltip_OnUnLockMemorial) == 0x000001, "Wrong alignment on TLUserWidgetMapIconThroneTooltip_OnUnLockMemorial");
static_assert(sizeof(TLUserWidgetMapIconThroneTooltip_OnUnLockMemorial) == 0x000001, "Wrong size on TLUserWidgetMapIconThroneTooltip_OnUnLockMemorial");
static_assert(offsetof(TLUserWidgetMapIconThroneTooltip_OnUnLockMemorial, IsUnLock) == 0x000000, "Member 'TLUserWidgetMapIconThroneTooltip_OnUnLockMemorial::IsUnLock' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconThroneTooltip.OnUpdatePointInfo
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconThroneTooltip_OnUpdatePointInfo final
{
public:
	bool                                          InIsActiveInfo;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconThroneTooltip_OnUpdatePointInfo) == 0x000001, "Wrong alignment on TLUserWidgetMapIconThroneTooltip_OnUpdatePointInfo");
static_assert(sizeof(TLUserWidgetMapIconThroneTooltip_OnUpdatePointInfo) == 0x000001, "Wrong size on TLUserWidgetMapIconThroneTooltip_OnUpdatePointInfo");
static_assert(offsetof(TLUserWidgetMapIconThroneTooltip_OnUpdatePointInfo, InIsActiveInfo) == 0x000000, "Member 'TLUserWidgetMapIconThroneTooltip_OnUpdatePointInfo::InIsActiveInfo' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconThroneTooltip.OnUpdateProductionInfo
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconThroneTooltip_OnUpdateProductionInfo final
{
public:
	bool                                          InIsActiveInfo;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconThroneTooltip_OnUpdateProductionInfo) == 0x000001, "Wrong alignment on TLUserWidgetMapIconThroneTooltip_OnUpdateProductionInfo");
static_assert(sizeof(TLUserWidgetMapIconThroneTooltip_OnUpdateProductionInfo) == 0x000001, "Wrong size on TLUserWidgetMapIconThroneTooltip_OnUpdateProductionInfo");
static_assert(offsetof(TLUserWidgetMapIconThroneTooltip_OnUpdateProductionInfo, InIsActiveInfo) == 0x000000, "Member 'TLUserWidgetMapIconThroneTooltip_OnUpdateProductionInfo::InIsActiveInfo' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconThroneTooltip.OnUpdateState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconThroneTooltip_OnUpdateState final
{
public:
	ETLSiegeWarfareStatus                         InStatus;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconThroneTooltip_OnUpdateState) == 0x000001, "Wrong alignment on TLUserWidgetMapIconThroneTooltip_OnUpdateState");
static_assert(sizeof(TLUserWidgetMapIconThroneTooltip_OnUpdateState) == 0x000001, "Wrong size on TLUserWidgetMapIconThroneTooltip_OnUpdateState");
static_assert(offsetof(TLUserWidgetMapIconThroneTooltip_OnUpdateState, InStatus) == 0x000000, "Member 'TLUserWidgetMapIconThroneTooltip_OnUpdateState::InStatus' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconThroneTooltip.OnUpdateToolTipDescState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconThroneTooltip_OnUpdateToolTipDescState final
{
public:
	EMapIconThroneToolTipDescStateType            InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconThroneTooltip_OnUpdateToolTipDescState) == 0x000001, "Wrong alignment on TLUserWidgetMapIconThroneTooltip_OnUpdateToolTipDescState");
static_assert(sizeof(TLUserWidgetMapIconThroneTooltip_OnUpdateToolTipDescState) == 0x000001, "Wrong size on TLUserWidgetMapIconThroneTooltip_OnUpdateToolTipDescState");
static_assert(offsetof(TLUserWidgetMapIconThroneTooltip_OnUpdateToolTipDescState, InType) == 0x000000, "Member 'TLUserWidgetMapIconThroneTooltip_OnUpdateToolTipDescState::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetMapIconWorldPin.OnLastEditPin
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMapIconWorldPin_OnLastEditPin final
{
public:
	bool                                          IsLastPin;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMapIconWorldPin_OnLastEditPin) == 0x000001, "Wrong alignment on TLUserWidgetMapIconWorldPin_OnLastEditPin");
static_assert(sizeof(TLUserWidgetMapIconWorldPin_OnLastEditPin) == 0x000001, "Wrong size on TLUserWidgetMapIconWorldPin_OnLastEditPin");
static_assert(offsetof(TLUserWidgetMapIconWorldPin_OnLastEditPin, IsLastPin) == 0x000000, "Member 'TLUserWidgetMapIconWorldPin_OnLastEditPin::IsLastPin' has a wrong offset!");

// Function TLClient.TLUserWidgetMemorial.UpdateCompleted
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetMemorial_UpdateCompleted final
{
public:
	bool                                          InCompleted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InShow;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMemorial_UpdateCompleted) == 0x000001, "Wrong alignment on TLUserWidgetMemorial_UpdateCompleted");
static_assert(sizeof(TLUserWidgetMemorial_UpdateCompleted) == 0x000002, "Wrong size on TLUserWidgetMemorial_UpdateCompleted");
static_assert(offsetof(TLUserWidgetMemorial_UpdateCompleted, InCompleted) == 0x000000, "Member 'TLUserWidgetMemorial_UpdateCompleted::InCompleted' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMemorial_UpdateCompleted, InShow) == 0x000001, "Member 'TLUserWidgetMemorial_UpdateCompleted::InShow' has a wrong offset!");

// Function TLClient.TLUserWidgetMemorial.UpdateRecordStatus
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMemorial_UpdateRecordStatus final
{
public:
	EMemorialStatus                               InStatus;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMemorial_UpdateRecordStatus) == 0x000001, "Wrong alignment on TLUserWidgetMemorial_UpdateRecordStatus");
static_assert(sizeof(TLUserWidgetMemorial_UpdateRecordStatus) == 0x000001, "Wrong size on TLUserWidgetMemorial_UpdateRecordStatus");
static_assert(offsetof(TLUserWidgetMemorial_UpdateRecordStatus, InStatus) == 0x000000, "Member 'TLUserWidgetMemorial_UpdateRecordStatus::InStatus' has a wrong offset!");

// Function TLClient.TLUserWidgetMemorial.UpdateTimeoutType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMemorial_UpdateTimeoutType final
{
public:
	bool                                          InTimeout;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMemorial_UpdateTimeoutType) == 0x000001, "Wrong alignment on TLUserWidgetMemorial_UpdateTimeoutType");
static_assert(sizeof(TLUserWidgetMemorial_UpdateTimeoutType) == 0x000001, "Wrong size on TLUserWidgetMemorial_UpdateTimeoutType");
static_assert(offsetof(TLUserWidgetMemorial_UpdateTimeoutType, InTimeout) == 0x000000, "Member 'TLUserWidgetMemorial_UpdateTimeoutType::InTimeout' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimapEnvironment.OnMagicEclipseEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMinimapEnvironment_OnMagicEclipseEvent final
{
public:
	bool                                          IsStarted;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimapEnvironment_OnMagicEclipseEvent) == 0x000001, "Wrong alignment on TLUserWidgetMinimapEnvironment_OnMagicEclipseEvent");
static_assert(sizeof(TLUserWidgetMinimapEnvironment_OnMagicEclipseEvent) == 0x000001, "Wrong size on TLUserWidgetMinimapEnvironment_OnMagicEclipseEvent");
static_assert(offsetof(TLUserWidgetMinimapEnvironment_OnMagicEclipseEvent, IsStarted) == 0x000000, "Member 'TLUserWidgetMinimapEnvironment_OnMagicEclipseEvent::IsStarted' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimapEnvironment.OnMagicRainWidgetEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMinimapEnvironment_OnMagicRainWidgetEvent final
{
public:
	bool                                          IsStarted;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimapEnvironment_OnMagicRainWidgetEvent) == 0x000001, "Wrong alignment on TLUserWidgetMinimapEnvironment_OnMagicRainWidgetEvent");
static_assert(sizeof(TLUserWidgetMinimapEnvironment_OnMagicRainWidgetEvent) == 0x000001, "Wrong size on TLUserWidgetMinimapEnvironment_OnMagicRainWidgetEvent");
static_assert(offsetof(TLUserWidgetMinimapEnvironment_OnMagicRainWidgetEvent, IsStarted) == 0x000000, "Member 'TLUserWidgetMinimapEnvironment_OnMagicRainWidgetEvent::IsStarted' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimapEnvironment.OnMagicWindWidgetEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMinimapEnvironment_OnMagicWindWidgetEvent final
{
public:
	bool                                          IsStarted;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimapEnvironment_OnMagicWindWidgetEvent) == 0x000001, "Wrong alignment on TLUserWidgetMinimapEnvironment_OnMagicWindWidgetEvent");
static_assert(sizeof(TLUserWidgetMinimapEnvironment_OnMagicWindWidgetEvent) == 0x000001, "Wrong size on TLUserWidgetMinimapEnvironment_OnMagicWindWidgetEvent");
static_assert(offsetof(TLUserWidgetMinimapEnvironment_OnMagicWindWidgetEvent, IsStarted) == 0x000000, "Member 'TLUserWidgetMinimapEnvironment_OnMagicWindWidgetEvent::IsStarted' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimapWindInfo.OnChangeWindPowerAnim
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMinimapWindInfo_OnChangeWindPowerAnim final
{
public:
	ETLWindGrade                                  InWindPower;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimapWindInfo_OnChangeWindPowerAnim) == 0x000001, "Wrong alignment on TLUserWidgetMinimapWindInfo_OnChangeWindPowerAnim");
static_assert(sizeof(TLUserWidgetMinimapWindInfo_OnChangeWindPowerAnim) == 0x000001, "Wrong size on TLUserWidgetMinimapWindInfo_OnChangeWindPowerAnim");
static_assert(offsetof(TLUserWidgetMinimapWindInfo_OnChangeWindPowerAnim, InWindPower) == 0x000000, "Member 'TLUserWidgetMinimapWindInfo_OnChangeWindPowerAnim::InWindPower' has a wrong offset!");

// Function TLClient.TLUserWidgetMinimapWindInfo.OnChangeWindRotateAnim
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMinimapWindInfo_OnChangeWindRotateAnim final
{
public:
	ETLWindGrade                                  InWindPower;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMinimapWindInfo_OnChangeWindRotateAnim) == 0x000001, "Wrong alignment on TLUserWidgetMinimapWindInfo_OnChangeWindRotateAnim");
static_assert(sizeof(TLUserWidgetMinimapWindInfo_OnChangeWindRotateAnim) == 0x000001, "Wrong size on TLUserWidgetMinimapWindInfo_OnChangeWindRotateAnim");
static_assert(offsetof(TLUserWidgetMinimapWindInfo_OnChangeWindRotateAnim, InWindPower) == 0x000000, "Member 'TLUserWidgetMinimapWindInfo_OnChangeWindRotateAnim::InWindPower' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxComboInputBox.OnInputTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetMsgBoxComboInputBox_OnInputTextChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxComboInputBox_OnInputTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetMsgBoxComboInputBox_OnInputTextChanged");
static_assert(sizeof(TLUserWidgetMsgBoxComboInputBox_OnInputTextChanged) == 0x000018, "Wrong size on TLUserWidgetMsgBoxComboInputBox_OnInputTextChanged");
static_assert(offsetof(TLUserWidgetMsgBoxComboInputBox_OnInputTextChanged, InInputText) == 0x000000, "Member 'TLUserWidgetMsgBoxComboInputBox_OnInputTextChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxComboInputBox.OnInputTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetMsgBoxComboInputBox_OnInputTextCommitted final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetMsgBoxComboInputBox_OnInputTextCommitted) == 0x000008, "Wrong alignment on TLUserWidgetMsgBoxComboInputBox_OnInputTextCommitted");
static_assert(sizeof(TLUserWidgetMsgBoxComboInputBox_OnInputTextCommitted) == 0x000020, "Wrong size on TLUserWidgetMsgBoxComboInputBox_OnInputTextCommitted");
static_assert(offsetof(TLUserWidgetMsgBoxComboInputBox_OnInputTextCommitted, InInputText) == 0x000000, "Member 'TLUserWidgetMsgBoxComboInputBox_OnInputTextCommitted::InInputText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxComboInputBox_OnInputTextCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetMsgBoxComboInputBox_OnInputTextCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxSlider.OnValueChangedInternal
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetMsgBoxSlider_OnValueChangedInternal final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxSlider_OnValueChangedInternal) == 0x000004, "Wrong alignment on TLUserWidgetMsgBoxSlider_OnValueChangedInternal");
static_assert(sizeof(TLUserWidgetMsgBoxSlider_OnValueChangedInternal) == 0x000004, "Wrong size on TLUserWidgetMsgBoxSlider_OnValueChangedInternal");
static_assert(offsetof(TLUserWidgetMsgBoxSlider_OnValueChangedInternal, InValue) == 0x000000, "Member 'TLUserWidgetMsgBoxSlider_OnValueChangedInternal::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxSeasonPassPurchase.OnUpdateLevelInfo
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetMsgBoxSeasonPassPurchase_OnUpdateLevelInfo final
{
public:
	int32                                         InCurrentLevel;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCalcLevel;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxSeasonPassPurchase_OnUpdateLevelInfo) == 0x000004, "Wrong alignment on TLUserWidgetMsgBoxSeasonPassPurchase_OnUpdateLevelInfo");
static_assert(sizeof(TLUserWidgetMsgBoxSeasonPassPurchase_OnUpdateLevelInfo) == 0x000008, "Wrong size on TLUserWidgetMsgBoxSeasonPassPurchase_OnUpdateLevelInfo");
static_assert(offsetof(TLUserWidgetMsgBoxSeasonPassPurchase_OnUpdateLevelInfo, InCurrentLevel) == 0x000000, "Member 'TLUserWidgetMsgBoxSeasonPassPurchase_OnUpdateLevelInfo::InCurrentLevel' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxSeasonPassPurchase_OnUpdateLevelInfo, InCalcLevel) == 0x000004, "Member 'TLUserWidgetMsgBoxSeasonPassPurchase_OnUpdateLevelInfo::InCalcLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxTextInputPassword.OnInputPasswordTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetMsgBoxTextInputPassword_OnInputPasswordTextChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxTextInputPassword_OnInputPasswordTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetMsgBoxTextInputPassword_OnInputPasswordTextChanged");
static_assert(sizeof(TLUserWidgetMsgBoxTextInputPassword_OnInputPasswordTextChanged) == 0x000018, "Wrong size on TLUserWidgetMsgBoxTextInputPassword_OnInputPasswordTextChanged");
static_assert(offsetof(TLUserWidgetMsgBoxTextInputPassword_OnInputPasswordTextChanged, InInputText) == 0x000000, "Member 'TLUserWidgetMsgBoxTextInputPassword_OnInputPasswordTextChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxTextInputPassword.OnInputPasswordTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetMsgBoxTextInputPassword_OnInputPasswordTextCommitted final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetMsgBoxTextInputPassword_OnInputPasswordTextCommitted) == 0x000008, "Wrong alignment on TLUserWidgetMsgBoxTextInputPassword_OnInputPasswordTextCommitted");
static_assert(sizeof(TLUserWidgetMsgBoxTextInputPassword_OnInputPasswordTextCommitted) == 0x000020, "Wrong size on TLUserWidgetMsgBoxTextInputPassword_OnInputPasswordTextCommitted");
static_assert(offsetof(TLUserWidgetMsgBoxTextInputPassword_OnInputPasswordTextCommitted, InInputText) == 0x000000, "Member 'TLUserWidgetMsgBoxTextInputPassword_OnInputPasswordTextCommitted::InInputText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxTextInputPassword_OnInputPasswordTextCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetMsgBoxTextInputPassword_OnInputPasswordTextCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxTextInputPassword.OnInputTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetMsgBoxTextInputPassword_OnInputTextChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxTextInputPassword_OnInputTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetMsgBoxTextInputPassword_OnInputTextChanged");
static_assert(sizeof(TLUserWidgetMsgBoxTextInputPassword_OnInputTextChanged) == 0x000018, "Wrong size on TLUserWidgetMsgBoxTextInputPassword_OnInputTextChanged");
static_assert(offsetof(TLUserWidgetMsgBoxTextInputPassword_OnInputTextChanged, InInputText) == 0x000000, "Member 'TLUserWidgetMsgBoxTextInputPassword_OnInputTextChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxTextInputPassword.OnInputTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetMsgBoxTextInputPassword_OnInputTextCommitted final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetMsgBoxTextInputPassword_OnInputTextCommitted) == 0x000008, "Wrong alignment on TLUserWidgetMsgBoxTextInputPassword_OnInputTextCommitted");
static_assert(sizeof(TLUserWidgetMsgBoxTextInputPassword_OnInputTextCommitted) == 0x000020, "Wrong size on TLUserWidgetMsgBoxTextInputPassword_OnInputTextCommitted");
static_assert(offsetof(TLUserWidgetMsgBoxTextInputPassword_OnInputTextCommitted, InInputText) == 0x000000, "Member 'TLUserWidgetMsgBoxTextInputPassword_OnInputTextCommitted::InInputText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxTextInputPassword_OnInputTextCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetMsgBoxTextInputPassword_OnInputTextCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxWeaponMastery.OnHandleReceiveResult
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetMsgBoxWeaponMastery_OnHandleReceiveResult final
{
public:
	int32                                         EnabledStatSlotIndex;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetMaxStat;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetMsgBoxWeaponMastery_OnHandleReceiveResult) == 0x000004, "Wrong alignment on TLUserWidgetMsgBoxWeaponMastery_OnHandleReceiveResult");
static_assert(sizeof(TLUserWidgetMsgBoxWeaponMastery_OnHandleReceiveResult) == 0x000008, "Wrong size on TLUserWidgetMsgBoxWeaponMastery_OnHandleReceiveResult");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_OnHandleReceiveResult, EnabledStatSlotIndex) == 0x000000, "Member 'TLUserWidgetMsgBoxWeaponMastery_OnHandleReceiveResult::EnabledStatSlotIndex' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_OnHandleReceiveResult, bGetMaxStat) == 0x000004, "Member 'TLUserWidgetMsgBoxWeaponMastery_OnHandleReceiveResult::bGetMaxStat' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxWeaponMastery.OnPostResultShowEffect
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetMsgBoxWeaponMastery_OnPostResultShowEffect final
{
public:
	ETLWeaponMasteryType                          InMasteryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InStatMax;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxWeaponMastery_OnPostResultShowEffect) == 0x000001, "Wrong alignment on TLUserWidgetMsgBoxWeaponMastery_OnPostResultShowEffect");
static_assert(sizeof(TLUserWidgetMsgBoxWeaponMastery_OnPostResultShowEffect) == 0x000002, "Wrong size on TLUserWidgetMsgBoxWeaponMastery_OnPostResultShowEffect");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_OnPostResultShowEffect, InMasteryType) == 0x000000, "Member 'TLUserWidgetMsgBoxWeaponMastery_OnPostResultShowEffect::InMasteryType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_OnPostResultShowEffect, InStatMax) == 0x000001, "Member 'TLUserWidgetMsgBoxWeaponMastery_OnPostResultShowEffect::InStatMax' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxWeaponMastery.OnSetData
// 0x0050 (0x0050 - 0x0000)
struct TLUserWidgetMsgBoxWeaponMastery_OnSetData final
{
public:
	ETLWeaponMasteryType                          InMasteryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLWeaponMasteryUpType                        InUpType;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        InIconPath;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InName;                                            // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   InDesc;                                            // 0x0038(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxWeaponMastery_OnSetData) == 0x000008, "Wrong alignment on TLUserWidgetMsgBoxWeaponMastery_OnSetData");
static_assert(sizeof(TLUserWidgetMsgBoxWeaponMastery_OnSetData) == 0x000050, "Wrong size on TLUserWidgetMsgBoxWeaponMastery_OnSetData");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_OnSetData, InMasteryType) == 0x000000, "Member 'TLUserWidgetMsgBoxWeaponMastery_OnSetData::InMasteryType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_OnSetData, InUpType) == 0x000001, "Member 'TLUserWidgetMsgBoxWeaponMastery_OnSetData::InUpType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_OnSetData, InIconPath) == 0x000008, "Member 'TLUserWidgetMsgBoxWeaponMastery_OnSetData::InIconPath' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_OnSetData, InName) == 0x000020, "Member 'TLUserWidgetMsgBoxWeaponMastery_OnSetData::InName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_OnSetData, InDesc) == 0x000038, "Member 'TLUserWidgetMsgBoxWeaponMastery_OnSetData::InDesc' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxWeaponMastery.OnSetPointCandidate
// 0x0028 (0x0028 - 0x0000)
struct TLUserWidgetMsgBoxWeaponMastery_OnSetPointCandidate final
{
public:
	class UTLUserWidgetFrame*                     Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   PointText;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bShow;                                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetMsgBoxWeaponMastery_OnSetPointCandidate) == 0x000008, "Wrong alignment on TLUserWidgetMsgBoxWeaponMastery_OnSetPointCandidate");
static_assert(sizeof(TLUserWidgetMsgBoxWeaponMastery_OnSetPointCandidate) == 0x000028, "Wrong size on TLUserWidgetMsgBoxWeaponMastery_OnSetPointCandidate");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_OnSetPointCandidate, Widget) == 0x000000, "Member 'TLUserWidgetMsgBoxWeaponMastery_OnSetPointCandidate::Widget' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_OnSetPointCandidate, PointText) == 0x000008, "Member 'TLUserWidgetMsgBoxWeaponMastery_OnSetPointCandidate::PointText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_OnSetPointCandidate, bShow) == 0x000020, "Member 'TLUserWidgetMsgBoxWeaponMastery_OnSetPointCandidate::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxWeaponMastery.OnSetPointOld
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetMsgBoxWeaponMastery_OnSetPointOld final
{
public:
	class FText                                   CurPointText;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bShow;                                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetMsgBoxWeaponMastery_OnSetPointOld) == 0x000008, "Wrong alignment on TLUserWidgetMsgBoxWeaponMastery_OnSetPointOld");
static_assert(sizeof(TLUserWidgetMsgBoxWeaponMastery_OnSetPointOld) == 0x000020, "Wrong size on TLUserWidgetMsgBoxWeaponMastery_OnSetPointOld");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_OnSetPointOld, CurPointText) == 0x000000, "Member 'TLUserWidgetMsgBoxWeaponMastery_OnSetPointOld::CurPointText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_OnSetPointOld, bShow) == 0x000018, "Member 'TLUserWidgetMsgBoxWeaponMastery_OnSetPointOld::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxWeaponMastery.OnSetPointShow
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetMsgBoxWeaponMastery_OnSetPointShow final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxWeaponMastery_OnSetPointShow) == 0x000001, "Wrong alignment on TLUserWidgetMsgBoxWeaponMastery_OnSetPointShow");
static_assert(sizeof(TLUserWidgetMsgBoxWeaponMastery_OnSetPointShow) == 0x000001, "Wrong size on TLUserWidgetMsgBoxWeaponMastery_OnSetPointShow");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_OnSetPointShow, InShow) == 0x000000, "Member 'TLUserWidgetMsgBoxWeaponMastery_OnSetPointShow::InShow' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxWeaponMastery.OnUpdateGold
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetMsgBoxWeaponMastery_OnUpdateGold final
{
public:
	int64                                         InGold;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsEnough;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLWeaponMasteryUpType                        InUpType;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetMsgBoxWeaponMastery_OnUpdateGold) == 0x000008, "Wrong alignment on TLUserWidgetMsgBoxWeaponMastery_OnUpdateGold");
static_assert(sizeof(TLUserWidgetMsgBoxWeaponMastery_OnUpdateGold) == 0x000010, "Wrong size on TLUserWidgetMsgBoxWeaponMastery_OnUpdateGold");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_OnUpdateGold, InGold) == 0x000000, "Member 'TLUserWidgetMsgBoxWeaponMastery_OnUpdateGold::InGold' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_OnUpdateGold, bInIsEnough) == 0x000008, "Member 'TLUserWidgetMsgBoxWeaponMastery_OnUpdateGold::bInIsEnough' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_OnUpdateGold, InUpType) == 0x000009, "Member 'TLUserWidgetMsgBoxWeaponMastery_OnUpdateGold::InUpType' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxWeaponMastery.OnUpdateStatEffect
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetMsgBoxWeaponMastery_OnUpdateStatEffect final
{
public:
	int32                                         EnabledStatSlotIndex;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BMax;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetMsgBoxWeaponMastery_OnUpdateStatEffect) == 0x000004, "Wrong alignment on TLUserWidgetMsgBoxWeaponMastery_OnUpdateStatEffect");
static_assert(sizeof(TLUserWidgetMsgBoxWeaponMastery_OnUpdateStatEffect) == 0x000008, "Wrong size on TLUserWidgetMsgBoxWeaponMastery_OnUpdateStatEffect");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_OnUpdateStatEffect, EnabledStatSlotIndex) == 0x000000, "Member 'TLUserWidgetMsgBoxWeaponMastery_OnUpdateStatEffect::EnabledStatSlotIndex' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_OnUpdateStatEffect, BMax) == 0x000004, "Member 'TLUserWidgetMsgBoxWeaponMastery_OnUpdateStatEffect::BMax' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxWeaponMastery.SetWidgetActionGuide
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetMsgBoxWeaponMastery_SetWidgetActionGuide final
{
public:
	class UTLUserWidgetActionGuide*               InActionGuide;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxWeaponMastery_SetWidgetActionGuide) == 0x000008, "Wrong alignment on TLUserWidgetMsgBoxWeaponMastery_SetWidgetActionGuide");
static_assert(sizeof(TLUserWidgetMsgBoxWeaponMastery_SetWidgetActionGuide) == 0x000008, "Wrong size on TLUserWidgetMsgBoxWeaponMastery_SetWidgetActionGuide");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMastery_SetWidgetActionGuide, InActionGuide) == 0x000000, "Member 'TLUserWidgetMsgBoxWeaponMastery_SetWidgetActionGuide::InActionGuide' has a wrong offset!");

// Function TLClient.TLUserWidgetMsgBoxWeaponMasteryReset.OnSetData
// 0x0038 (0x0038 - 0x0000)
struct TLUserWidgetMsgBoxWeaponMasteryReset_OnSetData final
{
public:
	class FText                                   InStatText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         InGold;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsEnoughGold;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           EffectTexts;                                       // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetMsgBoxWeaponMasteryReset_OnSetData) == 0x000008, "Wrong alignment on TLUserWidgetMsgBoxWeaponMasteryReset_OnSetData");
static_assert(sizeof(TLUserWidgetMsgBoxWeaponMasteryReset_OnSetData) == 0x000038, "Wrong size on TLUserWidgetMsgBoxWeaponMasteryReset_OnSetData");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMasteryReset_OnSetData, InStatText) == 0x000000, "Member 'TLUserWidgetMsgBoxWeaponMasteryReset_OnSetData::InStatText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMasteryReset_OnSetData, InGold) == 0x000018, "Member 'TLUserWidgetMsgBoxWeaponMasteryReset_OnSetData::InGold' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMasteryReset_OnSetData, bInIsEnoughGold) == 0x000020, "Member 'TLUserWidgetMsgBoxWeaponMasteryReset_OnSetData::bInIsEnoughGold' has a wrong offset!");
static_assert(offsetof(TLUserWidgetMsgBoxWeaponMasteryReset_OnSetData, EffectTexts) == 0x000028, "Member 'TLUserWidgetMsgBoxWeaponMasteryReset_OnSetData::EffectTexts' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlateProgressBar.OnChangedHpAbnormalStatus
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetNamePlateProgressBar_OnChangedHpAbnormalStatus final
{
public:
	EHpAbnormalStatus                             InStatus;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbIsMyPc;                                         // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlateProgressBar_OnChangedHpAbnormalStatus) == 0x000001, "Wrong alignment on TLUserWidgetNamePlateProgressBar_OnChangedHpAbnormalStatus");
static_assert(sizeof(TLUserWidgetNamePlateProgressBar_OnChangedHpAbnormalStatus) == 0x000002, "Wrong size on TLUserWidgetNamePlateProgressBar_OnChangedHpAbnormalStatus");
static_assert(offsetof(TLUserWidgetNamePlateProgressBar_OnChangedHpAbnormalStatus, InStatus) == 0x000000, "Member 'TLUserWidgetNamePlateProgressBar_OnChangedHpAbnormalStatus::InStatus' has a wrong offset!");
static_assert(offsetof(TLUserWidgetNamePlateProgressBar_OnChangedHpAbnormalStatus, InbIsMyPc) == 0x000001, "Member 'TLUserWidgetNamePlateProgressBar_OnChangedHpAbnormalStatus::InbIsMyPc' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlateProgressBar.OnFocusTargeting
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlateProgressBar_OnFocusTargeting final
{
public:
	bool                                          InFocused;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlateProgressBar_OnFocusTargeting) == 0x000001, "Wrong alignment on TLUserWidgetNamePlateProgressBar_OnFocusTargeting");
static_assert(sizeof(TLUserWidgetNamePlateProgressBar_OnFocusTargeting) == 0x000001, "Wrong size on TLUserWidgetNamePlateProgressBar_OnFocusTargeting");
static_assert(offsetof(TLUserWidgetNamePlateProgressBar_OnFocusTargeting, InFocused) == 0x000000, "Member 'TLUserWidgetNamePlateProgressBar_OnFocusTargeting::InFocused' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlateProgressBar.OnUpdateHpBarStyle
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlateProgressBar_OnUpdateHpBarStyle final
{
public:
	EHpBarType                                    InHpBarType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlateProgressBar_OnUpdateHpBarStyle) == 0x000001, "Wrong alignment on TLUserWidgetNamePlateProgressBar_OnUpdateHpBarStyle");
static_assert(sizeof(TLUserWidgetNamePlateProgressBar_OnUpdateHpBarStyle) == 0x000001, "Wrong size on TLUserWidgetNamePlateProgressBar_OnUpdateHpBarStyle");
static_assert(offsetof(TLUserWidgetNamePlateProgressBar_OnUpdateHpBarStyle, InHpBarType) == 0x000000, "Member 'TLUserWidgetNamePlateProgressBar_OnUpdateHpBarStyle::InHpBarType' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlateProgressBar.OnUpdateOverridedRelationColor
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetNamePlateProgressBar_OnUpdateOverridedRelationColor final
{
public:
	struct FLinearColor                           InOverrideColor;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlateProgressBar_OnUpdateOverridedRelationColor) == 0x000004, "Wrong alignment on TLUserWidgetNamePlateProgressBar_OnUpdateOverridedRelationColor");
static_assert(sizeof(TLUserWidgetNamePlateProgressBar_OnUpdateOverridedRelationColor) == 0x000010, "Wrong size on TLUserWidgetNamePlateProgressBar_OnUpdateOverridedRelationColor");
static_assert(offsetof(TLUserWidgetNamePlateProgressBar_OnUpdateOverridedRelationColor, InOverrideColor) == 0x000000, "Member 'TLUserWidgetNamePlateProgressBar_OnUpdateOverridedRelationColor::InOverrideColor' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlateProgressBar.OnUpdateRelationToMyPc
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlateProgressBar_OnUpdateRelationToMyPc final
{
public:
	ETLRelationColorToMyPc                        InTLRelationColorToMyPc;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlateProgressBar_OnUpdateRelationToMyPc) == 0x000001, "Wrong alignment on TLUserWidgetNamePlateProgressBar_OnUpdateRelationToMyPc");
static_assert(sizeof(TLUserWidgetNamePlateProgressBar_OnUpdateRelationToMyPc) == 0x000001, "Wrong size on TLUserWidgetNamePlateProgressBar_OnUpdateRelationToMyPc");
static_assert(offsetof(TLUserWidgetNamePlateProgressBar_OnUpdateRelationToMyPc, InTLRelationColorToMyPc) == 0x000000, "Member 'TLUserWidgetNamePlateProgressBar_OnUpdateRelationToMyPc::InTLRelationColorToMyPc' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlateProgressBar.PlayHideHpAnim
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetNamePlateProgressBar_PlayHideHpAnim final
{
public:
	bool                                          InForward;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlateProgressBar_PlayHideHpAnim) == 0x000001, "Wrong alignment on TLUserWidgetNamePlateProgressBar_PlayHideHpAnim");
static_assert(sizeof(TLUserWidgetNamePlateProgressBar_PlayHideHpAnim) == 0x000001, "Wrong size on TLUserWidgetNamePlateProgressBar_PlayHideHpAnim");
static_assert(offsetof(TLUserWidgetNamePlateProgressBar_PlayHideHpAnim, InForward) == 0x000000, "Member 'TLUserWidgetNamePlateProgressBar_PlayHideHpAnim::InForward' has a wrong offset!");

// Function TLClient.TLUserWidgetNamePlateProgressBar.SetColorWithColorTable
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetNamePlateProgressBar_SetColorWithColorTable final
{
public:
	class FName                                   InTableColorKey;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNamePlateProgressBar_SetColorWithColorTable) == 0x000004, "Wrong alignment on TLUserWidgetNamePlateProgressBar_SetColorWithColorTable");
static_assert(sizeof(TLUserWidgetNamePlateProgressBar_SetColorWithColorTable) == 0x000008, "Wrong size on TLUserWidgetNamePlateProgressBar_SetColorWithColorTable");
static_assert(offsetof(TLUserWidgetNamePlateProgressBar_SetColorWithColorTable, InTableColorKey) == 0x000000, "Member 'TLUserWidgetNamePlateProgressBar_SetColorWithColorTable::InTableColorKey' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillExchangeDetail.OnChangeIngredientState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillExchangeDetail_OnChangeIngredientState final
{
public:
	bool                                          bEnough;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillExchangeDetail_OnChangeIngredientState) == 0x000001, "Wrong alignment on TLUserWidgetSkillExchangeDetail_OnChangeIngredientState");
static_assert(sizeof(TLUserWidgetSkillExchangeDetail_OnChangeIngredientState) == 0x000001, "Wrong size on TLUserWidgetSkillExchangeDetail_OnChangeIngredientState");
static_assert(offsetof(TLUserWidgetSkillExchangeDetail_OnChangeIngredientState, bEnough) == 0x000000, "Member 'TLUserWidgetSkillExchangeDetail_OnChangeIngredientState::bEnough' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillExchangeDetail.OnChangeTargetSkill
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillExchangeDetail_OnChangeTargetSkill final
{
public:
	bool                                          bExists;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillExchangeDetail_OnChangeTargetSkill) == 0x000001, "Wrong alignment on TLUserWidgetSkillExchangeDetail_OnChangeTargetSkill");
static_assert(sizeof(TLUserWidgetSkillExchangeDetail_OnChangeTargetSkill) == 0x000001, "Wrong size on TLUserWidgetSkillExchangeDetail_OnChangeTargetSkill");
static_assert(offsetof(TLUserWidgetSkillExchangeDetail_OnChangeTargetSkill, bExists) == 0x000000, "Member 'TLUserWidgetSkillExchangeDetail_OnChangeTargetSkill::bExists' has a wrong offset!");

// Function TLClient.TLUserWidgetNumPad.HandleFocusTextInputChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetNumPad_HandleFocusTextInputChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetNumPad_HandleFocusTextInputChanged) == 0x000008, "Wrong alignment on TLUserWidgetNumPad_HandleFocusTextInputChanged");
static_assert(sizeof(TLUserWidgetNumPad_HandleFocusTextInputChanged) == 0x000018, "Wrong size on TLUserWidgetNumPad_HandleFocusTextInputChanged");
static_assert(offsetof(TLUserWidgetNumPad_HandleFocusTextInputChanged, InInputText) == 0x000000, "Member 'TLUserWidgetNumPad_HandleFocusTextInputChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetNumPad.HandleFocusTextInputCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetNumPad_HandleFocusTextInputCommitted final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetNumPad_HandleFocusTextInputCommitted) == 0x000008, "Wrong alignment on TLUserWidgetNumPad_HandleFocusTextInputCommitted");
static_assert(sizeof(TLUserWidgetNumPad_HandleFocusTextInputCommitted) == 0x000020, "Wrong size on TLUserWidgetNumPad_HandleFocusTextInputCommitted");
static_assert(offsetof(TLUserWidgetNumPad_HandleFocusTextInputCommitted, InInputText) == 0x000000, "Member 'TLUserWidgetNumPad_HandleFocusTextInputCommitted::InInputText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetNumPad_HandleFocusTextInputCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetNumPad_HandleFocusTextInputCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetOccupationDeclareBoard.UpdateOccupactionState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetOccupationDeclareBoard_UpdateOccupactionState final
{
public:
	EOccupationState                              InOccupationState;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOccupationDeclareBoard_UpdateOccupactionState) == 0x000001, "Wrong alignment on TLUserWidgetOccupationDeclareBoard_UpdateOccupactionState");
static_assert(sizeof(TLUserWidgetOccupationDeclareBoard_UpdateOccupactionState) == 0x000001, "Wrong size on TLUserWidgetOccupationDeclareBoard_UpdateOccupactionState");
static_assert(offsetof(TLUserWidgetOccupationDeclareBoard_UpdateOccupactionState, InOccupationState) == 0x000000, "Member 'TLUserWidgetOccupationDeclareBoard_UpdateOccupactionState::InOccupationState' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpIngredient.HandleContinuousEnchantBtnChecked
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillLevelUpIngredient_HandleContinuousEnchantBtnChecked final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpIngredient_HandleContinuousEnchantBtnChecked) == 0x000001, "Wrong alignment on TLUserWidgetSkillLevelUpIngredient_HandleContinuousEnchantBtnChecked");
static_assert(sizeof(TLUserWidgetSkillLevelUpIngredient_HandleContinuousEnchantBtnChecked) == 0x000001, "Wrong size on TLUserWidgetSkillLevelUpIngredient_HandleContinuousEnchantBtnChecked");
static_assert(offsetof(TLUserWidgetSkillLevelUpIngredient_HandleContinuousEnchantBtnChecked, bIsChecked) == 0x000000, "Member 'TLUserWidgetSkillLevelUpIngredient_HandleContinuousEnchantBtnChecked::bIsChecked' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpIngredient.OnConsumeCountUpdateEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillLevelUpIngredient_OnConsumeCountUpdateEvent final
{
public:
	bool                                          bVisibleItemCount;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpIngredient_OnConsumeCountUpdateEvent) == 0x000001, "Wrong alignment on TLUserWidgetSkillLevelUpIngredient_OnConsumeCountUpdateEvent");
static_assert(sizeof(TLUserWidgetSkillLevelUpIngredient_OnConsumeCountUpdateEvent) == 0x000001, "Wrong size on TLUserWidgetSkillLevelUpIngredient_OnConsumeCountUpdateEvent");
static_assert(offsetof(TLUserWidgetSkillLevelUpIngredient_OnConsumeCountUpdateEvent, bVisibleItemCount) == 0x000000, "Member 'TLUserWidgetSkillLevelUpIngredient_OnConsumeCountUpdateEvent::bVisibleItemCount' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpIngredient.OnDimmed
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillLevelUpIngredient_OnDimmed final
{
public:
	bool                                          InDimmed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpIngredient_OnDimmed) == 0x000001, "Wrong alignment on TLUserWidgetSkillLevelUpIngredient_OnDimmed");
static_assert(sizeof(TLUserWidgetSkillLevelUpIngredient_OnDimmed) == 0x000001, "Wrong size on TLUserWidgetSkillLevelUpIngredient_OnDimmed");
static_assert(offsetof(TLUserWidgetSkillLevelUpIngredient_OnDimmed, InDimmed) == 0x000000, "Member 'TLUserWidgetSkillLevelUpIngredient_OnDimmed::InDimmed' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpIngredient.OnItemSlotSelectEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillLevelUpIngredient_OnItemSlotSelectEvent final
{
public:
	bool                                          bSelect;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpIngredient_OnItemSlotSelectEvent) == 0x000001, "Wrong alignment on TLUserWidgetSkillLevelUpIngredient_OnItemSlotSelectEvent");
static_assert(sizeof(TLUserWidgetSkillLevelUpIngredient_OnItemSlotSelectEvent) == 0x000001, "Wrong size on TLUserWidgetSkillLevelUpIngredient_OnItemSlotSelectEvent");
static_assert(offsetof(TLUserWidgetSkillLevelUpIngredient_OnItemSlotSelectEvent, bSelect) == 0x000000, "Member 'TLUserWidgetSkillLevelUpIngredient_OnItemSlotSelectEvent::bSelect' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpIngredient.OnPossibleExchaneable
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillLevelUpIngredient_OnPossibleExchaneable final
{
public:
	bool                                          bPossible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpIngredient_OnPossibleExchaneable) == 0x000001, "Wrong alignment on TLUserWidgetSkillLevelUpIngredient_OnPossibleExchaneable");
static_assert(sizeof(TLUserWidgetSkillLevelUpIngredient_OnPossibleExchaneable) == 0x000001, "Wrong size on TLUserWidgetSkillLevelUpIngredient_OnPossibleExchaneable");
static_assert(offsetof(TLUserWidgetSkillLevelUpIngredient_OnPossibleExchaneable, bPossible) == 0x000000, "Member 'TLUserWidgetSkillLevelUpIngredient_OnPossibleExchaneable::bPossible' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpIngredient.OnUpdateItemCount
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetSkillLevelUpIngredient_OnUpdateItemCount final
{
public:
	int64                                         ItemCount;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbSelect;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbLock;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetSkillLevelUpIngredient_OnUpdateItemCount) == 0x000008, "Wrong alignment on TLUserWidgetSkillLevelUpIngredient_OnUpdateItemCount");
static_assert(sizeof(TLUserWidgetSkillLevelUpIngredient_OnUpdateItemCount) == 0x000010, "Wrong size on TLUserWidgetSkillLevelUpIngredient_OnUpdateItemCount");
static_assert(offsetof(TLUserWidgetSkillLevelUpIngredient_OnUpdateItemCount, ItemCount) == 0x000000, "Member 'TLUserWidgetSkillLevelUpIngredient_OnUpdateItemCount::ItemCount' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillLevelUpIngredient_OnUpdateItemCount, InbSelect) == 0x000008, "Member 'TLUserWidgetSkillLevelUpIngredient_OnUpdateItemCount::InbSelect' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillLevelUpIngredient_OnUpdateItemCount, InbLock) == 0x000009, "Member 'TLUserWidgetSkillLevelUpIngredient_OnUpdateItemCount::InbLock' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpIngredient.OnUpdateItemName
// 0x0040 (0x0040 - 0x0000)
struct TLUserWidgetSkillLevelUpIngredient_OnUpdateItemName final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSlateColor                            InColor;                                           // 0x0018(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpIngredient_OnUpdateItemName) == 0x000008, "Wrong alignment on TLUserWidgetSkillLevelUpIngredient_OnUpdateItemName");
static_assert(sizeof(TLUserWidgetSkillLevelUpIngredient_OnUpdateItemName) == 0x000040, "Wrong size on TLUserWidgetSkillLevelUpIngredient_OnUpdateItemName");
static_assert(offsetof(TLUserWidgetSkillLevelUpIngredient_OnUpdateItemName, InName) == 0x000000, "Member 'TLUserWidgetSkillLevelUpIngredient_OnUpdateItemName::InName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillLevelUpIngredient_OnUpdateItemName, InColor) == 0x000018, "Member 'TLUserWidgetSkillLevelUpIngredient_OnUpdateItemName::InColor' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpIngredient.OnUpdateItemSelect
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillLevelUpIngredient_OnUpdateItemSelect final
{
public:
	bool                                          InbSelect;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpIngredient_OnUpdateItemSelect) == 0x000001, "Wrong alignment on TLUserWidgetSkillLevelUpIngredient_OnUpdateItemSelect");
static_assert(sizeof(TLUserWidgetSkillLevelUpIngredient_OnUpdateItemSelect) == 0x000001, "Wrong size on TLUserWidgetSkillLevelUpIngredient_OnUpdateItemSelect");
static_assert(offsetof(TLUserWidgetSkillLevelUpIngredient_OnUpdateItemSelect, InbSelect) == 0x000000, "Member 'TLUserWidgetSkillLevelUpIngredient_OnUpdateItemSelect::InbSelect' has a wrong offset!");

// Function TLClient.TLUserWidgetOccupationGuideBossStoneGuildItem.OnGuildRelationByMe
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetOccupationGuideBossStoneGuildItem_OnGuildRelationByMe final
{
public:
	EGuildRelationship                            InRelation;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOccupationGuideBossStoneGuildItem_OnGuildRelationByMe) == 0x000001, "Wrong alignment on TLUserWidgetOccupationGuideBossStoneGuildItem_OnGuildRelationByMe");
static_assert(sizeof(TLUserWidgetOccupationGuideBossStoneGuildItem_OnGuildRelationByMe) == 0x000001, "Wrong size on TLUserWidgetOccupationGuideBossStoneGuildItem_OnGuildRelationByMe");
static_assert(offsetof(TLUserWidgetOccupationGuideBossStoneGuildItem_OnGuildRelationByMe, InRelation) == 0x000000, "Member 'TLUserWidgetOccupationGuideBossStoneGuildItem_OnGuildRelationByMe::InRelation' has a wrong offset!");

// Function TLClient.TLUserWidgetOccupationGuideBossStoneGuildItem.OnTopRankingGuild
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetOccupationGuideBossStoneGuildItem_OnTopRankingGuild final
{
public:
	bool                                          InIsTop;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOccupationGuideBossStoneGuildItem_OnTopRankingGuild) == 0x000001, "Wrong alignment on TLUserWidgetOccupationGuideBossStoneGuildItem_OnTopRankingGuild");
static_assert(sizeof(TLUserWidgetOccupationGuideBossStoneGuildItem_OnTopRankingGuild) == 0x000001, "Wrong size on TLUserWidgetOccupationGuideBossStoneGuildItem_OnTopRankingGuild");
static_assert(offsetof(TLUserWidgetOccupationGuideBossStoneGuildItem_OnTopRankingGuild, InIsTop) == 0x000000, "Member 'TLUserWidgetOccupationGuideBossStoneGuildItem_OnTopRankingGuild::InIsTop' has a wrong offset!");

// Function TLClient.TLUserWidgetOccupationGuideBossStoneGuildItem.OnUpdatePointStep
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetOccupationGuideBossStoneGuildItem_OnUpdatePointStep final
{
public:
	int32                                         InPointStep;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOccupationGuideBossStoneGuildItem_OnUpdatePointStep) == 0x000004, "Wrong alignment on TLUserWidgetOccupationGuideBossStoneGuildItem_OnUpdatePointStep");
static_assert(sizeof(TLUserWidgetOccupationGuideBossStoneGuildItem_OnUpdatePointStep) == 0x000004, "Wrong size on TLUserWidgetOccupationGuideBossStoneGuildItem_OnUpdatePointStep");
static_assert(offsetof(TLUserWidgetOccupationGuideBossStoneGuildItem_OnUpdatePointStep, InPointStep) == 0x000000, "Member 'TLUserWidgetOccupationGuideBossStoneGuildItem_OnUpdatePointStep::InPointStep' has a wrong offset!");

// Function TLClient.TLUserWidgetOccupationGuideRegionStone.OnUsurpingGuildRelation
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetOccupationGuideRegionStone_OnUsurpingGuildRelation final
{
public:
	EGuildRelationship                            InRelation;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOccupationGuideRegionStone_OnUsurpingGuildRelation) == 0x000001, "Wrong alignment on TLUserWidgetOccupationGuideRegionStone_OnUsurpingGuildRelation");
static_assert(sizeof(TLUserWidgetOccupationGuideRegionStone_OnUsurpingGuildRelation) == 0x000001, "Wrong size on TLUserWidgetOccupationGuideRegionStone_OnUsurpingGuildRelation");
static_assert(offsetof(TLUserWidgetOccupationGuideRegionStone_OnUsurpingGuildRelation, InRelation) == 0x000000, "Member 'TLUserWidgetOccupationGuideRegionStone_OnUsurpingGuildRelation::InRelation' has a wrong offset!");

// Function TLClient.TLUserWidgetOccupationGuideRegionStone.UpdateState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetOccupationGuideRegionStone_UpdateState final
{
public:
	EOccupationState                              InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOccupationGuideRegionStone_UpdateState) == 0x000001, "Wrong alignment on TLUserWidgetOccupationGuideRegionStone_UpdateState");
static_assert(sizeof(TLUserWidgetOccupationGuideRegionStone_UpdateState) == 0x000001, "Wrong size on TLUserWidgetOccupationGuideRegionStone_UpdateState");
static_assert(offsetof(TLUserWidgetOccupationGuideRegionStone_UpdateState, InState) == 0x000000, "Member 'TLUserWidgetOccupationGuideRegionStone_UpdateState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetOccupationNotifyHud.OnShowOccupationNotify
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetOccupationNotifyHud_OnShowOccupationNotify final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOccupationNotifyHud_OnShowOccupationNotify) == 0x000001, "Wrong alignment on TLUserWidgetOccupationNotifyHud_OnShowOccupationNotify");
static_assert(sizeof(TLUserWidgetOccupationNotifyHud_OnShowOccupationNotify) == 0x000001, "Wrong size on TLUserWidgetOccupationNotifyHud_OnShowOccupationNotify");
static_assert(offsetof(TLUserWidgetOccupationNotifyHud_OnShowOccupationNotify, InIsShow) == 0x000000, "Member 'TLUserWidgetOccupationNotifyHud_OnShowOccupationNotify::InIsShow' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillMasteryWeaponEffect.OnSetTooltipActivated
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillMasteryWeaponEffect_OnSetTooltipActivated final
{
public:
	bool                                          bMainWeaponSet;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillMasteryWeaponEffect_OnSetTooltipActivated) == 0x000001, "Wrong alignment on TLUserWidgetSkillMasteryWeaponEffect_OnSetTooltipActivated");
static_assert(sizeof(TLUserWidgetSkillMasteryWeaponEffect_OnSetTooltipActivated) == 0x000001, "Wrong size on TLUserWidgetSkillMasteryWeaponEffect_OnSetTooltipActivated");
static_assert(offsetof(TLUserWidgetSkillMasteryWeaponEffect_OnSetTooltipActivated, bMainWeaponSet) == 0x000000, "Member 'TLUserWidgetSkillMasteryWeaponEffect_OnSetTooltipActivated::bMainWeaponSet' has a wrong offset!");

// Function TLClient.TLUserWidgetAcquisitionInfoGuideButton.OnAcquisitionTypeUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetAcquisitionInfoGuideButton_OnAcquisitionTypeUpdate final
{
public:
	ETLAcquisitionContentType                     InAcquisitionType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetAcquisitionInfoGuideButton_OnAcquisitionTypeUpdate) == 0x000001, "Wrong alignment on TLUserWidgetAcquisitionInfoGuideButton_OnAcquisitionTypeUpdate");
static_assert(sizeof(TLUserWidgetAcquisitionInfoGuideButton_OnAcquisitionTypeUpdate) == 0x000001, "Wrong size on TLUserWidgetAcquisitionInfoGuideButton_OnAcquisitionTypeUpdate");
static_assert(offsetof(TLUserWidgetAcquisitionInfoGuideButton_OnAcquisitionTypeUpdate, InAcquisitionType) == 0x000000, "Member 'TLUserWidgetAcquisitionInfoGuideButton_OnAcquisitionTypeUpdate::InAcquisitionType' has a wrong offset!");

// Function TLClient.TLUserWidgetOptionGameValueBool.HandleButtonChecked
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetOptionGameValueBool_HandleButtonChecked final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOptionGameValueBool_HandleButtonChecked) == 0x000001, "Wrong alignment on TLUserWidgetOptionGameValueBool_HandleButtonChecked");
static_assert(sizeof(TLUserWidgetOptionGameValueBool_HandleButtonChecked) == 0x000001, "Wrong size on TLUserWidgetOptionGameValueBool_HandleButtonChecked");
static_assert(offsetof(TLUserWidgetOptionGameValueBool_HandleButtonChecked, bIsChecked) == 0x000000, "Member 'TLUserWidgetOptionGameValueBool_HandleButtonChecked::bIsChecked' has a wrong offset!");

// Function TLClient.TLUserWidgetOptionGameValueBool.HandleCheckStateChanged
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetOptionGameValueBool_HandleCheckStateChanged final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOptionGameValueBool_HandleCheckStateChanged) == 0x000001, "Wrong alignment on TLUserWidgetOptionGameValueBool_HandleCheckStateChanged");
static_assert(sizeof(TLUserWidgetOptionGameValueBool_HandleCheckStateChanged) == 0x000001, "Wrong size on TLUserWidgetOptionGameValueBool_HandleCheckStateChanged");
static_assert(offsetof(TLUserWidgetOptionGameValueBool_HandleCheckStateChanged, bIsChecked) == 0x000000, "Member 'TLUserWidgetOptionGameValueBool_HandleCheckStateChanged::bIsChecked' has a wrong offset!");

// Function TLClient.TLUserWidgetOptionGameValueString.HandleTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetOptionGameValueString_HandleTextChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOptionGameValueString_HandleTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetOptionGameValueString_HandleTextChanged");
static_assert(sizeof(TLUserWidgetOptionGameValueString_HandleTextChanged) == 0x000018, "Wrong size on TLUserWidgetOptionGameValueString_HandleTextChanged");
static_assert(offsetof(TLUserWidgetOptionGameValueString_HandleTextChanged, InText) == 0x000000, "Member 'TLUserWidgetOptionGameValueString_HandleTextChanged::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetOptionGameValueVector2D.OnInputTextChanged_X
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetOptionGameValueVector2D_OnInputTextChanged_X final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOptionGameValueVector2D_OnInputTextChanged_X) == 0x000008, "Wrong alignment on TLUserWidgetOptionGameValueVector2D_OnInputTextChanged_X");
static_assert(sizeof(TLUserWidgetOptionGameValueVector2D_OnInputTextChanged_X) == 0x000018, "Wrong size on TLUserWidgetOptionGameValueVector2D_OnInputTextChanged_X");
static_assert(offsetof(TLUserWidgetOptionGameValueVector2D_OnInputTextChanged_X, InInputText) == 0x000000, "Member 'TLUserWidgetOptionGameValueVector2D_OnInputTextChanged_X::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetOptionGameValueVector2D.OnInputTextChanged_Y
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetOptionGameValueVector2D_OnInputTextChanged_Y final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetOptionGameValueVector2D_OnInputTextChanged_Y) == 0x000008, "Wrong alignment on TLUserWidgetOptionGameValueVector2D_OnInputTextChanged_Y");
static_assert(sizeof(TLUserWidgetOptionGameValueVector2D_OnInputTextChanged_Y) == 0x000018, "Wrong size on TLUserWidgetOptionGameValueVector2D_OnInputTextChanged_Y");
static_assert(offsetof(TLUserWidgetOptionGameValueVector2D_OnInputTextChanged_Y, InInputText) == 0x000000, "Member 'TLUserWidgetOptionGameValueVector2D_OnInputTextChanged_Y::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetInputEventKeyEditGroup.HandleButtonChecked
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetInputEventKeyEditGroup_HandleButtonChecked final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetInputEventKeyEditGroup_HandleButtonChecked) == 0x000001, "Wrong alignment on TLUserWidgetInputEventKeyEditGroup_HandleButtonChecked");
static_assert(sizeof(TLUserWidgetInputEventKeyEditGroup_HandleButtonChecked) == 0x000001, "Wrong size on TLUserWidgetInputEventKeyEditGroup_HandleButtonChecked");
static_assert(offsetof(TLUserWidgetInputEventKeyEditGroup_HandleButtonChecked, bIsChecked) == 0x000000, "Member 'TLUserWidgetInputEventKeyEditGroup_HandleButtonChecked::bIsChecked' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyAssistButton.HandleAliveChanged
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetPartyAssistButton_HandleAliveChanged final
{
public:
	bool                                          InIsAlive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLSetAliveSource                             InAliveSource;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyAssistButton_HandleAliveChanged) == 0x000001, "Wrong alignment on TLUserWidgetPartyAssistButton_HandleAliveChanged");
static_assert(sizeof(TLUserWidgetPartyAssistButton_HandleAliveChanged) == 0x000002, "Wrong size on TLUserWidgetPartyAssistButton_HandleAliveChanged");
static_assert(offsetof(TLUserWidgetPartyAssistButton_HandleAliveChanged, InIsAlive) == 0x000000, "Member 'TLUserWidgetPartyAssistButton_HandleAliveChanged::InIsAlive' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPartyAssistButton_HandleAliveChanged, InAliveSource) == 0x000001, "Member 'TLUserWidgetPartyAssistButton_HandleAliveChanged::InAliveSource' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyAssistButton.HandleMasterMainTargetChanged
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetPartyAssistButton_HandleMasterMainTargetChanged final
{
public:
	int32                                         InObjId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InWorldEnter;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetPartyAssistButton_HandleMasterMainTargetChanged) == 0x000004, "Wrong alignment on TLUserWidgetPartyAssistButton_HandleMasterMainTargetChanged");
static_assert(sizeof(TLUserWidgetPartyAssistButton_HandleMasterMainTargetChanged) == 0x000008, "Wrong size on TLUserWidgetPartyAssistButton_HandleMasterMainTargetChanged");
static_assert(offsetof(TLUserWidgetPartyAssistButton_HandleMasterMainTargetChanged, InObjId) == 0x000000, "Member 'TLUserWidgetPartyAssistButton_HandleMasterMainTargetChanged::InObjId' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPartyAssistButton_HandleMasterMainTargetChanged, InWorldEnter) == 0x000004, "Member 'TLUserWidgetPartyAssistButton_HandleMasterMainTargetChanged::InWorldEnter' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyAssistButton.HandleNameChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetPartyAssistButton_HandleNameChanged final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyAssistButton_HandleNameChanged) == 0x000008, "Wrong alignment on TLUserWidgetPartyAssistButton_HandleNameChanged");
static_assert(sizeof(TLUserWidgetPartyAssistButton_HandleNameChanged) == 0x000018, "Wrong size on TLUserWidgetPartyAssistButton_HandleNameChanged");
static_assert(offsetof(TLUserWidgetPartyAssistButton_HandleNameChanged, InName) == 0x000000, "Member 'TLUserWidgetPartyAssistButton_HandleNameChanged::InName' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyAssistButton.HandleUpdateActivateParty
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetPartyAssistButton_HandleUpdateActivateParty final
{
public:
	bool                                          bInActivateParty;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InContentString;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyAssistButton_HandleUpdateActivateParty) == 0x000008, "Wrong alignment on TLUserWidgetPartyAssistButton_HandleUpdateActivateParty");
static_assert(sizeof(TLUserWidgetPartyAssistButton_HandleUpdateActivateParty) == 0x000018, "Wrong size on TLUserWidgetPartyAssistButton_HandleUpdateActivateParty");
static_assert(offsetof(TLUserWidgetPartyAssistButton_HandleUpdateActivateParty, bInActivateParty) == 0x000000, "Member 'TLUserWidgetPartyAssistButton_HandleUpdateActivateParty::bInActivateParty' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPartyAssistButton_HandleUpdateActivateParty, InContentString) == 0x000008, "Member 'TLUserWidgetPartyAssistButton_HandleUpdateActivateParty::InContentString' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyAssistButton.OnAssistEffect
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyAssistButton_OnAssistEffect final
{
public:
	bool                                          bStart;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyAssistButton_OnAssistEffect) == 0x000001, "Wrong alignment on TLUserWidgetPartyAssistButton_OnAssistEffect");
static_assert(sizeof(TLUserWidgetPartyAssistButton_OnAssistEffect) == 0x000001, "Wrong size on TLUserWidgetPartyAssistButton_OnAssistEffect");
static_assert(offsetof(TLUserWidgetPartyAssistButton_OnAssistEffect, bStart) == 0x000000, "Member 'TLUserWidgetPartyAssistButton_OnAssistEffect::bStart' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyDungeon.OnUpdateMatchingState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyDungeon_OnUpdateMatchingState final
{
public:
	ETLPartyState                                 InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyDungeon_OnUpdateMatchingState) == 0x000001, "Wrong alignment on TLUserWidgetPartyDungeon_OnUpdateMatchingState");
static_assert(sizeof(TLUserWidgetPartyDungeon_OnUpdateMatchingState) == 0x000001, "Wrong size on TLUserWidgetPartyDungeon_OnUpdateMatchingState");
static_assert(offsetof(TLUserWidgetPartyDungeon_OnUpdateMatchingState, InState) == 0x000000, "Member 'TLUserWidgetPartyDungeon_OnUpdateMatchingState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyDungeon.OnUpdateOnboardingVisible
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyDungeon_OnUpdateOnboardingVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyDungeon_OnUpdateOnboardingVisible) == 0x000001, "Wrong alignment on TLUserWidgetPartyDungeon_OnUpdateOnboardingVisible");
static_assert(sizeof(TLUserWidgetPartyDungeon_OnUpdateOnboardingVisible) == 0x000001, "Wrong size on TLUserWidgetPartyDungeon_OnUpdateOnboardingVisible");
static_assert(offsetof(TLUserWidgetPartyDungeon_OnUpdateOnboardingVisible, Visible) == 0x000000, "Member 'TLUserWidgetPartyDungeon_OnUpdateOnboardingVisible::Visible' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyDungeon.IsFullParty
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyDungeon_IsFullParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyDungeon_IsFullParty) == 0x000001, "Wrong alignment on TLUserWidgetPartyDungeon_IsFullParty");
static_assert(sizeof(TLUserWidgetPartyDungeon_IsFullParty) == 0x000001, "Wrong size on TLUserWidgetPartyDungeon_IsFullParty");
static_assert(offsetof(TLUserWidgetPartyDungeon_IsFullParty, ReturnValue) == 0x000000, "Member 'TLUserWidgetPartyDungeon_IsFullParty::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetTargetInfo.OnTargetChange
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetTargetInfo_OnTargetChange final
{
public:
	bool                                          InBoss;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHpBarType                                    Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTargetInfo_OnTargetChange) == 0x000001, "Wrong alignment on TLUserWidgetTargetInfo_OnTargetChange");
static_assert(sizeof(TLUserWidgetTargetInfo_OnTargetChange) == 0x000002, "Wrong size on TLUserWidgetTargetInfo_OnTargetChange");
static_assert(offsetof(TLUserWidgetTargetInfo_OnTargetChange, InBoss) == 0x000000, "Member 'TLUserWidgetTargetInfo_OnTargetChange::InBoss' has a wrong offset!");
static_assert(offsetof(TLUserWidgetTargetInfo_OnTargetChange, Type) == 0x000001, "Member 'TLUserWidgetTargetInfo_OnTargetChange::Type' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyKickElectionConfirmPopup.HandleReasonTextInputChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetPartyKickElectionConfirmPopup_HandleReasonTextInputChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyKickElectionConfirmPopup_HandleReasonTextInputChanged) == 0x000008, "Wrong alignment on TLUserWidgetPartyKickElectionConfirmPopup_HandleReasonTextInputChanged");
static_assert(sizeof(TLUserWidgetPartyKickElectionConfirmPopup_HandleReasonTextInputChanged) == 0x000018, "Wrong size on TLUserWidgetPartyKickElectionConfirmPopup_HandleReasonTextInputChanged");
static_assert(offsetof(TLUserWidgetPartyKickElectionConfirmPopup_HandleReasonTextInputChanged, InInputText) == 0x000000, "Member 'TLUserWidgetPartyKickElectionConfirmPopup_HandleReasonTextInputChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyKickElectionConfirmPopup.HandleReasonTextInputCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetPartyKickElectionConfirmPopup_HandleReasonTextInputCommitted final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetPartyKickElectionConfirmPopup_HandleReasonTextInputCommitted) == 0x000008, "Wrong alignment on TLUserWidgetPartyKickElectionConfirmPopup_HandleReasonTextInputCommitted");
static_assert(sizeof(TLUserWidgetPartyKickElectionConfirmPopup_HandleReasonTextInputCommitted) == 0x000020, "Wrong size on TLUserWidgetPartyKickElectionConfirmPopup_HandleReasonTextInputCommitted");
static_assert(offsetof(TLUserWidgetPartyKickElectionConfirmPopup_HandleReasonTextInputCommitted, InInputText) == 0x000000, "Member 'TLUserWidgetPartyKickElectionConfirmPopup_HandleReasonTextInputCommitted::InInputText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPartyKickElectionConfirmPopup_HandleReasonTextInputCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetPartyKickElectionConfirmPopup_HandleReasonTextInputCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyKickElectionConfirmPopup.OnChangeUIPlatformImpl
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyKickElectionConfirmPopup_OnChangeUIPlatformImpl final
{
public:
	ETLUIPlatform                                 InPlatform;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyKickElectionConfirmPopup_OnChangeUIPlatformImpl) == 0x000001, "Wrong alignment on TLUserWidgetPartyKickElectionConfirmPopup_OnChangeUIPlatformImpl");
static_assert(sizeof(TLUserWidgetPartyKickElectionConfirmPopup_OnChangeUIPlatformImpl) == 0x000001, "Wrong size on TLUserWidgetPartyKickElectionConfirmPopup_OnChangeUIPlatformImpl");
static_assert(offsetof(TLUserWidgetPartyKickElectionConfirmPopup_OnChangeUIPlatformImpl, InPlatform) == 0x000000, "Member 'TLUserWidgetPartyKickElectionConfirmPopup_OnChangeUIPlatformImpl::InPlatform' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMatchingConfirmPopup.OnUpdateWaitingState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMatchingConfirmPopup_OnUpdateWaitingState final
{
public:
	bool                                          bWating;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMatchingConfirmPopup_OnUpdateWaitingState) == 0x000001, "Wrong alignment on TLUserWidgetPartyMatchingConfirmPopup_OnUpdateWaitingState");
static_assert(sizeof(TLUserWidgetPartyMatchingConfirmPopup_OnUpdateWaitingState) == 0x000001, "Wrong size on TLUserWidgetPartyMatchingConfirmPopup_OnUpdateWaitingState");
static_assert(offsetof(TLUserWidgetPartyMatchingConfirmPopup_OnUpdateWaitingState, bWating) == 0x000000, "Member 'TLUserWidgetPartyMatchingConfirmPopup_OnUpdateWaitingState::bWating' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMatchingRoleSelector.OnClickUnableSelectButton
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMatchingRoleSelector_OnClickUnableSelectButton final
{
public:
	EPartyRole                                    InRole;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMatchingRoleSelector_OnClickUnableSelectButton) == 0x000001, "Wrong alignment on TLUserWidgetPartyMatchingRoleSelector_OnClickUnableSelectButton");
static_assert(sizeof(TLUserWidgetPartyMatchingRoleSelector_OnClickUnableSelectButton) == 0x000001, "Wrong size on TLUserWidgetPartyMatchingRoleSelector_OnClickUnableSelectButton");
static_assert(offsetof(TLUserWidgetPartyMatchingRoleSelector_OnClickUnableSelectButton, InRole) == 0x000000, "Member 'TLUserWidgetPartyMatchingRoleSelector_OnClickUnableSelectButton::InRole' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMatchingRoleSelector.SetSelectable
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetPartyMatchingRoleSelector_SetSelectable final
{
public:
	EPartyRole                                    InRole;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelectable;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMatchingRoleSelector_SetSelectable) == 0x000001, "Wrong alignment on TLUserWidgetPartyMatchingRoleSelector_SetSelectable");
static_assert(sizeof(TLUserWidgetPartyMatchingRoleSelector_SetSelectable) == 0x000002, "Wrong size on TLUserWidgetPartyMatchingRoleSelector_SetSelectable");
static_assert(offsetof(TLUserWidgetPartyMatchingRoleSelector_SetSelectable, InRole) == 0x000000, "Member 'TLUserWidgetPartyMatchingRoleSelector_SetSelectable::InRole' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPartyMatchingRoleSelector_SetSelectable, bSelectable) == 0x000001, "Member 'TLUserWidgetPartyMatchingRoleSelector_SetSelectable::bSelectable' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMatchingBadge.OnMatchingWaitingSelect
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMatchingBadge_OnMatchingWaitingSelect final
{
public:
	bool                                          bWait;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMatchingBadge_OnMatchingWaitingSelect) == 0x000001, "Wrong alignment on TLUserWidgetPartyMatchingBadge_OnMatchingWaitingSelect");
static_assert(sizeof(TLUserWidgetPartyMatchingBadge_OnMatchingWaitingSelect) == 0x000001, "Wrong size on TLUserWidgetPartyMatchingBadge_OnMatchingWaitingSelect");
static_assert(offsetof(TLUserWidgetPartyMatchingBadge_OnMatchingWaitingSelect, bWait) == 0x000000, "Member 'TLUserWidgetPartyMatchingBadge_OnMatchingWaitingSelect::bWait' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMember.OnUpdateAbyssMark
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMember_OnUpdateAbyssMark final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMember_OnUpdateAbyssMark) == 0x000001, "Wrong alignment on TLUserWidgetPartyMember_OnUpdateAbyssMark");
static_assert(sizeof(TLUserWidgetPartyMember_OnUpdateAbyssMark) == 0x000001, "Wrong size on TLUserWidgetPartyMember_OnUpdateAbyssMark");
static_assert(offsetof(TLUserWidgetPartyMember_OnUpdateAbyssMark, bShow) == 0x000000, "Member 'TLUserWidgetPartyMember_OnUpdateAbyssMark::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMember.OnUpdateMemberIndex
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetPartyMember_OnUpdateMemberIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMember_OnUpdateMemberIndex) == 0x000004, "Wrong alignment on TLUserWidgetPartyMember_OnUpdateMemberIndex");
static_assert(sizeof(TLUserWidgetPartyMember_OnUpdateMemberIndex) == 0x000004, "Wrong size on TLUserWidgetPartyMember_OnUpdateMemberIndex");
static_assert(offsetof(TLUserWidgetPartyMember_OnUpdateMemberIndex, InIndex) == 0x000000, "Member 'TLUserWidgetPartyMember_OnUpdateMemberIndex::InIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberProfile.GetDungeonDifficultTypeText
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetPartyMemberProfile_GetDungeonDifficultTypeText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberProfile_GetDungeonDifficultTypeText) == 0x000008, "Wrong alignment on TLUserWidgetPartyMemberProfile_GetDungeonDifficultTypeText");
static_assert(sizeof(TLUserWidgetPartyMemberProfile_GetDungeonDifficultTypeText) == 0x000018, "Wrong size on TLUserWidgetPartyMemberProfile_GetDungeonDifficultTypeText");
static_assert(offsetof(TLUserWidgetPartyMemberProfile_GetDungeonDifficultTypeText, ReturnValue) == 0x000000, "Member 'TLUserWidgetPartyMemberProfile_GetDungeonDifficultTypeText::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberProfile.OnBoard
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMemberProfile_OnBoard final
{
public:
	bool                                          InSet;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberProfile_OnBoard) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberProfile_OnBoard");
static_assert(sizeof(TLUserWidgetPartyMemberProfile_OnBoard) == 0x000001, "Wrong size on TLUserWidgetPartyMemberProfile_OnBoard");
static_assert(offsetof(TLUserWidgetPartyMemberProfile_OnBoard, InSet) == 0x000000, "Member 'TLUserWidgetPartyMemberProfile_OnBoard::InSet' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberProfile.OnChangedAbnormalModifyGroup
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMemberProfile_OnChangedAbnormalModifyGroup final
{
public:
	EModifyGroup                                  InModifyGroup;                                     // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberProfile_OnChangedAbnormalModifyGroup) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberProfile_OnChangedAbnormalModifyGroup");
static_assert(sizeof(TLUserWidgetPartyMemberProfile_OnChangedAbnormalModifyGroup) == 0x000001, "Wrong size on TLUserWidgetPartyMemberProfile_OnChangedAbnormalModifyGroup");
static_assert(offsetof(TLUserWidgetPartyMemberProfile_OnChangedAbnormalModifyGroup, InModifyGroup) == 0x000000, "Member 'TLUserWidgetPartyMemberProfile_OnChangedAbnormalModifyGroup::InModifyGroup' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberProfile.OnChangedHpAbnormalStatus
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetPartyMemberProfile_OnChangedHpAbnormalStatus final
{
public:
	EHpAbnormalStatus                             InStatus;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbIsMyPc;                                         // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberProfile_OnChangedHpAbnormalStatus) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberProfile_OnChangedHpAbnormalStatus");
static_assert(sizeof(TLUserWidgetPartyMemberProfile_OnChangedHpAbnormalStatus) == 0x000002, "Wrong size on TLUserWidgetPartyMemberProfile_OnChangedHpAbnormalStatus");
static_assert(offsetof(TLUserWidgetPartyMemberProfile_OnChangedHpAbnormalStatus, InStatus) == 0x000000, "Member 'TLUserWidgetPartyMemberProfile_OnChangedHpAbnormalStatus::InStatus' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPartyMemberProfile_OnChangedHpAbnormalStatus, InbIsMyPc) == 0x000001, "Member 'TLUserWidgetPartyMemberProfile_OnChangedHpAbnormalStatus::InbIsMyPc' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberProfile.OnDead
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMemberProfile_OnDead final
{
public:
	bool                                          InDead;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberProfile_OnDead) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberProfile_OnDead");
static_assert(sizeof(TLUserWidgetPartyMemberProfile_OnDead) == 0x000001, "Wrong size on TLUserWidgetPartyMemberProfile_OnDead");
static_assert(offsetof(TLUserWidgetPartyMemberProfile_OnDead, InDead) == 0x000000, "Member 'TLUserWidgetPartyMemberProfile_OnDead::InDead' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberProfile.OnLogout
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMemberProfile_OnLogout final
{
public:
	bool                                          InLogout;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberProfile_OnLogout) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberProfile_OnLogout");
static_assert(sizeof(TLUserWidgetPartyMemberProfile_OnLogout) == 0x000001, "Wrong size on TLUserWidgetPartyMemberProfile_OnLogout");
static_assert(offsetof(TLUserWidgetPartyMemberProfile_OnLogout, InLogout) == 0x000000, "Member 'TLUserWidgetPartyMemberProfile_OnLogout::InLogout' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberProfile.OnOtherMap
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMemberProfile_OnOtherMap final
{
public:
	bool                                          InSet;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberProfile_OnOtherMap) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberProfile_OnOtherMap");
static_assert(sizeof(TLUserWidgetPartyMemberProfile_OnOtherMap) == 0x000001, "Wrong size on TLUserWidgetPartyMemberProfile_OnOtherMap");
static_assert(offsetof(TLUserWidgetPartyMemberProfile_OnOtherMap, InSet) == 0x000000, "Member 'TLUserWidgetPartyMemberProfile_OnOtherMap::InSet' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberProfile.OnUpdateBindObject
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMemberProfile_OnUpdateBindObject final
{
public:
	bool                                          bInBindObject;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberProfile_OnUpdateBindObject) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberProfile_OnUpdateBindObject");
static_assert(sizeof(TLUserWidgetPartyMemberProfile_OnUpdateBindObject) == 0x000001, "Wrong size on TLUserWidgetPartyMemberProfile_OnUpdateBindObject");
static_assert(offsetof(TLUserWidgetPartyMemberProfile_OnUpdateBindObject, bInBindObject) == 0x000000, "Member 'TLUserWidgetPartyMemberProfile_OnUpdateBindObject::bInBindObject' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberProfile.OnUpdateFixTarget
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMemberProfile_OnUpdateFixTarget final
{
public:
	bool                                          InIsFixTargetIsMe;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberProfile_OnUpdateFixTarget) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberProfile_OnUpdateFixTarget");
static_assert(sizeof(TLUserWidgetPartyMemberProfile_OnUpdateFixTarget) == 0x000001, "Wrong size on TLUserWidgetPartyMemberProfile_OnUpdateFixTarget");
static_assert(offsetof(TLUserWidgetPartyMemberProfile_OnUpdateFixTarget, InIsFixTargetIsMe) == 0x000000, "Member 'TLUserWidgetPartyMemberProfile_OnUpdateFixTarget::InIsFixTargetIsMe' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberProfile.OnUpdateFriendlyTarget
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMemberProfile_OnUpdateFriendlyTarget final
{
public:
	bool                                          InIsFriendlyTargetIsMe;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberProfile_OnUpdateFriendlyTarget) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberProfile_OnUpdateFriendlyTarget");
static_assert(sizeof(TLUserWidgetPartyMemberProfile_OnUpdateFriendlyTarget) == 0x000001, "Wrong size on TLUserWidgetPartyMemberProfile_OnUpdateFriendlyTarget");
static_assert(offsetof(TLUserWidgetPartyMemberProfile_OnUpdateFriendlyTarget, InIsFriendlyTargetIsMe) == 0x000000, "Member 'TLUserWidgetPartyMemberProfile_OnUpdateFriendlyTarget::InIsFriendlyTargetIsMe' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberProfile.OnUpdateInterimTarget
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMemberProfile_OnUpdateInterimTarget final
{
public:
	bool                                          InIsInterimTargetIsMe;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberProfile_OnUpdateInterimTarget) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberProfile_OnUpdateInterimTarget");
static_assert(sizeof(TLUserWidgetPartyMemberProfile_OnUpdateInterimTarget) == 0x000001, "Wrong size on TLUserWidgetPartyMemberProfile_OnUpdateInterimTarget");
static_assert(offsetof(TLUserWidgetPartyMemberProfile_OnUpdateInterimTarget, InIsInterimTargetIsMe) == 0x000000, "Member 'TLUserWidgetPartyMemberProfile_OnUpdateInterimTarget::InIsInterimTargetIsMe' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberProfile.OnUpdateLogoutHoldingTime
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetPartyMemberProfile_OnUpdateLogoutHoldingTime final
{
public:
	class FText                                   RemainTimeText;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberProfile_OnUpdateLogoutHoldingTime) == 0x000008, "Wrong alignment on TLUserWidgetPartyMemberProfile_OnUpdateLogoutHoldingTime");
static_assert(sizeof(TLUserWidgetPartyMemberProfile_OnUpdateLogoutHoldingTime) == 0x000018, "Wrong size on TLUserWidgetPartyMemberProfile_OnUpdateLogoutHoldingTime");
static_assert(offsetof(TLUserWidgetPartyMemberProfile_OnUpdateLogoutHoldingTime, RemainTimeText) == 0x000000, "Member 'TLUserWidgetPartyMemberProfile_OnUpdateLogoutHoldingTime::RemainTimeText' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberProfile.OnUpdateMemberIndex
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetPartyMemberProfile_OnUpdateMemberIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberProfile_OnUpdateMemberIndex) == 0x000004, "Wrong alignment on TLUserWidgetPartyMemberProfile_OnUpdateMemberIndex");
static_assert(sizeof(TLUserWidgetPartyMemberProfile_OnUpdateMemberIndex) == 0x000004, "Wrong size on TLUserWidgetPartyMemberProfile_OnUpdateMemberIndex");
static_assert(offsetof(TLUserWidgetPartyMemberProfile_OnUpdateMemberIndex, InIndex) == 0x000000, "Member 'TLUserWidgetPartyMemberProfile_OnUpdateMemberIndex::InIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberProfile.OnUpdateUseSkillMode
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMemberProfile_OnUpdateUseSkillMode final
{
public:
	bool                                          bInUseSkillMode;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberProfile_OnUpdateUseSkillMode) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberProfile_OnUpdateUseSkillMode");
static_assert(sizeof(TLUserWidgetPartyMemberProfile_OnUpdateUseSkillMode) == 0x000001, "Wrong size on TLUserWidgetPartyMemberProfile_OnUpdateUseSkillMode");
static_assert(offsetof(TLUserWidgetPartyMemberProfile_OnUpdateUseSkillMode, bInUseSkillMode) == 0x000000, "Member 'TLUserWidgetPartyMemberProfile_OnUpdateUseSkillMode::bInUseSkillMode' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberSimpleProfile.ActiveDraggableFX
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMemberSimpleProfile_ActiveDraggableFX final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberSimpleProfile_ActiveDraggableFX) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberSimpleProfile_ActiveDraggableFX");
static_assert(sizeof(TLUserWidgetPartyMemberSimpleProfile_ActiveDraggableFX) == 0x000001, "Wrong size on TLUserWidgetPartyMemberSimpleProfile_ActiveDraggableFX");
static_assert(offsetof(TLUserWidgetPartyMemberSimpleProfile_ActiveDraggableFX, bActive) == 0x000000, "Member 'TLUserWidgetPartyMemberSimpleProfile_ActiveDraggableFX::bActive' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberSimpleProfile.ActiveDraggingFX
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMemberSimpleProfile_ActiveDraggingFX final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberSimpleProfile_ActiveDraggingFX) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberSimpleProfile_ActiveDraggingFX");
static_assert(sizeof(TLUserWidgetPartyMemberSimpleProfile_ActiveDraggingFX) == 0x000001, "Wrong size on TLUserWidgetPartyMemberSimpleProfile_ActiveDraggingFX");
static_assert(offsetof(TLUserWidgetPartyMemberSimpleProfile_ActiveDraggingFX, bActive) == 0x000000, "Member 'TLUserWidgetPartyMemberSimpleProfile_ActiveDraggingFX::bActive' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberSimpleProfile.OnBoard
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMemberSimpleProfile_OnBoard final
{
public:
	bool                                          InSet;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberSimpleProfile_OnBoard) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberSimpleProfile_OnBoard");
static_assert(sizeof(TLUserWidgetPartyMemberSimpleProfile_OnBoard) == 0x000001, "Wrong size on TLUserWidgetPartyMemberSimpleProfile_OnBoard");
static_assert(offsetof(TLUserWidgetPartyMemberSimpleProfile_OnBoard, InSet) == 0x000000, "Member 'TLUserWidgetPartyMemberSimpleProfile_OnBoard::InSet' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberSimpleProfile.OnDead
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMemberSimpleProfile_OnDead final
{
public:
	bool                                          InDead;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberSimpleProfile_OnDead) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberSimpleProfile_OnDead");
static_assert(sizeof(TLUserWidgetPartyMemberSimpleProfile_OnDead) == 0x000001, "Wrong size on TLUserWidgetPartyMemberSimpleProfile_OnDead");
static_assert(offsetof(TLUserWidgetPartyMemberSimpleProfile_OnDead, InDead) == 0x000000, "Member 'TLUserWidgetPartyMemberSimpleProfile_OnDead::InDead' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberSimpleProfile.OnLogout
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMemberSimpleProfile_OnLogout final
{
public:
	bool                                          InLogout;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberSimpleProfile_OnLogout) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberSimpleProfile_OnLogout");
static_assert(sizeof(TLUserWidgetPartyMemberSimpleProfile_OnLogout) == 0x000001, "Wrong size on TLUserWidgetPartyMemberSimpleProfile_OnLogout");
static_assert(offsetof(TLUserWidgetPartyMemberSimpleProfile_OnLogout, InLogout) == 0x000000, "Member 'TLUserWidgetPartyMemberSimpleProfile_OnLogout::InLogout' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberSimpleProfile.OnOtherMap
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMemberSimpleProfile_OnOtherMap final
{
public:
	bool                                          InSet;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberSimpleProfile_OnOtherMap) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberSimpleProfile_OnOtherMap");
static_assert(sizeof(TLUserWidgetPartyMemberSimpleProfile_OnOtherMap) == 0x000001, "Wrong size on TLUserWidgetPartyMemberSimpleProfile_OnOtherMap");
static_assert(offsetof(TLUserWidgetPartyMemberSimpleProfile_OnOtherMap, InSet) == 0x000000, "Member 'TLUserWidgetPartyMemberSimpleProfile_OnOtherMap::InSet' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberSimpleProfile.OnSetDraggableIcon
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMemberSimpleProfile_OnSetDraggableIcon final
{
public:
	bool                                          bDraggable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberSimpleProfile_OnSetDraggableIcon) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberSimpleProfile_OnSetDraggableIcon");
static_assert(sizeof(TLUserWidgetPartyMemberSimpleProfile_OnSetDraggableIcon) == 0x000001, "Wrong size on TLUserWidgetPartyMemberSimpleProfile_OnSetDraggableIcon");
static_assert(offsetof(TLUserWidgetPartyMemberSimpleProfile_OnSetDraggableIcon, bDraggable) == 0x000000, "Member 'TLUserWidgetPartyMemberSimpleProfile_OnSetDraggableIcon::bDraggable' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberSimpleProfile.OnShowDraggableIcon
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMemberSimpleProfile_OnShowDraggableIcon final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberSimpleProfile_OnShowDraggableIcon) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberSimpleProfile_OnShowDraggableIcon");
static_assert(sizeof(TLUserWidgetPartyMemberSimpleProfile_OnShowDraggableIcon) == 0x000001, "Wrong size on TLUserWidgetPartyMemberSimpleProfile_OnShowDraggableIcon");
static_assert(offsetof(TLUserWidgetPartyMemberSimpleProfile_OnShowDraggableIcon, bActive) == 0x000000, "Member 'TLUserWidgetPartyMemberSimpleProfile_OnShowDraggableIcon::bActive' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberSimpleProfile.OnUpdateBindObject
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMemberSimpleProfile_OnUpdateBindObject final
{
public:
	bool                                          bInBindObject;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberSimpleProfile_OnUpdateBindObject) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberSimpleProfile_OnUpdateBindObject");
static_assert(sizeof(TLUserWidgetPartyMemberSimpleProfile_OnUpdateBindObject) == 0x000001, "Wrong size on TLUserWidgetPartyMemberSimpleProfile_OnUpdateBindObject");
static_assert(offsetof(TLUserWidgetPartyMemberSimpleProfile_OnUpdateBindObject, bInBindObject) == 0x000000, "Member 'TLUserWidgetPartyMemberSimpleProfile_OnUpdateBindObject::bInBindObject' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberSimpleProfile.OnUpdateFixTarget
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyMemberSimpleProfile_OnUpdateFixTarget final
{
public:
	bool                                          InIsFixTargetIsMe;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberSimpleProfile_OnUpdateFixTarget) == 0x000001, "Wrong alignment on TLUserWidgetPartyMemberSimpleProfile_OnUpdateFixTarget");
static_assert(sizeof(TLUserWidgetPartyMemberSimpleProfile_OnUpdateFixTarget) == 0x000001, "Wrong size on TLUserWidgetPartyMemberSimpleProfile_OnUpdateFixTarget");
static_assert(offsetof(TLUserWidgetPartyMemberSimpleProfile_OnUpdateFixTarget, InIsFixTargetIsMe) == 0x000000, "Member 'TLUserWidgetPartyMemberSimpleProfile_OnUpdateFixTarget::InIsFixTargetIsMe' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyMemberSimpleProfile.OnUpdateMemberIndex
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetPartyMemberSimpleProfile_OnUpdateMemberIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyMemberSimpleProfile_OnUpdateMemberIndex) == 0x000004, "Wrong alignment on TLUserWidgetPartyMemberSimpleProfile_OnUpdateMemberIndex");
static_assert(sizeof(TLUserWidgetPartyMemberSimpleProfile_OnUpdateMemberIndex) == 0x000004, "Wrong size on TLUserWidgetPartyMemberSimpleProfile_OnUpdateMemberIndex");
static_assert(offsetof(TLUserWidgetPartyMemberSimpleProfile_OnUpdateMemberIndex, InIndex) == 0x000000, "Member 'TLUserWidgetPartyMemberSimpleProfile_OnUpdateMemberIndex::InIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitmentRegisterPopup.HandleCombatPowerEditableTextBoxChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetPartyRecruitmentRegisterPopup_HandleCombatPowerEditableTextBoxChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitmentRegisterPopup_HandleCombatPowerEditableTextBoxChanged) == 0x000008, "Wrong alignment on TLUserWidgetPartyRecruitmentRegisterPopup_HandleCombatPowerEditableTextBoxChanged");
static_assert(sizeof(TLUserWidgetPartyRecruitmentRegisterPopup_HandleCombatPowerEditableTextBoxChanged) == 0x000018, "Wrong size on TLUserWidgetPartyRecruitmentRegisterPopup_HandleCombatPowerEditableTextBoxChanged");
static_assert(offsetof(TLUserWidgetPartyRecruitmentRegisterPopup_HandleCombatPowerEditableTextBoxChanged, InInputText) == 0x000000, "Member 'TLUserWidgetPartyRecruitmentRegisterPopup_HandleCombatPowerEditableTextBoxChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitmentRegisterPopup.HandleCombatPowerEditableTextBoxCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetPartyRecruitmentRegisterPopup_HandleCombatPowerEditableTextBoxCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetPartyRecruitmentRegisterPopup_HandleCombatPowerEditableTextBoxCommitted) == 0x000008, "Wrong alignment on TLUserWidgetPartyRecruitmentRegisterPopup_HandleCombatPowerEditableTextBoxCommitted");
static_assert(sizeof(TLUserWidgetPartyRecruitmentRegisterPopup_HandleCombatPowerEditableTextBoxCommitted) == 0x000020, "Wrong size on TLUserWidgetPartyRecruitmentRegisterPopup_HandleCombatPowerEditableTextBoxCommitted");
static_assert(offsetof(TLUserWidgetPartyRecruitmentRegisterPopup_HandleCombatPowerEditableTextBoxCommitted, InText) == 0x000000, "Member 'TLUserWidgetPartyRecruitmentRegisterPopup_HandleCombatPowerEditableTextBoxCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPartyRecruitmentRegisterPopup_HandleCombatPowerEditableTextBoxCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetPartyRecruitmentRegisterPopup_HandleCombatPowerEditableTextBoxCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitmentRegisterPopup.OnAvailableChallengeDungeonImpl
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyRecruitmentRegisterPopup_OnAvailableChallengeDungeonImpl final
{
public:
	bool                                          bAvailable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitmentRegisterPopup_OnAvailableChallengeDungeonImpl) == 0x000001, "Wrong alignment on TLUserWidgetPartyRecruitmentRegisterPopup_OnAvailableChallengeDungeonImpl");
static_assert(sizeof(TLUserWidgetPartyRecruitmentRegisterPopup_OnAvailableChallengeDungeonImpl) == 0x000001, "Wrong size on TLUserWidgetPartyRecruitmentRegisterPopup_OnAvailableChallengeDungeonImpl");
static_assert(offsetof(TLUserWidgetPartyRecruitmentRegisterPopup_OnAvailableChallengeDungeonImpl, bAvailable) == 0x000000, "Member 'TLUserWidgetPartyRecruitmentRegisterPopup_OnAvailableChallengeDungeonImpl::bAvailable' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitmentRegisterPopup.OnChangeDungeonCategory
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyRecruitmentRegisterPopup_OnChangeDungeonCategory final
{
public:
	ETLDungeonCategory                            InCategory;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitmentRegisterPopup_OnChangeDungeonCategory) == 0x000001, "Wrong alignment on TLUserWidgetPartyRecruitmentRegisterPopup_OnChangeDungeonCategory");
static_assert(sizeof(TLUserWidgetPartyRecruitmentRegisterPopup_OnChangeDungeonCategory) == 0x000001, "Wrong size on TLUserWidgetPartyRecruitmentRegisterPopup_OnChangeDungeonCategory");
static_assert(offsetof(TLUserWidgetPartyRecruitmentRegisterPopup_OnChangeDungeonCategory, InCategory) == 0x000000, "Member 'TLUserWidgetPartyRecruitmentRegisterPopup_OnChangeDungeonCategory::InCategory' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitmentRegisterPopup.OnNoticeActivate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyRecruitmentRegisterPopup_OnNoticeActivate final
{
public:
	bool                                          bActivate;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitmentRegisterPopup_OnNoticeActivate) == 0x000001, "Wrong alignment on TLUserWidgetPartyRecruitmentRegisterPopup_OnNoticeActivate");
static_assert(sizeof(TLUserWidgetPartyRecruitmentRegisterPopup_OnNoticeActivate) == 0x000001, "Wrong size on TLUserWidgetPartyRecruitmentRegisterPopup_OnNoticeActivate");
static_assert(offsetof(TLUserWidgetPartyRecruitmentRegisterPopup_OnNoticeActivate, bActivate) == 0x000000, "Member 'TLUserWidgetPartyRecruitmentRegisterPopup_OnNoticeActivate::bActivate' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitmentRegisterPopup.OnTitleTextBoxChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetPartyRecruitmentRegisterPopup_OnTitleTextBoxChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitmentRegisterPopup_OnTitleTextBoxChanged) == 0x000008, "Wrong alignment on TLUserWidgetPartyRecruitmentRegisterPopup_OnTitleTextBoxChanged");
static_assert(sizeof(TLUserWidgetPartyRecruitmentRegisterPopup_OnTitleTextBoxChanged) == 0x000018, "Wrong size on TLUserWidgetPartyRecruitmentRegisterPopup_OnTitleTextBoxChanged");
static_assert(offsetof(TLUserWidgetPartyRecruitmentRegisterPopup_OnTitleTextBoxChanged, InInputText) == 0x000000, "Member 'TLUserWidgetPartyRecruitmentRegisterPopup_OnTitleTextBoxChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitmentRegisterPopup.OnTitleTextBoxCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetPartyRecruitmentRegisterPopup_OnTitleTextBoxCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetPartyRecruitmentRegisterPopup_OnTitleTextBoxCommitted) == 0x000008, "Wrong alignment on TLUserWidgetPartyRecruitmentRegisterPopup_OnTitleTextBoxCommitted");
static_assert(sizeof(TLUserWidgetPartyRecruitmentRegisterPopup_OnTitleTextBoxCommitted) == 0x000020, "Wrong size on TLUserWidgetPartyRecruitmentRegisterPopup_OnTitleTextBoxCommitted");
static_assert(offsetof(TLUserWidgetPartyRecruitmentRegisterPopup_OnTitleTextBoxCommitted, InText) == 0x000000, "Member 'TLUserWidgetPartyRecruitmentRegisterPopup_OnTitleTextBoxCommitted::InText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPartyRecruitmentRegisterPopup_OnTitleTextBoxCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetPartyRecruitmentRegisterPopup_OnTitleTextBoxCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitmentRegisterPopup.OnVisibleDifficultUI
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyRecruitmentRegisterPopup_OnVisibleDifficultUI final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitmentRegisterPopup_OnVisibleDifficultUI) == 0x000001, "Wrong alignment on TLUserWidgetPartyRecruitmentRegisterPopup_OnVisibleDifficultUI");
static_assert(sizeof(TLUserWidgetPartyRecruitmentRegisterPopup_OnVisibleDifficultUI) == 0x000001, "Wrong size on TLUserWidgetPartyRecruitmentRegisterPopup_OnVisibleDifficultUI");
static_assert(offsetof(TLUserWidgetPartyRecruitmentRegisterPopup_OnVisibleDifficultUI, bVisible) == 0x000000, "Member 'TLUserWidgetPartyRecruitmentRegisterPopup_OnVisibleDifficultUI::bVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitmentRegisterPopup.OnVisibleLevelSelector
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyRecruitmentRegisterPopup_OnVisibleLevelSelector final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitmentRegisterPopup_OnVisibleLevelSelector) == 0x000001, "Wrong alignment on TLUserWidgetPartyRecruitmentRegisterPopup_OnVisibleLevelSelector");
static_assert(sizeof(TLUserWidgetPartyRecruitmentRegisterPopup_OnVisibleLevelSelector) == 0x000001, "Wrong size on TLUserWidgetPartyRecruitmentRegisterPopup_OnVisibleLevelSelector");
static_assert(offsetof(TLUserWidgetPartyRecruitmentRegisterPopup_OnVisibleLevelSelector, bVisible) == 0x000000, "Member 'TLUserWidgetPartyRecruitmentRegisterPopup_OnVisibleLevelSelector::bVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetPartyRecruitmentRegisterPopup.GetCurrentDungeonCategory
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPartyRecruitmentRegisterPopup_GetCurrentDungeonCategory final
{
public:
	ETLDungeonCategory                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPartyRecruitmentRegisterPopup_GetCurrentDungeonCategory) == 0x000001, "Wrong alignment on TLUserWidgetPartyRecruitmentRegisterPopup_GetCurrentDungeonCategory");
static_assert(sizeof(TLUserWidgetPartyRecruitmentRegisterPopup_GetCurrentDungeonCategory) == 0x000001, "Wrong size on TLUserWidgetPartyRecruitmentRegisterPopup_GetCurrentDungeonCategory");
static_assert(offsetof(TLUserWidgetPartyRecruitmentRegisterPopup_GetCurrentDungeonCategory, ReturnValue) == 0x000000, "Member 'TLUserWidgetPartyRecruitmentRegisterPopup_GetCurrentDungeonCategory::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetPcRelationshipMemberSlot.OnConnectionStatusChange
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPcRelationshipMemberSlot_OnConnectionStatusChange final
{
public:
	ERelationConnectionState                      InRelationConnectionState;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPcRelationshipMemberSlot_OnConnectionStatusChange) == 0x000001, "Wrong alignment on TLUserWidgetPcRelationshipMemberSlot_OnConnectionStatusChange");
static_assert(sizeof(TLUserWidgetPcRelationshipMemberSlot_OnConnectionStatusChange) == 0x000001, "Wrong size on TLUserWidgetPcRelationshipMemberSlot_OnConnectionStatusChange");
static_assert(offsetof(TLUserWidgetPcRelationshipMemberSlot_OnConnectionStatusChange, InRelationConnectionState) == 0x000000, "Member 'TLUserWidgetPcRelationshipMemberSlot_OnConnectionStatusChange::InRelationConnectionState' has a wrong offset!");

// Function TLClient.TLUserWidgetPcRelationshipMemberSlot.OnUpdatePcRelationshipType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPcRelationshipMemberSlot_OnUpdatePcRelationshipType final
{
public:
	ETLPcRelationshipType                         InPcRelationshipType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPcRelationshipMemberSlot_OnUpdatePcRelationshipType) == 0x000001, "Wrong alignment on TLUserWidgetPcRelationshipMemberSlot_OnUpdatePcRelationshipType");
static_assert(sizeof(TLUserWidgetPcRelationshipMemberSlot_OnUpdatePcRelationshipType) == 0x000001, "Wrong size on TLUserWidgetPcRelationshipMemberSlot_OnUpdatePcRelationshipType");
static_assert(offsetof(TLUserWidgetPcRelationshipMemberSlot_OnUpdatePcRelationshipType, InPcRelationshipType) == 0x000000, "Member 'TLUserWidgetPcRelationshipMemberSlot_OnUpdatePcRelationshipType::InPcRelationshipType' has a wrong offset!");

// Function TLClient.TLUserWidgetPhotoMode.OnUpdateInputMode
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPhotoMode_OnUpdateInputMode final
{
public:
	EPhotoModeInputMode                           Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPhotoMode_OnUpdateInputMode) == 0x000001, "Wrong alignment on TLUserWidgetPhotoMode_OnUpdateInputMode");
static_assert(sizeof(TLUserWidgetPhotoMode_OnUpdateInputMode) == 0x000001, "Wrong size on TLUserWidgetPhotoMode_OnUpdateInputMode");
static_assert(offsetof(TLUserWidgetPhotoMode_OnUpdateInputMode, Mode) == 0x000000, "Member 'TLUserWidgetPhotoMode_OnUpdateInputMode::Mode' has a wrong offset!");

// Function TLClient.TLUserWidgetPolymorph.GetContextMenuWidget
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetPolymorph_GetContextMenuWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPolymorph_GetContextMenuWidget) == 0x000008, "Wrong alignment on TLUserWidgetPolymorph_GetContextMenuWidget");
static_assert(sizeof(TLUserWidgetPolymorph_GetContextMenuWidget) == 0x000008, "Wrong size on TLUserWidgetPolymorph_GetContextMenuWidget");
static_assert(offsetof(TLUserWidgetPolymorph_GetContextMenuWidget, ReturnValue) == 0x000000, "Member 'TLUserWidgetPolymorph_GetContextMenuWidget::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetPolymorphContentsPanel.OnTabButtonChanged
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPolymorphContentsPanel_OnTabButtonChanged final
{
public:
	ETLPolymorphUIContentType                     InContentType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPolymorphContentsPanel_OnTabButtonChanged) == 0x000001, "Wrong alignment on TLUserWidgetPolymorphContentsPanel_OnTabButtonChanged");
static_assert(sizeof(TLUserWidgetPolymorphContentsPanel_OnTabButtonChanged) == 0x000001, "Wrong size on TLUserWidgetPolymorphContentsPanel_OnTabButtonChanged");
static_assert(offsetof(TLUserWidgetPolymorphContentsPanel_OnTabButtonChanged, InContentType) == 0x000000, "Member 'TLUserWidgetPolymorphContentsPanel_OnTabButtonChanged::InContentType' has a wrong offset!");

// Function TLClient.TLUserWidgetPolymorphEntrySlot.OnSelectedPolymorph
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetPolymorphEntrySlot_OnSelectedPolymorph final
{
public:
	class FName                                   PolymorphId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPolymorphEntrySlot_OnSelectedPolymorph) == 0x000004, "Wrong alignment on TLUserWidgetPolymorphEntrySlot_OnSelectedPolymorph");
static_assert(sizeof(TLUserWidgetPolymorphEntrySlot_OnSelectedPolymorph) == 0x000008, "Wrong size on TLUserWidgetPolymorphEntrySlot_OnSelectedPolymorph");
static_assert(offsetof(TLUserWidgetPolymorphEntrySlot_OnSelectedPolymorph, PolymorphId) == 0x000000, "Member 'TLUserWidgetPolymorphEntrySlot_OnSelectedPolymorph::PolymorphId' has a wrong offset!");

// Function TLClient.TLUserWidgetPolymorphEntrySlot.OnUpdateEntryPolymorphInfo
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetPolymorphEntrySlot_OnUpdateEntryPolymorphInfo final
{
public:
	class FText                                   PolymorphName;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         PolymorphLevel;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetPolymorphEntrySlot_OnUpdateEntryPolymorphInfo) == 0x000008, "Wrong alignment on TLUserWidgetPolymorphEntrySlot_OnUpdateEntryPolymorphInfo");
static_assert(sizeof(TLUserWidgetPolymorphEntrySlot_OnUpdateEntryPolymorphInfo) == 0x000020, "Wrong size on TLUserWidgetPolymorphEntrySlot_OnUpdateEntryPolymorphInfo");
static_assert(offsetof(TLUserWidgetPolymorphEntrySlot_OnUpdateEntryPolymorphInfo, PolymorphName) == 0x000000, "Member 'TLUserWidgetPolymorphEntrySlot_OnUpdateEntryPolymorphInfo::PolymorphName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetPolymorphEntrySlot_OnUpdateEntryPolymorphInfo, PolymorphLevel) == 0x000018, "Member 'TLUserWidgetPolymorphEntrySlot_OnUpdateEntryPolymorphInfo::PolymorphLevel' has a wrong offset!");

// Function TLClient.TLUserWidgetPolymorphEntrySlot.SetType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPolymorphEntrySlot_SetType final
{
public:
	ETLPolymorphEntryType                         InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPolymorphEntrySlot_SetType) == 0x000001, "Wrong alignment on TLUserWidgetPolymorphEntrySlot_SetType");
static_assert(sizeof(TLUserWidgetPolymorphEntrySlot_SetType) == 0x000001, "Wrong size on TLUserWidgetPolymorphEntrySlot_SetType");
static_assert(offsetof(TLUserWidgetPolymorphEntrySlot_SetType, InType) == 0x000000, "Member 'TLUserWidgetPolymorphEntrySlot_SetType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetTaxDeliveryFrame.UpdateReservationIime
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTaxDeliveryFrame_UpdateReservationIime final
{
public:
	bool                                          IsShowWarningMsg;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTaxDeliveryFrame_UpdateReservationIime) == 0x000001, "Wrong alignment on TLUserWidgetTaxDeliveryFrame_UpdateReservationIime");
static_assert(sizeof(TLUserWidgetTaxDeliveryFrame_UpdateReservationIime) == 0x000001, "Wrong size on TLUserWidgetTaxDeliveryFrame_UpdateReservationIime");
static_assert(offsetof(TLUserWidgetTaxDeliveryFrame_UpdateReservationIime, IsShowWarningMsg) == 0x000000, "Member 'TLUserWidgetTaxDeliveryFrame_UpdateReservationIime::IsShowWarningMsg' has a wrong offset!");

// Function TLClient.TLUserWidgetPolymorphQuickSlot.OnUpdateAutoUse
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPolymorphQuickSlot_OnUpdateAutoUse final
{
public:
	bool                                          bInAutoUseMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPolymorphQuickSlot_OnUpdateAutoUse) == 0x000001, "Wrong alignment on TLUserWidgetPolymorphQuickSlot_OnUpdateAutoUse");
static_assert(sizeof(TLUserWidgetPolymorphQuickSlot_OnUpdateAutoUse) == 0x000001, "Wrong size on TLUserWidgetPolymorphQuickSlot_OnUpdateAutoUse");
static_assert(offsetof(TLUserWidgetPolymorphQuickSlot_OnUpdateAutoUse, bInAutoUseMode) == 0x000000, "Member 'TLUserWidgetPolymorphQuickSlot_OnUpdateAutoUse::bInAutoUseMode' has a wrong offset!");

// Function TLClient.TLUserWidgetPortraitLineListItem.OnAcquisitionTypeUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPortraitLineListItem_OnAcquisitionTypeUpdate final
{
public:
	ETLAcquisitionContentType                     InAcquisitionType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPortraitLineListItem_OnAcquisitionTypeUpdate) == 0x000001, "Wrong alignment on TLUserWidgetPortraitLineListItem_OnAcquisitionTypeUpdate");
static_assert(sizeof(TLUserWidgetPortraitLineListItem_OnAcquisitionTypeUpdate) == 0x000001, "Wrong size on TLUserWidgetPortraitLineListItem_OnAcquisitionTypeUpdate");
static_assert(offsetof(TLUserWidgetPortraitLineListItem_OnAcquisitionTypeUpdate, InAcquisitionType) == 0x000000, "Member 'TLUserWidgetPortraitLineListItem_OnAcquisitionTypeUpdate::InAcquisitionType' has a wrong offset!");

// Function TLClient.TLUserWidgetPost.OnReceiveComplete
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPost_OnReceiveComplete final
{
public:
	bool                                          bInComplete;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPost_OnReceiveComplete) == 0x000001, "Wrong alignment on TLUserWidgetPost_OnReceiveComplete");
static_assert(sizeof(TLUserWidgetPost_OnReceiveComplete) == 0x000001, "Wrong size on TLUserWidgetPost_OnReceiveComplete");
static_assert(offsetof(TLUserWidgetPost_OnReceiveComplete, bInComplete) == 0x000000, "Member 'TLUserWidgetPost_OnReceiveComplete::bInComplete' has a wrong offset!");

// Function TLClient.TLUserWidgetPurchaseGoodsTooltip.OnExistAccumulateMileage
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetPurchaseGoodsTooltip_OnExistAccumulateMileage final
{
public:
	bool                                          InIsExist;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetPurchaseGoodsTooltip_OnExistAccumulateMileage) == 0x000001, "Wrong alignment on TLUserWidgetPurchaseGoodsTooltip_OnExistAccumulateMileage");
static_assert(sizeof(TLUserWidgetPurchaseGoodsTooltip_OnExistAccumulateMileage) == 0x000001, "Wrong size on TLUserWidgetPurchaseGoodsTooltip_OnExistAccumulateMileage");
static_assert(offsetof(TLUserWidgetPurchaseGoodsTooltip_OnExistAccumulateMileage, InIsExist) == 0x000000, "Member 'TLUserWidgetPurchaseGoodsTooltip_OnExistAccumulateMileage::InIsExist' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillBookPanelMastery.OnUpdateMasteryLevelAndPoint
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetSkillBookPanelMastery_OnUpdateMasteryLevelAndPoint final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsMaxLevel;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanUpgrade;                                        // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetSkillBookPanelMastery_OnUpdateMasteryLevelAndPoint) == 0x000004, "Wrong alignment on TLUserWidgetSkillBookPanelMastery_OnUpdateMasteryLevelAndPoint");
static_assert(sizeof(TLUserWidgetSkillBookPanelMastery_OnUpdateMasteryLevelAndPoint) == 0x000008, "Wrong size on TLUserWidgetSkillBookPanelMastery_OnUpdateMasteryLevelAndPoint");
static_assert(offsetof(TLUserWidgetSkillBookPanelMastery_OnUpdateMasteryLevelAndPoint, InPercent) == 0x000000, "Member 'TLUserWidgetSkillBookPanelMastery_OnUpdateMasteryLevelAndPoint::InPercent' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillBookPanelMastery_OnUpdateMasteryLevelAndPoint, bInIsMaxLevel) == 0x000004, "Member 'TLUserWidgetSkillBookPanelMastery_OnUpdateMasteryLevelAndPoint::bInIsMaxLevel' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillBookPanelMastery_OnUpdateMasteryLevelAndPoint, CanUpgrade) == 0x000005, "Member 'TLUserWidgetSkillBookPanelMastery_OnUpdateMasteryLevelAndPoint::CanUpgrade' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillBookPanelMastery.OnWeaponCategorySelected_BP
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillBookPanelMastery_OnWeaponCategorySelected_BP final
{
public:
	EWeaponCategory                               InWeaponCategory;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillBookPanelMastery_OnWeaponCategorySelected_BP) == 0x000001, "Wrong alignment on TLUserWidgetSkillBookPanelMastery_OnWeaponCategorySelected_BP");
static_assert(sizeof(TLUserWidgetSkillBookPanelMastery_OnWeaponCategorySelected_BP) == 0x000001, "Wrong size on TLUserWidgetSkillBookPanelMastery_OnWeaponCategorySelected_BP");
static_assert(offsetof(TLUserWidgetSkillBookPanelMastery_OnWeaponCategorySelected_BP, InWeaponCategory) == 0x000000, "Member 'TLUserWidgetSkillBookPanelMastery_OnWeaponCategorySelected_BP::InWeaponCategory' has a wrong offset!");

// Function TLClient.TLUserWidgetRadialList.AddItemWidget
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetRadialList_AddItemWidget final
{
public:
	class UTLUserWidget*                          ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRadialList_AddItemWidget) == 0x000008, "Wrong alignment on TLUserWidgetRadialList_AddItemWidget");
static_assert(sizeof(TLUserWidgetRadialList_AddItemWidget) == 0x000008, "Wrong size on TLUserWidgetRadialList_AddItemWidget");
static_assert(offsetof(TLUserWidgetRadialList_AddItemWidget, ItemWidget) == 0x000000, "Member 'TLUserWidgetRadialList_AddItemWidget::ItemWidget' has a wrong offset!");

// Function TLClient.TLUserWidgetRadialList.OnUpdateMenuItemAngle
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetRadialList_OnUpdateMenuItemAngle final
{
public:
	class UTLUserWidget*                          MenuItem;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAngle;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetRadialList_OnUpdateMenuItemAngle) == 0x000008, "Wrong alignment on TLUserWidgetRadialList_OnUpdateMenuItemAngle");
static_assert(sizeof(TLUserWidgetRadialList_OnUpdateMenuItemAngle) == 0x000010, "Wrong size on TLUserWidgetRadialList_OnUpdateMenuItemAngle");
static_assert(offsetof(TLUserWidgetRadialList_OnUpdateMenuItemAngle, MenuItem) == 0x000000, "Member 'TLUserWidgetRadialList_OnUpdateMenuItemAngle::MenuItem' has a wrong offset!");
static_assert(offsetof(TLUserWidgetRadialList_OnUpdateMenuItemAngle, InAngle) == 0x000008, "Member 'TLUserWidgetRadialList_OnUpdateMenuItemAngle::InAngle' has a wrong offset!");

// Function TLClient.TLUserWidgetRadialList.GetMenuItemByIndex
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetRadialList_GetMenuItemByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTLUserWidget*                          ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRadialList_GetMenuItemByIndex) == 0x000008, "Wrong alignment on TLUserWidgetRadialList_GetMenuItemByIndex");
static_assert(sizeof(TLUserWidgetRadialList_GetMenuItemByIndex) == 0x000010, "Wrong size on TLUserWidgetRadialList_GetMenuItemByIndex");
static_assert(offsetof(TLUserWidgetRadialList_GetMenuItemByIndex, Index_0) == 0x000000, "Member 'TLUserWidgetRadialList_GetMenuItemByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(TLUserWidgetRadialList_GetMenuItemByIndex, ReturnValue) == 0x000008, "Member 'TLUserWidgetRadialList_GetMenuItemByIndex::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetRadialList.GetMenuItemIndex
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetRadialList_GetMenuItemIndex final
{
public:
	float                                         AngleDegree;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRadialList_GetMenuItemIndex) == 0x000004, "Wrong alignment on TLUserWidgetRadialList_GetMenuItemIndex");
static_assert(sizeof(TLUserWidgetRadialList_GetMenuItemIndex) == 0x000008, "Wrong size on TLUserWidgetRadialList_GetMenuItemIndex");
static_assert(offsetof(TLUserWidgetRadialList_GetMenuItemIndex, AngleDegree) == 0x000000, "Member 'TLUserWidgetRadialList_GetMenuItemIndex::AngleDegree' has a wrong offset!");
static_assert(offsetof(TLUserWidgetRadialList_GetMenuItemIndex, ReturnValue) == 0x000004, "Member 'TLUserWidgetRadialList_GetMenuItemIndex::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetRangeSelectorButton.OnStateUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRangeSelectorButton_OnStateUpdate final
{
public:
	ERangeSelectorButtonState                     InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRangeSelectorButton_OnStateUpdate) == 0x000001, "Wrong alignment on TLUserWidgetRangeSelectorButton_OnStateUpdate");
static_assert(sizeof(TLUserWidgetRangeSelectorButton_OnStateUpdate) == 0x000001, "Wrong size on TLUserWidgetRangeSelectorButton_OnStateUpdate");
static_assert(offsetof(TLUserWidgetRangeSelectorButton_OnStateUpdate, InState) == 0x000000, "Member 'TLUserWidgetRangeSelectorButton_OnStateUpdate::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetReport.HandleContentsInputChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetReport_HandleContentsInputChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetReport_HandleContentsInputChanged) == 0x000008, "Wrong alignment on TLUserWidgetReport_HandleContentsInputChanged");
static_assert(sizeof(TLUserWidgetReport_HandleContentsInputChanged) == 0x000018, "Wrong size on TLUserWidgetReport_HandleContentsInputChanged");
static_assert(offsetof(TLUserWidgetReport_HandleContentsInputChanged, InInputText) == 0x000000, "Member 'TLUserWidgetReport_HandleContentsInputChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetRestorationSlot.OnHintRestorableFreeOrNot
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRestorationSlot_OnHintRestorableFreeOrNot final
{
public:
	bool                                          bFreeOrNot;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRestorationSlot_OnHintRestorableFreeOrNot) == 0x000001, "Wrong alignment on TLUserWidgetRestorationSlot_OnHintRestorableFreeOrNot");
static_assert(sizeof(TLUserWidgetRestorationSlot_OnHintRestorableFreeOrNot) == 0x000001, "Wrong size on TLUserWidgetRestorationSlot_OnHintRestorableFreeOrNot");
static_assert(offsetof(TLUserWidgetRestorationSlot_OnHintRestorableFreeOrNot, bFreeOrNot) == 0x000000, "Member 'TLUserWidgetRestorationSlot_OnHintRestorableFreeOrNot::bFreeOrNot' has a wrong offset!");

// Function TLClient.TLUserWidgetRingMenu.OnChangedFocused
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRingMenu_OnChangedFocused final
{
public:
	bool                                          bFocused;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRingMenu_OnChangedFocused) == 0x000001, "Wrong alignment on TLUserWidgetRingMenu_OnChangedFocused");
static_assert(sizeof(TLUserWidgetRingMenu_OnChangedFocused) == 0x000001, "Wrong size on TLUserWidgetRingMenu_OnChangedFocused");
static_assert(offsetof(TLUserWidgetRingMenu_OnChangedFocused, bFocused) == 0x000000, "Member 'TLUserWidgetRingMenu_OnChangedFocused::bFocused' has a wrong offset!");

// Function TLClient.TLUserWidgetRingMenu.OnTransparentEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRingMenu_OnTransparentEvent final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRingMenu_OnTransparentEvent) == 0x000001, "Wrong alignment on TLUserWidgetRingMenu_OnTransparentEvent");
static_assert(sizeof(TLUserWidgetRingMenu_OnTransparentEvent) == 0x000001, "Wrong size on TLUserWidgetRingMenu_OnTransparentEvent");
static_assert(offsetof(TLUserWidgetRingMenu_OnTransparentEvent, InValue) == 0x000000, "Member 'TLUserWidgetRingMenu_OnTransparentEvent::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetRingMenuSlot.OnSetRingMenuCategory
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRingMenuSlot_OnSetRingMenuCategory final
{
public:
	ETLRingMenuCategory                           InRingMenuCategory;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRingMenuSlot_OnSetRingMenuCategory) == 0x000001, "Wrong alignment on TLUserWidgetRingMenuSlot_OnSetRingMenuCategory");
static_assert(sizeof(TLUserWidgetRingMenuSlot_OnSetRingMenuCategory) == 0x000001, "Wrong size on TLUserWidgetRingMenuSlot_OnSetRingMenuCategory");
static_assert(offsetof(TLUserWidgetRingMenuSlot_OnSetRingMenuCategory, InRingMenuCategory) == 0x000000, "Member 'TLUserWidgetRingMenuSlot_OnSetRingMenuCategory::InRingMenuCategory' has a wrong offset!");

// Function TLClient.TLUserWidgetRotationEvent.OnUpdateRotationEventState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRotationEvent_OnUpdateRotationEventState final
{
public:
	ETLRotationEventStateType                     InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRotationEvent_OnUpdateRotationEventState) == 0x000001, "Wrong alignment on TLUserWidgetRotationEvent_OnUpdateRotationEventState");
static_assert(sizeof(TLUserWidgetRotationEvent_OnUpdateRotationEventState) == 0x000001, "Wrong size on TLUserWidgetRotationEvent_OnUpdateRotationEventState");
static_assert(offsetof(TLUserWidgetRotationEvent_OnUpdateRotationEventState, InType) == 0x000000, "Member 'TLUserWidgetRotationEvent_OnUpdateRotationEventState::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetRotationEventBoard.HandleMinimizeButtonOnCheck
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRotationEventBoard_HandleMinimizeButtonOnCheck final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRotationEventBoard_HandleMinimizeButtonOnCheck) == 0x000001, "Wrong alignment on TLUserWidgetRotationEventBoard_HandleMinimizeButtonOnCheck");
static_assert(sizeof(TLUserWidgetRotationEventBoard_HandleMinimizeButtonOnCheck) == 0x000001, "Wrong size on TLUserWidgetRotationEventBoard_HandleMinimizeButtonOnCheck");
static_assert(offsetof(TLUserWidgetRotationEventBoard_HandleMinimizeButtonOnCheck, bIsChecked) == 0x000000, "Member 'TLUserWidgetRotationEventBoard_HandleMinimizeButtonOnCheck::bIsChecked' has a wrong offset!");

// Function TLClient.TLUserWidgetRotationEventBoard.OnMinimizeEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRotationEventBoard_OnMinimizeEvent final
{
public:
	bool                                          bMinimize;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRotationEventBoard_OnMinimizeEvent) == 0x000001, "Wrong alignment on TLUserWidgetRotationEventBoard_OnMinimizeEvent");
static_assert(sizeof(TLUserWidgetRotationEventBoard_OnMinimizeEvent) == 0x000001, "Wrong size on TLUserWidgetRotationEventBoard_OnMinimizeEvent");
static_assert(offsetof(TLUserWidgetRotationEventBoard_OnMinimizeEvent, bMinimize) == 0x000000, "Member 'TLUserWidgetRotationEventBoard_OnMinimizeEvent::bMinimize' has a wrong offset!");

// Function TLClient.TLUserWidgetRotationEventBoard.OnUpdateRotationEventState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRotationEventBoard_OnUpdateRotationEventState final
{
public:
	ETLRotationEventStateType                     InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRotationEventBoard_OnUpdateRotationEventState) == 0x000001, "Wrong alignment on TLUserWidgetRotationEventBoard_OnUpdateRotationEventState");
static_assert(sizeof(TLUserWidgetRotationEventBoard_OnUpdateRotationEventState) == 0x000001, "Wrong size on TLUserWidgetRotationEventBoard_OnUpdateRotationEventState");
static_assert(offsetof(TLUserWidgetRotationEventBoard_OnUpdateRotationEventState, InState) == 0x000000, "Member 'TLUserWidgetRotationEventBoard_OnUpdateRotationEventState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetRotationEventInfo.OnRotationEventRankingType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRotationEventInfo_OnRotationEventRankingType final
{
public:
	ERotationEventRankingType                     InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRotationEventInfo_OnRotationEventRankingType) == 0x000001, "Wrong alignment on TLUserWidgetRotationEventInfo_OnRotationEventRankingType");
static_assert(sizeof(TLUserWidgetRotationEventInfo_OnRotationEventRankingType) == 0x000001, "Wrong size on TLUserWidgetRotationEventInfo_OnRotationEventRankingType");
static_assert(offsetof(TLUserWidgetRotationEventInfo_OnRotationEventRankingType, InType) == 0x000000, "Member 'TLUserWidgetRotationEventInfo_OnRotationEventRankingType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetSpinner.HandleOnValueChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetSpinner_HandleOnValueChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpinner_HandleOnValueChanged) == 0x000008, "Wrong alignment on TLUserWidgetSpinner_HandleOnValueChanged");
static_assert(sizeof(TLUserWidgetSpinner_HandleOnValueChanged) == 0x000018, "Wrong size on TLUserWidgetSpinner_HandleOnValueChanged");
static_assert(offsetof(TLUserWidgetSpinner_HandleOnValueChanged, Text) == 0x000000, "Member 'TLUserWidgetSpinner_HandleOnValueChanged::Text' has a wrong offset!");

// Function TLClient.TLUserWidgetSpinner.HandleOnValueCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetSpinner_HandleOnValueCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetSpinner_HandleOnValueCommitted) == 0x000008, "Wrong alignment on TLUserWidgetSpinner_HandleOnValueCommitted");
static_assert(sizeof(TLUserWidgetSpinner_HandleOnValueCommitted) == 0x000020, "Wrong size on TLUserWidgetSpinner_HandleOnValueCommitted");
static_assert(offsetof(TLUserWidgetSpinner_HandleOnValueCommitted, Text) == 0x000000, "Member 'TLUserWidgetSpinner_HandleOnValueCommitted::Text' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSpinner_HandleOnValueCommitted, CommitMethod) == 0x000018, "Member 'TLUserWidgetSpinner_HandleOnValueCommitted::CommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetSpinner.HandleOnValueFocusLost
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetSpinner_HandleOnValueFocusLost final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpinner_HandleOnValueFocusLost) == 0x000004, "Wrong alignment on TLUserWidgetSpinner_HandleOnValueFocusLost");
static_assert(sizeof(TLUserWidgetSpinner_HandleOnValueFocusLost) == 0x000008, "Wrong size on TLUserWidgetSpinner_HandleOnValueFocusLost");
static_assert(offsetof(TLUserWidgetSpinner_HandleOnValueFocusLost, InFocusEvent) == 0x000000, "Member 'TLUserWidgetSpinner_HandleOnValueFocusLost::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetSpinner.HandleOnValueFocusReceived
// 0x0040 (0x0040 - 0x0000)
struct TLUserWidgetSpinner_HandleOnValueFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpinner_HandleOnValueFocusReceived) == 0x000004, "Wrong alignment on TLUserWidgetSpinner_HandleOnValueFocusReceived");
static_assert(sizeof(TLUserWidgetSpinner_HandleOnValueFocusReceived) == 0x000040, "Wrong size on TLUserWidgetSpinner_HandleOnValueFocusReceived");
static_assert(offsetof(TLUserWidgetSpinner_HandleOnValueFocusReceived, MyGeometry) == 0x000000, "Member 'TLUserWidgetSpinner_HandleOnValueFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSpinner_HandleOnValueFocusReceived, InFocusEvent) == 0x000038, "Member 'TLUserWidgetSpinner_HandleOnValueFocusReceived::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetSpinner.SetIsReadOnly
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSpinner_SetIsReadOnly final
{
public:
	bool                                          InIsReadOnly;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpinner_SetIsReadOnly) == 0x000001, "Wrong alignment on TLUserWidgetSpinner_SetIsReadOnly");
static_assert(sizeof(TLUserWidgetSpinner_SetIsReadOnly) == 0x000001, "Wrong size on TLUserWidgetSpinner_SetIsReadOnly");
static_assert(offsetof(TLUserWidgetSpinner_SetIsReadOnly, InIsReadOnly) == 0x000000, "Member 'TLUserWidgetSpinner_SetIsReadOnly::InIsReadOnly' has a wrong offset!");

// Function TLClient.TLUserWidgetSpinner.SetMaxValue
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSpinner_SetMaxValue final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpinner_SetMaxValue) == 0x000004, "Wrong alignment on TLUserWidgetSpinner_SetMaxValue");
static_assert(sizeof(TLUserWidgetSpinner_SetMaxValue) == 0x000004, "Wrong size on TLUserWidgetSpinner_SetMaxValue");
static_assert(offsetof(TLUserWidgetSpinner_SetMaxValue, NewValue) == 0x000000, "Member 'TLUserWidgetSpinner_SetMaxValue::NewValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSpinner.SetMinMaxValue
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetSpinner_SetMinMaxValue final
{
public:
	int32                                         InMinValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpinner_SetMinMaxValue) == 0x000004, "Wrong alignment on TLUserWidgetSpinner_SetMinMaxValue");
static_assert(sizeof(TLUserWidgetSpinner_SetMinMaxValue) == 0x000008, "Wrong size on TLUserWidgetSpinner_SetMinMaxValue");
static_assert(offsetof(TLUserWidgetSpinner_SetMinMaxValue, InMinValue) == 0x000000, "Member 'TLUserWidgetSpinner_SetMinMaxValue::InMinValue' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSpinner_SetMinMaxValue, InMaxValue) == 0x000004, "Member 'TLUserWidgetSpinner_SetMinMaxValue::InMaxValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSpinner.SetMinValue
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSpinner_SetMinValue final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpinner_SetMinValue) == 0x000004, "Wrong alignment on TLUserWidgetSpinner_SetMinValue");
static_assert(sizeof(TLUserWidgetSpinner_SetMinValue) == 0x000004, "Wrong size on TLUserWidgetSpinner_SetMinValue");
static_assert(offsetof(TLUserWidgetSpinner_SetMinValue, NewValue) == 0x000000, "Member 'TLUserWidgetSpinner_SetMinValue::NewValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSpinner.SetUnitValue
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSpinner_SetUnitValue final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpinner_SetUnitValue) == 0x000004, "Wrong alignment on TLUserWidgetSpinner_SetUnitValue");
static_assert(sizeof(TLUserWidgetSpinner_SetUnitValue) == 0x000004, "Wrong size on TLUserWidgetSpinner_SetUnitValue");
static_assert(offsetof(TLUserWidgetSpinner_SetUnitValue, NewValue) == 0x000000, "Member 'TLUserWidgetSpinner_SetUnitValue::NewValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSpinner.SetValue
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetSpinner_SetValue final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBroadcastDelegate;                                // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetSpinner_SetValue) == 0x000004, "Wrong alignment on TLUserWidgetSpinner_SetValue");
static_assert(sizeof(TLUserWidgetSpinner_SetValue) == 0x000008, "Wrong size on TLUserWidgetSpinner_SetValue");
static_assert(offsetof(TLUserWidgetSpinner_SetValue, NewValue) == 0x000000, "Member 'TLUserWidgetSpinner_SetValue::NewValue' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSpinner_SetValue, bBroadcastDelegate) == 0x000004, "Member 'TLUserWidgetSpinner_SetValue::bBroadcastDelegate' has a wrong offset!");

// Function TLClient.TLUserWidgetSpinner.GetIsReadOnly
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSpinner_GetIsReadOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpinner_GetIsReadOnly) == 0x000001, "Wrong alignment on TLUserWidgetSpinner_GetIsReadOnly");
static_assert(sizeof(TLUserWidgetSpinner_GetIsReadOnly) == 0x000001, "Wrong size on TLUserWidgetSpinner_GetIsReadOnly");
static_assert(offsetof(TLUserWidgetSpinner_GetIsReadOnly, ReturnValue) == 0x000000, "Member 'TLUserWidgetSpinner_GetIsReadOnly::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSpinner.GetMaxValue
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSpinner_GetMaxValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpinner_GetMaxValue) == 0x000004, "Wrong alignment on TLUserWidgetSpinner_GetMaxValue");
static_assert(sizeof(TLUserWidgetSpinner_GetMaxValue) == 0x000004, "Wrong size on TLUserWidgetSpinner_GetMaxValue");
static_assert(offsetof(TLUserWidgetSpinner_GetMaxValue, ReturnValue) == 0x000000, "Member 'TLUserWidgetSpinner_GetMaxValue::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSpinner.GetMinValue
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSpinner_GetMinValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpinner_GetMinValue) == 0x000004, "Wrong alignment on TLUserWidgetSpinner_GetMinValue");
static_assert(sizeof(TLUserWidgetSpinner_GetMinValue) == 0x000004, "Wrong size on TLUserWidgetSpinner_GetMinValue");
static_assert(offsetof(TLUserWidgetSpinner_GetMinValue, ReturnValue) == 0x000000, "Member 'TLUserWidgetSpinner_GetMinValue::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSpinner.GetUnitValue
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSpinner_GetUnitValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpinner_GetUnitValue) == 0x000004, "Wrong alignment on TLUserWidgetSpinner_GetUnitValue");
static_assert(sizeof(TLUserWidgetSpinner_GetUnitValue) == 0x000004, "Wrong size on TLUserWidgetSpinner_GetUnitValue");
static_assert(offsetof(TLUserWidgetSpinner_GetUnitValue, ReturnValue) == 0x000000, "Member 'TLUserWidgetSpinner_GetUnitValue::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSpinner.GetValue
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSpinner_GetValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpinner_GetValue) == 0x000004, "Wrong alignment on TLUserWidgetSpinner_GetValue");
static_assert(sizeof(TLUserWidgetSpinner_GetValue) == 0x000004, "Wrong size on TLUserWidgetSpinner_GetValue");
static_assert(offsetof(TLUserWidgetSpinner_GetValue, ReturnValue) == 0x000000, "Member 'TLUserWidgetSpinner_GetValue::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetRuneSynergyListSlot.OnActiveRuneSynergy
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetRuneSynergyListSlot_OnActiveRuneSynergy final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemGrade                                    InSynergyGrade;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRuneSynergyListSlot_OnActiveRuneSynergy) == 0x000001, "Wrong alignment on TLUserWidgetRuneSynergyListSlot_OnActiveRuneSynergy");
static_assert(sizeof(TLUserWidgetRuneSynergyListSlot_OnActiveRuneSynergy) == 0x000002, "Wrong size on TLUserWidgetRuneSynergyListSlot_OnActiveRuneSynergy");
static_assert(offsetof(TLUserWidgetRuneSynergyListSlot_OnActiveRuneSynergy, InIsActive) == 0x000000, "Member 'TLUserWidgetRuneSynergyListSlot_OnActiveRuneSynergy::InIsActive' has a wrong offset!");
static_assert(offsetof(TLUserWidgetRuneSynergyListSlot_OnActiveRuneSynergy, InSynergyGrade) == 0x000001, "Member 'TLUserWidgetRuneSynergyListSlot_OnActiveRuneSynergy::InSynergyGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetSavedPlace.GetContextMenuWidget
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetSavedPlace_GetContextMenuWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSavedPlace_GetContextMenuWidget) == 0x000008, "Wrong alignment on TLUserWidgetSavedPlace_GetContextMenuWidget");
static_assert(sizeof(TLUserWidgetSavedPlace_GetContextMenuWidget) == 0x000008, "Wrong size on TLUserWidgetSavedPlace_GetContextMenuWidget");
static_assert(offsetof(TLUserWidgetSavedPlace_GetContextMenuWidget, ReturnValue) == 0x000000, "Member 'TLUserWidgetSavedPlace_GetContextMenuWidget::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSavedPlace.OnCreated
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSavedPlace_OnCreated final
{
public:
	bool                                          InUserInWorldmap;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSavedPlace_OnCreated) == 0x000001, "Wrong alignment on TLUserWidgetSavedPlace_OnCreated");
static_assert(sizeof(TLUserWidgetSavedPlace_OnCreated) == 0x000001, "Wrong size on TLUserWidgetSavedPlace_OnCreated");
static_assert(offsetof(TLUserWidgetSavedPlace_OnCreated, InUserInWorldmap) == 0x000000, "Member 'TLUserWidgetSavedPlace_OnCreated::InUserInWorldmap' has a wrong offset!");

// Function TLClient.TLUserWidgetSeasonPass.OnUpdatePreviewSceneActor
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSeasonPass_OnUpdatePreviewSceneActor final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSeasonPass_OnUpdatePreviewSceneActor) == 0x000001, "Wrong alignment on TLUserWidgetSeasonPass_OnUpdatePreviewSceneActor");
static_assert(sizeof(TLUserWidgetSeasonPass_OnUpdatePreviewSceneActor) == 0x000001, "Wrong size on TLUserWidgetSeasonPass_OnUpdatePreviewSceneActor");
static_assert(offsetof(TLUserWidgetSeasonPass_OnUpdatePreviewSceneActor, IsVisible_0) == 0x000000, "Member 'TLUserWidgetSeasonPass_OnUpdatePreviewSceneActor::IsVisible_0' has a wrong offset!");

// Function TLClient.TLUserWidgetSeasonPassLevelList.OnGuidePointShop
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetSeasonPassLevelList_OnGuidePointShop final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InHasPassTicket;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSeasonPassLevelList_OnGuidePointShop) == 0x000001, "Wrong alignment on TLUserWidgetSeasonPassLevelList_OnGuidePointShop");
static_assert(sizeof(TLUserWidgetSeasonPassLevelList_OnGuidePointShop) == 0x000002, "Wrong size on TLUserWidgetSeasonPassLevelList_OnGuidePointShop");
static_assert(offsetof(TLUserWidgetSeasonPassLevelList_OnGuidePointShop, bInShow) == 0x000000, "Member 'TLUserWidgetSeasonPassLevelList_OnGuidePointShop::bInShow' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSeasonPassLevelList_OnGuidePointShop, InHasPassTicket) == 0x000001, "Member 'TLUserWidgetSeasonPassLevelList_OnGuidePointShop::InHasPassTicket' has a wrong offset!");

// Function TLClient.TLUserWidgetSeasonPassLevelList.OnUpdatePassPointEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSeasonPassLevelList_OnUpdatePassPointEvent final
{
public:
	bool                                          InbLevelUp;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSeasonPassLevelList_OnUpdatePassPointEvent) == 0x000001, "Wrong alignment on TLUserWidgetSeasonPassLevelList_OnUpdatePassPointEvent");
static_assert(sizeof(TLUserWidgetSeasonPassLevelList_OnUpdatePassPointEvent) == 0x000001, "Wrong size on TLUserWidgetSeasonPassLevelList_OnUpdatePassPointEvent");
static_assert(offsetof(TLUserWidgetSeasonPassLevelList_OnUpdatePassPointEvent, InbLevelUp) == 0x000000, "Member 'TLUserWidgetSeasonPassLevelList_OnUpdatePassPointEvent::InbLevelUp' has a wrong offset!");

// Function TLClient.TLUserWidgetSeasonPassLevelList.OnUpdateStatusType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSeasonPassLevelList_OnUpdateStatusType final
{
public:
	ETLSeasonPassStatusType                       Stauts;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSeasonPassLevelList_OnUpdateStatusType) == 0x000001, "Wrong alignment on TLUserWidgetSeasonPassLevelList_OnUpdateStatusType");
static_assert(sizeof(TLUserWidgetSeasonPassLevelList_OnUpdateStatusType) == 0x000001, "Wrong size on TLUserWidgetSeasonPassLevelList_OnUpdateStatusType");
static_assert(offsetof(TLUserWidgetSeasonPassLevelList_OnUpdateStatusType, Stauts) == 0x000000, "Member 'TLUserWidgetSeasonPassLevelList_OnUpdateStatusType::Stauts' has a wrong offset!");

// Function TLClient.TLUserWidgetSeasonPassTaskListItem.OnPointRewardEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSeasonPassTaskListItem_OnPointRewardEvent final
{
public:
	bool                                          InbCompleteStep;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSeasonPassTaskListItem_OnPointRewardEvent) == 0x000001, "Wrong alignment on TLUserWidgetSeasonPassTaskListItem_OnPointRewardEvent");
static_assert(sizeof(TLUserWidgetSeasonPassTaskListItem_OnPointRewardEvent) == 0x000001, "Wrong size on TLUserWidgetSeasonPassTaskListItem_OnPointRewardEvent");
static_assert(offsetof(TLUserWidgetSeasonPassTaskListItem_OnPointRewardEvent, InbCompleteStep) == 0x000000, "Member 'TLUserWidgetSeasonPassTaskListItem_OnPointRewardEvent::InbCompleteStep' has a wrong offset!");

// Function TLClient.TLUserWidgetSelectableSlotInterface.OnPlaySelect
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSelectableSlotInterface_OnPlaySelect final
{
public:
	bool                                          InSelect;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSelectableSlotInterface_OnPlaySelect) == 0x000001, "Wrong alignment on TLUserWidgetSelectableSlotInterface_OnPlaySelect");
static_assert(sizeof(TLUserWidgetSelectableSlotInterface_OnPlaySelect) == 0x000001, "Wrong size on TLUserWidgetSelectableSlotInterface_OnPlaySelect");
static_assert(offsetof(TLUserWidgetSelectableSlotInterface_OnPlaySelect, InSelect) == 0x000000, "Member 'TLUserWidgetSelectableSlotInterface_OnPlaySelect::InSelect' has a wrong offset!");

// Function TLClient.TLUserWidgetServerSelectFrame.OnToggleListExtension
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetServerSelectFrame_OnToggleListExtension final
{
public:
	bool                                          IsToggle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetServerSelectFrame_OnToggleListExtension) == 0x000001, "Wrong alignment on TLUserWidgetServerSelectFrame_OnToggleListExtension");
static_assert(sizeof(TLUserWidgetServerSelectFrame_OnToggleListExtension) == 0x000001, "Wrong size on TLUserWidgetServerSelectFrame_OnToggleListExtension");
static_assert(offsetof(TLUserWidgetServerSelectFrame_OnToggleListExtension, IsToggle) == 0x000000, "Member 'TLUserWidgetServerSelectFrame_OnToggleListExtension::IsToggle' has a wrong offset!");

// Function TLClient.TLUserWidgetRealmListItem.IsAvaiableForNewCharacter
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRealmListItem_IsAvaiableForNewCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRealmListItem_IsAvaiableForNewCharacter) == 0x000001, "Wrong alignment on TLUserWidgetRealmListItem_IsAvaiableForNewCharacter");
static_assert(sizeof(TLUserWidgetRealmListItem_IsAvaiableForNewCharacter) == 0x000001, "Wrong size on TLUserWidgetRealmListItem_IsAvaiableForNewCharacter");
static_assert(offsetof(TLUserWidgetRealmListItem_IsAvaiableForNewCharacter, ReturnValue) == 0x000000, "Member 'TLUserWidgetRealmListItem_IsAvaiableForNewCharacter::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetRealmListItem.OnChangeServerInspection
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRealmListItem_OnChangeServerInspection final
{
public:
	bool                                          InIsInspection;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRealmListItem_OnChangeServerInspection) == 0x000001, "Wrong alignment on TLUserWidgetRealmListItem_OnChangeServerInspection");
static_assert(sizeof(TLUserWidgetRealmListItem_OnChangeServerInspection) == 0x000001, "Wrong size on TLUserWidgetRealmListItem_OnChangeServerInspection");
static_assert(offsetof(TLUserWidgetRealmListItem_OnChangeServerInspection, InIsInspection) == 0x000000, "Member 'TLUserWidgetRealmListItem_OnChangeServerInspection::InIsInspection' has a wrong offset!");

// Function TLClient.TLUserWidgetRealmListItem.OnUpdateDiplayNubmer
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetRealmListItem_OnUpdateDiplayNubmer final
{
public:
	int32                                         InDisplayNumber;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRealmListItem_OnUpdateDiplayNubmer) == 0x000004, "Wrong alignment on TLUserWidgetRealmListItem_OnUpdateDiplayNubmer");
static_assert(sizeof(TLUserWidgetRealmListItem_OnUpdateDiplayNubmer) == 0x000004, "Wrong size on TLUserWidgetRealmListItem_OnUpdateDiplayNubmer");
static_assert(offsetof(TLUserWidgetRealmListItem_OnUpdateDiplayNubmer, InDisplayNumber) == 0x000000, "Member 'TLUserWidgetRealmListItem_OnUpdateDiplayNubmer::InDisplayNumber' has a wrong offset!");

// Function TLClient.TLUserWidgetRealmListItem.OnUpdatePopulationStatus
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetRealmListItem_OnUpdatePopulationStatus final
{
public:
	EServerPopulationStatus                       InStatus;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRealmListItem_OnUpdatePopulationStatus) == 0x000001, "Wrong alignment on TLUserWidgetRealmListItem_OnUpdatePopulationStatus");
static_assert(sizeof(TLUserWidgetRealmListItem_OnUpdatePopulationStatus) == 0x000001, "Wrong size on TLUserWidgetRealmListItem_OnUpdatePopulationStatus");
static_assert(offsetof(TLUserWidgetRealmListItem_OnUpdatePopulationStatus, InStatus) == 0x000000, "Member 'TLUserWidgetRealmListItem_OnUpdatePopulationStatus::InStatus' has a wrong offset!");

// Function TLClient.TLUserWidgetRealmListItem.OnUpdateServerLatency
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetRealmListItem_OnUpdateServerLatency final
{
public:
	int64                                         InLatency;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetRealmListItem_OnUpdateServerLatency) == 0x000008, "Wrong alignment on TLUserWidgetRealmListItem_OnUpdateServerLatency");
static_assert(sizeof(TLUserWidgetRealmListItem_OnUpdateServerLatency) == 0x000008, "Wrong size on TLUserWidgetRealmListItem_OnUpdateServerLatency");
static_assert(offsetof(TLUserWidgetRealmListItem_OnUpdateServerLatency, InLatency) == 0x000000, "Member 'TLUserWidgetRealmListItem_OnUpdateServerLatency::InLatency' has a wrong offset!");

// Function TLClient.TLUserWidgetShop.OnBatchSellSettingShow
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetShop_OnBatchSellSettingShow final
{
public:
	bool                                          InShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetShop_OnBatchSellSettingShow) == 0x000001, "Wrong alignment on TLUserWidgetShop_OnBatchSellSettingShow");
static_assert(sizeof(TLUserWidgetShop_OnBatchSellSettingShow) == 0x000001, "Wrong size on TLUserWidgetShop_OnBatchSellSettingShow");
static_assert(offsetof(TLUserWidgetShop_OnBatchSellSettingShow, InShow) == 0x000000, "Member 'TLUserWidgetShop_OnBatchSellSettingShow::InShow' has a wrong offset!");

// Function TLClient.TLUserWidgetShop.SetMoneyTypes
// 0x0050 (0x0050 - 0x0000)
struct TLUserWidgetShop_SetMoneyTypes final
{
public:
	TSet<EMoneyType>                              MoneyTypes;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetShop_SetMoneyTypes) == 0x000008, "Wrong alignment on TLUserWidgetShop_SetMoneyTypes");
static_assert(sizeof(TLUserWidgetShop_SetMoneyTypes) == 0x000050, "Wrong size on TLUserWidgetShop_SetMoneyTypes");
static_assert(offsetof(TLUserWidgetShop_SetMoneyTypes, MoneyTypes) == 0x000000, "Member 'TLUserWidgetShop_SetMoneyTypes::MoneyTypes' has a wrong offset!");

// Function TLClient.TLUserWidgetShop.SetShopOpenType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetShop_SetShopOpenType final
{
public:
	ETLShopOpenType                               InOpenType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetShop_SetShopOpenType) == 0x000001, "Wrong alignment on TLUserWidgetShop_SetShopOpenType");
static_assert(sizeof(TLUserWidgetShop_SetShopOpenType) == 0x000001, "Wrong size on TLUserWidgetShop_SetShopOpenType");
static_assert(offsetof(TLUserWidgetShop_SetShopOpenType, InOpenType) == 0x000000, "Member 'TLUserWidgetShop_SetShopOpenType::InOpenType' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillTraitSlot.OnClickTraitButtonSoundEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillTraitSlot_OnClickTraitButtonSoundEvent final
{
public:
	bool                                          InActivate;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillTraitSlot_OnClickTraitButtonSoundEvent) == 0x000001, "Wrong alignment on TLUserWidgetSkillTraitSlot_OnClickTraitButtonSoundEvent");
static_assert(sizeof(TLUserWidgetSkillTraitSlot_OnClickTraitButtonSoundEvent) == 0x000001, "Wrong size on TLUserWidgetSkillTraitSlot_OnClickTraitButtonSoundEvent");
static_assert(offsetof(TLUserWidgetSkillTraitSlot_OnClickTraitButtonSoundEvent, InActivate) == 0x000000, "Member 'TLUserWidgetSkillTraitSlot_OnClickTraitButtonSoundEvent::InActivate' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillTraitSlot.OnStartActivateTraitSlotAnim
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillTraitSlot_OnStartActivateTraitSlotAnim final
{
public:
	bool                                          InActivate;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillTraitSlot_OnStartActivateTraitSlotAnim) == 0x000001, "Wrong alignment on TLUserWidgetSkillTraitSlot_OnStartActivateTraitSlotAnim");
static_assert(sizeof(TLUserWidgetSkillTraitSlot_OnStartActivateTraitSlotAnim) == 0x000001, "Wrong size on TLUserWidgetSkillTraitSlot_OnStartActivateTraitSlotAnim");
static_assert(offsetof(TLUserWidgetSkillTraitSlot_OnStartActivateTraitSlotAnim, InActivate) == 0x000000, "Member 'TLUserWidgetSkillTraitSlot_OnStartActivateTraitSlotAnim::InActivate' has a wrong offset!");

// Function TLClient.TLUserWidgetSiegeDistributionFrame.OnUpdateUnionLeaderEnable
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSiegeDistributionFrame_OnUpdateUnionLeaderEnable final
{
public:
	bool                                          IsMaster;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSiegeDistributionFrame_OnUpdateUnionLeaderEnable) == 0x000001, "Wrong alignment on TLUserWidgetSiegeDistributionFrame_OnUpdateUnionLeaderEnable");
static_assert(sizeof(TLUserWidgetSiegeDistributionFrame_OnUpdateUnionLeaderEnable) == 0x000001, "Wrong size on TLUserWidgetSiegeDistributionFrame_OnUpdateUnionLeaderEnable");
static_assert(offsetof(TLUserWidgetSiegeDistributionFrame_OnUpdateUnionLeaderEnable, IsMaster) == 0x000000, "Member 'TLUserWidgetSiegeDistributionFrame_OnUpdateUnionLeaderEnable::IsMaster' has a wrong offset!");

// Function TLClient.TLUserWidgetSiegeDistributionWindow.OnUpdateGuildLeaderEnable
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSiegeDistributionWindow_OnUpdateGuildLeaderEnable final
{
public:
	bool                                          IsMaster;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSiegeDistributionWindow_OnUpdateGuildLeaderEnable) == 0x000001, "Wrong alignment on TLUserWidgetSiegeDistributionWindow_OnUpdateGuildLeaderEnable");
static_assert(sizeof(TLUserWidgetSiegeDistributionWindow_OnUpdateGuildLeaderEnable) == 0x000001, "Wrong size on TLUserWidgetSiegeDistributionWindow_OnUpdateGuildLeaderEnable");
static_assert(offsetof(TLUserWidgetSiegeDistributionWindow_OnUpdateGuildLeaderEnable, IsMaster) == 0x000000, "Member 'TLUserWidgetSiegeDistributionWindow_OnUpdateGuildLeaderEnable::IsMaster' has a wrong offset!");

// Function TLClient.TLUserWidgetSiegeWarfareFailuree.SetCastleType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSiegeWarfareFailuree_SetCastleType final
{
public:
	ECastleType                                   InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSiegeWarfareFailuree_SetCastleType) == 0x000001, "Wrong alignment on TLUserWidgetSiegeWarfareFailuree_SetCastleType");
static_assert(sizeof(TLUserWidgetSiegeWarfareFailuree_SetCastleType) == 0x000001, "Wrong size on TLUserWidgetSiegeWarfareFailuree_SetCastleType");
static_assert(offsetof(TLUserWidgetSiegeWarfareFailuree_SetCastleType, InType) == 0x000000, "Member 'TLUserWidgetSiegeWarfareFailuree_SetCastleType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillAcquireScreenMessage.OnEventAcquireSkillWeaponType
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetSkillAcquireScreenMessage_OnEventAcquireSkillWeaponType final
{
public:
	EWeaponCategory                               WeaponCategory1;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponCategory                               WeaponCategory2;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillAcquireScreenMessage_OnEventAcquireSkillWeaponType) == 0x000001, "Wrong alignment on TLUserWidgetSkillAcquireScreenMessage_OnEventAcquireSkillWeaponType");
static_assert(sizeof(TLUserWidgetSkillAcquireScreenMessage_OnEventAcquireSkillWeaponType) == 0x000002, "Wrong size on TLUserWidgetSkillAcquireScreenMessage_OnEventAcquireSkillWeaponType");
static_assert(offsetof(TLUserWidgetSkillAcquireScreenMessage_OnEventAcquireSkillWeaponType, WeaponCategory1) == 0x000000, "Member 'TLUserWidgetSkillAcquireScreenMessage_OnEventAcquireSkillWeaponType::WeaponCategory1' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillAcquireScreenMessage_OnEventAcquireSkillWeaponType, WeaponCategory2) == 0x000001, "Member 'TLUserWidgetSkillAcquireScreenMessage_OnEventAcquireSkillWeaponType::WeaponCategory2' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillBookSkillSlotContainer.OnSkillWrapBoxUpdated
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetSkillBookSkillSlotContainer_OnSkillWrapBoxUpdated final
{
public:
	class UTLWrapBox*                             WrapBox;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotNum;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetSkillBookSkillSlotContainer_OnSkillWrapBoxUpdated) == 0x000008, "Wrong alignment on TLUserWidgetSkillBookSkillSlotContainer_OnSkillWrapBoxUpdated");
static_assert(sizeof(TLUserWidgetSkillBookSkillSlotContainer_OnSkillWrapBoxUpdated) == 0x000010, "Wrong size on TLUserWidgetSkillBookSkillSlotContainer_OnSkillWrapBoxUpdated");
static_assert(offsetof(TLUserWidgetSkillBookSkillSlotContainer_OnSkillWrapBoxUpdated, WrapBox) == 0x000000, "Member 'TLUserWidgetSkillBookSkillSlotContainer_OnSkillWrapBoxUpdated::WrapBox' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillBookSkillSlotContainer_OnSkillWrapBoxUpdated, SlotNum) == 0x000008, "Member 'TLUserWidgetSkillBookSkillSlotContainer_OnSkillWrapBoxUpdated::SlotNum' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillBook.OnChangedWeaponSetCategory_BP
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetSkillBook_OnChangedWeaponSetCategory_BP final
{
public:
	ETLSkillBookWeaponSetType                     WeaponSetType1;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLSkillBookWeaponSetType                     WeaponSetType2;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillBook_OnChangedWeaponSetCategory_BP) == 0x000001, "Wrong alignment on TLUserWidgetSkillBook_OnChangedWeaponSetCategory_BP");
static_assert(sizeof(TLUserWidgetSkillBook_OnChangedWeaponSetCategory_BP) == 0x000002, "Wrong size on TLUserWidgetSkillBook_OnChangedWeaponSetCategory_BP");
static_assert(offsetof(TLUserWidgetSkillBook_OnChangedWeaponSetCategory_BP, WeaponSetType1) == 0x000000, "Member 'TLUserWidgetSkillBook_OnChangedWeaponSetCategory_BP::WeaponSetType1' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillBook_OnChangedWeaponSetCategory_BP, WeaponSetType2) == 0x000001, "Member 'TLUserWidgetSkillBook_OnChangedWeaponSetCategory_BP::WeaponSetType2' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillBook.OnQuickSlotSelected_BP
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillBook_OnQuickSlotSelected_BP final
{
public:
	ETLSkillBookSelectedSkillSlotType             SkillSlotType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillBook_OnQuickSlotSelected_BP) == 0x000001, "Wrong alignment on TLUserWidgetSkillBook_OnQuickSlotSelected_BP");
static_assert(sizeof(TLUserWidgetSkillBook_OnQuickSlotSelected_BP) == 0x000001, "Wrong size on TLUserWidgetSkillBook_OnQuickSlotSelected_BP");
static_assert(offsetof(TLUserWidgetSkillBook_OnQuickSlotSelected_BP, SkillSlotType) == 0x000000, "Member 'TLUserWidgetSkillBook_OnQuickSlotSelected_BP::SkillSlotType' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillBook.OnSkillBookChangedWeaponCategory_BP
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetSkillBook_OnSkillBookChangedWeaponCategory_BP final
{
public:
	int32                                         WeaponSetIndex1;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeaponSetIndex2;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillBook_OnSkillBookChangedWeaponCategory_BP) == 0x000004, "Wrong alignment on TLUserWidgetSkillBook_OnSkillBookChangedWeaponCategory_BP");
static_assert(sizeof(TLUserWidgetSkillBook_OnSkillBookChangedWeaponCategory_BP) == 0x000008, "Wrong size on TLUserWidgetSkillBook_OnSkillBookChangedWeaponCategory_BP");
static_assert(offsetof(TLUserWidgetSkillBook_OnSkillBookChangedWeaponCategory_BP, WeaponSetIndex1) == 0x000000, "Member 'TLUserWidgetSkillBook_OnSkillBookChangedWeaponCategory_BP::WeaponSetIndex1' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillBook_OnSkillBookChangedWeaponCategory_BP, WeaponSetIndex2) == 0x000004, "Member 'TLUserWidgetSkillBook_OnSkillBookChangedWeaponCategory_BP::WeaponSetIndex2' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillBook.OnSkillSlotSelected_BP
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillBook_OnSkillSlotSelected_BP final
{
public:
	ETLSkillBookSelectedSkillSlotType             SkillSlotType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillBook_OnSkillSlotSelected_BP) == 0x000001, "Wrong alignment on TLUserWidgetSkillBook_OnSkillSlotSelected_BP");
static_assert(sizeof(TLUserWidgetSkillBook_OnSkillSlotSelected_BP) == 0x000001, "Wrong size on TLUserWidgetSkillBook_OnSkillSlotSelected_BP");
static_assert(offsetof(TLUserWidgetSkillBook_OnSkillSlotSelected_BP, SkillSlotType) == 0x000000, "Member 'TLUserWidgetSkillBook_OnSkillSlotSelected_BP::SkillSlotType' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillBook.OnUpdateMembershipActive_BP
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillBook_OnUpdateMembershipActive_BP final
{
public:
	ETLQuickSlotPresetState                       State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillBook_OnUpdateMembershipActive_BP) == 0x000001, "Wrong alignment on TLUserWidgetSkillBook_OnUpdateMembershipActive_BP");
static_assert(sizeof(TLUserWidgetSkillBook_OnUpdateMembershipActive_BP) == 0x000001, "Wrong size on TLUserWidgetSkillBook_OnUpdateMembershipActive_BP");
static_assert(offsetof(TLUserWidgetSkillBook_OnUpdateMembershipActive_BP, State) == 0x000000, "Member 'TLUserWidgetSkillBook_OnUpdateMembershipActive_BP::State' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillBook.OnUpdateSelectedEditableObject
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillBook_OnUpdateSelectedEditableObject final
{
public:
	ETLSkillBookSelectedSkillSlotType             SkillSlotType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillBook_OnUpdateSelectedEditableObject) == 0x000001, "Wrong alignment on TLUserWidgetSkillBook_OnUpdateSelectedEditableObject");
static_assert(sizeof(TLUserWidgetSkillBook_OnUpdateSelectedEditableObject) == 0x000001, "Wrong size on TLUserWidgetSkillBook_OnUpdateSelectedEditableObject");
static_assert(offsetof(TLUserWidgetSkillBook_OnUpdateSelectedEditableObject, SkillSlotType) == 0x000000, "Member 'TLUserWidgetSkillBook_OnUpdateSelectedEditableObject::SkillSlotType' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillBookPopUpWeaponType.OnSkillBookPopUpWeaponTypeWeaponCategorySelected_BP
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetSkillBookPopUpWeaponType_OnSkillBookPopUpWeaponTypeWeaponCategorySelected_BP final
{
public:
	EWeaponCategory                               InWeaponCategory;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WeaponSetIndex;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillBookPopUpWeaponType_OnSkillBookPopUpWeaponTypeWeaponCategorySelected_BP) == 0x000004, "Wrong alignment on TLUserWidgetSkillBookPopUpWeaponType_OnSkillBookPopUpWeaponTypeWeaponCategorySelected_BP");
static_assert(sizeof(TLUserWidgetSkillBookPopUpWeaponType_OnSkillBookPopUpWeaponTypeWeaponCategorySelected_BP) == 0x000008, "Wrong size on TLUserWidgetSkillBookPopUpWeaponType_OnSkillBookPopUpWeaponTypeWeaponCategorySelected_BP");
static_assert(offsetof(TLUserWidgetSkillBookPopUpWeaponType_OnSkillBookPopUpWeaponTypeWeaponCategorySelected_BP, InWeaponCategory) == 0x000000, "Member 'TLUserWidgetSkillBookPopUpWeaponType_OnSkillBookPopUpWeaponTypeWeaponCategorySelected_BP::InWeaponCategory' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillBookPopUpWeaponType_OnSkillBookPopUpWeaponTypeWeaponCategorySelected_BP, WeaponSetIndex) == 0x000004, "Member 'TLUserWidgetSkillBookPopUpWeaponType_OnSkillBookPopUpWeaponTypeWeaponCategorySelected_BP::WeaponSetIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillBookPopUpWeaponType.PlayIndexAnimation
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSkillBookPopUpWeaponType_PlayIndexAnimation final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillBookPopUpWeaponType_PlayIndexAnimation) == 0x000004, "Wrong alignment on TLUserWidgetSkillBookPopUpWeaponType_PlayIndexAnimation");
static_assert(sizeof(TLUserWidgetSkillBookPopUpWeaponType_PlayIndexAnimation) == 0x000004, "Wrong size on TLUserWidgetSkillBookPopUpWeaponType_PlayIndexAnimation");
static_assert(offsetof(TLUserWidgetSkillBookPopUpWeaponType_PlayIndexAnimation, InIndex) == 0x000000, "Member 'TLUserWidgetSkillBookPopUpWeaponType_PlayIndexAnimation::InIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillBookSlot.GetIgnoreUnUsable
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillBookSlot_GetIgnoreUnUsable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillBookSlot_GetIgnoreUnUsable) == 0x000001, "Wrong alignment on TLUserWidgetSkillBookSlot_GetIgnoreUnUsable");
static_assert(sizeof(TLUserWidgetSkillBookSlot_GetIgnoreUnUsable) == 0x000001, "Wrong size on TLUserWidgetSkillBookSlot_GetIgnoreUnUsable");
static_assert(offsetof(TLUserWidgetSkillBookSlot_GetIgnoreUnUsable, ReturnValue) == 0x000000, "Member 'TLUserWidgetSkillBookSlot_GetIgnoreUnUsable::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillBookSlot.OnSetExchangeButtonActive
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillBookSlot_OnSetExchangeButtonActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillBookSlot_OnSetExchangeButtonActive) == 0x000001, "Wrong alignment on TLUserWidgetSkillBookSlot_OnSetExchangeButtonActive");
static_assert(sizeof(TLUserWidgetSkillBookSlot_OnSetExchangeButtonActive) == 0x000001, "Wrong size on TLUserWidgetSkillBookSlot_OnSetExchangeButtonActive");
static_assert(offsetof(TLUserWidgetSkillBookSlot_OnSetExchangeButtonActive, bActive) == 0x000000, "Member 'TLUserWidgetSkillBookSlot_OnSetExchangeButtonActive::bActive' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillBookSlot.OnSetExchangeButtonVisible
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillBookSlot_OnSetExchangeButtonVisible final
{
public:
	bool                                          bVislble;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillBookSlot_OnSetExchangeButtonVisible) == 0x000001, "Wrong alignment on TLUserWidgetSkillBookSlot_OnSetExchangeButtonVisible");
static_assert(sizeof(TLUserWidgetSkillBookSlot_OnSetExchangeButtonVisible) == 0x000001, "Wrong size on TLUserWidgetSkillBookSlot_OnSetExchangeButtonVisible");
static_assert(offsetof(TLUserWidgetSkillBookSlot_OnSetExchangeButtonVisible, bVislble) == 0x000000, "Member 'TLUserWidgetSkillBookSlot_OnSetExchangeButtonVisible::bVislble' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillEnchant.SetTitleBarShow
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillEnchant_SetTitleBarShow final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillEnchant_SetTitleBarShow) == 0x000001, "Wrong alignment on TLUserWidgetSkillEnchant_SetTitleBarShow");
static_assert(sizeof(TLUserWidgetSkillEnchant_SetTitleBarShow) == 0x000001, "Wrong size on TLUserWidgetSkillEnchant_SetTitleBarShow");
static_assert(offsetof(TLUserWidgetSkillEnchant_SetTitleBarShow, bShow) == 0x000000, "Member 'TLUserWidgetSkillEnchant_SetTitleBarShow::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillExchangeSlot.OnSetIsCurrentSkill
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillExchangeSlot_OnSetIsCurrentSkill final
{
public:
	bool                                          bIsCurrentSkill;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillExchangeSlot_OnSetIsCurrentSkill) == 0x000001, "Wrong alignment on TLUserWidgetSkillExchangeSlot_OnSetIsCurrentSkill");
static_assert(sizeof(TLUserWidgetSkillExchangeSlot_OnSetIsCurrentSkill) == 0x000001, "Wrong size on TLUserWidgetSkillExchangeSlot_OnSetIsCurrentSkill");
static_assert(offsetof(TLUserWidgetSkillExchangeSlot_OnSetIsCurrentSkill, bIsCurrentSkill) == 0x000000, "Member 'TLUserWidgetSkillExchangeSlot_OnSetIsCurrentSkill::bIsCurrentSkill' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpResult.BPEventOnExcceedEnchant
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSkillLevelUpResult_BPEventOnExcceedEnchant final
{
public:
	int32                                         ExcceedPercent;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpResult_BPEventOnExcceedEnchant) == 0x000004, "Wrong alignment on TLUserWidgetSkillLevelUpResult_BPEventOnExcceedEnchant");
static_assert(sizeof(TLUserWidgetSkillLevelUpResult_BPEventOnExcceedEnchant) == 0x000004, "Wrong size on TLUserWidgetSkillLevelUpResult_BPEventOnExcceedEnchant");
static_assert(offsetof(TLUserWidgetSkillLevelUpResult_BPEventOnExcceedEnchant, ExcceedPercent) == 0x000000, "Member 'TLUserWidgetSkillLevelUpResult_BPEventOnExcceedEnchant::ExcceedPercent' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpResult.EventOnFinishProgressBar
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSkillLevelUpResult_EventOnFinishProgressBar final
{
public:
	int32                                         InSuccessAppliedIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpResult_EventOnFinishProgressBar) == 0x000004, "Wrong alignment on TLUserWidgetSkillLevelUpResult_EventOnFinishProgressBar");
static_assert(sizeof(TLUserWidgetSkillLevelUpResult_EventOnFinishProgressBar) == 0x000004, "Wrong size on TLUserWidgetSkillLevelUpResult_EventOnFinishProgressBar");
static_assert(offsetof(TLUserWidgetSkillLevelUpResult_EventOnFinishProgressBar, InSuccessAppliedIndex) == 0x000000, "Member 'TLUserWidgetSkillLevelUpResult_EventOnFinishProgressBar::InSuccessAppliedIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpResult.EventOnIncreaseSuccessIndex
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSkillLevelUpResult_EventOnIncreaseSuccessIndex final
{
public:
	int32                                         SuccessIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpResult_EventOnIncreaseSuccessIndex) == 0x000004, "Wrong alignment on TLUserWidgetSkillLevelUpResult_EventOnIncreaseSuccessIndex");
static_assert(sizeof(TLUserWidgetSkillLevelUpResult_EventOnIncreaseSuccessIndex) == 0x000004, "Wrong size on TLUserWidgetSkillLevelUpResult_EventOnIncreaseSuccessIndex");
static_assert(offsetof(TLUserWidgetSkillLevelUpResult_EventOnIncreaseSuccessIndex, SuccessIndex) == 0x000000, "Member 'TLUserWidgetSkillLevelUpResult_EventOnIncreaseSuccessIndex::SuccessIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpResult.EventOnStartProgressBar
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSkillLevelUpResult_EventOnStartProgressBar final
{
public:
	int32                                         InSuccessAppliedIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpResult_EventOnStartProgressBar) == 0x000004, "Wrong alignment on TLUserWidgetSkillLevelUpResult_EventOnStartProgressBar");
static_assert(sizeof(TLUserWidgetSkillLevelUpResult_EventOnStartProgressBar) == 0x000004, "Wrong size on TLUserWidgetSkillLevelUpResult_EventOnStartProgressBar");
static_assert(offsetof(TLUserWidgetSkillLevelUpResult_EventOnStartProgressBar, InSuccessAppliedIndex) == 0x000000, "Member 'TLUserWidgetSkillLevelUpResult_EventOnStartProgressBar::InSuccessAppliedIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpResult.OnEnchantPointProgressBarAnimStop
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSkillLevelUpResult_OnEnchantPointProgressBarAnimStop final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpResult_OnEnchantPointProgressBarAnimStop) == 0x000004, "Wrong alignment on TLUserWidgetSkillLevelUpResult_OnEnchantPointProgressBarAnimStop");
static_assert(sizeof(TLUserWidgetSkillLevelUpResult_OnEnchantPointProgressBarAnimStop) == 0x000004, "Wrong size on TLUserWidgetSkillLevelUpResult_OnEnchantPointProgressBarAnimStop");
static_assert(offsetof(TLUserWidgetSkillLevelUpResult_OnEnchantPointProgressBarAnimStop, InPercent) == 0x000000, "Member 'TLUserWidgetSkillLevelUpResult_OnEnchantPointProgressBarAnimStop::InPercent' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpResult.OnSetResult
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSkillLevelUpResult_OnSetResult final
{
public:
	int32                                         InSuccessAppliedIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpResult_OnSetResult) == 0x000004, "Wrong alignment on TLUserWidgetSkillLevelUpResult_OnSetResult");
static_assert(sizeof(TLUserWidgetSkillLevelUpResult_OnSetResult) == 0x000004, "Wrong size on TLUserWidgetSkillLevelUpResult_OnSetResult");
static_assert(offsetof(TLUserWidgetSkillLevelUpResult_OnSetResult, InSuccessAppliedIndex) == 0x000000, "Member 'TLUserWidgetSkillLevelUpResult_OnSetResult::InSuccessAppliedIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpResult.OnUpdateFailText
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetSkillLevelUpResult_OnUpdateFailText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillLevelUpResult_OnUpdateFailText) == 0x000008, "Wrong alignment on TLUserWidgetSkillLevelUpResult_OnUpdateFailText");
static_assert(sizeof(TLUserWidgetSkillLevelUpResult_OnUpdateFailText) == 0x000018, "Wrong size on TLUserWidgetSkillLevelUpResult_OnUpdateFailText");
static_assert(offsetof(TLUserWidgetSkillLevelUpResult_OnUpdateFailText, InText) == 0x000000, "Member 'TLUserWidgetSkillLevelUpResult_OnUpdateFailText::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillLevelUpResult.OnUpdateScreenMsg
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetSkillLevelUpResult_OnUpdateScreenMsg final
{
public:
	int32                                         InSuccessAppliedIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbStopEnchant;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetSkillLevelUpResult_OnUpdateScreenMsg) == 0x000004, "Wrong alignment on TLUserWidgetSkillLevelUpResult_OnUpdateScreenMsg");
static_assert(sizeof(TLUserWidgetSkillLevelUpResult_OnUpdateScreenMsg) == 0x000008, "Wrong size on TLUserWidgetSkillLevelUpResult_OnUpdateScreenMsg");
static_assert(offsetof(TLUserWidgetSkillLevelUpResult_OnUpdateScreenMsg, InSuccessAppliedIndex) == 0x000000, "Member 'TLUserWidgetSkillLevelUpResult_OnUpdateScreenMsg::InSuccessAppliedIndex' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillLevelUpResult_OnUpdateScreenMsg, InbStopEnchant) == 0x000004, "Member 'TLUserWidgetSkillLevelUpResult_OnUpdateScreenMsg::InbStopEnchant' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillMasteryNode.OnConnectNode
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSkillMasteryNode_OnConnectNode final
{
public:
	int32                                         InTreeIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillMasteryNode_OnConnectNode) == 0x000004, "Wrong alignment on TLUserWidgetSkillMasteryNode_OnConnectNode");
static_assert(sizeof(TLUserWidgetSkillMasteryNode_OnConnectNode) == 0x000004, "Wrong size on TLUserWidgetSkillMasteryNode_OnConnectNode");
static_assert(offsetof(TLUserWidgetSkillMasteryNode_OnConnectNode, InTreeIndex) == 0x000000, "Member 'TLUserWidgetSkillMasteryNode_OnConnectNode::InTreeIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillMasteryNode.OnDisconnectNode
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSkillMasteryNode_OnDisconnectNode final
{
public:
	int32                                         InTreeIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillMasteryNode_OnDisconnectNode) == 0x000004, "Wrong alignment on TLUserWidgetSkillMasteryNode_OnDisconnectNode");
static_assert(sizeof(TLUserWidgetSkillMasteryNode_OnDisconnectNode) == 0x000004, "Wrong size on TLUserWidgetSkillMasteryNode_OnDisconnectNode");
static_assert(offsetof(TLUserWidgetSkillMasteryNode_OnDisconnectNode, InTreeIndex) == 0x000000, "Member 'TLUserWidgetSkillMasteryNode_OnDisconnectNode::InTreeIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillMasteryNode.OnUpdateGuideText
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillMasteryNode_OnUpdateGuideText final
{
public:
	bool                                          bOpenable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillMasteryNode_OnUpdateGuideText) == 0x000001, "Wrong alignment on TLUserWidgetSkillMasteryNode_OnUpdateGuideText");
static_assert(sizeof(TLUserWidgetSkillMasteryNode_OnUpdateGuideText) == 0x000001, "Wrong size on TLUserWidgetSkillMasteryNode_OnUpdateGuideText");
static_assert(offsetof(TLUserWidgetSkillMasteryNode_OnUpdateGuideText, bOpenable) == 0x000000, "Member 'TLUserWidgetSkillMasteryNode_OnUpdateGuideText::bOpenable' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillPresetRename.HandleInputTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetSkillPresetRename_HandleInputTextChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillPresetRename_HandleInputTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetSkillPresetRename_HandleInputTextChanged");
static_assert(sizeof(TLUserWidgetSkillPresetRename_HandleInputTextChanged) == 0x000018, "Wrong size on TLUserWidgetSkillPresetRename_HandleInputTextChanged");
static_assert(offsetof(TLUserWidgetSkillPresetRename_HandleInputTextChanged, InText) == 0x000000, "Member 'TLUserWidgetSkillPresetRename_HandleInputTextChanged::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillPresetRename.HandleInputTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetSkillPresetRename_HandleInputTextCommitted final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetSkillPresetRename_HandleInputTextCommitted) == 0x000008, "Wrong alignment on TLUserWidgetSkillPresetRename_HandleInputTextCommitted");
static_assert(sizeof(TLUserWidgetSkillPresetRename_HandleInputTextCommitted) == 0x000020, "Wrong size on TLUserWidgetSkillPresetRename_HandleInputTextCommitted");
static_assert(offsetof(TLUserWidgetSkillPresetRename_HandleInputTextCommitted, InInputText) == 0x000000, "Member 'TLUserWidgetSkillPresetRename_HandleInputTextCommitted::InInputText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSkillPresetRename_HandleInputTextCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetSkillPresetRename_HandleInputTextCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillPresetRename.HandleOnTextFocusLost
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetSkillPresetRename_HandleOnTextFocusLost final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillPresetRename_HandleOnTextFocusLost) == 0x000004, "Wrong alignment on TLUserWidgetSkillPresetRename_HandleOnTextFocusLost");
static_assert(sizeof(TLUserWidgetSkillPresetRename_HandleOnTextFocusLost) == 0x000008, "Wrong size on TLUserWidgetSkillPresetRename_HandleOnTextFocusLost");
static_assert(offsetof(TLUserWidgetSkillPresetRename_HandleOnTextFocusLost, InFocusEvent) == 0x000000, "Member 'TLUserWidgetSkillPresetRename_HandleOnTextFocusLost::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillTrait.OnUpdateMembershipActive_BP
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSkillTrait_OnUpdateMembershipActive_BP final
{
public:
	ETLQuickSlotPresetState                       State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillTrait_OnUpdateMembershipActive_BP) == 0x000001, "Wrong alignment on TLUserWidgetSkillTrait_OnUpdateMembershipActive_BP");
static_assert(sizeof(TLUserWidgetSkillTrait_OnUpdateMembershipActive_BP) == 0x000001, "Wrong size on TLUserWidgetSkillTrait_OnUpdateMembershipActive_BP");
static_assert(offsetof(TLUserWidgetSkillTrait_OnUpdateMembershipActive_BP, State) == 0x000000, "Member 'TLUserWidgetSkillTrait_OnUpdateMembershipActive_BP::State' has a wrong offset!");

// Function TLClient.TLUserWidgetSkillTraitDetailPanel.OnReArrangeDetailPanel
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetSkillTraitDetailPanel_OnReArrangeDetailPanel final
{
public:
	int32                                         TraitNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSkillTraitDetailPanel_OnReArrangeDetailPanel) == 0x000004, "Wrong alignment on TLUserWidgetSkillTraitDetailPanel_OnReArrangeDetailPanel");
static_assert(sizeof(TLUserWidgetSkillTraitDetailPanel_OnReArrangeDetailPanel) == 0x000004, "Wrong size on TLUserWidgetSkillTraitDetailPanel_OnReArrangeDetailPanel");
static_assert(offsetof(TLUserWidgetSkillTraitDetailPanel_OnReArrangeDetailPanel, TraitNum) == 0x000000, "Member 'TLUserWidgetSkillTraitDetailPanel_OnReArrangeDetailPanel::TraitNum' has a wrong offset!");

// Function TLClient.TLUserWidgetSlider2D.HandleValueChanged
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetSlider2D_HandleValueChanged final
{
public:
	struct FVector2D                              InValue;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSlider2D_HandleValueChanged) == 0x000004, "Wrong alignment on TLUserWidgetSlider2D_HandleValueChanged");
static_assert(sizeof(TLUserWidgetSlider2D_HandleValueChanged) == 0x000008, "Wrong size on TLUserWidgetSlider2D_HandleValueChanged");
static_assert(offsetof(TLUserWidgetSlider2D_HandleValueChanged, InValue) == 0x000000, "Member 'TLUserWidgetSlider2D_HandleValueChanged::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSlider2D.SetValue
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetSlider2D_SetValue final
{
public:
	struct FVector2D                              InValue;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSlider2D_SetValue) == 0x000004, "Wrong alignment on TLUserWidgetSlider2D_SetValue");
static_assert(sizeof(TLUserWidgetSlider2D_SetValue) == 0x000008, "Wrong size on TLUserWidgetSlider2D_SetValue");
static_assert(offsetof(TLUserWidgetSlider2D_SetValue, InValue) == 0x000000, "Member 'TLUserWidgetSlider2D_SetValue::InValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSlider2D.GetValue
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetSlider2D_GetValue final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSlider2D_GetValue) == 0x000004, "Wrong alignment on TLUserWidgetSlider2D_GetValue");
static_assert(sizeof(TLUserWidgetSlider2D_GetValue) == 0x000008, "Wrong size on TLUserWidgetSlider2D_GetValue");
static_assert(offsetof(TLUserWidgetSlider2D_GetValue, ReturnValue) == 0x000000, "Member 'TLUserWidgetSlider2D_GetValue::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetSocialMotionSlotGroup.OnNotificationOff
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetSocialMotionSlotGroup_OnNotificationOff final
{
public:
	class FName                                   InMotionID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSocialMotionSlotGroup_OnNotificationOff) == 0x000004, "Wrong alignment on TLUserWidgetSocialMotionSlotGroup_OnNotificationOff");
static_assert(sizeof(TLUserWidgetSocialMotionSlotGroup_OnNotificationOff) == 0x000008, "Wrong size on TLUserWidgetSocialMotionSlotGroup_OnNotificationOff");
static_assert(offsetof(TLUserWidgetSocialMotionSlotGroup_OnNotificationOff, InMotionID) == 0x000000, "Member 'TLUserWidgetSocialMotionSlotGroup_OnNotificationOff::InMotionID' has a wrong offset!");

// Function TLClient.TLUserWidgetSocialMotionSlotGroup.OnSocialMotionSlotSelected
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetSocialMotionSlotGroup_OnSocialMotionSlotSelected final
{
public:
	class FName                                   InID;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSocialMotionSlotGroup_OnSocialMotionSlotSelected) == 0x000004, "Wrong alignment on TLUserWidgetSocialMotionSlotGroup_OnSocialMotionSlotSelected");
static_assert(sizeof(TLUserWidgetSocialMotionSlotGroup_OnSocialMotionSlotSelected) == 0x000008, "Wrong size on TLUserWidgetSocialMotionSlotGroup_OnSocialMotionSlotSelected");
static_assert(offsetof(TLUserWidgetSocialMotionSlotGroup_OnSocialMotionSlotSelected, InID) == 0x000000, "Member 'TLUserWidgetSocialMotionSlotGroup_OnSocialMotionSlotSelected::InID' has a wrong offset!");

// Function TLClient.TLUserWidgetSpecialShopGoodsSlot.OnActiveAccountBenefit
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSpecialShopGoodsSlot_OnActiveAccountBenefit final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpecialShopGoodsSlot_OnActiveAccountBenefit) == 0x000001, "Wrong alignment on TLUserWidgetSpecialShopGoodsSlot_OnActiveAccountBenefit");
static_assert(sizeof(TLUserWidgetSpecialShopGoodsSlot_OnActiveAccountBenefit) == 0x000001, "Wrong size on TLUserWidgetSpecialShopGoodsSlot_OnActiveAccountBenefit");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsSlot_OnActiveAccountBenefit, InIsActive) == 0x000000, "Member 'TLUserWidgetSpecialShopGoodsSlot_OnActiveAccountBenefit::InIsActive' has a wrong offset!");

// Function TLClient.TLUserWidgetSpecialShopGoodsSlot.OnActiveMembership
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSpecialShopGoodsSlot_OnActiveMembership final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpecialShopGoodsSlot_OnActiveMembership) == 0x000001, "Wrong alignment on TLUserWidgetSpecialShopGoodsSlot_OnActiveMembership");
static_assert(sizeof(TLUserWidgetSpecialShopGoodsSlot_OnActiveMembership) == 0x000001, "Wrong size on TLUserWidgetSpecialShopGoodsSlot_OnActiveMembership");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsSlot_OnActiveMembership, InIsActive) == 0x000000, "Member 'TLUserWidgetSpecialShopGoodsSlot_OnActiveMembership::InIsActive' has a wrong offset!");

// Function TLClient.TLUserWidgetSpecialShopGoodsSlot.OnDiscountGoods
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetSpecialShopGoodsSlot_OnDiscountGoods final
{
public:
	ETLPurchaseDiscountType                       InDiscountType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsShowDiscount;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpecialShopGoodsSlot_OnDiscountGoods) == 0x000001, "Wrong alignment on TLUserWidgetSpecialShopGoodsSlot_OnDiscountGoods");
static_assert(sizeof(TLUserWidgetSpecialShopGoodsSlot_OnDiscountGoods) == 0x000002, "Wrong size on TLUserWidgetSpecialShopGoodsSlot_OnDiscountGoods");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsSlot_OnDiscountGoods, InDiscountType) == 0x000000, "Member 'TLUserWidgetSpecialShopGoodsSlot_OnDiscountGoods::InDiscountType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsSlot_OnDiscountGoods, InIsShowDiscount) == 0x000001, "Member 'TLUserWidgetSpecialShopGoodsSlot_OnDiscountGoods::InIsShowDiscount' has a wrong offset!");

// Function TLClient.TLUserWidgetSpecialShopGoodsSlot.OnEndSale
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSpecialShopGoodsSlot_OnEndSale final
{
public:
	bool                                          InIsEndSales;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpecialShopGoodsSlot_OnEndSale) == 0x000001, "Wrong alignment on TLUserWidgetSpecialShopGoodsSlot_OnEndSale");
static_assert(sizeof(TLUserWidgetSpecialShopGoodsSlot_OnEndSale) == 0x000001, "Wrong size on TLUserWidgetSpecialShopGoodsSlot_OnEndSale");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsSlot_OnEndSale, InIsEndSales) == 0x000000, "Member 'TLUserWidgetSpecialShopGoodsSlot_OnEndSale::InIsEndSales' has a wrong offset!");

// Function TLClient.TLUserWidgetSpecialShopGoodsSlot.OnExistAccumulateMileage
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSpecialShopGoodsSlot_OnExistAccumulateMileage final
{
public:
	bool                                          InIsExist;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpecialShopGoodsSlot_OnExistAccumulateMileage) == 0x000001, "Wrong alignment on TLUserWidgetSpecialShopGoodsSlot_OnExistAccumulateMileage");
static_assert(sizeof(TLUserWidgetSpecialShopGoodsSlot_OnExistAccumulateMileage) == 0x000001, "Wrong size on TLUserWidgetSpecialShopGoodsSlot_OnExistAccumulateMileage");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsSlot_OnExistAccumulateMileage, InIsExist) == 0x000000, "Member 'TLUserWidgetSpecialShopGoodsSlot_OnExistAccumulateMileage::InIsExist' has a wrong offset!");

// Function TLClient.TLUserWidgetSpecialShopGoodsSlot.OnExistDisplayGoodsInfo
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSpecialShopGoodsSlot_OnExistDisplayGoodsInfo final
{
public:
	bool                                          InIsExistGoodsInfo;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpecialShopGoodsSlot_OnExistDisplayGoodsInfo) == 0x000001, "Wrong alignment on TLUserWidgetSpecialShopGoodsSlot_OnExistDisplayGoodsInfo");
static_assert(sizeof(TLUserWidgetSpecialShopGoodsSlot_OnExistDisplayGoodsInfo) == 0x000001, "Wrong size on TLUserWidgetSpecialShopGoodsSlot_OnExistDisplayGoodsInfo");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsSlot_OnExistDisplayGoodsInfo, InIsExistGoodsInfo) == 0x000000, "Member 'TLUserWidgetSpecialShopGoodsSlot_OnExistDisplayGoodsInfo::InIsExistGoodsInfo' has a wrong offset!");

// Function TLClient.TLUserWidgetSpecialShopGoodsSlot.OnGoodsCondition
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetSpecialShopGoodsSlot_OnGoodsCondition final
{
public:
	bool                                          InIsNotSales;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsExistConditionText;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpecialShopGoodsSlot_OnGoodsCondition) == 0x000001, "Wrong alignment on TLUserWidgetSpecialShopGoodsSlot_OnGoodsCondition");
static_assert(sizeof(TLUserWidgetSpecialShopGoodsSlot_OnGoodsCondition) == 0x000002, "Wrong size on TLUserWidgetSpecialShopGoodsSlot_OnGoodsCondition");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsSlot_OnGoodsCondition, InIsNotSales) == 0x000000, "Member 'TLUserWidgetSpecialShopGoodsSlot_OnGoodsCondition::InIsNotSales' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsSlot_OnGoodsCondition, IsExistConditionText) == 0x000001, "Member 'TLUserWidgetSpecialShopGoodsSlot_OnGoodsCondition::IsExistConditionText' has a wrong offset!");

// Function TLClient.TLUserWidgetSpecialShopGoodsSlot.OnGoodsState
// 0x0003 (0x0003 - 0x0000)
struct TLUserWidgetSpecialShopGoodsSlot_OnGoodsState final
{
public:
	bool                                          InIsNew;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsEvent;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsBest;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpecialShopGoodsSlot_OnGoodsState) == 0x000001, "Wrong alignment on TLUserWidgetSpecialShopGoodsSlot_OnGoodsState");
static_assert(sizeof(TLUserWidgetSpecialShopGoodsSlot_OnGoodsState) == 0x000003, "Wrong size on TLUserWidgetSpecialShopGoodsSlot_OnGoodsState");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsSlot_OnGoodsState, InIsNew) == 0x000000, "Member 'TLUserWidgetSpecialShopGoodsSlot_OnGoodsState::InIsNew' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsSlot_OnGoodsState, InIsEvent) == 0x000001, "Member 'TLUserWidgetSpecialShopGoodsSlot_OnGoodsState::InIsEvent' has a wrong offset!");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsSlot_OnGoodsState, InIsBest) == 0x000002, "Member 'TLUserWidgetSpecialShopGoodsSlot_OnGoodsState::InIsBest' has a wrong offset!");

// Function TLClient.TLUserWidgetSpecialShopGoodsSlot.OnShowEffectiveTime
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSpecialShopGoodsSlot_OnShowEffectiveTime final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpecialShopGoodsSlot_OnShowEffectiveTime) == 0x000001, "Wrong alignment on TLUserWidgetSpecialShopGoodsSlot_OnShowEffectiveTime");
static_assert(sizeof(TLUserWidgetSpecialShopGoodsSlot_OnShowEffectiveTime) == 0x000001, "Wrong size on TLUserWidgetSpecialShopGoodsSlot_OnShowEffectiveTime");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsSlot_OnShowEffectiveTime, InIsShow) == 0x000000, "Member 'TLUserWidgetSpecialShopGoodsSlot_OnShowEffectiveTime::InIsShow' has a wrong offset!");

// Function TLClient.TLUserWidgetSpecialShopGoodsSlot.OnShowTimeLimit
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSpecialShopGoodsSlot_OnShowTimeLimit final
{
public:
	bool                                          InIsShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSpecialShopGoodsSlot_OnShowTimeLimit) == 0x000001, "Wrong alignment on TLUserWidgetSpecialShopGoodsSlot_OnShowTimeLimit");
static_assert(sizeof(TLUserWidgetSpecialShopGoodsSlot_OnShowTimeLimit) == 0x000001, "Wrong size on TLUserWidgetSpecialShopGoodsSlot_OnShowTimeLimit");
static_assert(offsetof(TLUserWidgetSpecialShopGoodsSlot_OnShowTimeLimit, InIsShow) == 0x000000, "Member 'TLUserWidgetSpecialShopGoodsSlot_OnShowTimeLimit::InIsShow' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterStatPanel.OnUpdateName
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetCharacterStatPanel_OnUpdateName final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterStatPanel_OnUpdateName) == 0x000008, "Wrong alignment on TLUserWidgetCharacterStatPanel_OnUpdateName");
static_assert(sizeof(TLUserWidgetCharacterStatPanel_OnUpdateName) == 0x000018, "Wrong size on TLUserWidgetCharacterStatPanel_OnUpdateName");
static_assert(offsetof(TLUserWidgetCharacterStatPanel_OnUpdateName, InName) == 0x000000, "Member 'TLUserWidgetCharacterStatPanel_OnUpdateName::InName' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterStatPanel.OnUpdatePreviewStat
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetCharacterStatPanel_OnUpdatePreviewStat final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterStatPanel_OnUpdatePreviewStat) == 0x000008, "Wrong alignment on TLUserWidgetCharacterStatPanel_OnUpdatePreviewStat");
static_assert(sizeof(TLUserWidgetCharacterStatPanel_OnUpdatePreviewStat) == 0x000018, "Wrong size on TLUserWidgetCharacterStatPanel_OnUpdatePreviewStat");
static_assert(offsetof(TLUserWidgetCharacterStatPanel_OnUpdatePreviewStat, InText) == 0x000000, "Member 'TLUserWidgetCharacterStatPanel_OnUpdatePreviewStat::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetCharacterStatPanel.OnUpdateValueText
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetCharacterStatPanel_OnUpdateValueText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetCharacterStatPanel_OnUpdateValueText) == 0x000008, "Wrong alignment on TLUserWidgetCharacterStatPanel_OnUpdateValueText");
static_assert(sizeof(TLUserWidgetCharacterStatPanel_OnUpdateValueText) == 0x000018, "Wrong size on TLUserWidgetCharacterStatPanel_OnUpdateValueText");
static_assert(offsetof(TLUserWidgetCharacterStatPanel_OnUpdateValueText, InText) == 0x000000, "Member 'TLUserWidgetCharacterStatPanel_OnUpdateValueText::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetStatDetailPopup.OnUpdateName
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetStatDetailPopup_OnUpdateName final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetStatDetailPopup_OnUpdateName) == 0x000008, "Wrong alignment on TLUserWidgetStatDetailPopup_OnUpdateName");
static_assert(sizeof(TLUserWidgetStatDetailPopup_OnUpdateName) == 0x000018, "Wrong size on TLUserWidgetStatDetailPopup_OnUpdateName");
static_assert(offsetof(TLUserWidgetStatDetailPopup_OnUpdateName, InName) == 0x000000, "Member 'TLUserWidgetStatDetailPopup_OnUpdateName::InName' has a wrong offset!");

// Function TLClient.TLUserWidgetStatDetailPopup.OnUpdateStatIcon
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetStatDetailPopup_OnUpdateStatIcon final
{
public:
	class UTLUserWidgetStatEdit*                  InStatEditWidget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetStatDetailPopup_OnUpdateStatIcon) == 0x000008, "Wrong alignment on TLUserWidgetStatDetailPopup_OnUpdateStatIcon");
static_assert(sizeof(TLUserWidgetStatDetailPopup_OnUpdateStatIcon) == 0x000008, "Wrong size on TLUserWidgetStatDetailPopup_OnUpdateStatIcon");
static_assert(offsetof(TLUserWidgetStatDetailPopup_OnUpdateStatIcon, InStatEditWidget) == 0x000000, "Member 'TLUserWidgetStatDetailPopup_OnUpdateStatIcon::InStatEditWidget' has a wrong offset!");

// Function TLClient.TLUserWidgetStatEdit.OnSettingPadEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetStatEdit_OnSettingPadEvent final
{
public:
	bool                                          IsConsole;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetStatEdit_OnSettingPadEvent) == 0x000001, "Wrong alignment on TLUserWidgetStatEdit_OnSettingPadEvent");
static_assert(sizeof(TLUserWidgetStatEdit_OnSettingPadEvent) == 0x000001, "Wrong size on TLUserWidgetStatEdit_OnSettingPadEvent");
static_assert(offsetof(TLUserWidgetStatEdit_OnSettingPadEvent, IsConsole) == 0x000000, "Member 'TLUserWidgetStatEdit_OnSettingPadEvent::IsConsole' has a wrong offset!");

// Function TLClient.TLUserWidgetStatEdit.GetSumPoint
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetStatEdit_GetSumPoint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetStatEdit_GetSumPoint) == 0x000004, "Wrong alignment on TLUserWidgetStatEdit_GetSumPoint");
static_assert(sizeof(TLUserWidgetStatEdit_GetSumPoint) == 0x000004, "Wrong size on TLUserWidgetStatEdit_GetSumPoint");
static_assert(offsetof(TLUserWidgetStatEdit_GetSumPoint, ReturnValue) == 0x000000, "Member 'TLUserWidgetStatEdit_GetSumPoint::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetStaticMapIconStronghold.OnUpdateHp
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetStaticMapIconStronghold_OnUpdateHp final
{
public:
	float                                         InHpPercent;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetStaticMapIconStronghold_OnUpdateHp) == 0x000004, "Wrong alignment on TLUserWidgetStaticMapIconStronghold_OnUpdateHp");
static_assert(sizeof(TLUserWidgetStaticMapIconStronghold_OnUpdateHp) == 0x000004, "Wrong size on TLUserWidgetStaticMapIconStronghold_OnUpdateHp");
static_assert(offsetof(TLUserWidgetStaticMapIconStronghold_OnUpdateHp, InHpPercent) == 0x000000, "Member 'TLUserWidgetStaticMapIconStronghold_OnUpdateHp::InHpPercent' has a wrong offset!");

// Function TLClient.TLUserWidgetStatTooltip.OnUpdateMaxAttack
// 0x0014 (0x0014 - 0x0000)
struct TLUserWidgetStatTooltip_OnUpdateMaxAttack final
{
public:
	int32                                         InTotal;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPrime;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItem;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InBuff;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCollection;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetStatTooltip_OnUpdateMaxAttack) == 0x000004, "Wrong alignment on TLUserWidgetStatTooltip_OnUpdateMaxAttack");
static_assert(sizeof(TLUserWidgetStatTooltip_OnUpdateMaxAttack) == 0x000014, "Wrong size on TLUserWidgetStatTooltip_OnUpdateMaxAttack");
static_assert(offsetof(TLUserWidgetStatTooltip_OnUpdateMaxAttack, InTotal) == 0x000000, "Member 'TLUserWidgetStatTooltip_OnUpdateMaxAttack::InTotal' has a wrong offset!");
static_assert(offsetof(TLUserWidgetStatTooltip_OnUpdateMaxAttack, InPrime) == 0x000004, "Member 'TLUserWidgetStatTooltip_OnUpdateMaxAttack::InPrime' has a wrong offset!");
static_assert(offsetof(TLUserWidgetStatTooltip_OnUpdateMaxAttack, InItem) == 0x000008, "Member 'TLUserWidgetStatTooltip_OnUpdateMaxAttack::InItem' has a wrong offset!");
static_assert(offsetof(TLUserWidgetStatTooltip_OnUpdateMaxAttack, InBuff) == 0x00000C, "Member 'TLUserWidgetStatTooltip_OnUpdateMaxAttack::InBuff' has a wrong offset!");
static_assert(offsetof(TLUserWidgetStatTooltip_OnUpdateMaxAttack, InCollection) == 0x000010, "Member 'TLUserWidgetStatTooltip_OnUpdateMaxAttack::InCollection' has a wrong offset!");

// Function TLClient.TLUserWidgetStatTooltip.OnUpdateMaxAttackWhenBaseZero
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetStatTooltip_OnUpdateMaxAttackWhenBaseZero final
{
public:
	int32                                         InTotal;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPrime;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetStatTooltip_OnUpdateMaxAttackWhenBaseZero) == 0x000004, "Wrong alignment on TLUserWidgetStatTooltip_OnUpdateMaxAttackWhenBaseZero");
static_assert(sizeof(TLUserWidgetStatTooltip_OnUpdateMaxAttackWhenBaseZero) == 0x000008, "Wrong size on TLUserWidgetStatTooltip_OnUpdateMaxAttackWhenBaseZero");
static_assert(offsetof(TLUserWidgetStatTooltip_OnUpdateMaxAttackWhenBaseZero, InTotal) == 0x000000, "Member 'TLUserWidgetStatTooltip_OnUpdateMaxAttackWhenBaseZero::InTotal' has a wrong offset!");
static_assert(offsetof(TLUserWidgetStatTooltip_OnUpdateMaxAttackWhenBaseZero, InPrime) == 0x000004, "Member 'TLUserWidgetStatTooltip_OnUpdateMaxAttackWhenBaseZero::InPrime' has a wrong offset!");

// Function TLClient.TLUserWidgetStatTooltip.OnUpdateMinAttack
// 0x0014 (0x0014 - 0x0000)
struct TLUserWidgetStatTooltip_OnUpdateMinAttack final
{
public:
	int32                                         InTotal;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPrime;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItem;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InBuff;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCollection;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetStatTooltip_OnUpdateMinAttack) == 0x000004, "Wrong alignment on TLUserWidgetStatTooltip_OnUpdateMinAttack");
static_assert(sizeof(TLUserWidgetStatTooltip_OnUpdateMinAttack) == 0x000014, "Wrong size on TLUserWidgetStatTooltip_OnUpdateMinAttack");
static_assert(offsetof(TLUserWidgetStatTooltip_OnUpdateMinAttack, InTotal) == 0x000000, "Member 'TLUserWidgetStatTooltip_OnUpdateMinAttack::InTotal' has a wrong offset!");
static_assert(offsetof(TLUserWidgetStatTooltip_OnUpdateMinAttack, InPrime) == 0x000004, "Member 'TLUserWidgetStatTooltip_OnUpdateMinAttack::InPrime' has a wrong offset!");
static_assert(offsetof(TLUserWidgetStatTooltip_OnUpdateMinAttack, InItem) == 0x000008, "Member 'TLUserWidgetStatTooltip_OnUpdateMinAttack::InItem' has a wrong offset!");
static_assert(offsetof(TLUserWidgetStatTooltip_OnUpdateMinAttack, InBuff) == 0x00000C, "Member 'TLUserWidgetStatTooltip_OnUpdateMinAttack::InBuff' has a wrong offset!");
static_assert(offsetof(TLUserWidgetStatTooltip_OnUpdateMinAttack, InCollection) == 0x000010, "Member 'TLUserWidgetStatTooltip_OnUpdateMinAttack::InCollection' has a wrong offset!");

// Function TLClient.TLUserWidgetStatTooltip.OnUpdateMinAttackWhenBonusZero
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetStatTooltip_OnUpdateMinAttackWhenBonusZero final
{
public:
	int32                                         InTotal;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetStatTooltip_OnUpdateMinAttackWhenBonusZero) == 0x000004, "Wrong alignment on TLUserWidgetStatTooltip_OnUpdateMinAttackWhenBonusZero");
static_assert(sizeof(TLUserWidgetStatTooltip_OnUpdateMinAttackWhenBonusZero) == 0x000004, "Wrong size on TLUserWidgetStatTooltip_OnUpdateMinAttackWhenBonusZero");
static_assert(offsetof(TLUserWidgetStatTooltip_OnUpdateMinAttackWhenBonusZero, InTotal) == 0x000000, "Member 'TLUserWidgetStatTooltip_OnUpdateMinAttackWhenBonusZero::InTotal' has a wrong offset!");

// Function TLClient.TLUserWidgetStatTooltip.OnUpdateNonAttackStat
// 0x0014 (0x0014 - 0x0000)
struct TLUserWidgetStatTooltip_OnUpdateNonAttackStat final
{
public:
	float                                         InTotal;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPrime;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InItem;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBuff;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCollection;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetStatTooltip_OnUpdateNonAttackStat) == 0x000004, "Wrong alignment on TLUserWidgetStatTooltip_OnUpdateNonAttackStat");
static_assert(sizeof(TLUserWidgetStatTooltip_OnUpdateNonAttackStat) == 0x000014, "Wrong size on TLUserWidgetStatTooltip_OnUpdateNonAttackStat");
static_assert(offsetof(TLUserWidgetStatTooltip_OnUpdateNonAttackStat, InTotal) == 0x000000, "Member 'TLUserWidgetStatTooltip_OnUpdateNonAttackStat::InTotal' has a wrong offset!");
static_assert(offsetof(TLUserWidgetStatTooltip_OnUpdateNonAttackStat, InPrime) == 0x000004, "Member 'TLUserWidgetStatTooltip_OnUpdateNonAttackStat::InPrime' has a wrong offset!");
static_assert(offsetof(TLUserWidgetStatTooltip_OnUpdateNonAttackStat, InItem) == 0x000008, "Member 'TLUserWidgetStatTooltip_OnUpdateNonAttackStat::InItem' has a wrong offset!");
static_assert(offsetof(TLUserWidgetStatTooltip_OnUpdateNonAttackStat, InBuff) == 0x00000C, "Member 'TLUserWidgetStatTooltip_OnUpdateNonAttackStat::InBuff' has a wrong offset!");
static_assert(offsetof(TLUserWidgetStatTooltip_OnUpdateNonAttackStat, InCollection) == 0x000010, "Member 'TLUserWidgetStatTooltip_OnUpdateNonAttackStat::InCollection' has a wrong offset!");

// Function TLClient.TLUserWidgetStorage.OnUpdateExtendButton
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetStorage_OnUpdateExtendButton final
{
public:
	bool                                          bCanExtend;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetStorage_OnUpdateExtendButton) == 0x000001, "Wrong alignment on TLUserWidgetStorage_OnUpdateExtendButton");
static_assert(sizeof(TLUserWidgetStorage_OnUpdateExtendButton) == 0x000001, "Wrong size on TLUserWidgetStorage_OnUpdateExtendButton");
static_assert(offsetof(TLUserWidgetStorage_OnUpdateExtendButton, bCanExtend) == 0x000000, "Member 'TLUserWidgetStorage_OnUpdateExtendButton::bCanExtend' has a wrong offset!");

// Function TLClient.TLUserWidgetStorage.OnUpdateHasNextRank
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetStorage_OnUpdateHasNextRank final
{
public:
	bool                                          bHasNextRank;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetStorage_OnUpdateHasNextRank) == 0x000001, "Wrong alignment on TLUserWidgetStorage_OnUpdateHasNextRank");
static_assert(sizeof(TLUserWidgetStorage_OnUpdateHasNextRank) == 0x000001, "Wrong size on TLUserWidgetStorage_OnUpdateHasNextRank");
static_assert(offsetof(TLUserWidgetStorage_OnUpdateHasNextRank, bHasNextRank) == 0x000000, "Member 'TLUserWidgetStorage_OnUpdateHasNextRank::bHasNextRank' has a wrong offset!");

// Function TLClient.TLUserWidgetSubButton.OnOpenSubButton
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetSubButton_OnOpenSubButton final
{
public:
	bool                                          InIsOpen;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetSubButton_OnOpenSubButton) == 0x000001, "Wrong alignment on TLUserWidgetSubButton_OnOpenSubButton");
static_assert(sizeof(TLUserWidgetSubButton_OnOpenSubButton) == 0x000001, "Wrong size on TLUserWidgetSubButton_OnOpenSubButton");
static_assert(offsetof(TLUserWidgetSubButton_OnOpenSubButton, InIsOpen) == 0x000000, "Member 'TLUserWidgetSubButton_OnOpenSubButton::InIsOpen' has a wrong offset!");

// Function TLClient.TLUserWidgetTargetInfoBase.OnChangedUIAbnormalStatus
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTargetInfoBase_OnChangedUIAbnormalStatus final
{
public:
	EHpAbnormalStatus                             InStatus;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTargetInfoBase_OnChangedUIAbnormalStatus) == 0x000001, "Wrong alignment on TLUserWidgetTargetInfoBase_OnChangedUIAbnormalStatus");
static_assert(sizeof(TLUserWidgetTargetInfoBase_OnChangedUIAbnormalStatus) == 0x000001, "Wrong size on TLUserWidgetTargetInfoBase_OnChangedUIAbnormalStatus");
static_assert(offsetof(TLUserWidgetTargetInfoBase_OnChangedUIAbnormalStatus, InStatus) == 0x000000, "Member 'TLUserWidgetTargetInfoBase_OnChangedUIAbnormalStatus::InStatus' has a wrong offset!");

// Function TLClient.TLUserWidgetTargetInfoBase.OnShowFocusTarget
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTargetInfoBase_OnShowFocusTarget final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTargetInfoBase_OnShowFocusTarget) == 0x000001, "Wrong alignment on TLUserWidgetTargetInfoBase_OnShowFocusTarget");
static_assert(sizeof(TLUserWidgetTargetInfoBase_OnShowFocusTarget) == 0x000001, "Wrong size on TLUserWidgetTargetInfoBase_OnShowFocusTarget");
static_assert(offsetof(TLUserWidgetTargetInfoBase_OnShowFocusTarget, bShow) == 0x000000, "Member 'TLUserWidgetTargetInfoBase_OnShowFocusTarget::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetTargetInfoBase.OnUpdateOverridedNpcColor
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetTargetInfoBase_OnUpdateOverridedNpcColor final
{
public:
	struct FLinearColor                           InOverridedColor;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTargetInfoBase_OnUpdateOverridedNpcColor) == 0x000004, "Wrong alignment on TLUserWidgetTargetInfoBase_OnUpdateOverridedNpcColor");
static_assert(sizeof(TLUserWidgetTargetInfoBase_OnUpdateOverridedNpcColor) == 0x000010, "Wrong size on TLUserWidgetTargetInfoBase_OnUpdateOverridedNpcColor");
static_assert(offsetof(TLUserWidgetTargetInfoBase_OnUpdateOverridedNpcColor, InOverridedColor) == 0x000000, "Member 'TLUserWidgetTargetInfoBase_OnUpdateOverridedNpcColor::InOverridedColor' has a wrong offset!");

// Function TLClient.TLUserWidgetTargetInfoBase.OnUpdateOverridedRelationColor
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetTargetInfoBase_OnUpdateOverridedRelationColor final
{
public:
	struct FLinearColor                           InOverridedColor;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTargetInfoBase_OnUpdateOverridedRelationColor) == 0x000004, "Wrong alignment on TLUserWidgetTargetInfoBase_OnUpdateOverridedRelationColor");
static_assert(sizeof(TLUserWidgetTargetInfoBase_OnUpdateOverridedRelationColor) == 0x000010, "Wrong size on TLUserWidgetTargetInfoBase_OnUpdateOverridedRelationColor");
static_assert(offsetof(TLUserWidgetTargetInfoBase_OnUpdateOverridedRelationColor, InOverridedColor) == 0x000000, "Member 'TLUserWidgetTargetInfoBase_OnUpdateOverridedRelationColor::InOverridedColor' has a wrong offset!");

// Function TLClient.TLUserWidgetTargetInfoBase.OnUpdateRelationToMyPc
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTargetInfoBase_OnUpdateRelationToMyPc final
{
public:
	ETLRelationColorToMyPc                        InTLRelationColorToMyPc;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTargetInfoBase_OnUpdateRelationToMyPc) == 0x000001, "Wrong alignment on TLUserWidgetTargetInfoBase_OnUpdateRelationToMyPc");
static_assert(sizeof(TLUserWidgetTargetInfoBase_OnUpdateRelationToMyPc) == 0x000001, "Wrong size on TLUserWidgetTargetInfoBase_OnUpdateRelationToMyPc");
static_assert(offsetof(TLUserWidgetTargetInfoBase_OnUpdateRelationToMyPc, InTLRelationColorToMyPc) == 0x000000, "Member 'TLUserWidgetTargetInfoBase_OnUpdateRelationToMyPc::InTLRelationColorToMyPc' has a wrong offset!");

// Function TLClient.TLUserWidgetTargetInfoBase.OnUpdateWeaponImage
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTargetInfoBase_OnUpdateWeaponImage final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTargetInfoBase_OnUpdateWeaponImage) == 0x000001, "Wrong alignment on TLUserWidgetTargetInfoBase_OnUpdateWeaponImage");
static_assert(sizeof(TLUserWidgetTargetInfoBase_OnUpdateWeaponImage) == 0x000001, "Wrong size on TLUserWidgetTargetInfoBase_OnUpdateWeaponImage");
static_assert(offsetof(TLUserWidgetTargetInfoBase_OnUpdateWeaponImage, bShow) == 0x000000, "Member 'TLUserWidgetTargetInfoBase_OnUpdateWeaponImage::bShow' has a wrong offset!");

// Function TLClient.TLUserWidgetTargetScan.OnChangeExtendsScanList
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTargetScan_OnChangeExtendsScanList final
{
public:
	bool                                          bExtends;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTargetScan_OnChangeExtendsScanList) == 0x000001, "Wrong alignment on TLUserWidgetTargetScan_OnChangeExtendsScanList");
static_assert(sizeof(TLUserWidgetTargetScan_OnChangeExtendsScanList) == 0x000001, "Wrong size on TLUserWidgetTargetScan_OnChangeExtendsScanList");
static_assert(offsetof(TLUserWidgetTargetScan_OnChangeExtendsScanList, bExtends) == 0x000000, "Member 'TLUserWidgetTargetScan_OnChangeExtendsScanList::bExtends' has a wrong offset!");

// Function TLClient.TLUserWidgetTargetScan.OnTargetScanAutoTimer
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetTargetScan_OnTargetScanAutoTimer final
{
public:
	float                                         InTimerIntervalSec;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTargetScan_OnTargetScanAutoTimer) == 0x000004, "Wrong alignment on TLUserWidgetTargetScan_OnTargetScanAutoTimer");
static_assert(sizeof(TLUserWidgetTargetScan_OnTargetScanAutoTimer) == 0x000004, "Wrong size on TLUserWidgetTargetScan_OnTargetScanAutoTimer");
static_assert(offsetof(TLUserWidgetTargetScan_OnTargetScanAutoTimer, InTimerIntervalSec) == 0x000000, "Member 'TLUserWidgetTargetScan_OnTargetScanAutoTimer::InTimerIntervalSec' has a wrong offset!");

// Function TLClient.TLUserWidgetTargetScan.OnToggleUI
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTargetScan_OnToggleUI final
{
public:
	bool                                          InOn;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTargetScan_OnToggleUI) == 0x000001, "Wrong alignment on TLUserWidgetTargetScan_OnToggleUI");
static_assert(sizeof(TLUserWidgetTargetScan_OnToggleUI) == 0x000001, "Wrong size on TLUserWidgetTargetScan_OnToggleUI");
static_assert(offsetof(TLUserWidgetTargetScan_OnToggleUI, InOn) == 0x000000, "Member 'TLUserWidgetTargetScan_OnToggleUI::InOn' has a wrong offset!");

// Function TLClient.TLUserWidgetTargetScanItem.OnChangedAbnormalModifyGroup
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTargetScanItem_OnChangedAbnormalModifyGroup final
{
public:
	EModifyGroup                                  OutAbnormalModifyGroup;                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTargetScanItem_OnChangedAbnormalModifyGroup) == 0x000001, "Wrong alignment on TLUserWidgetTargetScanItem_OnChangedAbnormalModifyGroup");
static_assert(sizeof(TLUserWidgetTargetScanItem_OnChangedAbnormalModifyGroup) == 0x000001, "Wrong size on TLUserWidgetTargetScanItem_OnChangedAbnormalModifyGroup");
static_assert(offsetof(TLUserWidgetTargetScanItem_OnChangedAbnormalModifyGroup, OutAbnormalModifyGroup) == 0x000000, "Member 'TLUserWidgetTargetScanItem_OnChangedAbnormalModifyGroup::OutAbnormalModifyGroup' has a wrong offset!");

// Function TLClient.TLUserWidgetTargetScanItem.OnFixTargetChanged
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTargetScanItem_OnFixTargetChanged final
{
public:
	bool                                          InFixTarget;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTargetScanItem_OnFixTargetChanged) == 0x000001, "Wrong alignment on TLUserWidgetTargetScanItem_OnFixTargetChanged");
static_assert(sizeof(TLUserWidgetTargetScanItem_OnFixTargetChanged) == 0x000001, "Wrong size on TLUserWidgetTargetScanItem_OnFixTargetChanged");
static_assert(offsetof(TLUserWidgetTargetScanItem_OnFixTargetChanged, InFixTarget) == 0x000000, "Member 'TLUserWidgetTargetScanItem_OnFixTargetChanged::InFixTarget' has a wrong offset!");

// Function TLClient.TLUserWidgetTargetScanItem.OnInterimTargetChanged
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTargetScanItem_OnInterimTargetChanged final
{
public:
	bool                                          InterimTarget;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTargetScanItem_OnInterimTargetChanged) == 0x000001, "Wrong alignment on TLUserWidgetTargetScanItem_OnInterimTargetChanged");
static_assert(sizeof(TLUserWidgetTargetScanItem_OnInterimTargetChanged) == 0x000001, "Wrong size on TLUserWidgetTargetScanItem_OnInterimTargetChanged");
static_assert(offsetof(TLUserWidgetTargetScanItem_OnInterimTargetChanged, InterimTarget) == 0x000000, "Member 'TLUserWidgetTargetScanItem_OnInterimTargetChanged::InterimTarget' has a wrong offset!");

// Function TLClient.TLUserWidgetTargetScanItem.OnMyPcDamaged
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTargetScanItem_OnMyPcDamaged final
{
public:
	EFloaterCategory                              InDamageType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTargetScanItem_OnMyPcDamaged) == 0x000001, "Wrong alignment on TLUserWidgetTargetScanItem_OnMyPcDamaged");
static_assert(sizeof(TLUserWidgetTargetScanItem_OnMyPcDamaged) == 0x000001, "Wrong size on TLUserWidgetTargetScanItem_OnMyPcDamaged");
static_assert(offsetof(TLUserWidgetTargetScanItem_OnMyPcDamaged, InDamageType) == 0x000000, "Member 'TLUserWidgetTargetScanItem_OnMyPcDamaged::InDamageType' has a wrong offset!");

// Function TLClient.TLUserWidgetTargetScanItem.OnSetFriendlyTarget
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTargetScanItem_OnSetFriendlyTarget final
{
public:
	bool                                          InFriendly;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTargetScanItem_OnSetFriendlyTarget) == 0x000001, "Wrong alignment on TLUserWidgetTargetScanItem_OnSetFriendlyTarget");
static_assert(sizeof(TLUserWidgetTargetScanItem_OnSetFriendlyTarget) == 0x000001, "Wrong size on TLUserWidgetTargetScanItem_OnSetFriendlyTarget");
static_assert(offsetof(TLUserWidgetTargetScanItem_OnSetFriendlyTarget, InFriendly) == 0x000000, "Member 'TLUserWidgetTargetScanItem_OnSetFriendlyTarget::InFriendly' has a wrong offset!");

// Function TLClient.TLUserWidgetTargetScanItem.OnUpdateUseSkillMode
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTargetScanItem_OnUpdateUseSkillMode final
{
public:
	bool                                          bInUseSkillMode;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTargetScanItem_OnUpdateUseSkillMode) == 0x000001, "Wrong alignment on TLUserWidgetTargetScanItem_OnUpdateUseSkillMode");
static_assert(sizeof(TLUserWidgetTargetScanItem_OnUpdateUseSkillMode) == 0x000001, "Wrong size on TLUserWidgetTargetScanItem_OnUpdateUseSkillMode");
static_assert(offsetof(TLUserWidgetTargetScanItem_OnUpdateUseSkillMode, bInUseSkillMode) == 0x000000, "Member 'TLUserWidgetTargetScanItem_OnUpdateUseSkillMode::bInUseSkillMode' has a wrong offset!");

// Function TLClient.TLUserWidgetTargetScanItem.SetVisibleGuildEmblem
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTargetScanItem_SetVisibleGuildEmblem final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTargetScanItem_SetVisibleGuildEmblem) == 0x000001, "Wrong alignment on TLUserWidgetTargetScanItem_SetVisibleGuildEmblem");
static_assert(sizeof(TLUserWidgetTargetScanItem_SetVisibleGuildEmblem) == 0x000001, "Wrong size on TLUserWidgetTargetScanItem_SetVisibleGuildEmblem");
static_assert(offsetof(TLUserWidgetTargetScanItem_SetVisibleGuildEmblem, bVisible) == 0x000000, "Member 'TLUserWidgetTargetScanItem_SetVisibleGuildEmblem::bVisible' has a wrong offset!");

// Function TLClient.TLUserWidgetTaxDeliveryGuide.OnUpdateTaxDeliveryState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTaxDeliveryGuide_OnUpdateTaxDeliveryState final
{
public:
	ETLTaxDeliveryState                           InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTaxDeliveryGuide_OnUpdateTaxDeliveryState) == 0x000001, "Wrong alignment on TLUserWidgetTaxDeliveryGuide_OnUpdateTaxDeliveryState");
static_assert(sizeof(TLUserWidgetTaxDeliveryGuide_OnUpdateTaxDeliveryState) == 0x000001, "Wrong size on TLUserWidgetTaxDeliveryGuide_OnUpdateTaxDeliveryState");
static_assert(offsetof(TLUserWidgetTaxDeliveryGuide_OnUpdateTaxDeliveryState, InState) == 0x000000, "Member 'TLUserWidgetTaxDeliveryGuide_OnUpdateTaxDeliveryState::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetTaxDeliveryResult.OnUpdateAccumulateRewardItem
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetTaxDeliveryResult_OnUpdateAccumulateRewardItem final
{
public:
	int32                                         InRewardCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTaxDeliveryResult_OnUpdateAccumulateRewardItem) == 0x000004, "Wrong alignment on TLUserWidgetTaxDeliveryResult_OnUpdateAccumulateRewardItem");
static_assert(sizeof(TLUserWidgetTaxDeliveryResult_OnUpdateAccumulateRewardItem) == 0x000004, "Wrong size on TLUserWidgetTaxDeliveryResult_OnUpdateAccumulateRewardItem");
static_assert(offsetof(TLUserWidgetTaxDeliveryResult_OnUpdateAccumulateRewardItem, InRewardCount) == 0x000000, "Member 'TLUserWidgetTaxDeliveryResult_OnUpdateAccumulateRewardItem::InRewardCount' has a wrong offset!");

// Function TLClient.TLUserWidgetTaxDeliveryResult.OnUpdateRewardItem
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetTaxDeliveryResult_OnUpdateRewardItem final
{
public:
	int32                                         InRewardCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTaxDeliveryResult_OnUpdateRewardItem) == 0x000004, "Wrong alignment on TLUserWidgetTaxDeliveryResult_OnUpdateRewardItem");
static_assert(sizeof(TLUserWidgetTaxDeliveryResult_OnUpdateRewardItem) == 0x000004, "Wrong size on TLUserWidgetTaxDeliveryResult_OnUpdateRewardItem");
static_assert(offsetof(TLUserWidgetTaxDeliveryResult_OnUpdateRewardItem, InRewardCount) == 0x000000, "Member 'TLUserWidgetTaxDeliveryResult_OnUpdateRewardItem::InRewardCount' has a wrong offset!");

// Function TLClient.TLUserWidgetTaxDeliveryTimeItem.OnUpdateSelected
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTaxDeliveryTimeItem_OnUpdateSelected final
{
public:
	bool                                          IsSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTaxDeliveryTimeItem_OnUpdateSelected) == 0x000001, "Wrong alignment on TLUserWidgetTaxDeliveryTimeItem_OnUpdateSelected");
static_assert(sizeof(TLUserWidgetTaxDeliveryTimeItem_OnUpdateSelected) == 0x000001, "Wrong size on TLUserWidgetTaxDeliveryTimeItem_OnUpdateSelected");
static_assert(offsetof(TLUserWidgetTaxDeliveryTimeItem_OnUpdateSelected, IsSelected) == 0x000000, "Member 'TLUserWidgetTaxDeliveryTimeItem_OnUpdateSelected::IsSelected' has a wrong offset!");

// Function TLClient.TLUserWidgetTerm.ScrollBoxEula_OnUserScrolled
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetTerm_ScrollBoxEula_OnUserScrolled final
{
public:
	float                                         InOffset;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTerm_ScrollBoxEula_OnUserScrolled) == 0x000004, "Wrong alignment on TLUserWidgetTerm_ScrollBoxEula_OnUserScrolled");
static_assert(sizeof(TLUserWidgetTerm_ScrollBoxEula_OnUserScrolled) == 0x000004, "Wrong size on TLUserWidgetTerm_ScrollBoxEula_OnUserScrolled");
static_assert(offsetof(TLUserWidgetTerm_ScrollBoxEula_OnUserScrolled, InOffset) == 0x000000, "Member 'TLUserWidgetTerm_ScrollBoxEula_OnUserScrolled::InOffset' has a wrong offset!");

// Function TLClient.TLUserWidgetTimeLimitDungeonGroupItem.OnLockMemorial
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTimeLimitDungeonGroupItem_OnLockMemorial final
{
public:
	bool                                          InIsLock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTimeLimitDungeonGroupItem_OnLockMemorial) == 0x000001, "Wrong alignment on TLUserWidgetTimeLimitDungeonGroupItem_OnLockMemorial");
static_assert(sizeof(TLUserWidgetTimeLimitDungeonGroupItem_OnLockMemorial) == 0x000001, "Wrong size on TLUserWidgetTimeLimitDungeonGroupItem_OnLockMemorial");
static_assert(offsetof(TLUserWidgetTimeLimitDungeonGroupItem_OnLockMemorial, InIsLock) == 0x000000, "Member 'TLUserWidgetTimeLimitDungeonGroupItem_OnLockMemorial::InIsLock' has a wrong offset!");

// Function TLClient.TLUserWidgetTimeLimitDungeonGroupItem.OnRegionType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTimeLimitDungeonGroupItem_OnRegionType final
{
public:
	ETLJsonMapRegionType                          InRegionType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTimeLimitDungeonGroupItem_OnRegionType) == 0x000001, "Wrong alignment on TLUserWidgetTimeLimitDungeonGroupItem_OnRegionType");
static_assert(sizeof(TLUserWidgetTimeLimitDungeonGroupItem_OnRegionType) == 0x000001, "Wrong size on TLUserWidgetTimeLimitDungeonGroupItem_OnRegionType");
static_assert(offsetof(TLUserWidgetTimeLimitDungeonGroupItem_OnRegionType, InRegionType) == 0x000000, "Member 'TLUserWidgetTimeLimitDungeonGroupItem_OnRegionType::InRegionType' has a wrong offset!");

// Function TLClient.TLUserWidgetTimeTableAlarmContextMenuSlot.OnUpdateScheduleType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTimeTableAlarmContextMenuSlot_OnUpdateScheduleType final
{
public:
	ETLEventScheduleType                          InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTimeTableAlarmContextMenuSlot_OnUpdateScheduleType) == 0x000001, "Wrong alignment on TLUserWidgetTimeTableAlarmContextMenuSlot_OnUpdateScheduleType");
static_assert(sizeof(TLUserWidgetTimeTableAlarmContextMenuSlot_OnUpdateScheduleType) == 0x000001, "Wrong size on TLUserWidgetTimeTableAlarmContextMenuSlot_OnUpdateScheduleType");
static_assert(offsetof(TLUserWidgetTimeTableAlarmContextMenuSlot_OnUpdateScheduleType, InType) == 0x000000, "Member 'TLUserWidgetTimeTableAlarmContextMenuSlot_OnUpdateScheduleType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetTimeTableSlot.UpdateFoldAndUnFold
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTimeTableSlot_UpdateFoldAndUnFold final
{
public:
	bool                                          bIsFold;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTimeTableSlot_UpdateFoldAndUnFold) == 0x000001, "Wrong alignment on TLUserWidgetTimeTableSlot_UpdateFoldAndUnFold");
static_assert(sizeof(TLUserWidgetTimeTableSlot_UpdateFoldAndUnFold) == 0x000001, "Wrong size on TLUserWidgetTimeTableSlot_UpdateFoldAndUnFold");
static_assert(offsetof(TLUserWidgetTimeTableSlot_UpdateFoldAndUnFold, bIsFold) == 0x000000, "Member 'TLUserWidgetTimeTableSlot_UpdateFoldAndUnFold::bIsFold' has a wrong offset!");

// Function TLClient.TLUserWidgetTimeTableDateSlot.UpdateFoldAndUnFold
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTimeTableDateSlot_UpdateFoldAndUnFold final
{
public:
	bool                                          bIsFold;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTimeTableDateSlot_UpdateFoldAndUnFold) == 0x000001, "Wrong alignment on TLUserWidgetTimeTableDateSlot_UpdateFoldAndUnFold");
static_assert(sizeof(TLUserWidgetTimeTableDateSlot_UpdateFoldAndUnFold) == 0x000001, "Wrong size on TLUserWidgetTimeTableDateSlot_UpdateFoldAndUnFold");
static_assert(offsetof(TLUserWidgetTimeTableDateSlot_UpdateFoldAndUnFold, bIsFold) == 0x000000, "Member 'TLUserWidgetTimeTableDateSlot_UpdateFoldAndUnFold::bIsFold' has a wrong offset!");

// Function TLClient.TLUserWidgetTooltipDynamicEvent.OnDynamicEventGuildMode
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTooltipDynamicEvent_OnDynamicEventGuildMode final
{
public:
	bool                                          InIsGuildMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTooltipDynamicEvent_OnDynamicEventGuildMode) == 0x000001, "Wrong alignment on TLUserWidgetTooltipDynamicEvent_OnDynamicEventGuildMode");
static_assert(sizeof(TLUserWidgetTooltipDynamicEvent_OnDynamicEventGuildMode) == 0x000001, "Wrong size on TLUserWidgetTooltipDynamicEvent_OnDynamicEventGuildMode");
static_assert(offsetof(TLUserWidgetTooltipDynamicEvent_OnDynamicEventGuildMode, InIsGuildMode) == 0x000000, "Member 'TLUserWidgetTooltipDynamicEvent_OnDynamicEventGuildMode::InIsGuildMode' has a wrong offset!");

// Function TLClient.TLUserWidgetTooltipDynamicEvent.OnDynamicEventPVPMode
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTooltipDynamicEvent_OnDynamicEventPVPMode final
{
public:
	bool                                          InIsPvPMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTooltipDynamicEvent_OnDynamicEventPVPMode) == 0x000001, "Wrong alignment on TLUserWidgetTooltipDynamicEvent_OnDynamicEventPVPMode");
static_assert(sizeof(TLUserWidgetTooltipDynamicEvent_OnDynamicEventPVPMode) == 0x000001, "Wrong size on TLUserWidgetTooltipDynamicEvent_OnDynamicEventPVPMode");
static_assert(offsetof(TLUserWidgetTooltipDynamicEvent_OnDynamicEventPVPMode, InIsPvPMode) == 0x000000, "Member 'TLUserWidgetTooltipDynamicEvent_OnDynamicEventPVPMode::InIsPvPMode' has a wrong offset!");

// Function TLClient.TLUserWidgetTooltipDynamicEvent.OnUpdateScheduleType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTooltipDynamicEvent_OnUpdateScheduleType final
{
public:
	ETLEventScheduleType                          InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTooltipDynamicEvent_OnUpdateScheduleType) == 0x000001, "Wrong alignment on TLUserWidgetTooltipDynamicEvent_OnUpdateScheduleType");
static_assert(sizeof(TLUserWidgetTooltipDynamicEvent_OnUpdateScheduleType) == 0x000001, "Wrong size on TLUserWidgetTooltipDynamicEvent_OnUpdateScheduleType");
static_assert(offsetof(TLUserWidgetTooltipDynamicEvent_OnUpdateScheduleType, InType) == 0x000000, "Member 'TLUserWidgetTooltipDynamicEvent_OnUpdateScheduleType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetTooltipRewardListItem.OnSelectEffect
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTooltipRewardListItem_OnSelectEffect final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTooltipRewardListItem_OnSelectEffect) == 0x000001, "Wrong alignment on TLUserWidgetTooltipRewardListItem_OnSelectEffect");
static_assert(sizeof(TLUserWidgetTooltipRewardListItem_OnSelectEffect) == 0x000001, "Wrong size on TLUserWidgetTooltipRewardListItem_OnSelectEffect");
static_assert(offsetof(TLUserWidgetTooltipRewardListItem_OnSelectEffect, InIsActive) == 0x000000, "Member 'TLUserWidgetTooltipRewardListItem_OnSelectEffect::InIsActive' has a wrong offset!");

// Function TLClient.TLUserWidgetTrade.EventTabButtonGroupSelected
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetTrade_EventTabButtonGroupSelected final
{
public:
	int32                                         InSelectedIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTrade_EventTabButtonGroupSelected) == 0x000004, "Wrong alignment on TLUserWidgetTrade_EventTabButtonGroupSelected");
static_assert(sizeof(TLUserWidgetTrade_EventTabButtonGroupSelected) == 0x000004, "Wrong size on TLUserWidgetTrade_EventTabButtonGroupSelected");
static_assert(offsetof(TLUserWidgetTrade_EventTabButtonGroupSelected, InSelectedIndex) == 0x000000, "Member 'TLUserWidgetTrade_EventTabButtonGroupSelected::InSelectedIndex' has a wrong offset!");

// Function TLClient.TLUserWidgetTradeInvenPanel.HandleScrollChange
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetTradeInvenPanel_HandleScrollChange final
{
public:
	float                                         ScrollOffset;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTradeInvenPanel_HandleScrollChange) == 0x000004, "Wrong alignment on TLUserWidgetTradeInvenPanel_HandleScrollChange");
static_assert(sizeof(TLUserWidgetTradeInvenPanel_HandleScrollChange) == 0x000004, "Wrong size on TLUserWidgetTradeInvenPanel_HandleScrollChange");
static_assert(offsetof(TLUserWidgetTradeInvenPanel_HandleScrollChange, ScrollOffset) == 0x000000, "Member 'TLUserWidgetTradeInvenPanel_HandleScrollChange::ScrollOffset' has a wrong offset!");

// Function TLClient.TLUserWidgetTransferConditionSlot.OnUpdateSatisfactory
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTransferConditionSlot_OnUpdateSatisfactory final
{
public:
	bool                                          InStatus;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTransferConditionSlot_OnUpdateSatisfactory) == 0x000001, "Wrong alignment on TLUserWidgetTransferConditionSlot_OnUpdateSatisfactory");
static_assert(sizeof(TLUserWidgetTransferConditionSlot_OnUpdateSatisfactory) == 0x000001, "Wrong size on TLUserWidgetTransferConditionSlot_OnUpdateSatisfactory");
static_assert(offsetof(TLUserWidgetTransferConditionSlot_OnUpdateSatisfactory, InStatus) == 0x000000, "Member 'TLUserWidgetTransferConditionSlot_OnUpdateSatisfactory::InStatus' has a wrong offset!");

// Function TLClient.TLUserWidgetTransferServerSlot.OnUpdateServerLatency
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetTransferServerSlot_OnUpdateServerLatency final
{
public:
	int64                                         InLatency;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTransferServerSlot_OnUpdateServerLatency) == 0x000008, "Wrong alignment on TLUserWidgetTransferServerSlot_OnUpdateServerLatency");
static_assert(sizeof(TLUserWidgetTransferServerSlot_OnUpdateServerLatency) == 0x000008, "Wrong size on TLUserWidgetTransferServerSlot_OnUpdateServerLatency");
static_assert(offsetof(TLUserWidgetTransferServerSlot_OnUpdateServerLatency, InLatency) == 0x000000, "Member 'TLUserWidgetTransferServerSlot_OnUpdateServerLatency::InLatency' has a wrong offset!");

// Function TLClient.TLUserWidgetTransferServerSlot.OnUpdateServerOpenStatus
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetTransferServerSlot_OnUpdateServerOpenStatus final
{
public:
	ETLServerOpenState                            InLatency;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTransferServerSlot_OnUpdateServerOpenStatus) == 0x000001, "Wrong alignment on TLUserWidgetTransferServerSlot_OnUpdateServerOpenStatus");
static_assert(sizeof(TLUserWidgetTransferServerSlot_OnUpdateServerOpenStatus) == 0x000001, "Wrong size on TLUserWidgetTransferServerSlot_OnUpdateServerOpenStatus");
static_assert(offsetof(TLUserWidgetTransferServerSlot_OnUpdateServerOpenStatus, InLatency) == 0x000000, "Member 'TLUserWidgetTransferServerSlot_OnUpdateServerOpenStatus::InLatency' has a wrong offset!");

// Function TLClient.TLUserWidgetTutorialKeyGuide.OnUpdateHeaderKeyGuideForKeyboard
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetTutorialKeyGuide_OnUpdateHeaderKeyGuideForKeyboard final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetTutorialKeyGuide_OnUpdateHeaderKeyGuideForKeyboard) == 0x000008, "Wrong alignment on TLUserWidgetTutorialKeyGuide_OnUpdateHeaderKeyGuideForKeyboard");
static_assert(sizeof(TLUserWidgetTutorialKeyGuide_OnUpdateHeaderKeyGuideForKeyboard) == 0x000018, "Wrong size on TLUserWidgetTutorialKeyGuide_OnUpdateHeaderKeyGuideForKeyboard");
static_assert(offsetof(TLUserWidgetTutorialKeyGuide_OnUpdateHeaderKeyGuideForKeyboard, InText) == 0x000000, "Member 'TLUserWidgetTutorialKeyGuide_OnUpdateHeaderKeyGuideForKeyboard::InText' has a wrong offset!");

// Function TLClient.TLUserWidgetUnionInfo.OnInputNoticeTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetUnionInfo_OnInputNoticeTextChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetUnionInfo_OnInputNoticeTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetUnionInfo_OnInputNoticeTextChanged");
static_assert(sizeof(TLUserWidgetUnionInfo_OnInputNoticeTextChanged) == 0x000018, "Wrong size on TLUserWidgetUnionInfo_OnInputNoticeTextChanged");
static_assert(offsetof(TLUserWidgetUnionInfo_OnInputNoticeTextChanged, InInputText) == 0x000000, "Member 'TLUserWidgetUnionInfo_OnInputNoticeTextChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetUnionListItem.OnUpdateGuildListInfo
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetUnionListItem_OnUpdateGuildListInfo final
{
public:
	bool                                          InIsOpen;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetUnionListItem_OnUpdateGuildListInfo) == 0x000001, "Wrong alignment on TLUserWidgetUnionListItem_OnUpdateGuildListInfo");
static_assert(sizeof(TLUserWidgetUnionListItem_OnUpdateGuildListInfo) == 0x000001, "Wrong size on TLUserWidgetUnionListItem_OnUpdateGuildListInfo");
static_assert(offsetof(TLUserWidgetUnionListItem_OnUpdateGuildListInfo, InIsOpen) == 0x000000, "Member 'TLUserWidgetUnionListItem_OnUpdateGuildListInfo::InIsOpen' has a wrong offset!");

// Function TLClient.TLUserWidgetUnionRelationItem.OnUpdateGuildListInfo
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetUnionRelationItem_OnUpdateGuildListInfo final
{
public:
	bool                                          InIsOpen;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetUnionRelationItem_OnUpdateGuildListInfo) == 0x000001, "Wrong alignment on TLUserWidgetUnionRelationItem_OnUpdateGuildListInfo");
static_assert(sizeof(TLUserWidgetUnionRelationItem_OnUpdateGuildListInfo) == 0x000001, "Wrong size on TLUserWidgetUnionRelationItem_OnUpdateGuildListInfo");
static_assert(offsetof(TLUserWidgetUnionRelationItem_OnUpdateGuildListInfo, InIsOpen) == 0x000000, "Member 'TLUserWidgetUnionRelationItem_OnUpdateGuildListInfo::InIsOpen' has a wrong offset!");

// Function TLClient.TLUserWidgetUnionRelationReqItem.OnReqState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetUnionRelationReqItem_OnReqState final
{
public:
	bool                                          InIsMyRequest;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetUnionRelationReqItem_OnReqState) == 0x000001, "Wrong alignment on TLUserWidgetUnionRelationReqItem_OnReqState");
static_assert(sizeof(TLUserWidgetUnionRelationReqItem_OnReqState) == 0x000001, "Wrong size on TLUserWidgetUnionRelationReqItem_OnReqState");
static_assert(offsetof(TLUserWidgetUnionRelationReqItem_OnReqState, InIsMyRequest) == 0x000000, "Member 'TLUserWidgetUnionRelationReqItem_OnReqState::InIsMyRequest' has a wrong offset!");

// Function TLClient.TLUserWidgetUnionRelationReqItem.OnUpdateGuildListInfo
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetUnionRelationReqItem_OnUpdateGuildListInfo final
{
public:
	bool                                          InIsOpen;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetUnionRelationReqItem_OnUpdateGuildListInfo) == 0x000001, "Wrong alignment on TLUserWidgetUnionRelationReqItem_OnUpdateGuildListInfo");
static_assert(sizeof(TLUserWidgetUnionRelationReqItem_OnUpdateGuildListInfo) == 0x000001, "Wrong size on TLUserWidgetUnionRelationReqItem_OnUpdateGuildListInfo");
static_assert(offsetof(TLUserWidgetUnionRelationReqItem_OnUpdateGuildListInfo, InIsOpen) == 0x000000, "Member 'TLUserWidgetUnionRelationReqItem_OnUpdateGuildListInfo::InIsOpen' has a wrong offset!");

// Function TLClient.TLUserWidgetUnionRelation.OnUpdateRelationTabType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetUnionRelation_OnUpdateRelationTabType final
{
public:
	EUnionRelationTabType                         InTabType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetUnionRelation_OnUpdateRelationTabType) == 0x000001, "Wrong alignment on TLUserWidgetUnionRelation_OnUpdateRelationTabType");
static_assert(sizeof(TLUserWidgetUnionRelation_OnUpdateRelationTabType) == 0x000001, "Wrong size on TLUserWidgetUnionRelation_OnUpdateRelationTabType");
static_assert(offsetof(TLUserWidgetUnionRelation_OnUpdateRelationTabType, InTabType) == 0x000000, "Member 'TLUserWidgetUnionRelation_OnUpdateRelationTabType::InTabType' has a wrong offset!");

// Function TLClient.TLUserWidgetWeaponCostumeSlot.OnAcquisitionTypeUpdate
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWeaponCostumeSlot_OnAcquisitionTypeUpdate final
{
public:
	ETLAcquisitionContentType                     InAcquisitionType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWeaponCostumeSlot_OnAcquisitionTypeUpdate) == 0x000001, "Wrong alignment on TLUserWidgetWeaponCostumeSlot_OnAcquisitionTypeUpdate");
static_assert(sizeof(TLUserWidgetWeaponCostumeSlot_OnAcquisitionTypeUpdate) == 0x000001, "Wrong size on TLUserWidgetWeaponCostumeSlot_OnAcquisitionTypeUpdate");
static_assert(offsetof(TLUserWidgetWeaponCostumeSlot_OnAcquisitionTypeUpdate, InAcquisitionType) == 0x000000, "Member 'TLUserWidgetWeaponCostumeSlot_OnAcquisitionTypeUpdate::InAcquisitionType' has a wrong offset!");

// Function TLClient.TLUserWidgetWeaponCostumeSlot.OnSelectState
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWeaponCostumeSlot_OnSelectState final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWeaponCostumeSlot_OnSelectState) == 0x000001, "Wrong alignment on TLUserWidgetWeaponCostumeSlot_OnSelectState");
static_assert(sizeof(TLUserWidgetWeaponCostumeSlot_OnSelectState) == 0x000001, "Wrong size on TLUserWidgetWeaponCostumeSlot_OnSelectState");
static_assert(offsetof(TLUserWidgetWeaponCostumeSlot_OnSelectState, bSelected) == 0x000000, "Member 'TLUserWidgetWeaponCostumeSlot_OnSelectState::bSelected' has a wrong offset!");

// Function TLClient.TLUserWidgetWeaponCostumeRegisterSlot.HandleDragOver
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWeaponCostumeRegisterSlot_HandleDragOver final
{
public:
	bool                                          bEnter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWeaponCostumeRegisterSlot_HandleDragOver) == 0x000001, "Wrong alignment on TLUserWidgetWeaponCostumeRegisterSlot_HandleDragOver");
static_assert(sizeof(TLUserWidgetWeaponCostumeRegisterSlot_HandleDragOver) == 0x000001, "Wrong size on TLUserWidgetWeaponCostumeRegisterSlot_HandleDragOver");
static_assert(offsetof(TLUserWidgetWeaponCostumeRegisterSlot_HandleDragOver, bEnter) == 0x000000, "Member 'TLUserWidgetWeaponCostumeRegisterSlot_HandleDragOver::bEnter' has a wrong offset!");

// Function TLClient.TLUserWidgetWeaponCostumeRegisterSlot.HandleSelectedCategory
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWeaponCostumeRegisterSlot_HandleSelectedCategory final
{
public:
	bool                                          bSameCategory;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWeaponCostumeRegisterSlot_HandleSelectedCategory) == 0x000001, "Wrong alignment on TLUserWidgetWeaponCostumeRegisterSlot_HandleSelectedCategory");
static_assert(sizeof(TLUserWidgetWeaponCostumeRegisterSlot_HandleSelectedCategory) == 0x000001, "Wrong size on TLUserWidgetWeaponCostumeRegisterSlot_HandleSelectedCategory");
static_assert(offsetof(TLUserWidgetWeaponCostumeRegisterSlot_HandleSelectedCategory, bSameCategory) == 0x000000, "Member 'TLUserWidgetWeaponCostumeRegisterSlot_HandleSelectedCategory::bSameCategory' has a wrong offset!");

// Function TLClient.TLUserWidgetWelcomeCBT.ScrollBox_OnUserScrolled
// 0x0004 (0x0004 - 0x0000)
struct TLUserWidgetWelcomeCBT_ScrollBox_OnUserScrolled final
{
public:
	float                                         InOffset;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWelcomeCBT_ScrollBox_OnUserScrolled) == 0x000004, "Wrong alignment on TLUserWidgetWelcomeCBT_ScrollBox_OnUserScrolled");
static_assert(sizeof(TLUserWidgetWelcomeCBT_ScrollBox_OnUserScrolled) == 0x000004, "Wrong size on TLUserWidgetWelcomeCBT_ScrollBox_OnUserScrolled");
static_assert(offsetof(TLUserWidgetWelcomeCBT_ScrollBox_OnUserScrolled, InOffset) == 0x000000, "Member 'TLUserWidgetWelcomeCBT_ScrollBox_OnUserScrolled::InOffset' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldBossGuideFrame.OnCurrentType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWorldBossGuideFrame_OnCurrentType final
{
public:
	ETLWorldBossEventState                        InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldBossGuideFrame_OnCurrentType) == 0x000001, "Wrong alignment on TLUserWidgetWorldBossGuideFrame_OnCurrentType");
static_assert(sizeof(TLUserWidgetWorldBossGuideFrame_OnCurrentType) == 0x000001, "Wrong size on TLUserWidgetWorldBossGuideFrame_OnCurrentType");
static_assert(offsetof(TLUserWidgetWorldBossGuideFrame_OnCurrentType, InState) == 0x000000, "Member 'TLUserWidgetWorldBossGuideFrame_OnCurrentType::InState' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldBossGuideFrame.OnUpdateScheduleType
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWorldBossGuideFrame_OnUpdateScheduleType final
{
public:
	ETLEventScheduleType                          InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldBossGuideFrame_OnUpdateScheduleType) == 0x000001, "Wrong alignment on TLUserWidgetWorldBossGuideFrame_OnUpdateScheduleType");
static_assert(sizeof(TLUserWidgetWorldBossGuideFrame_OnUpdateScheduleType) == 0x000001, "Wrong size on TLUserWidgetWorldBossGuideFrame_OnUpdateScheduleType");
static_assert(offsetof(TLUserWidgetWorldBossGuideFrame_OnUpdateScheduleType, InType) == 0x000000, "Member 'TLUserWidgetWorldBossGuideFrame_OnUpdateScheduleType::InType' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldmap.GetWorldMapIconFromGUID
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetWorldmap_GetWorldMapIconFromGUID final
{
public:
	class FString                                 Guid;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTLUserWidgetMapIcon*                   ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldmap_GetWorldMapIconFromGUID) == 0x000008, "Wrong alignment on TLUserWidgetWorldmap_GetWorldMapIconFromGUID");
static_assert(sizeof(TLUserWidgetWorldmap_GetWorldMapIconFromGUID) == 0x000018, "Wrong size on TLUserWidgetWorldmap_GetWorldMapIconFromGUID");
static_assert(offsetof(TLUserWidgetWorldmap_GetWorldMapIconFromGUID, Guid) == 0x000000, "Member 'TLUserWidgetWorldmap_GetWorldMapIconFromGUID::Guid' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWorldmap_GetWorldMapIconFromGUID, ReturnValue) == 0x000010, "Member 'TLUserWidgetWorldmap_GetWorldMapIconFromGUID::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldmap.HandleDynamicEventRegionJoin
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetWorldmap_HandleDynamicEventRegionJoin final
{
public:
	uint64                                        Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsJoing;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetWorldmap_HandleDynamicEventRegionJoin) == 0x000008, "Wrong alignment on TLUserWidgetWorldmap_HandleDynamicEventRegionJoin");
static_assert(sizeof(TLUserWidgetWorldmap_HandleDynamicEventRegionJoin) == 0x000010, "Wrong size on TLUserWidgetWorldmap_HandleDynamicEventRegionJoin");
static_assert(offsetof(TLUserWidgetWorldmap_HandleDynamicEventRegionJoin, Guid) == 0x000000, "Member 'TLUserWidgetWorldmap_HandleDynamicEventRegionJoin::Guid' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWorldmap_HandleDynamicEventRegionJoin, InIsJoing) == 0x000008, "Member 'TLUserWidgetWorldmap_HandleDynamicEventRegionJoin::InIsJoing' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldmap.HandleUpdateMapFramePosition
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetWorldmap_HandleUpdateMapFramePosition final
{
public:
	struct FVector2D                              InPosition;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldmap_HandleUpdateMapFramePosition) == 0x000004, "Wrong alignment on TLUserWidgetWorldmap_HandleUpdateMapFramePosition");
static_assert(sizeof(TLUserWidgetWorldmap_HandleUpdateMapFramePosition) == 0x000008, "Wrong size on TLUserWidgetWorldmap_HandleUpdateMapFramePosition");
static_assert(offsetof(TLUserWidgetWorldmap_HandleUpdateMapFramePosition, InPosition) == 0x000000, "Member 'TLUserWidgetWorldmap_HandleUpdateMapFramePosition::InPosition' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldmap.HandleUpdateMapIconFilter
// 0x000C (0x000C - 0x0000)
struct TLUserWidgetWorldmap_HandleUpdateMapIconFilter final
{
public:
	class FName                                   InMapIconFilterId;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsVisible;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInForceUpdate;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetWorldmap_HandleUpdateMapIconFilter) == 0x000004, "Wrong alignment on TLUserWidgetWorldmap_HandleUpdateMapIconFilter");
static_assert(sizeof(TLUserWidgetWorldmap_HandleUpdateMapIconFilter) == 0x00000C, "Wrong size on TLUserWidgetWorldmap_HandleUpdateMapIconFilter");
static_assert(offsetof(TLUserWidgetWorldmap_HandleUpdateMapIconFilter, InMapIconFilterId) == 0x000000, "Member 'TLUserWidgetWorldmap_HandleUpdateMapIconFilter::InMapIconFilterId' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWorldmap_HandleUpdateMapIconFilter, InIsVisible) == 0x000008, "Member 'TLUserWidgetWorldmap_HandleUpdateMapIconFilter::InIsVisible' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWorldmap_HandleUpdateMapIconFilter, bInForceUpdate) == 0x000009, "Member 'TLUserWidgetWorldmap_HandleUpdateMapIconFilter::bInForceUpdate' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldmap.OnMapCharacterMoveEvent
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWorldmap_OnMapCharacterMoveEvent final
{
public:
	bool                                          InbPress;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldmap_OnMapCharacterMoveEvent) == 0x000001, "Wrong alignment on TLUserWidgetWorldmap_OnMapCharacterMoveEvent");
static_assert(sizeof(TLUserWidgetWorldmap_OnMapCharacterMoveEvent) == 0x000001, "Wrong size on TLUserWidgetWorldmap_OnMapCharacterMoveEvent");
static_assert(offsetof(TLUserWidgetWorldmap_OnMapCharacterMoveEvent, InbPress) == 0x000000, "Member 'TLUserWidgetWorldmap_OnMapCharacterMoveEvent::InbPress' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldmap.OnMoveWorldMapIcon
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetWorldmap_OnMoveWorldMapIcon final
{
public:
	class FString                                 Guid;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetWorldmap_OnMoveWorldMapIcon) == 0x000008, "Wrong alignment on TLUserWidgetWorldmap_OnMoveWorldMapIcon");
static_assert(sizeof(TLUserWidgetWorldmap_OnMoveWorldMapIcon) == 0x000018, "Wrong size on TLUserWidgetWorldmap_OnMoveWorldMapIcon");
static_assert(offsetof(TLUserWidgetWorldmap_OnMoveWorldMapIcon, Guid) == 0x000000, "Member 'TLUserWidgetWorldmap_OnMoveWorldMapIcon::Guid' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWorldmap_OnMoveWorldMapIcon, ReturnValue) == 0x000010, "Member 'TLUserWidgetWorldmap_OnMoveWorldMapIcon::ReturnValue' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldmap.OnUpdateRankSkillEvent
// 0x0002 (0x0002 - 0x0000)
struct TLUserWidgetWorldmap_OnUpdateRankSkillEvent final
{
public:
	EEnvironmentalType                            InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkillStarted;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldmap_OnUpdateRankSkillEvent) == 0x000001, "Wrong alignment on TLUserWidgetWorldmap_OnUpdateRankSkillEvent");
static_assert(sizeof(TLUserWidgetWorldmap_OnUpdateRankSkillEvent) == 0x000002, "Wrong size on TLUserWidgetWorldmap_OnUpdateRankSkillEvent");
static_assert(offsetof(TLUserWidgetWorldmap_OnUpdateRankSkillEvent, InType) == 0x000000, "Member 'TLUserWidgetWorldmap_OnUpdateRankSkillEvent::InType' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWorldmap_OnUpdateRankSkillEvent, bSkillStarted) == 0x000001, "Member 'TLUserWidgetWorldmap_OnUpdateRankSkillEvent::bSkillStarted' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldmap.OnUpdateRegionDisplayEnvironment
// 0x0050 (0x0050 - 0x0000)
struct TLUserWidgetWorldmap_OnUpdateRegionDisplayEnvironment final
{
public:
	class FText                                   InWeahterInfo;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   InWindInfo;                                        // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   InTimeInfo;                                        // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInShow;                                           // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetWorldmap_OnUpdateRegionDisplayEnvironment) == 0x000008, "Wrong alignment on TLUserWidgetWorldmap_OnUpdateRegionDisplayEnvironment");
static_assert(sizeof(TLUserWidgetWorldmap_OnUpdateRegionDisplayEnvironment) == 0x000050, "Wrong size on TLUserWidgetWorldmap_OnUpdateRegionDisplayEnvironment");
static_assert(offsetof(TLUserWidgetWorldmap_OnUpdateRegionDisplayEnvironment, InWeahterInfo) == 0x000000, "Member 'TLUserWidgetWorldmap_OnUpdateRegionDisplayEnvironment::InWeahterInfo' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWorldmap_OnUpdateRegionDisplayEnvironment, InWindInfo) == 0x000018, "Member 'TLUserWidgetWorldmap_OnUpdateRegionDisplayEnvironment::InWindInfo' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWorldmap_OnUpdateRegionDisplayEnvironment, InTimeInfo) == 0x000030, "Member 'TLUserWidgetWorldmap_OnUpdateRegionDisplayEnvironment::InTimeInfo' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWorldmap_OnUpdateRegionDisplayEnvironment, bInShow) == 0x000048, "Member 'TLUserWidgetWorldmap_OnUpdateRegionDisplayEnvironment::bInShow' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldmap.OnUpdateRegionDisplayName
// 0x0030 (0x0030 - 0x0000)
struct TLUserWidgetWorldmap_OnUpdateRegionDisplayName final
{
public:
	class FText                                   InZoneName;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   InRegionName;                                      // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldmap_OnUpdateRegionDisplayName) == 0x000008, "Wrong alignment on TLUserWidgetWorldmap_OnUpdateRegionDisplayName");
static_assert(sizeof(TLUserWidgetWorldmap_OnUpdateRegionDisplayName) == 0x000030, "Wrong size on TLUserWidgetWorldmap_OnUpdateRegionDisplayName");
static_assert(offsetof(TLUserWidgetWorldmap_OnUpdateRegionDisplayName, InZoneName) == 0x000000, "Member 'TLUserWidgetWorldmap_OnUpdateRegionDisplayName::InZoneName' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWorldmap_OnUpdateRegionDisplayName, InRegionName) == 0x000018, "Member 'TLUserWidgetWorldmap_OnUpdateRegionDisplayName::InRegionName' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldmap.OnUpdateWindCloudSpeed
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWorldmap_OnUpdateWindCloudSpeed final
{
public:
	ETLWindGrade                                  InWindGrade;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldmap_OnUpdateWindCloudSpeed) == 0x000001, "Wrong alignment on TLUserWidgetWorldmap_OnUpdateWindCloudSpeed");
static_assert(sizeof(TLUserWidgetWorldmap_OnUpdateWindCloudSpeed) == 0x000001, "Wrong size on TLUserWidgetWorldmap_OnUpdateWindCloudSpeed");
static_assert(offsetof(TLUserWidgetWorldmap_OnUpdateWindCloudSpeed, InWindGrade) == 0x000000, "Member 'TLUserWidgetWorldmap_OnUpdateWindCloudSpeed::InWindGrade' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldmap.OnWorldMapShow
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWorldmap_OnWorldMapShow final
{
public:
	bool                                          bInWorldMapFirstOpen;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldmap_OnWorldMapShow) == 0x000001, "Wrong alignment on TLUserWidgetWorldmap_OnWorldMapShow");
static_assert(sizeof(TLUserWidgetWorldmap_OnWorldMapShow) == 0x000001, "Wrong size on TLUserWidgetWorldmap_OnWorldMapShow");
static_assert(offsetof(TLUserWidgetWorldmap_OnWorldMapShow, bInWorldMapFirstOpen) == 0x000000, "Member 'TLUserWidgetWorldmap_OnWorldMapShow::bInWorldMapFirstOpen' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapFloorListItem.OnUnLockMemorial
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWorldMapFloorListItem_OnUnLockMemorial final
{
public:
	bool                                          IsUnLock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapFloorListItem_OnUnLockMemorial) == 0x000001, "Wrong alignment on TLUserWidgetWorldMapFloorListItem_OnUnLockMemorial");
static_assert(sizeof(TLUserWidgetWorldMapFloorListItem_OnUnLockMemorial) == 0x000001, "Wrong size on TLUserWidgetWorldMapFloorListItem_OnUnLockMemorial");
static_assert(offsetof(TLUserWidgetWorldMapFloorListItem_OnUnLockMemorial, IsUnLock) == 0x000000, "Member 'TLUserWidgetWorldMapFloorListItem_OnUnLockMemorial::IsUnLock' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapListItemTerritory.HandleSearchKeywordChange
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetWorldMapListItemTerritory_HandleSearchKeywordChange final
{
public:
	class FText                                   InSearchKeyword;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EWorldMapListSearchType                       InSearchType;                                      // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetWorldMapListItemTerritory_HandleSearchKeywordChange) == 0x000008, "Wrong alignment on TLUserWidgetWorldMapListItemTerritory_HandleSearchKeywordChange");
static_assert(sizeof(TLUserWidgetWorldMapListItemTerritory_HandleSearchKeywordChange) == 0x000020, "Wrong size on TLUserWidgetWorldMapListItemTerritory_HandleSearchKeywordChange");
static_assert(offsetof(TLUserWidgetWorldMapListItemTerritory_HandleSearchKeywordChange, InSearchKeyword) == 0x000000, "Member 'TLUserWidgetWorldMapListItemTerritory_HandleSearchKeywordChange::InSearchKeyword' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWorldMapListItemTerritory_HandleSearchKeywordChange, InSearchType) == 0x000018, "Member 'TLUserWidgetWorldMapListItemTerritory_HandleSearchKeywordChange::InSearchType' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapListItemTerritory.HandleSearchSpeciesChange
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetWorldMapListItemTerritory_HandleSearchSpeciesChange final
{
public:
	TArray<uint64>                                InRegionGroupGuids;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapListItemTerritory_HandleSearchSpeciesChange) == 0x000008, "Wrong alignment on TLUserWidgetWorldMapListItemTerritory_HandleSearchSpeciesChange");
static_assert(sizeof(TLUserWidgetWorldMapListItemTerritory_HandleSearchSpeciesChange) == 0x000010, "Wrong size on TLUserWidgetWorldMapListItemTerritory_HandleSearchSpeciesChange");
static_assert(offsetof(TLUserWidgetWorldMapListItemTerritory_HandleSearchSpeciesChange, InRegionGroupGuids) == 0x000000, "Member 'TLUserWidgetWorldMapListItemTerritory_HandleSearchSpeciesChange::InRegionGroupGuids' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapListItemTerritory.OnShowIconBG
// 0x0001 (0x0001 - 0x0000)
struct TLUserWidgetWorldMapListItemTerritory_OnShowIconBG final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapListItemTerritory_OnShowIconBG) == 0x000001, "Wrong alignment on TLUserWidgetWorldMapListItemTerritory_OnShowIconBG");
static_assert(sizeof(TLUserWidgetWorldMapListItemTerritory_OnShowIconBG) == 0x000001, "Wrong size on TLUserWidgetWorldMapListItemTerritory_OnShowIconBG");
static_assert(offsetof(TLUserWidgetWorldMapListItemTerritory_OnShowIconBG, InIsActive) == 0x000000, "Member 'TLUserWidgetWorldMapListItemTerritory_OnShowIconBG::InIsActive' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapListItemZone.HandleSearchKeywordChange
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetWorldMapListItemZone_HandleSearchKeywordChange final
{
public:
	class FText                                   InSearchKeyword;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EWorldMapListSearchType                       InSearchType;                                      // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetWorldMapListItemZone_HandleSearchKeywordChange) == 0x000008, "Wrong alignment on TLUserWidgetWorldMapListItemZone_HandleSearchKeywordChange");
static_assert(sizeof(TLUserWidgetWorldMapListItemZone_HandleSearchKeywordChange) == 0x000020, "Wrong size on TLUserWidgetWorldMapListItemZone_HandleSearchKeywordChange");
static_assert(offsetof(TLUserWidgetWorldMapListItemZone_HandleSearchKeywordChange, InSearchKeyword) == 0x000000, "Member 'TLUserWidgetWorldMapListItemZone_HandleSearchKeywordChange::InSearchKeyword' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWorldMapListItemZone_HandleSearchKeywordChange, InSearchType) == 0x000018, "Member 'TLUserWidgetWorldMapListItemZone_HandleSearchKeywordChange::InSearchType' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapListItemZone.HandleSearchSpeciesChange
// 0x0010 (0x0010 - 0x0000)
struct TLUserWidgetWorldMapListItemZone_HandleSearchSpeciesChange final
{
public:
	TArray<uint64>                                InRegionGroupGuids;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapListItemZone_HandleSearchSpeciesChange) == 0x000008, "Wrong alignment on TLUserWidgetWorldMapListItemZone_HandleSearchSpeciesChange");
static_assert(sizeof(TLUserWidgetWorldMapListItemZone_HandleSearchSpeciesChange) == 0x000010, "Wrong size on TLUserWidgetWorldMapListItemZone_HandleSearchSpeciesChange");
static_assert(offsetof(TLUserWidgetWorldMapListItemZone_HandleSearchSpeciesChange, InRegionGroupGuids) == 0x000000, "Member 'TLUserWidgetWorldMapListItemZone_HandleSearchSpeciesChange::InRegionGroupGuids' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapPinListItem.HandleInputTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetWorldMapPinListItem_HandleInputTextChanged final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapPinListItem_HandleInputTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetWorldMapPinListItem_HandleInputTextChanged");
static_assert(sizeof(TLUserWidgetWorldMapPinListItem_HandleInputTextChanged) == 0x000018, "Wrong size on TLUserWidgetWorldMapPinListItem_HandleInputTextChanged");
static_assert(offsetof(TLUserWidgetWorldMapPinListItem_HandleInputTextChanged, InInputText) == 0x000000, "Member 'TLUserWidgetWorldMapPinListItem_HandleInputTextChanged::InInputText' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapPinListItem.HandleInputTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLUserWidgetWorldMapPinListItem_HandleInputTextCommitted final
{
public:
	class FText                                   InInputText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLUserWidgetWorldMapPinListItem_HandleInputTextCommitted) == 0x000008, "Wrong alignment on TLUserWidgetWorldMapPinListItem_HandleInputTextCommitted");
static_assert(sizeof(TLUserWidgetWorldMapPinListItem_HandleInputTextCommitted) == 0x000020, "Wrong size on TLUserWidgetWorldMapPinListItem_HandleInputTextCommitted");
static_assert(offsetof(TLUserWidgetWorldMapPinListItem_HandleInputTextCommitted, InInputText) == 0x000000, "Member 'TLUserWidgetWorldMapPinListItem_HandleInputTextCommitted::InInputText' has a wrong offset!");
static_assert(offsetof(TLUserWidgetWorldMapPinListItem_HandleInputTextCommitted, InCommitMethod) == 0x000018, "Member 'TLUserWidgetWorldMapPinListItem_HandleInputTextCommitted::InCommitMethod' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapPinListItem.HandleOnTextFocusLost
// 0x0008 (0x0008 - 0x0000)
struct TLUserWidgetWorldMapPinListItem_HandleOnTextFocusLost final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapPinListItem_HandleOnTextFocusLost) == 0x000004, "Wrong alignment on TLUserWidgetWorldMapPinListItem_HandleOnTextFocusLost");
static_assert(sizeof(TLUserWidgetWorldMapPinListItem_HandleOnTextFocusLost) == 0x000008, "Wrong size on TLUserWidgetWorldMapPinListItem_HandleOnTextFocusLost");
static_assert(offsetof(TLUserWidgetWorldMapPinListItem_HandleOnTextFocusLost, InFocusEvent) == 0x000000, "Member 'TLUserWidgetWorldMapPinListItem_HandleOnTextFocusLost::InFocusEvent' has a wrong offset!");

// Function TLClient.TLUserWidgetWorldMapPinListItem.HandlePinTextChanged
// 0x0018 (0x0018 - 0x0000)
struct TLUserWidgetWorldMapPinListItem_HandlePinTextChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLUserWidgetWorldMapPinListItem_HandlePinTextChanged) == 0x000008, "Wrong alignment on TLUserWidgetWorldMapPinListItem_HandlePinTextChanged");
static_assert(sizeof(TLUserWidgetWorldMapPinListItem_HandlePinTextChanged) == 0x000018, "Wrong size on TLUserWidgetWorldMapPinListItem_HandlePinTextChanged");
static_assert(offsetof(TLUserWidgetWorldMapPinListItem_HandlePinTextChanged, InText) == 0x000000, "Member 'TLUserWidgetWorldMapPinListItem_HandlePinTextChanged::InText' has a wrong offset!");

// Function TLClient.TLYeti.FocusLostForKeyboard
// 0x0008 (0x0008 - 0x0000)
struct TLYeti_FocusLostForKeyboard final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLYeti_FocusLostForKeyboard) == 0x000004, "Wrong alignment on TLYeti_FocusLostForKeyboard");
static_assert(sizeof(TLYeti_FocusLostForKeyboard) == 0x000008, "Wrong size on TLYeti_FocusLostForKeyboard");
static_assert(offsetof(TLYeti_FocusLostForKeyboard, InFocusEvent) == 0x000000, "Member 'TLYeti_FocusLostForKeyboard::InFocusEvent' has a wrong offset!");

// Function TLClient.TLYeti.FocusLostForNumpad
// 0x0008 (0x0008 - 0x0000)
struct TLYeti_FocusLostForNumpad final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLYeti_FocusLostForNumpad) == 0x000004, "Wrong alignment on TLYeti_FocusLostForNumpad");
static_assert(sizeof(TLYeti_FocusLostForNumpad) == 0x000008, "Wrong size on TLYeti_FocusLostForNumpad");
static_assert(offsetof(TLYeti_FocusLostForNumpad, InFocusEvent) == 0x000000, "Member 'TLYeti_FocusLostForNumpad::InFocusEvent' has a wrong offset!");

// Function TLClient.TLYeti.FocusReceivedForKeyboard
// 0x0040 (0x0040 - 0x0000)
struct TLYeti_FocusReceivedForKeyboard final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLYeti_FocusReceivedForKeyboard) == 0x000004, "Wrong alignment on TLYeti_FocusReceivedForKeyboard");
static_assert(sizeof(TLYeti_FocusReceivedForKeyboard) == 0x000040, "Wrong size on TLYeti_FocusReceivedForKeyboard");
static_assert(offsetof(TLYeti_FocusReceivedForKeyboard, MyGeometry) == 0x000000, "Member 'TLYeti_FocusReceivedForKeyboard::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLYeti_FocusReceivedForKeyboard, InFocusEvent) == 0x000038, "Member 'TLYeti_FocusReceivedForKeyboard::InFocusEvent' has a wrong offset!");

// Function TLClient.TLYeti.FocusReceivedForNumpad
// 0x0040 (0x0040 - 0x0000)
struct TLYeti_FocusReceivedForNumpad final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLYeti_FocusReceivedForNumpad) == 0x000004, "Wrong alignment on TLYeti_FocusReceivedForNumpad");
static_assert(sizeof(TLYeti_FocusReceivedForNumpad) == 0x000040, "Wrong size on TLYeti_FocusReceivedForNumpad");
static_assert(offsetof(TLYeti_FocusReceivedForNumpad, MyGeometry) == 0x000000, "Member 'TLYeti_FocusReceivedForNumpad::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLYeti_FocusReceivedForNumpad, InFocusEvent) == 0x000038, "Member 'TLYeti_FocusReceivedForNumpad::InFocusEvent' has a wrong offset!");

// Function TLClient.TLYeti.MouseButtonDownForKeyboard
// 0x00A8 (0x00A8 - 0x0000)
struct TLYeti_MouseButtonDownForKeyboard final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLYeti_MouseButtonDownForKeyboard) == 0x000008, "Wrong alignment on TLYeti_MouseButtonDownForKeyboard");
static_assert(sizeof(TLYeti_MouseButtonDownForKeyboard) == 0x0000A8, "Wrong size on TLYeti_MouseButtonDownForKeyboard");
static_assert(offsetof(TLYeti_MouseButtonDownForKeyboard, MyGeometry) == 0x000000, "Member 'TLYeti_MouseButtonDownForKeyboard::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLYeti_MouseButtonDownForKeyboard, InMouseEvent) == 0x000038, "Member 'TLYeti_MouseButtonDownForKeyboard::InMouseEvent' has a wrong offset!");

// Function TLClient.TLYeti.MouseButtonDownForNumpad
// 0x00A8 (0x00A8 - 0x0000)
struct TLYeti_MouseButtonDownForNumpad final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TLYeti_MouseButtonDownForNumpad) == 0x000008, "Wrong alignment on TLYeti_MouseButtonDownForNumpad");
static_assert(sizeof(TLYeti_MouseButtonDownForNumpad) == 0x0000A8, "Wrong size on TLYeti_MouseButtonDownForNumpad");
static_assert(offsetof(TLYeti_MouseButtonDownForNumpad, MyGeometry) == 0x000000, "Member 'TLYeti_MouseButtonDownForNumpad::MyGeometry' has a wrong offset!");
static_assert(offsetof(TLYeti_MouseButtonDownForNumpad, InMouseEvent) == 0x000038, "Member 'TLYeti_MouseButtonDownForNumpad::InMouseEvent' has a wrong offset!");

// Function TLClient.TLYeti.NumberCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLYeti_NumberCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLYeti_NumberCommitted) == 0x000008, "Wrong alignment on TLYeti_NumberCommitted");
static_assert(sizeof(TLYeti_NumberCommitted) == 0x000020, "Wrong size on TLYeti_NumberCommitted");
static_assert(offsetof(TLYeti_NumberCommitted, Text) == 0x000000, "Member 'TLYeti_NumberCommitted::Text' has a wrong offset!");
static_assert(offsetof(TLYeti_NumberCommitted, CommitMethod) == 0x000018, "Member 'TLYeti_NumberCommitted::CommitMethod' has a wrong offset!");

// Function TLClient.TLYeti.TextCommitted
// 0x0020 (0x0020 - 0x0000)
struct TLYeti_TextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TLYeti_TextCommitted) == 0x000008, "Wrong alignment on TLYeti_TextCommitted");
static_assert(sizeof(TLYeti_TextCommitted) == 0x000020, "Wrong size on TLYeti_TextCommitted");
static_assert(offsetof(TLYeti_TextCommitted, Text) == 0x000000, "Member 'TLYeti_TextCommitted::Text' has a wrong offset!");
static_assert(offsetof(TLYeti_TextCommitted, CommitMethod) == 0x000018, "Member 'TLYeti_TextCommitted::CommitMethod' has a wrong offset!");

}

