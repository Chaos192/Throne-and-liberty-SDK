#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AnalogCursor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "TLClient_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_AnalogCursor.BP_AnalogCursor_C
// 0x0110 (0x0C18 - 0x0B08)
class UBP_AnalogCursor_C final : public UTLUserWidgetConsoleAnalogCursor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B08(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       MapCursor_Hover;                                   // 0x0B10(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       MapCursor_ShowAnim;                                // 0x0B18(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       MoveAnim;                                          // 0x0B20(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hover;                                             // 0x0B28(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ShowAnim;                                          // 0x0B30(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Press;                                             // 0x0B38(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UTLImage*                               Cursor_FX;                                         // 0x0B40(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               Cursor_FX_1;                                       // 0x0B48(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               Cursor_FX_2;                                       // 0x0B50(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               Cursor_IMG;                                        // 0x0B58(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               Cursor_IMG_Default_FX;                             // 0x0B60(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               Cursor_IMG_Hover_FX;                               // 0x0B68(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               Cursor_IMG_Line;                                   // 0x0B70(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               CursorImage;                                       // 0x0B78(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               MapCursor_FX;                                      // 0x0B80(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               MapCursor_FX_1;                                    // 0x0B88(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               MapCursor_FX_2;                                    // 0x0B90(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               MapCursor_FX_3;                                    // 0x0B98(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               MapCursor_IMG;                                     // 0x0BA0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               MapCursor_IMG_Default_FX;                          // 0x0BA8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               MapCursor_IMG_Hover;                               // 0x0BB0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               MapCursor_IMG_Hover_FX;                            // 0x0BB8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLCanvasPanel*                         MapCursorPanel;                                    // 0x0BC0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               MapMoveFX_1;                                       // 0x0BC8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               MapMoveFX_2;                                       // 0x0BD0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               MoveFX_2;                                          // 0x0BD8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLCanvasPanel*                         NormalCursorPanel;                                 // 0x0BE0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               Reduction_FX_Particle;                             // 0x0BE8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               Reduction_FX_Particle_1;                           // 0x0BF0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               Reduction_FX_Particle_2;                           // 0x0BF8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               Reduction_FX_Smoke;                                // 0x0C00(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               Reduction_FX_Smoke_1;                              // 0x0C08(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLScaleBox*                            TLScaleBox_0;                                      // 0x0C10(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AnalogCursor(int32 EntryPoint);
	void Construct();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AnalogCursor_C">();
	}
	static class UBP_AnalogCursor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AnalogCursor_C>();
	}
};
static_assert(alignof(UBP_AnalogCursor_C) == 0x000008, "Wrong alignment on UBP_AnalogCursor_C");
static_assert(sizeof(UBP_AnalogCursor_C) == 0x000C18, "Wrong size on UBP_AnalogCursor_C");
static_assert(offsetof(UBP_AnalogCursor_C, UberGraphFrame) == 0x000B08, "Member 'UBP_AnalogCursor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, MapCursor_Hover) == 0x000B10, "Member 'UBP_AnalogCursor_C::MapCursor_Hover' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, MapCursor_ShowAnim) == 0x000B18, "Member 'UBP_AnalogCursor_C::MapCursor_ShowAnim' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, MoveAnim) == 0x000B20, "Member 'UBP_AnalogCursor_C::MoveAnim' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, Hover) == 0x000B28, "Member 'UBP_AnalogCursor_C::Hover' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, ShowAnim) == 0x000B30, "Member 'UBP_AnalogCursor_C::ShowAnim' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, Press) == 0x000B38, "Member 'UBP_AnalogCursor_C::Press' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, Cursor_FX) == 0x000B40, "Member 'UBP_AnalogCursor_C::Cursor_FX' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, Cursor_FX_1) == 0x000B48, "Member 'UBP_AnalogCursor_C::Cursor_FX_1' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, Cursor_FX_2) == 0x000B50, "Member 'UBP_AnalogCursor_C::Cursor_FX_2' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, Cursor_IMG) == 0x000B58, "Member 'UBP_AnalogCursor_C::Cursor_IMG' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, Cursor_IMG_Default_FX) == 0x000B60, "Member 'UBP_AnalogCursor_C::Cursor_IMG_Default_FX' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, Cursor_IMG_Hover_FX) == 0x000B68, "Member 'UBP_AnalogCursor_C::Cursor_IMG_Hover_FX' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, Cursor_IMG_Line) == 0x000B70, "Member 'UBP_AnalogCursor_C::Cursor_IMG_Line' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, CursorImage) == 0x000B78, "Member 'UBP_AnalogCursor_C::CursorImage' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, MapCursor_FX) == 0x000B80, "Member 'UBP_AnalogCursor_C::MapCursor_FX' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, MapCursor_FX_1) == 0x000B88, "Member 'UBP_AnalogCursor_C::MapCursor_FX_1' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, MapCursor_FX_2) == 0x000B90, "Member 'UBP_AnalogCursor_C::MapCursor_FX_2' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, MapCursor_FX_3) == 0x000B98, "Member 'UBP_AnalogCursor_C::MapCursor_FX_3' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, MapCursor_IMG) == 0x000BA0, "Member 'UBP_AnalogCursor_C::MapCursor_IMG' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, MapCursor_IMG_Default_FX) == 0x000BA8, "Member 'UBP_AnalogCursor_C::MapCursor_IMG_Default_FX' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, MapCursor_IMG_Hover) == 0x000BB0, "Member 'UBP_AnalogCursor_C::MapCursor_IMG_Hover' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, MapCursor_IMG_Hover_FX) == 0x000BB8, "Member 'UBP_AnalogCursor_C::MapCursor_IMG_Hover_FX' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, MapCursorPanel) == 0x000BC0, "Member 'UBP_AnalogCursor_C::MapCursorPanel' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, MapMoveFX_1) == 0x000BC8, "Member 'UBP_AnalogCursor_C::MapMoveFX_1' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, MapMoveFX_2) == 0x000BD0, "Member 'UBP_AnalogCursor_C::MapMoveFX_2' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, MoveFX_2) == 0x000BD8, "Member 'UBP_AnalogCursor_C::MoveFX_2' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, NormalCursorPanel) == 0x000BE0, "Member 'UBP_AnalogCursor_C::NormalCursorPanel' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, Reduction_FX_Particle) == 0x000BE8, "Member 'UBP_AnalogCursor_C::Reduction_FX_Particle' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, Reduction_FX_Particle_1) == 0x000BF0, "Member 'UBP_AnalogCursor_C::Reduction_FX_Particle_1' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, Reduction_FX_Particle_2) == 0x000BF8, "Member 'UBP_AnalogCursor_C::Reduction_FX_Particle_2' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, Reduction_FX_Smoke) == 0x000C00, "Member 'UBP_AnalogCursor_C::Reduction_FX_Smoke' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, Reduction_FX_Smoke_1) == 0x000C08, "Member 'UBP_AnalogCursor_C::Reduction_FX_Smoke_1' has a wrong offset!");
static_assert(offsetof(UBP_AnalogCursor_C, TLScaleBox_0) == 0x000C10, "Member 'UBP_AnalogCursor_C::TLScaleBox_0' has a wrong offset!");

}

