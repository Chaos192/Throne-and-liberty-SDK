#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Info_Icon_Tooltip

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "TLClient_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_Info_Icon_Tooltip.BP_Info_Icon_Tooltip_C
// 0x0050 (0x0AD0 - 0x0A80)
class UBP_Info_Icon_Tooltip_C final : public UTLUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0A80(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Hover;                                             // 0x0A88(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UTLImage*                               SizeSet;                                           // 0x0A90(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               Tooltip_Hover;                                     // 0x0A98(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               Tooltip_Nomal;                                     // 0x0AA0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         IconSize_InPut;                                    // 0x0AA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AAC[0x4];                                      // 0x0AAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           Icon_Nomal;                                        // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           Icon_Hover;                                        // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              IconOffset;                                        // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GrayScale_On;                                      // 0x0AC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AC9[0x3];                                      // 0x0AC9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Size_Type;                                         // 0x0ACC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Info_Icon_Tooltip(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Info_Icon_Tooltip_C">();
	}
	static class UBP_Info_Icon_Tooltip_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Info_Icon_Tooltip_C>();
	}
};
static_assert(alignof(UBP_Info_Icon_Tooltip_C) == 0x000008, "Wrong alignment on UBP_Info_Icon_Tooltip_C");
static_assert(sizeof(UBP_Info_Icon_Tooltip_C) == 0x000AD0, "Wrong size on UBP_Info_Icon_Tooltip_C");
static_assert(offsetof(UBP_Info_Icon_Tooltip_C, UberGraphFrame) == 0x000A80, "Member 'UBP_Info_Icon_Tooltip_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_Info_Icon_Tooltip_C, Hover) == 0x000A88, "Member 'UBP_Info_Icon_Tooltip_C::Hover' has a wrong offset!");
static_assert(offsetof(UBP_Info_Icon_Tooltip_C, SizeSet) == 0x000A90, "Member 'UBP_Info_Icon_Tooltip_C::SizeSet' has a wrong offset!");
static_assert(offsetof(UBP_Info_Icon_Tooltip_C, Tooltip_Hover) == 0x000A98, "Member 'UBP_Info_Icon_Tooltip_C::Tooltip_Hover' has a wrong offset!");
static_assert(offsetof(UBP_Info_Icon_Tooltip_C, Tooltip_Nomal) == 0x000AA0, "Member 'UBP_Info_Icon_Tooltip_C::Tooltip_Nomal' has a wrong offset!");
static_assert(offsetof(UBP_Info_Icon_Tooltip_C, IconSize_InPut) == 0x000AA8, "Member 'UBP_Info_Icon_Tooltip_C::IconSize_InPut' has a wrong offset!");
static_assert(offsetof(UBP_Info_Icon_Tooltip_C, Icon_Nomal) == 0x000AB0, "Member 'UBP_Info_Icon_Tooltip_C::Icon_Nomal' has a wrong offset!");
static_assert(offsetof(UBP_Info_Icon_Tooltip_C, Icon_Hover) == 0x000AB8, "Member 'UBP_Info_Icon_Tooltip_C::Icon_Hover' has a wrong offset!");
static_assert(offsetof(UBP_Info_Icon_Tooltip_C, IconOffset) == 0x000AC0, "Member 'UBP_Info_Icon_Tooltip_C::IconOffset' has a wrong offset!");
static_assert(offsetof(UBP_Info_Icon_Tooltip_C, GrayScale_On) == 0x000AC8, "Member 'UBP_Info_Icon_Tooltip_C::GrayScale_On' has a wrong offset!");
static_assert(offsetof(UBP_Info_Icon_Tooltip_C, Size_Type) == 0x000ACC, "Member 'UBP_Info_Icon_Tooltip_C::Size_Type' has a wrong offset!");

}

