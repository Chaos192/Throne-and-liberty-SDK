#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RadarChart

#include "Basic.hpp"

#include "RadarChart_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class RadarChart.RadarChart
// 0x0340 (0x0448 - 0x0108)
class URadarChart : public UWidget
{
public:
	struct FRadarChartStyle                       ChartStyle;                                        // 0x0108(0x0308)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FRadarChartValueData>           ValueLayers;                                       // 0x0410(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bWrapWithInvalidationPanel : 1;                    // 0x0420(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_421[0x27];                                     // 0x0421(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InvalidateAllMaterials();
	void InvalidateMaterial(struct FRadarChartAppearance& InAppearance);
	void InvalidatePanel();
	void SetAllValuesData(const TArray<struct FRadarChartValueData>& InValues);
	void SetValue(uint8 ValueLayerIndex, uint8 ValueIndex, float Value);
	void SetValuesDataForLayer(uint8 ValueLayerIndex, const struct FRadarChartValueData& InValues);
	void SetValuesForLayer(uint8 ValueLayerIndex, const TArray<float>& InValues);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RadarChart">();
	}
	static class URadarChart* GetDefaultObj()
	{
		return GetDefaultObjImpl<URadarChart>();
	}
};
static_assert(alignof(URadarChart) == 0x000008, "Wrong alignment on URadarChart");
static_assert(sizeof(URadarChart) == 0x000448, "Wrong size on URadarChart");
static_assert(offsetof(URadarChart, ChartStyle) == 0x000108, "Member 'URadarChart::ChartStyle' has a wrong offset!");
static_assert(offsetof(URadarChart, ValueLayers) == 0x000410, "Member 'URadarChart::ValueLayers' has a wrong offset!");

}

