#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NCIK

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum NCIK.ESpineModifierDirectionTypes
// NumValues: 0x0008
enum class ESpineModifierDirectionTypes : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	M_X                                      = 3,
	M_Y                                      = 4,
	M_Z                                      = 5,
	NUM                                      = 6,
	ESpineModifierDirectionTypes_MAX         = 7,
};

// Enum NCIK.ENCIKDrawDebugItemType
// NumValues: 0x0006
enum class ENCIKDrawDebugItemType : uint8
{
	CoordinateSystem                         = 0,
	DirectionalArrow                         = 1,
	Line                                     = 2,
	OnScreenMessage                          = 3,
	Sphere                                   = 4,
	ENCIKDrawDebugItemType_MAX               = 5,
};

// Enum NCIK.ENCIKLimitType
// NumValues: 0x0004
enum class ENCIKLimitType : uint8
{
	Free                                     = 0,
	Limited                                  = 1,
	Locked                                   = 2,
	ENCIKLimitType_MAX                       = 3,
};

// Enum NCIK.ENCIKBoneSettingsType
// NumValues: 0x0003
enum class ENCIKBoneSettingsType : uint8
{
	Hinge                                    = 0,
	BallAndSocket                            = 1,
	ENCIKBoneSettingsType_MAX                = 2,
};

// Enum NCIK.EJointConstraintType
// NumValues: 0x0008
enum class EJointConstraintType : uint8
{
	None                                     = 0,
	Translation                              = 1,
	Hinge                                    = 2,
	InsideCone                               = 3,
	OutsideCone                              = 4,
	Overground                               = 5,
	Spring                                   = 6,
	EJointConstraintType_MAX                 = 7,
};

// Enum NCIK.EDirectedAxis
// NumValues: 0x0008
enum class EDirectedAxis : uint8
{
	PositiveX                                = 0,
	PositiveY                                = 1,
	PositiveZ                                = 2,
	NegativeX                                = 3,
	NegativeY                                = 4,
	NegativeZ                                = 5,
	Num                                      = 6,
	EDirectedAxis_MAX                        = 7,
};

// ScriptStruct NCIK.BoneTransformToCurveMappingData
// 0x0040 (0x0040 - 0x0000)
struct FBoneTransformToCurveMappingData final
{
public:
	struct FBoneReference                         SourceBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   CurveNameTranslationX;                             // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveNameTranslationY;                             // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveNameTranslationZ;                             // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveNameRotationX;                                // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveNameRotationY;                                // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveNameRotationZ;                                // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoneTransformToCurveMappingData) == 0x000004, "Wrong alignment on FBoneTransformToCurveMappingData");
static_assert(sizeof(FBoneTransformToCurveMappingData) == 0x000040, "Wrong size on FBoneTransformToCurveMappingData");
static_assert(offsetof(FBoneTransformToCurveMappingData, SourceBone) == 0x000000, "Member 'FBoneTransformToCurveMappingData::SourceBone' has a wrong offset!");
static_assert(offsetof(FBoneTransformToCurveMappingData, CurveNameTranslationX) == 0x000010, "Member 'FBoneTransformToCurveMappingData::CurveNameTranslationX' has a wrong offset!");
static_assert(offsetof(FBoneTransformToCurveMappingData, CurveNameTranslationY) == 0x000018, "Member 'FBoneTransformToCurveMappingData::CurveNameTranslationY' has a wrong offset!");
static_assert(offsetof(FBoneTransformToCurveMappingData, CurveNameTranslationZ) == 0x000020, "Member 'FBoneTransformToCurveMappingData::CurveNameTranslationZ' has a wrong offset!");
static_assert(offsetof(FBoneTransformToCurveMappingData, CurveNameRotationX) == 0x000028, "Member 'FBoneTransformToCurveMappingData::CurveNameRotationX' has a wrong offset!");
static_assert(offsetof(FBoneTransformToCurveMappingData, CurveNameRotationY) == 0x000030, "Member 'FBoneTransformToCurveMappingData::CurveNameRotationY' has a wrong offset!");
static_assert(offsetof(FBoneTransformToCurveMappingData, CurveNameRotationZ) == 0x000038, "Member 'FBoneTransformToCurveMappingData::CurveNameRotationZ' has a wrong offset!");

// ScriptStruct NCIK.AnimNode_BoneTransformToCurve
// 0x0020 (0x0030 - 0x0010)
struct FAnimNode_BoneTransformToCurve final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneTransformToCurveMappingData> BoneToCurveNames;                                  // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_BoneTransformToCurve) == 0x000008, "Wrong alignment on FAnimNode_BoneTransformToCurve");
static_assert(sizeof(FAnimNode_BoneTransformToCurve) == 0x000030, "Wrong size on FAnimNode_BoneTransformToCurve");
static_assert(offsetof(FAnimNode_BoneTransformToCurve, Source) == 0x000010, "Member 'FAnimNode_BoneTransformToCurve::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneTransformToCurve, BoneToCurveNames) == 0x000020, "Member 'FAnimNode_BoneTransformToCurve::BoneToCurveNames' has a wrong offset!");

// ScriptStruct NCIK.AnimNode_NCIKBaseV2
// 0x0270 (0x0280 - 0x0010)
struct alignas(0x10) FAnimNode_NCIKBaseV2 : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UNCIKRig*                               NCIKRig;                                           // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNCIKFootPlacementProcessor*            NCIKFootProcessor;                                 // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActualAlpha;                                       // 0x0034(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimAlphaInputType                           AlphaInputType;                                    // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlphaBoolEnabled;                                 // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Alpha;                                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputAlphaBoolBlend                   AlphaBoolBlend;                                    // 0x0048(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   AlphaCurveName;                                    // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBiasClamp                   AlphaScaleBiasClamp;                               // 0x0098(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x1B8];                                     // 0x00C8(0x01B8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_NCIKBaseV2) == 0x000010, "Wrong alignment on FAnimNode_NCIKBaseV2");
static_assert(sizeof(FAnimNode_NCIKBaseV2) == 0x000280, "Wrong size on FAnimNode_NCIKBaseV2");
static_assert(offsetof(FAnimNode_NCIKBaseV2, Source) == 0x000010, "Member 'FAnimNode_NCIKBaseV2::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_NCIKBaseV2, NCIKRig) == 0x000020, "Member 'FAnimNode_NCIKBaseV2::NCIKRig' has a wrong offset!");
static_assert(offsetof(FAnimNode_NCIKBaseV2, NCIKFootProcessor) == 0x000028, "Member 'FAnimNode_NCIKBaseV2::NCIKFootProcessor' has a wrong offset!");
static_assert(offsetof(FAnimNode_NCIKBaseV2, LODThreshold) == 0x000030, "Member 'FAnimNode_NCIKBaseV2::LODThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_NCIKBaseV2, ActualAlpha) == 0x000034, "Member 'FAnimNode_NCIKBaseV2::ActualAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_NCIKBaseV2, AlphaInputType) == 0x000038, "Member 'FAnimNode_NCIKBaseV2::AlphaInputType' has a wrong offset!");
static_assert(offsetof(FAnimNode_NCIKBaseV2, bAlphaBoolEnabled) == 0x000039, "Member 'FAnimNode_NCIKBaseV2::bAlphaBoolEnabled' has a wrong offset!");
static_assert(offsetof(FAnimNode_NCIKBaseV2, Alpha) == 0x00003C, "Member 'FAnimNode_NCIKBaseV2::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_NCIKBaseV2, AlphaScaleBias) == 0x000040, "Member 'FAnimNode_NCIKBaseV2::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_NCIKBaseV2, AlphaBoolBlend) == 0x000048, "Member 'FAnimNode_NCIKBaseV2::AlphaBoolBlend' has a wrong offset!");
static_assert(offsetof(FAnimNode_NCIKBaseV2, AlphaCurveName) == 0x000090, "Member 'FAnimNode_NCIKBaseV2::AlphaCurveName' has a wrong offset!");
static_assert(offsetof(FAnimNode_NCIKBaseV2, AlphaScaleBiasClamp) == 0x000098, "Member 'FAnimNode_NCIKBaseV2::AlphaScaleBiasClamp' has a wrong offset!");

// ScriptStruct NCIK.AnimNode_NCIKFootPlacement
// 0x0020 (0x02A0 - 0x0280)
struct FAnimNode_NCIKFootPlacement final : public FAnimNode_NCIKBaseV2
{
public:
	float                                         InPoseSlopeAngle;                                  // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FootPlacementLODOverride;                          // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNCIKFootPlacementProcessor*            Processor;                                         // 0x0288(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNCIK_PBIKSolver*                       Solver;                                            // 0x0290(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_NCIKFootPlacement) == 0x000010, "Wrong alignment on FAnimNode_NCIKFootPlacement");
static_assert(sizeof(FAnimNode_NCIKFootPlacement) == 0x0002A0, "Wrong size on FAnimNode_NCIKFootPlacement");
static_assert(offsetof(FAnimNode_NCIKFootPlacement, InPoseSlopeAngle) == 0x000280, "Member 'FAnimNode_NCIKFootPlacement::InPoseSlopeAngle' has a wrong offset!");
static_assert(offsetof(FAnimNode_NCIKFootPlacement, FootPlacementLODOverride) == 0x000284, "Member 'FAnimNode_NCIKFootPlacement::FootPlacementLODOverride' has a wrong offset!");
static_assert(offsetof(FAnimNode_NCIKFootPlacement, Processor) == 0x000288, "Member 'FAnimNode_NCIKFootPlacement::Processor' has a wrong offset!");
static_assert(offsetof(FAnimNode_NCIKFootPlacement, Solver) == 0x000290, "Member 'FAnimNode_NCIKFootPlacement::Solver' has a wrong offset!");

// ScriptStruct NCIK.JointTask
// 0x0090 (0x0090 - 0x0000)
struct FJointTask final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExSocketName;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             TargetTransform;                                   // 0x0020(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsTargetGivenAsOffset;                            // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             TargetSpace;                                       // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetSpaceBoneName;                               // 0x0054(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePosition;                                   // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOrientation;                                // 0x005D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBalancing;                                  // 0x005E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PositionAlpha;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrientationAlpha;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubBaseInfluence;                                  // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BalancingMass;                                     // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SubBaseOffsetCS;                                   // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RootOffsetCS;                                      // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJointTask) == 0x000010, "Wrong alignment on FJointTask");
static_assert(sizeof(FJointTask) == 0x000090, "Wrong size on FJointTask");
static_assert(offsetof(FJointTask, BoneName) == 0x000010, "Member 'FJointTask::BoneName' has a wrong offset!");
static_assert(offsetof(FJointTask, ExSocketName) == 0x000018, "Member 'FJointTask::ExSocketName' has a wrong offset!");
static_assert(offsetof(FJointTask, TargetTransform) == 0x000020, "Member 'FJointTask::TargetTransform' has a wrong offset!");
static_assert(offsetof(FJointTask, bIsTargetGivenAsOffset) == 0x000050, "Member 'FJointTask::bIsTargetGivenAsOffset' has a wrong offset!");
static_assert(offsetof(FJointTask, TargetSpace) == 0x000051, "Member 'FJointTask::TargetSpace' has a wrong offset!");
static_assert(offsetof(FJointTask, TargetSpaceBoneName) == 0x000054, "Member 'FJointTask::TargetSpaceBoneName' has a wrong offset!");
static_assert(offsetof(FJointTask, bEnablePosition) == 0x00005C, "Member 'FJointTask::bEnablePosition' has a wrong offset!");
static_assert(offsetof(FJointTask, bEnableOrientation) == 0x00005D, "Member 'FJointTask::bEnableOrientation' has a wrong offset!");
static_assert(offsetof(FJointTask, bEnableBalancing) == 0x00005E, "Member 'FJointTask::bEnableBalancing' has a wrong offset!");
static_assert(offsetof(FJointTask, PositionAlpha) == 0x000060, "Member 'FJointTask::PositionAlpha' has a wrong offset!");
static_assert(offsetof(FJointTask, OrientationAlpha) == 0x000064, "Member 'FJointTask::OrientationAlpha' has a wrong offset!");
static_assert(offsetof(FJointTask, SubBaseInfluence) == 0x000068, "Member 'FJointTask::SubBaseInfluence' has a wrong offset!");
static_assert(offsetof(FJointTask, BalancingMass) == 0x00006C, "Member 'FJointTask::BalancingMass' has a wrong offset!");
static_assert(offsetof(FJointTask, SubBaseOffsetCS) == 0x000070, "Member 'FJointTask::SubBaseOffsetCS' has a wrong offset!");
static_assert(offsetof(FJointTask, RootOffsetCS) == 0x00007C, "Member 'FJointTask::RootOffsetCS' has a wrong offset!");

// ScriptStruct NCIK.AnimNode_NCIKFullBody
// 0x00C0 (0x0340 - 0x0280)
struct FAnimNode_NCIKFullBody final : public FAnimNode_NCIKBaseV2
{
public:
	TArray<struct FJointTask>                     Tasks;                                             // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UNCIK_PBIKSolver*                       Solver;                                            // 0x0290(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_298[0xA8];                                     // 0x0298(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_NCIKFullBody) == 0x000010, "Wrong alignment on FAnimNode_NCIKFullBody");
static_assert(sizeof(FAnimNode_NCIKFullBody) == 0x000340, "Wrong size on FAnimNode_NCIKFullBody");
static_assert(offsetof(FAnimNode_NCIKFullBody, Tasks) == 0x000280, "Member 'FAnimNode_NCIKFullBody::Tasks' has a wrong offset!");
static_assert(offsetof(FAnimNode_NCIKFullBody, Solver) == 0x000290, "Member 'FAnimNode_NCIKFullBody::Solver' has a wrong offset!");

// ScriptStruct NCIK.SpineModifierWeight
// 0x0014 (0x0014 - 0x0000)
struct FSpineModifierWeight final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideMaxAngle;                                 // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxAngle;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpineModifierWeight) == 0x000004, "Wrong alignment on FSpineModifierWeight");
static_assert(sizeof(FSpineModifierWeight) == 0x000014, "Wrong size on FSpineModifierWeight");
static_assert(offsetof(FSpineModifierWeight, BoneName) == 0x000000, "Member 'FSpineModifierWeight::BoneName' has a wrong offset!");
static_assert(offsetof(FSpineModifierWeight, Weight) == 0x000008, "Member 'FSpineModifierWeight::Weight' has a wrong offset!");
static_assert(offsetof(FSpineModifierWeight, bOverrideMaxAngle) == 0x00000C, "Member 'FSpineModifierWeight::bOverrideMaxAngle' has a wrong offset!");
static_assert(offsetof(FSpineModifierWeight, MaxAngle) == 0x000010, "Member 'FSpineModifierWeight::MaxAngle' has a wrong offset!");

// ScriptStruct NCIK.AnimNode_SpineModifier
// 0x01B8 (0x0280 - 0x00C8)
struct alignas(0x10) FAnimNode_SpineModifier final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         StartBone;                                         // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                StartBoneLookAt;                                   // 0x00D8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         EndBone;                                           // 0x00E4(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                EndBoneLookAt;                                     // 0x00F4(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngle;                                          // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpineModifierWeight>           BoneChainParams;                                   // 0x0108(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	ESpineModifierDirectionTypes                  Forward;                                           // 0x0118(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpineModifierDirectionTypes                  Up;                                                // 0x0119(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Target;                                            // 0x011C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bYawOnly;                                          // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpineAnimSpeed;                                    // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebugData;                                    // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x14F];                                    // 0x0131(0x014F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_SpineModifier) == 0x000010, "Wrong alignment on FAnimNode_SpineModifier");
static_assert(sizeof(FAnimNode_SpineModifier) == 0x000280, "Wrong size on FAnimNode_SpineModifier");
static_assert(offsetof(FAnimNode_SpineModifier, StartBone) == 0x0000C8, "Member 'FAnimNode_SpineModifier::StartBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpineModifier, StartBoneLookAt) == 0x0000D8, "Member 'FAnimNode_SpineModifier::StartBoneLookAt' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpineModifier, EndBone) == 0x0000E4, "Member 'FAnimNode_SpineModifier::EndBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpineModifier, EndBoneLookAt) == 0x0000F4, "Member 'FAnimNode_SpineModifier::EndBoneLookAt' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpineModifier, MaxAngle) == 0x000100, "Member 'FAnimNode_SpineModifier::MaxAngle' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpineModifier, BoneChainParams) == 0x000108, "Member 'FAnimNode_SpineModifier::BoneChainParams' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpineModifier, Forward) == 0x000118, "Member 'FAnimNode_SpineModifier::Forward' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpineModifier, Up) == 0x000119, "Member 'FAnimNode_SpineModifier::Up' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpineModifier, Target) == 0x00011C, "Member 'FAnimNode_SpineModifier::Target' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpineModifier, bYawOnly) == 0x000128, "Member 'FAnimNode_SpineModifier::bYawOnly' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpineModifier, SpineAnimSpeed) == 0x00012C, "Member 'FAnimNode_SpineModifier::SpineAnimSpeed' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpineModifier, bDrawDebugData) == 0x000130, "Member 'FAnimNode_SpineModifier::bDrawDebugData' has a wrong offset!");

// ScriptStruct NCIK.SpineCachedBoneData
// 0x0014 (0x0014 - 0x0000)
struct FSpineCachedBoneData final
{
public:
	struct FBoneReference                         Bone;                                              // 0x0000(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         RefSkeletonIndex;                                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpineCachedBoneData) == 0x000004, "Wrong alignment on FSpineCachedBoneData");
static_assert(sizeof(FSpineCachedBoneData) == 0x000014, "Wrong size on FSpineCachedBoneData");
static_assert(offsetof(FSpineCachedBoneData, Bone) == 0x000000, "Member 'FSpineCachedBoneData::Bone' has a wrong offset!");
static_assert(offsetof(FSpineCachedBoneData, RefSkeletonIndex) == 0x000010, "Member 'FSpineCachedBoneData::RefSkeletonIndex' has a wrong offset!");

// ScriptStruct NCIK.NCIKDrawDebugItemCollection
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FNCIKDrawDebugItemCollection final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNCIKDrawDebugItemCollection) == 0x000008, "Wrong alignment on FNCIKDrawDebugItemCollection");
static_assert(sizeof(FNCIKDrawDebugItemCollection) == 0x000010, "Wrong size on FNCIKDrawDebugItemCollection");

// ScriptStruct NCIK.NCIKQueuedDrawDebugItem
// 0x0068 (0x0068 - 0x0000)
struct FNCIKQueuedDrawDebugItem final
{
public:
	ENCIKDrawDebugItemType                        ItemType;                                          // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartLoc;                                          // 0x0004(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLoc;                                            // 0x0010(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x001C(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0034(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0038(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Segments;                                          // 0x003C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0040(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPersistentLines;                                  // 0x0044(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LifeTime;                                          // 0x0048(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x004C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0050(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TextScale;                                         // 0x0060(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNCIKQueuedDrawDebugItem) == 0x000008, "Wrong alignment on FNCIKQueuedDrawDebugItem");
static_assert(sizeof(FNCIKQueuedDrawDebugItem) == 0x000068, "Wrong size on FNCIKQueuedDrawDebugItem");
static_assert(offsetof(FNCIKQueuedDrawDebugItem, ItemType) == 0x000000, "Member 'FNCIKQueuedDrawDebugItem::ItemType' has a wrong offset!");
static_assert(offsetof(FNCIKQueuedDrawDebugItem, StartLoc) == 0x000004, "Member 'FNCIKQueuedDrawDebugItem::StartLoc' has a wrong offset!");
static_assert(offsetof(FNCIKQueuedDrawDebugItem, EndLoc) == 0x000010, "Member 'FNCIKQueuedDrawDebugItem::EndLoc' has a wrong offset!");
static_assert(offsetof(FNCIKQueuedDrawDebugItem, Center) == 0x00001C, "Member 'FNCIKQueuedDrawDebugItem::Center' has a wrong offset!");
static_assert(offsetof(FNCIKQueuedDrawDebugItem, Rotation) == 0x000028, "Member 'FNCIKQueuedDrawDebugItem::Rotation' has a wrong offset!");
static_assert(offsetof(FNCIKQueuedDrawDebugItem, Radius) == 0x000034, "Member 'FNCIKQueuedDrawDebugItem::Radius' has a wrong offset!");
static_assert(offsetof(FNCIKQueuedDrawDebugItem, Size) == 0x000038, "Member 'FNCIKQueuedDrawDebugItem::Size' has a wrong offset!");
static_assert(offsetof(FNCIKQueuedDrawDebugItem, Segments) == 0x00003C, "Member 'FNCIKQueuedDrawDebugItem::Segments' has a wrong offset!");
static_assert(offsetof(FNCIKQueuedDrawDebugItem, Color) == 0x000040, "Member 'FNCIKQueuedDrawDebugItem::Color' has a wrong offset!");
static_assert(offsetof(FNCIKQueuedDrawDebugItem, bPersistentLines) == 0x000044, "Member 'FNCIKQueuedDrawDebugItem::bPersistentLines' has a wrong offset!");
static_assert(offsetof(FNCIKQueuedDrawDebugItem, LifeTime) == 0x000048, "Member 'FNCIKQueuedDrawDebugItem::LifeTime' has a wrong offset!");
static_assert(offsetof(FNCIKQueuedDrawDebugItem, Thickness) == 0x00004C, "Member 'FNCIKQueuedDrawDebugItem::Thickness' has a wrong offset!");
static_assert(offsetof(FNCIKQueuedDrawDebugItem, Message) == 0x000050, "Member 'FNCIKQueuedDrawDebugItem::Message' has a wrong offset!");
static_assert(offsetof(FNCIKQueuedDrawDebugItem, TextScale) == 0x000060, "Member 'FNCIKQueuedDrawDebugItem::TextScale' has a wrong offset!");

// ScriptStruct NCIK.NCIKBoneReference
// 0x0000 (0x0010 - 0x0010)
struct FNCIKBoneReference final : public FBoneReference
{
};
static_assert(alignof(FNCIKBoneReference) == 0x000004, "Wrong alignment on FNCIKBoneReference");
static_assert(sizeof(FNCIKBoneReference) == 0x000010, "Wrong size on FNCIKBoneReference");

// ScriptStruct NCIK.LimbDefinition
// 0x0030 (0x0030 - 0x0000)
struct FLimbDefinition final
{
public:
	struct FNCIKBoneReference                     HipBone;                                           // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FNCIKBoneReference                     TipBone;                                           // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FNCIKBoneReference                     ToeBone;                                           // 0x0020(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLimbDefinition) == 0x000004, "Wrong alignment on FLimbDefinition");
static_assert(sizeof(FLimbDefinition) == 0x000030, "Wrong size on FLimbDefinition");
static_assert(offsetof(FLimbDefinition, HipBone) == 0x000000, "Member 'FLimbDefinition::HipBone' has a wrong offset!");
static_assert(offsetof(FLimbDefinition, TipBone) == 0x000010, "Member 'FLimbDefinition::TipBone' has a wrong offset!");
static_assert(offsetof(FLimbDefinition, ToeBone) == 0x000020, "Member 'FLimbDefinition::ToeBone' has a wrong offset!");

// ScriptStruct NCIK.JointTaskTarget
// 0x0070 (0x0070 - 0x0000)
struct FJointTaskTarget final
{
public:
	struct FTransform                             TargetTransform;                                   // 0x0000(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsTargetGivenAsOffset;                            // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             TargetSpace;                                       // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetSpaceBoneName;                               // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePosition;                                   // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOrientation;                                // 0x003D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBalancing;                                  // 0x003E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PositionAlpha;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrientationAlpha;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubBaseInfluence;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BalancingMass;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SubBaseOffsetCS;                                   // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RootOffsetCS;                                      // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJointTaskTarget) == 0x000010, "Wrong alignment on FJointTaskTarget");
static_assert(sizeof(FJointTaskTarget) == 0x000070, "Wrong size on FJointTaskTarget");
static_assert(offsetof(FJointTaskTarget, TargetTransform) == 0x000000, "Member 'FJointTaskTarget::TargetTransform' has a wrong offset!");
static_assert(offsetof(FJointTaskTarget, bIsTargetGivenAsOffset) == 0x000030, "Member 'FJointTaskTarget::bIsTargetGivenAsOffset' has a wrong offset!");
static_assert(offsetof(FJointTaskTarget, TargetSpace) == 0x000031, "Member 'FJointTaskTarget::TargetSpace' has a wrong offset!");
static_assert(offsetof(FJointTaskTarget, TargetSpaceBoneName) == 0x000034, "Member 'FJointTaskTarget::TargetSpaceBoneName' has a wrong offset!");
static_assert(offsetof(FJointTaskTarget, bEnablePosition) == 0x00003C, "Member 'FJointTaskTarget::bEnablePosition' has a wrong offset!");
static_assert(offsetof(FJointTaskTarget, bEnableOrientation) == 0x00003D, "Member 'FJointTaskTarget::bEnableOrientation' has a wrong offset!");
static_assert(offsetof(FJointTaskTarget, bEnableBalancing) == 0x00003E, "Member 'FJointTaskTarget::bEnableBalancing' has a wrong offset!");
static_assert(offsetof(FJointTaskTarget, PositionAlpha) == 0x000040, "Member 'FJointTaskTarget::PositionAlpha' has a wrong offset!");
static_assert(offsetof(FJointTaskTarget, OrientationAlpha) == 0x000044, "Member 'FJointTaskTarget::OrientationAlpha' has a wrong offset!");
static_assert(offsetof(FJointTaskTarget, SubBaseInfluence) == 0x000048, "Member 'FJointTaskTarget::SubBaseInfluence' has a wrong offset!");
static_assert(offsetof(FJointTaskTarget, BalancingMass) == 0x00004C, "Member 'FJointTaskTarget::BalancingMass' has a wrong offset!");
static_assert(offsetof(FJointTaskTarget, SubBaseOffsetCS) == 0x000050, "Member 'FJointTaskTarget::SubBaseOffsetCS' has a wrong offset!");
static_assert(offsetof(FJointTaskTarget, RootOffsetCS) == 0x00005C, "Member 'FJointTaskTarget::RootOffsetCS' has a wrong offset!");

// ScriptStruct NCIK.JointConstraint
// 0x0014 (0x0014 - 0x0000)
struct FJointConstraint final
{
public:
	struct FNCIKBoneReference                     Bone;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EJointConstraintType                          ConstraintType;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJointConstraint) == 0x000004, "Wrong alignment on FJointConstraint");
static_assert(sizeof(FJointConstraint) == 0x000014, "Wrong size on FJointConstraint");
static_assert(offsetof(FJointConstraint, Bone) == 0x000000, "Member 'FJointConstraint::Bone' has a wrong offset!");
static_assert(offsetof(FJointConstraint, ConstraintType) == 0x000010, "Member 'FJointConstraint::ConstraintType' has a wrong offset!");

// ScriptStruct NCIK.NCIKBoneSocketReference
// 0x0014 (0x0014 - 0x0000)
struct FNCIKBoneSocketReference final
{
public:
	bool                                          bUseSocket;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNCIKBoneSocketReference) == 0x000004, "Wrong alignment on FNCIKBoneSocketReference");
static_assert(sizeof(FNCIKBoneSocketReference) == 0x000014, "Wrong size on FNCIKBoneSocketReference");
static_assert(offsetof(FNCIKBoneSocketReference, bUseSocket) == 0x000000, "Member 'FNCIKBoneSocketReference::bUseSocket' has a wrong offset!");
static_assert(offsetof(FNCIKBoneSocketReference, BoneName) == 0x000004, "Member 'FNCIKBoneSocketReference::BoneName' has a wrong offset!");
static_assert(offsetof(FNCIKBoneSocketReference, SocketName) == 0x00000C, "Member 'FNCIKBoneSocketReference::SocketName' has a wrong offset!");

// ScriptStruct NCIK.NCIKFootPlacementLODSettings
// 0x0014 (0x0014 - 0x0000)
struct FNCIKFootPlacementLODSettings final
{
public:
	bool                                          bDisableRaycastForSimpleCollision;                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SimpleCollisionDetectionInterval;                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableRaycastForComplexCollision;                // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ComplexCollisionDetectionInterval;                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComplexCollisionPrecision;                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNCIKFootPlacementLODSettings) == 0x000004, "Wrong alignment on FNCIKFootPlacementLODSettings");
static_assert(sizeof(FNCIKFootPlacementLODSettings) == 0x000014, "Wrong size on FNCIKFootPlacementLODSettings");
static_assert(offsetof(FNCIKFootPlacementLODSettings, bDisableRaycastForSimpleCollision) == 0x000000, "Member 'FNCIKFootPlacementLODSettings::bDisableRaycastForSimpleCollision' has a wrong offset!");
static_assert(offsetof(FNCIKFootPlacementLODSettings, SimpleCollisionDetectionInterval) == 0x000004, "Member 'FNCIKFootPlacementLODSettings::SimpleCollisionDetectionInterval' has a wrong offset!");
static_assert(offsetof(FNCIKFootPlacementLODSettings, bDisableRaycastForComplexCollision) == 0x000008, "Member 'FNCIKFootPlacementLODSettings::bDisableRaycastForComplexCollision' has a wrong offset!");
static_assert(offsetof(FNCIKFootPlacementLODSettings, ComplexCollisionDetectionInterval) == 0x00000C, "Member 'FNCIKFootPlacementLODSettings::ComplexCollisionDetectionInterval' has a wrong offset!");
static_assert(offsetof(FNCIKFootPlacementLODSettings, ComplexCollisionPrecision) == 0x000010, "Member 'FNCIKFootPlacementLODSettings::ComplexCollisionPrecision' has a wrong offset!");

}

