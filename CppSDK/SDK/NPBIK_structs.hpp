#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NPBIK

#include "Basic.hpp"


namespace SDK
{

// Enum NPBIK.ENPBIKRootBehavior
// NumValues: 0x0004
enum class ENPBIKRootBehavior : uint8
{
	PrePull                                  = 0,
	PinToInput                               = 1,
	Free                                     = 2,
	ENPBIKRootBehavior_MAX                   = 3,
};

// ScriptStruct NPBIK.NPBIKSolver
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FNPBIKSolver final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNPBIKSolver) == 0x000008, "Wrong alignment on FNPBIKSolver");
static_assert(sizeof(FNPBIKSolver) == 0x000068, "Wrong size on FNPBIKSolver");

// ScriptStruct NPBIK.NPBIKRootPrePullSettings
// 0x0020 (0x0020 - 0x0000)
struct FNPBIKRootPrePullSettings final
{
public:
	float                                         RotationAlpha;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAlphaX;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAlphaY;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAlphaZ;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionAlpha;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionAlphaX;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionAlphaY;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionAlphaZ;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPBIKRootPrePullSettings) == 0x000004, "Wrong alignment on FNPBIKRootPrePullSettings");
static_assert(sizeof(FNPBIKRootPrePullSettings) == 0x000020, "Wrong size on FNPBIKRootPrePullSettings");
static_assert(offsetof(FNPBIKRootPrePullSettings, RotationAlpha) == 0x000000, "Member 'FNPBIKRootPrePullSettings::RotationAlpha' has a wrong offset!");
static_assert(offsetof(FNPBIKRootPrePullSettings, RotationAlphaX) == 0x000004, "Member 'FNPBIKRootPrePullSettings::RotationAlphaX' has a wrong offset!");
static_assert(offsetof(FNPBIKRootPrePullSettings, RotationAlphaY) == 0x000008, "Member 'FNPBIKRootPrePullSettings::RotationAlphaY' has a wrong offset!");
static_assert(offsetof(FNPBIKRootPrePullSettings, RotationAlphaZ) == 0x00000C, "Member 'FNPBIKRootPrePullSettings::RotationAlphaZ' has a wrong offset!");
static_assert(offsetof(FNPBIKRootPrePullSettings, PositionAlpha) == 0x000010, "Member 'FNPBIKRootPrePullSettings::PositionAlpha' has a wrong offset!");
static_assert(offsetof(FNPBIKRootPrePullSettings, PositionAlphaX) == 0x000014, "Member 'FNPBIKRootPrePullSettings::PositionAlphaX' has a wrong offset!");
static_assert(offsetof(FNPBIKRootPrePullSettings, PositionAlphaY) == 0x000018, "Member 'FNPBIKRootPrePullSettings::PositionAlphaY' has a wrong offset!");
static_assert(offsetof(FNPBIKRootPrePullSettings, PositionAlphaZ) == 0x00001C, "Member 'FNPBIKRootPrePullSettings::PositionAlphaZ' has a wrong offset!");

// ScriptStruct NPBIK.NPBIKSolverSettings
// 0x003C (0x003C - 0x0000)
struct FNPBIKSolverSettings final
{
public:
	int32                                         Iterations;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MassMultiplier;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowStretch;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENPBIKRootBehavior                            RootBehavior;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNPBIKRootPrePullSettings              PrePullRootSettings;                               // 0x000C(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         GlobalPullChainAlpha;                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngle;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverRelaxation;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartSolveFromInputPose;                          // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNPBIKSolverSettings) == 0x000004, "Wrong alignment on FNPBIKSolverSettings");
static_assert(sizeof(FNPBIKSolverSettings) == 0x00003C, "Wrong size on FNPBIKSolverSettings");
static_assert(offsetof(FNPBIKSolverSettings, Iterations) == 0x000000, "Member 'FNPBIKSolverSettings::Iterations' has a wrong offset!");
static_assert(offsetof(FNPBIKSolverSettings, MassMultiplier) == 0x000004, "Member 'FNPBIKSolverSettings::MassMultiplier' has a wrong offset!");
static_assert(offsetof(FNPBIKSolverSettings, bAllowStretch) == 0x000008, "Member 'FNPBIKSolverSettings::bAllowStretch' has a wrong offset!");
static_assert(offsetof(FNPBIKSolverSettings, RootBehavior) == 0x000009, "Member 'FNPBIKSolverSettings::RootBehavior' has a wrong offset!");
static_assert(offsetof(FNPBIKSolverSettings, PrePullRootSettings) == 0x00000C, "Member 'FNPBIKSolverSettings::PrePullRootSettings' has a wrong offset!");
static_assert(offsetof(FNPBIKSolverSettings, GlobalPullChainAlpha) == 0x00002C, "Member 'FNPBIKSolverSettings::GlobalPullChainAlpha' has a wrong offset!");
static_assert(offsetof(FNPBIKSolverSettings, MaxAngle) == 0x000030, "Member 'FNPBIKSolverSettings::MaxAngle' has a wrong offset!");
static_assert(offsetof(FNPBIKSolverSettings, OverRelaxation) == 0x000034, "Member 'FNPBIKSolverSettings::OverRelaxation' has a wrong offset!");
static_assert(offsetof(FNPBIKSolverSettings, bStartSolveFromInputPose) == 0x000038, "Member 'FNPBIKSolverSettings::bStartSolveFromInputPose' has a wrong offset!");

}

