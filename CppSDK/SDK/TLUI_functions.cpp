#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TLUI

#include "Basic.hpp"

#include "TLUI_classes.hpp"
#include "TLUI_parameters.hpp"


namespace SDK
{

// Function TLUI.TLCanvasPanel.HandleUpdateEnabled
// (Final, Native, Public)

void UTLCanvasPanel::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLCanvasPanel", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLCanvasPanel.HandleUpdateVisible
// (Final, Native, Public)

void UTLCanvasPanel::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLCanvasPanel", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLListView.AddItemAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLListView::AddItemAt(class UObject* Item, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLListView", "AddItemAt");

	Params::TLListView_AddItemAt Parms{};

	Parms.Item = Item;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLListView.HandleUpdateEnabled
// (Final, Native, Public)

void UTLListView::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLListView", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLListView.HandleUpdateListChanged
// (Final, Native, Public)

void UTLListView::HandleUpdateListChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLListView", "HandleUpdateListChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLListView.HandleUpdateVisible
// (Final, Native, Public)

void UTLListView::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLListView", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLGridPanel.HandleUpdateEnabled
// (Final, Native, Public)

void UTLGridPanel::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLGridPanel", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLGridPanel.HandleUpdateVisible
// (Final, Native, Public)

void UTLGridPanel::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLGridPanel", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLRadioGroup.GetSelectedIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTLRadioGroup::GetSelectedIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLRadioGroup", "GetSelectedIndex");

	Params::TLRadioGroup_GetSelectedIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLRadioGroup.SetCheckIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLRadioGroup::SetCheckIndex(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLRadioGroup", "SetCheckIndex");

	Params::TLRadioGroup_SetCheckIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLLinearBox.SetOrientation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EOrientation                            InOrientation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLLinearBox::SetOrientation(EOrientation InOrientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLLinearBox", "SetOrientation");

	Params::TLLinearBox_SetOrientation Parms{};

	Parms.InOrientation = InOrientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLLinearBox.SetReverseOrder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInReverseOrder                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLLinearBox::SetReverseOrder(bool bInReverseOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLLinearBox", "SetReverseOrder");

	Params::TLLinearBox_SetReverseOrder Parms{};

	Parms.bInReverseOrder = bInReverseOrder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLLinearBox.ToggleOrientation
// (Final, Native, Public, BlueprintCallable)

void UTLLinearBox::ToggleOrientation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLLinearBox", "ToggleOrientation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLLinearBox.GetOrientation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EOrientation                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EOrientation UTLLinearBox::GetOrientation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLLinearBox", "GetOrientation");

	Params::TLLinearBox_GetOrientation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLLinearBox.GetReverseOrder
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTLLinearBox::GetReverseOrder() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLLinearBox", "GetReverseOrder");

	Params::TLLinearBox_GetReverseOrder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.ComboBoxStringTL.AddOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Option                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UComboBoxStringTL::AddOption(const class FString& Option)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxStringTL", "AddOption");

	Params::ComboBoxStringTL_AddOption Parms{};

	Parms.Option = std::move(Option);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.ComboBoxStringTL.ClearOptions
// (Final, Native, Public, BlueprintCallable)

void UComboBoxStringTL::ClearOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxStringTL", "ClearOptions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.ComboBoxStringTL.ClearSelection
// (Final, Native, Public, BlueprintCallable)

void UComboBoxStringTL::ClearSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxStringTL", "ClearSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction TLUI.ComboBoxStringTL.OnClosingEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UComboBoxStringTL::OnClosingEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxStringTL", "OnClosingEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction TLUI.ComboBoxStringTL.OnOpeningEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UComboBoxStringTL::OnOpeningEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxStringTL", "OnOpeningEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction TLUI.ComboBoxStringTL.OnSelectionChangedEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           SelectedItem                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESelectInfo                             SelectionType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UComboBoxStringTL::OnSelectionChangedEvent__DelegateSignature(const class FString& SelectedItem, ESelectInfo SelectionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxStringTL", "OnSelectionChangedEvent__DelegateSignature");

	Params::ComboBoxStringTL_OnSelectionChangedEvent__DelegateSignature Parms{};

	Parms.SelectedItem = std::move(SelectedItem);
	Parms.SelectionType = SelectionType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TLUI.ComboBoxStringTL.RefreshOptions
// (Final, Native, Public, BlueprintCallable)

void UComboBoxStringTL::RefreshOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxStringTL", "RefreshOptions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.ComboBoxStringTL.RemoveOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Option                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UComboBoxStringTL::RemoveOption(const class FString& Option)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxStringTL", "RemoveOption");

	Params::ComboBoxStringTL_RemoveOption Parms{};

	Parms.Option = std::move(Option);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.ComboBoxStringTL.SetSelectedIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UComboBoxStringTL::SetSelectedIndex(const int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxStringTL", "SetSelectedIndex");

	Params::ComboBoxStringTL_SetSelectedIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.ComboBoxStringTL.SetSelectedOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Option                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UComboBoxStringTL::SetSelectedOption(const class FString& Option)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxStringTL", "SetSelectedOption");

	Params::ComboBoxStringTL_SetSelectedOption Parms{};

	Parms.Option = std::move(Option);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.ComboBoxStringTL.FindOptionIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Option                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UComboBoxStringTL::FindOptionIndex(const class FString& Option) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxStringTL", "FindOptionIndex");

	Params::ComboBoxStringTL_FindOptionIndex Parms{};

	Parms.Option = std::move(Option);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.ComboBoxStringTL.GetOptionAtIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UComboBoxStringTL::GetOptionAtIndex(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxStringTL", "GetOptionAtIndex");

	Params::ComboBoxStringTL_GetOptionAtIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.ComboBoxStringTL.GetOptionCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UComboBoxStringTL::GetOptionCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxStringTL", "GetOptionCount");

	Params::ComboBoxStringTL_GetOptionCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.ComboBoxStringTL.GetSelectedIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UComboBoxStringTL::GetSelectedIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxStringTL", "GetSelectedIndex");

	Params::ComboBoxStringTL_GetSelectedIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.ComboBoxStringTL.GetSelectedOption
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UComboBoxStringTL::GetSelectedOption() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxStringTL", "GetSelectedOption");

	Params::ComboBoxStringTL_GetSelectedOption Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.ComboBoxStringTL.IsOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UComboBoxStringTL::IsOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxStringTL", "IsOpen");

	Params::ComboBoxStringTL_IsOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TextLayoutWidgetTL.SetJustification
// (Native, Public, BlueprintCallable)
// Parameters:
// ETextJustifyTL                          InJustification                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextLayoutWidgetTL::SetJustification(ETextJustifyTL InJustification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextLayoutWidgetTL", "SetJustification");

	Params::TextLayoutWidgetTL_SetJustification Parms{};

	Parms.InJustification = InJustification;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLBackgroundBlur.HandleUpdateEnabled
// (Final, Native, Public)

void UTLBackgroundBlur::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLBackgroundBlur", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLBackgroundBlur.HandleUpdateVisible
// (Final, Native, Public)

void UTLBackgroundBlur::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLBackgroundBlur", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLBorder.HandleUpdateEnabled
// (Final, Native, Public)

void UTLBorder::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLBorder", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLBorder.HandleUpdateVisible
// (Final, Native, Public)

void UTLBorder::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLBorder", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLBorder.SetBrushFromSoftObjectPath
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSoftObjectPath                  Path                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInAsyncLoad                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLBorder::SetBrushFromSoftObjectPath(const struct FSoftObjectPath& Path, bool bInAsyncLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLBorder", "SetBrushFromSoftObjectPath");

	Params::TLBorder_SetBrushFromSoftObjectPath Parms{};

	Parms.Path = std::move(Path);
	Parms.bInAsyncLoad = bInAsyncLoad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLBorder.SetBrushFromSprite
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPaperSprite*                     Sprite                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLBorder::SetBrushFromSprite(class UPaperSprite* Sprite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLBorder", "SetBrushFromSprite");

	Params::TLBorder_SetBrushFromSprite Parms{};

	Parms.Sprite = Sprite;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLBorder.SetBrushTintColorWithColorTable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InTableColorKey                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLBorder::SetBrushTintColorWithColorTable(class FName InTableColorKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLBorder", "SetBrushTintColorWithColorTable");

	Params::TLBorder_SetBrushTintColorWithColorTable Parms{};

	Parms.InTableColorKey = InTableColorKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLBorder.SetContentColorWithColorTable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InTableColorKey                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLBorder::SetContentColorWithColorTable(class FName InTableColorKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLBorder", "SetContentColorWithColorTable");

	Params::TLBorder_SetContentColorWithColorTable Parms{};

	Parms.InTableColorKey = InTableColorKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLButton.HandleUpdateEnabled
// (Final, Native, Public)

void UTLButton::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLButton", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLButton.HandleUpdateVisible
// (Final, Native, Public)

void UTLButton::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLButton", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLButton.OnClickHandler
// (Final, Native, Protected)

void UTLButton::OnClickHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLButton", "OnClickHandler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLButton.OnHoverHandler
// (Final, Native, Protected)

void UTLButton::OnHoverHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLButton", "OnHoverHandler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLButton.OnPressHandler
// (Final, Native, Protected)

void UTLButton::OnPressHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLButton", "OnPressHandler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLButton.OnReleaseHandler
// (Final, Native, Protected)

void UTLButton::OnReleaseHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLButton", "OnReleaseHandler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLButton.OnUnhoverHandler
// (Final, Native, Protected)

void UTLButton::OnUnhoverHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLButton", "OnUnhoverHandler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLCheckBox.HandleUpdateEnabled
// (Final, Native, Public)

void UTLCheckBox::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLCheckBox", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLCheckBox.HandleUpdateVisible
// (Final, Native, Public)

void UTLCheckBox::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLCheckBox", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLCheckBox.OnTLCheckStateChangedCallback
// (Final, Native, Public)
// Parameters:
// bool                                    IsChecked_0                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLCheckBox::OnTLCheckStateChangedCallback(bool IsChecked_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLCheckBox", "OnTLCheckStateChangedCallback");

	Params::TLCheckBox_OnTLCheckStateChangedCallback Parms{};

	Parms.IsChecked_0 = IsChecked_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLCircularThrobber.HandleUpdateEnabled
// (Final, Native, Public)

void UTLCircularThrobber::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLCircularThrobber", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLCircularThrobber.HandleUpdateVisible
// (Final, Native, Public)

void UTLCircularThrobber::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLCircularThrobber", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLComboBoxString.HandleUpdateEnabled
// (Final, Native, Public)

void UTLComboBoxString::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLComboBoxString", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLComboBoxString.HandleUpdateVisible
// (Final, Native, Public)

void UTLComboBoxString::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLComboBoxString", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLComboBoxString.OnOpeningHandler
// (Final, Native, Public)

void UTLComboBoxString::OnOpeningHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLComboBoxString", "OnOpeningHandler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLComboBoxString.OnSelectionChangedHandler
// (Final, Native, Public)
// Parameters:
// class FString                           SelectedItem                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESelectInfo                             SelectionType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLComboBoxString::OnSelectionChangedHandler(const class FString& SelectedItem, ESelectInfo SelectionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLComboBoxString", "OnSelectionChangedHandler");

	Params::TLComboBoxString_OnSelectionChangedHandler Parms{};

	Parms.SelectedItem = std::move(SelectedItem);
	Parms.SelectionType = SelectionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLComboBoxString.SetMenuPlacement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMenuPlacement                          InMenuPlacement                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLComboBoxString::SetMenuPlacement(EMenuPlacement InMenuPlacement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLComboBoxString", "SetMenuPlacement");

	Params::TLComboBoxString_SetMenuPlacement Parms{};

	Parms.InMenuPlacement = InMenuPlacement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLComboBoxString.SetSelectedOptionIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLComboBoxString::SetSelectedOptionIndex(const int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLComboBoxString", "SetSelectedOptionIndex");

	Params::TLComboBoxString_SetSelectedOptionIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLComboBoxString.GetSelectedOptionIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTLComboBoxString::GetSelectedOptionIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLComboBoxString", "GetSelectedOptionIndex");

	Params::TLComboBoxString_GetSelectedOptionIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLDynamicEntryBox.HandleUpdateEnabled
// (Final, Native, Public)

void UTLDynamicEntryBox::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLDynamicEntryBox", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLDynamicEntryBox.HandleUpdateVisible
// (Final, Native, Public)

void UTLDynamicEntryBox::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLDynamicEntryBox", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLEditableText.HandleUpdateEnabled
// (Final, Native, Public)

void UTLEditableText::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableText", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLEditableText.HandleUpdateVisible
// (Final, Native, Public)

void UTLEditableText::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableText", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLEditableTextBox.ClearError
// (Final, Native, Public, BlueprintCallable)

void UTLEditableTextBox::ClearError()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableTextBox", "ClearError");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLEditableTextBox.HandleUpdateEnabled
// (Final, Native, Public)

void UTLEditableTextBox::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableTextBox", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLEditableTextBox.HandleUpdateVisible
// (Final, Native, Public)

void UTLEditableTextBox::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableTextBox", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction TLUI.TLEditableTextBox.OnEditableTextBoxChangedEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// class FText                             Text_0                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTLEditableTextBox::OnEditableTextBoxChangedEvent__DelegateSignature(const class FText& Text_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableTextBox", "OnEditableTextBoxChangedEvent__DelegateSignature");

	Params::TLEditableTextBox_OnEditableTextBoxChangedEvent__DelegateSignature Parms{};

	Parms.Text_0 = std::move(Text_0);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction TLUI.TLEditableTextBox.OnEditableTextBoxCommittedEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// class FText                             Text_0                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ETextCommit                             CommitMethod                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLEditableTextBox::OnEditableTextBoxCommittedEvent__DelegateSignature(const class FText& Text_0, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableTextBox", "OnEditableTextBoxCommittedEvent__DelegateSignature");

	Params::TLEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature Parms{};

	Parms.Text_0 = std::move(Text_0);
	Parms.CommitMethod = CommitMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction TLUI.TLEditableTextBox.OnEditableTextFocusLostEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// struct FFocusEvent                      InFocusEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UTLEditableTextBox::OnEditableTextFocusLostEvent__DelegateSignature(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableTextBox", "OnEditableTextFocusLostEvent__DelegateSignature");

	Params::TLEditableTextBox_OnEditableTextFocusLostEvent__DelegateSignature Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction TLUI.TLEditableTextBox.OnEditableTextFocusReceivedEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// struct FGeometry                        MyGeometry                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FFocusEvent                      InFocusEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UTLEditableTextBox::OnEditableTextFocusReceivedEvent__DelegateSignature(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableTextBox", "OnEditableTextFocusReceivedEvent__DelegateSignature");

	Params::TLEditableTextBox_OnEditableTextFocusReceivedEvent__DelegateSignature Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InFocusEvent = std::move(InFocusEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction TLUI.TLEditableTextBox.OnEditableTextMouseButtonDownEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// struct FGeometry                        MyGeometry                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FPointerEvent                    InMouseEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTLEditableTextBox::OnEditableTextMouseButtonDownEvent__DelegateSignature(const struct FGeometry& MyGeometry, const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableTextBox", "OnEditableTextMouseButtonDownEvent__DelegateSignature");

	Params::TLEditableTextBox_OnEditableTextMouseButtonDownEvent__DelegateSignature Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InMouseEvent = std::move(InMouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TLUI.TLEditableTextBox.SelectAllText
// (Final, Native, Public, BlueprintCallable)

void UTLEditableTextBox::SelectAllText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableTextBox", "SelectAllText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLEditableTextBox.SetError
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InError                                                (Parm, NativeAccessSpecifierPublic)

void UTLEditableTextBox::SetError(const class FText& InError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableTextBox", "SetError");

	Params::TLEditableTextBox_SetError Parms{};

	Parms.InError = std::move(InError);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLEditableTextBox.SetEscapeAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETLEditableBoxEscapeAction              InEscapeAction                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLEditableTextBox::SetEscapeAction(ETLEditableBoxEscapeAction InEscapeAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableTextBox", "SetEscapeAction");

	Params::TLEditableTextBox_SetEscapeAction Parms{};

	Parms.InEscapeAction = InEscapeAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLEditableTextBox.SetHintText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (Parm, NativeAccessSpecifierPublic)

void UTLEditableTextBox::SetHintText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableTextBox", "SetHintText");

	Params::TLEditableTextBox_SetHintText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLEditableTextBox.SetIgnoreFocusLostCommited
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InIsIgnore                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLEditableTextBox::SetIgnoreFocusLostCommited(bool InIsIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableTextBox", "SetIgnoreFocusLostCommited");

	Params::TLEditableTextBox_SetIgnoreFocusLostCommited Parms{};

	Parms.InIsIgnore = InIsIgnore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLEditableTextBox.SetIsPassword
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsPassword                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLEditableTextBox::SetIsPassword(bool bIsPassword)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableTextBox", "SetIsPassword");

	Params::TLEditableTextBox_SetIsPassword Parms{};

	Parms.bIsPassword = bIsPassword;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLEditableTextBox.SetIsReadOnly
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bReadOnly                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLEditableTextBox::SetIsReadOnly(bool bReadOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableTextBox", "SetIsReadOnly");

	Params::TLEditableTextBox_SetIsReadOnly Parms{};

	Parms.bReadOnly = bReadOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLEditableTextBox.SetMaxChar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InMaxChar                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLEditableTextBox::SetMaxChar(int32 InMaxChar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableTextBox", "SetMaxChar");

	Params::TLEditableTextBox_SetMaxChar Parms{};

	Parms.InMaxChar = InMaxChar;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLEditableTextBox.SetReplyUnhandledWhenVirtualAcceptKeyDown
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InReplyUnhandled                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLEditableTextBox::SetReplyUnhandledWhenVirtualAcceptKeyDown(bool InReplyUnhandled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableTextBox", "SetReplyUnhandledWhenVirtualAcceptKeyDown");

	Params::TLEditableTextBox_SetReplyUnhandledWhenVirtualAcceptKeyDown Parms{};

	Parms.InReplyUnhandled = InReplyUnhandled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLEditableTextBox.SetText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (Parm, NativeAccessSpecifierPublic)

void UTLEditableTextBox::SetText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableTextBox", "SetText");

	Params::TLEditableTextBox_SetText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLEditableTextBox.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UTLEditableTextBox::GetText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableTextBox", "GetText");

	Params::TLEditableTextBox_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLEditableTextBox.HasError
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTLEditableTextBox::HasError() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLEditableTextBox", "HasError");

	Params::TLEditableTextBox_HasError Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLExpandableArea.HandleUpdateEnabled
// (Final, Native, Public)

void UTLExpandableArea::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLExpandableArea", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLExpandableArea.HandleUpdateVisible
// (Final, Native, Public)

void UTLExpandableArea::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLExpandableArea", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImageBase.GetDynamicMaterial
// (Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UTLImageBase::GetDynamicMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImageBase", "GetDynamicMaterial");

	Params::TLImageBase_GetDynamicMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLImageBase.PlayOrCloseBinkMediaPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInPlay                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImageBase::PlayOrCloseBinkMediaPlayer(bool bInPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImageBase", "PlayOrCloseBinkMediaPlayer");

	Params::TLImageBase_PlayOrCloseBinkMediaPlayer Parms{};

	Parms.bInPlay = bInPlay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImageBase.SetBrush
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSlateBrush                      InBrush                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTLImageBase::SetBrush(const struct FSlateBrush& InBrush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImageBase", "SetBrush");

	Params::TLImageBase_SetBrush Parms{};

	Parms.InBrush = std::move(InBrush);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImageBase.SetBrushFromAsset
// (Native, Public, BlueprintCallable)
// Parameters:
// class USlateBrushAsset*                 Asset                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImageBase::SetBrushFromAsset(class USlateBrushAsset* Asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImageBase", "SetBrushFromAsset");

	Params::TLImageBase_SetBrushFromAsset Parms{};

	Parms.Asset = Asset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImageBase.SetBrushFromAtlasInterface
// (Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class ISlateTextureAtlasInterface>AtlasRegion                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// bool                                    bMatchSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImageBase::SetBrushFromAtlasInterface(TScriptInterface<class ISlateTextureAtlasInterface> AtlasRegion, bool bMatchSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImageBase", "SetBrushFromAtlasInterface");

	Params::TLImageBase_SetBrushFromAtlasInterface Parms{};

	Parms.AtlasRegion = AtlasRegion;
	Parms.bMatchSize = bMatchSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImageBase.SetBrushFromMaterial
// (Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImageBase::SetBrushFromMaterial(class UMaterialInterface* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImageBase", "SetBrushFromMaterial");

	Params::TLImageBase_SetBrushFromMaterial Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImageBase.SetBrushFromMediaTexture
// (Native, Public, BlueprintCallable)
// Parameters:
// class UBinkMediaTexture*                Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImageBase::SetBrushFromMediaTexture(class UBinkMediaTexture* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImageBase", "SetBrushFromMediaTexture");

	Params::TLImageBase_SetBrushFromMediaTexture Parms{};

	Parms.Texture = Texture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImageBase.SetBrushFromRenderTarget
// (Native, Public, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMatchSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImageBase::SetBrushFromRenderTarget(class UTextureRenderTarget2D* Texture, bool bMatchSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImageBase", "SetBrushFromRenderTarget");

	Params::TLImageBase_SetBrushFromRenderTarget Parms{};

	Parms.Texture = Texture;
	Parms.bMatchSize = bMatchSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImageBase.SetBrushFromSoftMaterial
// (Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UMaterialInterface>SoftMaterial                                           (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImageBase::SetBrushFromSoftMaterial(TSoftObjectPtr<class UMaterialInterface> SoftMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImageBase", "SetBrushFromSoftMaterial");

	Params::TLImageBase_SetBrushFromSoftMaterial Parms{};

	Parms.SoftMaterial = SoftMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImageBase.SetBrushFromSoftTexture
// (Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        SoftTexture                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMatchSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImageBase::SetBrushFromSoftTexture(TSoftObjectPtr<class UTexture2D> SoftTexture, bool bMatchSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImageBase", "SetBrushFromSoftTexture");

	Params::TLImageBase_SetBrushFromSoftTexture Parms{};

	Parms.SoftTexture = SoftTexture;
	Parms.bMatchSize = bMatchSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImageBase.SetBrushFromTexture
// (Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMatchSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImageBase::SetBrushFromTexture(class UTexture2D* Texture, bool bMatchSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImageBase", "SetBrushFromTexture");

	Params::TLImageBase_SetBrushFromTexture Parms{};

	Parms.Texture = Texture;
	Parms.bMatchSize = bMatchSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImageBase.SetBrushFromTexture_MaintainRatio
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UTexture2D*                       Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        DefaultSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImageBase::SetBrushFromTexture_MaintainRatio(class UTexture2D* Texture, const struct FVector2D& DefaultSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImageBase", "SetBrushFromTexture_MaintainRatio");

	Params::TLImageBase_SetBrushFromTexture_MaintainRatio Parms{};

	Parms.Texture = Texture;
	Parms.DefaultSize = std::move(DefaultSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImageBase.SetBrushFromTextureDynamic
// (Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2DDynamic*                Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMatchSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImageBase::SetBrushFromTextureDynamic(class UTexture2DDynamic* Texture, bool bMatchSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImageBase", "SetBrushFromTextureDynamic");

	Params::TLImageBase_SetBrushFromTextureDynamic Parms{};

	Parms.Texture = Texture;
	Parms.bMatchSize = bMatchSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImageBase.SetBrushResourceObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          ResourceObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImageBase::SetBrushResourceObject(class UObject* ResourceObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImageBase", "SetBrushResourceObject");

	Params::TLImageBase_SetBrushResourceObject Parms{};

	Parms.ResourceObject = ResourceObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImageBase.SetBrushSize
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        DesiredSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImageBase::SetBrushSize(const struct FVector2D& DesiredSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImageBase", "SetBrushSize");

	Params::TLImageBase_SetBrushSize Parms{};

	Parms.DesiredSize = std::move(DesiredSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImageBase.SetBrushTintColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSlateColor                      TintColor                                              (Parm, NativeAccessSpecifierPublic)

void UTLImageBase::SetBrushTintColor(const struct FSlateColor& TintColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImageBase", "SetBrushTintColor");

	Params::TLImageBase_SetBrushTintColor Parms{};

	Parms.TintColor = std::move(TintColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImageBase.SetBrushTintColorWithColorTable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InTableColorKey                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImageBase::SetBrushTintColorWithColorTable(class FName InTableColorKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImageBase", "SetBrushTintColorWithColorTable");

	Params::TLImageBase_SetBrushTintColorWithColorTable Parms{};

	Parms.InTableColorKey = InTableColorKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImageBase.SetColorAndOpacity
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     InColorAndOpacity                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImageBase::SetColorAndOpacity(const struct FLinearColor& InColorAndOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImageBase", "SetColorAndOpacity");

	Params::TLImageBase_SetColorAndOpacity Parms{};

	Parms.InColorAndOpacity = std::move(InColorAndOpacity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImageBase.SetColorWithColorTable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InTableColorKey                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImageBase::SetColorWithColorTable(class FName InTableColorKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImageBase", "SetColorWithColorTable");

	Params::TLImageBase_SetColorWithColorTable Parms{};

	Parms.InTableColorKey = InTableColorKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImageBase.SetOpacity
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InOpacity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImageBase::SetOpacity(float InOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImageBase", "SetOpacity");

	Params::TLImageBase_SetOpacity Parms{};

	Parms.InOpacity = InOpacity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLFlipBookImage.HandleUpdateEnabled
// (Final, Native, Public)

void UTLFlipBookImage::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLFlipBookImage", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLFlipBookImage.HandleUpdateVisible
// (Final, Native, Public)

void UTLFlipBookImage::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLFlipBookImage", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLFlipBookImage.Play
// (Final, Native, Public, BlueprintCallable)

void UTLFlipBookImage::Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLFlipBookImage", "Play");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLFlipBookImage.SetCurrentFrame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Frame                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLFlipBookImage::SetCurrentFrame(int32 Frame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLFlipBookImage", "SetCurrentFrame");

	Params::TLFlipBookImage_SetCurrentFrame Parms{};

	Parms.Frame = Frame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLFlipBookImage.SetFlipbookFromSoftObjectPath
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSoftObjectPath                  Path                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLFlipBookImage::SetFlipbookFromSoftObjectPath(const struct FSoftObjectPath& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLFlipBookImage", "SetFlipbookFromSoftObjectPath");

	Params::TLFlipBookImage_SetFlipbookFromSoftObjectPath Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLFlipBookImage.Stop
// (Final, Native, Public, BlueprintCallable)

void UTLFlipBookImage::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLFlipBookImage", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLHorizontalBox.HandleUpdateEnabled
// (Final, Native, Public)

void UTLHorizontalBox::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLHorizontalBox", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLHorizontalBox.HandleUpdateVisible
// (Final, Native, Public)

void UTLHorizontalBox::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLHorizontalBox", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImage.HandleBinkMediaPlayerReachedEnd
// (Final, Native, Public)
// Parameters:
// class UBinkMediaPlayer*                 InBinkMediaPlayer                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImage::HandleBinkMediaPlayerReachedEnd(class UBinkMediaPlayer* InBinkMediaPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImage", "HandleBinkMediaPlayerReachedEnd");

	Params::TLImage_HandleBinkMediaPlayerReachedEnd Parms{};

	Parms.InBinkMediaPlayer = InBinkMediaPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImage.HandleUpdateColorAndOpacity
// (Final, Native, Public)

void UTLImage::HandleUpdateColorAndOpacity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImage", "HandleUpdateColorAndOpacity");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImage.HandleUpdateEnabled
// (Final, Native, Public)

void UTLImage::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImage", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImage.HandleUpdateImageBrush
// (Final, Native, Public)

void UTLImage::HandleUpdateImageBrush()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImage", "HandleUpdateImageBrush");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImage.HandleUpdateVisible
// (Final, Native, Public)

void UTLImage::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImage", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImage.SetBrushByName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InSlateBrushName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InApplyVisible                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTLImage::SetBrushByName(class FName InSlateBrushName, bool InApplyVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImage", "SetBrushByName");

	Params::TLImage_SetBrushByName Parms{};

	Parms.InSlateBrushName = InSlateBrushName;
	Parms.InApplyVisible = InApplyVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLImage.SetBrushFromCustomMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImage::SetBrushFromCustomMaterial(class UObject* InObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImage", "SetBrushFromCustomMaterial");

	Params::TLImage_SetBrushFromCustomMaterial Parms{};

	Parms.InObject = InObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImage.SetBrushFromSoftObjectPath
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSoftObjectPath                  Path                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInAsyncLoad                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInAutoShowAfterBrushLoading                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMatchSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImage::SetBrushFromSoftObjectPath(const struct FSoftObjectPath& Path, bool bInAsyncLoad, bool bInAutoShowAfterBrushLoading, bool bMatchSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImage", "SetBrushFromSoftObjectPath");

	Params::TLImage_SetBrushFromSoftObjectPath Parms{};

	Parms.Path = std::move(Path);
	Parms.bInAsyncLoad = bInAsyncLoad;
	Parms.bInAutoShowAfterBrushLoading = bInAutoShowAfterBrushLoading;
	Parms.bMatchSize = bMatchSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImage.SetBrushFromSprite
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPaperSprite*                     Sprite                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMatchSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImage::SetBrushFromSprite(class UPaperSprite* Sprite, bool bMatchSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImage", "SetBrushFromSprite");

	Params::TLImage_SetBrushFromSprite Parms{};

	Parms.Sprite = Sprite;
	Parms.bMatchSize = bMatchSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImage.SetHslShift
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     InHslShift                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImage::SetHslShift(const struct FLinearColor& InHslShift)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImage", "SetHslShift");

	Params::TLImage_SetHslShift Parms{};

	Parms.InHslShift = std::move(InHslShift);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLImage.SetMaskTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         InMaskTexture                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLImage::SetMaskTexture(class UTexture* InMaskTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLImage", "SetMaskTexture");

	Params::TLImage_SetMaskTexture Parms{};

	Parms.InMaskTexture = InMaskTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLInputKeyCombiSelector.HandleUpdateEnabled
// (Final, Native, Public)

void UTLInputKeyCombiSelector::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeyCombiSelector", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLInputKeyCombiSelector.HandleUpdateVisible
// (Final, Native, Public)

void UTLInputKeyCombiSelector::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeyCombiSelector", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction TLUI.TLInputKeyCombiSelector.OnIsSelectingKeyChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UTLInputKeyCombiSelector::OnIsSelectingKeyChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeyCombiSelector", "OnIsSelectingKeyChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction TLUI.TLInputKeyCombiSelector.OnKeySelected__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// TArray<struct FInputChord>              SelectedKeys_0                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UTLInputKeyCombiSelector::OnKeySelected__DelegateSignature(const TArray<struct FInputChord>& SelectedKeys_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeyCombiSelector", "OnKeySelected__DelegateSignature");

	Params::TLInputKeyCombiSelector_OnKeySelected__DelegateSignature Parms{};

	Parms.SelectedKeys_0 = std::move(SelectedKeys_0);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction TLUI.TLInputKeyCombiSelector.OnKeySelecting__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// TArray<struct FInputChord>              SelectedKeys_0                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    Repeat                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLInputKeyCombiSelector::OnKeySelecting__DelegateSignature(const TArray<struct FInputChord>& SelectedKeys_0, bool Repeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeyCombiSelector", "OnKeySelecting__DelegateSignature");

	Params::TLInputKeyCombiSelector_OnKeySelecting__DelegateSignature Parms{};

	Parms.SelectedKeys_0 = std::move(SelectedKeys_0);
	Parms.Repeat = Repeat;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction TLUI.TLInputKeyCombiSelector.OnLongPressKeySelected__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// struct FKey                             InKey                                                  (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLInputKeyCombiSelector::OnLongPressKeySelected__DelegateSignature(const struct FKey& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeyCombiSelector", "OnLongPressKeySelected__DelegateSignature");

	Params::TLInputKeyCombiSelector_OnLongPressKeySelected__DelegateSignature Parms{};

	Parms.InKey = std::move(InKey);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TLUI.TLInputKeyCombiSelector.SetAllowGamepadKeys
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInAllowGamepadKeys                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLInputKeyCombiSelector::SetAllowGamepadKeys(bool bInAllowGamepadKeys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeyCombiSelector", "SetAllowGamepadKeys");

	Params::TLInputKeyCombiSelector_SetAllowGamepadKeys Parms{};

	Parms.bInAllowGamepadKeys = bInAllowGamepadKeys;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLInputKeyCombiSelector.SetAllowModifierKeys
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInAllowModifierKeys                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLInputKeyCombiSelector::SetAllowModifierKeys(bool bInAllowModifierKeys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeyCombiSelector", "SetAllowModifierKeys");

	Params::TLInputKeyCombiSelector_SetAllowModifierKeys Parms{};

	Parms.bInAllowModifierKeys = bInAllowModifierKeys;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLInputKeyCombiSelector.SetAllowOnlyGamepadKeys
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInAllowOnlyGamepadKeys                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLInputKeyCombiSelector::SetAllowOnlyGamepadKeys(const bool bInAllowOnlyGamepadKeys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeyCombiSelector", "SetAllowOnlyGamepadKeys");

	Params::TLInputKeyCombiSelector_SetAllowOnlyGamepadKeys Parms{};

	Parms.bInAllowOnlyGamepadKeys = bInAllowOnlyGamepadKeys;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLInputKeyCombiSelector.SetAllowOnlyGamepadModifierKeys
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInAllowOnlyGamepadModifierKey                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLInputKeyCombiSelector::SetAllowOnlyGamepadModifierKeys(bool bInAllowOnlyGamepadModifierKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeyCombiSelector", "SetAllowOnlyGamepadModifierKeys");

	Params::TLInputKeyCombiSelector_SetAllowOnlyGamepadModifierKeys Parms{};

	Parms.bInAllowOnlyGamepadModifierKey = bInAllowOnlyGamepadModifierKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLInputKeyCombiSelector.SetKeySelectionText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InKeySelectionText                                     (Parm, NativeAccessSpecifierPublic)

void UTLInputKeyCombiSelector::SetKeySelectionText(const class FText& InKeySelectionText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeyCombiSelector", "SetKeySelectionText");

	Params::TLInputKeyCombiSelector_SetKeySelectionText Parms{};

	Parms.InKeySelectionText = std::move(InKeySelectionText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLInputKeyCombiSelector.SetMaxKeyCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InMaxKeyCount                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLInputKeyCombiSelector::SetMaxKeyCount(const int32 InMaxKeyCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeyCombiSelector", "SetMaxKeyCount");

	Params::TLInputKeyCombiSelector_SetMaxKeyCount Parms{};

	Parms.InMaxKeyCount = InMaxKeyCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLInputKeyCombiSelector.SetNoKeySpecifiedText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InNoKeySpecifiedText                                   (Parm, NativeAccessSpecifierPublic)

void UTLInputKeyCombiSelector::SetNoKeySpecifiedText(const class FText& InNoKeySpecifiedText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeyCombiSelector", "SetNoKeySpecifiedText");

	Params::TLInputKeyCombiSelector_SetNoKeySpecifiedText Parms{};

	Parms.InNoKeySpecifiedText = std::move(InNoKeySpecifiedText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLInputKeyCombiSelector.SetSelectedKey
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FInputChord>              InSelectedKey                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UTLInputKeyCombiSelector::SetSelectedKey(const TArray<struct FInputChord>& InSelectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeyCombiSelector", "SetSelectedKey");

	Params::TLInputKeyCombiSelector_SetSelectedKey Parms{};

	Parms.InSelectedKey = std::move(InSelectedKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLInputKeyCombiSelector.GetIsSelectingKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTLInputKeyCombiSelector::GetIsSelectingKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeyCombiSelector", "GetIsSelectingKey");

	Params::TLInputKeyCombiSelector_GetIsSelectingKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLInputKeySelector.HandleUpdateEnabled
// (Final, Native, Public)

void UTLInputKeySelector::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeySelector", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLInputKeySelector.HandleUpdateVisible
// (Final, Native, Public)

void UTLInputKeySelector::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeySelector", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction TLUI.TLInputKeySelector.OnIsSelectingKeyChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UTLInputKeySelector::OnIsSelectingKeyChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeySelector", "OnIsSelectingKeyChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction TLUI.TLInputKeySelector.OnKeySelected__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// struct FInputChord                      SelectedKey_0                                          (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLInputKeySelector::OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeySelector", "OnKeySelected__DelegateSignature");

	Params::TLInputKeySelector_OnKeySelected__DelegateSignature Parms{};

	Parms.SelectedKey_0 = std::move(SelectedKey_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TLUI.TLInputKeySelector.SetAllowGamepadKeys
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInAllowGamepadKeys                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLInputKeySelector::SetAllowGamepadKeys(bool bInAllowGamepadKeys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeySelector", "SetAllowGamepadKeys");

	Params::TLInputKeySelector_SetAllowGamepadKeys Parms{};

	Parms.bInAllowGamepadKeys = bInAllowGamepadKeys;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLInputKeySelector.SetAllowModifierKeys
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInAllowModifierKeys                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLInputKeySelector::SetAllowModifierKeys(bool bInAllowModifierKeys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeySelector", "SetAllowModifierKeys");

	Params::TLInputKeySelector_SetAllowModifierKeys Parms{};

	Parms.bInAllowModifierKeys = bInAllowModifierKeys;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLInputKeySelector.SetKeySelectionText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InKeySelectionText                                     (Parm, NativeAccessSpecifierPublic)

void UTLInputKeySelector::SetKeySelectionText(const class FText& InKeySelectionText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeySelector", "SetKeySelectionText");

	Params::TLInputKeySelector_SetKeySelectionText Parms{};

	Parms.InKeySelectionText = std::move(InKeySelectionText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLInputKeySelector.SetNoKeySpecifiedText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InNoKeySpecifiedText                                   (Parm, NativeAccessSpecifierPublic)

void UTLInputKeySelector::SetNoKeySpecifiedText(const class FText& InNoKeySpecifiedText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeySelector", "SetNoKeySpecifiedText");

	Params::TLInputKeySelector_SetNoKeySpecifiedText Parms{};

	Parms.InNoKeySpecifiedText = std::move(InNoKeySpecifiedText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLInputKeySelector.SetSelectedKey
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInputChord                      InSelectedKey                                          (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLInputKeySelector::SetSelectedKey(const struct FInputChord& InSelectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeySelector", "SetSelectedKey");

	Params::TLInputKeySelector_SetSelectedKey Parms{};

	Parms.InSelectedKey = std::move(InSelectedKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLInputKeySelector.SetTextBlockVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESlateVisibility                        InVisibility                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLInputKeySelector::SetTextBlockVisibility(const ESlateVisibility InVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeySelector", "SetTextBlockVisibility");

	Params::TLInputKeySelector_SetTextBlockVisibility Parms{};

	Parms.InVisibility = InVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLInputKeySelector.GetIsSelectingKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTLInputKeySelector::GetIsSelectingKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInputKeySelector", "GetIsSelectingKey");

	Params::TLInputKeySelector_GetIsSelectingKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLInvalidationBox.HandleUpdateEnabled
// (Final, Native, Public)

void UTLInvalidationBox::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInvalidationBox", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLInvalidationBox.HandleUpdateVisible
// (Final, Native, Public)

void UTLInvalidationBox::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLInvalidationBox", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLLinearBoxSlot.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    InHorizontalAlignment                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLLinearBoxSlot::SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLLinearBoxSlot", "SetHorizontalAlignment");

	Params::TLLinearBoxSlot_SetHorizontalAlignment Parms{};

	Parms.InHorizontalAlignment = InHorizontalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLLinearBoxSlot.SetPadding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FMargin                          InPadding                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UTLLinearBoxSlot::SetPadding(const struct FMargin& InPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLLinearBoxSlot", "SetPadding");

	Params::TLLinearBoxSlot_SetPadding Parms{};

	Parms.InPadding = std::move(InPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLLinearBoxSlot.SetSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSlateChildSize                  InSize                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UTLLinearBoxSlot::SetSize(const struct FSlateChildSize& InSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLLinearBoxSlot", "SetSize");

	Params::TLLinearBoxSlot_SetSize Parms{};

	Parms.InSize = std::move(InSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLLinearBoxSlot.SetVerticalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVerticalAlignment                      InVerticalAlignment                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLLinearBoxSlot::SetVerticalAlignment(EVerticalAlignment InVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLLinearBoxSlot", "SetVerticalAlignment");

	Params::TLLinearBoxSlot_SetVerticalAlignment Parms{};

	Parms.InVerticalAlignment = InVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLMenuAnchor.HandleUpdateEnabled
// (Final, Native, Public)

void UTLMenuAnchor::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMenuAnchor", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLMenuAnchor.HandleUpdateVisible
// (Final, Native, Public)

void UTLMenuAnchor::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMenuAnchor", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLMultiLineEditableText.HandleUpdateEnabled
// (Final, Native, Public)

void UTLMultiLineEditableText::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMultiLineEditableText", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLMultiLineEditableText.HandleUpdateVisible
// (Final, Native, Public)

void UTLMultiLineEditableText::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMultiLineEditableText", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLMultiLineEditableTextBox.GetCurrentCursorLine
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTLMultiLineEditableTextBox::GetCurrentCursorLine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMultiLineEditableTextBox", "GetCurrentCursorLine");

	Params::TLMultiLineEditableTextBox_GetCurrentCursorLine Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLMultiLineEditableTextBox.GetCurrentLineCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTLMultiLineEditableTextBox::GetCurrentLineCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMultiLineEditableTextBox", "GetCurrentLineCount");

	Params::TLMultiLineEditableTextBox_GetCurrentLineCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLMultiLineEditableTextBox.HandleUpdateEnabled
// (Final, Native, Public)

void UTLMultiLineEditableTextBox::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMultiLineEditableTextBox", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLMultiLineEditableTextBox.HandleUpdateVisible
// (Final, Native, Public)

void UTLMultiLineEditableTextBox::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMultiLineEditableTextBox", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction TLUI.TLMultiLineEditableTextBox.OnEditableTextFocusLostEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// struct FFocusEvent                      InFocusEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UTLMultiLineEditableTextBox::OnEditableTextFocusLostEvent__DelegateSignature(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMultiLineEditableTextBox", "OnEditableTextFocusLostEvent__DelegateSignature");

	Params::TLMultiLineEditableTextBox_OnEditableTextFocusLostEvent__DelegateSignature Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction TLUI.TLMultiLineEditableTextBox.OnEditableTextFocusReceivedEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// struct FGeometry                        MyGeometry                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FFocusEvent                      InFocusEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UTLMultiLineEditableTextBox::OnEditableTextFocusReceivedEvent__DelegateSignature(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMultiLineEditableTextBox", "OnEditableTextFocusReceivedEvent__DelegateSignature");

	Params::TLMultiLineEditableTextBox_OnEditableTextFocusReceivedEvent__DelegateSignature Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InFocusEvent = std::move(InFocusEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction TLUI.TLMultiLineEditableTextBox.OnEditableTextMouseButtonDownEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// struct FGeometry                        MyGeometry                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FPointerEvent                    InMouseEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTLMultiLineEditableTextBox::OnEditableTextMouseButtonDownEvent__DelegateSignature(const struct FGeometry& MyGeometry, const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMultiLineEditableTextBox", "OnEditableTextMouseButtonDownEvent__DelegateSignature");

	Params::TLMultiLineEditableTextBox_OnEditableTextMouseButtonDownEvent__DelegateSignature Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InMouseEvent = std::move(InMouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction TLUI.TLMultiLineEditableTextBox.OnMultiLineEditableTextBoxChangedEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// class FText                             Text_0                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTLMultiLineEditableTextBox::OnMultiLineEditableTextBoxChangedEvent__DelegateSignature(const class FText& Text_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMultiLineEditableTextBox", "OnMultiLineEditableTextBoxChangedEvent__DelegateSignature");

	Params::TLMultiLineEditableTextBox_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature Parms{};

	Parms.Text_0 = std::move(Text_0);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction TLUI.TLMultiLineEditableTextBox.OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// class FText                             Text_0                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ETextCommit                             CommitMethod                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLMultiLineEditableTextBox::OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature(const class FText& Text_0, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMultiLineEditableTextBox", "OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature");

	Params::TLMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature Parms{};

	Parms.Text_0 = std::move(Text_0);
	Parms.CommitMethod = CommitMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TLUI.TLMultiLineEditableTextBox.SelectAllText
// (Final, Native, Public, BlueprintCallable)

void UTLMultiLineEditableTextBox::SelectAllText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMultiLineEditableTextBox", "SelectAllText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLMultiLineEditableTextBox.SetError
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InError                                                (Parm, NativeAccessSpecifierPublic)

void UTLMultiLineEditableTextBox::SetError(const class FText& InError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMultiLineEditableTextBox", "SetError");

	Params::TLMultiLineEditableTextBox_SetError Parms{};

	Parms.InError = std::move(InError);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLMultiLineEditableTextBox.SetHintText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InHintText                                             (Parm, NativeAccessSpecifierPublic)

void UTLMultiLineEditableTextBox::SetHintText(const class FText& InHintText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMultiLineEditableTextBox", "SetHintText");

	Params::TLMultiLineEditableTextBox_SetHintText Parms{};

	Parms.InHintText = std::move(InHintText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLMultiLineEditableTextBox.SetIsReadOnly
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bReadOnly                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLMultiLineEditableTextBox::SetIsReadOnly(bool bReadOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMultiLineEditableTextBox", "SetIsReadOnly");

	Params::TLMultiLineEditableTextBox_SetIsReadOnly Parms{};

	Parms.bReadOnly = bReadOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLMultiLineEditableTextBox.SetMaxChar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InMaxChar                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLMultiLineEditableTextBox::SetMaxChar(int32 InMaxChar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMultiLineEditableTextBox", "SetMaxChar");

	Params::TLMultiLineEditableTextBox_SetMaxChar Parms{};

	Parms.InMaxChar = InMaxChar;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLMultiLineEditableTextBox.SetText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (Parm, NativeAccessSpecifierPublic)

void UTLMultiLineEditableTextBox::SetText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMultiLineEditableTextBox", "SetText");

	Params::TLMultiLineEditableTextBox_SetText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLMultiLineEditableTextBox.SetTextStyle
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTextBlockStyleTL                InTextStyle                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTLMultiLineEditableTextBox::SetTextStyle(const struct FTextBlockStyleTL& InTextStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMultiLineEditableTextBox", "SetTextStyle");

	Params::TLMultiLineEditableTextBox_SetTextStyle Parms{};

	Parms.InTextStyle = std::move(InTextStyle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLMultiLineEditableTextBox.GetHintText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UTLMultiLineEditableTextBox::GetHintText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMultiLineEditableTextBox", "GetHintText");

	Params::TLMultiLineEditableTextBox_GetHintText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLMultiLineEditableTextBox.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UTLMultiLineEditableTextBox::GetText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLMultiLineEditableTextBox", "GetText");

	Params::TLMultiLineEditableTextBox_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLNamedSlot.HandleUpdateEnabled
// (Final, Native, Public)

void UTLNamedSlot::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLNamedSlot", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLNamedSlot.HandleUpdateVisible
// (Final, Native, Public)

void UTLNamedSlot::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLNamedSlot", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLNativeWidgetHost.HandleUpdateEnabled
// (Final, Native, Public)

void UTLNativeWidgetHost::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLNativeWidgetHost", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLNativeWidgetHost.HandleUpdateVisible
// (Final, Native, Public)

void UTLNativeWidgetHost::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLNativeWidgetHost", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLOverlay.HandleUpdateEnabled
// (Final, Native, Public)

void UTLOverlay::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLOverlay", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLOverlay.HandleUpdateVisible
// (Final, Native, Public)

void UTLOverlay::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLOverlay", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLProgressBar.AddSubProgressBar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTLProgressBar*                   InSubProgressBar                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLProgressBar::AddSubProgressBar(class UTLProgressBar* InSubProgressBar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "AddSubProgressBar");

	Params::TLProgressBar_AddSubProgressBar Parms{};

	Parms.InSubProgressBar = InSubProgressBar;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLProgressBar.GetFillImageDynamicMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UTLProgressBar::GetFillImageDynamicMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "GetFillImageDynamicMaterial");

	Params::TLProgressBar_GetFillImageDynamicMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLProgressBar.HandleUpdateEnabled
// (Final, Native, Public)

void UTLProgressBar::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLProgressBar.HandleUpdatePercent
// (Final, Native, Public)

void UTLProgressBar::HandleUpdatePercent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "HandleUpdatePercent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLProgressBar.HandleUpdateVisible
// (Final, Native, Public)

void UTLProgressBar::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLProgressBar.Play
// (Final, Native, Public, BlueprintCallable)

void UTLProgressBar::Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "Play");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLProgressBar.PlayAfterImageWithDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLProgressBar::PlayAfterImageWithDuration(float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "PlayAfterImageWithDuration");

	Params::TLProgressBar_PlayAfterImageWithDuration Parms{};

	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLProgressBar.PlayWithDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLProgressBar::PlayWithDuration(float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "PlayWithDuration");

	Params::TLProgressBar_PlayWithDuration Parms{};

	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLProgressBar.SetAfterImageBar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTLProgressBar*                   InAfterImageBar                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLProgressBar::SetAfterImageBar(class UTLProgressBar* InAfterImageBar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "SetAfterImageBar");

	Params::TLProgressBar_SetAfterImageBar Parms{};

	Parms.InAfterImageBar = InAfterImageBar;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLProgressBar.SetCurrentPercent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPercent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLProgressBar::SetCurrentPercent(float InPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "SetCurrentPercent");

	Params::TLProgressBar_SetCurrentPercent Parms{};

	Parms.InPercent = InPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLProgressBar.SetCurveGraph
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCurveFloat*                      InCurve                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLProgressBar::SetCurveGraph(class UCurveFloat* InCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "SetCurveGraph");

	Params::TLProgressBar_SetCurveGraph Parms{};

	Parms.InCurve = InCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLProgressBar.SetDecreaseDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InDurationSec                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLProgressBar::SetDecreaseDuration(float InDurationSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "SetDecreaseDuration");

	Params::TLProgressBar_SetDecreaseDuration Parms{};

	Parms.InDurationSec = InDurationSec;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLProgressBar.SetEdgeImage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          InEdgeImage                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLProgressBar::SetEdgeImage(class UWidget* InEdgeImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "SetEdgeImage");

	Params::TLProgressBar_SetEdgeImage Parms{};

	Parms.InEdgeImage = InEdgeImage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLProgressBar.SetFillImageBrush
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          ResourceObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLProgressBar::SetFillImageBrush(class UObject* ResourceObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "SetFillImageBrush");

	Params::TLProgressBar_SetFillImageBrush Parms{};

	Parms.ResourceObject = ResourceObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLProgressBar.SetHeadImage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTLImage*                         InHeadImage                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLProgressBar::SetHeadImage(class UTLImage* InHeadImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "SetHeadImage");

	Params::TLProgressBar_SetHeadImage Parms{};

	Parms.InHeadImage = InHeadImage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLProgressBar.SetIncreaseDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InDurationSec                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLProgressBar::SetIncreaseDuration(float InDurationSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "SetIncreaseDuration");

	Params::TLProgressBar_SetIncreaseDuration Parms{};

	Parms.InDurationSec = InDurationSec;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLProgressBar.SetPercentMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterial*                        InPercentMaterial                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLProgressBar::SetPercentMaterial(class UMaterial* InPercentMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "SetPercentMaterial");

	Params::TLProgressBar_SetPercentMaterial Parms{};

	Parms.InPercentMaterial = InPercentMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLProgressBar.SetSubPercent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPercent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLProgressBar::SetSubPercent(float InPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "SetSubPercent");

	Params::TLProgressBar_SetSubPercent Parms{};

	Parms.InPercent = InPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLProgressBar.SetTargetPercent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPercent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLProgressBar::SetTargetPercent(float InPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "SetTargetPercent");

	Params::TLProgressBar_SetTargetPercent Parms{};

	Parms.InPercent = InPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLProgressBar.UpdateEdgeImageBrush
// (Final, Native, Public, BlueprintCallable)

void UTLProgressBar::UpdateEdgeImageBrush()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "UpdateEdgeImageBrush");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLProgressBar.GetDurationSec
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTLProgressBar::GetDurationSec() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "GetDurationSec");

	Params::TLProgressBar_GetDurationSec Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLProgressBar.GetRemainSec
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTLProgressBar::GetRemainSec() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLProgressBar", "GetRemainSec");

	Params::TLProgressBar_GetRemainSec Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLRadarChart.HandleUpdateEnabled
// (Final, Native, Public)

void UTLRadarChart::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLRadarChart", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLRadarChart.HandleUpdateVisible
// (Final, Native, Public)

void UTLRadarChart::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLRadarChart", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLRadarChart.SetValueLayerOutLineColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   InIndex                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLRadarChart::SetValueLayerOutLineColor(const int32 InIndex, const struct FLinearColor& InColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLRadarChart", "SetValueLayerOutLineColor");

	Params::TLRadarChart_SetValueLayerOutLineColor Parms{};

	Parms.InIndex = InIndex;
	Parms.InColor = std::move(InColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLRadarChart.SetValueLayerOutLineThinckness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InIndex                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLRadarChart::SetValueLayerOutLineThinckness(const int32 InIndex, float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLRadarChart", "SetValueLayerOutLineThinckness");

	Params::TLRadarChart_SetValueLayerOutLineThinckness Parms{};

	Parms.InIndex = InIndex;
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLRadarChart.SetValueLayerShapeColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   InIndex                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLRadarChart::SetValueLayerShapeColor(const int32 InIndex, const struct FLinearColor& InColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLRadarChart", "SetValueLayerShapeColor");

	Params::TLRadarChart_SetValueLayerShapeColor Parms{};

	Parms.InIndex = InIndex;
	Parms.InColor = std::move(InColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLRadioButton.SetButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsChecked_0                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLRadioButton::SetButton(bool IsChecked_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLRadioButton", "SetButton");

	Params::TLRadioButton_SetButton Parms{};

	Parms.IsChecked_0 = IsChecked_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLRetainerBox.HandleUpdateEnabled
// (Final, Native, Public)

void UTLRetainerBox::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLRetainerBox", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLRetainerBox.HandleUpdateVisible
// (Final, Native, Public)

void UTLRetainerBox::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLRetainerBox", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLScaleBox.HandleUpdateEnabled
// (Final, Native, Public)

void UTLScaleBox::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLScaleBox", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLScaleBox.HandleUpdateVisible
// (Final, Native, Public)

void UTLScaleBox::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLScaleBox", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLScrollBox.HandleUpdateEnabled
// (Final, Native, Public)

void UTLScrollBox::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLScrollBox", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLScrollBox.HandleUpdateVisible
// (Final, Native, Public)

void UTLScrollBox::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLScrollBox", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLSizeBox.HandleUpdateEnabled
// (Final, Native, Public)

void UTLSizeBox::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSizeBox", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLSizeBox.HandleUpdateVisible
// (Final, Native, Public)

void UTLSizeBox::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSizeBox", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLSlider.HandleUpdateEnabled
// (Final, Native, Public)

void UTLSlider::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSlider", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLSlider.HandleUpdateVisible
// (Final, Native, Public)

void UTLSlider::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSlider", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLSlider.OnCaptureBegin
// (Native, Protected)

void UTLSlider::OnCaptureBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSlider", "OnCaptureBegin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction TLUI.TLSlider2D.GetVector2D__DelegateSignature
// (Public, Delegate, HasDefaults)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UTLSlider2D::GetVector2D__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSlider2D", "GetVector2D__DelegateSignature");

	Params::TLSlider2D_GetVector2D__DelegateSignature Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function TLUI.TLSlider2D.HandleUpdateEnabled
// (Final, Native, Public)

void UTLSlider2D::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSlider2D", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLSlider2D.HandleUpdateVisible
// (Final, Native, Public)

void UTLSlider2D::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSlider2D", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLSlider2D.OnCaptureBegin
// (Native, Protected)

void UTLSlider2D::OnCaptureBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSlider2D", "OnCaptureBegin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLSlider2D.SetIndentHandle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLSlider2D::SetIndentHandle(bool InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSlider2D", "SetIndentHandle");

	Params::TLSlider2D_SetIndentHandle Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLSlider2D.SetLocked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLSlider2D::SetLocked(bool InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSlider2D", "SetLocked");

	Params::TLSlider2D_SetLocked Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLSlider2D.SetMouseUsesStep
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InMouseUsesStep                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLSlider2D::SetMouseUsesStep(bool InMouseUsesStep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSlider2D", "SetMouseUsesStep");

	Params::TLSlider2D_SetMouseUsesStep Parms{};

	Parms.InMouseUsesStep = InMouseUsesStep;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLSlider2D.SetOnlyPositive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLSlider2D::SetOnlyPositive(bool InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSlider2D", "SetOnlyPositive");

	Params::TLSlider2D_SetOnlyPositive Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLSlider2D.SetRequiresControllerLock
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InRequiresControllerLock                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLSlider2D::SetRequiresControllerLock(bool InRequiresControllerLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSlider2D", "SetRequiresControllerLock");

	Params::TLSlider2D_SetRequiresControllerLock Parms{};

	Parms.InRequiresControllerLock = InRequiresControllerLock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLSlider2D.SetSliderBarColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLSlider2D::SetSliderBarColor(const struct FLinearColor& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSlider2D", "SetSliderBarColor");

	Params::TLSlider2D_SetSliderBarColor Parms{};

	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLSlider2D.SetSliderHandleColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLSlider2D::SetSliderHandleColor(const struct FLinearColor& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSlider2D", "SetSliderHandleColor");

	Params::TLSlider2D_SetSliderHandleColor Parms{};

	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLSlider2D.SetStepSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLSlider2D::SetStepSize(float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSlider2D", "SetStepSize");

	Params::TLSlider2D_SetStepSize Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLSlider2D.SetValue
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLSlider2D::SetValue(const struct FVector2D& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSlider2D", "SetValue");

	Params::TLSlider2D_SetValue Parms{};

	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLSlider2D.GetValue
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UTLSlider2D::GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSlider2D", "GetValue");

	Params::TLSlider2D_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLSpacer.HandleUpdateEnabled
// (Final, Native, Public)

void UTLSpacer::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSpacer", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLSpacer.HandleUpdateVisible
// (Final, Native, Public)

void UTLSpacer::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSpacer", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLSpinBox.HandleUpdateEnabled
// (Final, Native, Public)

void UTLSpinBox::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSpinBox", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLSpinBox.HandleUpdateVisible
// (Final, Native, Public)

void UTLSpinBox::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLSpinBox", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction TLUI.TLTabButton.GetPanelWidget__DelegateSignature
// (Public, Delegate)
// Parameters:
// class UPanelWidget*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPanelWidget* UTLTabButton::GetPanelWidget__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTabButton", "GetPanelWidget__DelegateSignature");

	Params::TLTabButton_GetPanelWidget__DelegateSignature Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// DelegateFunction TLUI.TLTabButton.GetTLTabContent__DelegateSignature
// (Public, Delegate)
// Parameters:
// class UTLTabContent*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTLTabContent* UTLTabButton::GetTLTabContent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTabButton", "GetTLTabContent__DelegateSignature");

	Params::TLTabButton_GetTLTabContent__DelegateSignature Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// DelegateFunction TLUI.TLTabButton.GetWidgetAnimation__DelegateSignature
// (Public, Delegate)
// Parameters:
// class UWidgetAnimation*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidgetAnimation* UTLTabButton::GetWidgetAnimation__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTabButton", "GetWidgetAnimation__DelegateSignature");

	Params::TLTabButton_GetWidgetAnimation__DelegateSignature Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// DelegateFunction TLUI.TLTabButton.OnSelected__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   InTabIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTabButton::OnSelected__DelegateSignature(int32 InTabIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTabButton", "OnSelected__DelegateSignature");

	Params::TLTabButton_OnSelected__DelegateSignature Parms{};

	Parms.InTabIndex = InTabIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction TLUI.TLTabButton.OnUnselected__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   InTabIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTabButton::OnUnselected__DelegateSignature(int32 InTabIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTabButton", "OnUnselected__DelegateSignature");

	Params::TLTabButton_OnUnselected__DelegateSignature Parms{};

	Parms.InTabIndex = InTabIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TLUI.TLTabButton.This_OnCheckBoxComponentStateChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    IsChecked_0                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTabButton::This_OnCheckBoxComponentStateChanged(bool IsChecked_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTabButton", "This_OnCheckBoxComponentStateChanged");

	Params::TLTabButton_This_OnCheckBoxComponentStateChanged Parms{};

	Parms.IsChecked_0 = IsChecked_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlockBase.SetAutoWrapText
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTextBlockBase::SetAutoWrapText(bool bInValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlockBase", "SetAutoWrapText");

	Params::TLTextBlockBase_SetAutoWrapText Parms{};

	Parms.bInValue = bInValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlockBase.SetColorAndOpacity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSlateColor                      InColorAndOpacity                                      (Parm, NativeAccessSpecifierPublic)

void UTLTextBlockBase::SetColorAndOpacity(const struct FSlateColor& InColorAndOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlockBase", "SetColorAndOpacity");

	Params::TLTextBlockBase_SetColorAndOpacity Parms{};

	Parms.InColorAndOpacity = std::move(InColorAndOpacity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlockBase.SetCustomDisabledColorAndOpacity
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     InCustomDisabledColorAndOpacity                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTextBlockBase::SetCustomDisabledColorAndOpacity(const struct FLinearColor& InCustomDisabledColorAndOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlockBase", "SetCustomDisabledColorAndOpacity");

	Params::TLTextBlockBase_SetCustomDisabledColorAndOpacity Parms{};

	Parms.InCustomDisabledColorAndOpacity = std::move(InCustomDisabledColorAndOpacity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlockBase.SetFont
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSlateFontInfo                   InFontInfo                                             (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTextBlockBase::SetFont(const struct FSlateFontInfo& InFontInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlockBase", "SetFont");

	Params::TLTextBlockBase_SetFont Parms{};

	Parms.InFontInfo = std::move(InFontInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlockBase.SetLineHeightPercentage
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InLineHeightPercentage                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTextBlockBase::SetLineHeightPercentage(float InLineHeightPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlockBase", "SetLineHeightPercentage");

	Params::TLTextBlockBase_SetLineHeightPercentage Parms{};

	Parms.InLineHeightPercentage = InLineHeightPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlockBase.SetMinDesiredWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMinDesiredWidth                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTextBlockBase::SetMinDesiredWidth(float InMinDesiredWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlockBase", "SetMinDesiredWidth");

	Params::TLTextBlockBase_SetMinDesiredWidth Parms{};

	Parms.InMinDesiredWidth = InMinDesiredWidth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlockBase.SetOpacity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InOpacity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTextBlockBase::SetOpacity(float InOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlockBase", "SetOpacity");

	Params::TLTextBlockBase_SetOpacity Parms{};

	Parms.InOpacity = InOpacity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlockBase.SetShadowColorAndOpacity
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     InShadowColorAndOpacity                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTextBlockBase::SetShadowColorAndOpacity(const struct FLinearColor& InShadowColorAndOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlockBase", "SetShadowColorAndOpacity");

	Params::TLTextBlockBase_SetShadowColorAndOpacity Parms{};

	Parms.InShadowColorAndOpacity = std::move(InShadowColorAndOpacity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlockBase.SetShadowOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InShadowOffset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTextBlockBase::SetShadowOffset(const struct FVector2D& InShadowOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlockBase", "SetShadowOffset");

	Params::TLTextBlockBase_SetShadowOffset Parms{};

	Parms.InShadowOffset = std::move(InShadowOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlockBase.SetText
// (Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (Parm, NativeAccessSpecifierPublic)

void UTLTextBlockBase::SetText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlockBase", "SetText");

	Params::TLTextBlockBase_SetText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlockBase.SetUseCustomDisabledColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInUseCustomDisabledColor                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTextBlockBase::SetUseCustomDisabledColor(bool bInUseCustomDisabledColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlockBase", "SetUseCustomDisabledColor");

	Params::TLTextBlockBase_SetUseCustomDisabledColor Parms{};

	Parms.bInUseCustomDisabledColor = bInUseCustomDisabledColor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlockBase.SetUseWrapScaling
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTextBlockBase::SetUseWrapScaling(bool bInValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlockBase", "SetUseWrapScaling");

	Params::TLTextBlockBase_SetUseWrapScaling Parms{};

	Parms.bInValue = bInValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlockBase.SetWrapLimitOverRule
// (Native, Public, BlueprintCallable)
// Parameters:
// ETLTextWrapLimitOverRule                InWrapLimitOverRule                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTextBlockBase::SetWrapLimitOverRule(ETLTextWrapLimitOverRule InWrapLimitOverRule)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlockBase", "SetWrapLimitOverRule");

	Params::TLTextBlockBase_SetWrapLimitOverRule Parms{};

	Parms.InWrapLimitOverRule = InWrapLimitOverRule;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlockBase.SetWrapTextAt
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InWrapText                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTextBlockBase::SetWrapTextAt(float InWrapText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlockBase", "SetWrapTextAt");

	Params::TLTextBlockBase_SetWrapTextAt Parms{};

	Parms.InWrapText = InWrapText;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlockBase.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UTLTextBlockBase::GetText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlockBase", "GetText");

	Params::TLTextBlockBase_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLTextBlock.HandleUpdateEnabled
// (Final, Native, Public)

void UTLTextBlock::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlock", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlock.HandleUpdateText
// (Final, Native, Public)

void UTLTextBlock::HandleUpdateText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlock", "HandleUpdateText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlock.HandleUpdateTextBlockStyleFromTable
// (Final, Native, Public)

void UTLTextBlock::HandleUpdateTextBlockStyleFromTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlock", "HandleUpdateTextBlockStyleFromTable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlock.HandleUpdateTextBlockStylePath
// (Final, Native, Public)

void UTLTextBlock::HandleUpdateTextBlockStylePath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlock", "HandleUpdateTextBlockStylePath");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlock.HandleUpdateTextColorAndOpacity
// (Final, Native, Public)

void UTLTextBlock::HandleUpdateTextColorAndOpacity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlock", "HandleUpdateTextColorAndOpacity");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlock.HandleUpdateTextColorWithColorTable
// (Final, Native, Public)

void UTLTextBlock::HandleUpdateTextColorWithColorTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlock", "HandleUpdateTextColorWithColorTable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlock.HandleUpdateTextTime
// (Final, Native, Public)

void UTLTextBlock::HandleUpdateTextTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlock", "HandleUpdateTextTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlock.HandleUpdateVisible
// (Final, Native, Public)

void UTLTextBlock::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlock", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlock.ResetTextColor
// (Final, Native, Public, BlueprintCallable)

void UTLTextBlock::ResetTextColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlock", "ResetTextColor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlock.SetTextBlockStyleFromTable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InTableKey                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTextBlock::SetTextBlockStyleFromTable(class FName InTableKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlock", "SetTextBlockStyleFromTable");

	Params::TLTextBlock_SetTextBlockStyleFromTable Parms{};

	Parms.InTableKey = InTableKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlock.SetTextBlockStylePath
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSoftObjectPath                  InTLTextBlockStylePath                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTextBlock::SetTextBlockStylePath(const struct FSoftObjectPath& InTLTextBlockStylePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlock", "SetTextBlockStylePath");

	Params::TLTextBlock_SetTextBlockStylePath Parms{};

	Parms.InTLTextBlockStylePath = std::move(InTLTextBlockStylePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTextBlock.SetTextColorWithColorTable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InTableColorKey                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTextBlock::SetTextColorWithColorTable(class FName InTableColorKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTextBlock", "SetTextColorWithColorTable");

	Params::TLTextBlock_SetTextColorWithColorTable Parms{};

	Parms.InTableColorKey = InTableColorKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLThrobber.HandleUpdateEnabled
// (Final, Native, Public)

void UTLThrobber::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLThrobber", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLThrobber.HandleUpdateVisible
// (Final, Native, Public)

void UTLThrobber::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLThrobber", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTiledImage.SetCullingScaleRange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FFloatRange                      InCullingScaleRange                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTiledImage::SetCullingScaleRange(const struct FFloatRange& InCullingScaleRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTiledImage", "SetCullingScaleRange");

	Params::TLTiledImage_SetCullingScaleRange Parms{};

	Parms.InCullingScaleRange = std::move(InCullingScaleRange);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTiledImage.SetNumColumns
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InNumColumns                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTiledImage::SetNumColumns(int32 InNumColumns)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTiledImage", "SetNumColumns");

	Params::TLTiledImage_SetNumColumns Parms{};

	Parms.InNumColumns = InNumColumns;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTiledMapImage.SetParameterValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InParamName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLTiledMapImage::SetParameterValue(class FName InParamName, float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTiledMapImage", "SetParameterValue");

	Params::TLTiledMapImage_SetParameterValue Parms{};

	Parms.InParamName = InParamName;
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTileView.HandleUpdateEnabled
// (Final, Native, Public)

void UTLTileView::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTileView", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTileView.HandleUpdateListChanged
// (Final, Native, Public)

void UTLTileView::HandleUpdateListChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTileView", "HandleUpdateListChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTileView.HandleUpdateVisible
// (Final, Native, Public)

void UTLTileView::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTileView", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTreeView.HandleUpdateEnabled
// (Final, Native, Public)

void UTLTreeView::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTreeView", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLTreeView.HandleUpdateVisible
// (Final, Native, Public)

void UTLTreeView::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLTreeView", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLUniformGridPanel.HandleUpdateEnabled
// (Final, Native, Public)

void UTLUniformGridPanel::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLUniformGridPanel", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLUniformGridPanel.HandleUpdateVisible
// (Final, Native, Public)

void UTLUniformGridPanel::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLUniformGridPanel", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLVerticalBox.HandleUpdateEnabled
// (Final, Native, Public)

void UTLVerticalBox::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLVerticalBox", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLVerticalBox.HandleUpdateVisible
// (Final, Native, Public)

void UTLVerticalBox::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLVerticalBox", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWebBrowser.HandleUpdateEnabled
// (Final, Native, Public)

void UTLWebBrowser::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWebBrowser", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWebBrowser.HandleUpdateVisible
// (Final, Native, Public)

void UTLWebBrowser::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWebBrowser", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWebImage.DownloadImage
// (Final, Native, Public, BlueprintCallable)

void UTLWebImage::DownloadImage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWebImage", "DownloadImage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWidgetBindingLibrary.AddEnabledBinding
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UWidget*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AnyValue                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETLBindingOperator                      Operator                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SourceValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTLWidgetBindingLibrary::AddEnabledBinding(class UWidget* Target, const int32& AnyValue, ETLBindingOperator Operator, int32 SourceValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TLWidgetBindingLibrary", "AddEnabledBinding");

	Params::TLWidgetBindingLibrary_AddEnabledBinding Parms{};

	Parms.Target = Target;
	Parms.AnyValue = AnyValue;
	Parms.Operator = Operator;
	Parms.SourceValue = SourceValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLWidgetBindingLibrary.AddImageBrushBinding
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTLImage*                         Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AnyValue                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMatchSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetVisibleWithValue                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTLWidgetBindingLibrary::AddImageBrushBinding(class UTLImage* Target, const int32& AnyValue, bool bMatchSize, bool bSetVisibleWithValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TLWidgetBindingLibrary", "AddImageBrushBinding");

	Params::TLWidgetBindingLibrary_AddImageBrushBinding Parms{};

	Parms.Target = Target;
	Parms.AnyValue = AnyValue;
	Parms.bMatchSize = bMatchSize;
	Parms.bSetVisibleWithValue = bSetVisibleWithValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLWidgetBindingLibrary.AddImageColorAndOpacityBinding
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTLImage*                         Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AnyValue                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTLWidgetBindingLibrary::AddImageColorAndOpacityBinding(class UTLImage* Target, const int32& AnyValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TLWidgetBindingLibrary", "AddImageColorAndOpacityBinding");

	Params::TLWidgetBindingLibrary_AddImageColorAndOpacityBinding Parms{};

	Parms.Target = Target;
	Parms.AnyValue = AnyValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLWidgetBindingLibrary.AddPercentBinding
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTLProgressBar*                   Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AnyValue                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTLWidgetBindingLibrary::AddPercentBinding(class UTLProgressBar* Target, const int32& AnyValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TLWidgetBindingLibrary", "AddPercentBinding");

	Params::TLWidgetBindingLibrary_AddPercentBinding Parms{};

	Parms.Target = Target;
	Parms.AnyValue = AnyValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLWidgetBindingLibrary.AddTextBinding
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTLTextBlock*                     Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AnyValue                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetVisibleWithValue                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTLWidgetBindingLibrary::AddTextBinding(class UTLTextBlock* Target, const int32& AnyValue, bool bSetVisibleWithValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TLWidgetBindingLibrary", "AddTextBinding");

	Params::TLWidgetBindingLibrary_AddTextBinding Parms{};

	Parms.Target = Target;
	Parms.AnyValue = AnyValue;
	Parms.bSetVisibleWithValue = bSetVisibleWithValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLWidgetBindingLibrary.AddTextBindingFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTLTextBlock*                     Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AnyValue                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERoundingMode                           RoundingMode                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FractionalDigits                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTLWidgetBindingLibrary::AddTextBindingFloat(class UTLTextBlock* Target, const int32& AnyValue, ERoundingMode RoundingMode, int32 FractionalDigits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TLWidgetBindingLibrary", "AddTextBindingFloat");

	Params::TLWidgetBindingLibrary_AddTextBindingFloat Parms{};

	Parms.Target = Target;
	Parms.AnyValue = AnyValue;
	Parms.RoundingMode = RoundingMode;
	Parms.FractionalDigits = FractionalDigits;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLWidgetBindingLibrary.AddTextBlockStyleFromTableBinding
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTLTextBlock*                     Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AnyValue                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyColor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTLWidgetBindingLibrary::AddTextBlockStyleFromTableBinding(class UTLTextBlock* Target, const int32& AnyValue, bool bOnlyColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TLWidgetBindingLibrary", "AddTextBlockStyleFromTableBinding");

	Params::TLWidgetBindingLibrary_AddTextBlockStyleFromTableBinding Parms{};

	Parms.Target = Target;
	Parms.AnyValue = AnyValue;
	Parms.bOnlyColor = bOnlyColor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLWidgetBindingLibrary.AddTextBlockStylePathBinding
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTLTextBlock*                     Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AnyValue                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyColor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTLWidgetBindingLibrary::AddTextBlockStylePathBinding(class UTLTextBlock* Target, const int32& AnyValue, bool bOnlyColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TLWidgetBindingLibrary", "AddTextBlockStylePathBinding");

	Params::TLWidgetBindingLibrary_AddTextBlockStylePathBinding Parms{};

	Parms.Target = Target;
	Parms.AnyValue = AnyValue;
	Parms.bOnlyColor = bOnlyColor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLWidgetBindingLibrary.AddTextColorAndOpacityBinding
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTLTextBlock*                     Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AnyValue                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTLWidgetBindingLibrary::AddTextColorAndOpacityBinding(class UTLTextBlock* Target, const int32& AnyValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TLWidgetBindingLibrary", "AddTextColorAndOpacityBinding");

	Params::TLWidgetBindingLibrary_AddTextColorAndOpacityBinding Parms{};

	Parms.Target = Target;
	Parms.AnyValue = AnyValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLWidgetBindingLibrary.AddTextColorWithColorTableBinding
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTLTextBlock*                     Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AnyValue                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTLWidgetBindingLibrary::AddTextColorWithColorTableBinding(class UTLTextBlock* Target, const int32& AnyValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TLWidgetBindingLibrary", "AddTextColorWithColorTableBinding");

	Params::TLWidgetBindingLibrary_AddTextColorWithColorTableBinding Parms{};

	Parms.Target = Target;
	Parms.AnyValue = AnyValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLWidgetBindingLibrary.AddVisibleBinding
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UWidget*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AnyValue                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETLBindingOperator                      Operator                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SourceValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTLWidgetBindingLibrary::AddVisibleBinding(class UWidget* Target, const int32& AnyValue, ETLBindingOperator Operator, int32 SourceValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TLWidgetBindingLibrary", "AddVisibleBinding");

	Params::TLWidgetBindingLibrary_AddVisibleBinding Parms{};

	Parms.Target = Target;
	Parms.AnyValue = AnyValue;
	Parms.Operator = Operator;
	Parms.SourceValue = SourceValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLWidgetBindingLibrary.SetOnUpdateDefault
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   AnyValue                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       Event                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTLWidgetBindingLibrary::SetOnUpdateDefault(const int32& AnyValue, const TDelegate<void()>& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TLWidgetBindingLibrary", "SetOnUpdateDefault");

	Params::TLWidgetBindingLibrary_SetOnUpdateDefault Parms{};

	Parms.AnyValue = AnyValue;
	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLWidgetFocusableInterface.ClearTLFocus
// (Native, Public, BlueprintCallable)

void ITLWidgetFocusableInterface::ClearTLFocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetFocusableInterface", "ClearTLFocus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWidgetFocusableInterface.SetTLFocus
// (Native, Public, BlueprintCallable)

void ITLWidgetFocusableInterface::SetTLFocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetFocusableInterface", "SetTLFocus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWidgetFocusableInterface.SetTLFocusableEnable
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInEnable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITLWidgetFocusableInterface::SetTLFocusableEnable(bool bInEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetFocusableInterface", "SetTLFocusableEnable");

	Params::TLWidgetFocusableInterface_SetTLFocusableEnable Parms{};

	Parms.bInEnable = bInEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWidgetFocusableInterface.SetTLSaveLastFocusedChild
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInEnable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITLWidgetFocusableInterface::SetTLSaveLastFocusedChild(bool bInEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetFocusableInterface", "SetTLSaveLastFocusedChild");

	Params::TLWidgetFocusableInterface_SetTLSaveLastFocusedChild Parms{};

	Parms.bInEnable = bInEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWidgetFocusableInterface.SetTLWidgetToFocusBP
// (Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class ITLWidgetFocusableInterface>WidgetPtr                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

void ITLWidgetFocusableInterface::SetTLWidgetToFocusBP(TScriptInterface<class ITLWidgetFocusableInterface> WidgetPtr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetFocusableInterface", "SetTLWidgetToFocusBP");

	Params::TLWidgetFocusableInterface_SetTLWidgetToFocusBP Parms{};

	Parms.WidgetPtr = WidgetPtr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWidgetFocusableInterface.IsTLFocus
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ITLWidgetFocusableInterface::IsTLFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetFocusableInterface", "IsTLFocus");

	Params::TLWidgetFocusableInterface_IsTLFocus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLWidgetFocusableInterface.IsTLFocusable
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ITLWidgetFocusableInterface::IsTLFocusable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetFocusableInterface", "IsTLFocusable");

	Params::TLWidgetFocusableInterface_IsTLFocusable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLWidgetFocusableInterface.IsTLFocusableEnable
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ITLWidgetFocusableInterface::IsTLFocusableEnable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetFocusableInterface", "IsTLFocusableEnable");

	Params::TLWidgetFocusableInterface_IsTLFocusableEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLWidgetFocusableInterface.UseTLFocusable
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ITLWidgetFocusableInterface::UseTLFocusable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetFocusableInterface", "UseTLFocusable");

	Params::TLWidgetFocusableInterface_UseTLFocusable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLWidgetSwitcher.HandleUpdateEnabled
// (Final, Native, Public)

void UTLWidgetSwitcher::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetSwitcher", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWidgetSwitcher.HandleUpdateVisible
// (Final, Native, Public)

void UTLWidgetSwitcher::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetSwitcher", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWidgetTooltipInterface.GetActionGuideAttachPanel
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTLSizeBox*                       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTLSizeBox* ITLWidgetTooltipInterface::GetActionGuideAttachPanel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetTooltipInterface", "GetActionGuideAttachPanel");

	Params::TLWidgetTooltipInterface_GetActionGuideAttachPanel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLWidgetViewInterface.GetDataContext
// (Native, Public, BlueprintCallable)
// Parameters:
// class UTLViewModelBase*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTLViewModelBase* ITLWidgetViewInterface::GetDataContext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetViewInterface", "GetDataContext");

	Params::TLWidgetViewInterface_GetDataContext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLWidgetViewInterface.SetDataContext
// (Native, Public, BlueprintCallable)
// Parameters:
// class UTLViewModelBase*                 InDataContext                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITLWidgetViewInterface::SetDataContext(class UTLViewModelBase* InDataContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetViewInterface", "SetDataContext");

	Params::TLWidgetViewInterface_SetDataContext Parms{};

	Parms.InDataContext = InDataContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWidgetVisibilityInterface.DisabledHitTestWithAllChildren
// (Native, Public, BlueprintCallable)

void ITLWidgetVisibilityInterface::DisabledHitTestWithAllChildren()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetVisibilityInterface", "DisabledHitTestWithAllChildren");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWidgetVisibilityInterface.Hide
// (Native, Public, BlueprintCallable)

void ITLWidgetVisibilityInterface::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetVisibilityInterface", "Hide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWidgetVisibilityInterface.IsShow
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ITLWidgetVisibilityInterface::IsShow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetVisibilityInterface", "IsShow");

	Params::TLWidgetVisibilityInterface_IsShow Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TLUI.TLWidgetVisibilityInterface.SetApplyDisabledHitTestToChildren
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInApplyDisabledHitTest                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITLWidgetVisibilityInterface::SetApplyDisabledHitTestToChildren(bool bInApplyDisabledHitTest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetVisibilityInterface", "SetApplyDisabledHitTestToChildren");

	Params::TLWidgetVisibilityInterface_SetApplyDisabledHitTestToChildren Parms{};

	Parms.bInApplyDisabledHitTest = bInApplyDisabledHitTest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWidgetVisibilityInterface.SetCollapsedWhenHide
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInCollapsedWhenHide                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITLWidgetVisibilityInterface::SetCollapsedWhenHide(bool bInCollapsedWhenHide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetVisibilityInterface", "SetCollapsedWhenHide");

	Params::TLWidgetVisibilityInterface_SetCollapsedWhenHide Parms{};

	Parms.bInCollapsedWhenHide = bInCollapsedWhenHide;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWidgetVisibilityInterface.SetEnableHitTest
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITLWidgetVisibilityInterface::SetEnableHitTest(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetVisibilityInterface", "SetEnableHitTest");

	Params::TLWidgetVisibilityInterface_SetEnableHitTest Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWidgetVisibilityInterface.SetOpacity
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InOpacity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITLWidgetVisibilityInterface::SetOpacity(float InOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetVisibilityInterface", "SetOpacity");

	Params::TLWidgetVisibilityInterface_SetOpacity Parms{};

	Parms.InOpacity = InOpacity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWidgetVisibilityInterface.SetVisible
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Show_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITLWidgetVisibilityInterface::SetVisible(bool Show_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetVisibilityInterface", "SetVisible");

	Params::TLWidgetVisibilityInterface_SetVisible Parms{};

	Parms.Show_0 = Show_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWidgetVisibilityInterface.Show
// (Native, Public, BlueprintCallable)

void ITLWidgetVisibilityInterface::Show()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetVisibilityInterface", "Show");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWidgetVisibilityInterface.ShowWithValue
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITLWidgetVisibilityInterface::ShowWithValue(bool InVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetVisibilityInterface", "ShowWithValue");

	Params::TLWidgetVisibilityInterface_ShowWithValue Parms{};

	Parms.InVisible = InVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWidgetVisibilityInterface.Toggle
// (Native, Public, BlueprintCallable)

void ITLWidgetVisibilityInterface::Toggle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWidgetVisibilityInterface", "Toggle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWindowTitleBarArea.HandleUpdateEnabled
// (Final, Native, Public)

void UTLWindowTitleBarArea::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWindowTitleBarArea", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWindowTitleBarArea.HandleUpdateVisible
// (Final, Native, Public)

void UTLWindowTitleBarArea::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWindowTitleBarArea", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWrapBox.HandleUpdateEnabled
// (Final, Native, Public)

void UTLWrapBox::HandleUpdateEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWrapBox", "HandleUpdateEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWrapBox.HandleUpdateVisible
// (Final, Native, Public)

void UTLWrapBox::HandleUpdateVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWrapBox", "HandleUpdateVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TLUI.TLWrapBox.SetWrapSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InWrapSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTLWrapBox::SetWrapSize(float InWrapSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TLWrapBox", "SetWrapSize");

	Params::TLWrapBox_SetWrapSize Parms{};

	Parms.InWrapSize = InWrapSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

