#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CrossHair

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "TLClient_structs.hpp"
#include "TLClient_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_CrossHair.BP_CrossHair_C
// 0x0060 (0x1500 - 0x14A0)
class UBP_CrossHair_C final : public UTLUserWidgetCrosshair
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x14A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       CustomTargetAnim;                                  // 0x14A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       FriendlyTargetAnim;                                // 0x14B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AttackTargetAnim;                                  // 0x14B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBP_PC_EventEffect_C*                   BP_PC_EventEffect;                                 // 0x14C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               CrossHair;                                         // 0x14C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               CrossHair_Custom;                                  // 0x14D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               CrossHair_Hover;                                   // 0x14D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLCanvasPanel*                         CrossHair_IMG_Panel;                               // 0x14E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLCanvasPanel*                         CrossHair_Snap_Panel;                              // 0x14E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               Dot;                                               // 0x14F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_CrossHair(int32 EntryPoint);
	void OnChangeCrosshairCenterCustom(bool bCustomed);
	void OnChangeCrosshairType(ETLCrosshairType InCrosshairType);
	void OnMinimizeCrosshair(bool bInMinimize);
	void Construct();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CrossHair_C">();
	}
	static class UBP_CrossHair_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CrossHair_C>();
	}
};
static_assert(alignof(UBP_CrossHair_C) == 0x000010, "Wrong alignment on UBP_CrossHair_C");
static_assert(sizeof(UBP_CrossHair_C) == 0x001500, "Wrong size on UBP_CrossHair_C");
static_assert(offsetof(UBP_CrossHair_C, UberGraphFrame) == 0x0014A0, "Member 'UBP_CrossHair_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_CrossHair_C, CustomTargetAnim) == 0x0014A8, "Member 'UBP_CrossHair_C::CustomTargetAnim' has a wrong offset!");
static_assert(offsetof(UBP_CrossHair_C, FriendlyTargetAnim) == 0x0014B0, "Member 'UBP_CrossHair_C::FriendlyTargetAnim' has a wrong offset!");
static_assert(offsetof(UBP_CrossHair_C, AttackTargetAnim) == 0x0014B8, "Member 'UBP_CrossHair_C::AttackTargetAnim' has a wrong offset!");
static_assert(offsetof(UBP_CrossHair_C, BP_PC_EventEffect) == 0x0014C0, "Member 'UBP_CrossHair_C::BP_PC_EventEffect' has a wrong offset!");
static_assert(offsetof(UBP_CrossHair_C, CrossHair) == 0x0014C8, "Member 'UBP_CrossHair_C::CrossHair' has a wrong offset!");
static_assert(offsetof(UBP_CrossHair_C, CrossHair_Custom) == 0x0014D0, "Member 'UBP_CrossHair_C::CrossHair_Custom' has a wrong offset!");
static_assert(offsetof(UBP_CrossHair_C, CrossHair_Hover) == 0x0014D8, "Member 'UBP_CrossHair_C::CrossHair_Hover' has a wrong offset!");
static_assert(offsetof(UBP_CrossHair_C, CrossHair_IMG_Panel) == 0x0014E0, "Member 'UBP_CrossHair_C::CrossHair_IMG_Panel' has a wrong offset!");
static_assert(offsetof(UBP_CrossHair_C, CrossHair_Snap_Panel) == 0x0014E8, "Member 'UBP_CrossHair_C::CrossHair_Snap_Panel' has a wrong offset!");
static_assert(offsetof(UBP_CrossHair_C, Dot) == 0x0014F0, "Member 'UBP_CrossHair_C::Dot' has a wrong offset!");

}

