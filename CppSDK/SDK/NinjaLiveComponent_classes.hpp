#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NinjaLiveComponent

#include "Basic.hpp"

#include "UserInput_Enum_structs.hpp"
#include "SimPrecision_Enum_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "RenderTargetList_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SingleObjectType_Enum_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass NinjaLiveComponent.NinjaLiveComponent_C
// 0x0980 (0x0A30 - 0x00B0)
class UNinjaLiveComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          ComponentActivatedByPawnProximity;                 // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DisableComponent;                                  // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          BeginPlaySupressed;                                // 0x00BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InitDone;                                          // 0x00BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MaterialInstacesDone;                              // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AutoConnectToMemoryPoolMinusIFMinusFound;          // 0x00BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          MemPoolManagerDetected;                            // 0x00BE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PoolManagerOverridesLocalSettings;                 // 0x00BF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         ResolutionX;                                       // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ResolutionY;                                       // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 PreferredTraceChannelName;                         // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	ETraceTypeQuery                               TraceChannel;                                      // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             CollisionChannel;                                  // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TraceChannelsSet;                                  // 0x00DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ESimPrecision_Enum                            SimPrecision;                                      // 0x00DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsePressureSolver1__DefaultIs2_;                   // 0x00DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PressureSolver1_MaxIterations;                     // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PressureSolver2_MaxIterations;                     // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PressureSolver2_KernelReduction;                   // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxSamplingFPS;                                    // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinSamplingFPS;                                    // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HalfResPressureAndDivergenceBuffers;               // 0x00F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShowDebugMessagesMinusTraceChannels;               // 0x00F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShowDebugMessagesMinusMemoryManagement;            // 0x00F6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShowDebugMessagesMinusCollisionAndTracing;         // 0x00F7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShowDebugMessagesMinusLODInitial;                  // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShowDebugMessagesMinusLODRuntime;                  // 0x00F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShowDebugMessagesMinusInterfaceControl;            // 0x00FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShowDebugMessagesMinusRenderTargetExport;          // 0x00FB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          VisualizeCustomTraceSource;                        // 0x00FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SaveDebugMessagesToDefaultLog;                     // 0x00FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FE[0x2];                                       // 0x00FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugMessagesLifetime;                             // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   TraceMeshComponent;                                // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SamplingFPS;                                       // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TickRateCustom;                                    // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LOD1MinusReduceSimQuality;                         // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LOD2MinusReduceSamplingFPS;                        // 0x0119(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LODMinusFarBound;                                  // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LODMinusNearBound;                                 // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LODMinusSteps;                                     // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LODMinusStepRange;                                 // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 LODMinusStepsArray;                                // 0x0130(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         SimPrecisionIndex;                                 // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MemConsumption;                                    // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MapLengthTmp;                                      // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      InactiveGrayMaterial;                              // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             ComponentRePlayEvent;                              // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             ComponentBroadcastMemConsumption;                  // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          PawnInsideActivationBounds;                        // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             LoadedDataTable;                                   // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 LoadedDataTablePath;                               // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<class FString, float>                    PresetMap;                                         // 0x0198(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 ActualPreset;                                      // 0x01E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UDataTable*                             DefaultPreset;                                     // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           PresetSearchPaths;                                 // 0x0200(0x0010)(Edit, BlueprintVisible)
	class FName                                   PresetNameFilterCriteria;                          // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OutputMaterialInvisible;                           // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutputMaterialSelected;                            // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             OutputMaterials;                                   // 0x0220(0x0010)(Edit, BlueprintVisible)
	bool                                          ForceAutoLoadPreset;                               // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         RenderTargetsList;                                 // 0x0238(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FString, class UTextureRenderTarget2D*> RenderTargetsMap;                                  // 0x0248(0x0050)(Edit, BlueprintVisible)
	class UMaterialInstanceDynamic*               MI_Advection;                                      // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_Divergence;                                     // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_PressureCycle1;                                 // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_PressureCycle2;                                 // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VeloStrength;                                      // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VeloOffsetX;                                       // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VeloOffsetY;                                       // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VeloRotate;                                        // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VeloAmpNoise;                                      // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VeloDirNoise;                                      // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             InputMaterials;                                    // 0x02D8(0x0010)(Edit, BlueprintVisible)
	int32                                         InputMaterialSelected;                             // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RGBMinusInputMaterial;                             // 0x02EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SimAreaClamp;                                      // 0x02ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShowMouseCursor;                                   // 0x02EE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2EF[0x1];                                      // 0x02EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Divergence;                                        // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputFeedback;                                     // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlowFeedback;                                      // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VeloFromSimAreaMotion;                             // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffsetFromSimAreaMotion;                           // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VeloFromBrushMotion;                               // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrushSize;                                         // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         BrushStrength;                                     // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrushStrengthTemp1;                                // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EraserMode;                                        // 0x0314(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_315[0x3];                                      // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BrushHardness;                                     // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParticleTemplate;                                  // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 DensityTemplate;                                   // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 VelocityTemplate;                                  // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 MetaData;                                          // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         BrushPuncture;                                     // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MI_CollisionPainterDot;                            // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_CollisionPainterLine;                           // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_CompositeAndGradient;                           // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_Output;                                         // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             VelocityInput;                                     // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             DensityInput;                                      // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlipRenderTargetsForMobile;                        // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SelfServiceMinusIFMinusPoolEmpty;                  // 0x0399(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39A[0x6];                                      // 0x039A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          ActivationVolume;                                  // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutonomousMode;                                    // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AbsPathForVelocityTemplate;                        // 0x03A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AbsPathForDensityTemplate;                         // 0x03AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3AB[0x5];                                      // 0x03AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NullString;                                        // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<int32, class UPrimitiveComponent*>       SkeletalMeshMinusTempArrayMinusPairs;              // 0x03C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UPrimitiveComponent*>            OverlappingComponents;                             // 0x0410(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class USkeletalMeshComponent*>         ContinuousInteractionSkeletalComponent;            // 0x0420(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<bool>                                  ListOfAvailableTempArrays;                         // 0x0430(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UPrimitiveComponent*                    OverlappingSkeletalMesh;                           // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   OverlappingBone;                                   // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Position1_3D;                                      // 0x0450(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastPosition1_3D;                                  // 0x045C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceMeshSizeCoeff;                                // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverlappingMeshSizeCoeff;                          // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OverlappingComponent;                              // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TouchLookupIndex;                                  // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47C[0x4];                                      // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   LastPosition3_2D;                                  // 0x0480(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLinearColor                           LastPosition2_2D;                                  // 0x0490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MousePass;                                         // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A1[0x3];                                      // 0x04A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Position2_2D;                                      // 0x04A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B4[0x4];                                      // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   Position3_2D;                                      // 0x04B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         PosDataType;                                       // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowVelocityDebugCone;                             // 0x04CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreInterfaceCommands;                           // 0x04CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DisableAndNotTickBlock;                            // 0x04CE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CF[0x1];                                      // 0x04CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputFeedbackInterface;                            // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrushStrengthTemp2;                                // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TickBlocker;                                       // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D9[0x3];                                      // 0x04D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FluidSolver1Iterations;                            // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         NinjaLIVETraceExclude;                             // 0x04E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         DeltaSeconds;                                      // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseUnrealNativeEventTick;                          // 0x04F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SingleInput;                                       // 0x04F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Touch;                                             // 0x04F6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F7[0x1];                                      // 0x04F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LODMinusCheckFrequency;                            // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PauseSimWhenNotVisible;                            // 0x04FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4FD[0x3];                                      // 0x04FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaitBeforePause;                                   // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MousePressed;                                      // 0x0504(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ContinuousInteractionWithOwnerActor;               // 0x0505(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_506[0x2];                                      // 0x0506(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Position1_2D;                                      // 0x0508(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeSinceLastClick;                                // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Position1_3D_Static;                               // 0x051C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51D[0x3];                                      // 0x051D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeSinceLastCollision;                            // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeCounter;                                       // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Overlap1;                                          // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_529[0x7];                                      // 0x0529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             ComponentShoutdownEvent;                           // 0x0530(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<EObjectTypeQuery>                      ContinuousInteractionInclusiveObjType;             // 0x0540(0x0010)(Edit, BlueprintVisible)
	TArray<class FName>                           ContinuousInteractionComponentNamesExact;          // 0x0550(0x0010)(Edit, BlueprintVisible)
	TArray<class FName>                           ContinuousInteractionBoneNamesExact;               // 0x0560(0x0010)(Edit, BlueprintVisible)
	bool                                          SingleTargetMode;                                  // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESingleObjectType_Enum                        SingleTargetType;                                  // 0x0571(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SingleTargetMoveSetSimSpeed;                       // 0x0572(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_573[0x1];                                      // 0x0573(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedInfluenceFactor;                              // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CameraFacingTraceMesh;                             // 0x0578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OverlapBasedInteraction;                           // 0x0579(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EUserInput_Enum                               UserInputBasedInteraction;                         // 0x057A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BrushScaledInverselyByTraceMeshSize;               // 0x057B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          BrushScaledByInteractingObjSize;                   // 0x057C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_57D[0x3];                                      // 0x057D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GlobalBrushScale;                                  // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UserInputBrushScale;                               // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PrimitiveObjBrushScale;                            // 0x0588(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkeletalMeshBrushScale;                            // 0x058C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CameraFacing_LockYMinusAxis;                       // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseLegacyCameraFacing;                             // 0x0591(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_592[0x2];                                      // 0x0592(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TraceMeshTranslucentSortPrio;                      // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TraceMeshQueryCounter;                             // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LimitUnrealNativeEventTick;                        // 0x059C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GlobalVeloTempCondition;                           // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A1[0x3];                                      // 0x05A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TracePositionTemp;                                 // 0x05A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastTracePositionTemp;                             // 0x05B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SimEdgeBouncyness;                                 // 0x05BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeDensityAtSimEdge;                              // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EdgeMaskWidth;                                     // 0x05C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VeloDirNoiseSize;                                  // 0x05C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VeloDirNoiseSpeed;                                 // 0x05CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseInputMaterials;                                 // 0x05D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D1[0x3];                                      // 0x05D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DensityTxtScale;                                   // 0x05D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DensityTxtOffsetX;                                 // 0x05D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DensityTxtOffsetY;                                 // 0x05DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrushNoise;                                        // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrushDensityNoiseScale;                            // 0x05E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrushDensityNoiseFreq;                             // 0x05E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrushVelocityNoiseScale;                           // 0x05EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrushVelocityNoiseFreq;                            // 0x05F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TraceMeshInitialRotation;                          // 0x05F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnableRayMarching;                                 // 0x0600(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_601[0x7];                                      // 0x0601(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LightDirectionProvider;                            // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LightDirectionSourceIsRotation_NOT_Pos;            // 0x0610(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DistanceBasedLightAttenuation;                     // 0x0611(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_612[0x2];                                      // 0x0612(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttenuationPower;                                  // 0x0614(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PointLightMovementMultiplier;                      // 0x0618(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TwoSidedShading;                                   // 0x061C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61D[0x3];                                      // 0x061D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TwoSideBlendPow;                                   // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Facing;                                            // 0x0624(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OffsetLightVector;                                 // 0x0628(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceManualSunPosition;                            // 0x0634(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_635[0x3];                                      // 0x0635(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunLatitude;                                       // 0x0638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunLongitude;                                      // 0x063C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunHeight;                                         // 0x0640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowLightDirectionVector__Yellow_;                 // 0x0644(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShowNiagaraSysUpvector__Red_;                      // 0x0645(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShowFacingPlane;                                   // 0x0646(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PrintFacing;                                       // 0x0647(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         VeloInputTile;                                     // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VeloInputOffsetSpeed;                              // 0x064C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DensityTxtMult;                                    // 0x0650(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DensityInputNoiseAmp;                              // 0x0654(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DensityInputNoiseOffset;                           // 0x0658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DensityInputNoiseTile;                             // 0x065C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DrawInternalRenderTargetToExternal;                // 0x0660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_661[0x7];                                      // 0x0661(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERenderTargetList>                     InternalRenderTargetsToExport;                     // 0x0668(0x0010)(Edit, BlueprintVisible)
	TArray<class UTextureRenderTarget2D*>         ExternalRenderTargets;                             // 0x0678(0x0010)(Edit, BlueprintVisible)
	class UTexture*                               CollisionMask;                                     // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CollisionMaskIsNonDefault;                         // 0x0690(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_691[0x7];                                      // 0x0691(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASceneCapture2D*                        InputSceneCaptureCamera;                           // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMediaPlayer*                           InputMediaPlayer;                                  // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMediaTexture*                          MediaTexture;                                      // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFileMediaSource*                       InputMediaSource;                                  // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMediaLoopLength;                              // 0x06B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SimplePainterMode;                                 // 0x06BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RandomizeNoiseOffsets;                             // 0x06BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BE[0x2];                                      // 0x06BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverlapCounter;                                    // 0x06C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomizeDensityTextureOffset;                     // 0x06C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C5[0x3];                                      // 0x06C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             OverwritePresetDensityInput;                       // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             OverwritePresetVelocityInput;                      // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrushRnd;                                          // 0x06D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SimSpeedAdjustmentLatency;                         // 0x06DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedTemp;                                         // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StopUsingPainterCanvasWhenIdle;                    // 0x06E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E5[0x3];                                      // 0x06E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Experimental_PSolver2KernelIndexOffset;            // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Experimental_PressureFeedback;                     // 0x06EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TraceMeshIsAlsoInteractionVolume;                  // 0x06F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F1[0x7];                                      // 0x06F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TempArray0;                                        // 0x06F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray1;                                        // 0x0708(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray2;                                        // 0x0718(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray3;                                        // 0x0728(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray4;                                        // 0x0738(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray5;                                        // 0x0748(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray6;                                        // 0x0758(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray7;                                        // 0x0768(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray8;                                        // 0x0778(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray9;                                        // 0x0788(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray10;                                       // 0x0798(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray11;                                       // 0x07A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray12;                                       // 0x07B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray13;                                       // 0x07C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray14;                                       // 0x07D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray15;                                       // 0x07E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray16;                                       // 0x07F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray17;                                       // 0x0808(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray18;                                       // 0x0818(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray19;                                       // 0x0828(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray20;                                       // 0x0838(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         PowerFunctionBugWorkaroundUEversions;              // 0x0848(0x0010)(Edit, BlueprintVisible)
	bool                                          UseCustomTraceSource;                              // 0x0858(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          TLUsePerpendicularTraceSourcePoint;                // 0x0859(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85A[0x2];                                      // 0x085A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CustomTraceSourcePosition;                         // 0x085C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LegacySimAreaMoveEffectsSimDensity;                // 0x0868(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_86C[0x4];                                      // 0x086C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TempArray21;                                       // 0x0870(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray22;                                       // 0x0880(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray23;                                       // 0x0890(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray24;                                       // 0x08A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray25;                                       // 0x08B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray26;                                       // 0x08C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray27;                                       // 0x08D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray28;                                       // 0x08E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray29;                                       // 0x08F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray30;                                       // 0x0900(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray31;                                       // 0x0910(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray32;                                       // 0x0920(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray33;                                       // 0x0930(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray34;                                       // 0x0940(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray35;                                       // 0x0950(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray36;                                       // 0x0960(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray37;                                       // 0x0970(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray38;                                       // 0x0980(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray39;                                       // 0x0990(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         DampenBrushBelowThisVelocity;                      // 0x09A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DampenBrushFactor;                                 // 0x09A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrushVelocityPow;                                  // 0x09A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SimAreaMotionEffectsBrushPuncture;                 // 0x09AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LegacyBrushVeloForMultiTarget;                     // 0x09B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LegacyBrushVeloForSingleTarget;                    // 0x09B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9B2[0x2];                                      // 0x09B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LODLevel;                                          // 0x09B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowAbsoluteBlackDensity;                         // 0x09B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9B9[0x3];                                      // 0x09B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TraceMeshPos;                                      // 0x09BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceMeshLastPos;                                  // 0x09C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PressureEdgeMasking;                               // 0x09D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             CoreSimMaterials;                                  // 0x09D8(0x0010)(Edit, BlueprintVisible)
	struct FVector                                TraceMeshDeltaPos;                                 // 0x09E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NullVector;                                        // 0x09F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     NullMaterial;                                      // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LegacySimAreaMoveEffectsSimVelocity;               // 0x0A08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A09[0x3];                                      // 0x0A09(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StaticMeshBrushScale;                              // 0x0A0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkeletalMeshBrushScaleByVelocity;                  // 0x0A10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxVelocity;                                       // 0x0A14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ChannelNames;                                      // 0x0A18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bDisableTraceMesh;                                 // 0x0A28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OnlyWithMovingOnGroundActors;                      // 0x0A29(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ComponentRePlayEvent__DelegateSignature();
	void ComponentBroadcastMemConsumption__DelegateSignature(class UObject* Consumer, float MemConsumption_0, bool TakenOrReturned);
	void ComponentShoutdownEvent__DelegateSignature();
	void ExecuteUbergraph_NinjaLiveComponent(int32 EntryPoint);
	void ResetExternalRT();
	void LiveActivation(class FName ParamName, float FadeTimeOfBrush, float FadeTimeOfCanvas);
	void PresetSave(const class FString& SelectedProject, const class FString& SelectedPreset, bool OverWriteOrNot);
	void PresetSelectionChanged(const class FString& SelectedPreset, bool ForceAutoLoadPreset_0);
	void SelChanged(const class FString& SelectedMenuItem, const class FString& SelectedActorName);
	void Manual_Reinit();
	void ReceiveTick(float DeltaSeconds_0);
	void RePlay();
	void Shoutdown();
	void ReceiveBeginPlay();
	void LiveFluidParams(float BrushSize_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"NinjaLiveComponent_C">();
	}
	static class UNinjaLiveComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNinjaLiveComponent_C>();
	}
};
static_assert(alignof(UNinjaLiveComponent_C) == 0x000008, "Wrong alignment on UNinjaLiveComponent_C");
static_assert(sizeof(UNinjaLiveComponent_C) == 0x000A30, "Wrong size on UNinjaLiveComponent_C");
static_assert(offsetof(UNinjaLiveComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UNinjaLiveComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ComponentActivatedByPawnProximity) == 0x0000B8, "Member 'UNinjaLiveComponent_C::ComponentActivatedByPawnProximity' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DisableComponent) == 0x0000B9, "Member 'UNinjaLiveComponent_C::DisableComponent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BeginPlaySupressed) == 0x0000BA, "Member 'UNinjaLiveComponent_C::BeginPlaySupressed' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InitDone) == 0x0000BB, "Member 'UNinjaLiveComponent_C::InitDone' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MaterialInstacesDone) == 0x0000BC, "Member 'UNinjaLiveComponent_C::MaterialInstacesDone' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, AutoConnectToMemoryPoolMinusIFMinusFound) == 0x0000BD, "Member 'UNinjaLiveComponent_C::AutoConnectToMemoryPoolMinusIFMinusFound' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MemPoolManagerDetected) == 0x0000BE, "Member 'UNinjaLiveComponent_C::MemPoolManagerDetected' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PoolManagerOverridesLocalSettings) == 0x0000BF, "Member 'UNinjaLiveComponent_C::PoolManagerOverridesLocalSettings' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ResolutionX) == 0x0000C0, "Member 'UNinjaLiveComponent_C::ResolutionX' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ResolutionY) == 0x0000C4, "Member 'UNinjaLiveComponent_C::ResolutionY' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PreferredTraceChannelName) == 0x0000C8, "Member 'UNinjaLiveComponent_C::PreferredTraceChannelName' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceChannel) == 0x0000D8, "Member 'UNinjaLiveComponent_C::TraceChannel' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, CollisionChannel) == 0x0000D9, "Member 'UNinjaLiveComponent_C::CollisionChannel' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceChannelsSet) == 0x0000DA, "Member 'UNinjaLiveComponent_C::TraceChannelsSet' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SimPrecision) == 0x0000DB, "Member 'UNinjaLiveComponent_C::SimPrecision' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, UsePressureSolver1__DefaultIs2_) == 0x0000DC, "Member 'UNinjaLiveComponent_C::UsePressureSolver1__DefaultIs2_' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PressureSolver1_MaxIterations) == 0x0000E0, "Member 'UNinjaLiveComponent_C::PressureSolver1_MaxIterations' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PressureSolver2_MaxIterations) == 0x0000E4, "Member 'UNinjaLiveComponent_C::PressureSolver2_MaxIterations' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PressureSolver2_KernelReduction) == 0x0000E8, "Member 'UNinjaLiveComponent_C::PressureSolver2_KernelReduction' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MaxSamplingFPS) == 0x0000EC, "Member 'UNinjaLiveComponent_C::MaxSamplingFPS' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MinSamplingFPS) == 0x0000F0, "Member 'UNinjaLiveComponent_C::MinSamplingFPS' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, HalfResPressureAndDivergenceBuffers) == 0x0000F4, "Member 'UNinjaLiveComponent_C::HalfResPressureAndDivergenceBuffers' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowDebugMessagesMinusTraceChannels) == 0x0000F5, "Member 'UNinjaLiveComponent_C::ShowDebugMessagesMinusTraceChannels' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowDebugMessagesMinusMemoryManagement) == 0x0000F6, "Member 'UNinjaLiveComponent_C::ShowDebugMessagesMinusMemoryManagement' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowDebugMessagesMinusCollisionAndTracing) == 0x0000F7, "Member 'UNinjaLiveComponent_C::ShowDebugMessagesMinusCollisionAndTracing' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowDebugMessagesMinusLODInitial) == 0x0000F8, "Member 'UNinjaLiveComponent_C::ShowDebugMessagesMinusLODInitial' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowDebugMessagesMinusLODRuntime) == 0x0000F9, "Member 'UNinjaLiveComponent_C::ShowDebugMessagesMinusLODRuntime' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowDebugMessagesMinusInterfaceControl) == 0x0000FA, "Member 'UNinjaLiveComponent_C::ShowDebugMessagesMinusInterfaceControl' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowDebugMessagesMinusRenderTargetExport) == 0x0000FB, "Member 'UNinjaLiveComponent_C::ShowDebugMessagesMinusRenderTargetExport' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VisualizeCustomTraceSource) == 0x0000FC, "Member 'UNinjaLiveComponent_C::VisualizeCustomTraceSource' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SaveDebugMessagesToDefaultLog) == 0x0000FD, "Member 'UNinjaLiveComponent_C::SaveDebugMessagesToDefaultLog' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DebugMessagesLifetime) == 0x000100, "Member 'UNinjaLiveComponent_C::DebugMessagesLifetime' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshComponent) == 0x000108, "Member 'UNinjaLiveComponent_C::TraceMeshComponent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SamplingFPS) == 0x000110, "Member 'UNinjaLiveComponent_C::SamplingFPS' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TickRateCustom) == 0x000114, "Member 'UNinjaLiveComponent_C::TickRateCustom' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LOD1MinusReduceSimQuality) == 0x000118, "Member 'UNinjaLiveComponent_C::LOD1MinusReduceSimQuality' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LOD2MinusReduceSamplingFPS) == 0x000119, "Member 'UNinjaLiveComponent_C::LOD2MinusReduceSamplingFPS' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LODMinusFarBound) == 0x00011C, "Member 'UNinjaLiveComponent_C::LODMinusFarBound' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LODMinusNearBound) == 0x000120, "Member 'UNinjaLiveComponent_C::LODMinusNearBound' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LODMinusSteps) == 0x000124, "Member 'UNinjaLiveComponent_C::LODMinusSteps' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LODMinusStepRange) == 0x000128, "Member 'UNinjaLiveComponent_C::LODMinusStepRange' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LODMinusStepsArray) == 0x000130, "Member 'UNinjaLiveComponent_C::LODMinusStepsArray' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SimPrecisionIndex) == 0x000140, "Member 'UNinjaLiveComponent_C::SimPrecisionIndex' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MemConsumption) == 0x000144, "Member 'UNinjaLiveComponent_C::MemConsumption' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MapLengthTmp) == 0x000148, "Member 'UNinjaLiveComponent_C::MapLengthTmp' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InactiveGrayMaterial) == 0x000150, "Member 'UNinjaLiveComponent_C::InactiveGrayMaterial' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ComponentRePlayEvent) == 0x000158, "Member 'UNinjaLiveComponent_C::ComponentRePlayEvent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ComponentBroadcastMemConsumption) == 0x000168, "Member 'UNinjaLiveComponent_C::ComponentBroadcastMemConsumption' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PawnInsideActivationBounds) == 0x000178, "Member 'UNinjaLiveComponent_C::PawnInsideActivationBounds' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LoadedDataTable) == 0x000180, "Member 'UNinjaLiveComponent_C::LoadedDataTable' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LoadedDataTablePath) == 0x000188, "Member 'UNinjaLiveComponent_C::LoadedDataTablePath' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PresetMap) == 0x000198, "Member 'UNinjaLiveComponent_C::PresetMap' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ActualPreset) == 0x0001E8, "Member 'UNinjaLiveComponent_C::ActualPreset' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DefaultPreset) == 0x0001F8, "Member 'UNinjaLiveComponent_C::DefaultPreset' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PresetSearchPaths) == 0x000200, "Member 'UNinjaLiveComponent_C::PresetSearchPaths' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PresetNameFilterCriteria) == 0x000210, "Member 'UNinjaLiveComponent_C::PresetNameFilterCriteria' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OutputMaterialInvisible) == 0x000218, "Member 'UNinjaLiveComponent_C::OutputMaterialInvisible' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OutputMaterialSelected) == 0x00021C, "Member 'UNinjaLiveComponent_C::OutputMaterialSelected' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OutputMaterials) == 0x000220, "Member 'UNinjaLiveComponent_C::OutputMaterials' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ForceAutoLoadPreset) == 0x000230, "Member 'UNinjaLiveComponent_C::ForceAutoLoadPreset' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, RenderTargetsList) == 0x000238, "Member 'UNinjaLiveComponent_C::RenderTargetsList' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, RenderTargetsMap) == 0x000248, "Member 'UNinjaLiveComponent_C::RenderTargetsMap' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_Advection) == 0x000298, "Member 'UNinjaLiveComponent_C::MI_Advection' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_Divergence) == 0x0002A0, "Member 'UNinjaLiveComponent_C::MI_Divergence' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_PressureCycle1) == 0x0002A8, "Member 'UNinjaLiveComponent_C::MI_PressureCycle1' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_PressureCycle2) == 0x0002B0, "Member 'UNinjaLiveComponent_C::MI_PressureCycle2' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloStrength) == 0x0002B8, "Member 'UNinjaLiveComponent_C::VeloStrength' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloOffsetX) == 0x0002BC, "Member 'UNinjaLiveComponent_C::VeloOffsetX' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloOffsetY) == 0x0002C0, "Member 'UNinjaLiveComponent_C::VeloOffsetY' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloRotate) == 0x0002C4, "Member 'UNinjaLiveComponent_C::VeloRotate' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloAmpNoise) == 0x0002C8, "Member 'UNinjaLiveComponent_C::VeloAmpNoise' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloDirNoise) == 0x0002CC, "Member 'UNinjaLiveComponent_C::VeloDirNoise' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Speed) == 0x0002D0, "Member 'UNinjaLiveComponent_C::Speed' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InputMaterials) == 0x0002D8, "Member 'UNinjaLiveComponent_C::InputMaterials' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InputMaterialSelected) == 0x0002E8, "Member 'UNinjaLiveComponent_C::InputMaterialSelected' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, RGBMinusInputMaterial) == 0x0002EC, "Member 'UNinjaLiveComponent_C::RGBMinusInputMaterial' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SimAreaClamp) == 0x0002ED, "Member 'UNinjaLiveComponent_C::SimAreaClamp' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowMouseCursor) == 0x0002EE, "Member 'UNinjaLiveComponent_C::ShowMouseCursor' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Divergence) == 0x0002F0, "Member 'UNinjaLiveComponent_C::Divergence' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InputFeedback) == 0x0002F4, "Member 'UNinjaLiveComponent_C::InputFeedback' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, FlowFeedback) == 0x0002F8, "Member 'UNinjaLiveComponent_C::FlowFeedback' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloFromSimAreaMotion) == 0x0002FC, "Member 'UNinjaLiveComponent_C::VeloFromSimAreaMotion' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OffsetFromSimAreaMotion) == 0x000300, "Member 'UNinjaLiveComponent_C::OffsetFromSimAreaMotion' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloFromBrushMotion) == 0x000304, "Member 'UNinjaLiveComponent_C::VeloFromBrushMotion' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushSize) == 0x000308, "Member 'UNinjaLiveComponent_C::BrushSize' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushStrength) == 0x00030C, "Member 'UNinjaLiveComponent_C::BrushStrength' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushStrengthTemp1) == 0x000310, "Member 'UNinjaLiveComponent_C::BrushStrengthTemp1' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, EraserMode) == 0x000314, "Member 'UNinjaLiveComponent_C::EraserMode' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushHardness) == 0x000318, "Member 'UNinjaLiveComponent_C::BrushHardness' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ParticleTemplate) == 0x000320, "Member 'UNinjaLiveComponent_C::ParticleTemplate' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DensityTemplate) == 0x000330, "Member 'UNinjaLiveComponent_C::DensityTemplate' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VelocityTemplate) == 0x000340, "Member 'UNinjaLiveComponent_C::VelocityTemplate' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MetaData) == 0x000350, "Member 'UNinjaLiveComponent_C::MetaData' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushPuncture) == 0x000360, "Member 'UNinjaLiveComponent_C::BrushPuncture' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_CollisionPainterDot) == 0x000368, "Member 'UNinjaLiveComponent_C::MI_CollisionPainterDot' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_CollisionPainterLine) == 0x000370, "Member 'UNinjaLiveComponent_C::MI_CollisionPainterLine' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_CompositeAndGradient) == 0x000378, "Member 'UNinjaLiveComponent_C::MI_CompositeAndGradient' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_Output) == 0x000380, "Member 'UNinjaLiveComponent_C::MI_Output' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VelocityInput) == 0x000388, "Member 'UNinjaLiveComponent_C::VelocityInput' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DensityInput) == 0x000390, "Member 'UNinjaLiveComponent_C::DensityInput' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, FlipRenderTargetsForMobile) == 0x000398, "Member 'UNinjaLiveComponent_C::FlipRenderTargetsForMobile' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SelfServiceMinusIFMinusPoolEmpty) == 0x000399, "Member 'UNinjaLiveComponent_C::SelfServiceMinusIFMinusPoolEmpty' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ActivationVolume) == 0x0003A0, "Member 'UNinjaLiveComponent_C::ActivationVolume' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, AutonomousMode) == 0x0003A8, "Member 'UNinjaLiveComponent_C::AutonomousMode' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, AbsPathForVelocityTemplate) == 0x0003A9, "Member 'UNinjaLiveComponent_C::AbsPathForVelocityTemplate' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, AbsPathForDensityTemplate) == 0x0003AA, "Member 'UNinjaLiveComponent_C::AbsPathForDensityTemplate' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, NullString) == 0x0003B0, "Member 'UNinjaLiveComponent_C::NullString' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SkeletalMeshMinusTempArrayMinusPairs) == 0x0003C0, "Member 'UNinjaLiveComponent_C::SkeletalMeshMinusTempArrayMinusPairs' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OverlappingComponents) == 0x000410, "Member 'UNinjaLiveComponent_C::OverlappingComponents' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ContinuousInteractionSkeletalComponent) == 0x000420, "Member 'UNinjaLiveComponent_C::ContinuousInteractionSkeletalComponent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ListOfAvailableTempArrays) == 0x000430, "Member 'UNinjaLiveComponent_C::ListOfAvailableTempArrays' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OverlappingSkeletalMesh) == 0x000440, "Member 'UNinjaLiveComponent_C::OverlappingSkeletalMesh' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OverlappingBone) == 0x000448, "Member 'UNinjaLiveComponent_C::OverlappingBone' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Position1_3D) == 0x000450, "Member 'UNinjaLiveComponent_C::Position1_3D' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LastPosition1_3D) == 0x00045C, "Member 'UNinjaLiveComponent_C::LastPosition1_3D' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshSizeCoeff) == 0x000468, "Member 'UNinjaLiveComponent_C::TraceMeshSizeCoeff' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OverlappingMeshSizeCoeff) == 0x00046C, "Member 'UNinjaLiveComponent_C::OverlappingMeshSizeCoeff' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OverlappingComponent) == 0x000470, "Member 'UNinjaLiveComponent_C::OverlappingComponent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TouchLookupIndex) == 0x000478, "Member 'UNinjaLiveComponent_C::TouchLookupIndex' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LastPosition3_2D) == 0x000480, "Member 'UNinjaLiveComponent_C::LastPosition3_2D' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LastPosition2_2D) == 0x000490, "Member 'UNinjaLiveComponent_C::LastPosition2_2D' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MousePass) == 0x0004A0, "Member 'UNinjaLiveComponent_C::MousePass' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Position2_2D) == 0x0004A4, "Member 'UNinjaLiveComponent_C::Position2_2D' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Position3_2D) == 0x0004B8, "Member 'UNinjaLiveComponent_C::Position3_2D' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PosDataType) == 0x0004C8, "Member 'UNinjaLiveComponent_C::PosDataType' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowVelocityDebugCone) == 0x0004CC, "Member 'UNinjaLiveComponent_C::ShowVelocityDebugCone' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, IgnoreInterfaceCommands) == 0x0004CD, "Member 'UNinjaLiveComponent_C::IgnoreInterfaceCommands' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DisableAndNotTickBlock) == 0x0004CE, "Member 'UNinjaLiveComponent_C::DisableAndNotTickBlock' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InputFeedbackInterface) == 0x0004D0, "Member 'UNinjaLiveComponent_C::InputFeedbackInterface' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushStrengthTemp2) == 0x0004D4, "Member 'UNinjaLiveComponent_C::BrushStrengthTemp2' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TickBlocker) == 0x0004D8, "Member 'UNinjaLiveComponent_C::TickBlocker' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, FluidSolver1Iterations) == 0x0004DC, "Member 'UNinjaLiveComponent_C::FluidSolver1Iterations' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, NinjaLIVETraceExclude) == 0x0004E0, "Member 'UNinjaLiveComponent_C::NinjaLIVETraceExclude' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DeltaSeconds) == 0x0004F0, "Member 'UNinjaLiveComponent_C::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, UseUnrealNativeEventTick) == 0x0004F4, "Member 'UNinjaLiveComponent_C::UseUnrealNativeEventTick' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SingleInput) == 0x0004F5, "Member 'UNinjaLiveComponent_C::SingleInput' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Touch) == 0x0004F6, "Member 'UNinjaLiveComponent_C::Touch' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LODMinusCheckFrequency) == 0x0004F8, "Member 'UNinjaLiveComponent_C::LODMinusCheckFrequency' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PauseSimWhenNotVisible) == 0x0004FC, "Member 'UNinjaLiveComponent_C::PauseSimWhenNotVisible' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, WaitBeforePause) == 0x000500, "Member 'UNinjaLiveComponent_C::WaitBeforePause' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MousePressed) == 0x000504, "Member 'UNinjaLiveComponent_C::MousePressed' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ContinuousInteractionWithOwnerActor) == 0x000505, "Member 'UNinjaLiveComponent_C::ContinuousInteractionWithOwnerActor' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Position1_2D) == 0x000508, "Member 'UNinjaLiveComponent_C::Position1_2D' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TimeSinceLastClick) == 0x000518, "Member 'UNinjaLiveComponent_C::TimeSinceLastClick' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Position1_3D_Static) == 0x00051C, "Member 'UNinjaLiveComponent_C::Position1_3D_Static' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TimeSinceLastCollision) == 0x000520, "Member 'UNinjaLiveComponent_C::TimeSinceLastCollision' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TimeCounter) == 0x000524, "Member 'UNinjaLiveComponent_C::TimeCounter' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Overlap1) == 0x000528, "Member 'UNinjaLiveComponent_C::Overlap1' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ComponentShoutdownEvent) == 0x000530, "Member 'UNinjaLiveComponent_C::ComponentShoutdownEvent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ContinuousInteractionInclusiveObjType) == 0x000540, "Member 'UNinjaLiveComponent_C::ContinuousInteractionInclusiveObjType' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ContinuousInteractionComponentNamesExact) == 0x000550, "Member 'UNinjaLiveComponent_C::ContinuousInteractionComponentNamesExact' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ContinuousInteractionBoneNamesExact) == 0x000560, "Member 'UNinjaLiveComponent_C::ContinuousInteractionBoneNamesExact' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SingleTargetMode) == 0x000570, "Member 'UNinjaLiveComponent_C::SingleTargetMode' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SingleTargetType) == 0x000571, "Member 'UNinjaLiveComponent_C::SingleTargetType' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SingleTargetMoveSetSimSpeed) == 0x000572, "Member 'UNinjaLiveComponent_C::SingleTargetMoveSetSimSpeed' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SpeedInfluenceFactor) == 0x000574, "Member 'UNinjaLiveComponent_C::SpeedInfluenceFactor' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, CameraFacingTraceMesh) == 0x000578, "Member 'UNinjaLiveComponent_C::CameraFacingTraceMesh' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OverlapBasedInteraction) == 0x000579, "Member 'UNinjaLiveComponent_C::OverlapBasedInteraction' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, UserInputBasedInteraction) == 0x00057A, "Member 'UNinjaLiveComponent_C::UserInputBasedInteraction' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushScaledInverselyByTraceMeshSize) == 0x00057B, "Member 'UNinjaLiveComponent_C::BrushScaledInverselyByTraceMeshSize' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushScaledByInteractingObjSize) == 0x00057C, "Member 'UNinjaLiveComponent_C::BrushScaledByInteractingObjSize' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, GlobalBrushScale) == 0x000580, "Member 'UNinjaLiveComponent_C::GlobalBrushScale' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, UserInputBrushScale) == 0x000584, "Member 'UNinjaLiveComponent_C::UserInputBrushScale' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PrimitiveObjBrushScale) == 0x000588, "Member 'UNinjaLiveComponent_C::PrimitiveObjBrushScale' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SkeletalMeshBrushScale) == 0x00058C, "Member 'UNinjaLiveComponent_C::SkeletalMeshBrushScale' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, CameraFacing_LockYMinusAxis) == 0x000590, "Member 'UNinjaLiveComponent_C::CameraFacing_LockYMinusAxis' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, UseLegacyCameraFacing) == 0x000591, "Member 'UNinjaLiveComponent_C::UseLegacyCameraFacing' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshTranslucentSortPrio) == 0x000594, "Member 'UNinjaLiveComponent_C::TraceMeshTranslucentSortPrio' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshQueryCounter) == 0x000598, "Member 'UNinjaLiveComponent_C::TraceMeshQueryCounter' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LimitUnrealNativeEventTick) == 0x00059C, "Member 'UNinjaLiveComponent_C::LimitUnrealNativeEventTick' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, GlobalVeloTempCondition) == 0x0005A0, "Member 'UNinjaLiveComponent_C::GlobalVeloTempCondition' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TracePositionTemp) == 0x0005A4, "Member 'UNinjaLiveComponent_C::TracePositionTemp' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LastTracePositionTemp) == 0x0005B0, "Member 'UNinjaLiveComponent_C::LastTracePositionTemp' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SimEdgeBouncyness) == 0x0005BC, "Member 'UNinjaLiveComponent_C::SimEdgeBouncyness' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, FadeDensityAtSimEdge) == 0x0005C0, "Member 'UNinjaLiveComponent_C::FadeDensityAtSimEdge' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, EdgeMaskWidth) == 0x0005C4, "Member 'UNinjaLiveComponent_C::EdgeMaskWidth' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloDirNoiseSize) == 0x0005C8, "Member 'UNinjaLiveComponent_C::VeloDirNoiseSize' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloDirNoiseSpeed) == 0x0005CC, "Member 'UNinjaLiveComponent_C::VeloDirNoiseSpeed' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, UseInputMaterials) == 0x0005D0, "Member 'UNinjaLiveComponent_C::UseInputMaterials' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DensityTxtScale) == 0x0005D4, "Member 'UNinjaLiveComponent_C::DensityTxtScale' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DensityTxtOffsetX) == 0x0005D8, "Member 'UNinjaLiveComponent_C::DensityTxtOffsetX' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DensityTxtOffsetY) == 0x0005DC, "Member 'UNinjaLiveComponent_C::DensityTxtOffsetY' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushNoise) == 0x0005E0, "Member 'UNinjaLiveComponent_C::BrushNoise' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushDensityNoiseScale) == 0x0005E4, "Member 'UNinjaLiveComponent_C::BrushDensityNoiseScale' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushDensityNoiseFreq) == 0x0005E8, "Member 'UNinjaLiveComponent_C::BrushDensityNoiseFreq' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushVelocityNoiseScale) == 0x0005EC, "Member 'UNinjaLiveComponent_C::BrushVelocityNoiseScale' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushVelocityNoiseFreq) == 0x0005F0, "Member 'UNinjaLiveComponent_C::BrushVelocityNoiseFreq' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshInitialRotation) == 0x0005F4, "Member 'UNinjaLiveComponent_C::TraceMeshInitialRotation' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, EnableRayMarching) == 0x000600, "Member 'UNinjaLiveComponent_C::EnableRayMarching' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LightDirectionProvider) == 0x000608, "Member 'UNinjaLiveComponent_C::LightDirectionProvider' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LightDirectionSourceIsRotation_NOT_Pos) == 0x000610, "Member 'UNinjaLiveComponent_C::LightDirectionSourceIsRotation_NOT_Pos' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DistanceBasedLightAttenuation) == 0x000611, "Member 'UNinjaLiveComponent_C::DistanceBasedLightAttenuation' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, AttenuationPower) == 0x000614, "Member 'UNinjaLiveComponent_C::AttenuationPower' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PointLightMovementMultiplier) == 0x000618, "Member 'UNinjaLiveComponent_C::PointLightMovementMultiplier' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TwoSidedShading) == 0x00061C, "Member 'UNinjaLiveComponent_C::TwoSidedShading' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TwoSideBlendPow) == 0x000620, "Member 'UNinjaLiveComponent_C::TwoSideBlendPow' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Facing) == 0x000624, "Member 'UNinjaLiveComponent_C::Facing' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OffsetLightVector) == 0x000628, "Member 'UNinjaLiveComponent_C::OffsetLightVector' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ForceManualSunPosition) == 0x000634, "Member 'UNinjaLiveComponent_C::ForceManualSunPosition' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SunLatitude) == 0x000638, "Member 'UNinjaLiveComponent_C::SunLatitude' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SunLongitude) == 0x00063C, "Member 'UNinjaLiveComponent_C::SunLongitude' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SunHeight) == 0x000640, "Member 'UNinjaLiveComponent_C::SunHeight' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowLightDirectionVector__Yellow_) == 0x000644, "Member 'UNinjaLiveComponent_C::ShowLightDirectionVector__Yellow_' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowNiagaraSysUpvector__Red_) == 0x000645, "Member 'UNinjaLiveComponent_C::ShowNiagaraSysUpvector__Red_' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowFacingPlane) == 0x000646, "Member 'UNinjaLiveComponent_C::ShowFacingPlane' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PrintFacing) == 0x000647, "Member 'UNinjaLiveComponent_C::PrintFacing' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloInputTile) == 0x000648, "Member 'UNinjaLiveComponent_C::VeloInputTile' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloInputOffsetSpeed) == 0x00064C, "Member 'UNinjaLiveComponent_C::VeloInputOffsetSpeed' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DensityTxtMult) == 0x000650, "Member 'UNinjaLiveComponent_C::DensityTxtMult' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DensityInputNoiseAmp) == 0x000654, "Member 'UNinjaLiveComponent_C::DensityInputNoiseAmp' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DensityInputNoiseOffset) == 0x000658, "Member 'UNinjaLiveComponent_C::DensityInputNoiseOffset' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DensityInputNoiseTile) == 0x00065C, "Member 'UNinjaLiveComponent_C::DensityInputNoiseTile' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DrawInternalRenderTargetToExternal) == 0x000660, "Member 'UNinjaLiveComponent_C::DrawInternalRenderTargetToExternal' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InternalRenderTargetsToExport) == 0x000668, "Member 'UNinjaLiveComponent_C::InternalRenderTargetsToExport' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ExternalRenderTargets) == 0x000678, "Member 'UNinjaLiveComponent_C::ExternalRenderTargets' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, CollisionMask) == 0x000688, "Member 'UNinjaLiveComponent_C::CollisionMask' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, CollisionMaskIsNonDefault) == 0x000690, "Member 'UNinjaLiveComponent_C::CollisionMaskIsNonDefault' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InputSceneCaptureCamera) == 0x000698, "Member 'UNinjaLiveComponent_C::InputSceneCaptureCamera' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InputMediaPlayer) == 0x0006A0, "Member 'UNinjaLiveComponent_C::InputMediaPlayer' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MediaTexture) == 0x0006A8, "Member 'UNinjaLiveComponent_C::MediaTexture' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InputMediaSource) == 0x0006B0, "Member 'UNinjaLiveComponent_C::InputMediaSource' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InputMediaLoopLength) == 0x0006B8, "Member 'UNinjaLiveComponent_C::InputMediaLoopLength' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SimplePainterMode) == 0x0006BC, "Member 'UNinjaLiveComponent_C::SimplePainterMode' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, RandomizeNoiseOffsets) == 0x0006BD, "Member 'UNinjaLiveComponent_C::RandomizeNoiseOffsets' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OverlapCounter) == 0x0006C0, "Member 'UNinjaLiveComponent_C::OverlapCounter' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, RandomizeDensityTextureOffset) == 0x0006C4, "Member 'UNinjaLiveComponent_C::RandomizeDensityTextureOffset' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OverwritePresetDensityInput) == 0x0006C8, "Member 'UNinjaLiveComponent_C::OverwritePresetDensityInput' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OverwritePresetVelocityInput) == 0x0006D0, "Member 'UNinjaLiveComponent_C::OverwritePresetVelocityInput' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushRnd) == 0x0006D8, "Member 'UNinjaLiveComponent_C::BrushRnd' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SimSpeedAdjustmentLatency) == 0x0006DC, "Member 'UNinjaLiveComponent_C::SimSpeedAdjustmentLatency' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SpeedTemp) == 0x0006E0, "Member 'UNinjaLiveComponent_C::SpeedTemp' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, StopUsingPainterCanvasWhenIdle) == 0x0006E4, "Member 'UNinjaLiveComponent_C::StopUsingPainterCanvasWhenIdle' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Experimental_PSolver2KernelIndexOffset) == 0x0006E8, "Member 'UNinjaLiveComponent_C::Experimental_PSolver2KernelIndexOffset' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Experimental_PressureFeedback) == 0x0006EC, "Member 'UNinjaLiveComponent_C::Experimental_PressureFeedback' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshIsAlsoInteractionVolume) == 0x0006F0, "Member 'UNinjaLiveComponent_C::TraceMeshIsAlsoInteractionVolume' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray0) == 0x0006F8, "Member 'UNinjaLiveComponent_C::TempArray0' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray1) == 0x000708, "Member 'UNinjaLiveComponent_C::TempArray1' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray2) == 0x000718, "Member 'UNinjaLiveComponent_C::TempArray2' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray3) == 0x000728, "Member 'UNinjaLiveComponent_C::TempArray3' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray4) == 0x000738, "Member 'UNinjaLiveComponent_C::TempArray4' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray5) == 0x000748, "Member 'UNinjaLiveComponent_C::TempArray5' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray6) == 0x000758, "Member 'UNinjaLiveComponent_C::TempArray6' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray7) == 0x000768, "Member 'UNinjaLiveComponent_C::TempArray7' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray8) == 0x000778, "Member 'UNinjaLiveComponent_C::TempArray8' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray9) == 0x000788, "Member 'UNinjaLiveComponent_C::TempArray9' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray10) == 0x000798, "Member 'UNinjaLiveComponent_C::TempArray10' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray11) == 0x0007A8, "Member 'UNinjaLiveComponent_C::TempArray11' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray12) == 0x0007B8, "Member 'UNinjaLiveComponent_C::TempArray12' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray13) == 0x0007C8, "Member 'UNinjaLiveComponent_C::TempArray13' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray14) == 0x0007D8, "Member 'UNinjaLiveComponent_C::TempArray14' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray15) == 0x0007E8, "Member 'UNinjaLiveComponent_C::TempArray15' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray16) == 0x0007F8, "Member 'UNinjaLiveComponent_C::TempArray16' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray17) == 0x000808, "Member 'UNinjaLiveComponent_C::TempArray17' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray18) == 0x000818, "Member 'UNinjaLiveComponent_C::TempArray18' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray19) == 0x000828, "Member 'UNinjaLiveComponent_C::TempArray19' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray20) == 0x000838, "Member 'UNinjaLiveComponent_C::TempArray20' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PowerFunctionBugWorkaroundUEversions) == 0x000848, "Member 'UNinjaLiveComponent_C::PowerFunctionBugWorkaroundUEversions' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, UseCustomTraceSource) == 0x000858, "Member 'UNinjaLiveComponent_C::UseCustomTraceSource' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TLUsePerpendicularTraceSourcePoint) == 0x000859, "Member 'UNinjaLiveComponent_C::TLUsePerpendicularTraceSourcePoint' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, CustomTraceSourcePosition) == 0x00085C, "Member 'UNinjaLiveComponent_C::CustomTraceSourcePosition' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LegacySimAreaMoveEffectsSimDensity) == 0x000868, "Member 'UNinjaLiveComponent_C::LegacySimAreaMoveEffectsSimDensity' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray21) == 0x000870, "Member 'UNinjaLiveComponent_C::TempArray21' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray22) == 0x000880, "Member 'UNinjaLiveComponent_C::TempArray22' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray23) == 0x000890, "Member 'UNinjaLiveComponent_C::TempArray23' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray24) == 0x0008A0, "Member 'UNinjaLiveComponent_C::TempArray24' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray25) == 0x0008B0, "Member 'UNinjaLiveComponent_C::TempArray25' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray26) == 0x0008C0, "Member 'UNinjaLiveComponent_C::TempArray26' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray27) == 0x0008D0, "Member 'UNinjaLiveComponent_C::TempArray27' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray28) == 0x0008E0, "Member 'UNinjaLiveComponent_C::TempArray28' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray29) == 0x0008F0, "Member 'UNinjaLiveComponent_C::TempArray29' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray30) == 0x000900, "Member 'UNinjaLiveComponent_C::TempArray30' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray31) == 0x000910, "Member 'UNinjaLiveComponent_C::TempArray31' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray32) == 0x000920, "Member 'UNinjaLiveComponent_C::TempArray32' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray33) == 0x000930, "Member 'UNinjaLiveComponent_C::TempArray33' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray34) == 0x000940, "Member 'UNinjaLiveComponent_C::TempArray34' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray35) == 0x000950, "Member 'UNinjaLiveComponent_C::TempArray35' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray36) == 0x000960, "Member 'UNinjaLiveComponent_C::TempArray36' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray37) == 0x000970, "Member 'UNinjaLiveComponent_C::TempArray37' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray38) == 0x000980, "Member 'UNinjaLiveComponent_C::TempArray38' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray39) == 0x000990, "Member 'UNinjaLiveComponent_C::TempArray39' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DampenBrushBelowThisVelocity) == 0x0009A0, "Member 'UNinjaLiveComponent_C::DampenBrushBelowThisVelocity' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DampenBrushFactor) == 0x0009A4, "Member 'UNinjaLiveComponent_C::DampenBrushFactor' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushVelocityPow) == 0x0009A8, "Member 'UNinjaLiveComponent_C::BrushVelocityPow' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SimAreaMotionEffectsBrushPuncture) == 0x0009AC, "Member 'UNinjaLiveComponent_C::SimAreaMotionEffectsBrushPuncture' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LegacyBrushVeloForMultiTarget) == 0x0009B0, "Member 'UNinjaLiveComponent_C::LegacyBrushVeloForMultiTarget' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LegacyBrushVeloForSingleTarget) == 0x0009B1, "Member 'UNinjaLiveComponent_C::LegacyBrushVeloForSingleTarget' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LODLevel) == 0x0009B4, "Member 'UNinjaLiveComponent_C::LODLevel' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, AllowAbsoluteBlackDensity) == 0x0009B8, "Member 'UNinjaLiveComponent_C::AllowAbsoluteBlackDensity' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshPos) == 0x0009BC, "Member 'UNinjaLiveComponent_C::TraceMeshPos' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshLastPos) == 0x0009C8, "Member 'UNinjaLiveComponent_C::TraceMeshLastPos' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PressureEdgeMasking) == 0x0009D4, "Member 'UNinjaLiveComponent_C::PressureEdgeMasking' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, CoreSimMaterials) == 0x0009D8, "Member 'UNinjaLiveComponent_C::CoreSimMaterials' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshDeltaPos) == 0x0009E8, "Member 'UNinjaLiveComponent_C::TraceMeshDeltaPos' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, NullVector) == 0x0009F4, "Member 'UNinjaLiveComponent_C::NullVector' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, NullMaterial) == 0x000A00, "Member 'UNinjaLiveComponent_C::NullMaterial' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LegacySimAreaMoveEffectsSimVelocity) == 0x000A08, "Member 'UNinjaLiveComponent_C::LegacySimAreaMoveEffectsSimVelocity' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, StaticMeshBrushScale) == 0x000A0C, "Member 'UNinjaLiveComponent_C::StaticMeshBrushScale' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SkeletalMeshBrushScaleByVelocity) == 0x000A10, "Member 'UNinjaLiveComponent_C::SkeletalMeshBrushScaleByVelocity' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MaxVelocity) == 0x000A14, "Member 'UNinjaLiveComponent_C::MaxVelocity' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ChannelNames) == 0x000A18, "Member 'UNinjaLiveComponent_C::ChannelNames' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, bDisableTraceMesh) == 0x000A28, "Member 'UNinjaLiveComponent_C::bDisableTraceMesh' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OnlyWithMovingOnGroundActors) == 0x000A29, "Member 'UNinjaLiveComponent_C::OnlyWithMovingOnGroundActors' has a wrong offset!");

}

