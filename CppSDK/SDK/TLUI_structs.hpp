#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TLUI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "TLScheme_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum TLUI.ETLEditableBoxEscapeAction
// NumValues: 0x0004
enum class ETLEditableBoxEscapeAction : uint8
{
	None                                     = 0,
	ClearFocus                               = 1,
	EmptyAndClearFocus                       = 2,
	ETLEditableBoxEscapeAction_MAX           = 3,
};

// Enum TLUI.ETLUseSlateFocusNavigation
// NumValues: 0x0004
enum class ETLUseSlateFocusNavigation : uint8
{
	OverrideParent                           = 0,
	Use                                      = 1,
	DontUse                                  = 2,
	ETLUseSlateFocusNavigation_MAX           = 3,
};

// Enum TLUI.ETLSaveLastChildFocus
// NumValues: 0x0004
enum class ETLSaveLastChildFocus : uint8
{
	None                                     = 0,
	SaveWidget                               = 1,
	SaveIndex                                = 2,
	ETLSaveLastChildFocus_MAX                = 3,
};

// Enum TLUI.ETLFocusablePlatform
// NumValues: 0x0004
enum class ETLFocusablePlatform : uint8
{
	OverrideParent                           = 0,
	OnlyGamepad                              = 1,
	AllPlatform                              = 2,
	ETLFocusablePlatform_MAX                 = 3,
};

// Enum TLUI.ETLUseSlateFocus
// NumValues: 0x0004
enum class ETLUseSlateFocus : uint8
{
	OverrideParent                           = 0,
	Use                                      = 1,
	DontUse                                  = 2,
	ETLUseSlateFocus_MAX                     = 3,
};

// Enum TLUI.ETLTooltipAnchor
// NumValues: 0x0006
enum class ETLTooltipAnchor : uint32
{
	Top                                      = 0,
	Bottom                                   = 1,
	Left                                     = 2,
	Right                                    = 3,
	None                                     = 4,
	ETLTooltipAnchor_MAX                     = 5,
};

// Enum TLUI.ETLTooltipAnchorTarget
// NumValues: 0x0003
enum class ETLTooltipAnchorTarget : uint32
{
	Cursor                                   = 0,
	Target                                   = 1,
	ETLTooltipAnchorTarget_MAX               = 2,
};

// Enum TLUI.ETextJustifyTL
// NumValues: 0x0005
enum class ETextJustifyTL : uint8
{
	Left                                     = 0,
	Center                                   = 1,
	Right                                    = 2,
	EqualSpace                               = 3,
	ETextJustifyTL_MAX                       = 4,
};

// Enum TLUI.ETLTextWrapLimitOverRule
// NumValues: 0x0004
enum class ETLTextWrapLimitOverRule : uint8
{
	None                                     = 0,
	SingleLineRolling                        = 1,
	MultiLineScrolling                       = 2,
	ETLTextWrapLimitOverRule_MAX             = 3,
};

// Enum TLUI.ETLUserWidgetAutonFocusImageType
// NumValues: 0x0010
enum class ETLUserWidgetAutonFocusImageType : uint8
{
	None                                     = 0,
	NormalSquare                             = 1,
	ThinSquare                               = 2,
	Square01                                 = 3,
	Square02                                 = 4,
	Square03                                 = 5,
	Square04                                 = 6,
	Square05                                 = 7,
	Square06                                 = 8,
	Square07                                 = 9,
	Square08                                 = 10,
	Square09                                 = 11,
	Circle01                                 = 12,
	Circle02                                 = 13,
	Circle03                                 = 14,
	ETLUserWidgetAutonFocusImageType_MAX     = 15,
};

// Enum TLUI.EImageDecoratorAlignTypeTL
// NumValues: 0x0004
enum class EImageDecoratorAlignTypeTL : uint8
{
	Top                                      = 0,
	Center                                   = 1,
	Bottom                                   = 2,
	EImageDecoratorAlignTypeTL_MAX           = 3,
};

// Enum TLUI.ETLTextLineBreakPolicy
// NumValues: 0x0003
enum class ETLTextLineBreakPolicy : uint8
{
	KLine                                    = 0,
	KCharacterBoundary                       = 1,
	ETLTextLineBreakPolicy_MAX               = 2,
};

// Enum TLUI.ENameplateType
// NumValues: 0x001B
enum class ENameplateType : uint8
{
	None                                     = 0,
	ItemGradekMsic                           = 1,
	ItemGradekC                              = 2,
	ItemGradekB                              = 3,
	ItemGradekA                              = 4,
	ItemGradekAA                             = 5,
	ItemGradekAAA                            = 6,
	ItemGradekS                              = 7,
	ItemGradekSS                             = 8,
	Lawful                                   = 9,
	Neutral                                  = 10,
	Chaotic                                  = 11,
	SelfDefense                              = 12,
	SiegewarfareFriendly                     = 13,
	SiegewarfareHostile                      = 14,
	SiegewarfareParty                        = 15,
	DeFriendly                               = 16,
	DeNeutral                                = 17,
	DeHostile                                = 18,
	DeParty                                  = 19,
	DeSpecialStatus                          = 20,
	NpcFriendly                              = 21,
	NpcNeutral                               = 22,
	NpcHostile                               = 23,
	NpcAggressive                            = 24,
	Disable                                  = 25,
	ENameplateType_MAX                       = 26,
};

// Enum TLUI.ETLBindingTextTimeType
// NumValues: 0x0004
enum class ETLBindingTextTimeType : uint8
{
	FixedTime                                = 0,
	RemainingTime                            = 1,
	FixedDate                                = 2,
	ETLBindingTextTimeType_MAX               = 3,
};

// Enum TLUI.ETLGroupRelationType
// NumValues: 0x0003
enum class ETLGroupRelationType : uint8
{
	RELATION_BY_GUILD                        = 0,
	RELATION_BY_UNION                        = 1,
	RELATION_MAX                             = 2,
};

// Enum TLUI.ETLBindingOperator
// NumValues: 0x0009
enum class ETLBindingOperator : uint8
{
	KTrue                                    = 0,
	KFalse                                   = 1,
	KEqual                                   = 2,
	KNotEqual                                = 3,
	KGreater                                 = 4,
	KGreaterEqual                            = 5,
	KLess                                    = 6,
	KLessEqaul                               = 7,
	ETLBindingOperator_MAX                   = 8,
};

// ScriptStruct TLUI.KeyFrameBrush
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FKeyFrameBrush final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKeyFrameBrush) == 0x000008, "Wrong alignment on FKeyFrameBrush");
static_assert(sizeof(FKeyFrameBrush) == 0x000010, "Wrong size on FKeyFrameBrush");

// ScriptStruct TLUI.TLVisibility
// 0x0004 (0x0004 - 0x0000)
struct FTLVisibility final
{
public:
	bool                                          EnableHitTest;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Visible;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CollapsedWhenHide;                                 // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyDisabledHitTestToChildren;                    // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLVisibility) == 0x000001, "Wrong alignment on FTLVisibility");
static_assert(sizeof(FTLVisibility) == 0x000004, "Wrong size on FTLVisibility");
static_assert(offsetof(FTLVisibility, EnableHitTest) == 0x000000, "Member 'FTLVisibility::EnableHitTest' has a wrong offset!");
static_assert(offsetof(FTLVisibility, Visible) == 0x000001, "Member 'FTLVisibility::Visible' has a wrong offset!");
static_assert(offsetof(FTLVisibility, CollapsedWhenHide) == 0x000002, "Member 'FTLVisibility::CollapsedWhenHide' has a wrong offset!");
static_assert(offsetof(FTLVisibility, ApplyDisabledHitTestToChildren) == 0x000003, "Member 'FTLVisibility::ApplyDisabledHitTestToChildren' has a wrong offset!");

// ScriptStruct TLUI.TooltipPositionData
// 0x000C (0x000C - 0x0000)
struct FTooltipPositionData final
{
public:
	ETLTooltipAnchorTarget                        AnchorTarget;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLTooltipAnchor                              DefaultAnchor;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoVertical;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoHorizontal;                                   // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnchorTargetCenter;                               // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTooltipPositionData) == 0x000004, "Wrong alignment on FTooltipPositionData");
static_assert(sizeof(FTooltipPositionData) == 0x00000C, "Wrong size on FTooltipPositionData");
static_assert(offsetof(FTooltipPositionData, AnchorTarget) == 0x000000, "Member 'FTooltipPositionData::AnchorTarget' has a wrong offset!");
static_assert(offsetof(FTooltipPositionData, DefaultAnchor) == 0x000004, "Member 'FTooltipPositionData::DefaultAnchor' has a wrong offset!");
static_assert(offsetof(FTooltipPositionData, bAutoVertical) == 0x000008, "Member 'FTooltipPositionData::bAutoVertical' has a wrong offset!");
static_assert(offsetof(FTooltipPositionData, bAutoHorizontal) == 0x000009, "Member 'FTooltipPositionData::bAutoHorizontal' has a wrong offset!");
static_assert(offsetof(FTooltipPositionData, bAnchorTargetCenter) == 0x00000A, "Member 'FTooltipPositionData::bAnchorTargetCenter' has a wrong offset!");

// ScriptStruct TLUI.TLWidgetBinding
// 0x0030 (0x0030 - 0x0000)
struct FTLWidgetBinding
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                OwningWidget;                                      // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10[0x20];                                      // 0x0010(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLWidgetBinding) == 0x000008, "Wrong alignment on FTLWidgetBinding");
static_assert(sizeof(FTLWidgetBinding) == 0x000030, "Wrong size on FTLWidgetBinding");
static_assert(offsetof(FTLWidgetBinding, OwningWidget) == 0x000008, "Member 'FTLWidgetBinding::OwningWidget' has a wrong offset!");

// ScriptStruct TLUI.TLWidgetBindingText
// 0x0018 (0x0048 - 0x0030)
struct FTLWidgetBindingText final : public FTLWidgetBinding
{
public:
	uint8                                         Pad_30[0x4];                                       // 0x0030(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UTLTextBlock* Widget)>   OnUpdateText;                                      // 0x0034(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLWidgetBindingText) == 0x000008, "Wrong alignment on FTLWidgetBindingText");
static_assert(sizeof(FTLWidgetBindingText) == 0x000048, "Wrong size on FTLWidgetBindingText");
static_assert(offsetof(FTLWidgetBindingText, OnUpdateText) == 0x000034, "Member 'FTLWidgetBindingText::OnUpdateText' has a wrong offset!");

// ScriptStruct TLUI.TLWidgetBindingEnabled
// 0x0010 (0x0040 - 0x0030)
struct FTLWidgetBindingEnabled final : public FTLWidgetBinding
{
public:
	TDelegate<void(class UWidget* Widget)>        OnUpdateEnabled;                                   // 0x0030(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLWidgetBindingEnabled) == 0x000008, "Wrong alignment on FTLWidgetBindingEnabled");
static_assert(sizeof(FTLWidgetBindingEnabled) == 0x000040, "Wrong size on FTLWidgetBindingEnabled");
static_assert(offsetof(FTLWidgetBindingEnabled, OnUpdateEnabled) == 0x000030, "Member 'FTLWidgetBindingEnabled::OnUpdateEnabled' has a wrong offset!");

// ScriptStruct TLUI.TLWidgetDefaultSlotData
// 0x0014 (0x0014 - 0x0000)
struct FTLWidgetDefaultSlotData final
{
public:
	struct FMargin                                Padding;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLWidgetDefaultSlotData) == 0x000004, "Wrong alignment on FTLWidgetDefaultSlotData");
static_assert(sizeof(FTLWidgetDefaultSlotData) == 0x000014, "Wrong size on FTLWidgetDefaultSlotData");
static_assert(offsetof(FTLWidgetDefaultSlotData, Padding) == 0x000000, "Member 'FTLWidgetDefaultSlotData::Padding' has a wrong offset!");
static_assert(offsetof(FTLWidgetDefaultSlotData, HorizontalAlignment) == 0x000010, "Member 'FTLWidgetDefaultSlotData::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(FTLWidgetDefaultSlotData, VerticalAlignment) == 0x000011, "Member 'FTLWidgetDefaultSlotData::VerticalAlignment' has a wrong offset!");

// ScriptStruct TLUI.TLWidgetSlotData
// 0x0040 (0x0040 - 0x0000)
struct FTLWidgetSlotData final
{
public:
	struct FAnchorData                            LayoutData;                                        // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoSize;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTLWidgetDefaultSlotData               DefaultSlotData;                                   // 0x002C(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLWidgetSlotData) == 0x000004, "Wrong alignment on FTLWidgetSlotData");
static_assert(sizeof(FTLWidgetSlotData) == 0x000040, "Wrong size on FTLWidgetSlotData");
static_assert(offsetof(FTLWidgetSlotData, LayoutData) == 0x000000, "Member 'FTLWidgetSlotData::LayoutData' has a wrong offset!");
static_assert(offsetof(FTLWidgetSlotData, bAutoSize) == 0x000028, "Member 'FTLWidgetSlotData::bAutoSize' has a wrong offset!");
static_assert(offsetof(FTLWidgetSlotData, DefaultSlotData) == 0x00002C, "Member 'FTLWidgetSlotData::DefaultSlotData' has a wrong offset!");

// ScriptStruct TLUI.TLWidgetBindingVisible
// 0x0010 (0x0040 - 0x0030)
struct FTLWidgetBindingVisible final : public FTLWidgetBinding
{
public:
	TDelegate<void(TScriptInterface<class ITLWidgetVisibilityInterface> Widget)> OnUpdateVisible;                                   // 0x0030(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLWidgetBindingVisible) == 0x000008, "Wrong alignment on FTLWidgetBindingVisible");
static_assert(sizeof(FTLWidgetBindingVisible) == 0x000040, "Wrong size on FTLWidgetBindingVisible");
static_assert(offsetof(FTLWidgetBindingVisible, OnUpdateVisible) == 0x000030, "Member 'FTLWidgetBindingVisible::OnUpdateVisible' has a wrong offset!");

// ScriptStruct TLUI.TextBlockStyleTL
// 0x0200 (0x0208 - 0x0008)
struct FTextBlockStyleTL final : public FSlateWidgetStyle
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0008(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalKerning;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            ColorAndOpacity;                                   // 0x0068(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColorAndOpacity;                             // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            SelectedBackgroundColor;                           // 0x00A8(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FLinearColor                           HighlightColor;                                    // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HighlightShape;                                    // 0x00E0(0x0088)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FSlateBrush                            UnderlineBrush;                                    // 0x0168(0x0088)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F0[0x4];                                      // 0x01F0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseCustomDisabledColor;                           // 0x01F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F5[0x3];                                      // 0x01F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CustomDisabledColorAndOpacity;                     // 0x01F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTextBlockStyleTL) == 0x000008, "Wrong alignment on FTextBlockStyleTL");
static_assert(sizeof(FTextBlockStyleTL) == 0x000208, "Wrong size on FTextBlockStyleTL");
static_assert(offsetof(FTextBlockStyleTL, Font) == 0x000008, "Member 'FTextBlockStyleTL::Font' has a wrong offset!");
static_assert(offsetof(FTextBlockStyleTL, AdditionalKerning) == 0x000060, "Member 'FTextBlockStyleTL::AdditionalKerning' has a wrong offset!");
static_assert(offsetof(FTextBlockStyleTL, ColorAndOpacity) == 0x000068, "Member 'FTextBlockStyleTL::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FTextBlockStyleTL, ShadowOffset) == 0x000090, "Member 'FTextBlockStyleTL::ShadowOffset' has a wrong offset!");
static_assert(offsetof(FTextBlockStyleTL, ShadowColorAndOpacity) == 0x000098, "Member 'FTextBlockStyleTL::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FTextBlockStyleTL, SelectedBackgroundColor) == 0x0000A8, "Member 'FTextBlockStyleTL::SelectedBackgroundColor' has a wrong offset!");
static_assert(offsetof(FTextBlockStyleTL, HighlightColor) == 0x0000D0, "Member 'FTextBlockStyleTL::HighlightColor' has a wrong offset!");
static_assert(offsetof(FTextBlockStyleTL, HighlightShape) == 0x0000E0, "Member 'FTextBlockStyleTL::HighlightShape' has a wrong offset!");
static_assert(offsetof(FTextBlockStyleTL, UnderlineBrush) == 0x000168, "Member 'FTextBlockStyleTL::UnderlineBrush' has a wrong offset!");
static_assert(offsetof(FTextBlockStyleTL, bUseCustomDisabledColor) == 0x0001F4, "Member 'FTextBlockStyleTL::bUseCustomDisabledColor' has a wrong offset!");
static_assert(offsetof(FTextBlockStyleTL, CustomDisabledColorAndOpacity) == 0x0001F8, "Member 'FTextBlockStyleTL::CustomDisabledColorAndOpacity' has a wrong offset!");

// ScriptStruct TLUI.TLWidgetFocusableData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FTLWidgetFocusableData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseFocusable;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLUseSlateFocus                              UseSlateFocus;                                     // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLFocusablePlatform                          bOnlyGamepadFocus;                                 // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFocusWhenMouseEnter;                              // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelectWhenFocus;                                  // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFocusToChildDefault;                              // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveLastFocusedChild;                             // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveLastFocusedChildWhenDelete;                   // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLSaveLastChildFocus                         SaveLastFocusedChildType;                          // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCategoryFocusByRStick;                            // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETLUseSlateFocusNavigation                    UseSlateFocusNavigation;                           // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRoot;                                             // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBranchNode;                                       // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixFocus;                                         // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRetainFocus;                                      // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLWidgetFocusableData) == 0x000008, "Wrong alignment on FTLWidgetFocusableData");
static_assert(sizeof(FTLWidgetFocusableData) == 0x000018, "Wrong size on FTLWidgetFocusableData");
static_assert(offsetof(FTLWidgetFocusableData, bUseFocusable) == 0x000008, "Member 'FTLWidgetFocusableData::bUseFocusable' has a wrong offset!");
static_assert(offsetof(FTLWidgetFocusableData, bEnable) == 0x000009, "Member 'FTLWidgetFocusableData::bEnable' has a wrong offset!");
static_assert(offsetof(FTLWidgetFocusableData, UseSlateFocus) == 0x00000A, "Member 'FTLWidgetFocusableData::UseSlateFocus' has a wrong offset!");
static_assert(offsetof(FTLWidgetFocusableData, bOnlyGamepadFocus) == 0x00000B, "Member 'FTLWidgetFocusableData::bOnlyGamepadFocus' has a wrong offset!");
static_assert(offsetof(FTLWidgetFocusableData, bFocusWhenMouseEnter) == 0x00000C, "Member 'FTLWidgetFocusableData::bFocusWhenMouseEnter' has a wrong offset!");
static_assert(offsetof(FTLWidgetFocusableData, bSelectWhenFocus) == 0x00000D, "Member 'FTLWidgetFocusableData::bSelectWhenFocus' has a wrong offset!");
static_assert(offsetof(FTLWidgetFocusableData, bFocusToChildDefault) == 0x00000E, "Member 'FTLWidgetFocusableData::bFocusToChildDefault' has a wrong offset!");
static_assert(offsetof(FTLWidgetFocusableData, bSaveLastFocusedChild) == 0x00000F, "Member 'FTLWidgetFocusableData::bSaveLastFocusedChild' has a wrong offset!");
static_assert(offsetof(FTLWidgetFocusableData, bSaveLastFocusedChildWhenDelete) == 0x000010, "Member 'FTLWidgetFocusableData::bSaveLastFocusedChildWhenDelete' has a wrong offset!");
static_assert(offsetof(FTLWidgetFocusableData, SaveLastFocusedChildType) == 0x000011, "Member 'FTLWidgetFocusableData::SaveLastFocusedChildType' has a wrong offset!");
static_assert(offsetof(FTLWidgetFocusableData, bCategoryFocusByRStick) == 0x000012, "Member 'FTLWidgetFocusableData::bCategoryFocusByRStick' has a wrong offset!");
static_assert(offsetof(FTLWidgetFocusableData, UseSlateFocusNavigation) == 0x000013, "Member 'FTLWidgetFocusableData::UseSlateFocusNavigation' has a wrong offset!");
static_assert(offsetof(FTLWidgetFocusableData, bRoot) == 0x000014, "Member 'FTLWidgetFocusableData::bRoot' has a wrong offset!");
static_assert(offsetof(FTLWidgetFocusableData, bBranchNode) == 0x000015, "Member 'FTLWidgetFocusableData::bBranchNode' has a wrong offset!");
static_assert(offsetof(FTLWidgetFocusableData, bFixFocus) == 0x000016, "Member 'FTLWidgetFocusableData::bFixFocus' has a wrong offset!");
static_assert(offsetof(FTLWidgetFocusableData, bRetainFocus) == 0x000017, "Member 'FTLWidgetFocusableData::bRetainFocus' has a wrong offset!");

// ScriptStruct TLUI.TLSlider2DStyle
// 0x03C0 (0x03C8 - 0x0008)
struct FTLSlider2DStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            NormalBarImage;                                    // 0x0008(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoveredBarImage;                                   // 0x0090(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DisabledBarImage;                                  // 0x0118(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            NormalThumbImage;                                  // 0x01A0(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoveredThumbImage;                                 // 0x0228(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DisabledThumbImage;                                // 0x02B0(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         BarThickness;                                      // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CenterMarkImage;                                   // 0x0340(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLSlider2DStyle) == 0x000008, "Wrong alignment on FTLSlider2DStyle");
static_assert(sizeof(FTLSlider2DStyle) == 0x0003C8, "Wrong size on FTLSlider2DStyle");
static_assert(offsetof(FTLSlider2DStyle, NormalBarImage) == 0x000008, "Member 'FTLSlider2DStyle::NormalBarImage' has a wrong offset!");
static_assert(offsetof(FTLSlider2DStyle, HoveredBarImage) == 0x000090, "Member 'FTLSlider2DStyle::HoveredBarImage' has a wrong offset!");
static_assert(offsetof(FTLSlider2DStyle, DisabledBarImage) == 0x000118, "Member 'FTLSlider2DStyle::DisabledBarImage' has a wrong offset!");
static_assert(offsetof(FTLSlider2DStyle, NormalThumbImage) == 0x0001A0, "Member 'FTLSlider2DStyle::NormalThumbImage' has a wrong offset!");
static_assert(offsetof(FTLSlider2DStyle, HoveredThumbImage) == 0x000228, "Member 'FTLSlider2DStyle::HoveredThumbImage' has a wrong offset!");
static_assert(offsetof(FTLSlider2DStyle, DisabledThumbImage) == 0x0002B0, "Member 'FTLSlider2DStyle::DisabledThumbImage' has a wrong offset!");
static_assert(offsetof(FTLSlider2DStyle, BarThickness) == 0x000338, "Member 'FTLSlider2DStyle::BarThickness' has a wrong offset!");
static_assert(offsetof(FTLSlider2DStyle, CenterMarkImage) == 0x000340, "Member 'FTLSlider2DStyle::CenterMarkImage' has a wrong offset!");

// ScriptStruct TLUI.TLProgressSlateBrushInfo
// 0x0148 (0x0148 - 0x0000)
struct FTLProgressSlateBrushInfo final
{
public:
	struct FMargin                                OverlayPadding;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Brush;                                             // 0x0018(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            RenderedCustomMaterialBrush;                       // 0x00A0(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DisabledTint;                                      // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLProgressSlateBrushInfo) == 0x000008, "Wrong alignment on FTLProgressSlateBrushInfo");
static_assert(sizeof(FTLProgressSlateBrushInfo) == 0x000148, "Wrong size on FTLProgressSlateBrushInfo");
static_assert(offsetof(FTLProgressSlateBrushInfo, OverlayPadding) == 0x000000, "Member 'FTLProgressSlateBrushInfo::OverlayPadding' has a wrong offset!");
static_assert(offsetof(FTLProgressSlateBrushInfo, HorizontalAlignment) == 0x000010, "Member 'FTLProgressSlateBrushInfo::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(FTLProgressSlateBrushInfo, VerticalAlignment) == 0x000011, "Member 'FTLProgressSlateBrushInfo::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(FTLProgressSlateBrushInfo, Brush) == 0x000018, "Member 'FTLProgressSlateBrushInfo::Brush' has a wrong offset!");
static_assert(offsetof(FTLProgressSlateBrushInfo, RenderedCustomMaterialBrush) == 0x0000A0, "Member 'FTLProgressSlateBrushInfo::RenderedCustomMaterialBrush' has a wrong offset!");
static_assert(offsetof(FTLProgressSlateBrushInfo, ColorAndOpacity) == 0x000128, "Member 'FTLProgressSlateBrushInfo::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FTLProgressSlateBrushInfo, DisabledTint) == 0x000138, "Member 'FTLProgressSlateBrushInfo::DisabledTint' has a wrong offset!");

// ScriptStruct TLUI.TLWidgetAnimationBind
// 0x0010 (0x0010 - 0x0000)
struct FTLWidgetAnimationBind final
{
public:
	class FName                                   AnimationName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Animation;                                         // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLWidgetAnimationBind) == 0x000008, "Wrong alignment on FTLWidgetAnimationBind");
static_assert(sizeof(FTLWidgetAnimationBind) == 0x000010, "Wrong size on FTLWidgetAnimationBind");
static_assert(offsetof(FTLWidgetAnimationBind, AnimationName) == 0x000000, "Member 'FTLWidgetAnimationBind::AnimationName' has a wrong offset!");
static_assert(offsetof(FTLWidgetAnimationBind, Animation) == 0x000008, "Member 'FTLWidgetAnimationBind::Animation' has a wrong offset!");

// ScriptStruct TLUI.TLViewModelBindgingData
// 0x0010 (0x0010 - 0x0000)
struct FTLViewModelBindgingData final
{
public:
	TWeakObjectPtr<class UTLViewModelBase>        ViewModel;                                         // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLViewModelBindgingData) == 0x000004, "Wrong alignment on FTLViewModelBindgingData");
static_assert(sizeof(FTLViewModelBindgingData) == 0x000010, "Wrong size on FTLViewModelBindgingData");
static_assert(offsetof(FTLViewModelBindgingData, ViewModel) == 0x000000, "Member 'FTLViewModelBindgingData::ViewModel' has a wrong offset!");

// ScriptStruct TLUI.TLViewModelBinding
// 0x0028 (0x0028 - 0x0000)
struct FTLViewModelBinding
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PropertyName;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                OwningWidget;                                      // 0x0010(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTLViewModelBindgingData               BindingData;                                       // 0x0018(0x0010)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTLViewModelBinding) == 0x000008, "Wrong alignment on FTLViewModelBinding");
static_assert(sizeof(FTLViewModelBinding) == 0x000028, "Wrong size on FTLViewModelBinding");
static_assert(offsetof(FTLViewModelBinding, PropertyName) == 0x000008, "Member 'FTLViewModelBinding::PropertyName' has a wrong offset!");
static_assert(offsetof(FTLViewModelBinding, OwningWidget) == 0x000010, "Member 'FTLViewModelBinding::OwningWidget' has a wrong offset!");
static_assert(offsetof(FTLViewModelBinding, BindingData) == 0x000018, "Member 'FTLViewModelBinding::BindingData' has a wrong offset!");

// ScriptStruct TLUI.TLViewModelBindingDataSource
// 0x0000 (0x0028 - 0x0028)
struct FTLViewModelBindingDataSource final : public FTLViewModelBinding
{
};
static_assert(alignof(FTLViewModelBindingDataSource) == 0x000008, "Wrong alignment on FTLViewModelBindingDataSource");
static_assert(sizeof(FTLViewModelBindingDataSource) == 0x000028, "Wrong size on FTLViewModelBindingDataSource");

// ScriptStruct TLUI.TLUIPlatformWidgetSlotData
// 0x0090 (0x0090 - 0x0000)
struct FTLUIPlatformWidgetSlotData final
{
public:
	struct FTLWidgetSlotData                      DefaultData;                                       // 0x0000(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	TMap<ETLUIPlatform, struct FTLWidgetSlotData> UIPlatformDataMap;                                 // 0x0040(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLUIPlatformWidgetSlotData) == 0x000008, "Wrong alignment on FTLUIPlatformWidgetSlotData");
static_assert(sizeof(FTLUIPlatformWidgetSlotData) == 0x000090, "Wrong size on FTLUIPlatformWidgetSlotData");
static_assert(offsetof(FTLUIPlatformWidgetSlotData, DefaultData) == 0x000000, "Member 'FTLUIPlatformWidgetSlotData::DefaultData' has a wrong offset!");
static_assert(offsetof(FTLUIPlatformWidgetSlotData, UIPlatformDataMap) == 0x000040, "Member 'FTLUIPlatformWidgetSlotData::UIPlatformDataMap' has a wrong offset!");

// ScriptStruct TLUI.RichTextStyleRowTL
// 0x0208 (0x0210 - 0x0008)
struct FRichTextStyleRowTL final : public FTableRowBase
{
public:
	struct FTextBlockStyleTL                      TextStyle;                                         // 0x0008(0x0208)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRichTextStyleRowTL) == 0x000008, "Wrong alignment on FRichTextStyleRowTL");
static_assert(sizeof(FRichTextStyleRowTL) == 0x000210, "Wrong size on FRichTextStyleRowTL");
static_assert(offsetof(FRichTextStyleRowTL, TextStyle) == 0x000008, "Member 'FRichTextStyleRowTL::TextStyle' has a wrong offset!");

// ScriptStruct TLUI.EllipsisStyleTL
// 0x0018 (0x0020 - 0x0008)
struct FEllipsisStyleTL final : public FSlateWidgetStyle
{
public:
	bool                                          UseEllipsis;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EllipsisString;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEllipsisStyleTL) == 0x000008, "Wrong alignment on FEllipsisStyleTL");
static_assert(sizeof(FEllipsisStyleTL) == 0x000020, "Wrong size on FEllipsisStyleTL");
static_assert(offsetof(FEllipsisStyleTL, UseEllipsis) == 0x000008, "Member 'FEllipsisStyleTL::UseEllipsis' has a wrong offset!");
static_assert(offsetof(FEllipsisStyleTL, EllipsisString) == 0x000010, "Member 'FEllipsisStyleTL::EllipsisString' has a wrong offset!");

// ScriptStruct TLUI.StrikethroughStyleTL
// 0x00E8 (0x00F0 - 0x0008)
struct FStrikethroughStyleTL final : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            StrikethroughBrush;                                // 0x0008(0x0088)(Edit, NativeAccessSpecifierPublic)
	float                                         StrikethroughThickness;                            // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrikethroughVerticalOffset;                       // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyStrikethroughToAllLines;                      // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int8>                                    LineIndexSetToApplyStrikethrough;                  // 0x00A0(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStrikethroughStyleTL) == 0x000008, "Wrong alignment on FStrikethroughStyleTL");
static_assert(sizeof(FStrikethroughStyleTL) == 0x0000F0, "Wrong size on FStrikethroughStyleTL");
static_assert(offsetof(FStrikethroughStyleTL, StrikethroughBrush) == 0x000008, "Member 'FStrikethroughStyleTL::StrikethroughBrush' has a wrong offset!");
static_assert(offsetof(FStrikethroughStyleTL, StrikethroughThickness) == 0x000090, "Member 'FStrikethroughStyleTL::StrikethroughThickness' has a wrong offset!");
static_assert(offsetof(FStrikethroughStyleTL, StrikethroughVerticalOffset) == 0x000094, "Member 'FStrikethroughStyleTL::StrikethroughVerticalOffset' has a wrong offset!");
static_assert(offsetof(FStrikethroughStyleTL, ApplyStrikethroughToAllLines) == 0x000098, "Member 'FStrikethroughStyleTL::ApplyStrikethroughToAllLines' has a wrong offset!");
static_assert(offsetof(FStrikethroughStyleTL, LineIndexSetToApplyStrikethrough) == 0x0000A0, "Member 'FStrikethroughStyleTL::LineIndexSetToApplyStrikethrough' has a wrong offset!");

// ScriptStruct TLUI.HyperlinkStyleTL
// 0x0498 (0x04A0 - 0x0008)
struct FHyperlinkStyleTL final : public FSlateWidgetStyle
{
public:
	struct FButtonStyle                           UnderlineStyle;                                    // 0x0008(0x0278)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTextBlockStyleTL                      TextStyle;                                         // 0x0280(0x0208)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_498[0x8];                                      // 0x0498(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHyperlinkStyleTL) == 0x000008, "Wrong alignment on FHyperlinkStyleTL");
static_assert(sizeof(FHyperlinkStyleTL) == 0x0004A0, "Wrong size on FHyperlinkStyleTL");
static_assert(offsetof(FHyperlinkStyleTL, UnderlineStyle) == 0x000008, "Member 'FHyperlinkStyleTL::UnderlineStyle' has a wrong offset!");
static_assert(offsetof(FHyperlinkStyleTL, TextStyle) == 0x000280, "Member 'FHyperlinkStyleTL::TextStyle' has a wrong offset!");
static_assert(offsetof(FHyperlinkStyleTL, Padding) == 0x000488, "Member 'FHyperlinkStyleTL::Padding' has a wrong offset!");

// ScriptStruct TLUI.TLAttachedWidget
// 0x0030 (0x0030 - 0x0000)
struct FTLAttachedWidget final
{
public:
	TSoftClassPtr<class UClass>                   PreviewFrameClass;                                 // 0x0000(0x0028)(Edit, DisableEditOnTemplate, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLAttachedWidget) == 0x000008, "Wrong alignment on FTLAttachedWidget");
static_assert(sizeof(FTLAttachedWidget) == 0x000030, "Wrong size on FTLAttachedWidget");
static_assert(offsetof(FTLAttachedWidget, PreviewFrameClass) == 0x000000, "Member 'FTLAttachedWidget::PreviewFrameClass' has a wrong offset!");
static_assert(offsetof(FTLAttachedWidget, bVisible) == 0x000028, "Member 'FTLAttachedWidget::bVisible' has a wrong offset!");

// ScriptStruct TLUI.TLTextBlockStyleStruct
// 0x00C0 (0x00C0 - 0x0000)
struct FTLTextBlockStyleStruct final
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0000(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ColorAndOpacity;                                   // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColorAndOpacity;                             // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Margin;                                            // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         LineHeightPercentage;                              // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomDisabledColor;                           // 0x00AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CustomDisabledColorAndOpacity;                     // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLTextBlockStyleStruct) == 0x000008, "Wrong alignment on FTLTextBlockStyleStruct");
static_assert(sizeof(FTLTextBlockStyleStruct) == 0x0000C0, "Wrong size on FTLTextBlockStyleStruct");
static_assert(offsetof(FTLTextBlockStyleStruct, Font) == 0x000000, "Member 'FTLTextBlockStyleStruct::Font' has a wrong offset!");
static_assert(offsetof(FTLTextBlockStyleStruct, ColorAndOpacity) == 0x000058, "Member 'FTLTextBlockStyleStruct::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FTLTextBlockStyleStruct, ShadowOffset) == 0x000080, "Member 'FTLTextBlockStyleStruct::ShadowOffset' has a wrong offset!");
static_assert(offsetof(FTLTextBlockStyleStruct, ShadowColorAndOpacity) == 0x000088, "Member 'FTLTextBlockStyleStruct::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FTLTextBlockStyleStruct, Margin) == 0x000098, "Member 'FTLTextBlockStyleStruct::Margin' has a wrong offset!");
static_assert(offsetof(FTLTextBlockStyleStruct, LineHeightPercentage) == 0x0000A8, "Member 'FTLTextBlockStyleStruct::LineHeightPercentage' has a wrong offset!");
static_assert(offsetof(FTLTextBlockStyleStruct, bUseCustomDisabledColor) == 0x0000AC, "Member 'FTLTextBlockStyleStruct::bUseCustomDisabledColor' has a wrong offset!");
static_assert(offsetof(FTLTextBlockStyleStruct, CustomDisabledColorAndOpacity) == 0x0000B0, "Member 'FTLTextBlockStyleStruct::CustomDisabledColorAndOpacity' has a wrong offset!");

// ScriptStruct TLUI.TLAutonFocusEffect
// 0x0098 (0x0098 - 0x0000)
struct FTLAutonFocusEffect final
{
public:
	struct FSlateBrush                            AutonFocusImageBrush;                              // 0x0000(0x0088)(Edit, Config, NativeAccessSpecifierPublic)
	struct FMargin                                AutonFocusImageBorder;                             // 0x0088(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLAutonFocusEffect) == 0x000008, "Wrong alignment on FTLAutonFocusEffect");
static_assert(sizeof(FTLAutonFocusEffect) == 0x000098, "Wrong size on FTLAutonFocusEffect");
static_assert(offsetof(FTLAutonFocusEffect, AutonFocusImageBrush) == 0x000000, "Member 'FTLAutonFocusEffect::AutonFocusImageBrush' has a wrong offset!");
static_assert(offsetof(FTLAutonFocusEffect, AutonFocusImageBorder) == 0x000088, "Member 'FTLAutonFocusEffect::AutonFocusImageBorder' has a wrong offset!");

// ScriptStruct TLUI.TLWidgetBindingImageColorAndOpacity
// 0x0010 (0x0040 - 0x0030)
struct FTLWidgetBindingImageColorAndOpacity final : public FTLWidgetBinding
{
public:
	TDelegate<void(class UTLImage* Widget)>       OnUpdateColorAndOpacity;                           // 0x0030(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLWidgetBindingImageColorAndOpacity) == 0x000008, "Wrong alignment on FTLWidgetBindingImageColorAndOpacity");
static_assert(sizeof(FTLWidgetBindingImageColorAndOpacity) == 0x000040, "Wrong size on FTLWidgetBindingImageColorAndOpacity");
static_assert(offsetof(FTLWidgetBindingImageColorAndOpacity, OnUpdateColorAndOpacity) == 0x000030, "Member 'FTLWidgetBindingImageColorAndOpacity::OnUpdateColorAndOpacity' has a wrong offset!");

// ScriptStruct TLUI.TLWidgetBindingImageBrush
// 0x0018 (0x0048 - 0x0030)
struct FTLWidgetBindingImageBrush final : public FTLWidgetBinding
{
public:
	uint8                                         Pad_30[0x4];                                       // 0x0030(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UTLImage* Widget)>       OnUpdateImageBrush;                                // 0x0034(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLWidgetBindingImageBrush) == 0x000008, "Wrong alignment on FTLWidgetBindingImageBrush");
static_assert(sizeof(FTLWidgetBindingImageBrush) == 0x000048, "Wrong size on FTLWidgetBindingImageBrush");
static_assert(offsetof(FTLWidgetBindingImageBrush, OnUpdateImageBrush) == 0x000034, "Member 'FTLWidgetBindingImageBrush::OnUpdateImageBrush' has a wrong offset!");

// ScriptStruct TLUI.TLWidgetBindingListChanged
// 0x0010 (0x0040 - 0x0030)
struct FTLWidgetBindingListChanged final : public FTLWidgetBinding
{
public:
	TDelegate<void(class UWidget* Widget)>        OnUpdateListChanged;                               // 0x0030(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLWidgetBindingListChanged) == 0x000008, "Wrong alignment on FTLWidgetBindingListChanged");
static_assert(sizeof(FTLWidgetBindingListChanged) == 0x000040, "Wrong size on FTLWidgetBindingListChanged");
static_assert(offsetof(FTLWidgetBindingListChanged, OnUpdateListChanged) == 0x000030, "Member 'FTLWidgetBindingListChanged::OnUpdateListChanged' has a wrong offset!");

// ScriptStruct TLUI.TLWidgetBindingPercent
// 0x0010 (0x0040 - 0x0030)
struct FTLWidgetBindingPercent final : public FTLWidgetBinding
{
public:
	TDelegate<void(class UTLProgressBar* Widget)> OnUpdatePercent;                                   // 0x0030(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLWidgetBindingPercent) == 0x000008, "Wrong alignment on FTLWidgetBindingPercent");
static_assert(sizeof(FTLWidgetBindingPercent) == 0x000040, "Wrong size on FTLWidgetBindingPercent");
static_assert(offsetof(FTLWidgetBindingPercent, OnUpdatePercent) == 0x000030, "Member 'FTLWidgetBindingPercent::OnUpdatePercent' has a wrong offset!");

// ScriptStruct TLUI.TLWidgetBindingTextColorWithColorTable
// 0x0010 (0x0040 - 0x0030)
struct FTLWidgetBindingTextColorWithColorTable final : public FTLWidgetBinding
{
public:
	TDelegate<void(class UTLTextBlock* Widget)>   OnUpdateColorWithColorTable;                       // 0x0030(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLWidgetBindingTextColorWithColorTable) == 0x000008, "Wrong alignment on FTLWidgetBindingTextColorWithColorTable");
static_assert(sizeof(FTLWidgetBindingTextColorWithColorTable) == 0x000040, "Wrong size on FTLWidgetBindingTextColorWithColorTable");
static_assert(offsetof(FTLWidgetBindingTextColorWithColorTable, OnUpdateColorWithColorTable) == 0x000030, "Member 'FTLWidgetBindingTextColorWithColorTable::OnUpdateColorWithColorTable' has a wrong offset!");

// ScriptStruct TLUI.TLWidgetBindingTextColorAndOpacity
// 0x0010 (0x0040 - 0x0030)
struct FTLWidgetBindingTextColorAndOpacity final : public FTLWidgetBinding
{
public:
	TDelegate<void(class UTLTextBlock* Widget)>   OnUpdateColorAndOpacity;                           // 0x0030(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLWidgetBindingTextColorAndOpacity) == 0x000008, "Wrong alignment on FTLWidgetBindingTextColorAndOpacity");
static_assert(sizeof(FTLWidgetBindingTextColorAndOpacity) == 0x000040, "Wrong size on FTLWidgetBindingTextColorAndOpacity");
static_assert(offsetof(FTLWidgetBindingTextColorAndOpacity, OnUpdateColorAndOpacity) == 0x000030, "Member 'FTLWidgetBindingTextColorAndOpacity::OnUpdateColorAndOpacity' has a wrong offset!");

// ScriptStruct TLUI.TLWidgetBindingTextBlockStylePath
// 0x0010 (0x0040 - 0x0030)
struct FTLWidgetBindingTextBlockStylePath final : public FTLWidgetBinding
{
public:
	TDelegate<void(class UTLTextBlock* Widget)>   OnUpdateTextBlockStylePath;                        // 0x0030(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLWidgetBindingTextBlockStylePath) == 0x000008, "Wrong alignment on FTLWidgetBindingTextBlockStylePath");
static_assert(sizeof(FTLWidgetBindingTextBlockStylePath) == 0x000040, "Wrong size on FTLWidgetBindingTextBlockStylePath");
static_assert(offsetof(FTLWidgetBindingTextBlockStylePath, OnUpdateTextBlockStylePath) == 0x000030, "Member 'FTLWidgetBindingTextBlockStylePath::OnUpdateTextBlockStylePath' has a wrong offset!");

// ScriptStruct TLUI.TLWidgetBindingTextBlockStyleFromTable
// 0x0010 (0x0040 - 0x0030)
struct FTLWidgetBindingTextBlockStyleFromTable final : public FTLWidgetBinding
{
public:
	TDelegate<void(class UTLTextBlock* Widget)>   OnUpdateTextBlockStyleFromTable;                   // 0x0030(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTLWidgetBindingTextBlockStyleFromTable) == 0x000008, "Wrong alignment on FTLWidgetBindingTextBlockStyleFromTable");
static_assert(sizeof(FTLWidgetBindingTextBlockStyleFromTable) == 0x000040, "Wrong size on FTLWidgetBindingTextBlockStyleFromTable");
static_assert(offsetof(FTLWidgetBindingTextBlockStyleFromTable, OnUpdateTextBlockStyleFromTable) == 0x000030, "Member 'FTLWidgetBindingTextBlockStyleFromTable::OnUpdateTextBlockStyleFromTable' has a wrong offset!");

// ScriptStruct TLUI.TLWidgetBindingTextTime
// 0x0018 (0x0048 - 0x0030)
struct FTLWidgetBindingTextTime final : public FTLWidgetBinding
{
public:
	uint8                                         Pad_30[0x4];                                       // 0x0030(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UTLTextBlock* Widget)>   OnUpdateTextTime;                                  // 0x0034(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTLWidgetBindingTextTime) == 0x000008, "Wrong alignment on FTLWidgetBindingTextTime");
static_assert(sizeof(FTLWidgetBindingTextTime) == 0x000048, "Wrong size on FTLWidgetBindingTextTime");
static_assert(offsetof(FTLWidgetBindingTextTime, OnUpdateTextTime) == 0x000034, "Member 'FTLWidgetBindingTextTime::OnUpdateTextTime' has a wrong offset!");

}

