#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DamageFloaterGroup_Critical_Number

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "TLClient_classes.hpp"
#include "TLScheme_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_DamageFloaterGroup_Critical_Number.BP_DamageFloaterGroup_Critical_Number_C
// 0x0178 (0x0E80 - 0x0D08)
class UBP_DamageFloaterGroup_Critical_Number_C final : public UTLUserWidgetFloater
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0D08(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       DoubleCri_MyPC_Skill;                              // 0x0D10(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DoubleCri_MyPC;                                    // 0x0D18(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DoubleCri_Skill;                                   // 0x0D20(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DoubleCri_Default;                                 // 0x0D28(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Double_MyPC_Skill;                                 // 0x0D30(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Double_MyPC;                                       // 0x0D38(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Double_Skill;                                      // 0x0D40(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Double_Default;                                    // 0x0D48(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Critical_MyPC_Skill;                               // 0x0D50(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Critical_MyPC;                                     // 0x0D58(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Critical_Skill;                                    // 0x0D60(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Critical_Default;                                  // 0x0D68(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           DamageRot_Panel;                                   // 0x0D70(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               DamF_RadialGlow;                                   // 0x0D78(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               DamF_RadialGlow_N;                                 // 0x0D80(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               IconAbnormal;                                      // 0x0D88(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               IconSector;                                        // 0x0D90(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               LightLine_1;                                       // 0x0D98(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               LightLine_2;                                       // 0x0DA0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Pos_Panel;                                         // 0x0DA8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               Ptc_DcritA;                                        // 0x0DB0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLCanvasPanel*                         Rot_Panel;                                         // 0x0DB8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLCanvasPanel*                         Shake_Panel;                                       // 0x0DC0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLTextBlock*                           Text_double;                                       // 0x0DC8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLScaleBox*                            TLScaleBox_x2;                                     // 0x0DD0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLTextBlock*                           Txt_abnormalBreak;                                 // 0x0DD8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLTextBlock*                           Txt_DamageNum;                                     // 0x0DE0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          Float_Type;                                        // 0x0DE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DE9[0x7];                                      // 0x0DE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoftObjectPath>                Path_Critical_TextStyleSet;                        // 0x0DF0(0x0010)(Edit, BlueprintVisible)
	TArray<struct FSoftObjectPath>                Path_Double_TextStyleSet;                          // 0x0E00(0x0010)(Edit, BlueprintVisible)
	TArray<struct FSoftObjectPath>                Path_DoubleCritical_TextStyleSet;                  // 0x0E10(0x0010)(Edit, BlueprintVisible)
	TArray<struct FSoftObjectPath>                Path_Doublex2_TextStyleSet;                        // 0x0E20(0x0010)(Edit, BlueprintVisible)
	TArray<struct FSoftObjectPath>                Path_DoubleCritx2_TextStyleSet;                    // 0x0E30(0x0010)(Edit, BlueprintVisible)
	struct FSoftObjectPath                        Path_Ptc_Crit;                                     // 0x0E40(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSoftObjectPath                        Path_Ptc_Double;                                   // 0x0E58(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FSoftObjectPath>                Path_LightLine_SpriteSet;                          // 0x0E70(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_DamageFloaterGroup_Critical_Number(int32 EntryPoint);
	void OnBreak();
	void OnEmit(bool bInPrimeSkill, EHpAbnormalStatus AbnormalStatus, bool bInSuccessByAccuracy, EFloaterCategory FloaterCategory, bool IsMyPc);
	void Construct();
	void PreConstruct(bool IsDesignTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DamageFloaterGroup_Critical_Number_C">();
	}
	static class UBP_DamageFloaterGroup_Critical_Number_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_DamageFloaterGroup_Critical_Number_C>();
	}
};
static_assert(alignof(UBP_DamageFloaterGroup_Critical_Number_C) == 0x000008, "Wrong alignment on UBP_DamageFloaterGroup_Critical_Number_C");
static_assert(sizeof(UBP_DamageFloaterGroup_Critical_Number_C) == 0x000E80, "Wrong size on UBP_DamageFloaterGroup_Critical_Number_C");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, UberGraphFrame) == 0x000D08, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, DoubleCri_MyPC_Skill) == 0x000D10, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::DoubleCri_MyPC_Skill' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, DoubleCri_MyPC) == 0x000D18, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::DoubleCri_MyPC' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, DoubleCri_Skill) == 0x000D20, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::DoubleCri_Skill' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, DoubleCri_Default) == 0x000D28, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::DoubleCri_Default' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Double_MyPC_Skill) == 0x000D30, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Double_MyPC_Skill' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Double_MyPC) == 0x000D38, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Double_MyPC' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Double_Skill) == 0x000D40, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Double_Skill' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Double_Default) == 0x000D48, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Double_Default' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Critical_MyPC_Skill) == 0x000D50, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Critical_MyPC_Skill' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Critical_MyPC) == 0x000D58, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Critical_MyPC' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Critical_Skill) == 0x000D60, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Critical_Skill' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Critical_Default) == 0x000D68, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Critical_Default' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, DamageRot_Panel) == 0x000D70, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::DamageRot_Panel' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, DamF_RadialGlow) == 0x000D78, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::DamF_RadialGlow' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, DamF_RadialGlow_N) == 0x000D80, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::DamF_RadialGlow_N' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, IconAbnormal) == 0x000D88, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::IconAbnormal' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, IconSector) == 0x000D90, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::IconSector' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, LightLine_1) == 0x000D98, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::LightLine_1' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, LightLine_2) == 0x000DA0, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::LightLine_2' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Pos_Panel) == 0x000DA8, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Pos_Panel' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Ptc_DcritA) == 0x000DB0, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Ptc_DcritA' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Rot_Panel) == 0x000DB8, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Rot_Panel' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Shake_Panel) == 0x000DC0, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Shake_Panel' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Text_double) == 0x000DC8, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Text_double' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, TLScaleBox_x2) == 0x000DD0, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::TLScaleBox_x2' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Txt_abnormalBreak) == 0x000DD8, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Txt_abnormalBreak' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Txt_DamageNum) == 0x000DE0, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Txt_DamageNum' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Float_Type) == 0x000DE8, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Float_Type' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Path_Critical_TextStyleSet) == 0x000DF0, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Path_Critical_TextStyleSet' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Path_Double_TextStyleSet) == 0x000E00, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Path_Double_TextStyleSet' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Path_DoubleCritical_TextStyleSet) == 0x000E10, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Path_DoubleCritical_TextStyleSet' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Path_Doublex2_TextStyleSet) == 0x000E20, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Path_Doublex2_TextStyleSet' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Path_DoubleCritx2_TextStyleSet) == 0x000E30, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Path_DoubleCritx2_TextStyleSet' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Path_Ptc_Crit) == 0x000E40, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Path_Ptc_Crit' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Path_Ptc_Double) == 0x000E58, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Path_Ptc_Double' has a wrong offset!");
static_assert(offsetof(UBP_DamageFloaterGroup_Critical_Number_C, Path_LightLine_SpriteSet) == 0x000E70, "Member 'UBP_DamageFloaterGroup_Critical_Number_C::Path_LightLine_SpriteSet' has a wrong offset!");

}

