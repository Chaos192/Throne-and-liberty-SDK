#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkillSlot_Active

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "TLScheme_structs.hpp"
#include "TLClient_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_SkillSlot_Active.BP_SkillSlot_Active_C
// 0x01D8 (0x0E40 - 0x0C68)
class UBP_SkillSlot_Active_C final : public UTLUserWidgetIcon
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0C68(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Unhover;                                           // 0x0C70(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hover;                                             // 0x0C78(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UTLImage*                               basic;                                             // 0x0C80(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               DimmedImage;                                       // 0x0C88(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               Equip;                                             // 0x0C90(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               Equip_Mat;                                         // 0x0C98(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               HoverImage;                                        // 0x0CA0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               Icon;                                              // 0x0CA8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               MaskTexture;                                       // 0x0CB0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLCanvasPanel*                         TLCanvasPanel_1;                                   // 0x0CB8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTLImage*                               Unusable;                                          // 0x0CC0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	ETLSkillIconType                              SkillType;                                         // 0x0CC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_CC9[0x3];                                      // 0x0CC9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Equip_Mat_Opatcity;                                // 0x0CCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Active_MaskTexture;                                // 0x0CD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        Active_BasicBorderSprite;                          // 0x0CD8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        Active_EquipSprite;                                // 0x0CF0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class UTexture2D*                             Active_EquiptMaskTexture;                          // 0x0D08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                ActiveEquipCusMat;                                 // 0x0D10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        Active_Dimmed;                                     // 0x0D18(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        Active_Hover;                                      // 0x0D30(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class UTexture2D*                             Passive_MaskTexture;                               // 0x0D48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        Passive_BasicBorderSprite;                         // 0x0D50(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        Passive_EquipSprite;                               // 0x0D68(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class UTexture2D*                             Passive_EquiptMaskTexture;                         // 0x0D80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                PassiveEquipCusMat;                                // 0x0D88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        Passive_Dimmed;                                    // 0x0D90(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        Passive_Hover;                                     // 0x0DA8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class UTexture2D*                             Special_MaskTexture;                               // 0x0DC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        Special_BasicBorderSprite;                         // 0x0DC8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        Special_EquipSprite;                               // 0x0DE0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class UTexture2D*                             Special_EquiptMaskTexture;                         // 0x0DF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                SpecialEquipCusMat;                                // 0x0E00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        Special_Dimmed;                                    // 0x0E08(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        Special_Hover;                                     // 0x0E20(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	ESkillGrade                                   SkillGrade;                                        // 0x0E38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SkillSlot_Active(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void ApplySkillTypeImpl(class UTexture2D* MaskTexture_0, const struct FSoftObjectPath& BasicBorderSprite, const struct FSoftObjectPath& EquipSprite, class UTexture2D* EquipMaskTexture, class UObject* EquipCustomMaterial, const struct FSoftObjectPath& DimmedSprite, const struct FSoftObjectPath& HoverSprite, class UTexture2D* GradeMask);
	void ApplySkillType();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SkillSlot_Active_C">();
	}
	static class UBP_SkillSlot_Active_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_SkillSlot_Active_C>();
	}
};
static_assert(alignof(UBP_SkillSlot_Active_C) == 0x000008, "Wrong alignment on UBP_SkillSlot_Active_C");
static_assert(sizeof(UBP_SkillSlot_Active_C) == 0x000E40, "Wrong size on UBP_SkillSlot_Active_C");
static_assert(offsetof(UBP_SkillSlot_Active_C, UberGraphFrame) == 0x000C68, "Member 'UBP_SkillSlot_Active_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Unhover) == 0x000C70, "Member 'UBP_SkillSlot_Active_C::Unhover' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Hover) == 0x000C78, "Member 'UBP_SkillSlot_Active_C::Hover' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, basic) == 0x000C80, "Member 'UBP_SkillSlot_Active_C::basic' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, DimmedImage) == 0x000C88, "Member 'UBP_SkillSlot_Active_C::DimmedImage' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Equip) == 0x000C90, "Member 'UBP_SkillSlot_Active_C::Equip' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Equip_Mat) == 0x000C98, "Member 'UBP_SkillSlot_Active_C::Equip_Mat' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, HoverImage) == 0x000CA0, "Member 'UBP_SkillSlot_Active_C::HoverImage' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Icon) == 0x000CA8, "Member 'UBP_SkillSlot_Active_C::Icon' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, MaskTexture) == 0x000CB0, "Member 'UBP_SkillSlot_Active_C::MaskTexture' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, TLCanvasPanel_1) == 0x000CB8, "Member 'UBP_SkillSlot_Active_C::TLCanvasPanel_1' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Unusable) == 0x000CC0, "Member 'UBP_SkillSlot_Active_C::Unusable' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, SkillType) == 0x000CC8, "Member 'UBP_SkillSlot_Active_C::SkillType' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Equip_Mat_Opatcity) == 0x000CCC, "Member 'UBP_SkillSlot_Active_C::Equip_Mat_Opatcity' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Active_MaskTexture) == 0x000CD0, "Member 'UBP_SkillSlot_Active_C::Active_MaskTexture' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Active_BasicBorderSprite) == 0x000CD8, "Member 'UBP_SkillSlot_Active_C::Active_BasicBorderSprite' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Active_EquipSprite) == 0x000CF0, "Member 'UBP_SkillSlot_Active_C::Active_EquipSprite' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Active_EquiptMaskTexture) == 0x000D08, "Member 'UBP_SkillSlot_Active_C::Active_EquiptMaskTexture' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, ActiveEquipCusMat) == 0x000D10, "Member 'UBP_SkillSlot_Active_C::ActiveEquipCusMat' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Active_Dimmed) == 0x000D18, "Member 'UBP_SkillSlot_Active_C::Active_Dimmed' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Active_Hover) == 0x000D30, "Member 'UBP_SkillSlot_Active_C::Active_Hover' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Passive_MaskTexture) == 0x000D48, "Member 'UBP_SkillSlot_Active_C::Passive_MaskTexture' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Passive_BasicBorderSprite) == 0x000D50, "Member 'UBP_SkillSlot_Active_C::Passive_BasicBorderSprite' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Passive_EquipSprite) == 0x000D68, "Member 'UBP_SkillSlot_Active_C::Passive_EquipSprite' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Passive_EquiptMaskTexture) == 0x000D80, "Member 'UBP_SkillSlot_Active_C::Passive_EquiptMaskTexture' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, PassiveEquipCusMat) == 0x000D88, "Member 'UBP_SkillSlot_Active_C::PassiveEquipCusMat' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Passive_Dimmed) == 0x000D90, "Member 'UBP_SkillSlot_Active_C::Passive_Dimmed' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Passive_Hover) == 0x000DA8, "Member 'UBP_SkillSlot_Active_C::Passive_Hover' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Special_MaskTexture) == 0x000DC0, "Member 'UBP_SkillSlot_Active_C::Special_MaskTexture' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Special_BasicBorderSprite) == 0x000DC8, "Member 'UBP_SkillSlot_Active_C::Special_BasicBorderSprite' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Special_EquipSprite) == 0x000DE0, "Member 'UBP_SkillSlot_Active_C::Special_EquipSprite' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Special_EquiptMaskTexture) == 0x000DF8, "Member 'UBP_SkillSlot_Active_C::Special_EquiptMaskTexture' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, SpecialEquipCusMat) == 0x000E00, "Member 'UBP_SkillSlot_Active_C::SpecialEquipCusMat' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Special_Dimmed) == 0x000E08, "Member 'UBP_SkillSlot_Active_C::Special_Dimmed' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, Special_Hover) == 0x000E20, "Member 'UBP_SkillSlot_Active_C::Special_Hover' has a wrong offset!");
static_assert(offsetof(UBP_SkillSlot_Active_C, SkillGrade) == 0x000E38, "Member 'UBP_SkillSlot_Active_C::SkillGrade' has a wrong offset!");

}

