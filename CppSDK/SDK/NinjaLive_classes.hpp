#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NinjaLive

#include "Basic.hpp"

#include "InactiveBehaviour_Enum_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "UserInput_Enum_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass NinjaLive.NinjaLive_C
// 0x0278 (0x04A8 - 0x0230)
class ANinjaLive_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNinjaLiveComponent_C*                  NinjaLiveComponent;                                // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InteractionVolume;                                 // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ActivationVolume;                                  // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialBillboardComponent*            EditorIcon;                                        // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TraceMesh;                                         // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 RT_DensityPreview;                                 // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      InactiveGrayMaterial;                              // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableBlueprint;                                  // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeCounterForBrush;                               // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MousePressed;                                      // 0x0284(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShowTraceMeshInEditor;                             // 0x0285(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_286[0x2];                                      // 0x0286(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TraceMeshSize;                                     // 0x0288(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EUserInput_Enum                               UserInputBasedInteraction;                         // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverlapBasedInteraction;                           // 0x0295(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_296[0x2];                                      // 0x0296(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ANinjaLive_C*>                   NinjaLIVECollisionExclude;                         // 0x0298(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         Time;                                              // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SimActivatedByPawnProximity;                       // 0x02AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShowActivationVolumeInEditor;                      // 0x02AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AE[0x2];                                      // 0x02AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ActivationVolumeSize;                              // 0x02B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         ActivatorProximityCheckFrequency;                  // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             ActivatorType;                                     // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Activator;                                         // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PawnInsideActivationBounds;                        // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InitDone;                                          // 0x02D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BeginPlaySupressed;                                // 0x02D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseTraceMeshAsInteractionVolume;                   // 0x02D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShowInteractionVolumeInEditor;                     // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InteractionVolumeSize;                             // 0x02D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  MultipleTouchLookup;                               // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TickRateCustom;                                    // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    InteractionVolumeTemplate;                         // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      OverlapFilterInclusiveObjType;                     // 0x0308(0x0010)(Edit, BlueprintVisible)
	TMap<ECollisionChannel, EObjectTypeQuery>     OverlapFilterInclusiveCollisionType;               // 0x0318(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AutoExcludeLargeOverlappingObjects;                // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ExcludeSpecificActorsFromOverlap;                  // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class FString>                         OverlapFilterInclusiveBoneNamePartial;             // 0x0380(0x0010)(Edit, BlueprintVisible)
	TArray<class FName>                           OverlapFilterInclusiveBoneNameExact;               // 0x0390(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	EInactiveBehaviour_Enum                       TraceMeshInactiveBehaviour;                        // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ActivationEventsDebugPrint;                        // 0x03A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SimContainerCapacityWarning;                       // 0x03A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SaveDebugTextToLog;                                // 0x03A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         DebugTextLifeTimeLength;                           // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OverlappingSkeletalMesh;                           // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrushStrengthTemp2;                                // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputFeedbackTemp1;                                // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableAndNotTickBlock;                            // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            OverlappingComponents;                             // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class AActor*>                         OverlappingActors;                                 // 0x03D0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMap<int32, class UPrimitiveComponent*>       SkeletalMeshMinusTempArrayMinusPairs;              // 0x03E0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class AActor*>                         OverlappingActorsInitial;                          // 0x0430(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OwnerRePlayEvent;                                  // 0x0440(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          OverrideComponentVariables;                        // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AutoConnectToMemoryPoolMinusIFMinusFound;          // 0x0451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_452[0x2];                                      // 0x0452(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutputFilterMaterialIndex;                         // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowLODdebugMessagesOnScreen;                      // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_459[0x3];                                      // 0x0459(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GlobalBrushScale;                                  // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LOD1MinusReduceIterations;                         // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LOD2MinusReduceSamplingFPS;                        // 0x0461(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LOD3MinusReduceCollisionAmount;                    // 0x0462(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_463[0x1];                                      // 0x0463(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinSamplingFPS;                                    // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LODMinusFarBound;                                  // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LODMinusNearBound;                                 // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DownscaleCollisionPainterResolution;               // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DownscalePressureResolution;                       // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SingleTargetMode;                                  // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InitialActorsProcessed;                            // 0x0479(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47A[0x6];                                      // 0x047A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         FoundSkeletalMeshComponents;                       // 0x0480(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         FoundSkeletalMeshCompLastIndex;                    // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnActivatedByPawnProximity;                        // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void OwnerRePlayEvent__DelegateSignature();
	void OnActivatedByPawnProximity__DelegateSignature();
	void ExecuteUbergraph_NinjaLive(int32 EntryPoint);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void EndOverlapComponent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BeginOverlapComponent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void RePlay();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds_0);
	void LiveFluidParams(float BrushSize);
	void LiveActivation(class FName ParamName, float FadeTimeOfBrush, float FadeTimeOfCanvas);
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpTchEvt_Pressed(ETouchIndex FingerIndex, const struct FVector& Location);
	void InpTchEvt_Released(ETouchIndex FingerIndex, const struct FVector& Location);
	void UserConstructionScript();
	void ActorDestroyed(class AActor* Actor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"NinjaLive_C">();
	}
	static class ANinjaLive_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANinjaLive_C>();
	}
};
static_assert(alignof(ANinjaLive_C) == 0x000008, "Wrong alignment on ANinjaLive_C");
static_assert(sizeof(ANinjaLive_C) == 0x0004A8, "Wrong size on ANinjaLive_C");
static_assert(offsetof(ANinjaLive_C, UberGraphFrame) == 0x000230, "Member 'ANinjaLive_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, NinjaLiveComponent) == 0x000238, "Member 'ANinjaLive_C::NinjaLiveComponent' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, InteractionVolume) == 0x000240, "Member 'ANinjaLive_C::InteractionVolume' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, ActivationVolume) == 0x000248, "Member 'ANinjaLive_C::ActivationVolume' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, EditorIcon) == 0x000250, "Member 'ANinjaLive_C::EditorIcon' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, TraceMesh) == 0x000258, "Member 'ANinjaLive_C::TraceMesh' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, Root) == 0x000260, "Member 'ANinjaLive_C::Root' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, RT_DensityPreview) == 0x000268, "Member 'ANinjaLive_C::RT_DensityPreview' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, InactiveGrayMaterial) == 0x000270, "Member 'ANinjaLive_C::InactiveGrayMaterial' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, DisableBlueprint) == 0x000278, "Member 'ANinjaLive_C::DisableBlueprint' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, TimeCounterForBrush) == 0x00027C, "Member 'ANinjaLive_C::TimeCounterForBrush' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, DeltaSeconds) == 0x000280, "Member 'ANinjaLive_C::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, MousePressed) == 0x000284, "Member 'ANinjaLive_C::MousePressed' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, ShowTraceMeshInEditor) == 0x000285, "Member 'ANinjaLive_C::ShowTraceMeshInEditor' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, TraceMeshSize) == 0x000288, "Member 'ANinjaLive_C::TraceMeshSize' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, UserInputBasedInteraction) == 0x000294, "Member 'ANinjaLive_C::UserInputBasedInteraction' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverlapBasedInteraction) == 0x000295, "Member 'ANinjaLive_C::OverlapBasedInteraction' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, NinjaLIVECollisionExclude) == 0x000298, "Member 'ANinjaLive_C::NinjaLIVECollisionExclude' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, Time) == 0x0002A8, "Member 'ANinjaLive_C::Time' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, SimActivatedByPawnProximity) == 0x0002AC, "Member 'ANinjaLive_C::SimActivatedByPawnProximity' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, ShowActivationVolumeInEditor) == 0x0002AD, "Member 'ANinjaLive_C::ShowActivationVolumeInEditor' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, ActivationVolumeSize) == 0x0002B0, "Member 'ANinjaLive_C::ActivationVolumeSize' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, ActivatorProximityCheckFrequency) == 0x0002BC, "Member 'ANinjaLive_C::ActivatorProximityCheckFrequency' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, ActivatorType) == 0x0002C0, "Member 'ANinjaLive_C::ActivatorType' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, Activator) == 0x0002C8, "Member 'ANinjaLive_C::Activator' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, PawnInsideActivationBounds) == 0x0002D0, "Member 'ANinjaLive_C::PawnInsideActivationBounds' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, InitDone) == 0x0002D1, "Member 'ANinjaLive_C::InitDone' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, BeginPlaySupressed) == 0x0002D2, "Member 'ANinjaLive_C::BeginPlaySupressed' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, UseTraceMeshAsInteractionVolume) == 0x0002D3, "Member 'ANinjaLive_C::UseTraceMeshAsInteractionVolume' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, ShowInteractionVolumeInEditor) == 0x0002D4, "Member 'ANinjaLive_C::ShowInteractionVolumeInEditor' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, InteractionVolumeSize) == 0x0002D8, "Member 'ANinjaLive_C::InteractionVolumeSize' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, MultipleTouchLookup) == 0x0002E8, "Member 'ANinjaLive_C::MultipleTouchLookup' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, TickRateCustom) == 0x0002F8, "Member 'ANinjaLive_C::TickRateCustom' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, InteractionVolumeTemplate) == 0x000300, "Member 'ANinjaLive_C::InteractionVolumeTemplate' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverlapFilterInclusiveObjType) == 0x000308, "Member 'ANinjaLive_C::OverlapFilterInclusiveObjType' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverlapFilterInclusiveCollisionType) == 0x000318, "Member 'ANinjaLive_C::OverlapFilterInclusiveCollisionType' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, AutoExcludeLargeOverlappingObjects) == 0x000368, "Member 'ANinjaLive_C::AutoExcludeLargeOverlappingObjects' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, ExcludeSpecificActorsFromOverlap) == 0x000370, "Member 'ANinjaLive_C::ExcludeSpecificActorsFromOverlap' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverlapFilterInclusiveBoneNamePartial) == 0x000380, "Member 'ANinjaLive_C::OverlapFilterInclusiveBoneNamePartial' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverlapFilterInclusiveBoneNameExact) == 0x000390, "Member 'ANinjaLive_C::OverlapFilterInclusiveBoneNameExact' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, TraceMeshInactiveBehaviour) == 0x0003A0, "Member 'ANinjaLive_C::TraceMeshInactiveBehaviour' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, ActivationEventsDebugPrint) == 0x0003A1, "Member 'ANinjaLive_C::ActivationEventsDebugPrint' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, SimContainerCapacityWarning) == 0x0003A2, "Member 'ANinjaLive_C::SimContainerCapacityWarning' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, SaveDebugTextToLog) == 0x0003A3, "Member 'ANinjaLive_C::SaveDebugTextToLog' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, DebugTextLifeTimeLength) == 0x0003A4, "Member 'ANinjaLive_C::DebugTextLifeTimeLength' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverlappingSkeletalMesh) == 0x0003A8, "Member 'ANinjaLive_C::OverlappingSkeletalMesh' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, BrushStrengthTemp2) == 0x0003B0, "Member 'ANinjaLive_C::BrushStrengthTemp2' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, InputFeedbackTemp1) == 0x0003B4, "Member 'ANinjaLive_C::InputFeedbackTemp1' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, DisableAndNotTickBlock) == 0x0003B8, "Member 'ANinjaLive_C::DisableAndNotTickBlock' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverlappingComponents) == 0x0003C0, "Member 'ANinjaLive_C::OverlappingComponents' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverlappingActors) == 0x0003D0, "Member 'ANinjaLive_C::OverlappingActors' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, SkeletalMeshMinusTempArrayMinusPairs) == 0x0003E0, "Member 'ANinjaLive_C::SkeletalMeshMinusTempArrayMinusPairs' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverlappingActorsInitial) == 0x000430, "Member 'ANinjaLive_C::OverlappingActorsInitial' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OwnerRePlayEvent) == 0x000440, "Member 'ANinjaLive_C::OwnerRePlayEvent' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverrideComponentVariables) == 0x000450, "Member 'ANinjaLive_C::OverrideComponentVariables' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, AutoConnectToMemoryPoolMinusIFMinusFound) == 0x000451, "Member 'ANinjaLive_C::AutoConnectToMemoryPoolMinusIFMinusFound' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OutputFilterMaterialIndex) == 0x000454, "Member 'ANinjaLive_C::OutputFilterMaterialIndex' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, ShowLODdebugMessagesOnScreen) == 0x000458, "Member 'ANinjaLive_C::ShowLODdebugMessagesOnScreen' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, GlobalBrushScale) == 0x00045C, "Member 'ANinjaLive_C::GlobalBrushScale' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, LOD1MinusReduceIterations) == 0x000460, "Member 'ANinjaLive_C::LOD1MinusReduceIterations' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, LOD2MinusReduceSamplingFPS) == 0x000461, "Member 'ANinjaLive_C::LOD2MinusReduceSamplingFPS' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, LOD3MinusReduceCollisionAmount) == 0x000462, "Member 'ANinjaLive_C::LOD3MinusReduceCollisionAmount' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, MinSamplingFPS) == 0x000464, "Member 'ANinjaLive_C::MinSamplingFPS' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, LODMinusFarBound) == 0x000468, "Member 'ANinjaLive_C::LODMinusFarBound' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, LODMinusNearBound) == 0x00046C, "Member 'ANinjaLive_C::LODMinusNearBound' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, DownscaleCollisionPainterResolution) == 0x000470, "Member 'ANinjaLive_C::DownscaleCollisionPainterResolution' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, DownscalePressureResolution) == 0x000474, "Member 'ANinjaLive_C::DownscalePressureResolution' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, SingleTargetMode) == 0x000478, "Member 'ANinjaLive_C::SingleTargetMode' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, InitialActorsProcessed) == 0x000479, "Member 'ANinjaLive_C::InitialActorsProcessed' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, FoundSkeletalMeshComponents) == 0x000480, "Member 'ANinjaLive_C::FoundSkeletalMeshComponents' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, FoundSkeletalMeshCompLastIndex) == 0x000490, "Member 'ANinjaLive_C::FoundSkeletalMeshCompLastIndex' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OnActivatedByPawnProximity) == 0x000498, "Member 'ANinjaLive_C::OnActivatedByPawnProximity' has a wrong offset!");

}

